// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoPublic.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ProtoSceneAddress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoSceneAddress_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoCoord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoCoord_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoMoney_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoMoney_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoChatInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoChatInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoDelItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoDelItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoTaskCond_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoTaskCond_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoTaskInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoTaskInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoFriendInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoFriendInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoSkillTarget_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoSkillTarget_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoFightInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoFightInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoMarketItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoMarketItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoSellOut_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoSellOut_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoMailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoMailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailAttach_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailAttach_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoShopItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoShopItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoPairObj_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoPairObj_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoBaseBeastInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoBaseBeastInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoBeastSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoBeastSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoMagicalRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoMagicalRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoMagicalInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoMagicalInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoSkillCombine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoSkillCombine_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoFashion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoFashion_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoFashionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoFashionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoLeagueItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoLeagueItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoLeagueMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoLeagueMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoLeagueApply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoLeagueApply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoLeagueLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoLeagueLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoLeagueShop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoLeagueShop_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoMallItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoMallItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoMallList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoMallList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoTeamer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoTeamer_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoLimitTimeLabel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoLimitTimeLabel_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoDivineRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoDivineRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoAchieveDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoAchieveDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoBrocastRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoBrocastRole_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoMonster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoMonster_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoActivityInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoActivityInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoBeast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoBeast_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoFlaunt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoFlaunt_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoSyncLeague_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoSyncLeague_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoLeagueFighter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoLeagueFighter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoExpRestore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoExpRestore_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoLMRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoLMRole_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoMarLeague_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoMarLeague_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoRoleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoRoleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoRankRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoRankRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoFBReadyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoFBReadyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoFightPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoFightPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoWarItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoWarItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoSMBattleRankRec_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoSMBattleRankRec_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoLWarItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoLWarItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldBossRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldBossRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoWorldBossRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoWorldBossRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoShoutDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoShoutDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoTreasure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoTreasure_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoScriptClean_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoScriptClean_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoHookDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoHookDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoHookSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoHookSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoFashionTipInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoFashionTipInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoVipTimeTipInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoVipTimeTipInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoScriptChapter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoScriptChapter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoSysSetting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoSysSetting_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoRpmRoleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoRpmRoleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TipsItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TipsItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoFBUseTimes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoFBUseTimes_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoMoverPos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoMoverPos_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoCustomerSVCRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoCustomerSVCRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoMediaGiftDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoMediaGiftDef_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoAreaRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoAreaRole_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoScriptInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoScriptInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoAreaRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoAreaRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoBuffStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoBuffStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoShusanBoss_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoShusanBoss_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoSuit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoSuit_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoLvlReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoLvlReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoDailyRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoDailyRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoRoleShape_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoRoleShape_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoCQAttackerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoCQAttackerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoWing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoWing_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoCQRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoCQRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoThreeObj_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoThreeObj_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoEscortMapItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoEscortMapItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoRefineSuit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoRefineSuit_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoPanicItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoPanicItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoKiller_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoKiller_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoPeakWarRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoPeakWarRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* PActTypeItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PActTypeItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PRewardItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PRewardItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoGateRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoGateRole_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoPackageItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoPackageItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoEquipPolishAttrInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoEquipPolishAttrInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoEquipPolishStruct_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoEquipPolishStruct_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoEquipPolish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoEquipPolish_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoVipGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoVipGift_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoTrialTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoTrialTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoWeddingIcon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoWeddingIcon_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoShoutItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoShoutItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PActPanelInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PActPanelInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoLeagueStoreApply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoLeagueStoreApply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoLeagueStoreApplyHis_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoLeagueStoreApplyHis_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoActRewardItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoActRewardItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoActRoleReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoActRoleReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoPairLongString_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoPairLongString_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoPairLong_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoPairLong_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoActRewardNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoActRewardNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoNearRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoNearRole_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoTravelTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoTravelTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoBrotherInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoBrotherInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoBrotherTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoBrotherTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoMagicWeapon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoMagicWeapon_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoAIllusion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoAIllusion_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoTravelTeamer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoTravelTeamer_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoPromotTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoPromotTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoTravelPeakBet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoTravelPeakBet_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoMilitaryExploits_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoMilitaryExploits_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoTravPeakWorth_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoTravPeakWorth_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoMagicActBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoMagicActBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* SecretTShopItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SecretTShopItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* StRankUnit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StRankUnit_reflection_ = NULL;
const ::google::protobuf::Descriptor* STHistoryRankUnit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  STHistoryRankUnit_reflection_ = NULL;
const ::google::protobuf::Descriptor* PTLeagueItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PTLeagueItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoSession_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoSession_reflection_ = NULL;
const ::google::protobuf::Descriptor* Illustrations_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Illustrations_reflection_ = NULL;
const ::google::protobuf::Descriptor* Illus_group_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Illus_group_reflection_ = NULL;
const ::google::protobuf::Descriptor* Illus_class_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Illus_class_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoFloorInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoFloorInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoLScoreInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoLScoreInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoScriptAdvance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoScriptAdvance_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoScriptExpInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoScriptExpInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoSpecialAwardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoSpecialAwardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoWorldBossInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoWorldBossInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoLeagueRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoLeagueRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoLWarInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoLWarInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoItemId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoItemId_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoSwordPoolTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoSwordPoolTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoSvenDayItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoSvenDayItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoSevenDayItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoSevenDayItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoLegendTopRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoLegendTopRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoApplyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoApplyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoPairMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoPairMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoDonateRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoDonateRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoMAttackLabel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoMAttackLabel_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoActivityLWarRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoActivityLWarRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoChildAchieve_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoChildAchieve_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoAchieveInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoAchieveInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoServerRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoServerRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoSlotInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoSlotInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoPersonRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoPersonRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoTimeLimitInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoTimeLimitInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoShopInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoShopInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoFashionDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoFashionDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoWeddingDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoWeddingDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoWedTreasures_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoWedTreasures_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoWeddingRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoWeddingRole_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoWeddingRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoWeddingRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoWedLabel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoWedLabel_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoActRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoActRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoWaveReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoWaveReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoPlayerCheer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoPlayerCheer_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoCheerRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoCheerRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoRechargeRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoRechargeRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoMountInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoMountInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoEquipList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoEquipList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PActCumulativeLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PActCumulativeLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoLegendTop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoLegendTop_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoWavePlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoWavePlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoTransferInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoTransferInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoScriptReset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoScriptReset_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoBackActName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoBackActName_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoBackActInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoBackActInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoBackActReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoBackActReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoTransferClient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoTransferClient_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoBackActRewardIndex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoBackActRewardIndex_reflection_ = NULL;
const ::google::protobuf::Descriptor* PActTastList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PActTastList_reflection_ = NULL;
const ::google::protobuf::Descriptor* MayRewardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MayRewardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoLimitValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoLimitValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActOpenLimitTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActOpenLimitTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoRedPacketInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoRedPacketInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoRunRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoRunRole_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoAllRedActInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoAllRedActInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoTrvlBaseRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoTrvlBaseRole_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoMayFashionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoMayFashionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoTrvlBattleRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoTrvlBattleRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoGemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoGemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoTrvlWbossMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoTrvlWbossMail_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoldingNature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoldingNature_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoCleanInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoCleanInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FishDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FishDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoTeamForceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoTeamForceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoItemExchangeTimes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoItemExchangeTimes_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoPeakQualityInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoPeakQualityInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoPeakKnockoutInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoPeakKnockoutInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpecialBoxChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpecialBoxChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoQualityRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoQualityRank_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoPublic_2eproto() {
  protobuf_AddDesc_ProtoPublic_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoPublic.proto");
  GOOGLE_CHECK(file != NULL);
  ProtoSceneAddress_descriptor_ = file->message_type(0);
  static const int ProtoSceneAddress_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSceneAddress, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSceneAddress, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSceneAddress, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSceneAddress, domain_),
  };
  ProtoSceneAddress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoSceneAddress_descriptor_,
      ProtoSceneAddress::default_instance_,
      ProtoSceneAddress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSceneAddress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSceneAddress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoSceneAddress));
  ProtoCoord_descriptor_ = file->message_type(1);
  static const int ProtoCoord_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCoord, pixel_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCoord, pixel_y_),
  };
  ProtoCoord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoCoord_descriptor_,
      ProtoCoord::default_instance_,
      ProtoCoord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCoord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCoord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoCoord));
  ProtoSkill_descriptor_ = file->message_type(2);
  static const int ProtoSkill_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSkill, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSkill, skill_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSkill, use_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSkill, use_usec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSkill, use_times_),
  };
  ProtoSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoSkill_descriptor_,
      ProtoSkill::default_instance_,
      ProtoSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoSkill));
  ProtoMoney_descriptor_ = file->message_type(3);
  static const int ProtoMoney_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMoney, copper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMoney, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMoney, bind_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMoney, bind_copper_),
  };
  ProtoMoney_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoMoney_descriptor_,
      ProtoMoney::default_instance_,
      ProtoMoney_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMoney, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMoney, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoMoney));
  ProtoItem_descriptor_ = file->message_type(4);
  static const int ProtoItem_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItem, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItem, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItem, bind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItem, equipment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItem, treausure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItem, use_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItem, use_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItem, new_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItem, unique_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItem, force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItem, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItem, out_time_item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItem, out_time_item_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItem, out_time_item_bind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItem, tips_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItem, tips_time_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItem, tips_status_map_),
  };
  ProtoItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoItem_descriptor_,
      ProtoItem::default_instance_,
      ProtoItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoItem));
  ProtoEquip_descriptor_ = file->message_type(5);
  static const int ProtoEquip_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEquip, refine_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEquip, fashion_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEquip, refine_degree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEquip, jewel_lists_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEquip, refine_lists_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEquip, molding_nature_),
  };
  ProtoEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoEquip_descriptor_,
      ProtoEquip::default_instance_,
      ProtoEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoEquip));
  ProtoChatInfo_descriptor_ = file->message_type(6);
  static const int ProtoChatInfo_offsets_[28] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoChatInfo, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoChatInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoChatInfo, voice_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoChatInfo, voice_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoChatInfo, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoChatInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoChatInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoChatInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoChatInfo, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoChatInfo, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoChatInfo, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoChatInfo, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoChatInfo, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoChatInfo, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoChatInfo, target_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoChatInfo, target_sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoChatInfo, target_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoChatInfo, target_vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoChatInfo, target_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoChatInfo, target_label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoChatInfo, flaunt_detail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoChatInfo, career_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoChatInfo, permission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoChatInfo, server_prev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoChatInfo, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoChatInfo, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoChatInfo, league_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoChatInfo, target_league_name_),
  };
  ProtoChatInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoChatInfo_descriptor_,
      ProtoChatInfo::default_instance_,
      ProtoChatInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoChatInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoChatInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoChatInfo));
  ProtoDelItem_descriptor_ = file->message_type(7);
  static const int ProtoDelItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDelItem, del_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDelItem, del_amount_),
  };
  ProtoDelItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoDelItem_descriptor_,
      ProtoDelItem::default_instance_,
      ProtoDelItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDelItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDelItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoDelItem));
  ProtoTaskCond_descriptor_ = file->message_type(8);
  static const int ProtoTaskCond_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTaskCond, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTaskCond, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTaskCond, final_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTaskCond, cond_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTaskCond, cond_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTaskCond, kill_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTaskCond, range_level_),
  };
  ProtoTaskCond_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoTaskCond_descriptor_,
      ProtoTaskCond::default_instance_,
      ProtoTaskCond_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTaskCond, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTaskCond, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoTaskCond));
  ProtoTaskInfo_descriptor_ = file->message_type(9);
  static const int ProtoTaskInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTaskInfo, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTaskInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTaskInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTaskInfo, cond_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTaskInfo, routine_dice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTaskInfo, is_first_routine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTaskInfo, task_star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTaskInfo, fast_finish_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTaskInfo, routine_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTaskInfo, routine_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTaskInfo, is_routine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTaskInfo, offer_routine_info_),
  };
  ProtoTaskInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoTaskInfo_descriptor_,
      ProtoTaskInfo::default_instance_,
      ProtoTaskInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTaskInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTaskInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoTaskInfo));
  ProtoFriendInfo_descriptor_ = file->message_type(10);
  static const int ProtoFriendInfo_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFriendInfo, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFriendInfo, icon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFriendInfo, league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFriendInfo, league_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFriendInfo, friend_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFriendInfo, vip_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFriendInfo, is_online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFriendInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFriendInfo, career_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFriendInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFriendInfo, team_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFriendInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFriendInfo, intimacy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFriendInfo, force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFriendInfo, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFriendInfo, distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFriendInfo, pixel_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFriendInfo, pixel_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFriendInfo, name_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFriendInfo, is_give_strength_),
  };
  ProtoFriendInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoFriendInfo_descriptor_,
      ProtoFriendInfo::default_instance_,
      ProtoFriendInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFriendInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFriendInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoFriendInfo));
  ProtoSkillTarget_descriptor_ = file->message_type(11);
  static const int ProtoSkillTarget_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSkillTarget, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSkillTarget, is_death_),
  };
  ProtoSkillTarget_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoSkillTarget_descriptor_,
      ProtoSkillTarget::default_instance_,
      ProtoSkillTarget_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSkillTarget, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSkillTarget, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoSkillTarget));
  ProtoFightInfo_descriptor_ = file->message_type(12);
  static const int ProtoFightInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFightInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFightInfo, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFightInfo, attackor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFightInfo, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFightInfo, tips1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFightInfo, tips2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFightInfo, tips3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFightInfo, tips4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFightInfo, experience_),
  };
  ProtoFightInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoFightInfo_descriptor_,
      ProtoFightInfo::default_instance_,
      ProtoFightInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFightInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFightInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoFightInfo));
  ProtoStatus_descriptor_ = file->message_type(13);
  static const int ProtoStatus_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoStatus, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoStatus, view_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoStatus, value1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoStatus, value2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoStatus, value3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoStatus, last_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoStatus, cool_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoStatus, attackor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoStatus, value6_),
  };
  ProtoStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoStatus_descriptor_,
      ProtoStatus::default_instance_,
      ProtoStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoStatus));
  ProtoMarketItem_descriptor_ = file->message_type(14);
  static const int ProtoMarketItem_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMarketItem, market_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMarketItem, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMarketItem, item_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMarketItem, money_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMarketItem, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMarketItem, left_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMarketItem, equip_),
  };
  ProtoMarketItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoMarketItem_descriptor_,
      ProtoMarketItem::default_instance_,
      ProtoMarketItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMarketItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMarketItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoMarketItem));
  ProtoSellOut_descriptor_ = file->message_type(15);
  static const int ProtoSellOut_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSellOut, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSellOut, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSellOut, item_bind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSellOut, item_amount_),
  };
  ProtoSellOut_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoSellOut_descriptor_,
      ProtoSellOut::default_instance_,
      ProtoSellOut_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSellOut, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSellOut, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoSellOut));
  ProtoMailInfo_descriptor_ = file->message_type(16);
  static const int ProtoMailInfo_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMailInfo, mail_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMailInfo, mail_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMailInfo, mail_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMailInfo, has_read_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMailInfo, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMailInfo, mail_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMailInfo, has_attach_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMailInfo, left_minute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMailInfo, mail_read_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMailInfo, sender_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMailInfo, sender_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMailInfo, receiver_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMailInfo, receiver_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMailInfo, mail_content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMailInfo, attach_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMailInfo, attach_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMailInfo, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMailInfo, exploit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMailInfo, format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMailInfo, sender_vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMailInfo, st_score_),
  };
  ProtoMailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoMailInfo_descriptor_,
      ProtoMailInfo::default_instance_,
      ProtoMailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoMailInfo));
  MailAttach_descriptor_ = file->message_type(17);
  static const int MailAttach_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailAttach, mail_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailAttach, pack_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailAttach, pack_amount_),
  };
  MailAttach_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailAttach_descriptor_,
      MailAttach::default_instance_,
      MailAttach_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailAttach, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailAttach, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailAttach));
  ProtoShopItem_descriptor_ = file->message_type(18);
  static const int ProtoShopItem_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoShopItem, item_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoShopItem, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoShopItem, item_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoShopItem, bind_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoShopItem, money_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoShopItem, cur_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoShopItem, need_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoShopItem, ai_script_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoShopItem, exploit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoShopItem, buyed_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoShopItem, total_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoShopItem, reputation_),
  };
  ProtoShopItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoShopItem_descriptor_,
      ProtoShopItem::default_instance_,
      ProtoShopItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoShopItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoShopItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoShopItem));
  ProtoPairObj_descriptor_ = file->message_type(19);
  static const int ProtoPairObj_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPairObj, obj_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPairObj, obj_value_),
  };
  ProtoPairObj_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoPairObj_descriptor_,
      ProtoPairObj::default_instance_,
      ProtoPairObj_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPairObj, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPairObj, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoPairObj));
  ProtoBaseBeastInfo_descriptor_ = file->message_type(20);
  static const int ProtoBaseBeastInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBaseBeastInfo, beast_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBaseBeastInfo, beast_sort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBaseBeastInfo, beast_growth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBaseBeastInfo, beast_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBaseBeastInfo, action_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBaseBeastInfo, beast_force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBaseBeastInfo, ability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBaseBeastInfo, guard_),
  };
  ProtoBaseBeastInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoBaseBeastInfo_descriptor_,
      ProtoBaseBeastInfo::default_instance_,
      ProtoBaseBeastInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBaseBeastInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBaseBeastInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoBaseBeastInfo));
  ProtoBeastSkill_descriptor_ = file->message_type(21);
  static const int ProtoBeastSkill_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBeastSkill, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBeastSkill, skill_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBeastSkill, cur_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBeastSkill, cool_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBeastSkill, skill_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBeastSkill, lock_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBeastSkill, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBeastSkill, transform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBeastSkill, type_),
  };
  ProtoBeastSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoBeastSkill_descriptor_,
      ProtoBeastSkill::default_instance_,
      ProtoBeastSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBeastSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBeastSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoBeastSkill));
  ProtoMagicalRecord_descriptor_ = file->message_type(22);
  static const int ProtoMagicalRecord_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMagicalRecord, attr_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMagicalRecord, is_locked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMagicalRecord, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMagicalRecord, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMagicalRecord, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMagicalRecord, max_value_),
  };
  ProtoMagicalRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoMagicalRecord_descriptor_,
      ProtoMagicalRecord::default_instance_,
      ProtoMagicalRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMagicalRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMagicalRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoMagicalRecord));
  ProtoMagicalInfo_descriptor_ = file->message_type(23);
  static const int ProtoMagicalInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMagicalInfo, magical_list_),
  };
  ProtoMagicalInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoMagicalInfo_descriptor_,
      ProtoMagicalInfo::default_instance_,
      ProtoMagicalInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMagicalInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMagicalInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoMagicalInfo));
  ProtoSkillCombine_descriptor_ = file->message_type(24);
  static const int ProtoSkillCombine_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSkillCombine, combine_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSkillCombine, from_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSkillCombine, to_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSkillCombine, combine_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSkillCombine, combined_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSkillCombine, combined_exp_),
  };
  ProtoSkillCombine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoSkillCombine_descriptor_,
      ProtoSkillCombine::default_instance_,
      ProtoSkillCombine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSkillCombine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSkillCombine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoSkillCombine));
  ProtoFashion_descriptor_ = file->message_type(25);
  static const int ProtoFashion_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFashion, use_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFashion, use_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFashion, expire_tick_),
  };
  ProtoFashion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoFashion_descriptor_,
      ProtoFashion::default_instance_,
      ProtoFashion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFashion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFashion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoFashion));
  ProtoFashionInfo_descriptor_ = file->message_type(26);
  static const int ProtoFashionInfo_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFashionInfo, use_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFashionInfo, left_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFashionInfo, use_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFashionInfo, expire_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFashionInfo, notify_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFashionInfo, is_in_use_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFashionInfo, vip_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFashionInfo, fashion_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFashionInfo, color_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFashionInfo, active_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFashionInfo, is_permanent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFashionInfo, active_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFashionInfo, end_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFashionInfo, color_set__),
  };
  ProtoFashionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoFashionInfo_descriptor_,
      ProtoFashionInfo::default_instance_,
      ProtoFashionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFashionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFashionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoFashionInfo));
  ProtoLeagueItem_descriptor_ = file->message_type(27);
  static const int ProtoLeagueItem_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueItem, rank_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueItem, league_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueItem, league_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueItem, league_lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueItem, current_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueItem, league_force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueItem, league_leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueItem, apply_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueItem, leader_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueItem, max_role_),
  };
  ProtoLeagueItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoLeagueItem_descriptor_,
      ProtoLeagueItem::default_instance_,
      ProtoLeagueItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoLeagueItem));
  ProtoLeagueMember_descriptor_ = file->message_type(28);
  static const int ProtoLeagueMember_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueMember, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueMember, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueMember, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueMember, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueMember, league_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueMember, role_lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueMember, role_force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueMember, cur_contri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueMember, total_contri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueMember, left_time_),
  };
  ProtoLeagueMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoLeagueMember_descriptor_,
      ProtoLeagueMember::default_instance_,
      ProtoLeagueMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoLeagueMember));
  ProtoLeagueApply_descriptor_ = file->message_type(29);
  static const int ProtoLeagueApply_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueApply, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueApply, vip_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueApply, role_sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueApply, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueApply, role_lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueApply, role_career_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueApply, role_force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueApply, online_flag_),
  };
  ProtoLeagueApply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoLeagueApply_descriptor_,
      ProtoLeagueApply::default_instance_,
      ProtoLeagueApply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueApply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueApply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoLeagueApply));
  ProtoLeagueLog_descriptor_ = file->message_type(30);
  static const int ProtoLeagueLog_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueLog, log_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueLog, log_content_),
  };
  ProtoLeagueLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoLeagueLog_descriptor_,
      ProtoLeagueLog::default_instance_,
      ProtoLeagueLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoLeagueLog));
  ProtoLeagueShop_descriptor_ = file->message_type(31);
  static const int ProtoLeagueShop_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueShop, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueShop, buy_num_),
  };
  ProtoLeagueShop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoLeagueShop_descriptor_,
      ProtoLeagueShop::default_instance_,
      ProtoLeagueShop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueShop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueShop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoLeagueShop));
  ProtoMallItem_descriptor_ = file->message_type(32);
  static const int ProtoMallItem_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMallItem, item_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMallItem, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMallItem, item_type_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMallItem, money_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMallItem, prime_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMallItem, cur_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMallItem, vip_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMallItem, limit_condt_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMallItem, limit_condt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMallItem, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMallItem, item_bind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMallItem, left_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMallItem, max_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMallItem, own_),
  };
  ProtoMallItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoMallItem_descriptor_,
      ProtoMallItem::default_instance_,
      ProtoMallItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMallItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMallItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoMallItem));
  ProtoMallList_descriptor_ = file->message_type(33);
  static const int ProtoMallList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMallList, shop_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMallList, item_list_),
  };
  ProtoMallList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoMallList_descriptor_,
      ProtoMallList::default_instance_,
      ProtoMallList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMallList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMallList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoMallList));
  ProtoTeamer_descriptor_ = file->message_type(34);
  static const int ProtoTeamer_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamer, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamer, full_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamer, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamer, role_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamer, role_force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamer, role_career_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamer, role_sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamer, vip_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamer, online_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamer, prepare_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamer, league_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamer, team_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamer, team_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamer, show_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamer, mount_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamer, prev_),
  };
  ProtoTeamer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoTeamer_descriptor_,
      ProtoTeamer::default_instance_,
      ProtoTeamer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoTeamer));
  ProtoLimitTimeLabel_descriptor_ = file->message_type(35);
  static const int ProtoLimitTimeLabel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLimitTimeLabel, label_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLimitTimeLabel, left_time_),
  };
  ProtoLimitTimeLabel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoLimitTimeLabel_descriptor_,
      ProtoLimitTimeLabel::default_instance_,
      ProtoLimitTimeLabel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLimitTimeLabel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLimitTimeLabel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoLimitTimeLabel));
  ProtoDivineRecord_descriptor_ = file->message_type(36);
  static const int ProtoDivineRecord_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDivineRecord, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDivineRecord, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDivineRecord, item_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDivineRecord, role_id_),
  };
  ProtoDivineRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoDivineRecord_descriptor_,
      ProtoDivineRecord::default_instance_,
      ProtoDivineRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDivineRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDivineRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoDivineRecord));
  ProtoAchieveDetail_descriptor_ = file->message_type(37);
  static const int ProtoAchieveDetail_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAchieveDetail, achieve_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAchieveDetail, ach_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAchieveDetail, finish_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAchieveDetail, get_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAchieveDetail, finish_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAchieveDetail, special_value_),
  };
  ProtoAchieveDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoAchieveDetail_descriptor_,
      ProtoAchieveDetail::default_instance_,
      ProtoAchieveDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAchieveDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAchieveDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoAchieveDetail));
  ProtoBrocastRole_descriptor_ = file->message_type(38);
  static const int ProtoBrocastRole_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBrocastRole, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBrocastRole, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBrocastRole, team_state_),
  };
  ProtoBrocastRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoBrocastRole_descriptor_,
      ProtoBrocastRole::default_instance_,
      ProtoBrocastRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBrocastRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBrocastRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoBrocastRole));
  ProtoMonster_descriptor_ = file->message_type(39);
  static const int ProtoMonster_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMonster, sort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMonster, left_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMonster, total_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMonster, coord_),
  };
  ProtoMonster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoMonster_descriptor_,
      ProtoMonster::default_instance_,
      ProtoMonster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMonster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMonster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoMonster));
  ProtoActivityInfo_descriptor_ = file->message_type(40);
  static const int ProtoActivityInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoActivityInfo, activity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoActivityInfo, activity_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoActivityInfo, icon_bling_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoActivityInfo, left_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoActivityInfo, sub_value_),
  };
  ProtoActivityInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoActivityInfo_descriptor_,
      ProtoActivityInfo::default_instance_,
      ProtoActivityInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoActivityInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoActivityInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoActivityInfo));
  ProtoBeast_descriptor_ = file->message_type(41);
  static const int ProtoBeast_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBeast, beast_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBeast, beast_sort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBeast, basic_attck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBeast, basic_hit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBeast, basic_crit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBeast, beast_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBeast, skill_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBeast, beast_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBeast, beast_force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBeast, ability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBeast, growth_lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBeast, growth_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBeast, beast_soul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBeast, soul_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBeast, beast_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBeast, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBeast, combine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBeast, guard_),
  };
  ProtoBeast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoBeast_descriptor_,
      ProtoBeast::default_instance_,
      ProtoBeast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBeast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBeast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoBeast));
  ProtoFlaunt_descriptor_ = file->message_type(42);
  static const int ProtoFlaunt_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFlaunt, flaunt_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFlaunt, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFlaunt, content_),
  };
  ProtoFlaunt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoFlaunt_descriptor_,
      ProtoFlaunt::default_instance_,
      ProtoFlaunt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFlaunt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFlaunt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoFlaunt));
  ProtoSyncLeague_descriptor_ = file->message_type(43);
  static const int ProtoSyncLeague_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSyncLeague, league_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSyncLeague, league_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSyncLeague, league_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSyncLeague, force_),
  };
  ProtoSyncLeague_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoSyncLeague_descriptor_,
      ProtoSyncLeague::default_instance_,
      ProtoSyncLeague_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSyncLeague, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSyncLeague, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoSyncLeague));
  ProtoLeagueFighter_descriptor_ = file->message_type(44);
  static const int ProtoLeagueFighter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueFighter, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueFighter, role_sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueFighter, role_level_),
  };
  ProtoLeagueFighter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoLeagueFighter_descriptor_,
      ProtoLeagueFighter::default_instance_,
      ProtoLeagueFighter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueFighter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueFighter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoLeagueFighter));
  ProtoExpRestore_descriptor_ = file->message_type(45);
  static const int ProtoExpRestore_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoExpRestore, activity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoExpRestore, restore_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoExpRestore, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoExpRestore, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoExpRestore, reputation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoExpRestore, honour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoExpRestore, exploit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoExpRestore, league_contri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoExpRestore, reiki_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoExpRestore, free_reward_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoExpRestore, money_reward_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoExpRestore, free_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoExpRestore, need_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoExpRestore, open_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoExpRestore, vip_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoExpRestore, show_index_),
  };
  ProtoExpRestore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoExpRestore_descriptor_,
      ProtoExpRestore::default_instance_,
      ProtoExpRestore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoExpRestore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoExpRestore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoExpRestore));
  ProtoLMRole_descriptor_ = file->message_type(46);
  static const int ProtoLMRole_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLMRole, rank_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLMRole, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLMRole, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLMRole, league_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLMRole, role_force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLMRole, fight_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLMRole, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLMRole, level_),
  };
  ProtoLMRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoLMRole_descriptor_,
      ProtoLMRole::default_instance_,
      ProtoLMRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLMRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLMRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoLMRole));
  ProtoMarLeague_descriptor_ = file->message_type(47);
  static const int ProtoMarLeague_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMarLeague, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMarLeague, league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMarLeague, leader_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMarLeague, league_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMarLeague, league_force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMarLeague, league_score_),
  };
  ProtoMarLeague_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoMarLeague_descriptor_,
      ProtoMarLeague::default_instance_,
      ProtoMarLeague_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMarLeague, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMarLeague, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoMarLeague));
  ProtoRoleInfo_descriptor_ = file->message_type(48);
  static const int ProtoRoleInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoleInfo, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoleInfo, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoleInfo, role_sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoleInfo, role_force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoleInfo, vip_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoleInfo, label_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoleInfo, role_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoleInfo, league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoleInfo, league_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoleInfo, role_career_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoleInfo, role_wing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoleInfo, role_solider_),
  };
  ProtoRoleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoRoleInfo_descriptor_,
      ProtoRoleInfo::default_instance_,
      ProtoRoleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoRoleInfo));
  ProtoRankRecord_descriptor_ = file->message_type(49);
  static const int ProtoRankRecord_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRankRecord, cur_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRankRecord, last_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRankRecord, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRankRecord, vip_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRankRecord, rank_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRankRecord, display_content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRankRecord, league_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRankRecord, additional_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRankRecord, worship_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRankRecord, is_worship_),
  };
  ProtoRankRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoRankRecord_descriptor_,
      ProtoRankRecord::default_instance_,
      ProtoRankRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRankRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRankRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoRankRecord));
  ProtoFBReadyInfo_descriptor_ = file->message_type(50);
  static const int ProtoFBReadyInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFBReadyInfo, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFBReadyInfo, is_ready_),
  };
  ProtoFBReadyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoFBReadyInfo_descriptor_,
      ProtoFBReadyInfo::default_instance_,
      ProtoFBReadyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFBReadyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFBReadyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoFBReadyInfo));
  ProtoFightPro_descriptor_ = file->message_type(51);
  static const int ProtoFightPro_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFightPro, hit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFightPro, avoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFightPro, crit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFightPro, toughness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFightPro, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFightPro, blood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFightPro, blood_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFightPro, magic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFightPro, magic_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFightPro, attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFightPro, defence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFightPro, crit_multi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFightPro, damage_multi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFightPro, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFightPro, reduction_multi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFightPro, reduction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFightPro, force_),
  };
  ProtoFightPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoFightPro_descriptor_,
      ProtoFightPro::default_instance_,
      ProtoFightPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFightPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFightPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoFightPro));
  ProtoWarItem_descriptor_ = file->message_type(52);
  static const int ProtoWarItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWarItem, league_set_),
  };
  ProtoWarItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoWarItem_descriptor_,
      ProtoWarItem::default_instance_,
      ProtoWarItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWarItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWarItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoWarItem));
  ProtoSMBattleRankRec_descriptor_ = file->message_type(53);
  static const int ProtoSMBattleRankRec_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSMBattleRankRec, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSMBattleRankRec, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSMBattleRankRec, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSMBattleRankRec, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSMBattleRankRec, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSMBattleRankRec, camp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSMBattleRankRec, kill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSMBattleRankRec, max_kill_),
  };
  ProtoSMBattleRankRec_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoSMBattleRankRec_descriptor_,
      ProtoSMBattleRankRec::default_instance_,
      ProtoSMBattleRankRec_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSMBattleRankRec, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSMBattleRankRec, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoSMBattleRankRec));
  ProtoLWarItem_descriptor_ = file->message_type(54);
  static const int ProtoLWarItem_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLWarItem, item_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLWarItem, item_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLWarItem, item_resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLWarItem, league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLWarItem, pixel_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLWarItem, pixel_y_),
  };
  ProtoLWarItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoLWarItem_descriptor_,
      ProtoLWarItem::default_instance_,
      ProtoLWarItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLWarItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLWarItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoLWarItem));
  WorldBossRank_descriptor_ = file->message_type(55);
  static const int WorldBossRank_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossRank, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossRank, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossRank, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossRank, score_),
  };
  WorldBossRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldBossRank_descriptor_,
      WorldBossRank::default_instance_,
      WorldBossRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldBossRank));
  ProtoWorldBossRank_descriptor_ = file->message_type(56);
  static const int ProtoWorldBossRank_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWorldBossRank, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWorldBossRank, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWorldBossRank, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWorldBossRank, score_),
  };
  ProtoWorldBossRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoWorldBossRank_descriptor_,
      ProtoWorldBossRank::default_instance_,
      ProtoWorldBossRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWorldBossRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWorldBossRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoWorldBossRank));
  ProtoShoutDetail_descriptor_ = file->message_type(57);
  static const int ProtoShoutDetail_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoShoutDetail, parse_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoShoutDetail, single_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoShoutDetail, single_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoShoutDetail, single_content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoShoutDetail, role_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoShoutDetail, item_tips_),
  };
  ProtoShoutDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoShoutDetail_descriptor_,
      ProtoShoutDetail::default_instance_,
      ProtoShoutDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoShoutDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoShoutDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoShoutDetail));
  ProtoTreasure_descriptor_ = file->message_type(58);
  static const int ProtoTreasure_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTreasure, coord_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTreasure, coord_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTreasure, map_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTreasure, state_),
  };
  ProtoTreasure_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoTreasure_descriptor_,
      ProtoTreasure::default_instance_,
      ProtoTreasure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTreasure, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTreasure, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoTreasure));
  ProtoScriptClean_descriptor_ = file->message_type(59);
  static const int ProtoScriptClean_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptClean, script_sort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptClean, script_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptClean, chapter_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptClean, script_use_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptClean, protect_beast_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptClean, reset_times_),
  };
  ProtoScriptClean_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoScriptClean_descriptor_,
      ProtoScriptClean::default_instance_,
      ProtoScriptClean_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptClean, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptClean, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoScriptClean));
  ProtoHookDetail_descriptor_ = file->message_type(60);
  static const int ProtoHookDetail_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoHookDetail, kill_task_monster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoHookDetail, kill_nearby_monster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoHookDetail, auto_pickup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoHookDetail, auto_call_beast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoHookDetail, auto_drug_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoHookDetail, auto_drug_blood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoHookDetail, auto_drug_magic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoHookDetail, auto_buy_drug_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoHookDetail, stop_hook_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoHookDetail, relive_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoHookDetail, hook_list_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoHookDetail, skill_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoHookDetail, kill_other_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoHookDetail, auto_drug_blood_beast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoHookDetail, auto_drug_magic_beast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoHookDetail, auto_avoid_boss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoHookDetail, is_hooking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoHookDetail, drug_blood_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoHookDetail, drug_magic_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoHookDetail, drug_blood_notify_buy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoHookDetail, drug_magic_notify_buy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoHookDetail, auto_back_main_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoHookDetail, auto_back_main_blood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoHookDetail, auto_random_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoHookDetail, auto_random_blood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoHookDetail, auto_back_main_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoHookDetail, auto_random_tick_),
  };
  ProtoHookDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoHookDetail_descriptor_,
      ProtoHookDetail::default_instance_,
      ProtoHookDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoHookDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoHookDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoHookDetail));
  ProtoHookSkill_descriptor_ = file->message_type(61);
  static const int ProtoHookSkill_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoHookSkill, hook_skill_id_),
  };
  ProtoHookSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoHookSkill_descriptor_,
      ProtoHookSkill::default_instance_,
      ProtoHookSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoHookSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoHookSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoHookSkill));
  ProtoFashionTipInfo_descriptor_ = file->message_type(62);
  static const int ProtoFashionTipInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFashionTipInfo, tip_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFashionTipInfo, fashion_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFashionTipInfo, fashion_force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFashionTipInfo, left_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFashionTipInfo, martial_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFashionTipInfo, event_id_),
  };
  ProtoFashionTipInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoFashionTipInfo_descriptor_,
      ProtoFashionTipInfo::default_instance_,
      ProtoFashionTipInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFashionTipInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFashionTipInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoFashionTipInfo));
  ProtoVipTimeTipInfo_descriptor_ = file->message_type(63);
  static const int ProtoVipTimeTipInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoVipTimeTipInfo, tip_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoVipTimeTipInfo, vip_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoVipTimeTipInfo, left_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoVipTimeTipInfo, event_id_),
  };
  ProtoVipTimeTipInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoVipTimeTipInfo_descriptor_,
      ProtoVipTimeTipInfo::default_instance_,
      ProtoVipTimeTipInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoVipTimeTipInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoVipTimeTipInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoVipTimeTipInfo));
  ProtoScriptChapter_descriptor_ = file->message_type(64);
  static const int ProtoScriptChapter_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptChapter, chapter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptChapter, is_passed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptChapter, start_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptChapter, first_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptChapter, first_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptChapter, is_started_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptChapter, best_tick_),
  };
  ProtoScriptChapter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoScriptChapter_descriptor_,
      ProtoScriptChapter::default_instance_,
      ProtoScriptChapter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptChapter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptChapter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoScriptChapter));
  ProtoSysSetting_descriptor_ = file->message_type(65);
  static const int ProtoSysSetting_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSysSetting, is_shock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSysSetting, music_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSysSetting, sound_effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSysSetting, screen_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSysSetting, shield_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSysSetting, turnoff_act_notify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSysSetting, auto_adjust_express_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSysSetting, fluency_type_),
  };
  ProtoSysSetting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoSysSetting_descriptor_,
      ProtoSysSetting::default_instance_,
      ProtoSysSetting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSysSetting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSysSetting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoSysSetting));
  ProtoRpmRoleInfo_descriptor_ = file->message_type(66);
  static const int ProtoRpmRoleInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRpmRoleInfo, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRpmRoleInfo, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRpmRoleInfo, force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRpmRoleInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRpmRoleInfo, career_),
  };
  ProtoRpmRoleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoRpmRoleInfo_descriptor_,
      ProtoRpmRoleInfo::default_instance_,
      ProtoRpmRoleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRpmRoleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRpmRoleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoRpmRoleInfo));
  TipsItem_descriptor_ = file->message_type(67);
  static const int TipsItem_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TipsItem, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TipsItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TipsItem, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TipsItem, extra_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TipsItem, vip_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TipsItem, is_special_),
  };
  TipsItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TipsItem_descriptor_,
      TipsItem::default_instance_,
      TipsItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TipsItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TipsItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TipsItem));
  ProtoFBUseTimes_descriptor_ = file->message_type(68);
  static const int ProtoFBUseTimes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFBUseTimes, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFBUseTimes, use_times_),
  };
  ProtoFBUseTimes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoFBUseTimes_descriptor_,
      ProtoFBUseTimes::default_instance_,
      ProtoFBUseTimes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFBUseTimes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFBUseTimes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoFBUseTimes));
  ProtoMoverPos_descriptor_ = file->message_type(69);
  static const int ProtoMoverPos_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMoverPos, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMoverPos, pixel_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMoverPos, pixel_y_),
  };
  ProtoMoverPos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoMoverPos_descriptor_,
      ProtoMoverPos::default_instance_,
      ProtoMoverPos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMoverPos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMoverPos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoMoverPos));
  ProtoCustomerSVCRecord_descriptor_ = file->message_type(70);
  static const int ProtoCustomerSVCRecord_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCustomerSVCRecord, record_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCustomerSVCRecord, send_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCustomerSVCRecord, record_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCustomerSVCRecord, record_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCustomerSVCRecord, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCustomerSVCRecord, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCustomerSVCRecord, replay_content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCustomerSVCRecord, last_evaluate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCustomerSVCRecord, opinion_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCustomerSVCRecord, evaluate_star_),
  };
  ProtoCustomerSVCRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoCustomerSVCRecord_descriptor_,
      ProtoCustomerSVCRecord::default_instance_,
      ProtoCustomerSVCRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCustomerSVCRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCustomerSVCRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoCustomerSVCRecord));
  ProtoMediaGiftDef_descriptor_ = file->message_type(71);
  static const int ProtoMediaGiftDef_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMediaGiftDef, gift_sort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMediaGiftDef, gift_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMediaGiftDef, value_exts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMediaGiftDef, gift_items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMediaGiftDef, gift_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMediaGiftDef, gift_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMediaGiftDef, use_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMediaGiftDef, left_use_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMediaGiftDef, icon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMediaGiftDef, font_color_),
  };
  ProtoMediaGiftDef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoMediaGiftDef_descriptor_,
      ProtoMediaGiftDef::default_instance_,
      ProtoMediaGiftDef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMediaGiftDef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMediaGiftDef, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoMediaGiftDef));
  ProtoAreaRole_descriptor_ = file->message_type(72);
  static const int ProtoAreaRole_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAreaRole, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAreaRole, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAreaRole, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAreaRole, force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAreaRole, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAreaRole, weapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAreaRole, clothes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAreaRole, fashion_weapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAreaRole, fashion_clothes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAreaRole, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAreaRole, career_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAreaRole, wing_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAreaRole, solider_level_),
  };
  ProtoAreaRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoAreaRole_descriptor_,
      ProtoAreaRole::default_instance_,
      ProtoAreaRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAreaRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAreaRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoAreaRole));
  ProtoScriptInfo_descriptor_ = file->message_type(73);
  static const int ProtoScriptInfo_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptInfo, script_sort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptInfo, left_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptInfo, star_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptInfo, is_pass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptInfo, is_open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptInfo, left_buy_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptInfo, buy_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptInfo, left_get_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptInfo, today_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptInfo, floor_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptInfo, pass_floor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptInfo, reset_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptInfo, is_sweep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptInfo, pass_piece_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptInfo, pass_chapter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptInfo, special_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptInfo, is_first_pass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptInfo, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptInfo, start_wave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptInfo, start_chapter_),
  };
  ProtoScriptInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoScriptInfo_descriptor_,
      ProtoScriptInfo::default_instance_,
      ProtoScriptInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoScriptInfo));
  ProtoAreaRecord_descriptor_ = file->message_type(74);
  static const int ProtoAreaRecord_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAreaRecord, pass_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAreaRecord, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAreaRecord, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAreaRecord, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAreaRecord, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAreaRecord, rank_change_),
  };
  ProtoAreaRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoAreaRecord_descriptor_,
      ProtoAreaRecord::default_instance_,
      ProtoAreaRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAreaRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAreaRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoAreaRecord));
  ProtoBuffStatus_descriptor_ = file->message_type(75);
  static const int ProtoBuffStatus_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBuffStatus, buff_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBuffStatus, last_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBuffStatus, interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBuffStatus, check_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBuffStatus, prop_id_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBuffStatus, value_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBuffStatus, percent_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBuffStatus, hidden_),
  };
  ProtoBuffStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoBuffStatus_descriptor_,
      ProtoBuffStatus::default_instance_,
      ProtoBuffStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBuffStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBuffStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoBuffStatus));
  ProtoShusanBoss_descriptor_ = file->message_type(76);
  static const int ProtoShusanBoss_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoShusanBoss, boss_sort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoShusanBoss, boss_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoShusanBoss, born_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoShusanBoss, aim_role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoShusanBoss, last_role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoShusanBoss, last_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoShusanBoss, floor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoShusanBoss, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoShusanBoss, born_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoShusanBoss, space_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoShusanBoss, left_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoShusanBoss, is_pack_full_),
  };
  ProtoShusanBoss_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoShusanBoss_descriptor_,
      ProtoShusanBoss::default_instance_,
      ProtoShusanBoss_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoShusanBoss, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoShusanBoss, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoShusanBoss));
  ProtoSuit_descriptor_ = file->message_type(77);
  static const int ProtoSuit_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSuit, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSuit, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSuit, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSuit, suit_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSuit, is_active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSuit, upper_is_suit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSuit, is_min_level_),
  };
  ProtoSuit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoSuit_descriptor_,
      ProtoSuit::default_instance_,
      ProtoSuit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSuit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSuit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoSuit));
  ProtoLvlReward_descriptor_ = file->message_type(78);
  static const int ProtoLvlReward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLvlReward, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLvlReward, validate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLvlReward, items_),
  };
  ProtoLvlReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoLvlReward_descriptor_,
      ProtoLvlReward::default_instance_,
      ProtoLvlReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLvlReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLvlReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoLvlReward));
  ProtoDailyRecord_descriptor_ = file->message_type(79);
  static const int ProtoDailyRecord_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDailyRecord, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDailyRecord, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDailyRecord, has_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDailyRecord, is_over_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDailyRecord, curr_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDailyRecord, sort_),
  };
  ProtoDailyRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoDailyRecord_descriptor_,
      ProtoDailyRecord::default_instance_,
      ProtoDailyRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDailyRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDailyRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoDailyRecord));
  ProtoRoleShape_descriptor_ = file->message_type(80);
  static const int ProtoRoleShape_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoleShape, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoleShape, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoleShape, weapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoleShape, clothes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoleShape, fashion_weapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoleShape, fashion_clothes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoleShape, career_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoleShape, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoleShape, wing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoleShape, god_weapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoleShape, mount_sort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoleShape, sword_pool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoleShape, tian_gang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoleShape, fashion_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoleShape, fashion_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoleShape, transfer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoleShape, hickty_id_),
  };
  ProtoRoleShape_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoRoleShape_descriptor_,
      ProtoRoleShape::default_instance_,
      ProtoRoleShape_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoleShape, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRoleShape, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoRoleShape));
  ProtoCQAttackerInfo_descriptor_ = file->message_type(81);
  static const int ProtoCQAttackerInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCQAttackerInfo, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCQAttackerInfo, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCQAttackerInfo, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCQAttackerInfo, status_),
  };
  ProtoCQAttackerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoCQAttackerInfo_descriptor_,
      ProtoCQAttackerInfo::default_instance_,
      ProtoCQAttackerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCQAttackerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCQAttackerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoCQAttackerInfo));
  ProtoWing_descriptor_ = file->message_type(82);
  static const int ProtoWing_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWing, wing_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWing, wing_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWing, wing_process_),
  };
  ProtoWing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoWing_descriptor_,
      ProtoWing::default_instance_,
      ProtoWing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoWing));
  ProtoCQRank_descriptor_ = file->message_type(83);
  static const int ProtoCQRank_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCQRank, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCQRank, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCQRank, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCQRank, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCQRank, fight_time_),
  };
  ProtoCQRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoCQRank_descriptor_,
      ProtoCQRank::default_instance_,
      ProtoCQRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCQRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCQRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoCQRank));
  ProtoThreeObj_descriptor_ = file->message_type(84);
  static const int ProtoThreeObj_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoThreeObj, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoThreeObj, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoThreeObj, tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoThreeObj, total_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoThreeObj, last_tick_),
  };
  ProtoThreeObj_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoThreeObj_descriptor_,
      ProtoThreeObj::default_instance_,
      ProtoThreeObj_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoThreeObj, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoThreeObj, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoThreeObj));
  ProtoEscortMapItem_descriptor_ = file->message_type(85);
  static const int ProtoEscortMapItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEscortMapItem, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEscortMapItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEscortMapItem, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEscortMapItem, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEscortMapItem, name_),
  };
  ProtoEscortMapItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoEscortMapItem_descriptor_,
      ProtoEscortMapItem::default_instance_,
      ProtoEscortMapItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEscortMapItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEscortMapItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoEscortMapItem));
  ProtoRefineSuit_descriptor_ = file->message_type(86);
  static const int ProtoRefineSuit_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRefineSuit, is_activity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRefineSuit, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRefineSuit, count_),
  };
  ProtoRefineSuit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoRefineSuit_descriptor_,
      ProtoRefineSuit::default_instance_,
      ProtoRefineSuit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRefineSuit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRefineSuit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoRefineSuit));
  ProtoPanicItem_descriptor_ = file->message_type(87);
  static const int ProtoPanicItem_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPanicItem, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPanicItem, org_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPanicItem, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPanicItem, left_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPanicItem, limit_buy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPanicItem, left_buy_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPanicItem, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPanicItem, item_bind_),
  };
  ProtoPanicItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoPanicItem_descriptor_,
      ProtoPanicItem::default_instance_,
      ProtoPanicItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPanicItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPanicItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoPanicItem));
  ProtoKiller_descriptor_ = file->message_type(88);
  static const int ProtoKiller_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoKiller, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoKiller, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoKiller, role_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoKiller, fight_force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoKiller, kill_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoKiller, lastest_kill_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoKiller, is_in_scene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoKiller, role_sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoKiller, kill_tick_),
  };
  ProtoKiller_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoKiller_descriptor_,
      ProtoKiller::default_instance_,
      ProtoKiller_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoKiller, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoKiller, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoKiller));
  ProtoPeakWarRank_descriptor_ = file->message_type(89);
  static const int ProtoPeakWarRank_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPeakWarRank, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPeakWarRank, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPeakWarRank, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPeakWarRank, kill_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPeakWarRank, floor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPeakWarRank, exploit_),
  };
  ProtoPeakWarRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoPeakWarRank_descriptor_,
      ProtoPeakWarRank::default_instance_,
      ProtoPeakWarRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPeakWarRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPeakWarRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoPeakWarRank));
  PActTypeItem_descriptor_ = file->message_type(90);
  static const int PActTypeItem_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PActTypeItem, reward_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PActTypeItem, sub_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PActTypeItem, second_sub_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PActTypeItem, update_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PActTypeItem, act_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PActTypeItem, first_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PActTypeItem, second_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PActTypeItem, open_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PActTypeItem, reward_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PActTypeItem, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PActTypeItem, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PActTypeItem, start_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PActTypeItem, stop_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PActTypeItem, agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PActTypeItem, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PActTypeItem, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PActTypeItem, icon_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PActTypeItem, role_recharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PActTypeItem, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PActTypeItem, role_consume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PActTypeItem, cumulative_login_),
  };
  PActTypeItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PActTypeItem_descriptor_,
      PActTypeItem::default_instance_,
      PActTypeItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PActTypeItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PActTypeItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PActTypeItem));
  PRewardItem_descriptor_ = file->message_type(91);
  static const int PRewardItem_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRewardItem, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRewardItem, reward_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRewardItem, reward_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRewardItem, draw_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRewardItem, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRewardItem, cond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRewardItem, arrive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRewardItem, drawed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRewardItem, role_id_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRewardItem, brocast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRewardItem, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRewardItem, sub_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRewardItem, recharge_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRewardItem, must_reset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRewardItem, cost_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRewardItem, pre_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRewardItem, exchange_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRewardItem, exchange_item_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRewardItem, cash_coupon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRewardItem, sub_value_),
  };
  PRewardItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PRewardItem_descriptor_,
      PRewardItem::default_instance_,
      PRewardItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRewardItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRewardItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PRewardItem));
  ProtoGateRole_descriptor_ = file->message_type(92);
  static const int ProtoGateRole_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoGateRole, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoGateRole, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoGateRole, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoGateRole, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoGateRole, career_),
  };
  ProtoGateRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoGateRole_descriptor_,
      ProtoGateRole::default_instance_,
      ProtoGateRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoGateRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoGateRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoGateRole));
  ProtoPackageItem_descriptor_ = file->message_type(93);
  static const int ProtoPackageItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPackageItem, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPackageItem, item_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPackageItem, item_type_),
  };
  ProtoPackageItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoPackageItem_descriptor_,
      ProtoPackageItem::default_instance_,
      ProtoPackageItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPackageItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPackageItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoPackageItem));
  ProtoEquipPolishAttrInfo_descriptor_ = file->message_type(94);
  static const int ProtoEquipPolishAttrInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEquipPolishAttrInfo, lock_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEquipPolishAttrInfo, attr_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEquipPolishAttrInfo, cur_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEquipPolishAttrInfo, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEquipPolishAttrInfo, max_value_),
  };
  ProtoEquipPolishAttrInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoEquipPolishAttrInfo_descriptor_,
      ProtoEquipPolishAttrInfo::default_instance_,
      ProtoEquipPolishAttrInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEquipPolishAttrInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEquipPolishAttrInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoEquipPolishAttrInfo));
  ProtoEquipPolishStruct_descriptor_ = file->message_type(95);
  static const int ProtoEquipPolishStruct_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEquipPolishStruct, equip_polish_info_),
  };
  ProtoEquipPolishStruct_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoEquipPolishStruct_descriptor_,
      ProtoEquipPolishStruct::default_instance_,
      ProtoEquipPolishStruct_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEquipPolishStruct, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEquipPolishStruct, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoEquipPolishStruct));
  ProtoEquipPolish_descriptor_ = file->message_type(96);
  static const int ProtoEquipPolish_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEquipPolish, cur_polish_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEquipPolish, single_polish_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEquipPolish, batch_polish_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEquipPolish, process_value_),
  };
  ProtoEquipPolish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoEquipPolish_descriptor_,
      ProtoEquipPolish::default_instance_,
      ProtoEquipPolish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEquipPolish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEquipPolish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoEquipPolish));
  ProtoVipGift_descriptor_ = file->message_type(97);
  static const int ProtoVipGift_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoVipGift, item_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoVipGift, vip_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoVipGift, ishasgift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoVipGift, reward_id_),
  };
  ProtoVipGift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoVipGift_descriptor_,
      ProtoVipGift::default_instance_,
      ProtoVipGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoVipGift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoVipGift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoVipGift));
  ProtoTrialTask_descriptor_ = file->message_type(98);
  static const int ProtoTrialTask_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTrialTask, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTrialTask, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTrialTask, award_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTrialTask, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTrialTask, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTrialTask, final_value_),
  };
  ProtoTrialTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoTrialTask_descriptor_,
      ProtoTrialTask::default_instance_,
      ProtoTrialTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTrialTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTrialTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoTrialTask));
  ProtoWeddingIcon_descriptor_ = file->message_type(99);
  static const int ProtoWeddingIcon_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWeddingIcon, wedding_req_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWeddingIcon, wedding_req_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWeddingIcon, wedding_partner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWeddingIcon, wedding_partner_name_),
  };
  ProtoWeddingIcon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoWeddingIcon_descriptor_,
      ProtoWeddingIcon::default_instance_,
      ProtoWeddingIcon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWeddingIcon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWeddingIcon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoWeddingIcon));
  ProtoShoutItem_descriptor_ = file->message_type(100);
  static const int ProtoShoutItem_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoShoutItem, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoShoutItem, item_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoShoutItem, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoShoutItem, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoShoutItem, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoShoutItem, item_num_),
  };
  ProtoShoutItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoShoutItem_descriptor_,
      ProtoShoutItem::default_instance_,
      ProtoShoutItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoShoutItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoShoutItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoShoutItem));
  PActPanelInfo_descriptor_ = file->message_type(101);
  static const int PActPanelInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PActPanelInfo, act_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PActPanelInfo, first_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PActPanelInfo, second_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PActPanelInfo, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PActPanelInfo, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PActPanelInfo, start_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PActPanelInfo, end_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PActPanelInfo, reward_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PActPanelInfo, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PActPanelInfo, times_),
  };
  PActPanelInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PActPanelInfo_descriptor_,
      PActPanelInfo::default_instance_,
      PActPanelInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PActPanelInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PActPanelInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PActPanelInfo));
  ProtoLeagueStoreApply_descriptor_ = file->message_type(102);
  static const int ProtoLeagueStoreApply_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueStoreApply, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueStoreApply, role_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueStoreApply, contri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueStoreApply, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueStoreApply, item_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueStoreApply, apply_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueStoreApply, item_),
  };
  ProtoLeagueStoreApply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoLeagueStoreApply_descriptor_,
      ProtoLeagueStoreApply::default_instance_,
      ProtoLeagueStoreApply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueStoreApply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueStoreApply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoLeagueStoreApply));
  ProtoLeagueStoreApplyHis_descriptor_ = file->message_type(103);
  static const int ProtoLeagueStoreApplyHis_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueStoreApplyHis, exec_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueStoreApplyHis, exec_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueStoreApplyHis, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueStoreApplyHis, item_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueStoreApplyHis, checker_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueStoreApplyHis, exec_),
  };
  ProtoLeagueStoreApplyHis_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoLeagueStoreApplyHis_descriptor_,
      ProtoLeagueStoreApplyHis::default_instance_,
      ProtoLeagueStoreApplyHis_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueStoreApplyHis, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueStoreApplyHis, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoLeagueStoreApplyHis));
  ProtoActRewardItem_descriptor_ = file->message_type(104);
  static const int ProtoActRewardItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoActRewardItem, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoActRewardItem, count_),
  };
  ProtoActRewardItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoActRewardItem_descriptor_,
      ProtoActRewardItem::default_instance_,
      ProtoActRewardItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoActRewardItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoActRewardItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoActRewardItem));
  ProtoActRoleReward_descriptor_ = file->message_type(105);
  static const int ProtoActRoleReward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoActRoleReward, drawed_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoActRoleReward, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoActRoleReward, carrer_),
  };
  ProtoActRoleReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoActRoleReward_descriptor_,
      ProtoActRoleReward::default_instance_,
      ProtoActRoleReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoActRoleReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoActRoleReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoActRoleReward));
  ProtoPairLongString_descriptor_ = file->message_type(106);
  static const int ProtoPairLongString_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPairLongString, data_int64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPairLongString, data_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPairLongString, league_),
  };
  ProtoPairLongString_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoPairLongString_descriptor_,
      ProtoPairLongString::default_instance_,
      ProtoPairLongString_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPairLongString, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPairLongString, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoPairLongString));
  ProtoPairLong_descriptor_ = file->message_type(107);
  static const int ProtoPairLong_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPairLong, obj_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPairLong, obj_value_),
  };
  ProtoPairLong_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoPairLong_descriptor_,
      ProtoPairLong::default_instance_,
      ProtoPairLong_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPairLong, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPairLong, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoPairLong));
  ProtoActRewardNotify_descriptor_ = file->message_type(108);
  static const int ProtoActRewardNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoActRewardNotify, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoActRewardNotify, act_index_),
  };
  ProtoActRewardNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoActRewardNotify_descriptor_,
      ProtoActRewardNotify::default_instance_,
      ProtoActRewardNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoActRewardNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoActRewardNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoActRewardNotify));
  ProtoNearRole_descriptor_ = file->message_type(109);
  static const int ProtoNearRole_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNearRole, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNearRole, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNearRole, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNearRole, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNearRole, name_color_),
  };
  ProtoNearRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoNearRole_descriptor_,
      ProtoNearRole::default_instance_,
      ProtoNearRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNearRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoNearRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoNearRole));
  ProtoTravelTeam_descriptor_ = file->message_type(110);
  static const int ProtoTravelTeam_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTravelTeam, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTravelTeam, team_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTravelTeam, leader_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTravelTeam, leader_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTravelTeam, teamer_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTravelTeam, team_force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTravelTeam, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTravelTeam, sceret_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTravelTeam, limit_force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTravelTeam, auto_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTravelTeam, start_fb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTravelTeam, teamer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTravelTeam, is_apply_),
  };
  ProtoTravelTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoTravelTeam_descriptor_,
      ProtoTravelTeam::default_instance_,
      ProtoTravelTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTravelTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTravelTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoTravelTeam));
  ProtoBrotherInfo_descriptor_ = file->message_type(111);
  static const int ProtoBrotherInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBrotherInfo, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBrotherInfo, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBrotherInfo, role_career_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBrotherInfo, role_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBrotherInfo, emotion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBrotherInfo, online_),
  };
  ProtoBrotherInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoBrotherInfo_descriptor_,
      ProtoBrotherInfo::default_instance_,
      ProtoBrotherInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBrotherInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBrotherInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoBrotherInfo));
  ProtoBrotherTask_descriptor_ = file->message_type(112);
  static const int ProtoBrotherTask_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBrotherTask, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBrotherTask, finished_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBrotherTask, finished_player_),
  };
  ProtoBrotherTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoBrotherTask_descriptor_,
      ProtoBrotherTask::default_instance_,
      ProtoBrotherTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBrotherTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBrotherTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoBrotherTask));
  ProtoMagicWeapon_descriptor_ = file->message_type(113);
  static const int ProtoMagicWeapon_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMagicWeapon, magicweapon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMagicWeapon, rank_star_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMagicWeapon, rank_star_progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMagicWeapon, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMagicWeapon, skill_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMagicWeapon, qua_star_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMagicWeapon, qua_star_progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMagicWeapon, activate_state_),
  };
  ProtoMagicWeapon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoMagicWeapon_descriptor_,
      ProtoMagicWeapon::default_instance_,
      ProtoMagicWeapon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMagicWeapon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMagicWeapon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoMagicWeapon));
  ProtoAIllusion_descriptor_ = file->message_type(114);
  static const int ProtoAIllusion_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAIllusion, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAIllusion, unlock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAIllusion, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAIllusion, last_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAIllusion, unlock_type_),
  };
  ProtoAIllusion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoAIllusion_descriptor_,
      ProtoAIllusion::default_instance_,
      ProtoAIllusion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAIllusion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAIllusion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoAIllusion));
  ProtoTravelTeamer_descriptor_ = file->message_type(115);
  static const int ProtoTravelTeamer_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTravelTeamer, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTravelTeamer, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTravelTeamer, role_sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTravelTeamer, role_career_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTravelTeamer, left_blood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTravelTeamer, total_blood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTravelTeamer, left_magic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTravelTeamer, total_magic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTravelTeamer, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTravelTeamer, fight_force_),
  };
  ProtoTravelTeamer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoTravelTeamer_descriptor_,
      ProtoTravelTeamer::default_instance_,
      ProtoTravelTeamer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTravelTeamer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTravelTeamer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoTravelTeamer));
  ProtoPromotTeam_descriptor_ = file->message_type(116);
  static const int ProtoPromotTeam_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPromotTeam, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPromotTeam, team_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPromotTeam, server_prev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPromotTeam, is_bet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPromotTeam, is_promot_turns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPromotTeam, is_next_turns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPromotTeam, team_icon_),
  };
  ProtoPromotTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoPromotTeam_descriptor_,
      ProtoPromotTeam::default_instance_,
      ProtoPromotTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPromotTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPromotTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoPromotTeam));
  ProtoTravelPeakBet_descriptor_ = file->message_type(117);
  static const int ProtoTravelPeakBet_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTravelPeakBet, promot_turns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTravelPeakBet, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTravelPeakBet, team_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTravelPeakBet, server_prev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTravelPeakBet, copper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTravelPeakBet, state_),
  };
  ProtoTravelPeakBet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoTravelPeakBet_descriptor_,
      ProtoTravelPeakBet::default_instance_,
      ProtoTravelPeakBet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTravelPeakBet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTravelPeakBet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoTravelPeakBet));
  ProtoMilitaryExploits_descriptor_ = file->message_type(118);
  static const int ProtoMilitaryExploits_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMilitaryExploits, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMilitaryExploits, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMilitaryExploits, team_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMilitaryExploits, server_prev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMilitaryExploits, win_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMilitaryExploits, loss_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMilitaryExploits, result_),
  };
  ProtoMilitaryExploits_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoMilitaryExploits_descriptor_,
      ProtoMilitaryExploits::default_instance_,
      ProtoMilitaryExploits_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMilitaryExploits, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMilitaryExploits, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoMilitaryExploits));
  ProtoTravPeakWorth_descriptor_ = file->message_type(119);
  static const int ProtoTravPeakWorth_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTravPeakWorth, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTravPeakWorth, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTravPeakWorth, team_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTravPeakWorth, team_force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTravPeakWorth, worth_),
  };
  ProtoTravPeakWorth_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoTravPeakWorth_descriptor_,
      ProtoTravPeakWorth::default_instance_,
      ProtoTravPeakWorth_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTravPeakWorth, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTravPeakWorth, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoTravPeakWorth));
  ProtoMagicActBase_descriptor_ = file->message_type(120);
  static const int ProtoMagicActBase_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMagicActBase, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMagicActBase, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMagicActBase, degree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMagicActBase, auto_use_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMagicActBase, part_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMagicActBase, magic_id_),
  };
  ProtoMagicActBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoMagicActBase_descriptor_,
      ProtoMagicActBase::default_instance_,
      ProtoMagicActBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMagicActBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMagicActBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoMagicActBase));
  SecretTShopItem_descriptor_ = file->message_type(121);
  static const int SecretTShopItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecretTShopItem, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecretTShopItem, buy_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecretTShopItem, bind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecretTShopItem, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecretTShopItem, amount_),
  };
  SecretTShopItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SecretTShopItem_descriptor_,
      SecretTShopItem::default_instance_,
      SecretTShopItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecretTShopItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecretTShopItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SecretTShopItem));
  StRankUnit_descriptor_ = file->message_type(122);
  static const int StRankUnit_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StRankUnit, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StRankUnit, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StRankUnit, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StRankUnit, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StRankUnit, coord_),
  };
  StRankUnit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StRankUnit_descriptor_,
      StRankUnit::default_instance_,
      StRankUnit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StRankUnit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StRankUnit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StRankUnit));
  STHistoryRankUnit_descriptor_ = file->message_type(123);
  static const int STHistoryRankUnit_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STHistoryRankUnit, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STHistoryRankUnit, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STHistoryRankUnit, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STHistoryRankUnit, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STHistoryRankUnit, val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STHistoryRankUnit, rank_),
  };
  STHistoryRankUnit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      STHistoryRankUnit_descriptor_,
      STHistoryRankUnit::default_instance_,
      STHistoryRankUnit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STHistoryRankUnit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STHistoryRankUnit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(STHistoryRankUnit));
  PTLeagueItem_descriptor_ = file->message_type(124);
  static const int PTLeagueItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PTLeagueItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PTLeagueItem, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PTLeagueItem, result_),
  };
  PTLeagueItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PTLeagueItem_descriptor_,
      PTLeagueItem::default_instance_,
      PTLeagueItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PTLeagueItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PTLeagueItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PTLeagueItem));
  ProtoSession_descriptor_ = file->message_type(125);
  static const int ProtoSession_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSession, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSession, session_),
  };
  ProtoSession_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoSession_descriptor_,
      ProtoSession::default_instance_,
      ProtoSession_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSession, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSession, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoSession));
  Illustrations_descriptor_ = file->message_type(126);
  static const int Illustrations_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Illustrations, illus_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Illustrations, illus_class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Illustrations, illus_group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Illustrations, illus_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Illustrations, upgrade_goods_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Illustrations, upgrade_goods_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Illustrations, open_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Illustrations, attr_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Illustrations, cur_value_),
  };
  Illustrations_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Illustrations_descriptor_,
      Illustrations::default_instance_,
      Illustrations_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Illustrations, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Illustrations, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Illustrations));
  Illus_group_descriptor_ = file->message_type(127);
  static const int Illus_group_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Illus_group, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Illus_group, group_type_),
  };
  Illus_group_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Illus_group_descriptor_,
      Illus_group::default_instance_,
      Illus_group_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Illus_group, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Illus_group, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Illus_group));
  Illus_class_descriptor_ = file->message_type(128);
  static const int Illus_class_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Illus_class, group_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Illus_class, class_id_),
  };
  Illus_class_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Illus_class_descriptor_,
      Illus_class::default_instance_,
      Illus_class_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Illus_class, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Illus_class, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Illus_class));
  ProtoFloorInfo_descriptor_ = file->message_type(129);
  static const int ProtoFloorInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFloorInfo, floor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFloorInfo, is_special_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFloorInfo, pass_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFloorInfo, is_today_pass_),
  };
  ProtoFloorInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoFloorInfo_descriptor_,
      ProtoFloorInfo::default_instance_,
      ProtoFloorInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFloorInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFloorInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoFloorInfo));
  ProtoLScoreInfo_descriptor_ = file->message_type(130);
  static const int ProtoLScoreInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLScoreInfo, role_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLScoreInfo, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLScoreInfo, role_hurt_),
  };
  ProtoLScoreInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoLScoreInfo_descriptor_,
      ProtoLScoreInfo::default_instance_,
      ProtoLScoreInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLScoreInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLScoreInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoLScoreInfo));
  ProtoScriptAdvance_descriptor_ = file->message_type(131);
  static const int ProtoScriptAdvance_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptAdvance, script_sort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptAdvance, left_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptAdvance, reset_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptAdvance, is_sweep_),
  };
  ProtoScriptAdvance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoScriptAdvance_descriptor_,
      ProtoScriptAdvance::default_instance_,
      ProtoScriptAdvance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptAdvance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptAdvance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoScriptAdvance));
  ProtoScriptExpInfo_descriptor_ = file->message_type(132);
  static const int ProtoScriptExpInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptExpInfo, chapter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptExpInfo, is_today_pass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptExpInfo, is_pass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptExpInfo, is_open_),
  };
  ProtoScriptExpInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoScriptExpInfo_descriptor_,
      ProtoScriptExpInfo::default_instance_,
      ProtoScriptExpInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptExpInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptExpInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoScriptExpInfo));
  ProtoSpecialAwardInfo_descriptor_ = file->message_type(133);
  static const int ProtoSpecialAwardInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSpecialAwardInfo, script_wave_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSpecialAwardInfo, script_sort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSpecialAwardInfo, wave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSpecialAwardInfo, is_get_),
  };
  ProtoSpecialAwardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoSpecialAwardInfo_descriptor_,
      ProtoSpecialAwardInfo::default_instance_,
      ProtoSpecialAwardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSpecialAwardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSpecialAwardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoSpecialAwardInfo));
  ProtoServer_descriptor_ = file->message_type(134);
  static const int ProtoServer_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoServer, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoServer, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoServer, prev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoServer, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoServer, cur_flag_),
  };
  ProtoServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoServer_descriptor_,
      ProtoServer::default_instance_,
      ProtoServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoServer));
  ProtoWorldBossInfo_descriptor_ = file->message_type(135);
  static const int ProtoWorldBossInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWorldBossInfo, boss_scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWorldBossInfo, boss_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWorldBossInfo, blood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWorldBossInfo, killer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWorldBossInfo, is_full_),
  };
  ProtoWorldBossInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoWorldBossInfo_descriptor_,
      ProtoWorldBossInfo::default_instance_,
      ProtoWorldBossInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWorldBossInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWorldBossInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoWorldBossInfo));
  ProtoLeagueRankInfo_descriptor_ = file->message_type(136);
  static const int ProtoLeagueRankInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueRankInfo, league_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueRankInfo, league_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueRankInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueRankInfo, hurt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueRankInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueRankInfo, space_id_),
  };
  ProtoLeagueRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoLeagueRankInfo_descriptor_,
      ProtoLeagueRankInfo::default_instance_,
      ProtoLeagueRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLeagueRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoLeagueRankInfo));
  ProtoLWarInfo_descriptor_ = file->message_type(137);
  static const int ProtoLWarInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLWarInfo, space_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLWarInfo, attack_resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLWarInfo, defence_resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLWarInfo, attack_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLWarInfo, defence_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLWarInfo, attack_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLWarInfo, defence_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLWarInfo, boss_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLWarInfo, boss_blood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLWarInfo, room_league_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLWarInfo, room_my_league_),
  };
  ProtoLWarInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoLWarInfo_descriptor_,
      ProtoLWarInfo::default_instance_,
      ProtoLWarInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLWarInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLWarInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoLWarInfo));
  ProtoItemId_descriptor_ = file->message_type(138);
  static const int ProtoItemId_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItemId, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItemId, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItemId, bind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItemId, cond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItemId, state_),
  };
  ProtoItemId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoItemId_descriptor_,
      ProtoItemId::default_instance_,
      ProtoItemId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItemId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItemId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoItemId));
  ProtoSwordPoolTask_descriptor_ = file->message_type(139);
  static const int ProtoSwordPoolTask_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSwordPoolTask, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSwordPoolTask, total_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSwordPoolTask, left_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSwordPoolTask, once_exp_),
  };
  ProtoSwordPoolTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoSwordPoolTask_descriptor_,
      ProtoSwordPoolTask::default_instance_,
      ProtoSwordPoolTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSwordPoolTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSwordPoolTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoSwordPoolTask));
  ProtoSvenDayItem_descriptor_ = file->message_type(140);
  static const int ProtoSvenDayItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSvenDayItem, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSvenDayItem, item_id_),
  };
  ProtoSvenDayItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoSvenDayItem_descriptor_,
      ProtoSvenDayItem::default_instance_,
      ProtoSvenDayItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSvenDayItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSvenDayItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoSvenDayItem));
  ProtoSevenDayItem_descriptor_ = file->message_type(141);
  static const int ProtoSevenDayItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSevenDayItem, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSevenDayItem, item_id_),
  };
  ProtoSevenDayItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoSevenDayItem_descriptor_,
      ProtoSevenDayItem::default_instance_,
      ProtoSevenDayItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSevenDayItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSevenDayItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoSevenDayItem));
  ProtoLegendTopRank_descriptor_ = file->message_type(142);
  static const int ProtoLegendTopRank_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLegendTopRank, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLegendTopRank, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLegendTopRank, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLegendTopRank, fight_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLegendTopRank, floor_),
  };
  ProtoLegendTopRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoLegendTopRank_descriptor_,
      ProtoLegendTopRank::default_instance_,
      ProtoLegendTopRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLegendTopRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLegendTopRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoLegendTopRank));
  ProtoApplyInfo_descriptor_ = file->message_type(143);
  static const int ProtoApplyInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoApplyInfo, friend_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoApplyInfo, friend_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoApplyInfo, league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoApplyInfo, league_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoApplyInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoApplyInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoApplyInfo, tick_),
  };
  ProtoApplyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoApplyInfo_descriptor_,
      ProtoApplyInfo::default_instance_,
      ProtoApplyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoApplyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoApplyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoApplyInfo));
  ProtoPairMap_descriptor_ = file->message_type(144);
  static const int ProtoPairMap_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPairMap, obj_list_),
  };
  ProtoPairMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoPairMap_descriptor_,
      ProtoPairMap::default_instance_,
      ProtoPairMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPairMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPairMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoPairMap));
  ProtoDonateRank_descriptor_ = file->message_type(145);
  static const int ProtoDonateRank_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDonateRank, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDonateRank, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDonateRank, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDonateRank, contri_),
  };
  ProtoDonateRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoDonateRank_descriptor_,
      ProtoDonateRank::default_instance_,
      ProtoDonateRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDonateRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDonateRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoDonateRank));
  ProtoMAttackLabel_descriptor_ = file->message_type(146);
  static const int ProtoMAttackLabel_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMAttackLabel, label_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMAttackLabel, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMAttackLabel, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMAttackLabel, role_sex_),
  };
  ProtoMAttackLabel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoMAttackLabel_descriptor_,
      ProtoMAttackLabel::default_instance_,
      ProtoMAttackLabel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMAttackLabel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMAttackLabel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoMAttackLabel));
  ProtoActivityLWarRank_descriptor_ = file->message_type(147);
  static const int ProtoActivityLWarRank_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoActivityLWarRank, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoActivityLWarRank, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoActivityLWarRank, is_leader_),
  };
  ProtoActivityLWarRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoActivityLWarRank_descriptor_,
      ProtoActivityLWarRank::default_instance_,
      ProtoActivityLWarRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoActivityLWarRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoActivityLWarRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoActivityLWarRank));
  ProtoChildAchieve_descriptor_ = file->message_type(148);
  static const int ProtoChildAchieve_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoChildAchieve, ach_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoChildAchieve, base_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoChildAchieve, child_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoChildAchieve, act_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoChildAchieve, compare_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoChildAchieve, sort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoChildAchieve, red_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoChildAchieve, achieve_info_),
  };
  ProtoChildAchieve_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoChildAchieve_descriptor_,
      ProtoChildAchieve::default_instance_,
      ProtoChildAchieve_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoChildAchieve, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoChildAchieve, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoChildAchieve));
  ProtoAchieveInfo_descriptor_ = file->message_type(149);
  static const int ProtoAchieveInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAchieveInfo, achieve_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAchieveInfo, ach_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAchieveInfo, number_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAchieveInfo, need_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAchieveInfo, sort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAchieveInfo, reward_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAchieveInfo, ach_amount_),
  };
  ProtoAchieveInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoAchieveInfo_descriptor_,
      ProtoAchieveInfo::default_instance_,
      ProtoAchieveInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAchieveInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAchieveInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoAchieveInfo));
  ProtoServerRecord_descriptor_ = file->message_type(150);
  static const int ProtoServerRecord_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoServerRecord, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoServerRecord, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoServerRecord, get_tme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoServerRecord, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoServerRecord, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoServerRecord, item_bind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoServerRecord, reward_mult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoServerRecord, sub_value_),
  };
  ProtoServerRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoServerRecord_descriptor_,
      ProtoServerRecord::default_instance_,
      ProtoServerRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoServerRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoServerRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoServerRecord));
  ProtoSlotInfo_descriptor_ = file->message_type(151);
  static const int ProtoSlotInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSlotInfo, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSlotInfo, slot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSlotInfo, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSlotInfo, is_precious_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSlotInfo, pre_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSlotInfo, now_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSlotInfo, person_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSlotInfo, server_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSlotInfo, person_left_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSlotInfo, server_left_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSlotInfo, slot_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSlotInfo, pair_info_),
  };
  ProtoSlotInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoSlotInfo_descriptor_,
      ProtoSlotInfo::default_instance_,
      ProtoSlotInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSlotInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSlotInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoSlotInfo));
  ProtoPersonRecord_descriptor_ = file->message_type(152);
  static const int ProtoPersonRecord_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPersonRecord, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPersonRecord, get_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPersonRecord, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPersonRecord, item_bind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPersonRecord, reward_mult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPersonRecord, sub_value_),
  };
  ProtoPersonRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoPersonRecord_descriptor_,
      ProtoPersonRecord::default_instance_,
      ProtoPersonRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPersonRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPersonRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoPersonRecord));
  ProtoTimeLimitInfo_descriptor_ = file->message_type(153);
  static const int ProtoTimeLimitInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTimeLimitInfo, time_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTimeLimitInfo, time_point_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTimeLimitInfo, slot_info_),
  };
  ProtoTimeLimitInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoTimeLimitInfo_descriptor_,
      ProtoTimeLimitInfo::default_instance_,
      ProtoTimeLimitInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTimeLimitInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTimeLimitInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoTimeLimitInfo));
  ProtoShopInfo_descriptor_ = file->message_type(154);
  static const int ProtoShopInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoShopInfo, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoShopInfo, cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoShopInfo, is_buy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoShopInfo, is_rarity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoShopInfo, cost_pre_),
  };
  ProtoShopInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoShopInfo_descriptor_,
      ProtoShopInfo::default_instance_,
      ProtoShopInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoShopInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoShopInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoShopInfo));
  ProtoFashionDetail_descriptor_ = file->message_type(155);
  static const int ProtoFashionDetail_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFashionDetail, fashion_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFashionDetail, active_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFashionDetail, color_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFashionDetail, is_permanent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFashionDetail, active_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFashionDetail, end_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFashionDetail, color_set_),
  };
  ProtoFashionDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoFashionDetail_descriptor_,
      ProtoFashionDetail::default_instance_,
      ProtoFashionDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFashionDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFashionDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoFashionDetail));
  ProtoWeddingDetail_descriptor_ = file->message_type(156);
  static const int ProtoWeddingDetail_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWeddingDetail, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWeddingDetail, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWeddingDetail, side_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWeddingDetail, side_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWeddingDetail, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWeddingDetail, is_open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWeddingDetail, pro_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWeddingDetail, other_info_),
  };
  ProtoWeddingDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoWeddingDetail_descriptor_,
      ProtoWeddingDetail::default_instance_,
      ProtoWeddingDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWeddingDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWeddingDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoWeddingDetail));
  ProtoWedTreasures_descriptor_ = file->message_type(157);
  static const int ProtoWedTreasures_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWedTreasures, buy_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWedTreasures, is_fetch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWedTreasures, left_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWedTreasures, type_),
  };
  ProtoWedTreasures_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoWedTreasures_descriptor_,
      ProtoWedTreasures::default_instance_,
      ProtoWedTreasures_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWedTreasures, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWedTreasures, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoWedTreasures));
  ProtoWeddingRole_descriptor_ = file->message_type(158);
  static const int ProtoWeddingRole_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWeddingRole, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWeddingRole, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWeddingRole, sex_),
  };
  ProtoWeddingRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoWeddingRole_descriptor_,
      ProtoWeddingRole::default_instance_,
      ProtoWeddingRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWeddingRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWeddingRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoWeddingRole));
  ProtoWeddingRank_descriptor_ = file->message_type(159);
  static const int ProtoWeddingRank_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWeddingRank, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWeddingRank, tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWeddingRank, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWeddingRank, server_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWeddingRank, server_prev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWeddingRank, server_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWeddingRank, player1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWeddingRank, player2_),
  };
  ProtoWeddingRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoWeddingRank_descriptor_,
      ProtoWeddingRank::default_instance_,
      ProtoWeddingRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWeddingRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWeddingRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoWeddingRank));
  ProtoWedLabel_descriptor_ = file->message_type(160);
  static const int ProtoWedLabel_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWedLabel, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWedLabel, label_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWedLabel, ring_level_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWedLabel, sys_level_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWedLabel, tree_level_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWedLabel, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWedLabel, other_info_),
  };
  ProtoWedLabel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoWedLabel_descriptor_,
      ProtoWedLabel::default_instance_,
      ProtoWedLabel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWedLabel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWedLabel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoWedLabel));
  ProtoActRankInfo_descriptor_ = file->message_type(161);
  static const int ProtoActRankInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoActRankInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoActRankInfo, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoActRankInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoActRankInfo, rank_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoActRankInfo, tick_),
  };
  ProtoActRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoActRankInfo_descriptor_,
      ProtoActRankInfo::default_instance_,
      ProtoActRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoActRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoActRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoActRankInfo));
  ProtoWaveReward_descriptor_ = file->message_type(162);
  static const int ProtoWaveReward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWaveReward, wave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWaveReward, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWaveReward, obj_),
  };
  ProtoWaveReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoWaveReward_descriptor_,
      ProtoWaveReward::default_instance_,
      ProtoWaveReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWaveReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWaveReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoWaveReward));
  ProtoPlayerCheer_descriptor_ = file->message_type(163);
  static const int ProtoPlayerCheer_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPlayerCheer, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPlayerCheer, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPlayerCheer, wave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPlayerCheer, is_cheer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPlayerCheer, is_encourage_),
  };
  ProtoPlayerCheer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoPlayerCheer_descriptor_,
      ProtoPlayerCheer::default_instance_,
      ProtoPlayerCheer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPlayerCheer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPlayerCheer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoPlayerCheer));
  ProtoCheerRecord_descriptor_ = file->message_type(164);
  static const int ProtoCheerRecord_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCheerRecord, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCheerRecord, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCheerRecord, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCheerRecord, is_active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCheerRecord, time_),
  };
  ProtoCheerRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoCheerRecord_descriptor_,
      ProtoCheerRecord::default_instance_,
      ProtoCheerRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCheerRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCheerRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoCheerRecord));
  ProtoRechargeRank_descriptor_ = file->message_type(165);
  static const int ProtoRechargeRank_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRechargeRank, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRechargeRank, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRechargeRank, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRechargeRank, amount_),
  };
  ProtoRechargeRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoRechargeRank_descriptor_,
      ProtoRechargeRank::default_instance_,
      ProtoRechargeRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRechargeRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRechargeRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoRechargeRank));
  ProtoMountInfo_descriptor_ = file->message_type(166);
  static const int ProtoMountInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMountInfo, mount_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMountInfo, mount_shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMountInfo, force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMountInfo, prop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMountInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMountInfo, temp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMountInfo, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMountInfo, act_shape_),
  };
  ProtoMountInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoMountInfo_descriptor_,
      ProtoMountInfo::default_instance_,
      ProtoMountInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMountInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMountInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoMountInfo));
  ProtoEquipList_descriptor_ = file->message_type(167);
  static const int ProtoEquipList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEquipList, pack_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEquipList, pack_item_list_),
  };
  ProtoEquipList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoEquipList_descriptor_,
      ProtoEquipList::default_instance_,
      ProtoEquipList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEquipList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEquipList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoEquipList));
  PActCumulativeLogin_descriptor_ = file->message_type(168);
  static const int PActCumulativeLogin_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PActCumulativeLogin, single_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PActCumulativeLogin, ten_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PActCumulativeLogin, hundred_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PActCumulativeLogin, multiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PActCumulativeLogin, single_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PActCumulativeLogin, ten_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PActCumulativeLogin, hundred_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PActCumulativeLogin, multiple_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PActCumulativeLogin, login_count_),
  };
  PActCumulativeLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PActCumulativeLogin_descriptor_,
      PActCumulativeLogin::default_instance_,
      PActCumulativeLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PActCumulativeLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PActCumulativeLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PActCumulativeLogin));
  ProtoLegendTop_descriptor_ = file->message_type(169);
  static const int ProtoLegendTop_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLegendTop, pass_floor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLegendTop, today_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLegendTop, is_sweep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLegendTop, floor_info_),
  };
  ProtoLegendTop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoLegendTop_descriptor_,
      ProtoLegendTop::default_instance_,
      ProtoLegendTop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLegendTop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLegendTop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoLegendTop));
  ProtoWavePlayer_descriptor_ = file->message_type(170);
  static const int ProtoWavePlayer_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWavePlayer, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWavePlayer, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWavePlayer, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWavePlayer, wave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWavePlayer, tick_),
  };
  ProtoWavePlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoWavePlayer_descriptor_,
      ProtoWavePlayer::default_instance_,
      ProtoWavePlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWavePlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoWavePlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoWavePlayer));
  ProtoTransferInfo_descriptor_ = file->message_type(171);
  static const int ProtoTransferInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTransferInfo, transfer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTransferInfo, transfer_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTransferInfo, is_permanent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTransferInfo, is_active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTransferInfo, active_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTransferInfo, end_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTransferInfo, transfer_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTransferInfo, skill_),
  };
  ProtoTransferInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoTransferInfo_descriptor_,
      ProtoTransferInfo::default_instance_,
      ProtoTransferInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTransferInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTransferInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoTransferInfo));
  ProtoScriptReset_descriptor_ = file->message_type(172);
  static const int ProtoScriptReset_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptReset, script_sort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptReset, left_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptReset, left_buy_times_),
  };
  ProtoScriptReset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoScriptReset_descriptor_,
      ProtoScriptReset::default_instance_,
      ProtoScriptReset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptReset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptReset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoScriptReset));
  ProtoBackActName_descriptor_ = file->message_type(173);
  static const int ProtoBackActName_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBackActName, act_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBackActName, act_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBackActName, has_reward_),
  };
  ProtoBackActName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoBackActName_descriptor_,
      ProtoBackActName::default_instance_,
      ProtoBackActName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBackActName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBackActName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoBackActName));
  ProtoBackActInfo_descriptor_ = file->message_type(174);
  static const int ProtoBackActInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBackActInfo, act_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBackActInfo, second_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBackActInfo, act_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBackActInfo, act_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBackActInfo, act_content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBackActInfo, reward_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBackActInfo, need_gold_),
  };
  ProtoBackActInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoBackActInfo_descriptor_,
      ProtoBackActInfo::default_instance_,
      ProtoBackActInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBackActInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBackActInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoBackActInfo));
  ProtoBackActReward_descriptor_ = file->message_type(175);
  static const int ProtoBackActReward_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBackActReward, reward_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBackActReward, reward_item_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBackActReward, reward_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBackActReward, cond_value_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBackActReward, restore_gold_rate_),
  };
  ProtoBackActReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoBackActReward_descriptor_,
      ProtoBackActReward::default_instance_,
      ProtoBackActReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBackActReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBackActReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoBackActReward));
  ProtoTransferClient_descriptor_ = file->message_type(176);
  static const int ProtoTransferClient_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTransferClient, transfer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTransferClient, transfer_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTransferClient, is_active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTransferClient, is_permanent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTransferClient, active_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTransferClient, end_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTransferClient, transfer_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTransferClient, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTransferClient, prop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTransferClient, last_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTransferClient, cool_),
  };
  ProtoTransferClient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoTransferClient_descriptor_,
      ProtoTransferClient::default_instance_,
      ProtoTransferClient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTransferClient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTransferClient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoTransferClient));
  ProtoBackActRewardIndex_descriptor_ = file->message_type(177);
  static const int ProtoBackActRewardIndex_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBackActRewardIndex, reward_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBackActRewardIndex, reward_value_),
  };
  ProtoBackActRewardIndex_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoBackActRewardIndex_descriptor_,
      ProtoBackActRewardIndex::default_instance_,
      ProtoBackActRewardIndex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBackActRewardIndex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBackActRewardIndex, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoBackActRewardIndex));
  PActTastList_descriptor_ = file->message_type(178);
  static const int PActTastList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PActTastList, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PActTastList, total_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PActTastList, left_num_),
  };
  PActTastList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PActTastList_descriptor_,
      PActTastList::default_instance_,
      PActTastList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PActTastList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PActTastList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PActTastList));
  MayRewardInfo_descriptor_ = file->message_type(179);
  static const int MayRewardInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MayRewardInfo, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MayRewardInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MayRewardInfo, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MayRewardInfo, cond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MayRewardInfo, arrive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MayRewardInfo, drawed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MayRewardInfo, draw_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MayRewardInfo, pre_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MayRewardInfo, now_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MayRewardInfo, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MayRewardInfo, reward_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MayRewardInfo, change_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MayRewardInfo, change_state_),
  };
  MayRewardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MayRewardInfo_descriptor_,
      MayRewardInfo::default_instance_,
      MayRewardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MayRewardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MayRewardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MayRewardInfo));
  ProtoLimitValue_descriptor_ = file->message_type(180);
  static const int ProtoLimitValue_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLimitValue, value1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLimitValue, value2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLimitValue, value3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLimitValue, value4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLimitValue, value5_),
  };
  ProtoLimitValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoLimitValue_descriptor_,
      ProtoLimitValue::default_instance_,
      ProtoLimitValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLimitValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLimitValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoLimitValue));
  ActOpenLimitTime_descriptor_ = file->message_type(181);
  static const int ActOpenLimitTime_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActOpenLimitTime, open_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActOpenLimitTime, open_state_),
  };
  ActOpenLimitTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActOpenLimitTime_descriptor_,
      ActOpenLimitTime::default_instance_,
      ActOpenLimitTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActOpenLimitTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActOpenLimitTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActOpenLimitTime));
  ProtoRedPacketInfo_descriptor_ = file->message_type(182);
  static const int ProtoRedPacketInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRedPacketInfo, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRedPacketInfo, money_),
  };
  ProtoRedPacketInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoRedPacketInfo_descriptor_,
      ProtoRedPacketInfo::default_instance_,
      ProtoRedPacketInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRedPacketInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRedPacketInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoRedPacketInfo));
  ProtoRunRole_descriptor_ = file->message_type(183);
  static const int ProtoRunRole_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRunRole, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRunRole, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRunRole, role_sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRunRole, value_),
  };
  ProtoRunRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoRunRole_descriptor_,
      ProtoRunRole::default_instance_,
      ProtoRunRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRunRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRunRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoRunRole));
  ProtoAllRedActInfo_descriptor_ = file->message_type(184);
  static const int ProtoAllRedActInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllRedActInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllRedActInfo, tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllRedActInfo, money_),
  };
  ProtoAllRedActInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoAllRedActInfo_descriptor_,
      ProtoAllRedActInfo::default_instance_,
      ProtoAllRedActInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllRedActInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoAllRedActInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoAllRedActInfo));
  ProtoTrvlBaseRole_descriptor_ = file->message_type(185);
  static const int ProtoTrvlBaseRole_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTrvlBaseRole, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTrvlBaseRole, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTrvlBaseRole, prev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTrvlBaseRole, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTrvlBaseRole, career_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTrvlBaseRole, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTrvlBaseRole, force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTrvlBaseRole, weapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTrvlBaseRole, clothes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTrvlBaseRole, fashion_weapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTrvlBaseRole, fashion_clothes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTrvlBaseRole, wing_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTrvlBaseRole, solider_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTrvlBaseRole, vip_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTrvlBaseRole, mount_sort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTrvlBaseRole, sword_pool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTrvlBaseRole, tian_gang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTrvlBaseRole, fashion_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTrvlBaseRole, fashion_color_),
  };
  ProtoTrvlBaseRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoTrvlBaseRole_descriptor_,
      ProtoTrvlBaseRole::default_instance_,
      ProtoTrvlBaseRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTrvlBaseRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTrvlBaseRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoTrvlBaseRole));
  ProtoMayFashionInfo_descriptor_ = file->message_type(186);
  static const int ProtoMayFashionInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMayFashionInfo, liveness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMayFashionInfo, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMayFashionInfo, one_times_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMayFashionInfo, ten_times_money_),
  };
  ProtoMayFashionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoMayFashionInfo_descriptor_,
      ProtoMayFashionInfo::default_instance_,
      ProtoMayFashionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMayFashionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMayFashionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoMayFashionInfo));
  ProtoTrvlBattleRank_descriptor_ = file->message_type(187);
  static const int ProtoTrvlBattleRank_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTrvlBattleRank, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTrvlBattleRank, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTrvlBattleRank, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTrvlBattleRank, kill_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTrvlBattleRank, force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTrvlBattleRank, tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTrvlBattleRank, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTrvlBattleRank, role_sex_),
  };
  ProtoTrvlBattleRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoTrvlBattleRank_descriptor_,
      ProtoTrvlBattleRank::default_instance_,
      ProtoTrvlBattleRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTrvlBattleRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTrvlBattleRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoTrvlBattleRank));
  ProtoGemInfo_descriptor_ = file->message_type(188);
  static const int ProtoGemInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoGemInfo, gem_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoGemInfo, gem_amount_),
  };
  ProtoGemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoGemInfo_descriptor_,
      ProtoGemInfo::default_instance_,
      ProtoGemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoGemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoGemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoGemInfo));
  ProtoTrvlWbossMail_descriptor_ = file->message_type(189);
  static const int ProtoTrvlWbossMail_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTrvlWbossMail, reward_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTrvlWbossMail, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTrvlWbossMail, rank_),
  };
  ProtoTrvlWbossMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoTrvlWbossMail_descriptor_,
      ProtoTrvlWbossMail::default_instance_,
      ProtoTrvlWbossMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTrvlWbossMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTrvlWbossMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoTrvlWbossMail));
  MoldingNature_descriptor_ = file->message_type(190);
  static const int MoldingNature_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoldingNature, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoldingNature, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoldingNature, cur_schedule_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoldingNature, max_schedule_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoldingNature, nature_id_),
  };
  MoldingNature_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoldingNature_descriptor_,
      MoldingNature::default_instance_,
      MoldingNature_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoldingNature, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoldingNature, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoldingNature));
  ProtoCleanInfo_descriptor_ = file->message_type(191);
  static const int ProtoCleanInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCleanInfo, script_sort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCleanInfo, item_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCleanInfo, drop_list_),
  };
  ProtoCleanInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoCleanInfo_descriptor_,
      ProtoCleanInfo::default_instance_,
      ProtoCleanInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCleanInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCleanInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoCleanInfo));
  FishDetail_descriptor_ = file->message_type(192);
  static const int FishDetail_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishDetail, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishDetail, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishDetail, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishDetail, pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishDetail, pos_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishDetail, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishDetail, item_amount_),
  };
  FishDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FishDetail_descriptor_,
      FishDetail::default_instance_,
      FishDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FishDetail));
  ProtoTeamForceInfo_descriptor_ = file->message_type(193);
  static const int ProtoTeamForceInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamForceInfo, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamForceInfo, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamForceInfo, force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamForceInfo, level_),
  };
  ProtoTeamForceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoTeamForceInfo_descriptor_,
      ProtoTeamForceInfo::default_instance_,
      ProtoTeamForceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamForceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTeamForceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoTeamForceInfo));
  ProtoItemExchangeTimes_descriptor_ = file->message_type(194);
  static const int ProtoItemExchangeTimes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItemExchangeTimes, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItemExchangeTimes, times_),
  };
  ProtoItemExchangeTimes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoItemExchangeTimes_descriptor_,
      ProtoItemExchangeTimes::default_instance_,
      ProtoItemExchangeTimes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItemExchangeTimes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoItemExchangeTimes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoItemExchangeTimes));
  ProtoPeakQualityInfo_descriptor_ = file->message_type(195);
  static const int ProtoPeakQualityInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPeakQualityInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPeakQualityInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPeakQualityInfo, left_fight_times_),
  };
  ProtoPeakQualityInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoPeakQualityInfo_descriptor_,
      ProtoPeakQualityInfo::default_instance_,
      ProtoPeakQualityInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPeakQualityInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPeakQualityInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoPeakQualityInfo));
  ProtoPeakKnockoutInfo_descriptor_ = file->message_type(196);
  static const int ProtoPeakKnockoutInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPeakKnockoutInfo, rival_team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPeakKnockoutInfo, rival_team_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPeakKnockoutInfo, rival_teamer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPeakKnockoutInfo, my_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPeakKnockoutInfo, rival_socre_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPeakKnockoutInfo, score_type_),
  };
  ProtoPeakKnockoutInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoPeakKnockoutInfo_descriptor_,
      ProtoPeakKnockoutInfo::default_instance_,
      ProtoPeakKnockoutInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPeakKnockoutInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPeakKnockoutInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoPeakKnockoutInfo));
  SpecialBoxChange_descriptor_ = file->message_type(197);
  static const int SpecialBoxChange_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialBoxChange, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialBoxChange, item_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialBoxChange, item_bind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialBoxChange, page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialBoxChange, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialBoxChange, change_item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialBoxChange, change_item_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialBoxChange, change_item_bind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialBoxChange, index_),
  };
  SpecialBoxChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpecialBoxChange_descriptor_,
      SpecialBoxChange::default_instance_,
      SpecialBoxChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialBoxChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialBoxChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpecialBoxChange));
  ProtoQualityRank_descriptor_ = file->message_type(198);
  static const int ProtoQualityRank_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoQualityRank, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoQualityRank, team_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoQualityRank, team_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoQualityRank, rank_),
  };
  ProtoQualityRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoQualityRank_descriptor_,
      ProtoQualityRank::default_instance_,
      ProtoQualityRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoQualityRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoQualityRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoQualityRank));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoPublic_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoSceneAddress_descriptor_, &ProtoSceneAddress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoCoord_descriptor_, &ProtoCoord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoSkill_descriptor_, &ProtoSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoMoney_descriptor_, &ProtoMoney::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoItem_descriptor_, &ProtoItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoEquip_descriptor_, &ProtoEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoChatInfo_descriptor_, &ProtoChatInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoDelItem_descriptor_, &ProtoDelItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoTaskCond_descriptor_, &ProtoTaskCond::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoTaskInfo_descriptor_, &ProtoTaskInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoFriendInfo_descriptor_, &ProtoFriendInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoSkillTarget_descriptor_, &ProtoSkillTarget::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoFightInfo_descriptor_, &ProtoFightInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoStatus_descriptor_, &ProtoStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoMarketItem_descriptor_, &ProtoMarketItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoSellOut_descriptor_, &ProtoSellOut::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoMailInfo_descriptor_, &ProtoMailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailAttach_descriptor_, &MailAttach::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoShopItem_descriptor_, &ProtoShopItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoPairObj_descriptor_, &ProtoPairObj::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoBaseBeastInfo_descriptor_, &ProtoBaseBeastInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoBeastSkill_descriptor_, &ProtoBeastSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoMagicalRecord_descriptor_, &ProtoMagicalRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoMagicalInfo_descriptor_, &ProtoMagicalInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoSkillCombine_descriptor_, &ProtoSkillCombine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoFashion_descriptor_, &ProtoFashion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoFashionInfo_descriptor_, &ProtoFashionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoLeagueItem_descriptor_, &ProtoLeagueItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoLeagueMember_descriptor_, &ProtoLeagueMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoLeagueApply_descriptor_, &ProtoLeagueApply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoLeagueLog_descriptor_, &ProtoLeagueLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoLeagueShop_descriptor_, &ProtoLeagueShop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoMallItem_descriptor_, &ProtoMallItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoMallList_descriptor_, &ProtoMallList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoTeamer_descriptor_, &ProtoTeamer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoLimitTimeLabel_descriptor_, &ProtoLimitTimeLabel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoDivineRecord_descriptor_, &ProtoDivineRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoAchieveDetail_descriptor_, &ProtoAchieveDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoBrocastRole_descriptor_, &ProtoBrocastRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoMonster_descriptor_, &ProtoMonster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoActivityInfo_descriptor_, &ProtoActivityInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoBeast_descriptor_, &ProtoBeast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoFlaunt_descriptor_, &ProtoFlaunt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoSyncLeague_descriptor_, &ProtoSyncLeague::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoLeagueFighter_descriptor_, &ProtoLeagueFighter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoExpRestore_descriptor_, &ProtoExpRestore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoLMRole_descriptor_, &ProtoLMRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoMarLeague_descriptor_, &ProtoMarLeague::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoRoleInfo_descriptor_, &ProtoRoleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoRankRecord_descriptor_, &ProtoRankRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoFBReadyInfo_descriptor_, &ProtoFBReadyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoFightPro_descriptor_, &ProtoFightPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoWarItem_descriptor_, &ProtoWarItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoSMBattleRankRec_descriptor_, &ProtoSMBattleRankRec::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoLWarItem_descriptor_, &ProtoLWarItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldBossRank_descriptor_, &WorldBossRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoWorldBossRank_descriptor_, &ProtoWorldBossRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoShoutDetail_descriptor_, &ProtoShoutDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoTreasure_descriptor_, &ProtoTreasure::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoScriptClean_descriptor_, &ProtoScriptClean::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoHookDetail_descriptor_, &ProtoHookDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoHookSkill_descriptor_, &ProtoHookSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoFashionTipInfo_descriptor_, &ProtoFashionTipInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoVipTimeTipInfo_descriptor_, &ProtoVipTimeTipInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoScriptChapter_descriptor_, &ProtoScriptChapter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoSysSetting_descriptor_, &ProtoSysSetting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoRpmRoleInfo_descriptor_, &ProtoRpmRoleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TipsItem_descriptor_, &TipsItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoFBUseTimes_descriptor_, &ProtoFBUseTimes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoMoverPos_descriptor_, &ProtoMoverPos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoCustomerSVCRecord_descriptor_, &ProtoCustomerSVCRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoMediaGiftDef_descriptor_, &ProtoMediaGiftDef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoAreaRole_descriptor_, &ProtoAreaRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoScriptInfo_descriptor_, &ProtoScriptInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoAreaRecord_descriptor_, &ProtoAreaRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoBuffStatus_descriptor_, &ProtoBuffStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoShusanBoss_descriptor_, &ProtoShusanBoss::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoSuit_descriptor_, &ProtoSuit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoLvlReward_descriptor_, &ProtoLvlReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoDailyRecord_descriptor_, &ProtoDailyRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoRoleShape_descriptor_, &ProtoRoleShape::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoCQAttackerInfo_descriptor_, &ProtoCQAttackerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoWing_descriptor_, &ProtoWing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoCQRank_descriptor_, &ProtoCQRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoThreeObj_descriptor_, &ProtoThreeObj::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoEscortMapItem_descriptor_, &ProtoEscortMapItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoRefineSuit_descriptor_, &ProtoRefineSuit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoPanicItem_descriptor_, &ProtoPanicItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoKiller_descriptor_, &ProtoKiller::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoPeakWarRank_descriptor_, &ProtoPeakWarRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PActTypeItem_descriptor_, &PActTypeItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PRewardItem_descriptor_, &PRewardItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoGateRole_descriptor_, &ProtoGateRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoPackageItem_descriptor_, &ProtoPackageItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoEquipPolishAttrInfo_descriptor_, &ProtoEquipPolishAttrInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoEquipPolishStruct_descriptor_, &ProtoEquipPolishStruct::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoEquipPolish_descriptor_, &ProtoEquipPolish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoVipGift_descriptor_, &ProtoVipGift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoTrialTask_descriptor_, &ProtoTrialTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoWeddingIcon_descriptor_, &ProtoWeddingIcon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoShoutItem_descriptor_, &ProtoShoutItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PActPanelInfo_descriptor_, &PActPanelInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoLeagueStoreApply_descriptor_, &ProtoLeagueStoreApply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoLeagueStoreApplyHis_descriptor_, &ProtoLeagueStoreApplyHis::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoActRewardItem_descriptor_, &ProtoActRewardItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoActRoleReward_descriptor_, &ProtoActRoleReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoPairLongString_descriptor_, &ProtoPairLongString::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoPairLong_descriptor_, &ProtoPairLong::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoActRewardNotify_descriptor_, &ProtoActRewardNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoNearRole_descriptor_, &ProtoNearRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoTravelTeam_descriptor_, &ProtoTravelTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoBrotherInfo_descriptor_, &ProtoBrotherInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoBrotherTask_descriptor_, &ProtoBrotherTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoMagicWeapon_descriptor_, &ProtoMagicWeapon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoAIllusion_descriptor_, &ProtoAIllusion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoTravelTeamer_descriptor_, &ProtoTravelTeamer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoPromotTeam_descriptor_, &ProtoPromotTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoTravelPeakBet_descriptor_, &ProtoTravelPeakBet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoMilitaryExploits_descriptor_, &ProtoMilitaryExploits::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoTravPeakWorth_descriptor_, &ProtoTravPeakWorth::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoMagicActBase_descriptor_, &ProtoMagicActBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SecretTShopItem_descriptor_, &SecretTShopItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StRankUnit_descriptor_, &StRankUnit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    STHistoryRankUnit_descriptor_, &STHistoryRankUnit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PTLeagueItem_descriptor_, &PTLeagueItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoSession_descriptor_, &ProtoSession::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Illustrations_descriptor_, &Illustrations::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Illus_group_descriptor_, &Illus_group::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Illus_class_descriptor_, &Illus_class::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoFloorInfo_descriptor_, &ProtoFloorInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoLScoreInfo_descriptor_, &ProtoLScoreInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoScriptAdvance_descriptor_, &ProtoScriptAdvance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoScriptExpInfo_descriptor_, &ProtoScriptExpInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoSpecialAwardInfo_descriptor_, &ProtoSpecialAwardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoServer_descriptor_, &ProtoServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoWorldBossInfo_descriptor_, &ProtoWorldBossInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoLeagueRankInfo_descriptor_, &ProtoLeagueRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoLWarInfo_descriptor_, &ProtoLWarInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoItemId_descriptor_, &ProtoItemId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoSwordPoolTask_descriptor_, &ProtoSwordPoolTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoSvenDayItem_descriptor_, &ProtoSvenDayItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoSevenDayItem_descriptor_, &ProtoSevenDayItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoLegendTopRank_descriptor_, &ProtoLegendTopRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoApplyInfo_descriptor_, &ProtoApplyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoPairMap_descriptor_, &ProtoPairMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoDonateRank_descriptor_, &ProtoDonateRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoMAttackLabel_descriptor_, &ProtoMAttackLabel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoActivityLWarRank_descriptor_, &ProtoActivityLWarRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoChildAchieve_descriptor_, &ProtoChildAchieve::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoAchieveInfo_descriptor_, &ProtoAchieveInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoServerRecord_descriptor_, &ProtoServerRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoSlotInfo_descriptor_, &ProtoSlotInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoPersonRecord_descriptor_, &ProtoPersonRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoTimeLimitInfo_descriptor_, &ProtoTimeLimitInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoShopInfo_descriptor_, &ProtoShopInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoFashionDetail_descriptor_, &ProtoFashionDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoWeddingDetail_descriptor_, &ProtoWeddingDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoWedTreasures_descriptor_, &ProtoWedTreasures::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoWeddingRole_descriptor_, &ProtoWeddingRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoWeddingRank_descriptor_, &ProtoWeddingRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoWedLabel_descriptor_, &ProtoWedLabel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoActRankInfo_descriptor_, &ProtoActRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoWaveReward_descriptor_, &ProtoWaveReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoPlayerCheer_descriptor_, &ProtoPlayerCheer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoCheerRecord_descriptor_, &ProtoCheerRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoRechargeRank_descriptor_, &ProtoRechargeRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoMountInfo_descriptor_, &ProtoMountInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoEquipList_descriptor_, &ProtoEquipList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PActCumulativeLogin_descriptor_, &PActCumulativeLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoLegendTop_descriptor_, &ProtoLegendTop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoWavePlayer_descriptor_, &ProtoWavePlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoTransferInfo_descriptor_, &ProtoTransferInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoScriptReset_descriptor_, &ProtoScriptReset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoBackActName_descriptor_, &ProtoBackActName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoBackActInfo_descriptor_, &ProtoBackActInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoBackActReward_descriptor_, &ProtoBackActReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoTransferClient_descriptor_, &ProtoTransferClient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoBackActRewardIndex_descriptor_, &ProtoBackActRewardIndex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PActTastList_descriptor_, &PActTastList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MayRewardInfo_descriptor_, &MayRewardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoLimitValue_descriptor_, &ProtoLimitValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActOpenLimitTime_descriptor_, &ActOpenLimitTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoRedPacketInfo_descriptor_, &ProtoRedPacketInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoRunRole_descriptor_, &ProtoRunRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoAllRedActInfo_descriptor_, &ProtoAllRedActInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoTrvlBaseRole_descriptor_, &ProtoTrvlBaseRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoMayFashionInfo_descriptor_, &ProtoMayFashionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoTrvlBattleRank_descriptor_, &ProtoTrvlBattleRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoGemInfo_descriptor_, &ProtoGemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoTrvlWbossMail_descriptor_, &ProtoTrvlWbossMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoldingNature_descriptor_, &MoldingNature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoCleanInfo_descriptor_, &ProtoCleanInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FishDetail_descriptor_, &FishDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoTeamForceInfo_descriptor_, &ProtoTeamForceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoItemExchangeTimes_descriptor_, &ProtoItemExchangeTimes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoPeakQualityInfo_descriptor_, &ProtoPeakQualityInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoPeakKnockoutInfo_descriptor_, &ProtoPeakKnockoutInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpecialBoxChange_descriptor_, &SpecialBoxChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoQualityRank_descriptor_, &ProtoQualityRank::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoPublic_2eproto() {
  delete ProtoSceneAddress::default_instance_;
  delete ProtoSceneAddress_reflection_;
  delete ProtoCoord::default_instance_;
  delete ProtoCoord_reflection_;
  delete ProtoSkill::default_instance_;
  delete ProtoSkill_reflection_;
  delete ProtoMoney::default_instance_;
  delete ProtoMoney_reflection_;
  delete ProtoItem::default_instance_;
  delete ProtoItem_reflection_;
  delete ProtoEquip::default_instance_;
  delete ProtoEquip_reflection_;
  delete ProtoChatInfo::default_instance_;
  delete ProtoChatInfo_reflection_;
  delete ProtoDelItem::default_instance_;
  delete ProtoDelItem_reflection_;
  delete ProtoTaskCond::default_instance_;
  delete ProtoTaskCond_reflection_;
  delete ProtoTaskInfo::default_instance_;
  delete ProtoTaskInfo_reflection_;
  delete ProtoFriendInfo::default_instance_;
  delete ProtoFriendInfo_reflection_;
  delete ProtoSkillTarget::default_instance_;
  delete ProtoSkillTarget_reflection_;
  delete ProtoFightInfo::default_instance_;
  delete ProtoFightInfo_reflection_;
  delete ProtoStatus::default_instance_;
  delete ProtoStatus_reflection_;
  delete ProtoMarketItem::default_instance_;
  delete ProtoMarketItem_reflection_;
  delete ProtoSellOut::default_instance_;
  delete ProtoSellOut_reflection_;
  delete ProtoMailInfo::default_instance_;
  delete ProtoMailInfo_reflection_;
  delete MailAttach::default_instance_;
  delete MailAttach_reflection_;
  delete ProtoShopItem::default_instance_;
  delete ProtoShopItem_reflection_;
  delete ProtoPairObj::default_instance_;
  delete ProtoPairObj_reflection_;
  delete ProtoBaseBeastInfo::default_instance_;
  delete ProtoBaseBeastInfo_reflection_;
  delete ProtoBeastSkill::default_instance_;
  delete ProtoBeastSkill_reflection_;
  delete ProtoMagicalRecord::default_instance_;
  delete ProtoMagicalRecord_reflection_;
  delete ProtoMagicalInfo::default_instance_;
  delete ProtoMagicalInfo_reflection_;
  delete ProtoSkillCombine::default_instance_;
  delete ProtoSkillCombine_reflection_;
  delete ProtoFashion::default_instance_;
  delete ProtoFashion_reflection_;
  delete ProtoFashionInfo::default_instance_;
  delete ProtoFashionInfo_reflection_;
  delete ProtoLeagueItem::default_instance_;
  delete ProtoLeagueItem_reflection_;
  delete ProtoLeagueMember::default_instance_;
  delete ProtoLeagueMember_reflection_;
  delete ProtoLeagueApply::default_instance_;
  delete ProtoLeagueApply_reflection_;
  delete ProtoLeagueLog::default_instance_;
  delete ProtoLeagueLog_reflection_;
  delete ProtoLeagueShop::default_instance_;
  delete ProtoLeagueShop_reflection_;
  delete ProtoMallItem::default_instance_;
  delete ProtoMallItem_reflection_;
  delete ProtoMallList::default_instance_;
  delete ProtoMallList_reflection_;
  delete ProtoTeamer::default_instance_;
  delete ProtoTeamer_reflection_;
  delete ProtoLimitTimeLabel::default_instance_;
  delete ProtoLimitTimeLabel_reflection_;
  delete ProtoDivineRecord::default_instance_;
  delete ProtoDivineRecord_reflection_;
  delete ProtoAchieveDetail::default_instance_;
  delete ProtoAchieveDetail_reflection_;
  delete ProtoBrocastRole::default_instance_;
  delete ProtoBrocastRole_reflection_;
  delete ProtoMonster::default_instance_;
  delete ProtoMonster_reflection_;
  delete ProtoActivityInfo::default_instance_;
  delete ProtoActivityInfo_reflection_;
  delete ProtoBeast::default_instance_;
  delete ProtoBeast_reflection_;
  delete ProtoFlaunt::default_instance_;
  delete ProtoFlaunt_reflection_;
  delete ProtoSyncLeague::default_instance_;
  delete ProtoSyncLeague_reflection_;
  delete ProtoLeagueFighter::default_instance_;
  delete ProtoLeagueFighter_reflection_;
  delete ProtoExpRestore::default_instance_;
  delete ProtoExpRestore_reflection_;
  delete ProtoLMRole::default_instance_;
  delete ProtoLMRole_reflection_;
  delete ProtoMarLeague::default_instance_;
  delete ProtoMarLeague_reflection_;
  delete ProtoRoleInfo::default_instance_;
  delete ProtoRoleInfo_reflection_;
  delete ProtoRankRecord::default_instance_;
  delete ProtoRankRecord_reflection_;
  delete ProtoFBReadyInfo::default_instance_;
  delete ProtoFBReadyInfo_reflection_;
  delete ProtoFightPro::default_instance_;
  delete ProtoFightPro_reflection_;
  delete ProtoWarItem::default_instance_;
  delete ProtoWarItem_reflection_;
  delete ProtoSMBattleRankRec::default_instance_;
  delete ProtoSMBattleRankRec_reflection_;
  delete ProtoLWarItem::default_instance_;
  delete ProtoLWarItem_reflection_;
  delete WorldBossRank::default_instance_;
  delete WorldBossRank_reflection_;
  delete ProtoWorldBossRank::default_instance_;
  delete ProtoWorldBossRank_reflection_;
  delete ProtoShoutDetail::default_instance_;
  delete ProtoShoutDetail_reflection_;
  delete ProtoTreasure::default_instance_;
  delete ProtoTreasure_reflection_;
  delete ProtoScriptClean::default_instance_;
  delete ProtoScriptClean_reflection_;
  delete ProtoHookDetail::default_instance_;
  delete ProtoHookDetail_reflection_;
  delete ProtoHookSkill::default_instance_;
  delete ProtoHookSkill_reflection_;
  delete ProtoFashionTipInfo::default_instance_;
  delete ProtoFashionTipInfo_reflection_;
  delete ProtoVipTimeTipInfo::default_instance_;
  delete ProtoVipTimeTipInfo_reflection_;
  delete ProtoScriptChapter::default_instance_;
  delete ProtoScriptChapter_reflection_;
  delete ProtoSysSetting::default_instance_;
  delete ProtoSysSetting_reflection_;
  delete ProtoRpmRoleInfo::default_instance_;
  delete ProtoRpmRoleInfo_reflection_;
  delete TipsItem::default_instance_;
  delete TipsItem_reflection_;
  delete ProtoFBUseTimes::default_instance_;
  delete ProtoFBUseTimes_reflection_;
  delete ProtoMoverPos::default_instance_;
  delete ProtoMoverPos_reflection_;
  delete ProtoCustomerSVCRecord::default_instance_;
  delete ProtoCustomerSVCRecord_reflection_;
  delete ProtoMediaGiftDef::default_instance_;
  delete ProtoMediaGiftDef_reflection_;
  delete ProtoAreaRole::default_instance_;
  delete ProtoAreaRole_reflection_;
  delete ProtoScriptInfo::default_instance_;
  delete ProtoScriptInfo_reflection_;
  delete ProtoAreaRecord::default_instance_;
  delete ProtoAreaRecord_reflection_;
  delete ProtoBuffStatus::default_instance_;
  delete ProtoBuffStatus_reflection_;
  delete ProtoShusanBoss::default_instance_;
  delete ProtoShusanBoss_reflection_;
  delete ProtoSuit::default_instance_;
  delete ProtoSuit_reflection_;
  delete ProtoLvlReward::default_instance_;
  delete ProtoLvlReward_reflection_;
  delete ProtoDailyRecord::default_instance_;
  delete ProtoDailyRecord_reflection_;
  delete ProtoRoleShape::default_instance_;
  delete ProtoRoleShape_reflection_;
  delete ProtoCQAttackerInfo::default_instance_;
  delete ProtoCQAttackerInfo_reflection_;
  delete ProtoWing::default_instance_;
  delete ProtoWing_reflection_;
  delete ProtoCQRank::default_instance_;
  delete ProtoCQRank_reflection_;
  delete ProtoThreeObj::default_instance_;
  delete ProtoThreeObj_reflection_;
  delete ProtoEscortMapItem::default_instance_;
  delete ProtoEscortMapItem_reflection_;
  delete ProtoRefineSuit::default_instance_;
  delete ProtoRefineSuit_reflection_;
  delete ProtoPanicItem::default_instance_;
  delete ProtoPanicItem_reflection_;
  delete ProtoKiller::default_instance_;
  delete ProtoKiller_reflection_;
  delete ProtoPeakWarRank::default_instance_;
  delete ProtoPeakWarRank_reflection_;
  delete PActTypeItem::default_instance_;
  delete PActTypeItem_reflection_;
  delete PRewardItem::default_instance_;
  delete PRewardItem_reflection_;
  delete ProtoGateRole::default_instance_;
  delete ProtoGateRole_reflection_;
  delete ProtoPackageItem::default_instance_;
  delete ProtoPackageItem_reflection_;
  delete ProtoEquipPolishAttrInfo::default_instance_;
  delete ProtoEquipPolishAttrInfo_reflection_;
  delete ProtoEquipPolishStruct::default_instance_;
  delete ProtoEquipPolishStruct_reflection_;
  delete ProtoEquipPolish::default_instance_;
  delete ProtoEquipPolish_reflection_;
  delete ProtoVipGift::default_instance_;
  delete ProtoVipGift_reflection_;
  delete ProtoTrialTask::default_instance_;
  delete ProtoTrialTask_reflection_;
  delete ProtoWeddingIcon::default_instance_;
  delete ProtoWeddingIcon_reflection_;
  delete ProtoShoutItem::default_instance_;
  delete ProtoShoutItem_reflection_;
  delete PActPanelInfo::default_instance_;
  delete PActPanelInfo_reflection_;
  delete ProtoLeagueStoreApply::default_instance_;
  delete ProtoLeagueStoreApply_reflection_;
  delete ProtoLeagueStoreApplyHis::default_instance_;
  delete ProtoLeagueStoreApplyHis_reflection_;
  delete ProtoActRewardItem::default_instance_;
  delete ProtoActRewardItem_reflection_;
  delete ProtoActRoleReward::default_instance_;
  delete ProtoActRoleReward_reflection_;
  delete ProtoPairLongString::default_instance_;
  delete ProtoPairLongString_reflection_;
  delete ProtoPairLong::default_instance_;
  delete ProtoPairLong_reflection_;
  delete ProtoActRewardNotify::default_instance_;
  delete ProtoActRewardNotify_reflection_;
  delete ProtoNearRole::default_instance_;
  delete ProtoNearRole_reflection_;
  delete ProtoTravelTeam::default_instance_;
  delete ProtoTravelTeam_reflection_;
  delete ProtoBrotherInfo::default_instance_;
  delete ProtoBrotherInfo_reflection_;
  delete ProtoBrotherTask::default_instance_;
  delete ProtoBrotherTask_reflection_;
  delete ProtoMagicWeapon::default_instance_;
  delete ProtoMagicWeapon_reflection_;
  delete ProtoAIllusion::default_instance_;
  delete ProtoAIllusion_reflection_;
  delete ProtoTravelTeamer::default_instance_;
  delete ProtoTravelTeamer_reflection_;
  delete ProtoPromotTeam::default_instance_;
  delete ProtoPromotTeam_reflection_;
  delete ProtoTravelPeakBet::default_instance_;
  delete ProtoTravelPeakBet_reflection_;
  delete ProtoMilitaryExploits::default_instance_;
  delete ProtoMilitaryExploits_reflection_;
  delete ProtoTravPeakWorth::default_instance_;
  delete ProtoTravPeakWorth_reflection_;
  delete ProtoMagicActBase::default_instance_;
  delete ProtoMagicActBase_reflection_;
  delete SecretTShopItem::default_instance_;
  delete SecretTShopItem_reflection_;
  delete StRankUnit::default_instance_;
  delete StRankUnit_reflection_;
  delete STHistoryRankUnit::default_instance_;
  delete STHistoryRankUnit_reflection_;
  delete PTLeagueItem::default_instance_;
  delete PTLeagueItem_reflection_;
  delete ProtoSession::default_instance_;
  delete ProtoSession_reflection_;
  delete Illustrations::default_instance_;
  delete Illustrations_reflection_;
  delete Illus_group::default_instance_;
  delete Illus_group_reflection_;
  delete Illus_class::default_instance_;
  delete Illus_class_reflection_;
  delete ProtoFloorInfo::default_instance_;
  delete ProtoFloorInfo_reflection_;
  delete ProtoLScoreInfo::default_instance_;
  delete ProtoLScoreInfo_reflection_;
  delete ProtoScriptAdvance::default_instance_;
  delete ProtoScriptAdvance_reflection_;
  delete ProtoScriptExpInfo::default_instance_;
  delete ProtoScriptExpInfo_reflection_;
  delete ProtoSpecialAwardInfo::default_instance_;
  delete ProtoSpecialAwardInfo_reflection_;
  delete ProtoServer::default_instance_;
  delete ProtoServer_reflection_;
  delete ProtoWorldBossInfo::default_instance_;
  delete ProtoWorldBossInfo_reflection_;
  delete ProtoLeagueRankInfo::default_instance_;
  delete ProtoLeagueRankInfo_reflection_;
  delete ProtoLWarInfo::default_instance_;
  delete ProtoLWarInfo_reflection_;
  delete ProtoItemId::default_instance_;
  delete ProtoItemId_reflection_;
  delete ProtoSwordPoolTask::default_instance_;
  delete ProtoSwordPoolTask_reflection_;
  delete ProtoSvenDayItem::default_instance_;
  delete ProtoSvenDayItem_reflection_;
  delete ProtoSevenDayItem::default_instance_;
  delete ProtoSevenDayItem_reflection_;
  delete ProtoLegendTopRank::default_instance_;
  delete ProtoLegendTopRank_reflection_;
  delete ProtoApplyInfo::default_instance_;
  delete ProtoApplyInfo_reflection_;
  delete ProtoPairMap::default_instance_;
  delete ProtoPairMap_reflection_;
  delete ProtoDonateRank::default_instance_;
  delete ProtoDonateRank_reflection_;
  delete ProtoMAttackLabel::default_instance_;
  delete ProtoMAttackLabel_reflection_;
  delete ProtoActivityLWarRank::default_instance_;
  delete ProtoActivityLWarRank_reflection_;
  delete ProtoChildAchieve::default_instance_;
  delete ProtoChildAchieve_reflection_;
  delete ProtoAchieveInfo::default_instance_;
  delete ProtoAchieveInfo_reflection_;
  delete ProtoServerRecord::default_instance_;
  delete ProtoServerRecord_reflection_;
  delete ProtoSlotInfo::default_instance_;
  delete ProtoSlotInfo_reflection_;
  delete ProtoPersonRecord::default_instance_;
  delete ProtoPersonRecord_reflection_;
  delete ProtoTimeLimitInfo::default_instance_;
  delete ProtoTimeLimitInfo_reflection_;
  delete ProtoShopInfo::default_instance_;
  delete ProtoShopInfo_reflection_;
  delete ProtoFashionDetail::default_instance_;
  delete ProtoFashionDetail_reflection_;
  delete ProtoWeddingDetail::default_instance_;
  delete ProtoWeddingDetail_reflection_;
  delete ProtoWedTreasures::default_instance_;
  delete ProtoWedTreasures_reflection_;
  delete ProtoWeddingRole::default_instance_;
  delete ProtoWeddingRole_reflection_;
  delete ProtoWeddingRank::default_instance_;
  delete ProtoWeddingRank_reflection_;
  delete ProtoWedLabel::default_instance_;
  delete ProtoWedLabel_reflection_;
  delete ProtoActRankInfo::default_instance_;
  delete ProtoActRankInfo_reflection_;
  delete ProtoWaveReward::default_instance_;
  delete ProtoWaveReward_reflection_;
  delete ProtoPlayerCheer::default_instance_;
  delete ProtoPlayerCheer_reflection_;
  delete ProtoCheerRecord::default_instance_;
  delete ProtoCheerRecord_reflection_;
  delete ProtoRechargeRank::default_instance_;
  delete ProtoRechargeRank_reflection_;
  delete ProtoMountInfo::default_instance_;
  delete ProtoMountInfo_reflection_;
  delete ProtoEquipList::default_instance_;
  delete ProtoEquipList_reflection_;
  delete PActCumulativeLogin::default_instance_;
  delete PActCumulativeLogin_reflection_;
  delete ProtoLegendTop::default_instance_;
  delete ProtoLegendTop_reflection_;
  delete ProtoWavePlayer::default_instance_;
  delete ProtoWavePlayer_reflection_;
  delete ProtoTransferInfo::default_instance_;
  delete ProtoTransferInfo_reflection_;
  delete ProtoScriptReset::default_instance_;
  delete ProtoScriptReset_reflection_;
  delete ProtoBackActName::default_instance_;
  delete ProtoBackActName_reflection_;
  delete ProtoBackActInfo::default_instance_;
  delete ProtoBackActInfo_reflection_;
  delete ProtoBackActReward::default_instance_;
  delete ProtoBackActReward_reflection_;
  delete ProtoTransferClient::default_instance_;
  delete ProtoTransferClient_reflection_;
  delete ProtoBackActRewardIndex::default_instance_;
  delete ProtoBackActRewardIndex_reflection_;
  delete PActTastList::default_instance_;
  delete PActTastList_reflection_;
  delete MayRewardInfo::default_instance_;
  delete MayRewardInfo_reflection_;
  delete ProtoLimitValue::default_instance_;
  delete ProtoLimitValue_reflection_;
  delete ActOpenLimitTime::default_instance_;
  delete ActOpenLimitTime_reflection_;
  delete ProtoRedPacketInfo::default_instance_;
  delete ProtoRedPacketInfo_reflection_;
  delete ProtoRunRole::default_instance_;
  delete ProtoRunRole_reflection_;
  delete ProtoAllRedActInfo::default_instance_;
  delete ProtoAllRedActInfo_reflection_;
  delete ProtoTrvlBaseRole::default_instance_;
  delete ProtoTrvlBaseRole_reflection_;
  delete ProtoMayFashionInfo::default_instance_;
  delete ProtoMayFashionInfo_reflection_;
  delete ProtoTrvlBattleRank::default_instance_;
  delete ProtoTrvlBattleRank_reflection_;
  delete ProtoGemInfo::default_instance_;
  delete ProtoGemInfo_reflection_;
  delete ProtoTrvlWbossMail::default_instance_;
  delete ProtoTrvlWbossMail_reflection_;
  delete MoldingNature::default_instance_;
  delete MoldingNature_reflection_;
  delete ProtoCleanInfo::default_instance_;
  delete ProtoCleanInfo_reflection_;
  delete FishDetail::default_instance_;
  delete FishDetail_reflection_;
  delete ProtoTeamForceInfo::default_instance_;
  delete ProtoTeamForceInfo_reflection_;
  delete ProtoItemExchangeTimes::default_instance_;
  delete ProtoItemExchangeTimes_reflection_;
  delete ProtoPeakQualityInfo::default_instance_;
  delete ProtoPeakQualityInfo_reflection_;
  delete ProtoPeakKnockoutInfo::default_instance_;
  delete ProtoPeakKnockoutInfo_reflection_;
  delete SpecialBoxChange::default_instance_;
  delete SpecialBoxChange_reflection_;
  delete ProtoQualityRank::default_instance_;
  delete ProtoQualityRank_reflection_;
}

void protobuf_AddDesc_ProtoPublic_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021ProtoPublic.proto\"T\n\021ProtoSceneAddress"
    "\022\020\n\010scene_id\030\001 \001(\005\022\017\n\007address\030\002 \001(\t\022\014\n\004p"
    "ort\030\003 \001(\005\022\016\n\006domain\030\004 \001(\t\".\n\nProtoCoord\022"
    "\017\n\007pixel_x\030\001 \001(\005\022\017\n\007pixel_y\030\002 \001(\005\"i\n\nPro"
    "toSkill\022\020\n\010skill_id\030\001 \001(\005\022\023\n\013skill_level"
    "\030\002 \001(\005\022\017\n\007use_sec\030\003 \001(\005\022\020\n\010use_usec\030\004 \001("
    "\005\022\021\n\tuse_times\030\005 \001(\005\"R\n\nProtoMoney\022\016\n\006co"
    "pper\030\001 \001(\005\022\014\n\004gold\030\002 \001(\005\022\021\n\tbind_gold\030\003 "
    "\001(\005\022\023\n\013bind_copper\030\004 \001(\005\"\210\003\n\tProtoItem\022\r"
    "\n\005index\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\022\016\n\006amount\030\003 \001("
    "\005\022\014\n\004bind\030\004 \001(\005\022\036\n\tequipment\030\005 \001(\0132\013.Pro"
    "toEquip\022!\n\ttreausure\030\006 \001(\0132\016.ProtoTreasu"
    "re\022\021\n\tuse_times\030\007 \001(\005\022\020\n\010use_tick\030\010 \001(\003\022"
    "\017\n\007new_tag\030\t \001(\005\022\021\n\tunique_id\030\n \001(\003\022\r\n\005f"
    "orce\030\013 \001(\005\022\017\n\007timeout\030\014 \001(\004\022\030\n\020out_time_"
    "item_id\030\r \001(\005\022\034\n\024out_time_item_amount\030\016 "
    "\001(\005\022\032\n\022out_time_item_bind\030\017 \001(\005\022\022\n\ntips_"
    "level\030\020 \001(\005\022\025\n\rtips_time_map\030\021 \003(\005\022\027\n\017ti"
    "ps_status_map\030\022 \003(\005\"\323\001\n\nProtoEquip\022\024\n\014re"
    "fine_level\030\001 \001(\005\022\'\n\014fashion_info\030\002 \001(\0132\021"
    ".ProtoFashionInfo\022\025\n\rrefine_degree\030\003 \001(\005"
    "\022\"\n\013jewel_lists\030\004 \003(\0132\r.ProtoPairObj\022#\n\014"
    "refine_lists\030\005 \003(\0132\r.ProtoPairObj\022&\n\016mol"
    "ding_nature\030\006 \003(\0132\016.MoldingNature\"\234\004\n\rPr"
    "otoChatInfo\022\017\n\007channel\030\001 \001(\005\022\014\n\004type\030\002 \001"
    "(\005\022\020\n\010voice_id\030\003 \001(\003\022\021\n\tvoice_len\030\004 \001(\005\022"
    "\017\n\007role_id\030\005 \001(\003\022\014\n\004name\030\006 \001(\t\022\013\n\003sex\030\007 "
    "\001(\005\022\r\n\005level\030\010 \001(\005\022\013\n\003vip\030\t \001(\005\022\014\n\004team\030"
    "\n \001(\005\022\r\n\005label\030\013 \001(\005\022\014\n\004time\030\014 \001(\005\022\017\n\007co"
    "ntent\030\r \001(\t\022\021\n\ttarget_id\030\016 \001(\003\022\023\n\013target"
    "_name\030\017 \001(\t\022\022\n\ntarget_sex\030\020 \001(\005\022\024\n\014targe"
    "t_level\030\021 \001(\005\022\022\n\ntarget_vip\030\022 \001(\005\022\023\n\013tar"
    "get_team\030\023 \001(\005\022\024\n\014target_label\030\024 \001(\005\022#\n\r"
    "flaunt_detail\030\025 \001(\0132\014.ProtoFlaunt\022\016\n\006car"
    "eer\030\026 \001(\005\022\022\n\npermission\030\027 \001(\005\022\023\n\013server_"
    "prev\030\030 \001(\t\022\021\n\tserver_id\030\031 \001(\005\022\020\n\010scene_i"
    "d\030\032 \001(\005\022\023\n\013league_name\030\033 \001(\t\022\032\n\022target_l"
    "eague_name\030\034 \001(\t\"5\n\014ProtoDelItem\022\021\n\tdel_"
    "index\030\001 \001(\005\022\022\n\ndel_amount\030\002 \001(\005\"\216\001\n\rProt"
    "oTaskCond\022\r\n\005index\030\001 \001(\005\022\r\n\005value\030\002 \001(\005\022"
    "\023\n\013final_value\030\003 \001(\005\022\017\n\007cond_id\030\004 \001(\005\022\021\n"
    "\tcond_type\030\005 \001(\005\022\021\n\tkill_type\030\006 \001(\005\022\023\n\013r"
    "ange_level\030\007 \001(\005\"\254\002\n\rProtoTaskInfo\022\017\n\007ta"
    "sk_id\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022\016\n\006status\030\003 \001("
    "\005\022!\n\tcond_list\030\004 \003(\0132\016.ProtoTaskCond\022\024\n\014"
    "routine_dice\030\005 \001(\005\022\030\n\020is_first_routine\030\006"
    " \001(\005\022\021\n\ttask_star\030\007 \001(\005\022\030\n\020fast_finish_r"
    "ate\030\010 \001(\005\022\025\n\rroutine_index\030\t \001(\005\022\025\n\rrout"
    "ine_total\030\n \001(\005\022\022\n\nis_routine\030\013 \001(\005\022*\n\022o"
    "ffer_routine_info\030\014 \001(\0132\016.ProtoThreeObj\""
    "\373\002\n\017ProtoFriendInfo\022\017\n\007role_id\030\001 \001(\003\022\017\n\007"
    "icon_id\030\002 \001(\003\022\021\n\tleague_id\030\003 \001(\003\022\023\n\013leag"
    "ue_name\030\004 \001(\t\022\023\n\013friend_type\030\005 \001(\005\022\022\n\nvi"
    "p_status\030\006 \001(\005\022\021\n\tis_online\030\007 \001(\005\022\013\n\003sex"
    "\030\010 \001(\005\022\016\n\006career\030\t \001(\005\022\r\n\005level\030\n \001(\005\022\023\n"
    "\013team_status\030\013 \001(\005\022\014\n\004name\030\014 \001(\t\022\020\n\010inti"
    "macy\030\r \001(\005\022\r\n\005force\030\016 \001(\005\022\020\n\010scene_id\030\017 "
    "\001(\005\022\020\n\010distance\030\020 \001(\005\022\017\n\007pixel_x\030\021 \001(\005\022\017"
    "\n\007pixel_y\030\022 \001(\005\022\022\n\nname_color\030\023 \001(\005\022\030\n\020i"
    "s_give_strength\030\024 \001(\005\"7\n\020ProtoSkillTarge"
    "t\022\021\n\ttarget_id\030\001 \001(\003\022\020\n\010is_death\030\002 \001(\005\"\244"
    "\001\n\016ProtoFightInfo\022\014\n\004type\030\001 \001(\005\022\r\n\005value"
    "\030\002 \001(\005\022\023\n\013attackor_id\030\003 \001(\003\022\020\n\010skill_id\030"
    "\004 \001(\005\022\r\n\005tips1\030\005 \001(\005\022\r\n\005tips2\030\006 \001(\005\022\r\n\005t"
    "ips3\030\007 \001(\005\022\r\n\005tips4\030\010 \001(\005\022\022\n\nexperience\030"
    "\t \001(\003\"\252\001\n\013ProtoStatus\022\016\n\006status\030\001 \001(\005\022\023\n"
    "\013view_status\030\002 \001(\005\022\016\n\006value1\030\003 \001(\005\022\016\n\006va"
    "lue2\030\004 \001(\005\022\016\n\006value3\030\005 \001(\005\022\021\n\tlast_tick\030"
    "\006 \001(\005\022\021\n\tcool_tick\030\007 \001(\005\022\020\n\010attackor\030\010 \001"
    "(\003\022\016\n\006value6\030\t \003(\005\"\237\001\n\017ProtoMarketItem\022\024"
    "\n\014market_index\030\001 \001(\005\022\017\n\007item_id\030\002 \001(\005\022\023\n"
    "\013item_amount\030\003 \001(\005\022\022\n\nmoney_type\030\004 \001(\005\022\r"
    "\n\005price\030\005 \001(\005\022\021\n\tleft_time\030\006 \001(\005\022\032\n\005equi"
    "p\030\007 \001(\0132\013.ProtoEquip\"V\n\014ProtoSellOut\022\r\n\005"
    "index\030\001 \001(\005\022\017\n\007item_id\030\002 \001(\005\022\021\n\titem_bin"
    "d\030\003 \001(\005\022\023\n\013item_amount\030\004 \001(\005\"\304\003\n\rProtoMa"
    "ilInfo\022\017\n\007mail_id\030\001 \001(\003\022\021\n\tmail_type\030\002 \001"
    "(\005\022\021\n\tmail_time\030\003 \001(\003\022\020\n\010has_read\030\004 \001(\005\022"
    "\021\n\trole_name\030\005 \001(\t\022\022\n\nmail_title\030\006 \001(\t\022\022"
    "\n\nhas_attach\030\007 \001(\005\022\023\n\013left_minute\030\010 \001(\005\022"
    "\026\n\016mail_read_tick\030\t \001(\003\022\021\n\tsender_id\030\n \001"
    "(\003\022\023\n\013sender_name\030\013 \001(\t\022\023\n\013receiver_id\030\014"
    " \001(\003\022\025\n\rreceiver_name\030\r \001(\t\022\024\n\014mail_cont"
    "ent\030\016 \001(\t\022\037\n\013attach_list\030\017 \003(\0132\n.ProtoIt"
    "em\022!\n\014attach_money\030\020 \001(\0132\013.ProtoMoney\022\r\n"
    "\005label\030\021 \001(\005\022\017\n\007exploit\030\022 \001(\005\022\016\n\006format\030"
    "\023 \001(\005\022\022\n\nsender_vip\030\024 \001(\005\022\020\n\010st_score\030\025 "
    "\001(\005\"I\n\nMailAttach\022\022\n\nmail_index\030\001 \001(\005\022\022\n"
    "\npack_index\030\002 \001(\005\022\023\n\013pack_amount\030\003 \001(\005\"\215"
    "\002\n\rProtoShopItem\022\020\n\010item_pos\030\001 \001(\005\022\017\n\007it"
    "em_id\030\002 \001(\005\022\021\n\titem_type\030\003 \001(\005\022\023\n\013bind_s"
    "tatus\030\004 \001(\005\022\022\n\nmoney_type\030\005 \001(\005\022\021\n\tcur_m"
    "oney\030\006 \001(\005\022 \n\tneed_item\030\007 \003(\0132\r.ProtoPai"
    "rObj\022\027\n\017ai_script_score\030\010 \001(\005\022\017\n\007exploit"
    "\030\t \001(\005\022\024\n\014buyed_amount\030\n \001(\005\022\024\n\014total_am"
    "ount\030\013 \001(\005\022\022\n\nreputation\030\014 \001(\005\"1\n\014ProtoP"
    "airObj\022\016\n\006obj_id\030\001 \001(\005\022\021\n\tobj_value\030\002 \001("
    "\005\"\257\001\n\022ProtoBaseBeastInfo\022\020\n\010beast_id\030\001 \001"
    "(\003\022\022\n\nbeast_sort\030\002 \001(\005\022\024\n\014beast_growth\030\003"
    " \001(\005\022\022\n\nbeast_name\030\004 \001(\t\022\024\n\014action_state"
    "\030\005 \001(\005\022\023\n\013beast_force\030\006 \001(\005\022\017\n\007ability\030\007"
    " \001(\005\022\r\n\005guard\030\010 \001(\005\"\267\001\n\017ProtoBeastSkill\022"
    "\020\n\010skill_id\030\001 \001(\005\022\023\n\013skill_level\030\002 \001(\005\022\017"
    "\n\007cur_exp\030\003 \001(\005\022\021\n\tcool_time\030\004 \001(\005\022\023\n\013sk"
    "ill_index\030\005 \001(\005\022\022\n\nlock_state\030\006 \001(\005\022\017\n\007q"
    "uality\030\007 \001(\005\022\021\n\ttransform\030\010 \001(\005\022\014\n\004type\030"
    "\t \001(\005\"z\n\022ProtoMagicalRecord\022\021\n\tattr_type"
    "\030\001 \001(\005\022\021\n\tis_locked\030\002 \001(\005\022\r\n\005index\030\003 \001(\005"
    "\022\r\n\005color\030\004 \001(\005\022\r\n\005value\030\005 \001(\005\022\021\n\tmax_va"
    "lue\030\006 \001(\005\"=\n\020ProtoMagicalInfo\022)\n\014magical"
    "_list\030\001 \003(\0132\023.ProtoMagicalRecord\"\224\001\n\021Pro"
    "toSkillCombine\022\024\n\014combine_flag\030\001 \001(\005\022\022\n\n"
    "from_index\030\002 \001(\005\022\020\n\010to_index\030\003 \001(\005\022\025\n\rco"
    "mbine_skill\030\004 \001(\005\022\026\n\016combined_skill\030\005 \001("
    "\005\022\024\n\014combined_exp\030\006 \001(\005\"G\n\014ProtoFashion\022"
    "\020\n\010use_type\030\001 \001(\005\022\020\n\010use_tick\030\002 \001(\005\022\023\n\013e"
    "xpire_tick\030\003 \001(\005\"\261\002\n\020ProtoFashionInfo\022\020\n"
    "\010use_type\030\001 \001(\005\022\020\n\010left_sec\030\002 \001(\005\022\020\n\010use"
    "_tick\030\003 \001(\003\022\023\n\013expire_tick\030\004 \001(\003\022!\n\nnoti"
    "fy_map\030\005 \003(\0132\r.ProtoPairObj\022\021\n\tis_in_use"
    "\030\006 \001(\005\022\020\n\010vip_type\030\007 \001(\005\022\022\n\nfashion_id\030\010"
    " \001(\005\022\020\n\010color_id\030\t \001(\005\022\023\n\013active_type\030\n "
    "\001(\005\022\024\n\014is_permanent\030\013 \001(\005\022\023\n\013active_tick"
    "\030\014 \001(\003\022\020\n\010end_tick\030\r \001(\003\022\022\n\ncolor_set_\030\016"
    " \003(\005\"\341\001\n\017ProtoLeagueItem\022\022\n\nrank_index\030\001"
    " \001(\005\022\024\n\014league_index\030\002 \001(\003\022\023\n\013league_nam"
    "e\030\003 \001(\t\022\022\n\nleague_lvl\030\004 \001(\005\022\025\n\rcurrent_c"
    "ount\030\005 \001(\005\022\024\n\014league_force\030\006 \001(\005\022\025\n\rleag"
    "ue_leader\030\007 \001(\t\022\022\n\napply_flag\030\010 \001(\005\022\021\n\tl"
    "eader_id\030\t \001(\003\022\020\n\010max_role\030\n \001(\005\"\313\001\n\021Pro"
    "toLeagueMember\022\022\n\nrole_index\030\001 \001(\003\022\021\n\tro"
    "le_name\030\002 \001(\t\022\013\n\003sex\030\003 \001(\005\022\013\n\003vip\030\004 \001(\005\022"
    "\022\n\nleague_pos\030\005 \001(\005\022\020\n\010role_lvl\030\006 \001(\005\022\022\n"
    "\nrole_force\030\007 \001(\005\022\022\n\ncur_contri\030\010 \001(\005\022\024\n"
    "\014total_contri\030\t \001(\005\022\021\n\tleft_time\030\n \001(\005\"\255"
    "\001\n\020ProtoLeagueApply\022\022\n\nrole_index\030\001 \001(\003\022"
    "\020\n\010vip_type\030\002 \001(\005\022\020\n\010role_sex\030\003 \001(\005\022\021\n\tr"
    "ole_name\030\004 \001(\t\022\020\n\010role_lvl\030\005 \001(\005\022\023\n\013role"
    "_career\030\006 \001(\005\022\022\n\nrole_force\030\007 \001(\005\022\023\n\013onl"
    "ine_flag\030\010 \001(\005\"7\n\016ProtoLeagueLog\022\020\n\010log_"
    "tick\030\001 \001(\003\022\023\n\013log_content\030\002 \001(\t\"3\n\017Proto"
    "LeagueShop\022\017\n\007item_id\030\001 \001(\005\022\017\n\007buy_num\030\002"
    " \001(\005\"\255\002\n\rProtoMallItem\022\020\n\010item_pos\030\001 \001(\005"
    "\022\017\n\007item_id\030\002 \001(\005\022\026\n\016item_type_list\030\003 \003("
    "\005\022\022\n\nmoney_type\030\004 \001(\005\022\023\n\013prime_price\030\005 \001"
    "(\005\022\021\n\tcur_price\030\006 \001(\005\022\021\n\tvip_price\030\007 \001(\005"
    "\022\030\n\020limit_condt_type\030\010 \001(\005\022\"\n\013limit_cond"
    "t\030\t \001(\0132\r.ProtoPairObj\022\017\n\007context\030\n \001(\t\022"
    "\021\n\titem_bind\030\013 \001(\005\022\021\n\tleft_item\030\014 \001(\005\022\020\n"
    "\010max_item\030\r \001(\005\022\013\n\003own\030\016 \001(\005\"E\n\rProtoMal"
    "lList\022\021\n\tshop_type\030\001 \001(\005\022!\n\tItem_list\030\002 "
    "\003(\0132\016.ProtoMallItem\"\332\002\n\013ProtoTeamer\022\021\n\tr"
    "ole_name\030\001 \001(\t\022\021\n\tfull_name\030\002 \001(\t\022\017\n\007rol"
    "e_id\030\003 \001(\003\022\022\n\nrole_level\030\004 \001(\005\022\022\n\nrole_f"
    "orce\030\005 \001(\005\022\023\n\013role_career\030\006 \001(\005\022\020\n\010role_"
    "sex\030\007 \001(\005\022\020\n\010vip_type\030\010 \001(\005\022\023\n\013online_fl"
    "ag\030\t \001(\005\022\017\n\007prepare\030\n \001(\005\022\023\n\013league_name"
    "\030\013 \001(\t\022\020\n\010team_num\030\014 \001(\005\022\022\n\nteam_limit\030\r"
    " \001(\005\022!\n\tshow_info\030\016 \003(\0132\016.ProtoThreeObj\022"
    "!\n\nmount_info\030\017 \003(\0132\r.ProtoPairObj\022\014\n\004pr"
    "ev\030\020 \001(\t\":\n\023ProtoLimitTimeLabel\022\020\n\010label"
    "_id\030\001 \001(\005\022\021\n\tleft_time\030\002 \001(\005\"]\n\021ProtoDiv"
    "ineRecord\022\021\n\trole_name\030\001 \001(\t\022\017\n\007item_id\030"
    "\002 \001(\005\022\023\n\013item_amount\030\003 \001(\005\022\017\n\007role_id\030\004 "
    "\001(\003\"\217\001\n\022ProtoAchieveDetail\022\022\n\nachieve_id"
    "\030\001 \001(\005\022\021\n\tach_index\030\002 \001(\005\022\022\n\nfinish_num\030"
    "\003 \001(\005\022\022\n\nget_status\030\004 \001(\005\022\023\n\013finish_tick"
    "\030\005 \001(\003\022\025\n\rspecial_value\030\006 \001(\005\"J\n\020ProtoBr"
    "ocastRole\022\017\n\007role_id\030\001 \001(\003\022\021\n\trole_name\030"
    "\002 \001(\t\022\022\n\nteam_state\030\003 \001(\005\"c\n\014ProtoMonste"
    "r\022\014\n\004sort\030\001 \001(\005\022\023\n\013left_amount\030\002 \001(\005\022\024\n\014"
    "total_amount\030\003 \001(\005\022\032\n\005coord\030\004 \001(\0132\013.Prot"
    "oCoord\"z\n\021ProtoActivityInfo\022\023\n\013activity_"
    "id\030\001 \001(\005\022\026\n\016activity_state\030\002 \001(\005\022\022\n\nicon"
    "_bling\030\003 \001(\005\022\021\n\tleft_time\030\004 \001(\005\022\021\n\tsub_v"
    "alue\030\005 \001(\005\"\366\002\n\nProtoBeast\022\020\n\010beast_id\030\001 "
    "\001(\003\022\022\n\nbeast_sort\030\002 \001(\005\022\023\n\013basic_attck\030\003"
    " \001(\005\022\021\n\tbasic_hit\030\004 \001(\005\022\022\n\nbasic_crit\030\005 "
    "\001(\005\022\022\n\nbeast_name\030\006 \001(\t\022#\n\tskill_set\030\007 \003"
    "(\0132\020.ProtoBeastSkill\022\021\n\tbeast_pos\030\010 \001(\005\022"
    "\023\n\013beast_force\030\t \001(\005\022\017\n\007ability\030\n \001(\005\022\022\n"
    "\ngrowth_lvl\030\013 \001(\005\022\024\n\014growth_value\030\014 \001(\005\022"
    "\022\n\nbeast_soul\030\r \003(\005\022\022\n\nsoul_value\030\016 \003(\005\022"
    "\023\n\013beast_level\030\017 \001(\005\022\r\n\005color\030\020 \001(\005\022\017\n\007c"
    "ombine\030\021 \001(\005\022\r\n\005guard\030\022 \001(\005\"@\n\013ProtoFlau"
    "nt\022\021\n\tflaunt_id\030\001 \001(\003\022\r\n\005color\030\002 \001(\005\022\017\n\007"
    "content\030\003 \001(\t\"a\n\017ProtoSyncLeague\022\024\n\014leag"
    "ue_index\030\001 \001(\003\022\023\n\013league_name\030\002 \001(\t\022\024\n\014l"
    "eague_level\030\003 \001(\005\022\r\n\005force\030\004 \001(\005\"M\n\022Prot"
    "oLeagueFighter\022\021\n\trole_name\030\001 \001(\t\022\020\n\010rol"
    "e_sex\030\002 \001(\005\022\022\n\nrole_level\030\003 \001(\005\"\330\002\n\017Prot"
    "oExpRestore\022\023\n\013activity_id\030\001 \001(\005\022\025\n\rrest"
    "ore_count\030\002 \001(\005\022\032\n\005money\030\003 \001(\0132\013.ProtoMo"
    "ney\022\013\n\003exp\030\004 \001(\005\022\022\n\nreputation\030\005 \001(\005\022\016\n\006"
    "honour\030\006 \001(\005\022\017\n\007exploit\030\007 \001(\005\022\025\n\rleague_"
    "contri\030\010 \001(\005\022\r\n\005reiki\030\t \001(\005\022\030\n\020free_rewa"
    "rd_list\030\n \003(\005\022\031\n\021money_reward_list\030\013 \003(\005"
    "\022\021\n\tfree_rate\030\014 \001(\005\022\022\n\nneed_money\030\r \001(\005\022"
    "\022\n\nopen_level\030\016 \001(\005\022\021\n\tvip_limit\030\017 \001(\005\022\022"
    "\n\nshow_index\030\020 \001(\005\"\237\001\n\013ProtoLMRole\022\022\n\nra"
    "nk_index\030\001 \001(\005\022\017\n\007role_id\030\002 \001(\003\022\021\n\trole_"
    "name\030\003 \001(\t\022\023\n\013league_name\030\004 \001(\t\022\022\n\nrole_"
    "force\030\005 \001(\005\022\023\n\013fight_score\030\006 \001(\005\022\013\n\003sex\030"
    "\007 \001(\005\022\r\n\005level\030\010 \001(\005\"\207\001\n\016ProtoMarLeague\022"
    "\014\n\004rank\030\001 \001(\005\022\021\n\tleague_id\030\002 \001(\003\022\023\n\013lead"
    "er_name\030\003 \001(\t\022\023\n\013league_name\030\004 \001(\t\022\024\n\014le"
    "ague_force\030\005 \001(\005\022\024\n\014league_score\030\006 \001(\005\"\367"
    "\001\n\rProtoRoleInfo\022\017\n\007role_id\030\001 \001(\003\022\021\n\trol"
    "e_name\030\002 \001(\t\022\020\n\010role_sex\030\003 \001(\005\022\022\n\nrole_f"
    "orce\030\004 \001(\005\022\020\n\010vip_type\030\005 \001(\005\022\020\n\010label_id"
    "\030\006 \001(\005\022\022\n\nrole_level\030\007 \001(\005\022\021\n\tleague_id\030"
    "\010 \001(\003\022\023\n\013league_name\030\t \001(\t\022\023\n\013role_caree"
    "r\030\n \001(\005\022\021\n\trole_wing\030\013 \001(\005\022\024\n\014role_solid"
    "er\030\014 \001(\005\"\333\001\n\017ProtoRankRecord\022\020\n\010cur_rank"
    "\030\001 \001(\005\022\021\n\tlast_rank\030\002 \001(\005\022\017\n\007role_id\030\003 \001"
    "(\003\022\020\n\010vip_type\030\004 \001(\005\022\022\n\nrank_value\030\005 \001(\005"
    "\022\027\n\017display_content\030\006 \001(\t\022\023\n\013league_name"
    "\030\007 \001(\t\022\025\n\radditional_id\030\010 \001(\003\022\023\n\013worship"
    "_num\030\t \001(\003\022\022\n\nis_worship\030\n \001(\005\"5\n\020ProtoF"
    "BReadyInfo\022\017\n\007role_id\030\001 \001(\003\022\020\n\010is_ready\030"
    "\002 \001(\010\"\265\002\n\rProtoFightPro\022\013\n\003hit\030\001 \001(\005\022\r\n\005"
    "avoid\030\002 \001(\005\022\014\n\004crit\030\003 \001(\005\022\021\n\ttoughness\030\004"
    " \001(\005\022\r\n\005speed\030\005 \001(\005\022\r\n\005blood\030\006 \001(\005\022\021\n\tbl"
    "ood_max\030\007 \001(\005\022\r\n\005magic\030\010 \001(\005\022\021\n\tmagic_ma"
    "x\030\t \001(\005\022\016\n\006attack\030\n \001(\005\022\017\n\007defence\030\013 \001(\005"
    "\022\022\n\ncrit_multi\030\014 \001(\005\022\024\n\014damage_multi\030\r \001"
    "(\005\022\016\n\006damage\030\016 \001(\005\022\027\n\017reduction_multi\030\017 "
    "\001(\005\022\021\n\treduction\030\020 \001(\005\022\r\n\005force\030\021 \001(\005\"4\n"
    "\014ProtoWarItem\022$\n\nleague_set\030\001 \003(\0132\020.Prot"
    "oSyncLeague\"\225\001\n\024ProtoSMBattleRankRec\022\017\n\007"
    "role_id\030\001 \001(\003\022\021\n\trole_name\030\002 \001(\t\022\013\n\003sex\030"
    "\003 \001(\005\022\014\n\004rank\030\004 \001(\005\022\r\n\005score\030\005 \001(\005\022\017\n\007ca"
    "mp_id\030\006 \001(\005\022\014\n\004kill\030\007 \001(\005\022\020\n\010max_kill\030\010 "
    "\001(\005\"\201\001\n\rProtoLWarItem\022\021\n\titem_rank\030\001 \001(\005"
    "\022\021\n\titem_name\030\002 \001(\t\022\025\n\ritem_resource\030\003 \001"
    "(\005\022\021\n\tleague_id\030\004 \001(\003\022\017\n\007pixel_x\030\005 \001(\005\022\017"
    "\n\007pixel_y\030\006 \001(\005\"P\n\rWorldBossRank\022\017\n\007role"
    "_id\030\001 \001(\005\022\021\n\trole_name\030\002 \001(\t\022\014\n\004rank\030\003 \001"
    "(\005\022\r\n\005score\030\004 \001(\005\"U\n\022ProtoWorldBossRank\022"
    "\017\n\007role_id\030\001 \001(\003\022\021\n\trole_name\030\002 \001(\t\022\014\n\004r"
    "ank\030\003 \001(\005\022\r\n\005score\030\004 \001(\001\"\261\001\n\020ProtoShoutD"
    "etail\022\022\n\nparse_type\030\001 \001(\005\022\024\n\014single_valu"
    "e\030\002 \001(\005\022\021\n\tsingle_id\030\003 \001(\003\022\026\n\016single_con"
    "tent\030\004 \001(\t\022$\n\trole_info\030\005 \001(\0132\021.ProtoBro"
    "castRole\022\"\n\titem_tips\030\006 \001(\0132\017.ProtoShout"
    "Item\"S\n\rProtoTreasure\022\017\n\007coord_x\030\001 \001(\005\022\017"
    "\n\007coord_y\030\002 \001(\005\022\021\n\tmap_index\030\003 \001(\005\022\r\n\005st"
    "ate\030\004 \001(\005\"\235\001\n\020ProtoScriptClean\022\023\n\013script"
    "_sort\030\001 \001(\005\022\024\n\014script_times\030\002 \001(\005\022\023\n\013cha"
    "pter_key\030\003 \001(\005\022\027\n\017script_use_tick\030\004 \001(\005\022"
    "\033\n\023protect_beast_index\030\005 \001(\005\022\023\n\013reset_ti"
    "mes\030\006 \001(\005\"\305\005\n\017ProtoHookDetail\022\031\n\021kill_ta"
    "sk_monster\030\001 \001(\005\022\033\n\023kill_nearby_monster\030"
    "\002 \001(\005\022\023\n\013auto_pickup\030\003 \001(\005\022\027\n\017auto_call_"
    "beast\030\004 \001(\005\022\021\n\tauto_drug\030\005 \001(\005\022\027\n\017auto_d"
    "rug_blood\030\006 \001(\005\022\027\n\017auto_drug_magic\030\007 \001(\005"
    "\022\025\n\rauto_buy_drug\030\010 \001(\005\022\021\n\tstop_hook\030\t \001"
    "(\005\022\023\n\013relive_type\030\n \001(\005\022\027\n\017hook_list_ind"
    "ex\030\013 \001(\005\022#\n\nskill_list\030\014 \003(\0132\017.ProtoHook"
    "Skill\022\022\n\nkill_other\030\r \001(\005\022\035\n\025auto_drug_b"
    "lood_beast\030\016 \001(\005\022\035\n\025auto_drug_magic_beas"
    "t\030\017 \001(\005\022\027\n\017auto_avoid_boss\030\020 \001(\005\022\022\n\nis_h"
    "ooking\030\021 \001(\005\022\027\n\017drug_blood_tick\030\022 \001(\005\022\027\n"
    "\017drug_magic_tick\030\023 \001(\005\022\035\n\025drug_blood_not"
    "ify_buy\030\024 \001(\005\022\035\n\025drug_magic_notify_buy\030\025"
    " \001(\005\022\026\n\016auto_back_main\030\026 \001(\005\022\034\n\024auto_bac"
    "k_main_blood\030\027 \001(\005\022\023\n\013auto_random\030\030 \001(\005\022"
    "\031\n\021auto_random_blood\030\031 \001(\005\022\033\n\023auto_back_"
    "main_tick\030\032 \001(\005\022\030\n\020auto_random_tick\030\033 \001("
    "\005\"\'\n\016ProtoHookSkill\022\025\n\rhook_skill_id\030\001 \003"
    "(\005\"\210\001\n\023ProtoFashionTipInfo\022\016\n\006tip_id\030\001 \001"
    "(\003\022\022\n\nfashion_id\030\002 \001(\005\022\025\n\rfashion_force\030"
    "\003 \001(\005\022\020\n\010left_sec\030\004 \001(\005\022\022\n\nmartial_id\030\005 "
    "\001(\005\022\020\n\010event_id\030\006 \001(\005\"[\n\023ProtoVipTimeTip"
    "Info\022\016\n\006tip_id\030\001 \001(\003\022\020\n\010vip_type\030\002 \001(\005\022\020"
    "\n\010left_sec\030\003 \001(\005\022\020\n\010event_id\030\004 \001(\005\"\232\001\n\022P"
    "rotoScriptChapter\022\017\n\007chapter\030\001 \001(\005\022\021\n\tis"
    "_passed\030\002 \001(\005\022\023\n\013start_level\030\003 \001(\005\022\020\n\010fi"
    "rst_id\030\004 \001(\003\022\022\n\nfirst_name\030\005 \001(\t\022\022\n\nis_s"
    "tarted\030\006 \001(\005\022\021\n\tbest_tick\030\007 \001(\005\"\337\001\n\017Prot"
    "oSysSetting\022\020\n\010is_shock\030\001 \001(\005\022\034\n\005music\030\002"
    " \001(\0132\r.ProtoPairObj\022#\n\014sound_effect\030\003 \001("
    "\0132\r.ProtoPairObj\022\023\n\013screen_type\030\004 \001(\005\022\023\n"
    "\013shield_type\030\005 \003(\005\022\032\n\022turnoff_act_notify"
    "\030\006 \001(\005\022\033\n\023auto_adjust_express\030\007 \001(\005\022\024\n\014f"
    "luency_type\030\010 \001(\005\"d\n\020ProtoRpmRoleInfo\022\017\n"
    "\007role_id\030\001 \001(\003\022\021\n\trole_name\030\002 \001(\t\022\r\n\005for"
    "ce\030\003 \001(\005\022\r\n\005level\030\004 \001(\005\022\016\n\006career\030\005 \001(\005\""
    "k\n\010TipsItem\022\014\n\004type\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\022\016\n"
    "\006amount\030\003 \001(\005\022\017\n\007extra_1\030\004 \001(\005\022\020\n\010vip_ty"
    "pe\030\005 \001(\005\022\022\n\nis_special\030\006 \001(\005\"5\n\017ProtoFBU"
    "seTimes\022\017\n\007role_id\030\001 \001(\003\022\021\n\tuse_times\030\002 "
    "\001(\005\"B\n\rProtoMoverPos\022\017\n\007role_id\030\001 \001(\003\022\017\n"
    "\007pixel_x\030\002 \001(\005\022\017\n\007pixel_y\030\003 \001(\005\"\347\001\n\026Prot"
    "oCustomerSVCRecord\022\021\n\trecord_id\030\001 \001(\003\022\021\n"
    "\tsend_tick\030\002 \001(\003\022\025\n\rrecord_status\030\003 \001(\005\022"
    "\023\n\013record_type\030\004 \001(\005\022\r\n\005title\030\005 \001(\t\022\017\n\007c"
    "ontent\030\006 \001(\t\022\026\n\016replay_content\030\007 \001(\t\022\025\n\r"
    "last_evaluate\030\010 \001(\005\022\025\n\ropinion_index\030\t \001"
    "(\005\022\025\n\revaluate_star\030\n \001(\005\"\362\001\n\021ProtoMedia"
    "GiftDef\022\021\n\tgift_sort\030\001 \001(\005\022\021\n\tgift_type\030"
    "\002 \001(\005\022!\n\nvalue_exts\030\003 \003(\0132\r.ProtoPairObj"
    "\022\036\n\ngift_items\030\004 \003(\0132\n.ProtoItem\022\021\n\tgift"
    "_name\030\005 \001(\t\022\021\n\tgift_desc\030\006 \001(\t\022\021\n\tuse_ti"
    "mes\030\007 \001(\005\022\026\n\016left_use_times\030\010 \001(\005\022\017\n\007ico"
    "n_id\030\t \001(\005\022\022\n\nfont_color\030\n \003(\005\"\357\001\n\rProto"
    "AreaRole\022\n\n\002id\030\001 \001(\003\022\014\n\004name\030\002 \001(\t\022\014\n\004ra"
    "nk\030\003 \001(\005\022\r\n\005force\030\004 \001(\005\022\013\n\003sex\030\005 \001(\005\022\016\n\006"
    "weapon\030\006 \001(\005\022\017\n\007clothes\030\007 \001(\005\022\026\n\016fashion"
    "_weapon\030\010 \001(\005\022\027\n\017fashion_clothes\030\t \001(\005\022\r"
    "\n\005level\030\n \001(\005\022\016\n\006career\030\013 \001(\005\022\022\n\nwing_le"
    "vel\030\014 \001(\005\022\025\n\rsolider_level\030\r \001(\005\"\315\003\n\017Pro"
    "toScriptInfo\022\023\n\013script_sort\030\001 \001(\005\022\022\n\nlef"
    "t_times\030\002 \001(\005\022\022\n\nstar_level\030\003 \001(\005\022\017\n\007is_"
    "pass\030\004 \001(\005\022\017\n\007is_open\030\005 \001(\005\022\026\n\016left_buy_"
    "times\030\006 \001(\005\022\021\n\tbuy_times\030\007 \001(\005\022\020\n\010left_g"
    "et\030\010 \001(\005\022\022\n\ntoday_rank\030\t \001(\005\022#\n\nfloor_in"
    "fo\030\n \003(\0132\017.ProtoFloorInfo\022\022\n\npass_floor\030"
    "\013 \001(\005\022\023\n\013reset_times\030\014 \001(\005\022\020\n\010is_sweep\030\r"
    " \001(\005\022\022\n\npass_piece\030\016 \001(\005\022\024\n\014pass_chapter"
    "\030\017 \001(\005\022,\n\014special_info\030\020 \003(\0132\026.ProtoSpec"
    "ialAwardInfo\022\025\n\ris_first_pass\030\021 \001(\005\022\020\n\010s"
    "kill_id\030\022 \001(\005\022\022\n\nstart_wave\030\023 \001(\005\022\025\n\rsta"
    "rt_chapter\030\024 \001(\005\"r\n\017ProtoAreaRecord\022\021\n\tp"
    "ass_time\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022\r\n\005state\030\003 "
    "\001(\005\022\014\n\004name\030\004 \001(\t\022\014\n\004rank\030\005 \001(\005\022\023\n\013rank_"
    "change\030\006 \001(\005\"\243\001\n\017ProtoBuffStatus\022\017\n\007buff"
    "_id\030\001 \001(\005\022\014\n\004last\030\002 \001(\005\022\020\n\010interval\030\003 \001("
    "\005\022\022\n\ncheck_tick\030\004 \001(\003\022\023\n\013prop_id_set\030\005 \003"
    "(\005\022\021\n\tvalue_set\030\006 \003(\005\022\023\n\013percent_set\030\007 \003"
    "(\005\022\016\n\006hidden\030\010 \001(\005\"\226\002\n\017ProtoShusanBoss\022\021"
    "\n\tboss_sort\030\001 \001(\005\022\017\n\007boss_id\030\002 \001(\003\022\021\n\tbo"
    "rn_time\030\003 \001(\005\022 \n\010aim_role\030\004 \001(\0132\016.ProtoR"
    "oleInfo\022\026\n\016last_role_name\030\005 \001(\t\022\024\n\014last_"
    "role_id\030\006 \001(\003\022\r\n\005floor\030\007 \001(\005\022\020\n\010scene_id"
    "\030\010 \001(\005\022\037\n\nborn_point\030\t \001(\0132\013.ProtoCoord\022"
    "\020\n\010space_id\030\n \001(\005\022\022\n\nleft_times\030\013 \001(\005\022\024\n"
    "\014is_pack_full\030\014 \001(\005\"\213\001\n\tProtoSuit\022\r\n\005lev"
    "el\030\001 \001(\005\022\r\n\005color\030\002 \001(\005\022\r\n\005count\030\003 \001(\005\022\021"
    "\n\tsuit_type\030\004 \001(\005\022\021\n\tis_active\030\005 \001(\005\022\025\n\r"
    "upper_is_suit\030\006 \001(\005\022\024\n\014is_min_level\030\007 \001("
    "\005\"L\n\016ProtoLvlReward\022\r\n\005level\030\001 \001(\005\022\020\n\010va"
    "lidate\030\002 \001(\005\022\031\n\005items\030\003 \003(\0132\n.ProtoItem\""
    "t\n\020ProtoDailyRecord\022\n\n\002id\030\001 \001(\005\022\r\n\005value"
    "\030\002 \001(\005\022\022\n\nhas_reward\030\003 \001(\005\022\017\n\007is_over\030\004 "
    "\001(\005\022\022\n\ncurr_value\030\005 \001(\005\022\014\n\004sort\030\006 \001(\005\"\317\002"
    "\n\016ProtoRoleShape\022\017\n\007role_id\030\001 \001(\003\022\r\n\005lab"
    "el\030\002 \001(\005\022\016\n\006weapon\030\003 \001(\005\022\017\n\007clothes\030\004 \001("
    "\005\022\026\n\016fashion_weapon\030\005 \001(\005\022\027\n\017fashion_clo"
    "thes\030\006 \001(\005\022\016\n\006career\030\007 \001(\005\022\013\n\003sex\030\010 \001(\005\022"
    "\014\n\004wing\030\t \001(\005\022\022\n\ngod_weapon\030\n \001(\005\022\022\n\nmou"
    "nt_sort\030\013 \001(\005\022\022\n\nsword_pool\030\014 \001(\005\022\021\n\ttia"
    "n_gang\030\r \001(\005\022\022\n\nfashion_id\030\016 \001(\005\022\025\n\rfash"
    "ion_color\030\017 \001(\005\022\023\n\013transfer_id\030\020 \001(\005\022\021\n\t"
    "hickty_id\030\021 \001(\005\"X\n\023ProtoCQAttackerInfo\022\r"
    "\n\005order\030\001 \001(\005\022\017\n\007role_id\030\002 \001(\003\022\021\n\trole_n"
    "ame\030\003 \001(\t\022\016\n\006status\030\004 \001(\005\"F\n\tProtoWing\022\017"
    "\n\007wing_id\030\001 \001(\005\022\022\n\nwing_level\030\002 \001(\005\022\024\n\014w"
    "ing_process\030\003 \001(\005\"b\n\013ProtoCQRank\022\014\n\004rank"
    "\030\001 \001(\005\022\017\n\007role_id\030\002 \001(\003\022\021\n\trole_name\030\003 \001"
    "(\t\022\r\n\005score\030\004 \001(\005\022\022\n\nfight_time\030\005 \001(\005\"`\n"
    "\rProtoThreeObj\022\n\n\002id\030\001 \001(\003\022\r\n\005value\030\002 \001("
    "\005\022\014\n\004tick\030\003 \001(\003\022\023\n\013total_times\030\004 \001(\005\022\021\n\t"
    "last_tick\030\005 \001(\003\"R\n\022ProtoEscortMapItem\022\014\n"
    "\004type\030\001 \001(\005\022\n\n\002id\030\002 \001(\003\022\t\n\001x\030\003 \001(\005\022\t\n\001y\030"
    "\004 \001(\005\022\014\n\004name\030\005 \001(\t\"D\n\017ProtoRefineSuit\022\023"
    "\n\013is_activity\030\001 \001(\005\022\r\n\005level\030\002 \001(\005\022\r\n\005co"
    "unt\030\003 \001(\005\"\244\001\n\016ProtoPanicItem\022\017\n\007item_id\030"
    "\001 \001(\005\022\021\n\torg_price\030\002 \001(\005\022\r\n\005price\030\003 \001(\005\022"
    "\023\n\013left_amount\030\004 \001(\005\022\021\n\tlimit_buy\030\005 \001(\005\022"
    "\026\n\016left_buy_times\030\006 \001(\005\022\014\n\004type\030\007 \001(\005\022\021\n"
    "\titem_bind\030\010 \001(\005\"\303\001\n\013ProtoKiller\022\017\n\007role"
    "_id\030\001 \001(\003\022\021\n\trole_name\030\002 \001(\t\022\022\n\nrole_lev"
    "el\030\003 \001(\005\022\023\n\013fight_force\030\004 \001(\005\022\022\n\nkill_ti"
    "mes\030\005 \001(\005\022\031\n\021lastest_kill_tick\030\006 \001(\005\022\023\n\013"
    "is_in_scene\030\007 \001(\005\022\020\n\010role_sex\030\010 \001(\005\022\021\n\tk"
    "ill_tick\030\t \001(\t\"y\n\020ProtoPeakWarRank\022\014\n\004ra"
    "nk\030\001 \001(\005\022\017\n\007role_id\030\002 \001(\003\022\021\n\trole_name\030\003"
    " \001(\t\022\023\n\013kill_amount\030\004 \001(\005\022\r\n\005floor\030\005 \001(\005"
    "\022\017\n\007exploit\030\006 \001(\005\"\310\003\n\014PActTypeItem\022!\n\013re"
    "ward_info\030\001 \003(\0132\014.PRewardItem\022\021\n\tsub_val"
    "ue\030\002 \001(\003\022\022\n\nsecond_sub\030\003 \001(\003\022\023\n\013update_t"
    "ick\030\004 \001(\005\022\021\n\tact_index\030\005 \001(\005\022\022\n\nfirst_ty"
    "pe\030\006 \001(\005\022\023\n\013second_type\030\007 \001(\005\022\021\n\topen_ti"
    "me\030\010 \003(\005\022\024\n\014reward_count\030\t \001(\005\022\r\n\005title\030"
    "\n \001(\t\022\017\n\007content\030\013 \001(\t\022\022\n\nstart_tick\030\014 \001"
    "(\003\022\021\n\tstop_tick\030\r \001(\003\022\r\n\005agent\030\016 \003(\005\022\020\n\010"
    "priority\030\017 \001(\005\022\r\n\005times\030\020 \001(\004\022\021\n\ticon_ty"
    "pe\030\021 \001(\005\022\025\n\rrole_recharge\030\022 \001(\005\022\r\n\005limit"
    "\030\023 \001(\005\022\024\n\014role_consume\030\024 \001(\005\022.\n\020cumulati"
    "ve_login\030\025 \001(\0132\024.PActCumulativeLogin\"\340\003\n"
    "\013PRewardItem\022\017\n\007content\030\001 \001(\t\022\021\n\treward_"
    "id\030\002 \001(\005\022\036\n\nreward_set\030\003 \003(\0132\n.ProtoItem"
    "\022\021\n\tdraw_flag\030\004 \001(\005\022\r\n\005index\030\005 \001(\005\022\014\n\004co"
    "nd\030\006 \003(\003\022\016\n\006arrive\030\007 \001(\005\022\016\n\006drawed\030\010 \001(\005"
    "\022*\n\014role_id_name\030\t \003(\0132\024.ProtoPairLongSt"
    "ring\022\017\n\007brocast\030\n \001(\005\022\r\n\005times\030\013 \001(\005\022\037\n\007"
    "sub_map\030\014 \003(\0132\016.ProtoPairLong\022$\n\014recharg"
    "e_map\030\r \003(\0132\016.ProtoPairLong\022\022\n\nmust_rese"
    "t\030\016 \001(\005\022\035\n\tcost_item\030\017 \003(\0132\n.ProtoItem\022\034"
    "\n\010pre_item\030\020 \003(\0132\n.ProtoItem\022\025\n\rexchange"
    "_type\030\021 \001(\005\022\032\n\022exchange_item_name\030\022 \001(\t\022"
    "\023\n\013cash_coupon\030\023 \001(\005\022\021\n\tsub_value\030\024 \001(\003\""
    "Z\n\rProtoGateRole\022\017\n\007role_id\030\001 \001(\003\022\014\n\004nam"
    "e\030\002 \001(\t\022\r\n\005level\030\003 \001(\005\022\013\n\003sex\030\004 \001(\005\022\016\n\006c"
    "areer\030\005 \001(\005\"J\n\020ProtoPackageItem\022\017\n\007item_"
    "id\030\001 \001(\005\022\022\n\nitem_index\030\002 \001(\005\022\021\n\titem_typ"
    "e\030\003 \001(\005\"v\n\030ProtoEquipPolishAttrInfo\022\022\n\nl"
    "ock_index\030\001 \001(\005\022\021\n\tattr_type\030\002 \001(\005\022\021\n\tcu"
    "r_value\030\003 \001(\005\022\r\n\005color\030\004 \001(\005\022\021\n\tmax_valu"
    "e\030\005 \001(\005\"N\n\026ProtoEquipPolishStruct\0224\n\021equ"
    "ip_polish_info\030\001 \003(\0132\031.ProtoEquipPolishA"
    "ttrInfo\"\304\001\n\020ProtoEquipPolish\0220\n\017cur_poli"
    "sh_info\030\001 \001(\0132\027.ProtoEquipPolishStruct\0223"
    "\n\022single_polish_info\030\002 \001(\0132\027.ProtoEquipP"
    "olishStruct\0222\n\021batch_polish_info\030\003 \003(\0132\027"
    ".ProtoEquipPolishStruct\022\025\n\rprocess_value"
    "\030\004 \001(\005\"e\n\014ProtoVipGift\022\035\n\titem_list\030\001 \003("
    "\0132\n.ProtoItem\022\020\n\010vip_type\030\002 \001(\005\022\021\n\tisHas"
    "Gift\030\003 \001(\005\022\021\n\treward_id\030\004 \001(\005\"\204\001\n\016ProtoT"
    "rialTask\022\017\n\007task_id\030\001 \001(\005\022\016\n\006status\030\002 \001("
    "\005\022\021\n\taward_exp\030\003 \001(\005\022\032\n\005money\030\004 \001(\0132\013.Pr"
    "otoMoney\022\r\n\005value\030\005 \001(\005\022\023\n\013final_value\030\006"
    " \001(\005\"~\n\020ProtoWeddingIcon\022\026\n\016wedding_req_"
    "id\030\001 \001(\003\022\030\n\020wedding_req_name\030\002 \001(\t\022\032\n\022we"
    "dding_partner_id\030\003 \001(\003\022\034\n\024wedding_partne"
    "r_name\030\004 \001(\t\"p\n\016ProtoShoutItem\022\017\n\007item_i"
    "d\030\001 \001(\005\022\021\n\titem_name\030\002 \001(\t\022\014\n\004type\030\003 \001(\005"
    "\022\013\n\003msg\030\004 \001(\014\022\r\n\005color\030\005 \001(\005\022\020\n\010item_num"
    "\030\006 \001(\005\"\310\001\n\rPActPanelInfo\022\021\n\tact_index\030\001 "
    "\001(\005\022\022\n\nfirst_type\030\002 \001(\005\022\023\n\013second_type\030\003"
    " \001(\005\022\r\n\005title\030\004 \001(\t\022\017\n\007content\030\005 \001(\t\022\022\n\n"
    "start_tick\030\006 \001(\003\022\020\n\010end_tick\030\007 \001(\003\022\024\n\014re"
    "ward_count\030\010 \001(\005\022\020\n\010priority\030\t \001(\005\022\r\n\005ti"
    "mes\030\n \001(\003\"\235\001\n\025ProtoLeagueStoreApply\022\021\n\tr"
    "ole_name\030\001 \001(\t\022\022\n\nrole_level\030\002 \001(\005\022\016\n\006co"
    "ntri\030\003 \001(\005\022\017\n\007item_id\030\004 \001(\005\022\020\n\010item_num\030"
    "\005 \001(\005\022\020\n\010apply_id\030\006 \001(\003\022\030\n\004item\030\007 \001(\0132\n."
    "ProtoItem\"\207\001\n\030ProtoLeagueStoreApplyHis\022\021"
    "\n\texec_tick\030\001 \001(\003\022\021\n\texec_name\030\002 \001(\t\022\017\n\007"
    "item_id\030\003 \001(\005\022\020\n\010item_num\030\004 \001(\005\022\024\n\014check"
    "er_name\030\005 \001(\t\022\014\n\004exec\030\006 \001(\005\"2\n\022ProtoActR"
    "ewardItem\022\r\n\005index\030\001 \001(\005\022\r\n\005count\030\002 \001(\005\""
    "^\n\022ProtoActRoleReward\022\'\n\ndrawed_set\030\001 \003("
    "\0132\023.ProtoActRewardItem\022\017\n\007role_id\030\002 \001(\003\022"
    "\016\n\006carrer\030\003 \001(\005\"N\n\023ProtoPairLongString\022\022"
    "\n\ndata_int64\030\001 \001(\003\022\023\n\013data_string\030\002 \001(\t\022"
    "\016\n\006league\030\003 \001(\t\"2\n\rProtoPairLong\022\016\n\006obj_"
    "id\030\001 \001(\003\022\021\n\tobj_value\030\002 \001(\003\";\n\024ProtoActR"
    "ewardNotify\022\020\n\010priority\030\001 \001(\005\022\021\n\tact_ind"
    "ex\030\002 \003(\005\"u\n\rProtoNearRole\022\017\n\007role_id\030\001 \001"
    "(\003\022\021\n\trole_name\030\002 \001(\t\022\r\n\005level\030\003 \001(\005\022\035\n\010"
    "location\030\004 \001(\0132\013.ProtoCoord\022\022\n\nname_colo"
    "r\030\005 \001(\005\"\217\002\n\017ProtoTravelTeam\022\017\n\007team_id\030\001"
    " \001(\003\022\021\n\tteam_name\030\002 \001(\t\022\021\n\tleader_id\030\003 \001"
    "(\003\022\023\n\013leader_name\030\004 \001(\t\022\025\n\rteamer_amount"
    "\030\005 \001(\005\022\022\n\nteam_force\030\006 \001(\005\022\020\n\010scene_id\030\007"
    " \001(\005\022\023\n\013sceret_flag\030\010 \001(\005\022\023\n\013limit_force"
    "\030\t \001(\005\022\022\n\nauto_start\030\n \001(\005\022\020\n\010start_fb\030\013"
    " \001(\005\022\021\n\tteamer_id\030\014 \003(\003\022\020\n\010is_apply\030\r \001("
    "\005\"\200\001\n\020ProtoBrotherInfo\022\017\n\007role_id\030\001 \001(\003\022"
    "\021\n\trole_name\030\002 \001(\t\022\023\n\013role_career\030\003 \001(\005\022"
    "\022\n\nrole_level\030\004 \001(\005\022\017\n\007emotion\030\005 \001(\005\022\016\n\006"
    "online\030\006 \001(\005\"R\n\020ProtoBrotherTask\022\017\n\007task"
    "_id\030\001 \001(\005\022\024\n\014finished_num\030\002 \001(\005\022\027\n\017finis"
    "hed_player\030\003 \003(\005\"\321\001\n\020ProtoMagicWeapon\022\026\n"
    "\016magicweapon_id\030\001 \001(\005\022\027\n\017rank_star_grade"
    "\030\002 \001(\005\022\032\n\022rank_star_progress\030\003 \001(\005\022\020\n\010sk"
    "ill_id\030\004 \001(\005\022\023\n\013skill_level\030\005 \001(\005\022\026\n\016qua"
    "_star_grade\030\006 \001(\005\022\031\n\021qua_star_progress\030\007"
    " \001(\005\022\026\n\016activate_state\030\010 \001(\005\"a\n\016ProtoAIl"
    "lusion\022\n\n\002id\030\001 \001(\005\022\016\n\006unlock\030\002 \001(\010\022\014\n\004ty"
    "pe\030\003 \001(\005\022\020\n\010last_sec\030\004 \001(\005\022\023\n\013unlock_typ"
    "e\030\005 \001(\005\"\324\001\n\021ProtoTravelTeamer\022\017\n\007role_id"
    "\030\001 \001(\003\022\021\n\trole_name\030\002 \001(\t\022\020\n\010role_sex\030\003 "
    "\001(\005\022\023\n\013role_career\030\004 \001(\005\022\022\n\nleft_blood\030\005"
    " \001(\005\022\023\n\013total_blood\030\006 \001(\005\022\022\n\nleft_magic\030"
    "\007 \001(\005\022\023\n\013total_magic\030\010 \001(\005\022\r\n\005level\030\t \001("
    "\005\022\023\n\013fight_force\030\n \001(\005\"\235\001\n\017ProtoPromotTe"
    "am\022\017\n\007team_id\030\001 \001(\003\022\021\n\tteam_name\030\002 \001(\t\022\023"
    "\n\013server_prev\030\003 \001(\t\022\016\n\006is_bet\030\004 \001(\005\022\027\n\017i"
    "s_promot_turns\030\005 \001(\005\022\025\n\ris_next_turns\030\006 "
    "\001(\005\022\021\n\tteam_icon\030\007 \001(\005\"\202\001\n\022ProtoTravelPe"
    "akBet\022\024\n\014promot_turns\030\001 \001(\005\022\017\n\007team_id\030\002"
    " \001(\003\022\021\n\tteam_name\030\003 \001(\t\022\023\n\013server_prev\030\004"
    " \001(\t\022\016\n\006copper\030\005 \001(\005\022\r\n\005state\030\006 \001(\005\"\225\001\n\025"
    "ProtoMilitaryExploits\022\014\n\004type\030\001 \001(\005\022\017\n\007t"
    "eam_id\030\002 \001(\003\022\021\n\tteam_name\030\003 \001(\t\022\023\n\013serve"
    "r_prev\030\004 \001(\t\022\021\n\twin_times\030\005 \001(\005\022\022\n\nloss_"
    "times\030\006 \001(\005\022\016\n\006result\030\007 \001(\005\"i\n\022ProtoTrav"
    "PeakWorth\022\014\n\004rank\030\001 \001(\005\022\017\n\007team_id\030\002 \001(\003"
    "\022\021\n\tteam_name\030\003 \001(\t\022\022\n\nteam_force\030\004 \001(\005\022"
    "\r\n\005worth\030\005 \001(\005\"t\n\021ProtoMagicActBase\022\016\n\006a"
    "ctive\030\001 \001(\005\022\r\n\005level\030\002 \001(\005\022\016\n\006degree\030\003 \001"
    "(\005\022\020\n\010auto_use\030\004 \001(\005\022\014\n\004part\030\005 \003(\005\022\020\n\010ma"
    "gic_id\030\006 \001(\005\"c\n\017SecretTShopItem\022\017\n\007item_"
    "id\030\001 \001(\005\022\022\n\nbuy_record\030\002 \001(\005\022\014\n\004bind\030\003 \001"
    "(\005\022\r\n\005price\030\004 \001(\005\022\016\n\006amount\030\005 \001(\005\"m\n\nStR"
    "ankUnit\022\021\n\tplayer_id\030\001 \001(\003\022\023\n\013player_nam"
    "e\030\002 \001(\t\022\r\n\005value\030\003 \001(\005\022\014\n\004rank\030\004 \001(\005\022\032\n\005"
    "coord\030\005 \001(\0132\013.ProtoCoord\"m\n\021STHistoryRan"
    "kUnit\022\021\n\tplayer_id\030\001 \001(\003\022\014\n\004name\030\002 \001(\t\022\r"
    "\n\005level\030\003 \001(\005\022\r\n\005fight\030\004 \001(\005\022\013\n\003val\030\005 \001("
    "\005\022\014\n\004rank\030\006 \001(\005\"8\n\014PTLeagueItem\022\n\n\002id\030\001 "
    "\001(\003\022\014\n\004name\030\002 \001(\t\022\016\n\006result\030\003 \003(\005\"0\n\014Pro"
    "toSession\022\017\n\007account\030\001 \001(\t\022\017\n\007session\030\002 "
    "\001(\t\"\330\001\n\rIllustrations\022\020\n\010illus_id\030\001 \001(\005\022"
    "\026\n\016illus_class_id\030\002 \001(\005\022\026\n\016illus_group_i"
    "d\030\003 \001(\005\022\023\n\013illus_level\030\004 \001(\005\022\030\n\020upgrade_"
    "goods_id\030\005 \001(\005\022\034\n\024upgrade_goods_amount\030\006"
    " \001(\005\022\022\n\nopen_level\030\007 \001(\005\022\021\n\tattr_type\030\010 "
    "\001(\005\022\021\n\tcur_value\030\t \001(\005\"3\n\013Illus_group\022\020\n"
    "\010group_id\030\001 \001(\005\022\022\n\ngroup_type\030\002 \001(\005\"A\n\013I"
    "llus_class\022 \n\ngroup_list\030\001 \003(\0132\014.Illus_g"
    "roup\022\020\n\010class_id\030\002 \001(\005\"`\n\016ProtoFloorInfo"
    "\022\020\n\010floor_id\030\001 \001(\005\022\022\n\nis_special\030\002 \001(\005\022\021"
    "\n\tpass_tick\030\003 \001(\003\022\025\n\ris_today_pass\030\004 \001(\005"
    "\"J\n\017ProtoLScoreInfo\022\021\n\trole_rank\030\001 \001(\005\022\021"
    "\n\trole_name\030\002 \001(\t\022\021\n\trole_hurt\030\003 \001(\005\"d\n\022"
    "ProtoScriptAdvance\022\023\n\013script_sort\030\001 \001(\005\022"
    "\022\n\nleft_times\030\002 \001(\005\022\023\n\013reset_times\030\003 \001(\005"
    "\022\020\n\010is_sweep\030\004 \001(\005\"a\n\022ProtoScriptExpInfo"
    "\022\022\n\nchapter_id\030\001 \001(\005\022\025\n\ris_today_pass\030\002 "
    "\001(\005\022\017\n\007is_pass\030\003 \001(\005\022\017\n\007is_open\030\004 \001(\005\"b\n"
    "\025ProtoSpecialAwardInfo\022\026\n\016script_wave_id"
    "\030\001 \001(\005\022\023\n\013script_sort\030\002 \001(\005\022\014\n\004wave\030\003 \001("
    "\005\022\016\n\006is_get\030\004 \001(\005\"U\n\013ProtoServer\022\n\n\002id\030\001"
    " \001(\005\022\014\n\004name\030\002 \001(\t\022\014\n\004prev\030\003 \001(\t\022\014\n\004flag"
    "\030\004 \001(\t\022\020\n\010cur_flag\030\005 \001(\t\"p\n\022ProtoWorldBo"
    "ssInfo\022\025\n\rboss_scene_id\030\001 \001(\005\022\023\n\013boss_st"
    "atus\030\002 \001(\005\022\r\n\005blood\030\003 \001(\001\022\016\n\006killer\030\004 \001("
    "\t\022\017\n\007is_full\030\005 \001(\005\"}\n\023ProtoLeagueRankInf"
    "o\022\024\n\014league_index\030\001 \001(\003\022\023\n\013league_name\030\002"
    " \001(\t\022\014\n\004rank\030\003 \001(\005\022\014\n\004hurt\030\004 \001(\001\022\r\n\005scor"
    "e\030\005 \001(\005\022\020\n\010space_id\030\006 \001(\005\"\257\002\n\rProtoLWarI"
    "nfo\022\020\n\010space_id\030\001 \001(\005\022\027\n\017attack_resource"
    "\030\002 \001(\005\022\030\n\020defence_resource\030\003 \001(\005\022\024\n\014atta"
    "ck_level\030\004 \001(\005\022\025\n\rdefence_level\030\005 \001(\005\022\022\n"
    "\nattack_add\030\006 \001(\005\022\023\n\013defence_add\030\007 \001(\005\022\021"
    "\n\tboss_name\030\010 \001(\t\022\022\n\nboss_blood\030\t \001(\001\022.\n"
    "\020room_league_rank\030\n \003(\0132\024.ProtoLeagueRan"
    "kInfo\022,\n\016room_my_league\030\013 \001(\0132\024.ProtoLea"
    "gueRankInfo\"T\n\013ProtoItemId\022\n\n\002id\030\001 \001(\005\022\016"
    "\n\006amount\030\002 \001(\005\022\014\n\004bind\030\003 \001(\005\022\014\n\004cond\030\004 \001"
    "(\005\022\r\n\005state\030\005 \001(\005\"\\\n\022ProtoSwordPoolTask\022"
    "\017\n\007task_id\030\001 \001(\005\022\021\n\ttotal_num\030\002 \001(\005\022\020\n\010l"
    "eft_num\030\003 \001(\005\022\020\n\010once_exp\030\004 \001(\005\"0\n\020Proto"
    "SvenDayItem\022\013\n\003day\030\001 \001(\005\022\017\n\007item_id\030\002 \001("
    "\005\"1\n\021ProtoSevenDayItem\022\013\n\003day\030\001 \001(\005\022\017\n\007i"
    "tem_id\030\002 \001(\005\"j\n\022ProtoLegendTopRank\022\017\n\007ro"
    "le_id\030\001 \001(\003\022\021\n\trole_name\030\002 \001(\t\022\014\n\004rank\030\003"
    " \001(\005\022\023\n\013fight_score\030\004 \001(\005\022\r\n\005floor\030\005 \001(\005"
    "\"\212\001\n\016ProtoApplyInfo\022\021\n\tfriend_id\030\001 \001(\003\022\023"
    "\n\013friend_name\030\002 \001(\t\022\021\n\tleague_id\030\003 \001(\003\022\023"
    "\n\013league_name\030\004 \001(\t\022\r\n\005level\030\005 \001(\005\022\013\n\003se"
    "x\030\006 \001(\005\022\014\n\004tick\030\007 \001(\003\"/\n\014ProtoPairMap\022\037\n"
    "\010obj_list\030\001 \003(\0132\r.ProtoPairObj\"O\n\017ProtoD"
    "onateRank\022\014\n\004rank\030\001 \001(\005\022\021\n\trole_name\030\002 \001"
    "(\t\022\013\n\003vip\030\003 \001(\005\022\016\n\006contri\030\004 \001(\005\"[\n\021Proto"
    "MAttackLabel\022\020\n\010label_id\030\001 \001(\005\022\017\n\007role_i"
    "d\030\002 \001(\003\022\021\n\trole_name\030\003 \001(\t\022\020\n\010role_sex\030\004"
    " \001(\005\"I\n\025ProtoActivityLWarRank\022\017\n\007role_id"
    "\030\001 \001(\003\022\014\n\004rank\030\002 \001(\005\022\021\n\tis_leader\030\003 \001(\005\""
    "\272\001\n\021ProtoChildAchieve\022\021\n\tach_index\030\001 \001(\005"
    "\022\021\n\tbase_type\030\002 \001(\005\022\022\n\nchild_type\030\003 \001(\005\022"
    "\020\n\010act_type\030\004 \001(\005\022\017\n\007compare\030\005 \001(\005\022\014\n\004so"
    "rt\030\006 \001(\005\022\021\n\tred_point\030\007 \001(\005\022\'\n\014achieve_i"
    "nfo\030\010 \003(\0132\021.ProtoAchieveInfo\"\227\001\n\020ProtoAc"
    "hieveInfo\022\022\n\nachieve_id\030\001 \001(\005\022\020\n\010ach_typ"
    "e\030\002 \001(\005\022\023\n\013number_type\030\003 \001(\005\022\023\n\013need_amo"
    "unt\030\004 \001(\005\022\014\n\004sort\030\005 \001(\005\022\021\n\treward_id\030\006 \001"
    "(\005\022\022\n\nach_amount\030\007 \001(\005\"\250\001\n\021ProtoServerRe"
    "cord\022\021\n\tplayer_id\030\001 \001(\003\022\023\n\013player_name\030\002"
    " \001(\t\022\017\n\007get_tme\030\003 \001(\003\022\016\n\006amount\030\004 \001(\005\022\017\n"
    "\007item_id\030\005 \001(\005\022\021\n\titem_bind\030\006 \001(\005\022\023\n\013rew"
    "ard_mult\030\007 \001(\005\022\021\n\tsub_value\030\010 \001(\005\"\231\002\n\rPr"
    "otoSlotInfo\022\r\n\005index\030\001 \001(\005\022\017\n\007slot_id\030\002 "
    "\001(\005\022\030\n\004item\030\003 \001(\0132\n.ProtoItem\022\023\n\013is_prec"
    "ious\030\004 \001(\005\022\020\n\010pre_cost\030\005 \001(\005\022\020\n\010now_cost"
    "\030\006 \001(\005\022\024\n\014person_limit\030\007 \001(\005\022\024\n\014server_l"
    "imit\030\010 \001(\005\022\031\n\021person_left_limit\030\t \001(\005\022\031\n"
    "\021server_left_limit\030\n \001(\005\022\021\n\tslot_type\030\013 "
    "\001(\005\022 \n\tpair_info\030\014 \003(\0132\r.ProtoPairObj\"\201\001"
    "\n\021ProtoPersonRecord\022\016\n\006amount\030\001 \001(\005\022\020\n\010g"
    "et_time\030\002 \001(\005\022\017\n\007item_id\030\003 \001(\005\022\021\n\titem_b"
    "ind\030\004 \001(\005\022\023\n\013reward_mult\030\005 \001(\005\022\021\n\tsub_va"
    "lue\030\006 \001(\005\"d\n\022ProtoTimeLimitInfo\022\022\n\ntime_"
    "point\030\001 \001(\005\022\027\n\017time_point_tick\030\002 \001(\005\022!\n\t"
    "slot_info\030\003 \003(\0132\016.ProtoSlotInfo\"l\n\rProto"
    "ShopInfo\022\030\n\004item\030\001 \001(\0132\n.ProtoItem\022\014\n\004co"
    "st\030\002 \001(\005\022\016\n\006is_buy\030\003 \001(\005\022\021\n\tis_rarity\030\004 "
    "\001(\005\022\020\n\010cost_pre\030\005 \001(\005\"\237\001\n\022ProtoFashionDe"
    "tail\022\022\n\nfashion_id\030\001 \001(\005\022\023\n\013active_type\030"
    "\002 \001(\005\022\020\n\010color_id\030\003 \001(\005\022\024\n\014is_permanent\030"
    "\004 \001(\005\022\023\n\013active_tick\030\005 \001(\003\022\020\n\010end_tick\030\006"
    " \001(\003\022\021\n\tcolor_set\030\007 \003(\005\"\276\001\n\022ProtoWedding"
    "Detail\022\r\n\005level\030\001 \001(\005\022\r\n\005order\030\002 \001(\005\022\022\n\n"
    "side_level\030\003 \001(\005\022\022\n\nside_order\030\004 \001(\005\022\013\n\003"
    "exp\030\005 \001(\005\022\017\n\007is_open\030\006 \001(\005\022 \n\010pro_list\030\007"
    " \001(\0132\016.ProtoFightPro\022\"\n\nother_info\030\010 \001(\013"
    "2\016.ProtoThreeObj\"X\n\021ProtoWedTreasures\022\020\n"
    "\010buy_tick\030\001 \001(\003\022\020\n\010is_fetch\030\002 \001(\005\022\021\n\tlef"
    "t_time\030\003 \001(\005\022\014\n\004type\030\004 \001(\005\"C\n\020ProtoWeddi"
    "ngRole\022\017\n\007role_id\030\001 \001(\003\022\021\n\trole_name\030\002 \001"
    "(\t\022\013\n\003sex\030\003 \001(\005\"\310\001\n\020ProtoWeddingRank\022\014\n\004"
    "rank\030\001 \001(\005\022\014\n\004tick\030\002 \001(\003\022\021\n\tserver_id\030\003 "
    "\001(\005\022\023\n\013server_flag\030\004 \001(\t\022\023\n\013server_prev\030"
    "\005 \001(\t\022\023\n\013server_name\030\006 \001(\t\022\"\n\007player1\030\007 "
    "\001(\0132\021.ProtoWeddingRole\022\"\n\007player2\030\010 \001(\0132"
    "\021.ProtoWeddingRole\"\256\001\n\rProtoWedLabel\022\n\n\002"
    "id\030\001 \001(\005\022\020\n\010label_id\030\002 \001(\005\022\030\n\020ring_level"
    "_limit\030\003 \001(\005\022\027\n\017sys_level_limit\030\004 \001(\005\022\030\n"
    "\020tree_level_limit\030\005 \001(\005\022\016\n\006status\030\006 \001(\005\022"
    "\"\n\nother_info\030\007 \001(\0132\016.ProtoThreeObj\"a\n\020P"
    "rotoActRankInfo\022\014\n\004rank\030\001 \001(\005\022\017\n\007role_id"
    "\030\002 \001(\003\022\014\n\004name\030\003 \001(\t\022\022\n\nrank_value\030\004 \001(\005"
    "\022\014\n\004tick\030\005 \001(\003\"K\n\017ProtoWaveReward\022\014\n\004wav"
    "e\030\001 \001(\005\022\016\n\006amount\030\002 \001(\005\022\032\n\003obj\030\003 \003(\0132\r.P"
    "rotoPairObj\"l\n\020ProtoPlayerCheer\022\017\n\007role_"
    "id\030\001 \001(\003\022\021\n\trole_name\030\002 \001(\t\022\014\n\004wave\030\003 \001("
    "\005\022\020\n\010is_cheer\030\004 \001(\005\022\024\n\014is_encourage\030\005 \001("
    "\005\"e\n\020ProtoCheerRecord\022\017\n\007role_id\030\001 \001(\003\022\021"
    "\n\trole_name\030\002 \001(\t\022\014\n\004type\030\003 \001(\005\022\021\n\tis_ac"
    "tive\030\004 \001(\005\022\014\n\004time\030\005 \001(\005\"P\n\021ProtoRecharg"
    "eRank\022\017\n\007role_id\030\001 \001(\003\022\014\n\004name\030\002 \001(\t\022\014\n\004"
    "rank\030\003 \001(\005\022\016\n\006amount\030\004 \001(\005\"\302\001\n\016ProtoMoun"
    "tInfo\022\023\n\013mount_grade\030\001 \001(\005\022\023\n\013mount_shap"
    "e\030\002 \001(\005\022\r\n\005force\030\003 \001(\005\022\034\n\004prop\030\004 \001(\0132\016.P"
    "rotoFightPro\022\014\n\004type\030\005 \001(\005\022\034\n\004temp\030\006 \001(\013"
    "2\016.ProtoFightPro\022\032\n\005skill\030\007 \003(\0132\013.ProtoS"
    "kill\022\021\n\tact_shape\030\010 \001(\005\"G\n\016ProtoEquipLis"
    "t\022\021\n\tpack_type\030\001 \001(\005\022\"\n\016pack_item_list\030\002"
    " \003(\0132\n.ProtoItem\"\302\001\n\023PActCumulativeLogin"
    "\022\016\n\006single\030\001 \001(\005\022\013\n\003ten\030\002 \001(\005\022\017\n\007hundred"
    "\030\003 \001(\005\022\020\n\010multiple\030\004 \001(\005\022\024\n\014single_state"
    "\030\005 \001(\005\022\021\n\tten_state\030\006 \001(\005\022\025\n\rhundred_sta"
    "te\030\007 \001(\005\022\026\n\016multiple_state\030\010 \001(\005\022\023\n\013logi"
    "n_count\030\t \001(\005\"o\n\016ProtoLegendTop\022\022\n\npass_"
    "floor\030\001 \001(\005\022\022\n\ntoday_rank\030\002 \001(\005\022\020\n\010is_sw"
    "eep\030\003 \001(\005\022#\n\nfloor_info\030\004 \003(\0132\017.ProtoFlo"
    "orInfo\"Y\n\017ProtoWavePlayer\022\017\n\007role_id\030\001 \001"
    "(\003\022\014\n\004name\030\002 \001(\t\022\013\n\003sex\030\003 \001(\005\022\014\n\004wave\030\004 "
    "\001(\005\022\014\n\004tick\030\005 \001(\003\"\303\001\n\021ProtoTransferInfo\022"
    "\023\n\013transfer_id\030\001 \001(\005\022\023\n\013transfer_lv\030\002 \001("
    "\005\022\024\n\014is_permanent\030\003 \001(\005\022\021\n\tis_active\030\004 \001"
    "(\005\022\023\n\013active_tick\030\005 \001(\003\022\020\n\010end_tick\030\006 \001("
    "\003\022\026\n\016transfer_skill\030\007 \001(\005\022\034\n\005skill\030\010 \003(\013"
    "2\r.ProtoPairObj\"S\n\020ProtoScriptReset\022\023\n\013s"
    "cript_sort\030\001 \001(\005\022\022\n\nleft_times\030\002 \001(\005\022\026\n\016"
    "left_buy_times\030\003 \001(\005\"I\n\020ProtoBackActName"
    "\022\016\n\006act_id\030\001 \001(\005\022\021\n\tact_title\030\002 \001(\t\022\022\n\nh"
    "as_reward\030\003 \001(\005\"\255\001\n\020ProtoBackActInfo\022\016\n\006"
    "act_id\030\001 \001(\005\022\023\n\013second_type\030\002 \001(\005\022\021\n\tact"
    "_start\030\003 \001(\005\022\017\n\007act_end\030\004 \001(\005\022\023\n\013act_con"
    "tent\030\005 \001(\t\022(\n\013reward_list\030\006 \003(\0132\023.ProtoB"
    "ackActReward\022\021\n\tneed_gold\030\007 \001(\005\"\230\001\n\022Prot"
    "oBackActReward\022\021\n\treward_id\030\001 \001(\005\022$\n\020rew"
    "ard_item_list\030\002 \003(\0132\n.ProtoItem\022\025\n\rrewar"
    "d_amount\030\003 \001(\005\022\027\n\017cond_value_list\030\004 \003(\005\022"
    "\031\n\021restore_gold_rate\030\005 \001(\005\"\375\001\n\023ProtoTran"
    "sferClient\022\023\n\013transfer_id\030\001 \001(\005\022\023\n\013trans"
    "fer_lv\030\002 \001(\005\022\021\n\tis_active\030\003 \001(\005\022\024\n\014is_pe"
    "rmanent\030\004 \001(\005\022\023\n\013active_tick\030\005 \001(\003\022\020\n\010en"
    "d_tick\030\006 \001(\003\022\026\n\016transfer_skill\030\007 \001(\005\022\032\n\005"
    "skill\030\010 \003(\0132\013.ProtoSkill\022\034\n\004prop\030\t \001(\0132\016"
    ".ProtoFightPro\022\014\n\004last\030\n \001(\005\022\014\n\004cool\030\013 \001"
    "(\005\"B\n\027ProtoBackActRewardIndex\022\021\n\treward_"
    "id\030\001 \001(\005\022\024\n\014reward_value\030\002 \003(\005\"D\n\014PActTa"
    "stList\022\017\n\007task_id\030\001 \001(\005\022\021\n\ttotal_num\030\002 \001"
    "(\005\022\020\n\010left_num\030\003 \001(\005\"\375\001\n\rMayRewardInfo\022\r"
    "\n\005index\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\017\n\007content\030\003"
    " \001(\t\022\014\n\004cond\030\004 \003(\005\022\016\n\006arrive\030\005 \001(\005\022\016\n\006dr"
    "awed\030\006 \001(\005\022\021\n\tdraw_flag\030\007 \001(\005\022\020\n\010pre_cos"
    "t\030\010 \001(\005\022\020\n\010now_cost\030\t \001(\005\022\r\n\005times\030\n \001(\005"
    "\022\021\n\treward_id\030\013 \001(\005\022!\n\013change_item\030\014 \003(\013"
    "2\014.ProtoItemId\022\024\n\014change_state\030\r \001(\005\"a\n\017"
    "ProtoLimitValue\022\016\n\006value1\030\001 \001(\005\022\016\n\006value"
    "2\030\002 \001(\005\022\016\n\006value3\030\003 \001(\005\022\016\n\006value4\030\004 \001(\005\022"
    "\016\n\006value5\030\005 \001(\005\"9\n\020ActOpenLimitTime\022\021\n\to"
    "pen_time\030\001 \001(\005\022\022\n\nopen_state\030\002 \001(\005\"8\n\022Pr"
    "otoRedPacketInfo\022\023\n\013player_name\030\001 \001(\t\022\r\n"
    "\005money\030\002 \001(\005\"S\n\014ProtoRunRole\022\017\n\007role_id\030"
    "\001 \001(\003\022\021\n\trole_name\030\002 \001(\t\022\020\n\010role_sex\030\003 \001"
    "(\005\022\r\n\005value\030\004 \001(\005\"@\n\022ProtoAllRedActInfo\022"
    "\r\n\005state\030\001 \001(\005\022\014\n\004tick\030\002 \001(\005\022\r\n\005money\030\003 "
    "\001(\005\"\365\002\n\021ProtoTrvlBaseRole\022\017\n\007role_id\030\001 \001"
    "(\003\022\021\n\trole_name\030\002 \001(\t\022\014\n\004prev\030\003 \001(\t\022\013\n\003s"
    "ex\030\004 \001(\005\022\016\n\006career\030\005 \001(\005\022\r\n\005level\030\006 \001(\005\022"
    "\r\n\005force\030\007 \001(\005\022\016\n\006weapon\030\010 \001(\005\022\017\n\007clothe"
    "s\030\t \001(\005\022\026\n\016fashion_weapon\030\n \001(\005\022\027\n\017fashi"
    "on_clothes\030\013 \001(\005\022\022\n\nwing_level\030\014 \001(\005\022\025\n\r"
    "solider_level\030\r \001(\005\022\020\n\010vip_type\030\016 \001(\005\022\022\n"
    "\nmount_sort\030\017 \001(\005\022\022\n\nsword_pool\030\020 \001(\005\022\021\n"
    "\ttian_gang\030\021 \001(\005\022\022\n\nfashion_id\030\022 \001(\005\022\025\n\r"
    "fashion_color\030\023 \001(\005\"u\n\023ProtoMayFashionIn"
    "fo\022\020\n\010liveness\030\001 \001(\005\022\032\n\004item\030\002 \003(\0132\014.Pro"
    "toItemId\022\027\n\017one_times_money\030\003 \001(\005\022\027\n\017ten"
    "_times_money\030\004 \001(\005\"\232\001\n\023ProtoTrvlBattleRa"
    "nk\022\014\n\004rank\030\001 \001(\005\022\017\n\007role_id\030\002 \001(\003\022\r\n\005sco"
    "re\030\003 \001(\005\022\023\n\013kill_amount\030\004 \001(\005\022\r\n\005force\030\005"
    " \001(\005\022\014\n\004tick\030\006 \001(\005\022\021\n\trole_name\030\007 \001(\t\022\020\n"
    "\010role_sex\030\010 \001(\005\"2\n\014ProtoGemInfo\022\016\n\006gem_i"
    "d\030\001 \001(\005\022\022\n\ngem_amount\030\002 \001(\005\"F\n\022ProtoTrvl"
    "WbossMail\022\021\n\treward_id\030\001 \001(\005\022\017\n\007role_id\030"
    "\002 \001(\003\022\014\n\004rank\030\003 \001(\005\"l\n\rMoldingNature\022\r\n\005"
    "value\030\001 \001(\005\022\r\n\005level\030\002 \001(\005\022\024\n\014cur_schedu"
    "le\030\003 \001(\005\022\024\n\014max_schedule\030\004 \001(\005\022\021\n\tnature"
    "_id\030\005 \001(\005\"c\n\016ProtoCleanInfo\022\023\n\013script_so"
    "rt\030\001 \001(\005\022\035\n\titem_list\030\002 \003(\0132\n.ProtoItem\022"
    "\035\n\tdrop_list\030\003 \003(\0132\n.ProtoItem\"{\n\nFishDe"
    "tail\022\014\n\004type\030\001 \001(\005\022\r\n\005layer\030\002 \001(\005\022\014\n\004fla"
    "g\030\003 \001(\005\022\r\n\005pos_x\030\004 \001(\005\022\r\n\005pos_y\030\005 \001(\005\022\017\n"
    "\007item_id\030\006 \003(\005\022\023\n\013item_amount\030\007 \003(\005\"T\n\022P"
    "rotoTeamForceInfo\022\017\n\007team_id\030\001 \001(\003\022\017\n\007ro"
    "le_id\030\002 \001(\003\022\r\n\005force\030\003 \001(\005\022\r\n\005level\030\004 \001("
    "\005\"8\n\026ProtoItemExchangeTimes\022\017\n\007item_id\030\001"
    " \001(\005\022\r\n\005times\030\002 \001(\005\"M\n\024ProtoPeakQualityI"
    "nfo\022\r\n\005score\030\001 \001(\005\022\014\n\004rank\030\002 \001(\005\022\030\n\020left"
    "_fight_times\030\003 \001(\005\"\246\001\n\025ProtoPeakKnockout"
    "Info\022\025\n\rrival_team_id\030\001 \001(\003\022\027\n\017rival_tea"
    "m_name\030\002 \001(\t\022\"\n\014rival_teamer\030\003 \003(\0132\014.Pro"
    "toTeamer\022\020\n\010my_score\030\004 \001(\005\022\023\n\013rival_socr"
    "e\030\005 \001(\005\022\022\n\nscore_type\030\006 \001(\005\"\305\001\n\020SpecialB"
    "oxChange\022\017\n\007item_id\030\001 \001(\005\022\023\n\013item_amount"
    "\030\002 \001(\005\022\021\n\titem_bind\030\003 \001(\005\022\014\n\004page\030\004 \001(\005\022"
    "\r\n\005group\030\005 \001(\005\022\026\n\016change_item_id\030\006 \001(\005\022\032"
    "\n\022change_item_amount\030\007 \001(\005\022\030\n\020change_ite"
    "m_bind\030\010 \001(\005\022\r\n\005index\030\t \001(\005\"X\n\020ProtoQual"
    "ityRank\022\017\n\007team_id\030\001 \001(\003\022\021\n\tteam_name\030\002 "
    "\001(\t\022\022\n\nteam_score\030\003 \001(\005\022\014\n\004rank\030\004 \001(\005", 29197);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoPublic.proto", &protobuf_RegisterTypes);
  ProtoSceneAddress::default_instance_ = new ProtoSceneAddress();
  ProtoCoord::default_instance_ = new ProtoCoord();
  ProtoSkill::default_instance_ = new ProtoSkill();
  ProtoMoney::default_instance_ = new ProtoMoney();
  ProtoItem::default_instance_ = new ProtoItem();
  ProtoEquip::default_instance_ = new ProtoEquip();
  ProtoChatInfo::default_instance_ = new ProtoChatInfo();
  ProtoDelItem::default_instance_ = new ProtoDelItem();
  ProtoTaskCond::default_instance_ = new ProtoTaskCond();
  ProtoTaskInfo::default_instance_ = new ProtoTaskInfo();
  ProtoFriendInfo::default_instance_ = new ProtoFriendInfo();
  ProtoSkillTarget::default_instance_ = new ProtoSkillTarget();
  ProtoFightInfo::default_instance_ = new ProtoFightInfo();
  ProtoStatus::default_instance_ = new ProtoStatus();
  ProtoMarketItem::default_instance_ = new ProtoMarketItem();
  ProtoSellOut::default_instance_ = new ProtoSellOut();
  ProtoMailInfo::default_instance_ = new ProtoMailInfo();
  MailAttach::default_instance_ = new MailAttach();
  ProtoShopItem::default_instance_ = new ProtoShopItem();
  ProtoPairObj::default_instance_ = new ProtoPairObj();
  ProtoBaseBeastInfo::default_instance_ = new ProtoBaseBeastInfo();
  ProtoBeastSkill::default_instance_ = new ProtoBeastSkill();
  ProtoMagicalRecord::default_instance_ = new ProtoMagicalRecord();
  ProtoMagicalInfo::default_instance_ = new ProtoMagicalInfo();
  ProtoSkillCombine::default_instance_ = new ProtoSkillCombine();
  ProtoFashion::default_instance_ = new ProtoFashion();
  ProtoFashionInfo::default_instance_ = new ProtoFashionInfo();
  ProtoLeagueItem::default_instance_ = new ProtoLeagueItem();
  ProtoLeagueMember::default_instance_ = new ProtoLeagueMember();
  ProtoLeagueApply::default_instance_ = new ProtoLeagueApply();
  ProtoLeagueLog::default_instance_ = new ProtoLeagueLog();
  ProtoLeagueShop::default_instance_ = new ProtoLeagueShop();
  ProtoMallItem::default_instance_ = new ProtoMallItem();
  ProtoMallList::default_instance_ = new ProtoMallList();
  ProtoTeamer::default_instance_ = new ProtoTeamer();
  ProtoLimitTimeLabel::default_instance_ = new ProtoLimitTimeLabel();
  ProtoDivineRecord::default_instance_ = new ProtoDivineRecord();
  ProtoAchieveDetail::default_instance_ = new ProtoAchieveDetail();
  ProtoBrocastRole::default_instance_ = new ProtoBrocastRole();
  ProtoMonster::default_instance_ = new ProtoMonster();
  ProtoActivityInfo::default_instance_ = new ProtoActivityInfo();
  ProtoBeast::default_instance_ = new ProtoBeast();
  ProtoFlaunt::default_instance_ = new ProtoFlaunt();
  ProtoSyncLeague::default_instance_ = new ProtoSyncLeague();
  ProtoLeagueFighter::default_instance_ = new ProtoLeagueFighter();
  ProtoExpRestore::default_instance_ = new ProtoExpRestore();
  ProtoLMRole::default_instance_ = new ProtoLMRole();
  ProtoMarLeague::default_instance_ = new ProtoMarLeague();
  ProtoRoleInfo::default_instance_ = new ProtoRoleInfo();
  ProtoRankRecord::default_instance_ = new ProtoRankRecord();
  ProtoFBReadyInfo::default_instance_ = new ProtoFBReadyInfo();
  ProtoFightPro::default_instance_ = new ProtoFightPro();
  ProtoWarItem::default_instance_ = new ProtoWarItem();
  ProtoSMBattleRankRec::default_instance_ = new ProtoSMBattleRankRec();
  ProtoLWarItem::default_instance_ = new ProtoLWarItem();
  WorldBossRank::default_instance_ = new WorldBossRank();
  ProtoWorldBossRank::default_instance_ = new ProtoWorldBossRank();
  ProtoShoutDetail::default_instance_ = new ProtoShoutDetail();
  ProtoTreasure::default_instance_ = new ProtoTreasure();
  ProtoScriptClean::default_instance_ = new ProtoScriptClean();
  ProtoHookDetail::default_instance_ = new ProtoHookDetail();
  ProtoHookSkill::default_instance_ = new ProtoHookSkill();
  ProtoFashionTipInfo::default_instance_ = new ProtoFashionTipInfo();
  ProtoVipTimeTipInfo::default_instance_ = new ProtoVipTimeTipInfo();
  ProtoScriptChapter::default_instance_ = new ProtoScriptChapter();
  ProtoSysSetting::default_instance_ = new ProtoSysSetting();
  ProtoRpmRoleInfo::default_instance_ = new ProtoRpmRoleInfo();
  TipsItem::default_instance_ = new TipsItem();
  ProtoFBUseTimes::default_instance_ = new ProtoFBUseTimes();
  ProtoMoverPos::default_instance_ = new ProtoMoverPos();
  ProtoCustomerSVCRecord::default_instance_ = new ProtoCustomerSVCRecord();
  ProtoMediaGiftDef::default_instance_ = new ProtoMediaGiftDef();
  ProtoAreaRole::default_instance_ = new ProtoAreaRole();
  ProtoScriptInfo::default_instance_ = new ProtoScriptInfo();
  ProtoAreaRecord::default_instance_ = new ProtoAreaRecord();
  ProtoBuffStatus::default_instance_ = new ProtoBuffStatus();
  ProtoShusanBoss::default_instance_ = new ProtoShusanBoss();
  ProtoSuit::default_instance_ = new ProtoSuit();
  ProtoLvlReward::default_instance_ = new ProtoLvlReward();
  ProtoDailyRecord::default_instance_ = new ProtoDailyRecord();
  ProtoRoleShape::default_instance_ = new ProtoRoleShape();
  ProtoCQAttackerInfo::default_instance_ = new ProtoCQAttackerInfo();
  ProtoWing::default_instance_ = new ProtoWing();
  ProtoCQRank::default_instance_ = new ProtoCQRank();
  ProtoThreeObj::default_instance_ = new ProtoThreeObj();
  ProtoEscortMapItem::default_instance_ = new ProtoEscortMapItem();
  ProtoRefineSuit::default_instance_ = new ProtoRefineSuit();
  ProtoPanicItem::default_instance_ = new ProtoPanicItem();
  ProtoKiller::default_instance_ = new ProtoKiller();
  ProtoPeakWarRank::default_instance_ = new ProtoPeakWarRank();
  PActTypeItem::default_instance_ = new PActTypeItem();
  PRewardItem::default_instance_ = new PRewardItem();
  ProtoGateRole::default_instance_ = new ProtoGateRole();
  ProtoPackageItem::default_instance_ = new ProtoPackageItem();
  ProtoEquipPolishAttrInfo::default_instance_ = new ProtoEquipPolishAttrInfo();
  ProtoEquipPolishStruct::default_instance_ = new ProtoEquipPolishStruct();
  ProtoEquipPolish::default_instance_ = new ProtoEquipPolish();
  ProtoVipGift::default_instance_ = new ProtoVipGift();
  ProtoTrialTask::default_instance_ = new ProtoTrialTask();
  ProtoWeddingIcon::default_instance_ = new ProtoWeddingIcon();
  ProtoShoutItem::default_instance_ = new ProtoShoutItem();
  PActPanelInfo::default_instance_ = new PActPanelInfo();
  ProtoLeagueStoreApply::default_instance_ = new ProtoLeagueStoreApply();
  ProtoLeagueStoreApplyHis::default_instance_ = new ProtoLeagueStoreApplyHis();
  ProtoActRewardItem::default_instance_ = new ProtoActRewardItem();
  ProtoActRoleReward::default_instance_ = new ProtoActRoleReward();
  ProtoPairLongString::default_instance_ = new ProtoPairLongString();
  ProtoPairLong::default_instance_ = new ProtoPairLong();
  ProtoActRewardNotify::default_instance_ = new ProtoActRewardNotify();
  ProtoNearRole::default_instance_ = new ProtoNearRole();
  ProtoTravelTeam::default_instance_ = new ProtoTravelTeam();
  ProtoBrotherInfo::default_instance_ = new ProtoBrotherInfo();
  ProtoBrotherTask::default_instance_ = new ProtoBrotherTask();
  ProtoMagicWeapon::default_instance_ = new ProtoMagicWeapon();
  ProtoAIllusion::default_instance_ = new ProtoAIllusion();
  ProtoTravelTeamer::default_instance_ = new ProtoTravelTeamer();
  ProtoPromotTeam::default_instance_ = new ProtoPromotTeam();
  ProtoTravelPeakBet::default_instance_ = new ProtoTravelPeakBet();
  ProtoMilitaryExploits::default_instance_ = new ProtoMilitaryExploits();
  ProtoTravPeakWorth::default_instance_ = new ProtoTravPeakWorth();
  ProtoMagicActBase::default_instance_ = new ProtoMagicActBase();
  SecretTShopItem::default_instance_ = new SecretTShopItem();
  StRankUnit::default_instance_ = new StRankUnit();
  STHistoryRankUnit::default_instance_ = new STHistoryRankUnit();
  PTLeagueItem::default_instance_ = new PTLeagueItem();
  ProtoSession::default_instance_ = new ProtoSession();
  Illustrations::default_instance_ = new Illustrations();
  Illus_group::default_instance_ = new Illus_group();
  Illus_class::default_instance_ = new Illus_class();
  ProtoFloorInfo::default_instance_ = new ProtoFloorInfo();
  ProtoLScoreInfo::default_instance_ = new ProtoLScoreInfo();
  ProtoScriptAdvance::default_instance_ = new ProtoScriptAdvance();
  ProtoScriptExpInfo::default_instance_ = new ProtoScriptExpInfo();
  ProtoSpecialAwardInfo::default_instance_ = new ProtoSpecialAwardInfo();
  ProtoServer::default_instance_ = new ProtoServer();
  ProtoWorldBossInfo::default_instance_ = new ProtoWorldBossInfo();
  ProtoLeagueRankInfo::default_instance_ = new ProtoLeagueRankInfo();
  ProtoLWarInfo::default_instance_ = new ProtoLWarInfo();
  ProtoItemId::default_instance_ = new ProtoItemId();
  ProtoSwordPoolTask::default_instance_ = new ProtoSwordPoolTask();
  ProtoSvenDayItem::default_instance_ = new ProtoSvenDayItem();
  ProtoSevenDayItem::default_instance_ = new ProtoSevenDayItem();
  ProtoLegendTopRank::default_instance_ = new ProtoLegendTopRank();
  ProtoApplyInfo::default_instance_ = new ProtoApplyInfo();
  ProtoPairMap::default_instance_ = new ProtoPairMap();
  ProtoDonateRank::default_instance_ = new ProtoDonateRank();
  ProtoMAttackLabel::default_instance_ = new ProtoMAttackLabel();
  ProtoActivityLWarRank::default_instance_ = new ProtoActivityLWarRank();
  ProtoChildAchieve::default_instance_ = new ProtoChildAchieve();
  ProtoAchieveInfo::default_instance_ = new ProtoAchieveInfo();
  ProtoServerRecord::default_instance_ = new ProtoServerRecord();
  ProtoSlotInfo::default_instance_ = new ProtoSlotInfo();
  ProtoPersonRecord::default_instance_ = new ProtoPersonRecord();
  ProtoTimeLimitInfo::default_instance_ = new ProtoTimeLimitInfo();
  ProtoShopInfo::default_instance_ = new ProtoShopInfo();
  ProtoFashionDetail::default_instance_ = new ProtoFashionDetail();
  ProtoWeddingDetail::default_instance_ = new ProtoWeddingDetail();
  ProtoWedTreasures::default_instance_ = new ProtoWedTreasures();
  ProtoWeddingRole::default_instance_ = new ProtoWeddingRole();
  ProtoWeddingRank::default_instance_ = new ProtoWeddingRank();
  ProtoWedLabel::default_instance_ = new ProtoWedLabel();
  ProtoActRankInfo::default_instance_ = new ProtoActRankInfo();
  ProtoWaveReward::default_instance_ = new ProtoWaveReward();
  ProtoPlayerCheer::default_instance_ = new ProtoPlayerCheer();
  ProtoCheerRecord::default_instance_ = new ProtoCheerRecord();
  ProtoRechargeRank::default_instance_ = new ProtoRechargeRank();
  ProtoMountInfo::default_instance_ = new ProtoMountInfo();
  ProtoEquipList::default_instance_ = new ProtoEquipList();
  PActCumulativeLogin::default_instance_ = new PActCumulativeLogin();
  ProtoLegendTop::default_instance_ = new ProtoLegendTop();
  ProtoWavePlayer::default_instance_ = new ProtoWavePlayer();
  ProtoTransferInfo::default_instance_ = new ProtoTransferInfo();
  ProtoScriptReset::default_instance_ = new ProtoScriptReset();
  ProtoBackActName::default_instance_ = new ProtoBackActName();
  ProtoBackActInfo::default_instance_ = new ProtoBackActInfo();
  ProtoBackActReward::default_instance_ = new ProtoBackActReward();
  ProtoTransferClient::default_instance_ = new ProtoTransferClient();
  ProtoBackActRewardIndex::default_instance_ = new ProtoBackActRewardIndex();
  PActTastList::default_instance_ = new PActTastList();
  MayRewardInfo::default_instance_ = new MayRewardInfo();
  ProtoLimitValue::default_instance_ = new ProtoLimitValue();
  ActOpenLimitTime::default_instance_ = new ActOpenLimitTime();
  ProtoRedPacketInfo::default_instance_ = new ProtoRedPacketInfo();
  ProtoRunRole::default_instance_ = new ProtoRunRole();
  ProtoAllRedActInfo::default_instance_ = new ProtoAllRedActInfo();
  ProtoTrvlBaseRole::default_instance_ = new ProtoTrvlBaseRole();
  ProtoMayFashionInfo::default_instance_ = new ProtoMayFashionInfo();
  ProtoTrvlBattleRank::default_instance_ = new ProtoTrvlBattleRank();
  ProtoGemInfo::default_instance_ = new ProtoGemInfo();
  ProtoTrvlWbossMail::default_instance_ = new ProtoTrvlWbossMail();
  MoldingNature::default_instance_ = new MoldingNature();
  ProtoCleanInfo::default_instance_ = new ProtoCleanInfo();
  FishDetail::default_instance_ = new FishDetail();
  ProtoTeamForceInfo::default_instance_ = new ProtoTeamForceInfo();
  ProtoItemExchangeTimes::default_instance_ = new ProtoItemExchangeTimes();
  ProtoPeakQualityInfo::default_instance_ = new ProtoPeakQualityInfo();
  ProtoPeakKnockoutInfo::default_instance_ = new ProtoPeakKnockoutInfo();
  SpecialBoxChange::default_instance_ = new SpecialBoxChange();
  ProtoQualityRank::default_instance_ = new ProtoQualityRank();
  ProtoSceneAddress::default_instance_->InitAsDefaultInstance();
  ProtoCoord::default_instance_->InitAsDefaultInstance();
  ProtoSkill::default_instance_->InitAsDefaultInstance();
  ProtoMoney::default_instance_->InitAsDefaultInstance();
  ProtoItem::default_instance_->InitAsDefaultInstance();
  ProtoEquip::default_instance_->InitAsDefaultInstance();
  ProtoChatInfo::default_instance_->InitAsDefaultInstance();
  ProtoDelItem::default_instance_->InitAsDefaultInstance();
  ProtoTaskCond::default_instance_->InitAsDefaultInstance();
  ProtoTaskInfo::default_instance_->InitAsDefaultInstance();
  ProtoFriendInfo::default_instance_->InitAsDefaultInstance();
  ProtoSkillTarget::default_instance_->InitAsDefaultInstance();
  ProtoFightInfo::default_instance_->InitAsDefaultInstance();
  ProtoStatus::default_instance_->InitAsDefaultInstance();
  ProtoMarketItem::default_instance_->InitAsDefaultInstance();
  ProtoSellOut::default_instance_->InitAsDefaultInstance();
  ProtoMailInfo::default_instance_->InitAsDefaultInstance();
  MailAttach::default_instance_->InitAsDefaultInstance();
  ProtoShopItem::default_instance_->InitAsDefaultInstance();
  ProtoPairObj::default_instance_->InitAsDefaultInstance();
  ProtoBaseBeastInfo::default_instance_->InitAsDefaultInstance();
  ProtoBeastSkill::default_instance_->InitAsDefaultInstance();
  ProtoMagicalRecord::default_instance_->InitAsDefaultInstance();
  ProtoMagicalInfo::default_instance_->InitAsDefaultInstance();
  ProtoSkillCombine::default_instance_->InitAsDefaultInstance();
  ProtoFashion::default_instance_->InitAsDefaultInstance();
  ProtoFashionInfo::default_instance_->InitAsDefaultInstance();
  ProtoLeagueItem::default_instance_->InitAsDefaultInstance();
  ProtoLeagueMember::default_instance_->InitAsDefaultInstance();
  ProtoLeagueApply::default_instance_->InitAsDefaultInstance();
  ProtoLeagueLog::default_instance_->InitAsDefaultInstance();
  ProtoLeagueShop::default_instance_->InitAsDefaultInstance();
  ProtoMallItem::default_instance_->InitAsDefaultInstance();
  ProtoMallList::default_instance_->InitAsDefaultInstance();
  ProtoTeamer::default_instance_->InitAsDefaultInstance();
  ProtoLimitTimeLabel::default_instance_->InitAsDefaultInstance();
  ProtoDivineRecord::default_instance_->InitAsDefaultInstance();
  ProtoAchieveDetail::default_instance_->InitAsDefaultInstance();
  ProtoBrocastRole::default_instance_->InitAsDefaultInstance();
  ProtoMonster::default_instance_->InitAsDefaultInstance();
  ProtoActivityInfo::default_instance_->InitAsDefaultInstance();
  ProtoBeast::default_instance_->InitAsDefaultInstance();
  ProtoFlaunt::default_instance_->InitAsDefaultInstance();
  ProtoSyncLeague::default_instance_->InitAsDefaultInstance();
  ProtoLeagueFighter::default_instance_->InitAsDefaultInstance();
  ProtoExpRestore::default_instance_->InitAsDefaultInstance();
  ProtoLMRole::default_instance_->InitAsDefaultInstance();
  ProtoMarLeague::default_instance_->InitAsDefaultInstance();
  ProtoRoleInfo::default_instance_->InitAsDefaultInstance();
  ProtoRankRecord::default_instance_->InitAsDefaultInstance();
  ProtoFBReadyInfo::default_instance_->InitAsDefaultInstance();
  ProtoFightPro::default_instance_->InitAsDefaultInstance();
  ProtoWarItem::default_instance_->InitAsDefaultInstance();
  ProtoSMBattleRankRec::default_instance_->InitAsDefaultInstance();
  ProtoLWarItem::default_instance_->InitAsDefaultInstance();
  WorldBossRank::default_instance_->InitAsDefaultInstance();
  ProtoWorldBossRank::default_instance_->InitAsDefaultInstance();
  ProtoShoutDetail::default_instance_->InitAsDefaultInstance();
  ProtoTreasure::default_instance_->InitAsDefaultInstance();
  ProtoScriptClean::default_instance_->InitAsDefaultInstance();
  ProtoHookDetail::default_instance_->InitAsDefaultInstance();
  ProtoHookSkill::default_instance_->InitAsDefaultInstance();
  ProtoFashionTipInfo::default_instance_->InitAsDefaultInstance();
  ProtoVipTimeTipInfo::default_instance_->InitAsDefaultInstance();
  ProtoScriptChapter::default_instance_->InitAsDefaultInstance();
  ProtoSysSetting::default_instance_->InitAsDefaultInstance();
  ProtoRpmRoleInfo::default_instance_->InitAsDefaultInstance();
  TipsItem::default_instance_->InitAsDefaultInstance();
  ProtoFBUseTimes::default_instance_->InitAsDefaultInstance();
  ProtoMoverPos::default_instance_->InitAsDefaultInstance();
  ProtoCustomerSVCRecord::default_instance_->InitAsDefaultInstance();
  ProtoMediaGiftDef::default_instance_->InitAsDefaultInstance();
  ProtoAreaRole::default_instance_->InitAsDefaultInstance();
  ProtoScriptInfo::default_instance_->InitAsDefaultInstance();
  ProtoAreaRecord::default_instance_->InitAsDefaultInstance();
  ProtoBuffStatus::default_instance_->InitAsDefaultInstance();
  ProtoShusanBoss::default_instance_->InitAsDefaultInstance();
  ProtoSuit::default_instance_->InitAsDefaultInstance();
  ProtoLvlReward::default_instance_->InitAsDefaultInstance();
  ProtoDailyRecord::default_instance_->InitAsDefaultInstance();
  ProtoRoleShape::default_instance_->InitAsDefaultInstance();
  ProtoCQAttackerInfo::default_instance_->InitAsDefaultInstance();
  ProtoWing::default_instance_->InitAsDefaultInstance();
  ProtoCQRank::default_instance_->InitAsDefaultInstance();
  ProtoThreeObj::default_instance_->InitAsDefaultInstance();
  ProtoEscortMapItem::default_instance_->InitAsDefaultInstance();
  ProtoRefineSuit::default_instance_->InitAsDefaultInstance();
  ProtoPanicItem::default_instance_->InitAsDefaultInstance();
  ProtoKiller::default_instance_->InitAsDefaultInstance();
  ProtoPeakWarRank::default_instance_->InitAsDefaultInstance();
  PActTypeItem::default_instance_->InitAsDefaultInstance();
  PRewardItem::default_instance_->InitAsDefaultInstance();
  ProtoGateRole::default_instance_->InitAsDefaultInstance();
  ProtoPackageItem::default_instance_->InitAsDefaultInstance();
  ProtoEquipPolishAttrInfo::default_instance_->InitAsDefaultInstance();
  ProtoEquipPolishStruct::default_instance_->InitAsDefaultInstance();
  ProtoEquipPolish::default_instance_->InitAsDefaultInstance();
  ProtoVipGift::default_instance_->InitAsDefaultInstance();
  ProtoTrialTask::default_instance_->InitAsDefaultInstance();
  ProtoWeddingIcon::default_instance_->InitAsDefaultInstance();
  ProtoShoutItem::default_instance_->InitAsDefaultInstance();
  PActPanelInfo::default_instance_->InitAsDefaultInstance();
  ProtoLeagueStoreApply::default_instance_->InitAsDefaultInstance();
  ProtoLeagueStoreApplyHis::default_instance_->InitAsDefaultInstance();
  ProtoActRewardItem::default_instance_->InitAsDefaultInstance();
  ProtoActRoleReward::default_instance_->InitAsDefaultInstance();
  ProtoPairLongString::default_instance_->InitAsDefaultInstance();
  ProtoPairLong::default_instance_->InitAsDefaultInstance();
  ProtoActRewardNotify::default_instance_->InitAsDefaultInstance();
  ProtoNearRole::default_instance_->InitAsDefaultInstance();
  ProtoTravelTeam::default_instance_->InitAsDefaultInstance();
  ProtoBrotherInfo::default_instance_->InitAsDefaultInstance();
  ProtoBrotherTask::default_instance_->InitAsDefaultInstance();
  ProtoMagicWeapon::default_instance_->InitAsDefaultInstance();
  ProtoAIllusion::default_instance_->InitAsDefaultInstance();
  ProtoTravelTeamer::default_instance_->InitAsDefaultInstance();
  ProtoPromotTeam::default_instance_->InitAsDefaultInstance();
  ProtoTravelPeakBet::default_instance_->InitAsDefaultInstance();
  ProtoMilitaryExploits::default_instance_->InitAsDefaultInstance();
  ProtoTravPeakWorth::default_instance_->InitAsDefaultInstance();
  ProtoMagicActBase::default_instance_->InitAsDefaultInstance();
  SecretTShopItem::default_instance_->InitAsDefaultInstance();
  StRankUnit::default_instance_->InitAsDefaultInstance();
  STHistoryRankUnit::default_instance_->InitAsDefaultInstance();
  PTLeagueItem::default_instance_->InitAsDefaultInstance();
  ProtoSession::default_instance_->InitAsDefaultInstance();
  Illustrations::default_instance_->InitAsDefaultInstance();
  Illus_group::default_instance_->InitAsDefaultInstance();
  Illus_class::default_instance_->InitAsDefaultInstance();
  ProtoFloorInfo::default_instance_->InitAsDefaultInstance();
  ProtoLScoreInfo::default_instance_->InitAsDefaultInstance();
  ProtoScriptAdvance::default_instance_->InitAsDefaultInstance();
  ProtoScriptExpInfo::default_instance_->InitAsDefaultInstance();
  ProtoSpecialAwardInfo::default_instance_->InitAsDefaultInstance();
  ProtoServer::default_instance_->InitAsDefaultInstance();
  ProtoWorldBossInfo::default_instance_->InitAsDefaultInstance();
  ProtoLeagueRankInfo::default_instance_->InitAsDefaultInstance();
  ProtoLWarInfo::default_instance_->InitAsDefaultInstance();
  ProtoItemId::default_instance_->InitAsDefaultInstance();
  ProtoSwordPoolTask::default_instance_->InitAsDefaultInstance();
  ProtoSvenDayItem::default_instance_->InitAsDefaultInstance();
  ProtoSevenDayItem::default_instance_->InitAsDefaultInstance();
  ProtoLegendTopRank::default_instance_->InitAsDefaultInstance();
  ProtoApplyInfo::default_instance_->InitAsDefaultInstance();
  ProtoPairMap::default_instance_->InitAsDefaultInstance();
  ProtoDonateRank::default_instance_->InitAsDefaultInstance();
  ProtoMAttackLabel::default_instance_->InitAsDefaultInstance();
  ProtoActivityLWarRank::default_instance_->InitAsDefaultInstance();
  ProtoChildAchieve::default_instance_->InitAsDefaultInstance();
  ProtoAchieveInfo::default_instance_->InitAsDefaultInstance();
  ProtoServerRecord::default_instance_->InitAsDefaultInstance();
  ProtoSlotInfo::default_instance_->InitAsDefaultInstance();
  ProtoPersonRecord::default_instance_->InitAsDefaultInstance();
  ProtoTimeLimitInfo::default_instance_->InitAsDefaultInstance();
  ProtoShopInfo::default_instance_->InitAsDefaultInstance();
  ProtoFashionDetail::default_instance_->InitAsDefaultInstance();
  ProtoWeddingDetail::default_instance_->InitAsDefaultInstance();
  ProtoWedTreasures::default_instance_->InitAsDefaultInstance();
  ProtoWeddingRole::default_instance_->InitAsDefaultInstance();
  ProtoWeddingRank::default_instance_->InitAsDefaultInstance();
  ProtoWedLabel::default_instance_->InitAsDefaultInstance();
  ProtoActRankInfo::default_instance_->InitAsDefaultInstance();
  ProtoWaveReward::default_instance_->InitAsDefaultInstance();
  ProtoPlayerCheer::default_instance_->InitAsDefaultInstance();
  ProtoCheerRecord::default_instance_->InitAsDefaultInstance();
  ProtoRechargeRank::default_instance_->InitAsDefaultInstance();
  ProtoMountInfo::default_instance_->InitAsDefaultInstance();
  ProtoEquipList::default_instance_->InitAsDefaultInstance();
  PActCumulativeLogin::default_instance_->InitAsDefaultInstance();
  ProtoLegendTop::default_instance_->InitAsDefaultInstance();
  ProtoWavePlayer::default_instance_->InitAsDefaultInstance();
  ProtoTransferInfo::default_instance_->InitAsDefaultInstance();
  ProtoScriptReset::default_instance_->InitAsDefaultInstance();
  ProtoBackActName::default_instance_->InitAsDefaultInstance();
  ProtoBackActInfo::default_instance_->InitAsDefaultInstance();
  ProtoBackActReward::default_instance_->InitAsDefaultInstance();
  ProtoTransferClient::default_instance_->InitAsDefaultInstance();
  ProtoBackActRewardIndex::default_instance_->InitAsDefaultInstance();
  PActTastList::default_instance_->InitAsDefaultInstance();
  MayRewardInfo::default_instance_->InitAsDefaultInstance();
  ProtoLimitValue::default_instance_->InitAsDefaultInstance();
  ActOpenLimitTime::default_instance_->InitAsDefaultInstance();
  ProtoRedPacketInfo::default_instance_->InitAsDefaultInstance();
  ProtoRunRole::default_instance_->InitAsDefaultInstance();
  ProtoAllRedActInfo::default_instance_->InitAsDefaultInstance();
  ProtoTrvlBaseRole::default_instance_->InitAsDefaultInstance();
  ProtoMayFashionInfo::default_instance_->InitAsDefaultInstance();
  ProtoTrvlBattleRank::default_instance_->InitAsDefaultInstance();
  ProtoGemInfo::default_instance_->InitAsDefaultInstance();
  ProtoTrvlWbossMail::default_instance_->InitAsDefaultInstance();
  MoldingNature::default_instance_->InitAsDefaultInstance();
  ProtoCleanInfo::default_instance_->InitAsDefaultInstance();
  FishDetail::default_instance_->InitAsDefaultInstance();
  ProtoTeamForceInfo::default_instance_->InitAsDefaultInstance();
  ProtoItemExchangeTimes::default_instance_->InitAsDefaultInstance();
  ProtoPeakQualityInfo::default_instance_->InitAsDefaultInstance();
  ProtoPeakKnockoutInfo::default_instance_->InitAsDefaultInstance();
  SpecialBoxChange::default_instance_->InitAsDefaultInstance();
  ProtoQualityRank::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoPublic_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoPublic_2eproto {
  StaticDescriptorInitializer_ProtoPublic_2eproto() {
    protobuf_AddDesc_ProtoPublic_2eproto();
  }
} static_descriptor_initializer_ProtoPublic_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ProtoSceneAddress::kSceneIdFieldNumber;
const int ProtoSceneAddress::kAddressFieldNumber;
const int ProtoSceneAddress::kPortFieldNumber;
const int ProtoSceneAddress::kDomainFieldNumber;
#endif  // !_MSC_VER

ProtoSceneAddress::ProtoSceneAddress()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoSceneAddress::InitAsDefaultInstance() {
}

ProtoSceneAddress::ProtoSceneAddress(const ProtoSceneAddress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoSceneAddress::SharedCtor() {
  _cached_size_ = 0;
  scene_id_ = 0;
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoSceneAddress::~ProtoSceneAddress() {
  SharedDtor();
}

void ProtoSceneAddress::SharedDtor() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (domain_ != &::google::protobuf::internal::kEmptyString) {
    delete domain_;
  }
  if (this != default_instance_) {
  }
}

void ProtoSceneAddress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoSceneAddress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoSceneAddress_descriptor_;
}

const ProtoSceneAddress& ProtoSceneAddress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoSceneAddress* ProtoSceneAddress::default_instance_ = NULL;

ProtoSceneAddress* ProtoSceneAddress::New() const {
  return new ProtoSceneAddress;
}

void ProtoSceneAddress::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scene_id_ = 0;
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::kEmptyString) {
        address_->clear();
      }
    }
    port_ = 0;
    if (has_domain()) {
      if (domain_ != &::google::protobuf::internal::kEmptyString) {
        domain_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoSceneAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 scene_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_address;
        break;
      }
      
      // optional string address = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }
      
      // optional int32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_domain;
        break;
      }
      
      // optional string domain = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoSceneAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 scene_id = 1;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->scene_id(), output);
  }
  
  // optional string address = 2;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->address(), output);
  }
  
  // optional int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }
  
  // optional string domain = 4;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->domain(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoSceneAddress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 scene_id = 1;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->scene_id(), target);
  }
  
  // optional string address = 2;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->address(), target);
  }
  
  // optional int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }
  
  // optional string domain = 4;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->domain(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoSceneAddress::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 scene_id = 1;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_id());
    }
    
    // optional string address = 2;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }
    
    // optional int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }
    
    // optional string domain = 4;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoSceneAddress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoSceneAddress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoSceneAddress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoSceneAddress::MergeFrom(const ProtoSceneAddress& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_domain()) {
      set_domain(from.domain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoSceneAddress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoSceneAddress::CopyFrom(const ProtoSceneAddress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoSceneAddress::IsInitialized() const {
  
  return true;
}

void ProtoSceneAddress::Swap(ProtoSceneAddress* other) {
  if (other != this) {
    std::swap(scene_id_, other->scene_id_);
    std::swap(address_, other->address_);
    std::swap(port_, other->port_);
    std::swap(domain_, other->domain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoSceneAddress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoSceneAddress_descriptor_;
  metadata.reflection = ProtoSceneAddress_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoCoord::kPixelXFieldNumber;
const int ProtoCoord::kPixelYFieldNumber;
#endif  // !_MSC_VER

ProtoCoord::ProtoCoord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoCoord::InitAsDefaultInstance() {
}

ProtoCoord::ProtoCoord(const ProtoCoord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoCoord::SharedCtor() {
  _cached_size_ = 0;
  pixel_x_ = 0;
  pixel_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoCoord::~ProtoCoord() {
  SharedDtor();
}

void ProtoCoord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoCoord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoCoord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoCoord_descriptor_;
}

const ProtoCoord& ProtoCoord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoCoord* ProtoCoord::default_instance_ = NULL;

ProtoCoord* ProtoCoord::New() const {
  return new ProtoCoord;
}

void ProtoCoord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pixel_x_ = 0;
    pixel_y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoCoord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pixel_x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pixel_x_)));
          set_has_pixel_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pixel_y;
        break;
      }
      
      // optional int32 pixel_y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pixel_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pixel_y_)));
          set_has_pixel_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoCoord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pixel_x = 1;
  if (has_pixel_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pixel_x(), output);
  }
  
  // optional int32 pixel_y = 2;
  if (has_pixel_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pixel_y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoCoord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pixel_x = 1;
  if (has_pixel_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pixel_x(), target);
  }
  
  // optional int32 pixel_y = 2;
  if (has_pixel_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pixel_y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoCoord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pixel_x = 1;
    if (has_pixel_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pixel_x());
    }
    
    // optional int32 pixel_y = 2;
    if (has_pixel_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pixel_y());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoCoord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoCoord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoCoord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoCoord::MergeFrom(const ProtoCoord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pixel_x()) {
      set_pixel_x(from.pixel_x());
    }
    if (from.has_pixel_y()) {
      set_pixel_y(from.pixel_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoCoord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoCoord::CopyFrom(const ProtoCoord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoCoord::IsInitialized() const {
  
  return true;
}

void ProtoCoord::Swap(ProtoCoord* other) {
  if (other != this) {
    std::swap(pixel_x_, other->pixel_x_);
    std::swap(pixel_y_, other->pixel_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoCoord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoCoord_descriptor_;
  metadata.reflection = ProtoCoord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoSkill::kSkillIdFieldNumber;
const int ProtoSkill::kSkillLevelFieldNumber;
const int ProtoSkill::kUseSecFieldNumber;
const int ProtoSkill::kUseUsecFieldNumber;
const int ProtoSkill::kUseTimesFieldNumber;
#endif  // !_MSC_VER

ProtoSkill::ProtoSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoSkill::InitAsDefaultInstance() {
}

ProtoSkill::ProtoSkill(const ProtoSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoSkill::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = 0;
  skill_level_ = 0;
  use_sec_ = 0;
  use_usec_ = 0;
  use_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoSkill::~ProtoSkill() {
  SharedDtor();
}

void ProtoSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoSkill_descriptor_;
}

const ProtoSkill& ProtoSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoSkill* ProtoSkill::default_instance_ = NULL;

ProtoSkill* ProtoSkill::New() const {
  return new ProtoSkill;
}

void ProtoSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = 0;
    skill_level_ = 0;
    use_sec_ = 0;
    use_usec_ = 0;
    use_times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_level;
        break;
      }
      
      // optional int32 skill_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_level_)));
          set_has_skill_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_use_sec;
        break;
      }
      
      // optional int32 use_sec = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &use_sec_)));
          set_has_use_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_use_usec;
        break;
      }
      
      // optional int32 use_usec = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_usec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &use_usec_)));
          set_has_use_usec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_use_times;
        break;
      }
      
      // optional int32 use_times = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &use_times_)));
          set_has_use_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skill_id(), output);
  }
  
  // optional int32 skill_level = 2;
  if (has_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skill_level(), output);
  }
  
  // optional int32 use_sec = 3;
  if (has_use_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->use_sec(), output);
  }
  
  // optional int32 use_usec = 4;
  if (has_use_usec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->use_usec(), output);
  }
  
  // optional int32 use_times = 5;
  if (has_use_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->use_times(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skill_id(), target);
  }
  
  // optional int32 skill_level = 2;
  if (has_skill_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skill_level(), target);
  }
  
  // optional int32 use_sec = 3;
  if (has_use_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->use_sec(), target);
  }
  
  // optional int32 use_usec = 4;
  if (has_use_usec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->use_usec(), target);
  }
  
  // optional int32 use_times = 5;
  if (has_use_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->use_times(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoSkill::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }
    
    // optional int32 skill_level = 2;
    if (has_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_level());
    }
    
    // optional int32 use_sec = 3;
    if (has_use_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->use_sec());
    }
    
    // optional int32 use_usec = 4;
    if (has_use_usec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->use_usec());
    }
    
    // optional int32 use_times = 5;
    if (has_use_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->use_times());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoSkill::MergeFrom(const ProtoSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_skill_level()) {
      set_skill_level(from.skill_level());
    }
    if (from.has_use_sec()) {
      set_use_sec(from.use_sec());
    }
    if (from.has_use_usec()) {
      set_use_usec(from.use_usec());
    }
    if (from.has_use_times()) {
      set_use_times(from.use_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoSkill::CopyFrom(const ProtoSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoSkill::IsInitialized() const {
  
  return true;
}

void ProtoSkill::Swap(ProtoSkill* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(skill_level_, other->skill_level_);
    std::swap(use_sec_, other->use_sec_);
    std::swap(use_usec_, other->use_usec_);
    std::swap(use_times_, other->use_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoSkill_descriptor_;
  metadata.reflection = ProtoSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoMoney::kCopperFieldNumber;
const int ProtoMoney::kGoldFieldNumber;
const int ProtoMoney::kBindGoldFieldNumber;
const int ProtoMoney::kBindCopperFieldNumber;
#endif  // !_MSC_VER

ProtoMoney::ProtoMoney()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoMoney::InitAsDefaultInstance() {
}

ProtoMoney::ProtoMoney(const ProtoMoney& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoMoney::SharedCtor() {
  _cached_size_ = 0;
  copper_ = 0;
  gold_ = 0;
  bind_gold_ = 0;
  bind_copper_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoMoney::~ProtoMoney() {
  SharedDtor();
}

void ProtoMoney::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoMoney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoMoney::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoMoney_descriptor_;
}

const ProtoMoney& ProtoMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoMoney* ProtoMoney::default_instance_ = NULL;

ProtoMoney* ProtoMoney::New() const {
  return new ProtoMoney;
}

void ProtoMoney::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    copper_ = 0;
    gold_ = 0;
    bind_gold_ = 0;
    bind_copper_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 copper = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &copper_)));
          set_has_copper();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gold;
        break;
      }
      
      // optional int32 gold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bind_gold;
        break;
      }
      
      // optional int32 bind_gold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bind_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bind_gold_)));
          set_has_bind_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bind_copper;
        break;
      }
      
      // optional int32 bind_copper = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bind_copper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bind_copper_)));
          set_has_bind_copper();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 copper = 1;
  if (has_copper()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->copper(), output);
  }
  
  // optional int32 gold = 2;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gold(), output);
  }
  
  // optional int32 bind_gold = 3;
  if (has_bind_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bind_gold(), output);
  }
  
  // optional int32 bind_copper = 4;
  if (has_bind_copper()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bind_copper(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoMoney::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 copper = 1;
  if (has_copper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->copper(), target);
  }
  
  // optional int32 gold = 2;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gold(), target);
  }
  
  // optional int32 bind_gold = 3;
  if (has_bind_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bind_gold(), target);
  }
  
  // optional int32 bind_copper = 4;
  if (has_bind_copper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bind_copper(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoMoney::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 copper = 1;
    if (has_copper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->copper());
    }
    
    // optional int32 gold = 2;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }
    
    // optional int32 bind_gold = 3;
    if (has_bind_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bind_gold());
    }
    
    // optional int32 bind_copper = 4;
    if (has_bind_copper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bind_copper());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoMoney::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoMoney* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoMoney*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoMoney::MergeFrom(const ProtoMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_copper()) {
      set_copper(from.copper());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_bind_gold()) {
      set_bind_gold(from.bind_gold());
    }
    if (from.has_bind_copper()) {
      set_bind_copper(from.bind_copper());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoMoney::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMoney::CopyFrom(const ProtoMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMoney::IsInitialized() const {
  
  return true;
}

void ProtoMoney::Swap(ProtoMoney* other) {
  if (other != this) {
    std::swap(copper_, other->copper_);
    std::swap(gold_, other->gold_);
    std::swap(bind_gold_, other->bind_gold_);
    std::swap(bind_copper_, other->bind_copper_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoMoney::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoMoney_descriptor_;
  metadata.reflection = ProtoMoney_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoItem::kIndexFieldNumber;
const int ProtoItem::kIdFieldNumber;
const int ProtoItem::kAmountFieldNumber;
const int ProtoItem::kBindFieldNumber;
const int ProtoItem::kEquipmentFieldNumber;
const int ProtoItem::kTreausureFieldNumber;
const int ProtoItem::kUseTimesFieldNumber;
const int ProtoItem::kUseTickFieldNumber;
const int ProtoItem::kNewTagFieldNumber;
const int ProtoItem::kUniqueIdFieldNumber;
const int ProtoItem::kForceFieldNumber;
const int ProtoItem::kTimeoutFieldNumber;
const int ProtoItem::kOutTimeItemIdFieldNumber;
const int ProtoItem::kOutTimeItemAmountFieldNumber;
const int ProtoItem::kOutTimeItemBindFieldNumber;
const int ProtoItem::kTipsLevelFieldNumber;
const int ProtoItem::kTipsTimeMapFieldNumber;
const int ProtoItem::kTipsStatusMapFieldNumber;
#endif  // !_MSC_VER

ProtoItem::ProtoItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoItem::InitAsDefaultInstance() {
  equipment_ = const_cast< ::ProtoEquip*>(&::ProtoEquip::default_instance());
  treausure_ = const_cast< ::ProtoTreasure*>(&::ProtoTreasure::default_instance());
}

ProtoItem::ProtoItem(const ProtoItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoItem::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  id_ = 0;
  amount_ = 0;
  bind_ = 0;
  equipment_ = NULL;
  treausure_ = NULL;
  use_times_ = 0;
  use_tick_ = GOOGLE_LONGLONG(0);
  new_tag_ = 0;
  unique_id_ = GOOGLE_LONGLONG(0);
  force_ = 0;
  timeout_ = GOOGLE_ULONGLONG(0);
  out_time_item_id_ = 0;
  out_time_item_amount_ = 0;
  out_time_item_bind_ = 0;
  tips_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoItem::~ProtoItem() {
  SharedDtor();
}

void ProtoItem::SharedDtor() {
  if (this != default_instance_) {
    delete equipment_;
    delete treausure_;
  }
}

void ProtoItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoItem_descriptor_;
}

const ProtoItem& ProtoItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoItem* ProtoItem::default_instance_ = NULL;

ProtoItem* ProtoItem::New() const {
  return new ProtoItem;
}

void ProtoItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    id_ = 0;
    amount_ = 0;
    bind_ = 0;
    if (has_equipment()) {
      if (equipment_ != NULL) equipment_->::ProtoEquip::Clear();
    }
    if (has_treausure()) {
      if (treausure_ != NULL) treausure_->::ProtoTreasure::Clear();
    }
    use_times_ = 0;
    use_tick_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    new_tag_ = 0;
    unique_id_ = GOOGLE_LONGLONG(0);
    force_ = 0;
    timeout_ = GOOGLE_ULONGLONG(0);
    out_time_item_id_ = 0;
    out_time_item_amount_ = 0;
    out_time_item_bind_ = 0;
    tips_level_ = 0;
  }
  tips_time_map_.Clear();
  tips_status_map_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_amount;
        break;
      }
      
      // optional int32 amount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bind;
        break;
      }
      
      // optional int32 bind = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bind_)));
          set_has_bind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_equipment;
        break;
      }
      
      // optional .ProtoEquip equipment = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_treausure;
        break;
      }
      
      // optional .ProtoTreasure treausure = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_treausure:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_treausure()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_use_times;
        break;
      }
      
      // optional int32 use_times = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &use_times_)));
          set_has_use_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_use_tick;
        break;
      }
      
      // optional int64 use_tick = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &use_tick_)));
          set_has_use_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_new_tag;
        break;
      }
      
      // optional int32 new_tag = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_tag_)));
          set_has_new_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_unique_id;
        break;
      }
      
      // optional int64 unique_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unique_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &unique_id_)));
          set_has_unique_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_force;
        break;
      }
      
      // optional int32 force = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &force_)));
          set_has_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_timeout;
        break;
      }
      
      // optional uint64 timeout = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_out_time_item_id;
        break;
      }
      
      // optional int32 out_time_item_id = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_time_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &out_time_item_id_)));
          set_has_out_time_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_out_time_item_amount;
        break;
      }
      
      // optional int32 out_time_item_amount = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_time_item_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &out_time_item_amount_)));
          set_has_out_time_item_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_out_time_item_bind;
        break;
      }
      
      // optional int32 out_time_item_bind = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_time_item_bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &out_time_item_bind_)));
          set_has_out_time_item_bind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_tips_level;
        break;
      }
      
      // optional int32 tips_level = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tips_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tips_level_)));
          set_has_tips_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_tips_time_map;
        break;
      }
      
      // repeated int32 tips_time_map = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tips_time_map:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 136, input, this->mutable_tips_time_map())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_tips_time_map())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_tips_time_map;
        if (input->ExpectTag(144)) goto parse_tips_status_map;
        break;
      }
      
      // repeated int32 tips_status_map = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tips_status_map:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 144, input, this->mutable_tips_status_map())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_tips_status_map())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_tips_status_map;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  // optional int32 amount = 3;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->amount(), output);
  }
  
  // optional int32 bind = 4;
  if (has_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bind(), output);
  }
  
  // optional .ProtoEquip equipment = 5;
  if (has_equipment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->equipment(), output);
  }
  
  // optional .ProtoTreasure treausure = 6;
  if (has_treausure()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->treausure(), output);
  }
  
  // optional int32 use_times = 7;
  if (has_use_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->use_times(), output);
  }
  
  // optional int64 use_tick = 8;
  if (has_use_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->use_tick(), output);
  }
  
  // optional int32 new_tag = 9;
  if (has_new_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->new_tag(), output);
  }
  
  // optional int64 unique_id = 10;
  if (has_unique_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->unique_id(), output);
  }
  
  // optional int32 force = 11;
  if (has_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->force(), output);
  }
  
  // optional uint64 timeout = 12;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->timeout(), output);
  }
  
  // optional int32 out_time_item_id = 13;
  if (has_out_time_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->out_time_item_id(), output);
  }
  
  // optional int32 out_time_item_amount = 14;
  if (has_out_time_item_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->out_time_item_amount(), output);
  }
  
  // optional int32 out_time_item_bind = 15;
  if (has_out_time_item_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->out_time_item_bind(), output);
  }
  
  // optional int32 tips_level = 16;
  if (has_tips_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->tips_level(), output);
  }
  
  // repeated int32 tips_time_map = 17;
  for (int i = 0; i < this->tips_time_map_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      17, this->tips_time_map(i), output);
  }
  
  // repeated int32 tips_status_map = 18;
  for (int i = 0; i < this->tips_status_map_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      18, this->tips_status_map(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  // optional int32 amount = 3;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->amount(), target);
  }
  
  // optional int32 bind = 4;
  if (has_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bind(), target);
  }
  
  // optional .ProtoEquip equipment = 5;
  if (has_equipment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->equipment(), target);
  }
  
  // optional .ProtoTreasure treausure = 6;
  if (has_treausure()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->treausure(), target);
  }
  
  // optional int32 use_times = 7;
  if (has_use_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->use_times(), target);
  }
  
  // optional int64 use_tick = 8;
  if (has_use_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->use_tick(), target);
  }
  
  // optional int32 new_tag = 9;
  if (has_new_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->new_tag(), target);
  }
  
  // optional int64 unique_id = 10;
  if (has_unique_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->unique_id(), target);
  }
  
  // optional int32 force = 11;
  if (has_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->force(), target);
  }
  
  // optional uint64 timeout = 12;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->timeout(), target);
  }
  
  // optional int32 out_time_item_id = 13;
  if (has_out_time_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->out_time_item_id(), target);
  }
  
  // optional int32 out_time_item_amount = 14;
  if (has_out_time_item_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->out_time_item_amount(), target);
  }
  
  // optional int32 out_time_item_bind = 15;
  if (has_out_time_item_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->out_time_item_bind(), target);
  }
  
  // optional int32 tips_level = 16;
  if (has_tips_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->tips_level(), target);
  }
  
  // repeated int32 tips_time_map = 17;
  for (int i = 0; i < this->tips_time_map_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(17, this->tips_time_map(i), target);
  }
  
  // repeated int32 tips_status_map = 18;
  for (int i = 0; i < this->tips_status_map_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(18, this->tips_status_map(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 amount = 3;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->amount());
    }
    
    // optional int32 bind = 4;
    if (has_bind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bind());
    }
    
    // optional .ProtoEquip equipment = 5;
    if (has_equipment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipment());
    }
    
    // optional .ProtoTreasure treausure = 6;
    if (has_treausure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->treausure());
    }
    
    // optional int32 use_times = 7;
    if (has_use_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->use_times());
    }
    
    // optional int64 use_tick = 8;
    if (has_use_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->use_tick());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 new_tag = 9;
    if (has_new_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_tag());
    }
    
    // optional int64 unique_id = 10;
    if (has_unique_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->unique_id());
    }
    
    // optional int32 force = 11;
    if (has_force()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->force());
    }
    
    // optional uint64 timeout = 12;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timeout());
    }
    
    // optional int32 out_time_item_id = 13;
    if (has_out_time_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->out_time_item_id());
    }
    
    // optional int32 out_time_item_amount = 14;
    if (has_out_time_item_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->out_time_item_amount());
    }
    
    // optional int32 out_time_item_bind = 15;
    if (has_out_time_item_bind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->out_time_item_bind());
    }
    
    // optional int32 tips_level = 16;
    if (has_tips_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tips_level());
    }
    
  }
  // repeated int32 tips_time_map = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->tips_time_map_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->tips_time_map(i));
    }
    total_size += 2 * this->tips_time_map_size() + data_size;
  }
  
  // repeated int32 tips_status_map = 18;
  {
    int data_size = 0;
    for (int i = 0; i < this->tips_status_map_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->tips_status_map(i));
    }
    total_size += 2 * this->tips_status_map_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoItem::MergeFrom(const ProtoItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  tips_time_map_.MergeFrom(from.tips_time_map_);
  tips_status_map_.MergeFrom(from.tips_status_map_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_bind()) {
      set_bind(from.bind());
    }
    if (from.has_equipment()) {
      mutable_equipment()->::ProtoEquip::MergeFrom(from.equipment());
    }
    if (from.has_treausure()) {
      mutable_treausure()->::ProtoTreasure::MergeFrom(from.treausure());
    }
    if (from.has_use_times()) {
      set_use_times(from.use_times());
    }
    if (from.has_use_tick()) {
      set_use_tick(from.use_tick());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_new_tag()) {
      set_new_tag(from.new_tag());
    }
    if (from.has_unique_id()) {
      set_unique_id(from.unique_id());
    }
    if (from.has_force()) {
      set_force(from.force());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
    if (from.has_out_time_item_id()) {
      set_out_time_item_id(from.out_time_item_id());
    }
    if (from.has_out_time_item_amount()) {
      set_out_time_item_amount(from.out_time_item_amount());
    }
    if (from.has_out_time_item_bind()) {
      set_out_time_item_bind(from.out_time_item_bind());
    }
    if (from.has_tips_level()) {
      set_tips_level(from.tips_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoItem::CopyFrom(const ProtoItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoItem::IsInitialized() const {
  
  return true;
}

void ProtoItem::Swap(ProtoItem* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(id_, other->id_);
    std::swap(amount_, other->amount_);
    std::swap(bind_, other->bind_);
    std::swap(equipment_, other->equipment_);
    std::swap(treausure_, other->treausure_);
    std::swap(use_times_, other->use_times_);
    std::swap(use_tick_, other->use_tick_);
    std::swap(new_tag_, other->new_tag_);
    std::swap(unique_id_, other->unique_id_);
    std::swap(force_, other->force_);
    std::swap(timeout_, other->timeout_);
    std::swap(out_time_item_id_, other->out_time_item_id_);
    std::swap(out_time_item_amount_, other->out_time_item_amount_);
    std::swap(out_time_item_bind_, other->out_time_item_bind_);
    std::swap(tips_level_, other->tips_level_);
    tips_time_map_.Swap(&other->tips_time_map_);
    tips_status_map_.Swap(&other->tips_status_map_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoItem_descriptor_;
  metadata.reflection = ProtoItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoEquip::kRefineLevelFieldNumber;
const int ProtoEquip::kFashionInfoFieldNumber;
const int ProtoEquip::kRefineDegreeFieldNumber;
const int ProtoEquip::kJewelListsFieldNumber;
const int ProtoEquip::kRefineListsFieldNumber;
const int ProtoEquip::kMoldingNatureFieldNumber;
#endif  // !_MSC_VER

ProtoEquip::ProtoEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoEquip::InitAsDefaultInstance() {
  fashion_info_ = const_cast< ::ProtoFashionInfo*>(&::ProtoFashionInfo::default_instance());
}

ProtoEquip::ProtoEquip(const ProtoEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoEquip::SharedCtor() {
  _cached_size_ = 0;
  refine_level_ = 0;
  fashion_info_ = NULL;
  refine_degree_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoEquip::~ProtoEquip() {
  SharedDtor();
}

void ProtoEquip::SharedDtor() {
  if (this != default_instance_) {
    delete fashion_info_;
  }
}

void ProtoEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoEquip_descriptor_;
}

const ProtoEquip& ProtoEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoEquip* ProtoEquip::default_instance_ = NULL;

ProtoEquip* ProtoEquip::New() const {
  return new ProtoEquip;
}

void ProtoEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    refine_level_ = 0;
    if (has_fashion_info()) {
      if (fashion_info_ != NULL) fashion_info_->::ProtoFashionInfo::Clear();
    }
    refine_degree_ = 0;
  }
  jewel_lists_.Clear();
  refine_lists_.Clear();
  molding_nature_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 refine_level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refine_level_)));
          set_has_refine_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fashion_info;
        break;
      }
      
      // optional .ProtoFashionInfo fashion_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fashion_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fashion_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_refine_degree;
        break;
      }
      
      // optional int32 refine_degree = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refine_degree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refine_degree_)));
          set_has_refine_degree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_jewel_lists;
        break;
      }
      
      // repeated .ProtoPairObj jewel_lists = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jewel_lists:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jewel_lists()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_jewel_lists;
        if (input->ExpectTag(42)) goto parse_refine_lists;
        break;
      }
      
      // repeated .ProtoPairObj refine_lists = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_refine_lists:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_refine_lists()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_refine_lists;
        if (input->ExpectTag(50)) goto parse_molding_nature;
        break;
      }
      
      // repeated .MoldingNature molding_nature = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_molding_nature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_molding_nature()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_molding_nature;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 refine_level = 1;
  if (has_refine_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->refine_level(), output);
  }
  
  // optional .ProtoFashionInfo fashion_info = 2;
  if (has_fashion_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fashion_info(), output);
  }
  
  // optional int32 refine_degree = 3;
  if (has_refine_degree()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->refine_degree(), output);
  }
  
  // repeated .ProtoPairObj jewel_lists = 4;
  for (int i = 0; i < this->jewel_lists_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->jewel_lists(i), output);
  }
  
  // repeated .ProtoPairObj refine_lists = 5;
  for (int i = 0; i < this->refine_lists_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->refine_lists(i), output);
  }
  
  // repeated .MoldingNature molding_nature = 6;
  for (int i = 0; i < this->molding_nature_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->molding_nature(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 refine_level = 1;
  if (has_refine_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->refine_level(), target);
  }
  
  // optional .ProtoFashionInfo fashion_info = 2;
  if (has_fashion_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fashion_info(), target);
  }
  
  // optional int32 refine_degree = 3;
  if (has_refine_degree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->refine_degree(), target);
  }
  
  // repeated .ProtoPairObj jewel_lists = 4;
  for (int i = 0; i < this->jewel_lists_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->jewel_lists(i), target);
  }
  
  // repeated .ProtoPairObj refine_lists = 5;
  for (int i = 0; i < this->refine_lists_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->refine_lists(i), target);
  }
  
  // repeated .MoldingNature molding_nature = 6;
  for (int i = 0; i < this->molding_nature_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->molding_nature(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoEquip::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 refine_level = 1;
    if (has_refine_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refine_level());
    }
    
    // optional .ProtoFashionInfo fashion_info = 2;
    if (has_fashion_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fashion_info());
    }
    
    // optional int32 refine_degree = 3;
    if (has_refine_degree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refine_degree());
    }
    
  }
  // repeated .ProtoPairObj jewel_lists = 4;
  total_size += 1 * this->jewel_lists_size();
  for (int i = 0; i < this->jewel_lists_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jewel_lists(i));
  }
  
  // repeated .ProtoPairObj refine_lists = 5;
  total_size += 1 * this->refine_lists_size();
  for (int i = 0; i < this->refine_lists_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->refine_lists(i));
  }
  
  // repeated .MoldingNature molding_nature = 6;
  total_size += 1 * this->molding_nature_size();
  for (int i = 0; i < this->molding_nature_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->molding_nature(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoEquip::MergeFrom(const ProtoEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  jewel_lists_.MergeFrom(from.jewel_lists_);
  refine_lists_.MergeFrom(from.refine_lists_);
  molding_nature_.MergeFrom(from.molding_nature_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_refine_level()) {
      set_refine_level(from.refine_level());
    }
    if (from.has_fashion_info()) {
      mutable_fashion_info()->::ProtoFashionInfo::MergeFrom(from.fashion_info());
    }
    if (from.has_refine_degree()) {
      set_refine_degree(from.refine_degree());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoEquip::CopyFrom(const ProtoEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoEquip::IsInitialized() const {
  
  return true;
}

void ProtoEquip::Swap(ProtoEquip* other) {
  if (other != this) {
    std::swap(refine_level_, other->refine_level_);
    std::swap(fashion_info_, other->fashion_info_);
    std::swap(refine_degree_, other->refine_degree_);
    jewel_lists_.Swap(&other->jewel_lists_);
    refine_lists_.Swap(&other->refine_lists_);
    molding_nature_.Swap(&other->molding_nature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoEquip_descriptor_;
  metadata.reflection = ProtoEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoChatInfo::kChannelFieldNumber;
const int ProtoChatInfo::kTypeFieldNumber;
const int ProtoChatInfo::kVoiceIdFieldNumber;
const int ProtoChatInfo::kVoiceLenFieldNumber;
const int ProtoChatInfo::kRoleIdFieldNumber;
const int ProtoChatInfo::kNameFieldNumber;
const int ProtoChatInfo::kSexFieldNumber;
const int ProtoChatInfo::kLevelFieldNumber;
const int ProtoChatInfo::kVipFieldNumber;
const int ProtoChatInfo::kTeamFieldNumber;
const int ProtoChatInfo::kLabelFieldNumber;
const int ProtoChatInfo::kTimeFieldNumber;
const int ProtoChatInfo::kContentFieldNumber;
const int ProtoChatInfo::kTargetIdFieldNumber;
const int ProtoChatInfo::kTargetNameFieldNumber;
const int ProtoChatInfo::kTargetSexFieldNumber;
const int ProtoChatInfo::kTargetLevelFieldNumber;
const int ProtoChatInfo::kTargetVipFieldNumber;
const int ProtoChatInfo::kTargetTeamFieldNumber;
const int ProtoChatInfo::kTargetLabelFieldNumber;
const int ProtoChatInfo::kFlauntDetailFieldNumber;
const int ProtoChatInfo::kCareerFieldNumber;
const int ProtoChatInfo::kPermissionFieldNumber;
const int ProtoChatInfo::kServerPrevFieldNumber;
const int ProtoChatInfo::kServerIdFieldNumber;
const int ProtoChatInfo::kSceneIdFieldNumber;
const int ProtoChatInfo::kLeagueNameFieldNumber;
const int ProtoChatInfo::kTargetLeagueNameFieldNumber;
#endif  // !_MSC_VER

ProtoChatInfo::ProtoChatInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoChatInfo::InitAsDefaultInstance() {
  flaunt_detail_ = const_cast< ::ProtoFlaunt*>(&::ProtoFlaunt::default_instance());
}

ProtoChatInfo::ProtoChatInfo(const ProtoChatInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoChatInfo::SharedCtor() {
  _cached_size_ = 0;
  channel_ = 0;
  type_ = 0;
  voice_id_ = GOOGLE_LONGLONG(0);
  voice_len_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  level_ = 0;
  vip_ = 0;
  team_ = 0;
  label_ = 0;
  time_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  target_id_ = GOOGLE_LONGLONG(0);
  target_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  target_sex_ = 0;
  target_level_ = 0;
  target_vip_ = 0;
  target_team_ = 0;
  target_label_ = 0;
  flaunt_detail_ = NULL;
  career_ = 0;
  permission_ = 0;
  server_prev_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_id_ = 0;
  scene_id_ = 0;
  league_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  target_league_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoChatInfo::~ProtoChatInfo() {
  SharedDtor();
}

void ProtoChatInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (target_name_ != &::google::protobuf::internal::kEmptyString) {
    delete target_name_;
  }
  if (server_prev_ != &::google::protobuf::internal::kEmptyString) {
    delete server_prev_;
  }
  if (league_name_ != &::google::protobuf::internal::kEmptyString) {
    delete league_name_;
  }
  if (target_league_name_ != &::google::protobuf::internal::kEmptyString) {
    delete target_league_name_;
  }
  if (this != default_instance_) {
    delete flaunt_detail_;
  }
}

void ProtoChatInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoChatInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoChatInfo_descriptor_;
}

const ProtoChatInfo& ProtoChatInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoChatInfo* ProtoChatInfo::default_instance_ = NULL;

ProtoChatInfo* ProtoChatInfo::New() const {
  return new ProtoChatInfo;
}

void ProtoChatInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channel_ = 0;
    type_ = 0;
    voice_id_ = GOOGLE_LONGLONG(0);
    voice_len_ = 0;
    role_id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    sex_ = 0;
    level_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    vip_ = 0;
    team_ = 0;
    label_ = 0;
    time_ = 0;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    target_id_ = GOOGLE_LONGLONG(0);
    if (has_target_name()) {
      if (target_name_ != &::google::protobuf::internal::kEmptyString) {
        target_name_->clear();
      }
    }
    target_sex_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    target_level_ = 0;
    target_vip_ = 0;
    target_team_ = 0;
    target_label_ = 0;
    if (has_flaunt_detail()) {
      if (flaunt_detail_ != NULL) flaunt_detail_->::ProtoFlaunt::Clear();
    }
    career_ = 0;
    permission_ = 0;
    if (has_server_prev()) {
      if (server_prev_ != &::google::protobuf::internal::kEmptyString) {
        server_prev_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    server_id_ = 0;
    scene_id_ = 0;
    if (has_league_name()) {
      if (league_name_ != &::google::protobuf::internal::kEmptyString) {
        league_name_->clear();
      }
    }
    if (has_target_league_name()) {
      if (target_league_name_ != &::google::protobuf::internal::kEmptyString) {
        target_league_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoChatInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 channel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_voice_id;
        break;
      }
      
      // optional int64 voice_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_voice_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &voice_id_)));
          set_has_voice_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_voice_len;
        break;
      }
      
      // optional int32 voice_len = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_voice_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &voice_len_)));
          set_has_voice_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_role_id;
        break;
      }
      
      // optional int64 role_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }
      
      // optional string name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_sex;
        break;
      }
      
      // optional int32 sex = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_level;
        break;
      }
      
      // optional int32 level = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_vip;
        break;
      }
      
      // optional int32 vip = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_team;
        break;
      }
      
      // optional int32 team = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_label;
        break;
      }
      
      // optional int32 label = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_label:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &label_)));
          set_has_label();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_time;
        break;
      }
      
      // optional int32 time = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_content;
        break;
      }
      
      // optional string content = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_target_id;
        break;
      }
      
      // optional int64 target_id = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &target_id_)));
          set_has_target_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_target_name;
        break;
      }
      
      // optional string target_name = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->target_name().data(), this->target_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_target_sex;
        break;
      }
      
      // optional int32 target_sex = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_sex_)));
          set_has_target_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_target_level;
        break;
      }
      
      // optional int32 target_level = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_level_)));
          set_has_target_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_target_vip;
        break;
      }
      
      // optional int32 target_vip = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_vip_)));
          set_has_target_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_target_team;
        break;
      }
      
      // optional int32 target_team = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_team_)));
          set_has_target_team();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_target_label;
        break;
      }
      
      // optional int32 target_label = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_label:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_label_)));
          set_has_target_label();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_flaunt_detail;
        break;
      }
      
      // optional .ProtoFlaunt flaunt_detail = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flaunt_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flaunt_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_career;
        break;
      }
      
      // optional int32 career = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_career:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &career_)));
          set_has_career();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_permission;
        break;
      }
      
      // optional int32 permission = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_permission:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &permission_)));
          set_has_permission();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_server_prev;
        break;
      }
      
      // optional string server_prev = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_prev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_prev()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_prev().data(), this->server_prev().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_server_id;
        break;
      }
      
      // optional int32 server_id = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_scene_id;
        break;
      }
      
      // optional int32 scene_id = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_league_name;
        break;
      }
      
      // optional string league_name = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_league_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_league_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->league_name().data(), this->league_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_target_league_name;
        break;
      }
      
      // optional string target_league_name = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_league_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_league_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->target_league_name().data(), this->target_league_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoChatInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->channel(), output);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  // optional int64 voice_id = 3;
  if (has_voice_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->voice_id(), output);
  }
  
  // optional int32 voice_len = 4;
  if (has_voice_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->voice_len(), output);
  }
  
  // optional int64 role_id = 5;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->role_id(), output);
  }
  
  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->name(), output);
  }
  
  // optional int32 sex = 7;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->sex(), output);
  }
  
  // optional int32 level = 8;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->level(), output);
  }
  
  // optional int32 vip = 9;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->vip(), output);
  }
  
  // optional int32 team = 10;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->team(), output);
  }
  
  // optional int32 label = 11;
  if (has_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->label(), output);
  }
  
  // optional int32 time = 12;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->time(), output);
  }
  
  // optional string content = 13;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->content(), output);
  }
  
  // optional int64 target_id = 14;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->target_id(), output);
  }
  
  // optional string target_name = 15;
  if (has_target_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target_name().data(), this->target_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->target_name(), output);
  }
  
  // optional int32 target_sex = 16;
  if (has_target_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->target_sex(), output);
  }
  
  // optional int32 target_level = 17;
  if (has_target_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->target_level(), output);
  }
  
  // optional int32 target_vip = 18;
  if (has_target_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->target_vip(), output);
  }
  
  // optional int32 target_team = 19;
  if (has_target_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->target_team(), output);
  }
  
  // optional int32 target_label = 20;
  if (has_target_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->target_label(), output);
  }
  
  // optional .ProtoFlaunt flaunt_detail = 21;
  if (has_flaunt_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->flaunt_detail(), output);
  }
  
  // optional int32 career = 22;
  if (has_career()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->career(), output);
  }
  
  // optional int32 permission = 23;
  if (has_permission()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->permission(), output);
  }
  
  // optional string server_prev = 24;
  if (has_server_prev()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_prev().data(), this->server_prev().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->server_prev(), output);
  }
  
  // optional int32 server_id = 25;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->server_id(), output);
  }
  
  // optional int32 scene_id = 26;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->scene_id(), output);
  }
  
  // optional string league_name = 27;
  if (has_league_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->league_name().data(), this->league_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->league_name(), output);
  }
  
  // optional string target_league_name = 28;
  if (has_target_league_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target_league_name().data(), this->target_league_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      28, this->target_league_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoChatInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 channel = 1;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->channel(), target);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  // optional int64 voice_id = 3;
  if (has_voice_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->voice_id(), target);
  }
  
  // optional int32 voice_len = 4;
  if (has_voice_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->voice_len(), target);
  }
  
  // optional int64 role_id = 5;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->role_id(), target);
  }
  
  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }
  
  // optional int32 sex = 7;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->sex(), target);
  }
  
  // optional int32 level = 8;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->level(), target);
  }
  
  // optional int32 vip = 9;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->vip(), target);
  }
  
  // optional int32 team = 10;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->team(), target);
  }
  
  // optional int32 label = 11;
  if (has_label()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->label(), target);
  }
  
  // optional int32 time = 12;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->time(), target);
  }
  
  // optional string content = 13;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->content(), target);
  }
  
  // optional int64 target_id = 14;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->target_id(), target);
  }
  
  // optional string target_name = 15;
  if (has_target_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target_name().data(), this->target_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->target_name(), target);
  }
  
  // optional int32 target_sex = 16;
  if (has_target_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->target_sex(), target);
  }
  
  // optional int32 target_level = 17;
  if (has_target_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->target_level(), target);
  }
  
  // optional int32 target_vip = 18;
  if (has_target_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->target_vip(), target);
  }
  
  // optional int32 target_team = 19;
  if (has_target_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->target_team(), target);
  }
  
  // optional int32 target_label = 20;
  if (has_target_label()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->target_label(), target);
  }
  
  // optional .ProtoFlaunt flaunt_detail = 21;
  if (has_flaunt_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->flaunt_detail(), target);
  }
  
  // optional int32 career = 22;
  if (has_career()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->career(), target);
  }
  
  // optional int32 permission = 23;
  if (has_permission()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->permission(), target);
  }
  
  // optional string server_prev = 24;
  if (has_server_prev()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_prev().data(), this->server_prev().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->server_prev(), target);
  }
  
  // optional int32 server_id = 25;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->server_id(), target);
  }
  
  // optional int32 scene_id = 26;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->scene_id(), target);
  }
  
  // optional string league_name = 27;
  if (has_league_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->league_name().data(), this->league_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->league_name(), target);
  }
  
  // optional string target_league_name = 28;
  if (has_target_league_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target_league_name().data(), this->target_league_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->target_league_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoChatInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }
    
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int64 voice_id = 3;
    if (has_voice_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->voice_id());
    }
    
    // optional int32 voice_len = 4;
    if (has_voice_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->voice_len());
    }
    
    // optional int64 role_id = 5;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional string name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 sex = 7;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }
    
    // optional int32 level = 8;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 vip = 9;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip());
    }
    
    // optional int32 team = 10;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team());
    }
    
    // optional int32 label = 11;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->label());
    }
    
    // optional int32 time = 12;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
    // optional string content = 13;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
    // optional int64 target_id = 14;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->target_id());
    }
    
    // optional string target_name = 15;
    if (has_target_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target_name());
    }
    
    // optional int32 target_sex = 16;
    if (has_target_sex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_sex());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 target_level = 17;
    if (has_target_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_level());
    }
    
    // optional int32 target_vip = 18;
    if (has_target_vip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_vip());
    }
    
    // optional int32 target_team = 19;
    if (has_target_team()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_team());
    }
    
    // optional int32 target_label = 20;
    if (has_target_label()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_label());
    }
    
    // optional .ProtoFlaunt flaunt_detail = 21;
    if (has_flaunt_detail()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->flaunt_detail());
    }
    
    // optional int32 career = 22;
    if (has_career()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->career());
    }
    
    // optional int32 permission = 23;
    if (has_permission()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->permission());
    }
    
    // optional string server_prev = 24;
    if (has_server_prev()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_prev());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 server_id = 25;
    if (has_server_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }
    
    // optional int32 scene_id = 26;
    if (has_scene_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_id());
    }
    
    // optional string league_name = 27;
    if (has_league_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->league_name());
    }
    
    // optional string target_league_name = 28;
    if (has_target_league_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target_league_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoChatInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoChatInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoChatInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoChatInfo::MergeFrom(const ProtoChatInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_voice_id()) {
      set_voice_id(from.voice_id());
    }
    if (from.has_voice_len()) {
      set_voice_len(from.voice_len());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_target_id()) {
      set_target_id(from.target_id());
    }
    if (from.has_target_name()) {
      set_target_name(from.target_name());
    }
    if (from.has_target_sex()) {
      set_target_sex(from.target_sex());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_target_level()) {
      set_target_level(from.target_level());
    }
    if (from.has_target_vip()) {
      set_target_vip(from.target_vip());
    }
    if (from.has_target_team()) {
      set_target_team(from.target_team());
    }
    if (from.has_target_label()) {
      set_target_label(from.target_label());
    }
    if (from.has_flaunt_detail()) {
      mutable_flaunt_detail()->::ProtoFlaunt::MergeFrom(from.flaunt_detail());
    }
    if (from.has_career()) {
      set_career(from.career());
    }
    if (from.has_permission()) {
      set_permission(from.permission());
    }
    if (from.has_server_prev()) {
      set_server_prev(from.server_prev());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_league_name()) {
      set_league_name(from.league_name());
    }
    if (from.has_target_league_name()) {
      set_target_league_name(from.target_league_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoChatInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoChatInfo::CopyFrom(const ProtoChatInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoChatInfo::IsInitialized() const {
  
  return true;
}

void ProtoChatInfo::Swap(ProtoChatInfo* other) {
  if (other != this) {
    std::swap(channel_, other->channel_);
    std::swap(type_, other->type_);
    std::swap(voice_id_, other->voice_id_);
    std::swap(voice_len_, other->voice_len_);
    std::swap(role_id_, other->role_id_);
    std::swap(name_, other->name_);
    std::swap(sex_, other->sex_);
    std::swap(level_, other->level_);
    std::swap(vip_, other->vip_);
    std::swap(team_, other->team_);
    std::swap(label_, other->label_);
    std::swap(time_, other->time_);
    std::swap(content_, other->content_);
    std::swap(target_id_, other->target_id_);
    std::swap(target_name_, other->target_name_);
    std::swap(target_sex_, other->target_sex_);
    std::swap(target_level_, other->target_level_);
    std::swap(target_vip_, other->target_vip_);
    std::swap(target_team_, other->target_team_);
    std::swap(target_label_, other->target_label_);
    std::swap(flaunt_detail_, other->flaunt_detail_);
    std::swap(career_, other->career_);
    std::swap(permission_, other->permission_);
    std::swap(server_prev_, other->server_prev_);
    std::swap(server_id_, other->server_id_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(league_name_, other->league_name_);
    std::swap(target_league_name_, other->target_league_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoChatInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoChatInfo_descriptor_;
  metadata.reflection = ProtoChatInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoDelItem::kDelIndexFieldNumber;
const int ProtoDelItem::kDelAmountFieldNumber;
#endif  // !_MSC_VER

ProtoDelItem::ProtoDelItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoDelItem::InitAsDefaultInstance() {
}

ProtoDelItem::ProtoDelItem(const ProtoDelItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoDelItem::SharedCtor() {
  _cached_size_ = 0;
  del_index_ = 0;
  del_amount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoDelItem::~ProtoDelItem() {
  SharedDtor();
}

void ProtoDelItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoDelItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoDelItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoDelItem_descriptor_;
}

const ProtoDelItem& ProtoDelItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoDelItem* ProtoDelItem::default_instance_ = NULL;

ProtoDelItem* ProtoDelItem::New() const {
  return new ProtoDelItem;
}

void ProtoDelItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    del_index_ = 0;
    del_amount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoDelItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 del_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &del_index_)));
          set_has_del_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_del_amount;
        break;
      }
      
      // optional int32 del_amount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_del_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &del_amount_)));
          set_has_del_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoDelItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 del_index = 1;
  if (has_del_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->del_index(), output);
  }
  
  // optional int32 del_amount = 2;
  if (has_del_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->del_amount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoDelItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 del_index = 1;
  if (has_del_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->del_index(), target);
  }
  
  // optional int32 del_amount = 2;
  if (has_del_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->del_amount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoDelItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 del_index = 1;
    if (has_del_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->del_index());
    }
    
    // optional int32 del_amount = 2;
    if (has_del_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->del_amount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoDelItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoDelItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoDelItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoDelItem::MergeFrom(const ProtoDelItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_del_index()) {
      set_del_index(from.del_index());
    }
    if (from.has_del_amount()) {
      set_del_amount(from.del_amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoDelItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoDelItem::CopyFrom(const ProtoDelItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoDelItem::IsInitialized() const {
  
  return true;
}

void ProtoDelItem::Swap(ProtoDelItem* other) {
  if (other != this) {
    std::swap(del_index_, other->del_index_);
    std::swap(del_amount_, other->del_amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoDelItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoDelItem_descriptor_;
  metadata.reflection = ProtoDelItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoTaskCond::kIndexFieldNumber;
const int ProtoTaskCond::kValueFieldNumber;
const int ProtoTaskCond::kFinalValueFieldNumber;
const int ProtoTaskCond::kCondIdFieldNumber;
const int ProtoTaskCond::kCondTypeFieldNumber;
const int ProtoTaskCond::kKillTypeFieldNumber;
const int ProtoTaskCond::kRangeLevelFieldNumber;
#endif  // !_MSC_VER

ProtoTaskCond::ProtoTaskCond()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoTaskCond::InitAsDefaultInstance() {
}

ProtoTaskCond::ProtoTaskCond(const ProtoTaskCond& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoTaskCond::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  value_ = 0;
  final_value_ = 0;
  cond_id_ = 0;
  cond_type_ = 0;
  kill_type_ = 0;
  range_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoTaskCond::~ProtoTaskCond() {
  SharedDtor();
}

void ProtoTaskCond::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoTaskCond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoTaskCond::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoTaskCond_descriptor_;
}

const ProtoTaskCond& ProtoTaskCond::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoTaskCond* ProtoTaskCond::default_instance_ = NULL;

ProtoTaskCond* ProtoTaskCond::New() const {
  return new ProtoTaskCond;
}

void ProtoTaskCond::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    value_ = 0;
    final_value_ = 0;
    cond_id_ = 0;
    cond_type_ = 0;
    kill_type_ = 0;
    range_level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoTaskCond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }
      
      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_final_value;
        break;
      }
      
      // optional int32 final_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_final_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &final_value_)));
          set_has_final_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cond_id;
        break;
      }
      
      // optional int32 cond_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cond_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cond_id_)));
          set_has_cond_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cond_type;
        break;
      }
      
      // optional int32 cond_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cond_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cond_type_)));
          set_has_cond_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_kill_type;
        break;
      }
      
      // optional int32 kill_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kill_type_)));
          set_has_kill_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_range_level;
        break;
      }
      
      // optional int32 range_level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_range_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &range_level_)));
          set_has_range_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoTaskCond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }
  
  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }
  
  // optional int32 final_value = 3;
  if (has_final_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->final_value(), output);
  }
  
  // optional int32 cond_id = 4;
  if (has_cond_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cond_id(), output);
  }
  
  // optional int32 cond_type = 5;
  if (has_cond_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cond_type(), output);
  }
  
  // optional int32 kill_type = 6;
  if (has_kill_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->kill_type(), output);
  }
  
  // optional int32 range_level = 7;
  if (has_range_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->range_level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoTaskCond::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }
  
  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }
  
  // optional int32 final_value = 3;
  if (has_final_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->final_value(), target);
  }
  
  // optional int32 cond_id = 4;
  if (has_cond_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cond_id(), target);
  }
  
  // optional int32 cond_type = 5;
  if (has_cond_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cond_type(), target);
  }
  
  // optional int32 kill_type = 6;
  if (has_kill_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->kill_type(), target);
  }
  
  // optional int32 range_level = 7;
  if (has_range_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->range_level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoTaskCond::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
    // optional int32 final_value = 3;
    if (has_final_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->final_value());
    }
    
    // optional int32 cond_id = 4;
    if (has_cond_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cond_id());
    }
    
    // optional int32 cond_type = 5;
    if (has_cond_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cond_type());
    }
    
    // optional int32 kill_type = 6;
    if (has_kill_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kill_type());
    }
    
    // optional int32 range_level = 7;
    if (has_range_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->range_level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoTaskCond::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoTaskCond* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoTaskCond*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoTaskCond::MergeFrom(const ProtoTaskCond& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_final_value()) {
      set_final_value(from.final_value());
    }
    if (from.has_cond_id()) {
      set_cond_id(from.cond_id());
    }
    if (from.has_cond_type()) {
      set_cond_type(from.cond_type());
    }
    if (from.has_kill_type()) {
      set_kill_type(from.kill_type());
    }
    if (from.has_range_level()) {
      set_range_level(from.range_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoTaskCond::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoTaskCond::CopyFrom(const ProtoTaskCond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoTaskCond::IsInitialized() const {
  
  return true;
}

void ProtoTaskCond::Swap(ProtoTaskCond* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(value_, other->value_);
    std::swap(final_value_, other->final_value_);
    std::swap(cond_id_, other->cond_id_);
    std::swap(cond_type_, other->cond_type_);
    std::swap(kill_type_, other->kill_type_);
    std::swap(range_level_, other->range_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoTaskCond::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoTaskCond_descriptor_;
  metadata.reflection = ProtoTaskCond_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoTaskInfo::kTaskIdFieldNumber;
const int ProtoTaskInfo::kTypeFieldNumber;
const int ProtoTaskInfo::kStatusFieldNumber;
const int ProtoTaskInfo::kCondListFieldNumber;
const int ProtoTaskInfo::kRoutineDiceFieldNumber;
const int ProtoTaskInfo::kIsFirstRoutineFieldNumber;
const int ProtoTaskInfo::kTaskStarFieldNumber;
const int ProtoTaskInfo::kFastFinishRateFieldNumber;
const int ProtoTaskInfo::kRoutineIndexFieldNumber;
const int ProtoTaskInfo::kRoutineTotalFieldNumber;
const int ProtoTaskInfo::kIsRoutineFieldNumber;
const int ProtoTaskInfo::kOfferRoutineInfoFieldNumber;
#endif  // !_MSC_VER

ProtoTaskInfo::ProtoTaskInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoTaskInfo::InitAsDefaultInstance() {
  offer_routine_info_ = const_cast< ::ProtoThreeObj*>(&::ProtoThreeObj::default_instance());
}

ProtoTaskInfo::ProtoTaskInfo(const ProtoTaskInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoTaskInfo::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0;
  type_ = 0;
  status_ = 0;
  routine_dice_ = 0;
  is_first_routine_ = 0;
  task_star_ = 0;
  fast_finish_rate_ = 0;
  routine_index_ = 0;
  routine_total_ = 0;
  is_routine_ = 0;
  offer_routine_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoTaskInfo::~ProtoTaskInfo() {
  SharedDtor();
}

void ProtoTaskInfo::SharedDtor() {
  if (this != default_instance_) {
    delete offer_routine_info_;
  }
}

void ProtoTaskInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoTaskInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoTaskInfo_descriptor_;
}

const ProtoTaskInfo& ProtoTaskInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoTaskInfo* ProtoTaskInfo::default_instance_ = NULL;

ProtoTaskInfo* ProtoTaskInfo::New() const {
  return new ProtoTaskInfo;
}

void ProtoTaskInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0;
    type_ = 0;
    status_ = 0;
    routine_dice_ = 0;
    is_first_routine_ = 0;
    task_star_ = 0;
    fast_finish_rate_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    routine_index_ = 0;
    routine_total_ = 0;
    is_routine_ = 0;
    if (has_offer_routine_info()) {
      if (offer_routine_info_ != NULL) offer_routine_info_->::ProtoThreeObj::Clear();
    }
  }
  cond_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoTaskInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }
      
      // optional int32 status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cond_list;
        break;
      }
      
      // repeated .ProtoTaskCond cond_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cond_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cond_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cond_list;
        if (input->ExpectTag(40)) goto parse_routine_dice;
        break;
      }
      
      // optional int32 routine_dice = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_routine_dice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &routine_dice_)));
          set_has_routine_dice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_first_routine;
        break;
      }
      
      // optional int32 is_first_routine = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_first_routine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_first_routine_)));
          set_has_is_first_routine();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_task_star;
        break;
      }
      
      // optional int32 task_star = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_star_)));
          set_has_task_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_fast_finish_rate;
        break;
      }
      
      // optional int32 fast_finish_rate = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fast_finish_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fast_finish_rate_)));
          set_has_fast_finish_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_routine_index;
        break;
      }
      
      // optional int32 routine_index = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_routine_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &routine_index_)));
          set_has_routine_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_routine_total;
        break;
      }
      
      // optional int32 routine_total = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_routine_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &routine_total_)));
          set_has_routine_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_is_routine;
        break;
      }
      
      // optional int32 is_routine = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_routine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_routine_)));
          set_has_is_routine();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_offer_routine_info;
        break;
      }
      
      // optional .ProtoThreeObj offer_routine_info = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_offer_routine_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_offer_routine_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoTaskInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->task_id(), output);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  // optional int32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }
  
  // repeated .ProtoTaskCond cond_list = 4;
  for (int i = 0; i < this->cond_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->cond_list(i), output);
  }
  
  // optional int32 routine_dice = 5;
  if (has_routine_dice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->routine_dice(), output);
  }
  
  // optional int32 is_first_routine = 6;
  if (has_is_first_routine()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->is_first_routine(), output);
  }
  
  // optional int32 task_star = 7;
  if (has_task_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->task_star(), output);
  }
  
  // optional int32 fast_finish_rate = 8;
  if (has_fast_finish_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->fast_finish_rate(), output);
  }
  
  // optional int32 routine_index = 9;
  if (has_routine_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->routine_index(), output);
  }
  
  // optional int32 routine_total = 10;
  if (has_routine_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->routine_total(), output);
  }
  
  // optional int32 is_routine = 11;
  if (has_is_routine()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->is_routine(), output);
  }
  
  // optional .ProtoThreeObj offer_routine_info = 12;
  if (has_offer_routine_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->offer_routine_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoTaskInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->task_id(), target);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  // optional int32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->status(), target);
  }
  
  // repeated .ProtoTaskCond cond_list = 4;
  for (int i = 0; i < this->cond_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->cond_list(i), target);
  }
  
  // optional int32 routine_dice = 5;
  if (has_routine_dice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->routine_dice(), target);
  }
  
  // optional int32 is_first_routine = 6;
  if (has_is_first_routine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->is_first_routine(), target);
  }
  
  // optional int32 task_star = 7;
  if (has_task_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->task_star(), target);
  }
  
  // optional int32 fast_finish_rate = 8;
  if (has_fast_finish_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->fast_finish_rate(), target);
  }
  
  // optional int32 routine_index = 9;
  if (has_routine_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->routine_index(), target);
  }
  
  // optional int32 routine_total = 10;
  if (has_routine_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->routine_total(), target);
  }
  
  // optional int32 is_routine = 11;
  if (has_is_routine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->is_routine(), target);
  }
  
  // optional .ProtoThreeObj offer_routine_info = 12;
  if (has_offer_routine_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->offer_routine_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoTaskInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_id());
    }
    
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // optional int32 routine_dice = 5;
    if (has_routine_dice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->routine_dice());
    }
    
    // optional int32 is_first_routine = 6;
    if (has_is_first_routine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_first_routine());
    }
    
    // optional int32 task_star = 7;
    if (has_task_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_star());
    }
    
    // optional int32 fast_finish_rate = 8;
    if (has_fast_finish_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fast_finish_rate());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 routine_index = 9;
    if (has_routine_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->routine_index());
    }
    
    // optional int32 routine_total = 10;
    if (has_routine_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->routine_total());
    }
    
    // optional int32 is_routine = 11;
    if (has_is_routine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_routine());
    }
    
    // optional .ProtoThreeObj offer_routine_info = 12;
    if (has_offer_routine_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->offer_routine_info());
    }
    
  }
  // repeated .ProtoTaskCond cond_list = 4;
  total_size += 1 * this->cond_list_size();
  for (int i = 0; i < this->cond_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cond_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoTaskInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoTaskInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoTaskInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoTaskInfo::MergeFrom(const ProtoTaskInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  cond_list_.MergeFrom(from.cond_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_routine_dice()) {
      set_routine_dice(from.routine_dice());
    }
    if (from.has_is_first_routine()) {
      set_is_first_routine(from.is_first_routine());
    }
    if (from.has_task_star()) {
      set_task_star(from.task_star());
    }
    if (from.has_fast_finish_rate()) {
      set_fast_finish_rate(from.fast_finish_rate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_routine_index()) {
      set_routine_index(from.routine_index());
    }
    if (from.has_routine_total()) {
      set_routine_total(from.routine_total());
    }
    if (from.has_is_routine()) {
      set_is_routine(from.is_routine());
    }
    if (from.has_offer_routine_info()) {
      mutable_offer_routine_info()->::ProtoThreeObj::MergeFrom(from.offer_routine_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoTaskInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoTaskInfo::CopyFrom(const ProtoTaskInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoTaskInfo::IsInitialized() const {
  
  return true;
}

void ProtoTaskInfo::Swap(ProtoTaskInfo* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(type_, other->type_);
    std::swap(status_, other->status_);
    cond_list_.Swap(&other->cond_list_);
    std::swap(routine_dice_, other->routine_dice_);
    std::swap(is_first_routine_, other->is_first_routine_);
    std::swap(task_star_, other->task_star_);
    std::swap(fast_finish_rate_, other->fast_finish_rate_);
    std::swap(routine_index_, other->routine_index_);
    std::swap(routine_total_, other->routine_total_);
    std::swap(is_routine_, other->is_routine_);
    std::swap(offer_routine_info_, other->offer_routine_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoTaskInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoTaskInfo_descriptor_;
  metadata.reflection = ProtoTaskInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoFriendInfo::kRoleIdFieldNumber;
const int ProtoFriendInfo::kIconIdFieldNumber;
const int ProtoFriendInfo::kLeagueIdFieldNumber;
const int ProtoFriendInfo::kLeagueNameFieldNumber;
const int ProtoFriendInfo::kFriendTypeFieldNumber;
const int ProtoFriendInfo::kVipStatusFieldNumber;
const int ProtoFriendInfo::kIsOnlineFieldNumber;
const int ProtoFriendInfo::kSexFieldNumber;
const int ProtoFriendInfo::kCareerFieldNumber;
const int ProtoFriendInfo::kLevelFieldNumber;
const int ProtoFriendInfo::kTeamStatusFieldNumber;
const int ProtoFriendInfo::kNameFieldNumber;
const int ProtoFriendInfo::kIntimacyFieldNumber;
const int ProtoFriendInfo::kForceFieldNumber;
const int ProtoFriendInfo::kSceneIdFieldNumber;
const int ProtoFriendInfo::kDistanceFieldNumber;
const int ProtoFriendInfo::kPixelXFieldNumber;
const int ProtoFriendInfo::kPixelYFieldNumber;
const int ProtoFriendInfo::kNameColorFieldNumber;
const int ProtoFriendInfo::kIsGiveStrengthFieldNumber;
#endif  // !_MSC_VER

ProtoFriendInfo::ProtoFriendInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoFriendInfo::InitAsDefaultInstance() {
}

ProtoFriendInfo::ProtoFriendInfo(const ProtoFriendInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoFriendInfo::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  icon_id_ = GOOGLE_LONGLONG(0);
  league_id_ = GOOGLE_LONGLONG(0);
  league_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  friend_type_ = 0;
  vip_status_ = 0;
  is_online_ = 0;
  sex_ = 0;
  career_ = 0;
  level_ = 0;
  team_status_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  intimacy_ = 0;
  force_ = 0;
  scene_id_ = 0;
  distance_ = 0;
  pixel_x_ = 0;
  pixel_y_ = 0;
  name_color_ = 0;
  is_give_strength_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoFriendInfo::~ProtoFriendInfo() {
  SharedDtor();
}

void ProtoFriendInfo::SharedDtor() {
  if (league_name_ != &::google::protobuf::internal::kEmptyString) {
    delete league_name_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoFriendInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoFriendInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoFriendInfo_descriptor_;
}

const ProtoFriendInfo& ProtoFriendInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoFriendInfo* ProtoFriendInfo::default_instance_ = NULL;

ProtoFriendInfo* ProtoFriendInfo::New() const {
  return new ProtoFriendInfo;
}

void ProtoFriendInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_LONGLONG(0);
    icon_id_ = GOOGLE_LONGLONG(0);
    league_id_ = GOOGLE_LONGLONG(0);
    if (has_league_name()) {
      if (league_name_ != &::google::protobuf::internal::kEmptyString) {
        league_name_->clear();
      }
    }
    friend_type_ = 0;
    vip_status_ = 0;
    is_online_ = 0;
    sex_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    career_ = 0;
    level_ = 0;
    team_status_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    intimacy_ = 0;
    force_ = 0;
    scene_id_ = 0;
    distance_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    pixel_x_ = 0;
    pixel_y_ = 0;
    name_color_ = 0;
    is_give_strength_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoFriendInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_icon_id;
        break;
      }
      
      // optional int64 icon_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_icon_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &icon_id_)));
          set_has_icon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_league_id;
        break;
      }
      
      // optional int64 league_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_league_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &league_id_)));
          set_has_league_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_league_name;
        break;
      }
      
      // optional string league_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_league_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_league_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->league_name().data(), this->league_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_friend_type;
        break;
      }
      
      // optional int32 friend_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friend_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friend_type_)));
          set_has_friend_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_vip_status;
        break;
      }
      
      // optional int32 vip_status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_status_)));
          set_has_vip_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_online;
        break;
      }
      
      // optional int32 is_online = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_online_)));
          set_has_is_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_sex;
        break;
      }
      
      // optional int32 sex = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_career;
        break;
      }
      
      // optional int32 career = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_career:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &career_)));
          set_has_career();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_level;
        break;
      }
      
      // optional int32 level = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_team_status;
        break;
      }
      
      // optional int32 team_status = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_status_)));
          set_has_team_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_name;
        break;
      }
      
      // optional string name = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_intimacy;
        break;
      }
      
      // optional int32 intimacy = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intimacy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intimacy_)));
          set_has_intimacy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_force;
        break;
      }
      
      // optional int32 force = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &force_)));
          set_has_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_scene_id;
        break;
      }
      
      // optional int32 scene_id = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_distance;
        break;
      }
      
      // optional int32 distance = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_pixel_x;
        break;
      }
      
      // optional int32 pixel_x = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pixel_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pixel_x_)));
          set_has_pixel_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_pixel_y;
        break;
      }
      
      // optional int32 pixel_y = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pixel_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pixel_y_)));
          set_has_pixel_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_name_color;
        break;
      }
      
      // optional int32 name_color = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_name_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &name_color_)));
          set_has_name_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_is_give_strength;
        break;
      }
      
      // optional int32 is_give_strength = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_give_strength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_give_strength_)));
          set_has_is_give_strength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoFriendInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_id(), output);
  }
  
  // optional int64 icon_id = 2;
  if (has_icon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->icon_id(), output);
  }
  
  // optional int64 league_id = 3;
  if (has_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->league_id(), output);
  }
  
  // optional string league_name = 4;
  if (has_league_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->league_name().data(), this->league_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->league_name(), output);
  }
  
  // optional int32 friend_type = 5;
  if (has_friend_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->friend_type(), output);
  }
  
  // optional int32 vip_status = 6;
  if (has_vip_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->vip_status(), output);
  }
  
  // optional int32 is_online = 7;
  if (has_is_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->is_online(), output);
  }
  
  // optional int32 sex = 8;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->sex(), output);
  }
  
  // optional int32 career = 9;
  if (has_career()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->career(), output);
  }
  
  // optional int32 level = 10;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->level(), output);
  }
  
  // optional int32 team_status = 11;
  if (has_team_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->team_status(), output);
  }
  
  // optional string name = 12;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->name(), output);
  }
  
  // optional int32 intimacy = 13;
  if (has_intimacy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->intimacy(), output);
  }
  
  // optional int32 force = 14;
  if (has_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->force(), output);
  }
  
  // optional int32 scene_id = 15;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->scene_id(), output);
  }
  
  // optional int32 distance = 16;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->distance(), output);
  }
  
  // optional int32 pixel_x = 17;
  if (has_pixel_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->pixel_x(), output);
  }
  
  // optional int32 pixel_y = 18;
  if (has_pixel_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->pixel_y(), output);
  }
  
  // optional int32 name_color = 19;
  if (has_name_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->name_color(), output);
  }
  
  // optional int32 is_give_strength = 20;
  if (has_is_give_strength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->is_give_strength(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoFriendInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_id(), target);
  }
  
  // optional int64 icon_id = 2;
  if (has_icon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->icon_id(), target);
  }
  
  // optional int64 league_id = 3;
  if (has_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->league_id(), target);
  }
  
  // optional string league_name = 4;
  if (has_league_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->league_name().data(), this->league_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->league_name(), target);
  }
  
  // optional int32 friend_type = 5;
  if (has_friend_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->friend_type(), target);
  }
  
  // optional int32 vip_status = 6;
  if (has_vip_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->vip_status(), target);
  }
  
  // optional int32 is_online = 7;
  if (has_is_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->is_online(), target);
  }
  
  // optional int32 sex = 8;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->sex(), target);
  }
  
  // optional int32 career = 9;
  if (has_career()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->career(), target);
  }
  
  // optional int32 level = 10;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->level(), target);
  }
  
  // optional int32 team_status = 11;
  if (has_team_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->team_status(), target);
  }
  
  // optional string name = 12;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->name(), target);
  }
  
  // optional int32 intimacy = 13;
  if (has_intimacy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->intimacy(), target);
  }
  
  // optional int32 force = 14;
  if (has_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->force(), target);
  }
  
  // optional int32 scene_id = 15;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->scene_id(), target);
  }
  
  // optional int32 distance = 16;
  if (has_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->distance(), target);
  }
  
  // optional int32 pixel_x = 17;
  if (has_pixel_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->pixel_x(), target);
  }
  
  // optional int32 pixel_y = 18;
  if (has_pixel_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->pixel_y(), target);
  }
  
  // optional int32 name_color = 19;
  if (has_name_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->name_color(), target);
  }
  
  // optional int32 is_give_strength = 20;
  if (has_is_give_strength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->is_give_strength(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoFriendInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional int64 icon_id = 2;
    if (has_icon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->icon_id());
    }
    
    // optional int64 league_id = 3;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->league_id());
    }
    
    // optional string league_name = 4;
    if (has_league_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->league_name());
    }
    
    // optional int32 friend_type = 5;
    if (has_friend_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friend_type());
    }
    
    // optional int32 vip_status = 6;
    if (has_vip_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_status());
    }
    
    // optional int32 is_online = 7;
    if (has_is_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_online());
    }
    
    // optional int32 sex = 8;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 career = 9;
    if (has_career()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->career());
    }
    
    // optional int32 level = 10;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 team_status = 11;
    if (has_team_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_status());
    }
    
    // optional string name = 12;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 intimacy = 13;
    if (has_intimacy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->intimacy());
    }
    
    // optional int32 force = 14;
    if (has_force()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->force());
    }
    
    // optional int32 scene_id = 15;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_id());
    }
    
    // optional int32 distance = 16;
    if (has_distance()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->distance());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 pixel_x = 17;
    if (has_pixel_x()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pixel_x());
    }
    
    // optional int32 pixel_y = 18;
    if (has_pixel_y()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pixel_y());
    }
    
    // optional int32 name_color = 19;
    if (has_name_color()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->name_color());
    }
    
    // optional int32 is_give_strength = 20;
    if (has_is_give_strength()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_give_strength());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoFriendInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoFriendInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoFriendInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoFriendInfo::MergeFrom(const ProtoFriendInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_icon_id()) {
      set_icon_id(from.icon_id());
    }
    if (from.has_league_id()) {
      set_league_id(from.league_id());
    }
    if (from.has_league_name()) {
      set_league_name(from.league_name());
    }
    if (from.has_friend_type()) {
      set_friend_type(from.friend_type());
    }
    if (from.has_vip_status()) {
      set_vip_status(from.vip_status());
    }
    if (from.has_is_online()) {
      set_is_online(from.is_online());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_career()) {
      set_career(from.career());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_team_status()) {
      set_team_status(from.team_status());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_intimacy()) {
      set_intimacy(from.intimacy());
    }
    if (from.has_force()) {
      set_force(from.force());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_distance()) {
      set_distance(from.distance());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_pixel_x()) {
      set_pixel_x(from.pixel_x());
    }
    if (from.has_pixel_y()) {
      set_pixel_y(from.pixel_y());
    }
    if (from.has_name_color()) {
      set_name_color(from.name_color());
    }
    if (from.has_is_give_strength()) {
      set_is_give_strength(from.is_give_strength());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoFriendInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoFriendInfo::CopyFrom(const ProtoFriendInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoFriendInfo::IsInitialized() const {
  
  return true;
}

void ProtoFriendInfo::Swap(ProtoFriendInfo* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(icon_id_, other->icon_id_);
    std::swap(league_id_, other->league_id_);
    std::swap(league_name_, other->league_name_);
    std::swap(friend_type_, other->friend_type_);
    std::swap(vip_status_, other->vip_status_);
    std::swap(is_online_, other->is_online_);
    std::swap(sex_, other->sex_);
    std::swap(career_, other->career_);
    std::swap(level_, other->level_);
    std::swap(team_status_, other->team_status_);
    std::swap(name_, other->name_);
    std::swap(intimacy_, other->intimacy_);
    std::swap(force_, other->force_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(distance_, other->distance_);
    std::swap(pixel_x_, other->pixel_x_);
    std::swap(pixel_y_, other->pixel_y_);
    std::swap(name_color_, other->name_color_);
    std::swap(is_give_strength_, other->is_give_strength_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoFriendInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoFriendInfo_descriptor_;
  metadata.reflection = ProtoFriendInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoSkillTarget::kTargetIdFieldNumber;
const int ProtoSkillTarget::kIsDeathFieldNumber;
#endif  // !_MSC_VER

ProtoSkillTarget::ProtoSkillTarget()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoSkillTarget::InitAsDefaultInstance() {
}

ProtoSkillTarget::ProtoSkillTarget(const ProtoSkillTarget& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoSkillTarget::SharedCtor() {
  _cached_size_ = 0;
  target_id_ = GOOGLE_LONGLONG(0);
  is_death_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoSkillTarget::~ProtoSkillTarget() {
  SharedDtor();
}

void ProtoSkillTarget::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoSkillTarget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoSkillTarget::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoSkillTarget_descriptor_;
}

const ProtoSkillTarget& ProtoSkillTarget::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoSkillTarget* ProtoSkillTarget::default_instance_ = NULL;

ProtoSkillTarget* ProtoSkillTarget::New() const {
  return new ProtoSkillTarget;
}

void ProtoSkillTarget::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    target_id_ = GOOGLE_LONGLONG(0);
    is_death_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoSkillTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 target_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &target_id_)));
          set_has_target_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_death;
        break;
      }
      
      // optional int32 is_death = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_death:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_death_)));
          set_has_is_death();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoSkillTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 target_id = 1;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->target_id(), output);
  }
  
  // optional int32 is_death = 2;
  if (has_is_death()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->is_death(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoSkillTarget::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 target_id = 1;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->target_id(), target);
  }
  
  // optional int32 is_death = 2;
  if (has_is_death()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->is_death(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoSkillTarget::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 target_id = 1;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->target_id());
    }
    
    // optional int32 is_death = 2;
    if (has_is_death()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_death());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoSkillTarget::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoSkillTarget* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoSkillTarget*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoSkillTarget::MergeFrom(const ProtoSkillTarget& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target_id()) {
      set_target_id(from.target_id());
    }
    if (from.has_is_death()) {
      set_is_death(from.is_death());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoSkillTarget::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoSkillTarget::CopyFrom(const ProtoSkillTarget& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoSkillTarget::IsInitialized() const {
  
  return true;
}

void ProtoSkillTarget::Swap(ProtoSkillTarget* other) {
  if (other != this) {
    std::swap(target_id_, other->target_id_);
    std::swap(is_death_, other->is_death_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoSkillTarget::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoSkillTarget_descriptor_;
  metadata.reflection = ProtoSkillTarget_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoFightInfo::kTypeFieldNumber;
const int ProtoFightInfo::kValueFieldNumber;
const int ProtoFightInfo::kAttackorIdFieldNumber;
const int ProtoFightInfo::kSkillIdFieldNumber;
const int ProtoFightInfo::kTips1FieldNumber;
const int ProtoFightInfo::kTips2FieldNumber;
const int ProtoFightInfo::kTips3FieldNumber;
const int ProtoFightInfo::kTips4FieldNumber;
const int ProtoFightInfo::kExperienceFieldNumber;
#endif  // !_MSC_VER

ProtoFightInfo::ProtoFightInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoFightInfo::InitAsDefaultInstance() {
}

ProtoFightInfo::ProtoFightInfo(const ProtoFightInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoFightInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  attackor_id_ = GOOGLE_LONGLONG(0);
  skill_id_ = 0;
  tips1_ = 0;
  tips2_ = 0;
  tips3_ = 0;
  tips4_ = 0;
  experience_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoFightInfo::~ProtoFightInfo() {
  SharedDtor();
}

void ProtoFightInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoFightInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoFightInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoFightInfo_descriptor_;
}

const ProtoFightInfo& ProtoFightInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoFightInfo* ProtoFightInfo::default_instance_ = NULL;

ProtoFightInfo* ProtoFightInfo::New() const {
  return new ProtoFightInfo;
}

void ProtoFightInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
    attackor_id_ = GOOGLE_LONGLONG(0);
    skill_id_ = 0;
    tips1_ = 0;
    tips2_ = 0;
    tips3_ = 0;
    tips4_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    experience_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoFightInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }
      
      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_attackor_id;
        break;
      }
      
      // optional int64 attackor_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attackor_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &attackor_id_)));
          set_has_attackor_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_skill_id;
        break;
      }
      
      // optional int32 skill_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_tips1;
        break;
      }
      
      // optional int32 tips1 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tips1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tips1_)));
          set_has_tips1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_tips2;
        break;
      }
      
      // optional int32 tips2 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tips2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tips2_)));
          set_has_tips2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_tips3;
        break;
      }
      
      // optional int32 tips3 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tips3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tips3_)));
          set_has_tips3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_tips4;
        break;
      }
      
      // optional int32 tips4 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tips4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tips4_)));
          set_has_tips4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_experience;
        break;
      }
      
      // optional int64 experience = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_experience:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &experience_)));
          set_has_experience();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoFightInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }
  
  // optional int64 attackor_id = 3;
  if (has_attackor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->attackor_id(), output);
  }
  
  // optional int32 skill_id = 4;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->skill_id(), output);
  }
  
  // optional int32 tips1 = 5;
  if (has_tips1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->tips1(), output);
  }
  
  // optional int32 tips2 = 6;
  if (has_tips2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->tips2(), output);
  }
  
  // optional int32 tips3 = 7;
  if (has_tips3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->tips3(), output);
  }
  
  // optional int32 tips4 = 8;
  if (has_tips4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->tips4(), output);
  }
  
  // optional int64 experience = 9;
  if (has_experience()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->experience(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoFightInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }
  
  // optional int64 attackor_id = 3;
  if (has_attackor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->attackor_id(), target);
  }
  
  // optional int32 skill_id = 4;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->skill_id(), target);
  }
  
  // optional int32 tips1 = 5;
  if (has_tips1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->tips1(), target);
  }
  
  // optional int32 tips2 = 6;
  if (has_tips2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->tips2(), target);
  }
  
  // optional int32 tips3 = 7;
  if (has_tips3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->tips3(), target);
  }
  
  // optional int32 tips4 = 8;
  if (has_tips4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->tips4(), target);
  }
  
  // optional int64 experience = 9;
  if (has_experience()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->experience(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoFightInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
    // optional int64 attackor_id = 3;
    if (has_attackor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->attackor_id());
    }
    
    // optional int32 skill_id = 4;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }
    
    // optional int32 tips1 = 5;
    if (has_tips1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tips1());
    }
    
    // optional int32 tips2 = 6;
    if (has_tips2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tips2());
    }
    
    // optional int32 tips3 = 7;
    if (has_tips3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tips3());
    }
    
    // optional int32 tips4 = 8;
    if (has_tips4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tips4());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 experience = 9;
    if (has_experience()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->experience());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoFightInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoFightInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoFightInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoFightInfo::MergeFrom(const ProtoFightInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_attackor_id()) {
      set_attackor_id(from.attackor_id());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_tips1()) {
      set_tips1(from.tips1());
    }
    if (from.has_tips2()) {
      set_tips2(from.tips2());
    }
    if (from.has_tips3()) {
      set_tips3(from.tips3());
    }
    if (from.has_tips4()) {
      set_tips4(from.tips4());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_experience()) {
      set_experience(from.experience());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoFightInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoFightInfo::CopyFrom(const ProtoFightInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoFightInfo::IsInitialized() const {
  
  return true;
}

void ProtoFightInfo::Swap(ProtoFightInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(attackor_id_, other->attackor_id_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(tips1_, other->tips1_);
    std::swap(tips2_, other->tips2_);
    std::swap(tips3_, other->tips3_);
    std::swap(tips4_, other->tips4_);
    std::swap(experience_, other->experience_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoFightInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoFightInfo_descriptor_;
  metadata.reflection = ProtoFightInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoStatus::kStatusFieldNumber;
const int ProtoStatus::kViewStatusFieldNumber;
const int ProtoStatus::kValue1FieldNumber;
const int ProtoStatus::kValue2FieldNumber;
const int ProtoStatus::kValue3FieldNumber;
const int ProtoStatus::kLastTickFieldNumber;
const int ProtoStatus::kCoolTickFieldNumber;
const int ProtoStatus::kAttackorFieldNumber;
const int ProtoStatus::kValue6FieldNumber;
#endif  // !_MSC_VER

ProtoStatus::ProtoStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoStatus::InitAsDefaultInstance() {
}

ProtoStatus::ProtoStatus(const ProtoStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoStatus::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  view_status_ = 0;
  value1_ = 0;
  value2_ = 0;
  value3_ = 0;
  last_tick_ = 0;
  cool_tick_ = 0;
  attackor_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoStatus::~ProtoStatus() {
  SharedDtor();
}

void ProtoStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoStatus_descriptor_;
}

const ProtoStatus& ProtoStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoStatus* ProtoStatus::default_instance_ = NULL;

ProtoStatus* ProtoStatus::New() const {
  return new ProtoStatus;
}

void ProtoStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
    view_status_ = 0;
    value1_ = 0;
    value2_ = 0;
    value3_ = 0;
    last_tick_ = 0;
    cool_tick_ = 0;
    attackor_ = GOOGLE_LONGLONG(0);
  }
  value6_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_view_status;
        break;
      }
      
      // optional int32 view_status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_view_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &view_status_)));
          set_has_view_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value1;
        break;
      }
      
      // optional int32 value1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value1_)));
          set_has_value1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_value2;
        break;
      }
      
      // optional int32 value2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value2_)));
          set_has_value2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_value3;
        break;
      }
      
      // optional int32 value3 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value3_)));
          set_has_value3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_last_tick;
        break;
      }
      
      // optional int32 last_tick = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_tick_)));
          set_has_last_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cool_tick;
        break;
      }
      
      // optional int32 cool_tick = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cool_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cool_tick_)));
          set_has_cool_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_attackor;
        break;
      }
      
      // optional int64 attackor = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attackor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &attackor_)));
          set_has_attackor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_value6;
        break;
      }
      
      // repeated int32 value6 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_value6())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_value6())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_value6;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }
  
  // optional int32 view_status = 2;
  if (has_view_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->view_status(), output);
  }
  
  // optional int32 value1 = 3;
  if (has_value1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->value1(), output);
  }
  
  // optional int32 value2 = 4;
  if (has_value2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->value2(), output);
  }
  
  // optional int32 value3 = 5;
  if (has_value3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->value3(), output);
  }
  
  // optional int32 last_tick = 6;
  if (has_last_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->last_tick(), output);
  }
  
  // optional int32 cool_tick = 7;
  if (has_cool_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->cool_tick(), output);
  }
  
  // optional int64 attackor = 8;
  if (has_attackor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->attackor(), output);
  }
  
  // repeated int32 value6 = 9;
  for (int i = 0; i < this->value6_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->value6(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }
  
  // optional int32 view_status = 2;
  if (has_view_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->view_status(), target);
  }
  
  // optional int32 value1 = 3;
  if (has_value1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->value1(), target);
  }
  
  // optional int32 value2 = 4;
  if (has_value2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->value2(), target);
  }
  
  // optional int32 value3 = 5;
  if (has_value3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->value3(), target);
  }
  
  // optional int32 last_tick = 6;
  if (has_last_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->last_tick(), target);
  }
  
  // optional int32 cool_tick = 7;
  if (has_cool_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->cool_tick(), target);
  }
  
  // optional int64 attackor = 8;
  if (has_attackor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->attackor(), target);
  }
  
  // repeated int32 value6 = 9;
  for (int i = 0; i < this->value6_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->value6(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // optional int32 view_status = 2;
    if (has_view_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->view_status());
    }
    
    // optional int32 value1 = 3;
    if (has_value1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value1());
    }
    
    // optional int32 value2 = 4;
    if (has_value2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value2());
    }
    
    // optional int32 value3 = 5;
    if (has_value3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value3());
    }
    
    // optional int32 last_tick = 6;
    if (has_last_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_tick());
    }
    
    // optional int32 cool_tick = 7;
    if (has_cool_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cool_tick());
    }
    
    // optional int64 attackor = 8;
    if (has_attackor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->attackor());
    }
    
  }
  // repeated int32 value6 = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->value6_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->value6(i));
    }
    total_size += 1 * this->value6_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoStatus::MergeFrom(const ProtoStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  value6_.MergeFrom(from.value6_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_view_status()) {
      set_view_status(from.view_status());
    }
    if (from.has_value1()) {
      set_value1(from.value1());
    }
    if (from.has_value2()) {
      set_value2(from.value2());
    }
    if (from.has_value3()) {
      set_value3(from.value3());
    }
    if (from.has_last_tick()) {
      set_last_tick(from.last_tick());
    }
    if (from.has_cool_tick()) {
      set_cool_tick(from.cool_tick());
    }
    if (from.has_attackor()) {
      set_attackor(from.attackor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoStatus::CopyFrom(const ProtoStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoStatus::IsInitialized() const {
  
  return true;
}

void ProtoStatus::Swap(ProtoStatus* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(view_status_, other->view_status_);
    std::swap(value1_, other->value1_);
    std::swap(value2_, other->value2_);
    std::swap(value3_, other->value3_);
    std::swap(last_tick_, other->last_tick_);
    std::swap(cool_tick_, other->cool_tick_);
    std::swap(attackor_, other->attackor_);
    value6_.Swap(&other->value6_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoStatus_descriptor_;
  metadata.reflection = ProtoStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoMarketItem::kMarketIndexFieldNumber;
const int ProtoMarketItem::kItemIdFieldNumber;
const int ProtoMarketItem::kItemAmountFieldNumber;
const int ProtoMarketItem::kMoneyTypeFieldNumber;
const int ProtoMarketItem::kPriceFieldNumber;
const int ProtoMarketItem::kLeftTimeFieldNumber;
const int ProtoMarketItem::kEquipFieldNumber;
#endif  // !_MSC_VER

ProtoMarketItem::ProtoMarketItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoMarketItem::InitAsDefaultInstance() {
  equip_ = const_cast< ::ProtoEquip*>(&::ProtoEquip::default_instance());
}

ProtoMarketItem::ProtoMarketItem(const ProtoMarketItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoMarketItem::SharedCtor() {
  _cached_size_ = 0;
  market_index_ = 0;
  item_id_ = 0;
  item_amount_ = 0;
  money_type_ = 0;
  price_ = 0;
  left_time_ = 0;
  equip_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoMarketItem::~ProtoMarketItem() {
  SharedDtor();
}

void ProtoMarketItem::SharedDtor() {
  if (this != default_instance_) {
    delete equip_;
  }
}

void ProtoMarketItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoMarketItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoMarketItem_descriptor_;
}

const ProtoMarketItem& ProtoMarketItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoMarketItem* ProtoMarketItem::default_instance_ = NULL;

ProtoMarketItem* ProtoMarketItem::New() const {
  return new ProtoMarketItem;
}

void ProtoMarketItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    market_index_ = 0;
    item_id_ = 0;
    item_amount_ = 0;
    money_type_ = 0;
    price_ = 0;
    left_time_ = 0;
    if (has_equip()) {
      if (equip_ != NULL) equip_->::ProtoEquip::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoMarketItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 market_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &market_index_)));
          set_has_market_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }
      
      // optional int32 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_amount;
        break;
      }
      
      // optional int32 item_amount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_amount_)));
          set_has_item_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_money_type;
        break;
      }
      
      // optional int32 money_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_type_)));
          set_has_money_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_price;
        break;
      }
      
      // optional int32 price = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_left_time;
        break;
      }
      
      // optional int32 left_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_time_)));
          set_has_left_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_equip;
        break;
      }
      
      // optional .ProtoEquip equip = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoMarketItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 market_index = 1;
  if (has_market_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->market_index(), output);
  }
  
  // optional int32 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_id(), output);
  }
  
  // optional int32 item_amount = 3;
  if (has_item_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->item_amount(), output);
  }
  
  // optional int32 money_type = 4;
  if (has_money_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->money_type(), output);
  }
  
  // optional int32 price = 5;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->price(), output);
  }
  
  // optional int32 left_time = 6;
  if (has_left_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->left_time(), output);
  }
  
  // optional .ProtoEquip equip = 7;
  if (has_equip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->equip(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoMarketItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 market_index = 1;
  if (has_market_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->market_index(), target);
  }
  
  // optional int32 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_id(), target);
  }
  
  // optional int32 item_amount = 3;
  if (has_item_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->item_amount(), target);
  }
  
  // optional int32 money_type = 4;
  if (has_money_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->money_type(), target);
  }
  
  // optional int32 price = 5;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->price(), target);
  }
  
  // optional int32 left_time = 6;
  if (has_left_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->left_time(), target);
  }
  
  // optional .ProtoEquip equip = 7;
  if (has_equip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->equip(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoMarketItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 market_index = 1;
    if (has_market_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->market_index());
    }
    
    // optional int32 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }
    
    // optional int32 item_amount = 3;
    if (has_item_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_amount());
    }
    
    // optional int32 money_type = 4;
    if (has_money_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money_type());
    }
    
    // optional int32 price = 5;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }
    
    // optional int32 left_time = 6;
    if (has_left_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_time());
    }
    
    // optional .ProtoEquip equip = 7;
    if (has_equip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoMarketItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoMarketItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoMarketItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoMarketItem::MergeFrom(const ProtoMarketItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_market_index()) {
      set_market_index(from.market_index());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_amount()) {
      set_item_amount(from.item_amount());
    }
    if (from.has_money_type()) {
      set_money_type(from.money_type());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_left_time()) {
      set_left_time(from.left_time());
    }
    if (from.has_equip()) {
      mutable_equip()->::ProtoEquip::MergeFrom(from.equip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoMarketItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMarketItem::CopyFrom(const ProtoMarketItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMarketItem::IsInitialized() const {
  
  return true;
}

void ProtoMarketItem::Swap(ProtoMarketItem* other) {
  if (other != this) {
    std::swap(market_index_, other->market_index_);
    std::swap(item_id_, other->item_id_);
    std::swap(item_amount_, other->item_amount_);
    std::swap(money_type_, other->money_type_);
    std::swap(price_, other->price_);
    std::swap(left_time_, other->left_time_);
    std::swap(equip_, other->equip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoMarketItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoMarketItem_descriptor_;
  metadata.reflection = ProtoMarketItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoSellOut::kIndexFieldNumber;
const int ProtoSellOut::kItemIdFieldNumber;
const int ProtoSellOut::kItemBindFieldNumber;
const int ProtoSellOut::kItemAmountFieldNumber;
#endif  // !_MSC_VER

ProtoSellOut::ProtoSellOut()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoSellOut::InitAsDefaultInstance() {
}

ProtoSellOut::ProtoSellOut(const ProtoSellOut& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoSellOut::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  item_id_ = 0;
  item_bind_ = 0;
  item_amount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoSellOut::~ProtoSellOut() {
  SharedDtor();
}

void ProtoSellOut::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoSellOut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoSellOut::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoSellOut_descriptor_;
}

const ProtoSellOut& ProtoSellOut::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoSellOut* ProtoSellOut::default_instance_ = NULL;

ProtoSellOut* ProtoSellOut::New() const {
  return new ProtoSellOut;
}

void ProtoSellOut::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    item_id_ = 0;
    item_bind_ = 0;
    item_amount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoSellOut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }
      
      // optional int32 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_bind;
        break;
      }
      
      // optional int32 item_bind = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_bind_)));
          set_has_item_bind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item_amount;
        break;
      }
      
      // optional int32 item_amount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_amount_)));
          set_has_item_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoSellOut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }
  
  // optional int32 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_id(), output);
  }
  
  // optional int32 item_bind = 3;
  if (has_item_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->item_bind(), output);
  }
  
  // optional int32 item_amount = 4;
  if (has_item_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->item_amount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoSellOut::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }
  
  // optional int32 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_id(), target);
  }
  
  // optional int32 item_bind = 3;
  if (has_item_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->item_bind(), target);
  }
  
  // optional int32 item_amount = 4;
  if (has_item_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->item_amount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoSellOut::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional int32 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }
    
    // optional int32 item_bind = 3;
    if (has_item_bind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_bind());
    }
    
    // optional int32 item_amount = 4;
    if (has_item_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_amount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoSellOut::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoSellOut* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoSellOut*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoSellOut::MergeFrom(const ProtoSellOut& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_bind()) {
      set_item_bind(from.item_bind());
    }
    if (from.has_item_amount()) {
      set_item_amount(from.item_amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoSellOut::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoSellOut::CopyFrom(const ProtoSellOut& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoSellOut::IsInitialized() const {
  
  return true;
}

void ProtoSellOut::Swap(ProtoSellOut* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(item_id_, other->item_id_);
    std::swap(item_bind_, other->item_bind_);
    std::swap(item_amount_, other->item_amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoSellOut::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoSellOut_descriptor_;
  metadata.reflection = ProtoSellOut_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoMailInfo::kMailIdFieldNumber;
const int ProtoMailInfo::kMailTypeFieldNumber;
const int ProtoMailInfo::kMailTimeFieldNumber;
const int ProtoMailInfo::kHasReadFieldNumber;
const int ProtoMailInfo::kRoleNameFieldNumber;
const int ProtoMailInfo::kMailTitleFieldNumber;
const int ProtoMailInfo::kHasAttachFieldNumber;
const int ProtoMailInfo::kLeftMinuteFieldNumber;
const int ProtoMailInfo::kMailReadTickFieldNumber;
const int ProtoMailInfo::kSenderIdFieldNumber;
const int ProtoMailInfo::kSenderNameFieldNumber;
const int ProtoMailInfo::kReceiverIdFieldNumber;
const int ProtoMailInfo::kReceiverNameFieldNumber;
const int ProtoMailInfo::kMailContentFieldNumber;
const int ProtoMailInfo::kAttachListFieldNumber;
const int ProtoMailInfo::kAttachMoneyFieldNumber;
const int ProtoMailInfo::kLabelFieldNumber;
const int ProtoMailInfo::kExploitFieldNumber;
const int ProtoMailInfo::kFormatFieldNumber;
const int ProtoMailInfo::kSenderVipFieldNumber;
const int ProtoMailInfo::kStScoreFieldNumber;
#endif  // !_MSC_VER

ProtoMailInfo::ProtoMailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoMailInfo::InitAsDefaultInstance() {
  attach_money_ = const_cast< ::ProtoMoney*>(&::ProtoMoney::default_instance());
}

ProtoMailInfo::ProtoMailInfo(const ProtoMailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoMailInfo::SharedCtor() {
  _cached_size_ = 0;
  mail_id_ = GOOGLE_LONGLONG(0);
  mail_type_ = 0;
  mail_time_ = GOOGLE_LONGLONG(0);
  has_read_ = 0;
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mail_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  has_attach_ = 0;
  left_minute_ = 0;
  mail_read_tick_ = GOOGLE_LONGLONG(0);
  sender_id_ = GOOGLE_LONGLONG(0);
  sender_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  receiver_id_ = GOOGLE_LONGLONG(0);
  receiver_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mail_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attach_money_ = NULL;
  label_ = 0;
  exploit_ = 0;
  format_ = 0;
  sender_vip_ = 0;
  st_score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoMailInfo::~ProtoMailInfo() {
  SharedDtor();
}

void ProtoMailInfo::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (mail_title_ != &::google::protobuf::internal::kEmptyString) {
    delete mail_title_;
  }
  if (sender_name_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_name_;
  }
  if (receiver_name_ != &::google::protobuf::internal::kEmptyString) {
    delete receiver_name_;
  }
  if (mail_content_ != &::google::protobuf::internal::kEmptyString) {
    delete mail_content_;
  }
  if (this != default_instance_) {
    delete attach_money_;
  }
}

void ProtoMailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoMailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoMailInfo_descriptor_;
}

const ProtoMailInfo& ProtoMailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoMailInfo* ProtoMailInfo::default_instance_ = NULL;

ProtoMailInfo* ProtoMailInfo::New() const {
  return new ProtoMailInfo;
}

void ProtoMailInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mail_id_ = GOOGLE_LONGLONG(0);
    mail_type_ = 0;
    mail_time_ = GOOGLE_LONGLONG(0);
    has_read_ = 0;
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    if (has_mail_title()) {
      if (mail_title_ != &::google::protobuf::internal::kEmptyString) {
        mail_title_->clear();
      }
    }
    has_attach_ = 0;
    left_minute_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    mail_read_tick_ = GOOGLE_LONGLONG(0);
    sender_id_ = GOOGLE_LONGLONG(0);
    if (has_sender_name()) {
      if (sender_name_ != &::google::protobuf::internal::kEmptyString) {
        sender_name_->clear();
      }
    }
    receiver_id_ = GOOGLE_LONGLONG(0);
    if (has_receiver_name()) {
      if (receiver_name_ != &::google::protobuf::internal::kEmptyString) {
        receiver_name_->clear();
      }
    }
    if (has_mail_content()) {
      if (mail_content_ != &::google::protobuf::internal::kEmptyString) {
        mail_content_->clear();
      }
    }
    if (has_attach_money()) {
      if (attach_money_ != NULL) attach_money_->::ProtoMoney::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    label_ = 0;
    exploit_ = 0;
    format_ = 0;
    sender_vip_ = 0;
    st_score_ = 0;
  }
  attach_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoMailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 mail_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mail_id_)));
          set_has_mail_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_type;
        break;
      }
      
      // optional int32 mail_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mail_type_)));
          set_has_mail_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mail_time;
        break;
      }
      
      // optional int64 mail_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mail_time_)));
          set_has_mail_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_has_read;
        break;
      }
      
      // optional int32 has_read = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_read:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &has_read_)));
          set_has_has_read();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_role_name;
        break;
      }
      
      // optional string role_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_mail_title;
        break;
      }
      
      // optional string mail_title = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mail_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mail_title().data(), this->mail_title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_has_attach;
        break;
      }
      
      // optional int32 has_attach = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_attach:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &has_attach_)));
          set_has_has_attach();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_left_minute;
        break;
      }
      
      // optional int32 left_minute = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_minute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_minute_)));
          set_has_left_minute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_mail_read_tick;
        break;
      }
      
      // optional int64 mail_read_tick = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_read_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mail_read_tick_)));
          set_has_mail_read_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_sender_id;
        break;
      }
      
      // optional int64 sender_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sender_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sender_id_)));
          set_has_sender_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_sender_name;
        break;
      }
      
      // optional string sender_name = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sender_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sender_name().data(), this->sender_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_receiver_id;
        break;
      }
      
      // optional int64 receiver_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receiver_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &receiver_id_)));
          set_has_receiver_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_receiver_name;
        break;
      }
      
      // optional string receiver_name = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_receiver_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receiver_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->receiver_name().data(), this->receiver_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_mail_content;
        break;
      }
      
      // optional string mail_content = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mail_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mail_content().data(), this->mail_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_attach_list;
        break;
      }
      
      // repeated .ProtoItem attach_list = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attach_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attach_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_attach_list;
        if (input->ExpectTag(130)) goto parse_attach_money;
        break;
      }
      
      // optional .ProtoMoney attach_money = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attach_money:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attach_money()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_label;
        break;
      }
      
      // optional int32 label = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_label:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &label_)));
          set_has_label();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_exploit;
        break;
      }
      
      // optional int32 exploit = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exploit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exploit_)));
          set_has_exploit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_format;
        break;
      }
      
      // optional int32 format = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_format:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &format_)));
          set_has_format();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_sender_vip;
        break;
      }
      
      // optional int32 sender_vip = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sender_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_vip_)));
          set_has_sender_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_st_score;
        break;
      }
      
      // optional int32 st_score = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_st_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &st_score_)));
          set_has_st_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoMailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 mail_id = 1;
  if (has_mail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->mail_id(), output);
  }
  
  // optional int32 mail_type = 2;
  if (has_mail_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mail_type(), output);
  }
  
  // optional int64 mail_time = 3;
  if (has_mail_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->mail_time(), output);
  }
  
  // optional int32 has_read = 4;
  if (has_has_read()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->has_read(), output);
  }
  
  // optional string role_name = 5;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->role_name(), output);
  }
  
  // optional string mail_title = 6;
  if (has_mail_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mail_title().data(), this->mail_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->mail_title(), output);
  }
  
  // optional int32 has_attach = 7;
  if (has_has_attach()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->has_attach(), output);
  }
  
  // optional int32 left_minute = 8;
  if (has_left_minute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->left_minute(), output);
  }
  
  // optional int64 mail_read_tick = 9;
  if (has_mail_read_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->mail_read_tick(), output);
  }
  
  // optional int64 sender_id = 10;
  if (has_sender_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->sender_id(), output);
  }
  
  // optional string sender_name = 11;
  if (has_sender_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender_name().data(), this->sender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->sender_name(), output);
  }
  
  // optional int64 receiver_id = 12;
  if (has_receiver_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->receiver_id(), output);
  }
  
  // optional string receiver_name = 13;
  if (has_receiver_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receiver_name().data(), this->receiver_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->receiver_name(), output);
  }
  
  // optional string mail_content = 14;
  if (has_mail_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mail_content().data(), this->mail_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->mail_content(), output);
  }
  
  // repeated .ProtoItem attach_list = 15;
  for (int i = 0; i < this->attach_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->attach_list(i), output);
  }
  
  // optional .ProtoMoney attach_money = 16;
  if (has_attach_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->attach_money(), output);
  }
  
  // optional int32 label = 17;
  if (has_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->label(), output);
  }
  
  // optional int32 exploit = 18;
  if (has_exploit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->exploit(), output);
  }
  
  // optional int32 format = 19;
  if (has_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->format(), output);
  }
  
  // optional int32 sender_vip = 20;
  if (has_sender_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->sender_vip(), output);
  }
  
  // optional int32 st_score = 21;
  if (has_st_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->st_score(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoMailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 mail_id = 1;
  if (has_mail_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->mail_id(), target);
  }
  
  // optional int32 mail_type = 2;
  if (has_mail_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mail_type(), target);
  }
  
  // optional int64 mail_time = 3;
  if (has_mail_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->mail_time(), target);
  }
  
  // optional int32 has_read = 4;
  if (has_has_read()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->has_read(), target);
  }
  
  // optional string role_name = 5;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->role_name(), target);
  }
  
  // optional string mail_title = 6;
  if (has_mail_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mail_title().data(), this->mail_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->mail_title(), target);
  }
  
  // optional int32 has_attach = 7;
  if (has_has_attach()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->has_attach(), target);
  }
  
  // optional int32 left_minute = 8;
  if (has_left_minute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->left_minute(), target);
  }
  
  // optional int64 mail_read_tick = 9;
  if (has_mail_read_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->mail_read_tick(), target);
  }
  
  // optional int64 sender_id = 10;
  if (has_sender_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->sender_id(), target);
  }
  
  // optional string sender_name = 11;
  if (has_sender_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender_name().data(), this->sender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->sender_name(), target);
  }
  
  // optional int64 receiver_id = 12;
  if (has_receiver_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->receiver_id(), target);
  }
  
  // optional string receiver_name = 13;
  if (has_receiver_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receiver_name().data(), this->receiver_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->receiver_name(), target);
  }
  
  // optional string mail_content = 14;
  if (has_mail_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mail_content().data(), this->mail_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->mail_content(), target);
  }
  
  // repeated .ProtoItem attach_list = 15;
  for (int i = 0; i < this->attach_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->attach_list(i), target);
  }
  
  // optional .ProtoMoney attach_money = 16;
  if (has_attach_money()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->attach_money(), target);
  }
  
  // optional int32 label = 17;
  if (has_label()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->label(), target);
  }
  
  // optional int32 exploit = 18;
  if (has_exploit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->exploit(), target);
  }
  
  // optional int32 format = 19;
  if (has_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->format(), target);
  }
  
  // optional int32 sender_vip = 20;
  if (has_sender_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->sender_vip(), target);
  }
  
  // optional int32 st_score = 21;
  if (has_st_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->st_score(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoMailInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 mail_id = 1;
    if (has_mail_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mail_id());
    }
    
    // optional int32 mail_type = 2;
    if (has_mail_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mail_type());
    }
    
    // optional int64 mail_time = 3;
    if (has_mail_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mail_time());
    }
    
    // optional int32 has_read = 4;
    if (has_has_read()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->has_read());
    }
    
    // optional string role_name = 5;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }
    
    // optional string mail_title = 6;
    if (has_mail_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mail_title());
    }
    
    // optional int32 has_attach = 7;
    if (has_has_attach()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->has_attach());
    }
    
    // optional int32 left_minute = 8;
    if (has_left_minute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_minute());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 mail_read_tick = 9;
    if (has_mail_read_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mail_read_tick());
    }
    
    // optional int64 sender_id = 10;
    if (has_sender_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sender_id());
    }
    
    // optional string sender_name = 11;
    if (has_sender_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender_name());
    }
    
    // optional int64 receiver_id = 12;
    if (has_receiver_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->receiver_id());
    }
    
    // optional string receiver_name = 13;
    if (has_receiver_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->receiver_name());
    }
    
    // optional string mail_content = 14;
    if (has_mail_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mail_content());
    }
    
    // optional .ProtoMoney attach_money = 16;
    if (has_attach_money()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attach_money());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 label = 17;
    if (has_label()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->label());
    }
    
    // optional int32 exploit = 18;
    if (has_exploit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exploit());
    }
    
    // optional int32 format = 19;
    if (has_format()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->format());
    }
    
    // optional int32 sender_vip = 20;
    if (has_sender_vip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sender_vip());
    }
    
    // optional int32 st_score = 21;
    if (has_st_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->st_score());
    }
    
  }
  // repeated .ProtoItem attach_list = 15;
  total_size += 1 * this->attach_list_size();
  for (int i = 0; i < this->attach_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attach_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoMailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoMailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoMailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoMailInfo::MergeFrom(const ProtoMailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  attach_list_.MergeFrom(from.attach_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mail_id()) {
      set_mail_id(from.mail_id());
    }
    if (from.has_mail_type()) {
      set_mail_type(from.mail_type());
    }
    if (from.has_mail_time()) {
      set_mail_time(from.mail_time());
    }
    if (from.has_has_read()) {
      set_has_read(from.has_read());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_mail_title()) {
      set_mail_title(from.mail_title());
    }
    if (from.has_has_attach()) {
      set_has_attach(from.has_attach());
    }
    if (from.has_left_minute()) {
      set_left_minute(from.left_minute());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mail_read_tick()) {
      set_mail_read_tick(from.mail_read_tick());
    }
    if (from.has_sender_id()) {
      set_sender_id(from.sender_id());
    }
    if (from.has_sender_name()) {
      set_sender_name(from.sender_name());
    }
    if (from.has_receiver_id()) {
      set_receiver_id(from.receiver_id());
    }
    if (from.has_receiver_name()) {
      set_receiver_name(from.receiver_name());
    }
    if (from.has_mail_content()) {
      set_mail_content(from.mail_content());
    }
    if (from.has_attach_money()) {
      mutable_attach_money()->::ProtoMoney::MergeFrom(from.attach_money());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_label()) {
      set_label(from.label());
    }
    if (from.has_exploit()) {
      set_exploit(from.exploit());
    }
    if (from.has_format()) {
      set_format(from.format());
    }
    if (from.has_sender_vip()) {
      set_sender_vip(from.sender_vip());
    }
    if (from.has_st_score()) {
      set_st_score(from.st_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoMailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMailInfo::CopyFrom(const ProtoMailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMailInfo::IsInitialized() const {
  
  return true;
}

void ProtoMailInfo::Swap(ProtoMailInfo* other) {
  if (other != this) {
    std::swap(mail_id_, other->mail_id_);
    std::swap(mail_type_, other->mail_type_);
    std::swap(mail_time_, other->mail_time_);
    std::swap(has_read_, other->has_read_);
    std::swap(role_name_, other->role_name_);
    std::swap(mail_title_, other->mail_title_);
    std::swap(has_attach_, other->has_attach_);
    std::swap(left_minute_, other->left_minute_);
    std::swap(mail_read_tick_, other->mail_read_tick_);
    std::swap(sender_id_, other->sender_id_);
    std::swap(sender_name_, other->sender_name_);
    std::swap(receiver_id_, other->receiver_id_);
    std::swap(receiver_name_, other->receiver_name_);
    std::swap(mail_content_, other->mail_content_);
    attach_list_.Swap(&other->attach_list_);
    std::swap(attach_money_, other->attach_money_);
    std::swap(label_, other->label_);
    std::swap(exploit_, other->exploit_);
    std::swap(format_, other->format_);
    std::swap(sender_vip_, other->sender_vip_);
    std::swap(st_score_, other->st_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoMailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoMailInfo_descriptor_;
  metadata.reflection = ProtoMailInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailAttach::kMailIndexFieldNumber;
const int MailAttach::kPackIndexFieldNumber;
const int MailAttach::kPackAmountFieldNumber;
#endif  // !_MSC_VER

MailAttach::MailAttach()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailAttach::InitAsDefaultInstance() {
}

MailAttach::MailAttach(const MailAttach& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailAttach::SharedCtor() {
  _cached_size_ = 0;
  mail_index_ = 0;
  pack_index_ = 0;
  pack_amount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailAttach::~MailAttach() {
  SharedDtor();
}

void MailAttach::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MailAttach::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailAttach::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailAttach_descriptor_;
}

const MailAttach& MailAttach::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

MailAttach* MailAttach::default_instance_ = NULL;

MailAttach* MailAttach::New() const {
  return new MailAttach;
}

void MailAttach::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mail_index_ = 0;
    pack_index_ = 0;
    pack_amount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailAttach::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mail_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mail_index_)));
          set_has_mail_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pack_index;
        break;
      }
      
      // optional int32 pack_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pack_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pack_index_)));
          set_has_pack_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pack_amount;
        break;
      }
      
      // optional int32 pack_amount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pack_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pack_amount_)));
          set_has_pack_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailAttach::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 mail_index = 1;
  if (has_mail_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mail_index(), output);
  }
  
  // optional int32 pack_index = 2;
  if (has_pack_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pack_index(), output);
  }
  
  // optional int32 pack_amount = 3;
  if (has_pack_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pack_amount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailAttach::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 mail_index = 1;
  if (has_mail_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mail_index(), target);
  }
  
  // optional int32 pack_index = 2;
  if (has_pack_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pack_index(), target);
  }
  
  // optional int32 pack_amount = 3;
  if (has_pack_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pack_amount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailAttach::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 mail_index = 1;
    if (has_mail_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mail_index());
    }
    
    // optional int32 pack_index = 2;
    if (has_pack_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pack_index());
    }
    
    // optional int32 pack_amount = 3;
    if (has_pack_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pack_amount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailAttach::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailAttach* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailAttach*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailAttach::MergeFrom(const MailAttach& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mail_index()) {
      set_mail_index(from.mail_index());
    }
    if (from.has_pack_index()) {
      set_pack_index(from.pack_index());
    }
    if (from.has_pack_amount()) {
      set_pack_amount(from.pack_amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailAttach::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailAttach::CopyFrom(const MailAttach& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailAttach::IsInitialized() const {
  
  return true;
}

void MailAttach::Swap(MailAttach* other) {
  if (other != this) {
    std::swap(mail_index_, other->mail_index_);
    std::swap(pack_index_, other->pack_index_);
    std::swap(pack_amount_, other->pack_amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailAttach::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailAttach_descriptor_;
  metadata.reflection = MailAttach_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoShopItem::kItemPosFieldNumber;
const int ProtoShopItem::kItemIdFieldNumber;
const int ProtoShopItem::kItemTypeFieldNumber;
const int ProtoShopItem::kBindStatusFieldNumber;
const int ProtoShopItem::kMoneyTypeFieldNumber;
const int ProtoShopItem::kCurMoneyFieldNumber;
const int ProtoShopItem::kNeedItemFieldNumber;
const int ProtoShopItem::kAiScriptScoreFieldNumber;
const int ProtoShopItem::kExploitFieldNumber;
const int ProtoShopItem::kBuyedAmountFieldNumber;
const int ProtoShopItem::kTotalAmountFieldNumber;
const int ProtoShopItem::kReputationFieldNumber;
#endif  // !_MSC_VER

ProtoShopItem::ProtoShopItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoShopItem::InitAsDefaultInstance() {
}

ProtoShopItem::ProtoShopItem(const ProtoShopItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoShopItem::SharedCtor() {
  _cached_size_ = 0;
  item_pos_ = 0;
  item_id_ = 0;
  item_type_ = 0;
  bind_status_ = 0;
  money_type_ = 0;
  cur_money_ = 0;
  ai_script_score_ = 0;
  exploit_ = 0;
  buyed_amount_ = 0;
  total_amount_ = 0;
  reputation_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoShopItem::~ProtoShopItem() {
  SharedDtor();
}

void ProtoShopItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoShopItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoShopItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoShopItem_descriptor_;
}

const ProtoShopItem& ProtoShopItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoShopItem* ProtoShopItem::default_instance_ = NULL;

ProtoShopItem* ProtoShopItem::New() const {
  return new ProtoShopItem;
}

void ProtoShopItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_pos_ = 0;
    item_id_ = 0;
    item_type_ = 0;
    bind_status_ = 0;
    money_type_ = 0;
    cur_money_ = 0;
    ai_script_score_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    exploit_ = 0;
    buyed_amount_ = 0;
    total_amount_ = 0;
    reputation_ = 0;
  }
  need_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoShopItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 item_pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_pos_)));
          set_has_item_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }
      
      // optional int32 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_type;
        break;
      }
      
      // optional int32 item_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_type_)));
          set_has_item_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bind_status;
        break;
      }
      
      // optional int32 bind_status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bind_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bind_status_)));
          set_has_bind_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_money_type;
        break;
      }
      
      // optional int32 money_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_type_)));
          set_has_money_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cur_money;
        break;
      }
      
      // optional int32 cur_money = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_money_)));
          set_has_cur_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_need_item;
        break;
      }
      
      // repeated .ProtoPairObj need_item = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_need_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_need_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_need_item;
        if (input->ExpectTag(64)) goto parse_ai_script_score;
        break;
      }
      
      // optional int32 ai_script_score = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ai_script_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ai_script_score_)));
          set_has_ai_script_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_exploit;
        break;
      }
      
      // optional int32 exploit = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exploit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exploit_)));
          set_has_exploit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_buyed_amount;
        break;
      }
      
      // optional int32 buyed_amount = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyed_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buyed_amount_)));
          set_has_buyed_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_total_amount;
        break;
      }
      
      // optional int32 total_amount = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_amount_)));
          set_has_total_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_reputation;
        break;
      }
      
      // optional int32 reputation = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reputation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reputation_)));
          set_has_reputation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoShopItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 item_pos = 1;
  if (has_item_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_pos(), output);
  }
  
  // optional int32 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_id(), output);
  }
  
  // optional int32 item_type = 3;
  if (has_item_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->item_type(), output);
  }
  
  // optional int32 bind_status = 4;
  if (has_bind_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bind_status(), output);
  }
  
  // optional int32 money_type = 5;
  if (has_money_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->money_type(), output);
  }
  
  // optional int32 cur_money = 6;
  if (has_cur_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cur_money(), output);
  }
  
  // repeated .ProtoPairObj need_item = 7;
  for (int i = 0; i < this->need_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->need_item(i), output);
  }
  
  // optional int32 ai_script_score = 8;
  if (has_ai_script_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->ai_script_score(), output);
  }
  
  // optional int32 exploit = 9;
  if (has_exploit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->exploit(), output);
  }
  
  // optional int32 buyed_amount = 10;
  if (has_buyed_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->buyed_amount(), output);
  }
  
  // optional int32 total_amount = 11;
  if (has_total_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->total_amount(), output);
  }
  
  // optional int32 reputation = 12;
  if (has_reputation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->reputation(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoShopItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 item_pos = 1;
  if (has_item_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_pos(), target);
  }
  
  // optional int32 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_id(), target);
  }
  
  // optional int32 item_type = 3;
  if (has_item_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->item_type(), target);
  }
  
  // optional int32 bind_status = 4;
  if (has_bind_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bind_status(), target);
  }
  
  // optional int32 money_type = 5;
  if (has_money_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->money_type(), target);
  }
  
  // optional int32 cur_money = 6;
  if (has_cur_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cur_money(), target);
  }
  
  // repeated .ProtoPairObj need_item = 7;
  for (int i = 0; i < this->need_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->need_item(i), target);
  }
  
  // optional int32 ai_script_score = 8;
  if (has_ai_script_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->ai_script_score(), target);
  }
  
  // optional int32 exploit = 9;
  if (has_exploit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->exploit(), target);
  }
  
  // optional int32 buyed_amount = 10;
  if (has_buyed_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->buyed_amount(), target);
  }
  
  // optional int32 total_amount = 11;
  if (has_total_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->total_amount(), target);
  }
  
  // optional int32 reputation = 12;
  if (has_reputation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->reputation(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoShopItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 item_pos = 1;
    if (has_item_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_pos());
    }
    
    // optional int32 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }
    
    // optional int32 item_type = 3;
    if (has_item_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_type());
    }
    
    // optional int32 bind_status = 4;
    if (has_bind_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bind_status());
    }
    
    // optional int32 money_type = 5;
    if (has_money_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money_type());
    }
    
    // optional int32 cur_money = 6;
    if (has_cur_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_money());
    }
    
    // optional int32 ai_script_score = 8;
    if (has_ai_script_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ai_script_score());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 exploit = 9;
    if (has_exploit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exploit());
    }
    
    // optional int32 buyed_amount = 10;
    if (has_buyed_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buyed_amount());
    }
    
    // optional int32 total_amount = 11;
    if (has_total_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_amount());
    }
    
    // optional int32 reputation = 12;
    if (has_reputation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reputation());
    }
    
  }
  // repeated .ProtoPairObj need_item = 7;
  total_size += 1 * this->need_item_size();
  for (int i = 0; i < this->need_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->need_item(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoShopItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoShopItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoShopItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoShopItem::MergeFrom(const ProtoShopItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  need_item_.MergeFrom(from.need_item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_pos()) {
      set_item_pos(from.item_pos());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_type()) {
      set_item_type(from.item_type());
    }
    if (from.has_bind_status()) {
      set_bind_status(from.bind_status());
    }
    if (from.has_money_type()) {
      set_money_type(from.money_type());
    }
    if (from.has_cur_money()) {
      set_cur_money(from.cur_money());
    }
    if (from.has_ai_script_score()) {
      set_ai_script_score(from.ai_script_score());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_exploit()) {
      set_exploit(from.exploit());
    }
    if (from.has_buyed_amount()) {
      set_buyed_amount(from.buyed_amount());
    }
    if (from.has_total_amount()) {
      set_total_amount(from.total_amount());
    }
    if (from.has_reputation()) {
      set_reputation(from.reputation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoShopItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoShopItem::CopyFrom(const ProtoShopItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoShopItem::IsInitialized() const {
  
  return true;
}

void ProtoShopItem::Swap(ProtoShopItem* other) {
  if (other != this) {
    std::swap(item_pos_, other->item_pos_);
    std::swap(item_id_, other->item_id_);
    std::swap(item_type_, other->item_type_);
    std::swap(bind_status_, other->bind_status_);
    std::swap(money_type_, other->money_type_);
    std::swap(cur_money_, other->cur_money_);
    need_item_.Swap(&other->need_item_);
    std::swap(ai_script_score_, other->ai_script_score_);
    std::swap(exploit_, other->exploit_);
    std::swap(buyed_amount_, other->buyed_amount_);
    std::swap(total_amount_, other->total_amount_);
    std::swap(reputation_, other->reputation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoShopItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoShopItem_descriptor_;
  metadata.reflection = ProtoShopItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoPairObj::kObjIdFieldNumber;
const int ProtoPairObj::kObjValueFieldNumber;
#endif  // !_MSC_VER

ProtoPairObj::ProtoPairObj()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoPairObj::InitAsDefaultInstance() {
}

ProtoPairObj::ProtoPairObj(const ProtoPairObj& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoPairObj::SharedCtor() {
  _cached_size_ = 0;
  obj_id_ = 0;
  obj_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoPairObj::~ProtoPairObj() {
  SharedDtor();
}

void ProtoPairObj::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoPairObj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoPairObj::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoPairObj_descriptor_;
}

const ProtoPairObj& ProtoPairObj::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoPairObj* ProtoPairObj::default_instance_ = NULL;

ProtoPairObj* ProtoPairObj::New() const {
  return new ProtoPairObj;
}

void ProtoPairObj::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    obj_id_ = 0;
    obj_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoPairObj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 obj_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obj_id_)));
          set_has_obj_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_obj_value;
        break;
      }
      
      // optional int32 obj_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_obj_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obj_value_)));
          set_has_obj_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoPairObj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 obj_id = 1;
  if (has_obj_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->obj_id(), output);
  }
  
  // optional int32 obj_value = 2;
  if (has_obj_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->obj_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoPairObj::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 obj_id = 1;
  if (has_obj_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->obj_id(), target);
  }
  
  // optional int32 obj_value = 2;
  if (has_obj_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->obj_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoPairObj::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 obj_id = 1;
    if (has_obj_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obj_id());
    }
    
    // optional int32 obj_value = 2;
    if (has_obj_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obj_value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoPairObj::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoPairObj* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoPairObj*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoPairObj::MergeFrom(const ProtoPairObj& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_obj_id()) {
      set_obj_id(from.obj_id());
    }
    if (from.has_obj_value()) {
      set_obj_value(from.obj_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoPairObj::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoPairObj::CopyFrom(const ProtoPairObj& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoPairObj::IsInitialized() const {
  
  return true;
}

void ProtoPairObj::Swap(ProtoPairObj* other) {
  if (other != this) {
    std::swap(obj_id_, other->obj_id_);
    std::swap(obj_value_, other->obj_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoPairObj::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoPairObj_descriptor_;
  metadata.reflection = ProtoPairObj_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoBaseBeastInfo::kBeastIdFieldNumber;
const int ProtoBaseBeastInfo::kBeastSortFieldNumber;
const int ProtoBaseBeastInfo::kBeastGrowthFieldNumber;
const int ProtoBaseBeastInfo::kBeastNameFieldNumber;
const int ProtoBaseBeastInfo::kActionStateFieldNumber;
const int ProtoBaseBeastInfo::kBeastForceFieldNumber;
const int ProtoBaseBeastInfo::kAbilityFieldNumber;
const int ProtoBaseBeastInfo::kGuardFieldNumber;
#endif  // !_MSC_VER

ProtoBaseBeastInfo::ProtoBaseBeastInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoBaseBeastInfo::InitAsDefaultInstance() {
}

ProtoBaseBeastInfo::ProtoBaseBeastInfo(const ProtoBaseBeastInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoBaseBeastInfo::SharedCtor() {
  _cached_size_ = 0;
  beast_id_ = GOOGLE_LONGLONG(0);
  beast_sort_ = 0;
  beast_growth_ = 0;
  beast_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  action_state_ = 0;
  beast_force_ = 0;
  ability_ = 0;
  guard_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoBaseBeastInfo::~ProtoBaseBeastInfo() {
  SharedDtor();
}

void ProtoBaseBeastInfo::SharedDtor() {
  if (beast_name_ != &::google::protobuf::internal::kEmptyString) {
    delete beast_name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoBaseBeastInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoBaseBeastInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoBaseBeastInfo_descriptor_;
}

const ProtoBaseBeastInfo& ProtoBaseBeastInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoBaseBeastInfo* ProtoBaseBeastInfo::default_instance_ = NULL;

ProtoBaseBeastInfo* ProtoBaseBeastInfo::New() const {
  return new ProtoBaseBeastInfo;
}

void ProtoBaseBeastInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    beast_id_ = GOOGLE_LONGLONG(0);
    beast_sort_ = 0;
    beast_growth_ = 0;
    if (has_beast_name()) {
      if (beast_name_ != &::google::protobuf::internal::kEmptyString) {
        beast_name_->clear();
      }
    }
    action_state_ = 0;
    beast_force_ = 0;
    ability_ = 0;
    guard_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoBaseBeastInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 beast_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &beast_id_)));
          set_has_beast_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_beast_sort;
        break;
      }
      
      // optional int32 beast_sort = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beast_sort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beast_sort_)));
          set_has_beast_sort();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_beast_growth;
        break;
      }
      
      // optional int32 beast_growth = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beast_growth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beast_growth_)));
          set_has_beast_growth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_beast_name;
        break;
      }
      
      // optional string beast_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beast_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_beast_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->beast_name().data(), this->beast_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_action_state;
        break;
      }
      
      // optional int32 action_state = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_state_)));
          set_has_action_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_beast_force;
        break;
      }
      
      // optional int32 beast_force = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beast_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beast_force_)));
          set_has_beast_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ability;
        break;
      }
      
      // optional int32 ability = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ability_)));
          set_has_ability();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_guard;
        break;
      }
      
      // optional int32 guard = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guard_)));
          set_has_guard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoBaseBeastInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 beast_id = 1;
  if (has_beast_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->beast_id(), output);
  }
  
  // optional int32 beast_sort = 2;
  if (has_beast_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->beast_sort(), output);
  }
  
  // optional int32 beast_growth = 3;
  if (has_beast_growth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->beast_growth(), output);
  }
  
  // optional string beast_name = 4;
  if (has_beast_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beast_name().data(), this->beast_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->beast_name(), output);
  }
  
  // optional int32 action_state = 5;
  if (has_action_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->action_state(), output);
  }
  
  // optional int32 beast_force = 6;
  if (has_beast_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->beast_force(), output);
  }
  
  // optional int32 ability = 7;
  if (has_ability()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ability(), output);
  }
  
  // optional int32 guard = 8;
  if (has_guard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->guard(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoBaseBeastInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 beast_id = 1;
  if (has_beast_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->beast_id(), target);
  }
  
  // optional int32 beast_sort = 2;
  if (has_beast_sort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->beast_sort(), target);
  }
  
  // optional int32 beast_growth = 3;
  if (has_beast_growth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->beast_growth(), target);
  }
  
  // optional string beast_name = 4;
  if (has_beast_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beast_name().data(), this->beast_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->beast_name(), target);
  }
  
  // optional int32 action_state = 5;
  if (has_action_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->action_state(), target);
  }
  
  // optional int32 beast_force = 6;
  if (has_beast_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->beast_force(), target);
  }
  
  // optional int32 ability = 7;
  if (has_ability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ability(), target);
  }
  
  // optional int32 guard = 8;
  if (has_guard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->guard(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoBaseBeastInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 beast_id = 1;
    if (has_beast_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->beast_id());
    }
    
    // optional int32 beast_sort = 2;
    if (has_beast_sort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->beast_sort());
    }
    
    // optional int32 beast_growth = 3;
    if (has_beast_growth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->beast_growth());
    }
    
    // optional string beast_name = 4;
    if (has_beast_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->beast_name());
    }
    
    // optional int32 action_state = 5;
    if (has_action_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action_state());
    }
    
    // optional int32 beast_force = 6;
    if (has_beast_force()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->beast_force());
    }
    
    // optional int32 ability = 7;
    if (has_ability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ability());
    }
    
    // optional int32 guard = 8;
    if (has_guard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guard());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoBaseBeastInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoBaseBeastInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoBaseBeastInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoBaseBeastInfo::MergeFrom(const ProtoBaseBeastInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_beast_id()) {
      set_beast_id(from.beast_id());
    }
    if (from.has_beast_sort()) {
      set_beast_sort(from.beast_sort());
    }
    if (from.has_beast_growth()) {
      set_beast_growth(from.beast_growth());
    }
    if (from.has_beast_name()) {
      set_beast_name(from.beast_name());
    }
    if (from.has_action_state()) {
      set_action_state(from.action_state());
    }
    if (from.has_beast_force()) {
      set_beast_force(from.beast_force());
    }
    if (from.has_ability()) {
      set_ability(from.ability());
    }
    if (from.has_guard()) {
      set_guard(from.guard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoBaseBeastInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoBaseBeastInfo::CopyFrom(const ProtoBaseBeastInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoBaseBeastInfo::IsInitialized() const {
  
  return true;
}

void ProtoBaseBeastInfo::Swap(ProtoBaseBeastInfo* other) {
  if (other != this) {
    std::swap(beast_id_, other->beast_id_);
    std::swap(beast_sort_, other->beast_sort_);
    std::swap(beast_growth_, other->beast_growth_);
    std::swap(beast_name_, other->beast_name_);
    std::swap(action_state_, other->action_state_);
    std::swap(beast_force_, other->beast_force_);
    std::swap(ability_, other->ability_);
    std::swap(guard_, other->guard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoBaseBeastInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoBaseBeastInfo_descriptor_;
  metadata.reflection = ProtoBaseBeastInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoBeastSkill::kSkillIdFieldNumber;
const int ProtoBeastSkill::kSkillLevelFieldNumber;
const int ProtoBeastSkill::kCurExpFieldNumber;
const int ProtoBeastSkill::kCoolTimeFieldNumber;
const int ProtoBeastSkill::kSkillIndexFieldNumber;
const int ProtoBeastSkill::kLockStateFieldNumber;
const int ProtoBeastSkill::kQualityFieldNumber;
const int ProtoBeastSkill::kTransformFieldNumber;
const int ProtoBeastSkill::kTypeFieldNumber;
#endif  // !_MSC_VER

ProtoBeastSkill::ProtoBeastSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoBeastSkill::InitAsDefaultInstance() {
}

ProtoBeastSkill::ProtoBeastSkill(const ProtoBeastSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoBeastSkill::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = 0;
  skill_level_ = 0;
  cur_exp_ = 0;
  cool_time_ = 0;
  skill_index_ = 0;
  lock_state_ = 0;
  quality_ = 0;
  transform_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoBeastSkill::~ProtoBeastSkill() {
  SharedDtor();
}

void ProtoBeastSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoBeastSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoBeastSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoBeastSkill_descriptor_;
}

const ProtoBeastSkill& ProtoBeastSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoBeastSkill* ProtoBeastSkill::default_instance_ = NULL;

ProtoBeastSkill* ProtoBeastSkill::New() const {
  return new ProtoBeastSkill;
}

void ProtoBeastSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = 0;
    skill_level_ = 0;
    cur_exp_ = 0;
    cool_time_ = 0;
    skill_index_ = 0;
    lock_state_ = 0;
    quality_ = 0;
    transform_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoBeastSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_level;
        break;
      }
      
      // optional int32 skill_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_level_)));
          set_has_skill_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_exp;
        break;
      }
      
      // optional int32 cur_exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_exp_)));
          set_has_cur_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cool_time;
        break;
      }
      
      // optional int32 cool_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cool_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cool_time_)));
          set_has_cool_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_skill_index;
        break;
      }
      
      // optional int32 skill_index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_index_)));
          set_has_skill_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lock_state;
        break;
      }
      
      // optional int32 lock_state = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lock_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lock_state_)));
          set_has_lock_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_quality;
        break;
      }
      
      // optional int32 quality = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_transform;
        break;
      }
      
      // optional int32 transform = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transform_)));
          set_has_transform();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_type;
        break;
      }
      
      // optional int32 type = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoBeastSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skill_id(), output);
  }
  
  // optional int32 skill_level = 2;
  if (has_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skill_level(), output);
  }
  
  // optional int32 cur_exp = 3;
  if (has_cur_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cur_exp(), output);
  }
  
  // optional int32 cool_time = 4;
  if (has_cool_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cool_time(), output);
  }
  
  // optional int32 skill_index = 5;
  if (has_skill_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->skill_index(), output);
  }
  
  // optional int32 lock_state = 6;
  if (has_lock_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lock_state(), output);
  }
  
  // optional int32 quality = 7;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->quality(), output);
  }
  
  // optional int32 transform = 8;
  if (has_transform()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->transform(), output);
  }
  
  // optional int32 type = 9;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoBeastSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skill_id(), target);
  }
  
  // optional int32 skill_level = 2;
  if (has_skill_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skill_level(), target);
  }
  
  // optional int32 cur_exp = 3;
  if (has_cur_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cur_exp(), target);
  }
  
  // optional int32 cool_time = 4;
  if (has_cool_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cool_time(), target);
  }
  
  // optional int32 skill_index = 5;
  if (has_skill_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->skill_index(), target);
  }
  
  // optional int32 lock_state = 6;
  if (has_lock_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lock_state(), target);
  }
  
  // optional int32 quality = 7;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->quality(), target);
  }
  
  // optional int32 transform = 8;
  if (has_transform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->transform(), target);
  }
  
  // optional int32 type = 9;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoBeastSkill::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }
    
    // optional int32 skill_level = 2;
    if (has_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_level());
    }
    
    // optional int32 cur_exp = 3;
    if (has_cur_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_exp());
    }
    
    // optional int32 cool_time = 4;
    if (has_cool_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cool_time());
    }
    
    // optional int32 skill_index = 5;
    if (has_skill_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_index());
    }
    
    // optional int32 lock_state = 6;
    if (has_lock_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lock_state());
    }
    
    // optional int32 quality = 7;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }
    
    // optional int32 transform = 8;
    if (has_transform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transform());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 type = 9;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoBeastSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoBeastSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoBeastSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoBeastSkill::MergeFrom(const ProtoBeastSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_skill_level()) {
      set_skill_level(from.skill_level());
    }
    if (from.has_cur_exp()) {
      set_cur_exp(from.cur_exp());
    }
    if (from.has_cool_time()) {
      set_cool_time(from.cool_time());
    }
    if (from.has_skill_index()) {
      set_skill_index(from.skill_index());
    }
    if (from.has_lock_state()) {
      set_lock_state(from.lock_state());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_transform()) {
      set_transform(from.transform());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoBeastSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoBeastSkill::CopyFrom(const ProtoBeastSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoBeastSkill::IsInitialized() const {
  
  return true;
}

void ProtoBeastSkill::Swap(ProtoBeastSkill* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(skill_level_, other->skill_level_);
    std::swap(cur_exp_, other->cur_exp_);
    std::swap(cool_time_, other->cool_time_);
    std::swap(skill_index_, other->skill_index_);
    std::swap(lock_state_, other->lock_state_);
    std::swap(quality_, other->quality_);
    std::swap(transform_, other->transform_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoBeastSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoBeastSkill_descriptor_;
  metadata.reflection = ProtoBeastSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoMagicalRecord::kAttrTypeFieldNumber;
const int ProtoMagicalRecord::kIsLockedFieldNumber;
const int ProtoMagicalRecord::kIndexFieldNumber;
const int ProtoMagicalRecord::kColorFieldNumber;
const int ProtoMagicalRecord::kValueFieldNumber;
const int ProtoMagicalRecord::kMaxValueFieldNumber;
#endif  // !_MSC_VER

ProtoMagicalRecord::ProtoMagicalRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoMagicalRecord::InitAsDefaultInstance() {
}

ProtoMagicalRecord::ProtoMagicalRecord(const ProtoMagicalRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoMagicalRecord::SharedCtor() {
  _cached_size_ = 0;
  attr_type_ = 0;
  is_locked_ = 0;
  index_ = 0;
  color_ = 0;
  value_ = 0;
  max_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoMagicalRecord::~ProtoMagicalRecord() {
  SharedDtor();
}

void ProtoMagicalRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoMagicalRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoMagicalRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoMagicalRecord_descriptor_;
}

const ProtoMagicalRecord& ProtoMagicalRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoMagicalRecord* ProtoMagicalRecord::default_instance_ = NULL;

ProtoMagicalRecord* ProtoMagicalRecord::New() const {
  return new ProtoMagicalRecord;
}

void ProtoMagicalRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attr_type_ = 0;
    is_locked_ = 0;
    index_ = 0;
    color_ = 0;
    value_ = 0;
    max_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoMagicalRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 attr_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attr_type_)));
          set_has_attr_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_locked;
        break;
      }
      
      // optional int32 is_locked = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_locked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_locked_)));
          set_has_is_locked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }
      
      // optional int32 index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_color;
        break;
      }
      
      // optional int32 color = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_value;
        break;
      }
      
      // optional int32 value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_max_value;
        break;
      }
      
      // optional int32 max_value = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_value_)));
          set_has_max_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoMagicalRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 attr_type = 1;
  if (has_attr_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->attr_type(), output);
  }
  
  // optional int32 is_locked = 2;
  if (has_is_locked()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->is_locked(), output);
  }
  
  // optional int32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index(), output);
  }
  
  // optional int32 color = 4;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->color(), output);
  }
  
  // optional int32 value = 5;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->value(), output);
  }
  
  // optional int32 max_value = 6;
  if (has_max_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->max_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoMagicalRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 attr_type = 1;
  if (has_attr_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->attr_type(), target);
  }
  
  // optional int32 is_locked = 2;
  if (has_is_locked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->is_locked(), target);
  }
  
  // optional int32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index(), target);
  }
  
  // optional int32 color = 4;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->color(), target);
  }
  
  // optional int32 value = 5;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->value(), target);
  }
  
  // optional int32 max_value = 6;
  if (has_max_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->max_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoMagicalRecord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 attr_type = 1;
    if (has_attr_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attr_type());
    }
    
    // optional int32 is_locked = 2;
    if (has_is_locked()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_locked());
    }
    
    // optional int32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional int32 color = 4;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }
    
    // optional int32 value = 5;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
    // optional int32 max_value = 6;
    if (has_max_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoMagicalRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoMagicalRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoMagicalRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoMagicalRecord::MergeFrom(const ProtoMagicalRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attr_type()) {
      set_attr_type(from.attr_type());
    }
    if (from.has_is_locked()) {
      set_is_locked(from.is_locked());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_max_value()) {
      set_max_value(from.max_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoMagicalRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMagicalRecord::CopyFrom(const ProtoMagicalRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMagicalRecord::IsInitialized() const {
  
  return true;
}

void ProtoMagicalRecord::Swap(ProtoMagicalRecord* other) {
  if (other != this) {
    std::swap(attr_type_, other->attr_type_);
    std::swap(is_locked_, other->is_locked_);
    std::swap(index_, other->index_);
    std::swap(color_, other->color_);
    std::swap(value_, other->value_);
    std::swap(max_value_, other->max_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoMagicalRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoMagicalRecord_descriptor_;
  metadata.reflection = ProtoMagicalRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoMagicalInfo::kMagicalListFieldNumber;
#endif  // !_MSC_VER

ProtoMagicalInfo::ProtoMagicalInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoMagicalInfo::InitAsDefaultInstance() {
}

ProtoMagicalInfo::ProtoMagicalInfo(const ProtoMagicalInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoMagicalInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoMagicalInfo::~ProtoMagicalInfo() {
  SharedDtor();
}

void ProtoMagicalInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoMagicalInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoMagicalInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoMagicalInfo_descriptor_;
}

const ProtoMagicalInfo& ProtoMagicalInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoMagicalInfo* ProtoMagicalInfo::default_instance_ = NULL;

ProtoMagicalInfo* ProtoMagicalInfo::New() const {
  return new ProtoMagicalInfo;
}

void ProtoMagicalInfo::Clear() {
  magical_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoMagicalInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoMagicalRecord magical_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_magical_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_magical_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_magical_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoMagicalInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoMagicalRecord magical_list = 1;
  for (int i = 0; i < this->magical_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->magical_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoMagicalInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoMagicalRecord magical_list = 1;
  for (int i = 0; i < this->magical_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->magical_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoMagicalInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated .ProtoMagicalRecord magical_list = 1;
  total_size += 1 * this->magical_list_size();
  for (int i = 0; i < this->magical_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->magical_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoMagicalInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoMagicalInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoMagicalInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoMagicalInfo::MergeFrom(const ProtoMagicalInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  magical_list_.MergeFrom(from.magical_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoMagicalInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMagicalInfo::CopyFrom(const ProtoMagicalInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMagicalInfo::IsInitialized() const {
  
  return true;
}

void ProtoMagicalInfo::Swap(ProtoMagicalInfo* other) {
  if (other != this) {
    magical_list_.Swap(&other->magical_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoMagicalInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoMagicalInfo_descriptor_;
  metadata.reflection = ProtoMagicalInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoSkillCombine::kCombineFlagFieldNumber;
const int ProtoSkillCombine::kFromIndexFieldNumber;
const int ProtoSkillCombine::kToIndexFieldNumber;
const int ProtoSkillCombine::kCombineSkillFieldNumber;
const int ProtoSkillCombine::kCombinedSkillFieldNumber;
const int ProtoSkillCombine::kCombinedExpFieldNumber;
#endif  // !_MSC_VER

ProtoSkillCombine::ProtoSkillCombine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoSkillCombine::InitAsDefaultInstance() {
}

ProtoSkillCombine::ProtoSkillCombine(const ProtoSkillCombine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoSkillCombine::SharedCtor() {
  _cached_size_ = 0;
  combine_flag_ = 0;
  from_index_ = 0;
  to_index_ = 0;
  combine_skill_ = 0;
  combined_skill_ = 0;
  combined_exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoSkillCombine::~ProtoSkillCombine() {
  SharedDtor();
}

void ProtoSkillCombine::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoSkillCombine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoSkillCombine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoSkillCombine_descriptor_;
}

const ProtoSkillCombine& ProtoSkillCombine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoSkillCombine* ProtoSkillCombine::default_instance_ = NULL;

ProtoSkillCombine* ProtoSkillCombine::New() const {
  return new ProtoSkillCombine;
}

void ProtoSkillCombine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    combine_flag_ = 0;
    from_index_ = 0;
    to_index_ = 0;
    combine_skill_ = 0;
    combined_skill_ = 0;
    combined_exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoSkillCombine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 combine_flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combine_flag_)));
          set_has_combine_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_from_index;
        break;
      }
      
      // optional int32 from_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_index_)));
          set_has_from_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_to_index;
        break;
      }
      
      // optional int32 to_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &to_index_)));
          set_has_to_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_combine_skill;
        break;
      }
      
      // optional int32 combine_skill = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combine_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combine_skill_)));
          set_has_combine_skill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_combined_skill;
        break;
      }
      
      // optional int32 combined_skill = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combined_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combined_skill_)));
          set_has_combined_skill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_combined_exp;
        break;
      }
      
      // optional int32 combined_exp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combined_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combined_exp_)));
          set_has_combined_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoSkillCombine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 combine_flag = 1;
  if (has_combine_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->combine_flag(), output);
  }
  
  // optional int32 from_index = 2;
  if (has_from_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->from_index(), output);
  }
  
  // optional int32 to_index = 3;
  if (has_to_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->to_index(), output);
  }
  
  // optional int32 combine_skill = 4;
  if (has_combine_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->combine_skill(), output);
  }
  
  // optional int32 combined_skill = 5;
  if (has_combined_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->combined_skill(), output);
  }
  
  // optional int32 combined_exp = 6;
  if (has_combined_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->combined_exp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoSkillCombine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 combine_flag = 1;
  if (has_combine_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->combine_flag(), target);
  }
  
  // optional int32 from_index = 2;
  if (has_from_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->from_index(), target);
  }
  
  // optional int32 to_index = 3;
  if (has_to_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->to_index(), target);
  }
  
  // optional int32 combine_skill = 4;
  if (has_combine_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->combine_skill(), target);
  }
  
  // optional int32 combined_skill = 5;
  if (has_combined_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->combined_skill(), target);
  }
  
  // optional int32 combined_exp = 6;
  if (has_combined_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->combined_exp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoSkillCombine::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 combine_flag = 1;
    if (has_combine_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combine_flag());
    }
    
    // optional int32 from_index = 2;
    if (has_from_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->from_index());
    }
    
    // optional int32 to_index = 3;
    if (has_to_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->to_index());
    }
    
    // optional int32 combine_skill = 4;
    if (has_combine_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combine_skill());
    }
    
    // optional int32 combined_skill = 5;
    if (has_combined_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combined_skill());
    }
    
    // optional int32 combined_exp = 6;
    if (has_combined_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combined_exp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoSkillCombine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoSkillCombine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoSkillCombine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoSkillCombine::MergeFrom(const ProtoSkillCombine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_combine_flag()) {
      set_combine_flag(from.combine_flag());
    }
    if (from.has_from_index()) {
      set_from_index(from.from_index());
    }
    if (from.has_to_index()) {
      set_to_index(from.to_index());
    }
    if (from.has_combine_skill()) {
      set_combine_skill(from.combine_skill());
    }
    if (from.has_combined_skill()) {
      set_combined_skill(from.combined_skill());
    }
    if (from.has_combined_exp()) {
      set_combined_exp(from.combined_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoSkillCombine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoSkillCombine::CopyFrom(const ProtoSkillCombine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoSkillCombine::IsInitialized() const {
  
  return true;
}

void ProtoSkillCombine::Swap(ProtoSkillCombine* other) {
  if (other != this) {
    std::swap(combine_flag_, other->combine_flag_);
    std::swap(from_index_, other->from_index_);
    std::swap(to_index_, other->to_index_);
    std::swap(combine_skill_, other->combine_skill_);
    std::swap(combined_skill_, other->combined_skill_);
    std::swap(combined_exp_, other->combined_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoSkillCombine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoSkillCombine_descriptor_;
  metadata.reflection = ProtoSkillCombine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoFashion::kUseTypeFieldNumber;
const int ProtoFashion::kUseTickFieldNumber;
const int ProtoFashion::kExpireTickFieldNumber;
#endif  // !_MSC_VER

ProtoFashion::ProtoFashion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoFashion::InitAsDefaultInstance() {
}

ProtoFashion::ProtoFashion(const ProtoFashion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoFashion::SharedCtor() {
  _cached_size_ = 0;
  use_type_ = 0;
  use_tick_ = 0;
  expire_tick_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoFashion::~ProtoFashion() {
  SharedDtor();
}

void ProtoFashion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoFashion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoFashion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoFashion_descriptor_;
}

const ProtoFashion& ProtoFashion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoFashion* ProtoFashion::default_instance_ = NULL;

ProtoFashion* ProtoFashion::New() const {
  return new ProtoFashion;
}

void ProtoFashion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    use_type_ = 0;
    use_tick_ = 0;
    expire_tick_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoFashion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 use_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &use_type_)));
          set_has_use_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_use_tick;
        break;
      }
      
      // optional int32 use_tick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &use_tick_)));
          set_has_use_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_expire_tick;
        break;
      }
      
      // optional int32 expire_tick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expire_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expire_tick_)));
          set_has_expire_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoFashion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 use_type = 1;
  if (has_use_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->use_type(), output);
  }
  
  // optional int32 use_tick = 2;
  if (has_use_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->use_tick(), output);
  }
  
  // optional int32 expire_tick = 3;
  if (has_expire_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->expire_tick(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoFashion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 use_type = 1;
  if (has_use_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->use_type(), target);
  }
  
  // optional int32 use_tick = 2;
  if (has_use_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->use_tick(), target);
  }
  
  // optional int32 expire_tick = 3;
  if (has_expire_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->expire_tick(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoFashion::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 use_type = 1;
    if (has_use_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->use_type());
    }
    
    // optional int32 use_tick = 2;
    if (has_use_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->use_tick());
    }
    
    // optional int32 expire_tick = 3;
    if (has_expire_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expire_tick());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoFashion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoFashion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoFashion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoFashion::MergeFrom(const ProtoFashion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_use_type()) {
      set_use_type(from.use_type());
    }
    if (from.has_use_tick()) {
      set_use_tick(from.use_tick());
    }
    if (from.has_expire_tick()) {
      set_expire_tick(from.expire_tick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoFashion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoFashion::CopyFrom(const ProtoFashion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoFashion::IsInitialized() const {
  
  return true;
}

void ProtoFashion::Swap(ProtoFashion* other) {
  if (other != this) {
    std::swap(use_type_, other->use_type_);
    std::swap(use_tick_, other->use_tick_);
    std::swap(expire_tick_, other->expire_tick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoFashion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoFashion_descriptor_;
  metadata.reflection = ProtoFashion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoFashionInfo::kUseTypeFieldNumber;
const int ProtoFashionInfo::kLeftSecFieldNumber;
const int ProtoFashionInfo::kUseTickFieldNumber;
const int ProtoFashionInfo::kExpireTickFieldNumber;
const int ProtoFashionInfo::kNotifyMapFieldNumber;
const int ProtoFashionInfo::kIsInUseFieldNumber;
const int ProtoFashionInfo::kVipTypeFieldNumber;
const int ProtoFashionInfo::kFashionIdFieldNumber;
const int ProtoFashionInfo::kColorIdFieldNumber;
const int ProtoFashionInfo::kActiveTypeFieldNumber;
const int ProtoFashionInfo::kIsPermanentFieldNumber;
const int ProtoFashionInfo::kActiveTickFieldNumber;
const int ProtoFashionInfo::kEndTickFieldNumber;
const int ProtoFashionInfo::kColorSetFieldNumber;
#endif  // !_MSC_VER

ProtoFashionInfo::ProtoFashionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoFashionInfo::InitAsDefaultInstance() {
}

ProtoFashionInfo::ProtoFashionInfo(const ProtoFashionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoFashionInfo::SharedCtor() {
  _cached_size_ = 0;
  use_type_ = 0;
  left_sec_ = 0;
  use_tick_ = GOOGLE_LONGLONG(0);
  expire_tick_ = GOOGLE_LONGLONG(0);
  is_in_use_ = 0;
  vip_type_ = 0;
  fashion_id_ = 0;
  color_id_ = 0;
  active_type_ = 0;
  is_permanent_ = 0;
  active_tick_ = GOOGLE_LONGLONG(0);
  end_tick_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoFashionInfo::~ProtoFashionInfo() {
  SharedDtor();
}

void ProtoFashionInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoFashionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoFashionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoFashionInfo_descriptor_;
}

const ProtoFashionInfo& ProtoFashionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoFashionInfo* ProtoFashionInfo::default_instance_ = NULL;

ProtoFashionInfo* ProtoFashionInfo::New() const {
  return new ProtoFashionInfo;
}

void ProtoFashionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    use_type_ = 0;
    left_sec_ = 0;
    use_tick_ = GOOGLE_LONGLONG(0);
    expire_tick_ = GOOGLE_LONGLONG(0);
    is_in_use_ = 0;
    vip_type_ = 0;
    fashion_id_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    color_id_ = 0;
    active_type_ = 0;
    is_permanent_ = 0;
    active_tick_ = GOOGLE_LONGLONG(0);
    end_tick_ = GOOGLE_LONGLONG(0);
  }
  notify_map_.Clear();
  color_set__.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoFashionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 use_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &use_type_)));
          set_has_use_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_left_sec;
        break;
      }
      
      // optional int32 left_sec = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_sec_)));
          set_has_left_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_use_tick;
        break;
      }
      
      // optional int64 use_tick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &use_tick_)));
          set_has_use_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_expire_tick;
        break;
      }
      
      // optional int64 expire_tick = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expire_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expire_tick_)));
          set_has_expire_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_notify_map;
        break;
      }
      
      // repeated .ProtoPairObj notify_map = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notify_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_notify_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_notify_map;
        if (input->ExpectTag(48)) goto parse_is_in_use;
        break;
      }
      
      // optional int32 is_in_use = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_in_use:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_in_use_)));
          set_has_is_in_use();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_vip_type;
        break;
      }
      
      // optional int32 vip_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_type_)));
          set_has_vip_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_fashion_id;
        break;
      }
      
      // optional int32 fashion_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashion_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fashion_id_)));
          set_has_fashion_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_color_id;
        break;
      }
      
      // optional int32 color_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_id_)));
          set_has_color_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_active_type;
        break;
      }
      
      // optional int32 active_type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_type_)));
          set_has_active_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_is_permanent;
        break;
      }
      
      // optional int32 is_permanent = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_permanent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_permanent_)));
          set_has_is_permanent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_active_tick;
        break;
      }
      
      // optional int64 active_tick = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &active_tick_)));
          set_has_active_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_end_tick;
        break;
      }
      
      // optional int64 end_tick = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_tick_)));
          set_has_end_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_color_set_;
        break;
      }
      
      // repeated int32 color_set_ = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color_set_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 112, input, this->mutable_color_set_())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_color_set_())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_color_set_;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoFashionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 use_type = 1;
  if (has_use_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->use_type(), output);
  }
  
  // optional int32 left_sec = 2;
  if (has_left_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->left_sec(), output);
  }
  
  // optional int64 use_tick = 3;
  if (has_use_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->use_tick(), output);
  }
  
  // optional int64 expire_tick = 4;
  if (has_expire_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->expire_tick(), output);
  }
  
  // repeated .ProtoPairObj notify_map = 5;
  for (int i = 0; i < this->notify_map_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->notify_map(i), output);
  }
  
  // optional int32 is_in_use = 6;
  if (has_is_in_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->is_in_use(), output);
  }
  
  // optional int32 vip_type = 7;
  if (has_vip_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->vip_type(), output);
  }
  
  // optional int32 fashion_id = 8;
  if (has_fashion_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->fashion_id(), output);
  }
  
  // optional int32 color_id = 9;
  if (has_color_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->color_id(), output);
  }
  
  // optional int32 active_type = 10;
  if (has_active_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->active_type(), output);
  }
  
  // optional int32 is_permanent = 11;
  if (has_is_permanent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->is_permanent(), output);
  }
  
  // optional int64 active_tick = 12;
  if (has_active_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->active_tick(), output);
  }
  
  // optional int64 end_tick = 13;
  if (has_end_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->end_tick(), output);
  }
  
  // repeated int32 color_set_ = 14;
  for (int i = 0; i < this->color_set__size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      14, this->color_set_(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoFashionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 use_type = 1;
  if (has_use_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->use_type(), target);
  }
  
  // optional int32 left_sec = 2;
  if (has_left_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->left_sec(), target);
  }
  
  // optional int64 use_tick = 3;
  if (has_use_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->use_tick(), target);
  }
  
  // optional int64 expire_tick = 4;
  if (has_expire_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->expire_tick(), target);
  }
  
  // repeated .ProtoPairObj notify_map = 5;
  for (int i = 0; i < this->notify_map_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->notify_map(i), target);
  }
  
  // optional int32 is_in_use = 6;
  if (has_is_in_use()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->is_in_use(), target);
  }
  
  // optional int32 vip_type = 7;
  if (has_vip_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->vip_type(), target);
  }
  
  // optional int32 fashion_id = 8;
  if (has_fashion_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->fashion_id(), target);
  }
  
  // optional int32 color_id = 9;
  if (has_color_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->color_id(), target);
  }
  
  // optional int32 active_type = 10;
  if (has_active_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->active_type(), target);
  }
  
  // optional int32 is_permanent = 11;
  if (has_is_permanent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->is_permanent(), target);
  }
  
  // optional int64 active_tick = 12;
  if (has_active_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->active_tick(), target);
  }
  
  // optional int64 end_tick = 13;
  if (has_end_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->end_tick(), target);
  }
  
  // repeated int32 color_set_ = 14;
  for (int i = 0; i < this->color_set__size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(14, this->color_set_(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoFashionInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 use_type = 1;
    if (has_use_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->use_type());
    }
    
    // optional int32 left_sec = 2;
    if (has_left_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_sec());
    }
    
    // optional int64 use_tick = 3;
    if (has_use_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->use_tick());
    }
    
    // optional int64 expire_tick = 4;
    if (has_expire_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expire_tick());
    }
    
    // optional int32 is_in_use = 6;
    if (has_is_in_use()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_in_use());
    }
    
    // optional int32 vip_type = 7;
    if (has_vip_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_type());
    }
    
    // optional int32 fashion_id = 8;
    if (has_fashion_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fashion_id());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 color_id = 9;
    if (has_color_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color_id());
    }
    
    // optional int32 active_type = 10;
    if (has_active_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->active_type());
    }
    
    // optional int32 is_permanent = 11;
    if (has_is_permanent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_permanent());
    }
    
    // optional int64 active_tick = 12;
    if (has_active_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->active_tick());
    }
    
    // optional int64 end_tick = 13;
    if (has_end_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_tick());
    }
    
  }
  // repeated .ProtoPairObj notify_map = 5;
  total_size += 1 * this->notify_map_size();
  for (int i = 0; i < this->notify_map_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->notify_map(i));
  }
  
  // repeated int32 color_set_ = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->color_set__size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->color_set_(i));
    }
    total_size += 1 * this->color_set__size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoFashionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoFashionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoFashionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoFashionInfo::MergeFrom(const ProtoFashionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  notify_map_.MergeFrom(from.notify_map_);
  color_set__.MergeFrom(from.color_set__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_use_type()) {
      set_use_type(from.use_type());
    }
    if (from.has_left_sec()) {
      set_left_sec(from.left_sec());
    }
    if (from.has_use_tick()) {
      set_use_tick(from.use_tick());
    }
    if (from.has_expire_tick()) {
      set_expire_tick(from.expire_tick());
    }
    if (from.has_is_in_use()) {
      set_is_in_use(from.is_in_use());
    }
    if (from.has_vip_type()) {
      set_vip_type(from.vip_type());
    }
    if (from.has_fashion_id()) {
      set_fashion_id(from.fashion_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_color_id()) {
      set_color_id(from.color_id());
    }
    if (from.has_active_type()) {
      set_active_type(from.active_type());
    }
    if (from.has_is_permanent()) {
      set_is_permanent(from.is_permanent());
    }
    if (from.has_active_tick()) {
      set_active_tick(from.active_tick());
    }
    if (from.has_end_tick()) {
      set_end_tick(from.end_tick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoFashionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoFashionInfo::CopyFrom(const ProtoFashionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoFashionInfo::IsInitialized() const {
  
  return true;
}

void ProtoFashionInfo::Swap(ProtoFashionInfo* other) {
  if (other != this) {
    std::swap(use_type_, other->use_type_);
    std::swap(left_sec_, other->left_sec_);
    std::swap(use_tick_, other->use_tick_);
    std::swap(expire_tick_, other->expire_tick_);
    notify_map_.Swap(&other->notify_map_);
    std::swap(is_in_use_, other->is_in_use_);
    std::swap(vip_type_, other->vip_type_);
    std::swap(fashion_id_, other->fashion_id_);
    std::swap(color_id_, other->color_id_);
    std::swap(active_type_, other->active_type_);
    std::swap(is_permanent_, other->is_permanent_);
    std::swap(active_tick_, other->active_tick_);
    std::swap(end_tick_, other->end_tick_);
    color_set__.Swap(&other->color_set__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoFashionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoFashionInfo_descriptor_;
  metadata.reflection = ProtoFashionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoLeagueItem::kRankIndexFieldNumber;
const int ProtoLeagueItem::kLeagueIndexFieldNumber;
const int ProtoLeagueItem::kLeagueNameFieldNumber;
const int ProtoLeagueItem::kLeagueLvlFieldNumber;
const int ProtoLeagueItem::kCurrentCountFieldNumber;
const int ProtoLeagueItem::kLeagueForceFieldNumber;
const int ProtoLeagueItem::kLeagueLeaderFieldNumber;
const int ProtoLeagueItem::kApplyFlagFieldNumber;
const int ProtoLeagueItem::kLeaderIdFieldNumber;
const int ProtoLeagueItem::kMaxRoleFieldNumber;
#endif  // !_MSC_VER

ProtoLeagueItem::ProtoLeagueItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoLeagueItem::InitAsDefaultInstance() {
}

ProtoLeagueItem::ProtoLeagueItem(const ProtoLeagueItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoLeagueItem::SharedCtor() {
  _cached_size_ = 0;
  rank_index_ = 0;
  league_index_ = GOOGLE_LONGLONG(0);
  league_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  league_lvl_ = 0;
  current_count_ = 0;
  league_force_ = 0;
  league_leader_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  apply_flag_ = 0;
  leader_id_ = GOOGLE_LONGLONG(0);
  max_role_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoLeagueItem::~ProtoLeagueItem() {
  SharedDtor();
}

void ProtoLeagueItem::SharedDtor() {
  if (league_name_ != &::google::protobuf::internal::kEmptyString) {
    delete league_name_;
  }
  if (league_leader_ != &::google::protobuf::internal::kEmptyString) {
    delete league_leader_;
  }
  if (this != default_instance_) {
  }
}

void ProtoLeagueItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoLeagueItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoLeagueItem_descriptor_;
}

const ProtoLeagueItem& ProtoLeagueItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoLeagueItem* ProtoLeagueItem::default_instance_ = NULL;

ProtoLeagueItem* ProtoLeagueItem::New() const {
  return new ProtoLeagueItem;
}

void ProtoLeagueItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_index_ = 0;
    league_index_ = GOOGLE_LONGLONG(0);
    if (has_league_name()) {
      if (league_name_ != &::google::protobuf::internal::kEmptyString) {
        league_name_->clear();
      }
    }
    league_lvl_ = 0;
    current_count_ = 0;
    league_force_ = 0;
    if (has_league_leader()) {
      if (league_leader_ != &::google::protobuf::internal::kEmptyString) {
        league_leader_->clear();
      }
    }
    apply_flag_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    leader_id_ = GOOGLE_LONGLONG(0);
    max_role_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoLeagueItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rank_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_index_)));
          set_has_rank_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_league_index;
        break;
      }
      
      // optional int64 league_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_league_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &league_index_)));
          set_has_league_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_league_name;
        break;
      }
      
      // optional string league_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_league_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_league_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->league_name().data(), this->league_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_league_lvl;
        break;
      }
      
      // optional int32 league_lvl = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_league_lvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &league_lvl_)));
          set_has_league_lvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_current_count;
        break;
      }
      
      // optional int32 current_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_count_)));
          set_has_current_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_league_force;
        break;
      }
      
      // optional int32 league_force = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_league_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &league_force_)));
          set_has_league_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_league_leader;
        break;
      }
      
      // optional string league_leader = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_league_leader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_league_leader()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->league_leader().data(), this->league_leader().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_apply_flag;
        break;
      }
      
      // optional int32 apply_flag = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &apply_flag_)));
          set_has_apply_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_leader_id;
        break;
      }
      
      // optional int64 leader_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &leader_id_)));
          set_has_leader_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_max_role;
        break;
      }
      
      // optional int32 max_role = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_role_)));
          set_has_max_role();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoLeagueItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rank_index = 1;
  if (has_rank_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank_index(), output);
  }
  
  // optional int64 league_index = 2;
  if (has_league_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->league_index(), output);
  }
  
  // optional string league_name = 3;
  if (has_league_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->league_name().data(), this->league_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->league_name(), output);
  }
  
  // optional int32 league_lvl = 4;
  if (has_league_lvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->league_lvl(), output);
  }
  
  // optional int32 current_count = 5;
  if (has_current_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->current_count(), output);
  }
  
  // optional int32 league_force = 6;
  if (has_league_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->league_force(), output);
  }
  
  // optional string league_leader = 7;
  if (has_league_leader()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->league_leader().data(), this->league_leader().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->league_leader(), output);
  }
  
  // optional int32 apply_flag = 8;
  if (has_apply_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->apply_flag(), output);
  }
  
  // optional int64 leader_id = 9;
  if (has_leader_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->leader_id(), output);
  }
  
  // optional int32 max_role = 10;
  if (has_max_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->max_role(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoLeagueItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rank_index = 1;
  if (has_rank_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank_index(), target);
  }
  
  // optional int64 league_index = 2;
  if (has_league_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->league_index(), target);
  }
  
  // optional string league_name = 3;
  if (has_league_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->league_name().data(), this->league_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->league_name(), target);
  }
  
  // optional int32 league_lvl = 4;
  if (has_league_lvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->league_lvl(), target);
  }
  
  // optional int32 current_count = 5;
  if (has_current_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->current_count(), target);
  }
  
  // optional int32 league_force = 6;
  if (has_league_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->league_force(), target);
  }
  
  // optional string league_leader = 7;
  if (has_league_leader()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->league_leader().data(), this->league_leader().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->league_leader(), target);
  }
  
  // optional int32 apply_flag = 8;
  if (has_apply_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->apply_flag(), target);
  }
  
  // optional int64 leader_id = 9;
  if (has_leader_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->leader_id(), target);
  }
  
  // optional int32 max_role = 10;
  if (has_max_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->max_role(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoLeagueItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rank_index = 1;
    if (has_rank_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_index());
    }
    
    // optional int64 league_index = 2;
    if (has_league_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->league_index());
    }
    
    // optional string league_name = 3;
    if (has_league_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->league_name());
    }
    
    // optional int32 league_lvl = 4;
    if (has_league_lvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->league_lvl());
    }
    
    // optional int32 current_count = 5;
    if (has_current_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_count());
    }
    
    // optional int32 league_force = 6;
    if (has_league_force()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->league_force());
    }
    
    // optional string league_leader = 7;
    if (has_league_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->league_leader());
    }
    
    // optional int32 apply_flag = 8;
    if (has_apply_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->apply_flag());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 leader_id = 9;
    if (has_leader_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->leader_id());
    }
    
    // optional int32 max_role = 10;
    if (has_max_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_role());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoLeagueItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoLeagueItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoLeagueItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoLeagueItem::MergeFrom(const ProtoLeagueItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank_index()) {
      set_rank_index(from.rank_index());
    }
    if (from.has_league_index()) {
      set_league_index(from.league_index());
    }
    if (from.has_league_name()) {
      set_league_name(from.league_name());
    }
    if (from.has_league_lvl()) {
      set_league_lvl(from.league_lvl());
    }
    if (from.has_current_count()) {
      set_current_count(from.current_count());
    }
    if (from.has_league_force()) {
      set_league_force(from.league_force());
    }
    if (from.has_league_leader()) {
      set_league_leader(from.league_leader());
    }
    if (from.has_apply_flag()) {
      set_apply_flag(from.apply_flag());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_leader_id()) {
      set_leader_id(from.leader_id());
    }
    if (from.has_max_role()) {
      set_max_role(from.max_role());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoLeagueItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoLeagueItem::CopyFrom(const ProtoLeagueItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoLeagueItem::IsInitialized() const {
  
  return true;
}

void ProtoLeagueItem::Swap(ProtoLeagueItem* other) {
  if (other != this) {
    std::swap(rank_index_, other->rank_index_);
    std::swap(league_index_, other->league_index_);
    std::swap(league_name_, other->league_name_);
    std::swap(league_lvl_, other->league_lvl_);
    std::swap(current_count_, other->current_count_);
    std::swap(league_force_, other->league_force_);
    std::swap(league_leader_, other->league_leader_);
    std::swap(apply_flag_, other->apply_flag_);
    std::swap(leader_id_, other->leader_id_);
    std::swap(max_role_, other->max_role_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoLeagueItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoLeagueItem_descriptor_;
  metadata.reflection = ProtoLeagueItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoLeagueMember::kRoleIndexFieldNumber;
const int ProtoLeagueMember::kRoleNameFieldNumber;
const int ProtoLeagueMember::kSexFieldNumber;
const int ProtoLeagueMember::kVipFieldNumber;
const int ProtoLeagueMember::kLeaguePosFieldNumber;
const int ProtoLeagueMember::kRoleLvlFieldNumber;
const int ProtoLeagueMember::kRoleForceFieldNumber;
const int ProtoLeagueMember::kCurContriFieldNumber;
const int ProtoLeagueMember::kTotalContriFieldNumber;
const int ProtoLeagueMember::kLeftTimeFieldNumber;
#endif  // !_MSC_VER

ProtoLeagueMember::ProtoLeagueMember()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoLeagueMember::InitAsDefaultInstance() {
}

ProtoLeagueMember::ProtoLeagueMember(const ProtoLeagueMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoLeagueMember::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  vip_ = 0;
  league_pos_ = 0;
  role_lvl_ = 0;
  role_force_ = 0;
  cur_contri_ = 0;
  total_contri_ = 0;
  left_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoLeagueMember::~ProtoLeagueMember() {
  SharedDtor();
}

void ProtoLeagueMember::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoLeagueMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoLeagueMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoLeagueMember_descriptor_;
}

const ProtoLeagueMember& ProtoLeagueMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoLeagueMember* ProtoLeagueMember::default_instance_ = NULL;

ProtoLeagueMember* ProtoLeagueMember::New() const {
  return new ProtoLeagueMember;
}

void ProtoLeagueMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    sex_ = 0;
    vip_ = 0;
    league_pos_ = 0;
    role_lvl_ = 0;
    role_force_ = 0;
    cur_contri_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    total_contri_ = 0;
    left_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoLeagueMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_name;
        break;
      }
      
      // optional string role_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sex;
        break;
      }
      
      // optional int32 sex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_vip;
        break;
      }
      
      // optional int32 vip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_league_pos;
        break;
      }
      
      // optional int32 league_pos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_league_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &league_pos_)));
          set_has_league_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_role_lvl;
        break;
      }
      
      // optional int32 role_lvl = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_lvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_lvl_)));
          set_has_role_lvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_role_force;
        break;
      }
      
      // optional int32 role_force = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_force_)));
          set_has_role_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_cur_contri;
        break;
      }
      
      // optional int32 cur_contri = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_contri:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_contri_)));
          set_has_cur_contri();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_total_contri;
        break;
      }
      
      // optional int32 total_contri = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_contri:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_contri_)));
          set_has_total_contri();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_left_time;
        break;
      }
      
      // optional int32 left_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_time_)));
          set_has_left_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoLeagueMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }
  
  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->role_name(), output);
  }
  
  // optional int32 sex = 3;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sex(), output);
  }
  
  // optional int32 vip = 4;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->vip(), output);
  }
  
  // optional int32 league_pos = 5;
  if (has_league_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->league_pos(), output);
  }
  
  // optional int32 role_lvl = 6;
  if (has_role_lvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->role_lvl(), output);
  }
  
  // optional int32 role_force = 7;
  if (has_role_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->role_force(), output);
  }
  
  // optional int32 cur_contri = 8;
  if (has_cur_contri()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->cur_contri(), output);
  }
  
  // optional int32 total_contri = 9;
  if (has_total_contri()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->total_contri(), output);
  }
  
  // optional int32 left_time = 10;
  if (has_left_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->left_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoLeagueMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }
  
  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }
  
  // optional int32 sex = 3;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sex(), target);
  }
  
  // optional int32 vip = 4;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->vip(), target);
  }
  
  // optional int32 league_pos = 5;
  if (has_league_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->league_pos(), target);
  }
  
  // optional int32 role_lvl = 6;
  if (has_role_lvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->role_lvl(), target);
  }
  
  // optional int32 role_force = 7;
  if (has_role_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->role_force(), target);
  }
  
  // optional int32 cur_contri = 8;
  if (has_cur_contri()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->cur_contri(), target);
  }
  
  // optional int32 total_contri = 9;
  if (has_total_contri()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->total_contri(), target);
  }
  
  // optional int32 left_time = 10;
  if (has_left_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->left_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoLeagueMember::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }
    
    // optional string role_name = 2;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }
    
    // optional int32 sex = 3;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }
    
    // optional int32 vip = 4;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip());
    }
    
    // optional int32 league_pos = 5;
    if (has_league_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->league_pos());
    }
    
    // optional int32 role_lvl = 6;
    if (has_role_lvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_lvl());
    }
    
    // optional int32 role_force = 7;
    if (has_role_force()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_force());
    }
    
    // optional int32 cur_contri = 8;
    if (has_cur_contri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_contri());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 total_contri = 9;
    if (has_total_contri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_contri());
    }
    
    // optional int32 left_time = 10;
    if (has_left_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoLeagueMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoLeagueMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoLeagueMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoLeagueMember::MergeFrom(const ProtoLeagueMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_league_pos()) {
      set_league_pos(from.league_pos());
    }
    if (from.has_role_lvl()) {
      set_role_lvl(from.role_lvl());
    }
    if (from.has_role_force()) {
      set_role_force(from.role_force());
    }
    if (from.has_cur_contri()) {
      set_cur_contri(from.cur_contri());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_total_contri()) {
      set_total_contri(from.total_contri());
    }
    if (from.has_left_time()) {
      set_left_time(from.left_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoLeagueMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoLeagueMember::CopyFrom(const ProtoLeagueMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoLeagueMember::IsInitialized() const {
  
  return true;
}

void ProtoLeagueMember::Swap(ProtoLeagueMember* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(role_name_, other->role_name_);
    std::swap(sex_, other->sex_);
    std::swap(vip_, other->vip_);
    std::swap(league_pos_, other->league_pos_);
    std::swap(role_lvl_, other->role_lvl_);
    std::swap(role_force_, other->role_force_);
    std::swap(cur_contri_, other->cur_contri_);
    std::swap(total_contri_, other->total_contri_);
    std::swap(left_time_, other->left_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoLeagueMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoLeagueMember_descriptor_;
  metadata.reflection = ProtoLeagueMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoLeagueApply::kRoleIndexFieldNumber;
const int ProtoLeagueApply::kVipTypeFieldNumber;
const int ProtoLeagueApply::kRoleSexFieldNumber;
const int ProtoLeagueApply::kRoleNameFieldNumber;
const int ProtoLeagueApply::kRoleLvlFieldNumber;
const int ProtoLeagueApply::kRoleCareerFieldNumber;
const int ProtoLeagueApply::kRoleForceFieldNumber;
const int ProtoLeagueApply::kOnlineFlagFieldNumber;
#endif  // !_MSC_VER

ProtoLeagueApply::ProtoLeagueApply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoLeagueApply::InitAsDefaultInstance() {
}

ProtoLeagueApply::ProtoLeagueApply(const ProtoLeagueApply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoLeagueApply::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  vip_type_ = 0;
  role_sex_ = 0;
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_lvl_ = 0;
  role_career_ = 0;
  role_force_ = 0;
  online_flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoLeagueApply::~ProtoLeagueApply() {
  SharedDtor();
}

void ProtoLeagueApply::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoLeagueApply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoLeagueApply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoLeagueApply_descriptor_;
}

const ProtoLeagueApply& ProtoLeagueApply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoLeagueApply* ProtoLeagueApply::default_instance_ = NULL;

ProtoLeagueApply* ProtoLeagueApply::New() const {
  return new ProtoLeagueApply;
}

void ProtoLeagueApply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    vip_type_ = 0;
    role_sex_ = 0;
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    role_lvl_ = 0;
    role_career_ = 0;
    role_force_ = 0;
    online_flag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoLeagueApply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_vip_type;
        break;
      }
      
      // optional int32 vip_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_type_)));
          set_has_vip_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_sex;
        break;
      }
      
      // optional int32 role_sex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_sex_)));
          set_has_role_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_role_name;
        break;
      }
      
      // optional string role_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_role_lvl;
        break;
      }
      
      // optional int32 role_lvl = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_lvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_lvl_)));
          set_has_role_lvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_role_career;
        break;
      }
      
      // optional int32 role_career = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_career:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_career_)));
          set_has_role_career();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_role_force;
        break;
      }
      
      // optional int32 role_force = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_force_)));
          set_has_role_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_online_flag;
        break;
      }
      
      // optional int32 online_flag = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &online_flag_)));
          set_has_online_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoLeagueApply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }
  
  // optional int32 vip_type = 2;
  if (has_vip_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->vip_type(), output);
  }
  
  // optional int32 role_sex = 3;
  if (has_role_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->role_sex(), output);
  }
  
  // optional string role_name = 4;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->role_name(), output);
  }
  
  // optional int32 role_lvl = 5;
  if (has_role_lvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->role_lvl(), output);
  }
  
  // optional int32 role_career = 6;
  if (has_role_career()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->role_career(), output);
  }
  
  // optional int32 role_force = 7;
  if (has_role_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->role_force(), output);
  }
  
  // optional int32 online_flag = 8;
  if (has_online_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->online_flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoLeagueApply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }
  
  // optional int32 vip_type = 2;
  if (has_vip_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->vip_type(), target);
  }
  
  // optional int32 role_sex = 3;
  if (has_role_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->role_sex(), target);
  }
  
  // optional string role_name = 4;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->role_name(), target);
  }
  
  // optional int32 role_lvl = 5;
  if (has_role_lvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->role_lvl(), target);
  }
  
  // optional int32 role_career = 6;
  if (has_role_career()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->role_career(), target);
  }
  
  // optional int32 role_force = 7;
  if (has_role_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->role_force(), target);
  }
  
  // optional int32 online_flag = 8;
  if (has_online_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->online_flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoLeagueApply::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }
    
    // optional int32 vip_type = 2;
    if (has_vip_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_type());
    }
    
    // optional int32 role_sex = 3;
    if (has_role_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_sex());
    }
    
    // optional string role_name = 4;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }
    
    // optional int32 role_lvl = 5;
    if (has_role_lvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_lvl());
    }
    
    // optional int32 role_career = 6;
    if (has_role_career()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_career());
    }
    
    // optional int32 role_force = 7;
    if (has_role_force()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_force());
    }
    
    // optional int32 online_flag = 8;
    if (has_online_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->online_flag());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoLeagueApply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoLeagueApply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoLeagueApply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoLeagueApply::MergeFrom(const ProtoLeagueApply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_vip_type()) {
      set_vip_type(from.vip_type());
    }
    if (from.has_role_sex()) {
      set_role_sex(from.role_sex());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_role_lvl()) {
      set_role_lvl(from.role_lvl());
    }
    if (from.has_role_career()) {
      set_role_career(from.role_career());
    }
    if (from.has_role_force()) {
      set_role_force(from.role_force());
    }
    if (from.has_online_flag()) {
      set_online_flag(from.online_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoLeagueApply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoLeagueApply::CopyFrom(const ProtoLeagueApply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoLeagueApply::IsInitialized() const {
  
  return true;
}

void ProtoLeagueApply::Swap(ProtoLeagueApply* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(vip_type_, other->vip_type_);
    std::swap(role_sex_, other->role_sex_);
    std::swap(role_name_, other->role_name_);
    std::swap(role_lvl_, other->role_lvl_);
    std::swap(role_career_, other->role_career_);
    std::swap(role_force_, other->role_force_);
    std::swap(online_flag_, other->online_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoLeagueApply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoLeagueApply_descriptor_;
  metadata.reflection = ProtoLeagueApply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoLeagueLog::kLogTickFieldNumber;
const int ProtoLeagueLog::kLogContentFieldNumber;
#endif  // !_MSC_VER

ProtoLeagueLog::ProtoLeagueLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoLeagueLog::InitAsDefaultInstance() {
}

ProtoLeagueLog::ProtoLeagueLog(const ProtoLeagueLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoLeagueLog::SharedCtor() {
  _cached_size_ = 0;
  log_tick_ = GOOGLE_LONGLONG(0);
  log_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoLeagueLog::~ProtoLeagueLog() {
  SharedDtor();
}

void ProtoLeagueLog::SharedDtor() {
  if (log_content_ != &::google::protobuf::internal::kEmptyString) {
    delete log_content_;
  }
  if (this != default_instance_) {
  }
}

void ProtoLeagueLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoLeagueLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoLeagueLog_descriptor_;
}

const ProtoLeagueLog& ProtoLeagueLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoLeagueLog* ProtoLeagueLog::default_instance_ = NULL;

ProtoLeagueLog* ProtoLeagueLog::New() const {
  return new ProtoLeagueLog;
}

void ProtoLeagueLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    log_tick_ = GOOGLE_LONGLONG(0);
    if (has_log_content()) {
      if (log_content_ != &::google::protobuf::internal::kEmptyString) {
        log_content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoLeagueLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 log_tick = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &log_tick_)));
          set_has_log_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_log_content;
        break;
      }
      
      // optional string log_content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->log_content().data(), this->log_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoLeagueLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 log_tick = 1;
  if (has_log_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->log_tick(), output);
  }
  
  // optional string log_content = 2;
  if (has_log_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log_content().data(), this->log_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->log_content(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoLeagueLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 log_tick = 1;
  if (has_log_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->log_tick(), target);
  }
  
  // optional string log_content = 2;
  if (has_log_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log_content().data(), this->log_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->log_content(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoLeagueLog::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 log_tick = 1;
    if (has_log_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->log_tick());
    }
    
    // optional string log_content = 2;
    if (has_log_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->log_content());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoLeagueLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoLeagueLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoLeagueLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoLeagueLog::MergeFrom(const ProtoLeagueLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_log_tick()) {
      set_log_tick(from.log_tick());
    }
    if (from.has_log_content()) {
      set_log_content(from.log_content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoLeagueLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoLeagueLog::CopyFrom(const ProtoLeagueLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoLeagueLog::IsInitialized() const {
  
  return true;
}

void ProtoLeagueLog::Swap(ProtoLeagueLog* other) {
  if (other != this) {
    std::swap(log_tick_, other->log_tick_);
    std::swap(log_content_, other->log_content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoLeagueLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoLeagueLog_descriptor_;
  metadata.reflection = ProtoLeagueLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoLeagueShop::kItemIdFieldNumber;
const int ProtoLeagueShop::kBuyNumFieldNumber;
#endif  // !_MSC_VER

ProtoLeagueShop::ProtoLeagueShop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoLeagueShop::InitAsDefaultInstance() {
}

ProtoLeagueShop::ProtoLeagueShop(const ProtoLeagueShop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoLeagueShop::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0;
  buy_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoLeagueShop::~ProtoLeagueShop() {
  SharedDtor();
}

void ProtoLeagueShop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoLeagueShop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoLeagueShop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoLeagueShop_descriptor_;
}

const ProtoLeagueShop& ProtoLeagueShop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoLeagueShop* ProtoLeagueShop::default_instance_ = NULL;

ProtoLeagueShop* ProtoLeagueShop::New() const {
  return new ProtoLeagueShop;
}

void ProtoLeagueShop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0;
    buy_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoLeagueShop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buy_num;
        break;
      }
      
      // optional int32 buy_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_num_)));
          set_has_buy_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoLeagueShop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_id(), output);
  }
  
  // optional int32 buy_num = 2;
  if (has_buy_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->buy_num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoLeagueShop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_id(), target);
  }
  
  // optional int32 buy_num = 2;
  if (has_buy_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->buy_num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoLeagueShop::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }
    
    // optional int32 buy_num = 2;
    if (has_buy_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_num());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoLeagueShop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoLeagueShop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoLeagueShop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoLeagueShop::MergeFrom(const ProtoLeagueShop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_buy_num()) {
      set_buy_num(from.buy_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoLeagueShop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoLeagueShop::CopyFrom(const ProtoLeagueShop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoLeagueShop::IsInitialized() const {
  
  return true;
}

void ProtoLeagueShop::Swap(ProtoLeagueShop* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(buy_num_, other->buy_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoLeagueShop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoLeagueShop_descriptor_;
  metadata.reflection = ProtoLeagueShop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoMallItem::kItemPosFieldNumber;
const int ProtoMallItem::kItemIdFieldNumber;
const int ProtoMallItem::kItemTypeListFieldNumber;
const int ProtoMallItem::kMoneyTypeFieldNumber;
const int ProtoMallItem::kPrimePriceFieldNumber;
const int ProtoMallItem::kCurPriceFieldNumber;
const int ProtoMallItem::kVipPriceFieldNumber;
const int ProtoMallItem::kLimitCondtTypeFieldNumber;
const int ProtoMallItem::kLimitCondtFieldNumber;
const int ProtoMallItem::kContextFieldNumber;
const int ProtoMallItem::kItemBindFieldNumber;
const int ProtoMallItem::kLeftItemFieldNumber;
const int ProtoMallItem::kMaxItemFieldNumber;
const int ProtoMallItem::kOwnFieldNumber;
#endif  // !_MSC_VER

ProtoMallItem::ProtoMallItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoMallItem::InitAsDefaultInstance() {
  limit_condt_ = const_cast< ::ProtoPairObj*>(&::ProtoPairObj::default_instance());
}

ProtoMallItem::ProtoMallItem(const ProtoMallItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoMallItem::SharedCtor() {
  _cached_size_ = 0;
  item_pos_ = 0;
  item_id_ = 0;
  money_type_ = 0;
  prime_price_ = 0;
  cur_price_ = 0;
  vip_price_ = 0;
  limit_condt_type_ = 0;
  limit_condt_ = NULL;
  context_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  item_bind_ = 0;
  left_item_ = 0;
  max_item_ = 0;
  own_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoMallItem::~ProtoMallItem() {
  SharedDtor();
}

void ProtoMallItem::SharedDtor() {
  if (context_ != &::google::protobuf::internal::kEmptyString) {
    delete context_;
  }
  if (this != default_instance_) {
    delete limit_condt_;
  }
}

void ProtoMallItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoMallItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoMallItem_descriptor_;
}

const ProtoMallItem& ProtoMallItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoMallItem* ProtoMallItem::default_instance_ = NULL;

ProtoMallItem* ProtoMallItem::New() const {
  return new ProtoMallItem;
}

void ProtoMallItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_pos_ = 0;
    item_id_ = 0;
    money_type_ = 0;
    prime_price_ = 0;
    cur_price_ = 0;
    vip_price_ = 0;
    limit_condt_type_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_limit_condt()) {
      if (limit_condt_ != NULL) limit_condt_->::ProtoPairObj::Clear();
    }
    if (has_context()) {
      if (context_ != &::google::protobuf::internal::kEmptyString) {
        context_->clear();
      }
    }
    item_bind_ = 0;
    left_item_ = 0;
    max_item_ = 0;
    own_ = 0;
  }
  item_type_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoMallItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 item_pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_pos_)));
          set_has_item_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }
      
      // optional int32 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_type_list;
        break;
      }
      
      // repeated int32 item_type_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_type_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_item_type_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_item_type_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_type_list;
        if (input->ExpectTag(32)) goto parse_money_type;
        break;
      }
      
      // optional int32 money_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_type_)));
          set_has_money_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_prime_price;
        break;
      }
      
      // optional int32 prime_price = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prime_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prime_price_)));
          set_has_prime_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cur_price;
        break;
      }
      
      // optional int32 cur_price = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_price_)));
          set_has_cur_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_vip_price;
        break;
      }
      
      // optional int32 vip_price = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_price_)));
          set_has_vip_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_limit_condt_type;
        break;
      }
      
      // optional int32 limit_condt_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit_condt_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_condt_type_)));
          set_has_limit_condt_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_limit_condt;
        break;
      }
      
      // optional .ProtoPairObj limit_condt = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_limit_condt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_limit_condt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_context;
        break;
      }
      
      // optional string context = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_context()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->context().data(), this->context().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_item_bind;
        break;
      }
      
      // optional int32 item_bind = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_bind_)));
          set_has_item_bind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_left_item;
        break;
      }
      
      // optional int32 left_item = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_item_)));
          set_has_left_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_max_item;
        break;
      }
      
      // optional int32 max_item = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_item_)));
          set_has_max_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_own;
        break;
      }
      
      // optional int32 own = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_own:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &own_)));
          set_has_own();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoMallItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 item_pos = 1;
  if (has_item_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_pos(), output);
  }
  
  // optional int32 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_id(), output);
  }
  
  // repeated int32 item_type_list = 3;
  for (int i = 0; i < this->item_type_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->item_type_list(i), output);
  }
  
  // optional int32 money_type = 4;
  if (has_money_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->money_type(), output);
  }
  
  // optional int32 prime_price = 5;
  if (has_prime_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->prime_price(), output);
  }
  
  // optional int32 cur_price = 6;
  if (has_cur_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cur_price(), output);
  }
  
  // optional int32 vip_price = 7;
  if (has_vip_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->vip_price(), output);
  }
  
  // optional int32 limit_condt_type = 8;
  if (has_limit_condt_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->limit_condt_type(), output);
  }
  
  // optional .ProtoPairObj limit_condt = 9;
  if (has_limit_condt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->limit_condt(), output);
  }
  
  // optional string context = 10;
  if (has_context()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->context().data(), this->context().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->context(), output);
  }
  
  // optional int32 item_bind = 11;
  if (has_item_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->item_bind(), output);
  }
  
  // optional int32 left_item = 12;
  if (has_left_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->left_item(), output);
  }
  
  // optional int32 max_item = 13;
  if (has_max_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->max_item(), output);
  }
  
  // optional int32 own = 14;
  if (has_own()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->own(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoMallItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 item_pos = 1;
  if (has_item_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_pos(), target);
  }
  
  // optional int32 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_id(), target);
  }
  
  // repeated int32 item_type_list = 3;
  for (int i = 0; i < this->item_type_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->item_type_list(i), target);
  }
  
  // optional int32 money_type = 4;
  if (has_money_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->money_type(), target);
  }
  
  // optional int32 prime_price = 5;
  if (has_prime_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->prime_price(), target);
  }
  
  // optional int32 cur_price = 6;
  if (has_cur_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cur_price(), target);
  }
  
  // optional int32 vip_price = 7;
  if (has_vip_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->vip_price(), target);
  }
  
  // optional int32 limit_condt_type = 8;
  if (has_limit_condt_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->limit_condt_type(), target);
  }
  
  // optional .ProtoPairObj limit_condt = 9;
  if (has_limit_condt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->limit_condt(), target);
  }
  
  // optional string context = 10;
  if (has_context()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->context().data(), this->context().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->context(), target);
  }
  
  // optional int32 item_bind = 11;
  if (has_item_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->item_bind(), target);
  }
  
  // optional int32 left_item = 12;
  if (has_left_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->left_item(), target);
  }
  
  // optional int32 max_item = 13;
  if (has_max_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->max_item(), target);
  }
  
  // optional int32 own = 14;
  if (has_own()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->own(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoMallItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 item_pos = 1;
    if (has_item_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_pos());
    }
    
    // optional int32 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }
    
    // optional int32 money_type = 4;
    if (has_money_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money_type());
    }
    
    // optional int32 prime_price = 5;
    if (has_prime_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prime_price());
    }
    
    // optional int32 cur_price = 6;
    if (has_cur_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_price());
    }
    
    // optional int32 vip_price = 7;
    if (has_vip_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_price());
    }
    
    // optional int32 limit_condt_type = 8;
    if (has_limit_condt_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit_condt_type());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .ProtoPairObj limit_condt = 9;
    if (has_limit_condt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->limit_condt());
    }
    
    // optional string context = 10;
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->context());
    }
    
    // optional int32 item_bind = 11;
    if (has_item_bind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_bind());
    }
    
    // optional int32 left_item = 12;
    if (has_left_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_item());
    }
    
    // optional int32 max_item = 13;
    if (has_max_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_item());
    }
    
    // optional int32 own = 14;
    if (has_own()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->own());
    }
    
  }
  // repeated int32 item_type_list = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_type_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->item_type_list(i));
    }
    total_size += 1 * this->item_type_list_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoMallItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoMallItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoMallItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoMallItem::MergeFrom(const ProtoMallItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_type_list_.MergeFrom(from.item_type_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_pos()) {
      set_item_pos(from.item_pos());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_money_type()) {
      set_money_type(from.money_type());
    }
    if (from.has_prime_price()) {
      set_prime_price(from.prime_price());
    }
    if (from.has_cur_price()) {
      set_cur_price(from.cur_price());
    }
    if (from.has_vip_price()) {
      set_vip_price(from.vip_price());
    }
    if (from.has_limit_condt_type()) {
      set_limit_condt_type(from.limit_condt_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_limit_condt()) {
      mutable_limit_condt()->::ProtoPairObj::MergeFrom(from.limit_condt());
    }
    if (from.has_context()) {
      set_context(from.context());
    }
    if (from.has_item_bind()) {
      set_item_bind(from.item_bind());
    }
    if (from.has_left_item()) {
      set_left_item(from.left_item());
    }
    if (from.has_max_item()) {
      set_max_item(from.max_item());
    }
    if (from.has_own()) {
      set_own(from.own());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoMallItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMallItem::CopyFrom(const ProtoMallItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMallItem::IsInitialized() const {
  
  return true;
}

void ProtoMallItem::Swap(ProtoMallItem* other) {
  if (other != this) {
    std::swap(item_pos_, other->item_pos_);
    std::swap(item_id_, other->item_id_);
    item_type_list_.Swap(&other->item_type_list_);
    std::swap(money_type_, other->money_type_);
    std::swap(prime_price_, other->prime_price_);
    std::swap(cur_price_, other->cur_price_);
    std::swap(vip_price_, other->vip_price_);
    std::swap(limit_condt_type_, other->limit_condt_type_);
    std::swap(limit_condt_, other->limit_condt_);
    std::swap(context_, other->context_);
    std::swap(item_bind_, other->item_bind_);
    std::swap(left_item_, other->left_item_);
    std::swap(max_item_, other->max_item_);
    std::swap(own_, other->own_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoMallItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoMallItem_descriptor_;
  metadata.reflection = ProtoMallItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoMallList::kShopTypeFieldNumber;
const int ProtoMallList::kItemListFieldNumber;
#endif  // !_MSC_VER

ProtoMallList::ProtoMallList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoMallList::InitAsDefaultInstance() {
}

ProtoMallList::ProtoMallList(const ProtoMallList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoMallList::SharedCtor() {
  _cached_size_ = 0;
  shop_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoMallList::~ProtoMallList() {
  SharedDtor();
}

void ProtoMallList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoMallList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoMallList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoMallList_descriptor_;
}

const ProtoMallList& ProtoMallList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoMallList* ProtoMallList::default_instance_ = NULL;

ProtoMallList* ProtoMallList::New() const {
  return new ProtoMallList;
}

void ProtoMallList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    shop_type_ = 0;
  }
  item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoMallList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 shop_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shop_type_)));
          set_has_shop_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Item_list;
        break;
      }
      
      // repeated .ProtoMallItem Item_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Item_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoMallList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 shop_type = 1;
  if (has_shop_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->shop_type(), output);
  }
  
  // repeated .ProtoMallItem Item_list = 2;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoMallList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 shop_type = 1;
  if (has_shop_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->shop_type(), target);
  }
  
  // repeated .ProtoMallItem Item_list = 2;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoMallList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 shop_type = 1;
    if (has_shop_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shop_type());
    }
    
  }
  // repeated .ProtoMallItem Item_list = 2;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoMallList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoMallList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoMallList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoMallList::MergeFrom(const ProtoMallList& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shop_type()) {
      set_shop_type(from.shop_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoMallList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMallList::CopyFrom(const ProtoMallList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMallList::IsInitialized() const {
  
  return true;
}

void ProtoMallList::Swap(ProtoMallList* other) {
  if (other != this) {
    std::swap(shop_type_, other->shop_type_);
    item_list_.Swap(&other->item_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoMallList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoMallList_descriptor_;
  metadata.reflection = ProtoMallList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoTeamer::kRoleNameFieldNumber;
const int ProtoTeamer::kFullNameFieldNumber;
const int ProtoTeamer::kRoleIdFieldNumber;
const int ProtoTeamer::kRoleLevelFieldNumber;
const int ProtoTeamer::kRoleForceFieldNumber;
const int ProtoTeamer::kRoleCareerFieldNumber;
const int ProtoTeamer::kRoleSexFieldNumber;
const int ProtoTeamer::kVipTypeFieldNumber;
const int ProtoTeamer::kOnlineFlagFieldNumber;
const int ProtoTeamer::kPrepareFieldNumber;
const int ProtoTeamer::kLeagueNameFieldNumber;
const int ProtoTeamer::kTeamNumFieldNumber;
const int ProtoTeamer::kTeamLimitFieldNumber;
const int ProtoTeamer::kShowInfoFieldNumber;
const int ProtoTeamer::kMountInfoFieldNumber;
const int ProtoTeamer::kPrevFieldNumber;
#endif  // !_MSC_VER

ProtoTeamer::ProtoTeamer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoTeamer::InitAsDefaultInstance() {
}

ProtoTeamer::ProtoTeamer(const ProtoTeamer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoTeamer::SharedCtor() {
  _cached_size_ = 0;
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  full_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_id_ = GOOGLE_LONGLONG(0);
  role_level_ = 0;
  role_force_ = 0;
  role_career_ = 0;
  role_sex_ = 0;
  vip_type_ = 0;
  online_flag_ = 0;
  prepare_ = 0;
  league_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  team_num_ = 0;
  team_limit_ = 0;
  prev_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoTeamer::~ProtoTeamer() {
  SharedDtor();
}

void ProtoTeamer::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (full_name_ != &::google::protobuf::internal::kEmptyString) {
    delete full_name_;
  }
  if (league_name_ != &::google::protobuf::internal::kEmptyString) {
    delete league_name_;
  }
  if (prev_ != &::google::protobuf::internal::kEmptyString) {
    delete prev_;
  }
  if (this != default_instance_) {
  }
}

void ProtoTeamer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoTeamer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoTeamer_descriptor_;
}

const ProtoTeamer& ProtoTeamer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoTeamer* ProtoTeamer::default_instance_ = NULL;

ProtoTeamer* ProtoTeamer::New() const {
  return new ProtoTeamer;
}

void ProtoTeamer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    if (has_full_name()) {
      if (full_name_ != &::google::protobuf::internal::kEmptyString) {
        full_name_->clear();
      }
    }
    role_id_ = GOOGLE_LONGLONG(0);
    role_level_ = 0;
    role_force_ = 0;
    role_career_ = 0;
    role_sex_ = 0;
    vip_type_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    online_flag_ = 0;
    prepare_ = 0;
    if (has_league_name()) {
      if (league_name_ != &::google::protobuf::internal::kEmptyString) {
        league_name_->clear();
      }
    }
    team_num_ = 0;
    team_limit_ = 0;
    if (has_prev()) {
      if (prev_ != &::google::protobuf::internal::kEmptyString) {
        prev_->clear();
      }
    }
  }
  show_info_.Clear();
  mount_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoTeamer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string role_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_full_name;
        break;
      }
      
      // optional string full_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_full_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_full_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->full_name().data(), this->full_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }
      
      // optional int64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_role_level;
        break;
      }
      
      // optional int32 role_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_level_)));
          set_has_role_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_role_force;
        break;
      }
      
      // optional int32 role_force = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_force_)));
          set_has_role_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_role_career;
        break;
      }
      
      // optional int32 role_career = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_career:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_career_)));
          set_has_role_career();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_role_sex;
        break;
      }
      
      // optional int32 role_sex = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_sex_)));
          set_has_role_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_vip_type;
        break;
      }
      
      // optional int32 vip_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_type_)));
          set_has_vip_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_online_flag;
        break;
      }
      
      // optional int32 online_flag = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &online_flag_)));
          set_has_online_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_prepare;
        break;
      }
      
      // optional int32 prepare = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prepare:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prepare_)));
          set_has_prepare();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_league_name;
        break;
      }
      
      // optional string league_name = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_league_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_league_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->league_name().data(), this->league_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_team_num;
        break;
      }
      
      // optional int32 team_num = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_num_)));
          set_has_team_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_team_limit;
        break;
      }
      
      // optional int32 team_limit = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_limit_)));
          set_has_team_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_show_info;
        break;
      }
      
      // repeated .ProtoThreeObj show_info = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_show_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_show_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_show_info;
        if (input->ExpectTag(122)) goto parse_mount_info;
        break;
      }
      
      // repeated .ProtoPairObj mount_info = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mount_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mount_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_mount_info;
        if (input->ExpectTag(130)) goto parse_prev;
        break;
      }
      
      // optional string prev = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prev()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->prev().data(), this->prev().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoTeamer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string role_name = 1;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->role_name(), output);
  }
  
  // optional string full_name = 2;
  if (has_full_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->full_name().data(), this->full_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->full_name(), output);
  }
  
  // optional int64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->role_id(), output);
  }
  
  // optional int32 role_level = 4;
  if (has_role_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->role_level(), output);
  }
  
  // optional int32 role_force = 5;
  if (has_role_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->role_force(), output);
  }
  
  // optional int32 role_career = 6;
  if (has_role_career()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->role_career(), output);
  }
  
  // optional int32 role_sex = 7;
  if (has_role_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->role_sex(), output);
  }
  
  // optional int32 vip_type = 8;
  if (has_vip_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->vip_type(), output);
  }
  
  // optional int32 online_flag = 9;
  if (has_online_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->online_flag(), output);
  }
  
  // optional int32 prepare = 10;
  if (has_prepare()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->prepare(), output);
  }
  
  // optional string league_name = 11;
  if (has_league_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->league_name().data(), this->league_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->league_name(), output);
  }
  
  // optional int32 team_num = 12;
  if (has_team_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->team_num(), output);
  }
  
  // optional int32 team_limit = 13;
  if (has_team_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->team_limit(), output);
  }
  
  // repeated .ProtoThreeObj show_info = 14;
  for (int i = 0; i < this->show_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->show_info(i), output);
  }
  
  // repeated .ProtoPairObj mount_info = 15;
  for (int i = 0; i < this->mount_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->mount_info(i), output);
  }
  
  // optional string prev = 16;
  if (has_prev()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prev().data(), this->prev().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->prev(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoTeamer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string role_name = 1;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->role_name(), target);
  }
  
  // optional string full_name = 2;
  if (has_full_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->full_name().data(), this->full_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->full_name(), target);
  }
  
  // optional int64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->role_id(), target);
  }
  
  // optional int32 role_level = 4;
  if (has_role_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->role_level(), target);
  }
  
  // optional int32 role_force = 5;
  if (has_role_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->role_force(), target);
  }
  
  // optional int32 role_career = 6;
  if (has_role_career()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->role_career(), target);
  }
  
  // optional int32 role_sex = 7;
  if (has_role_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->role_sex(), target);
  }
  
  // optional int32 vip_type = 8;
  if (has_vip_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->vip_type(), target);
  }
  
  // optional int32 online_flag = 9;
  if (has_online_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->online_flag(), target);
  }
  
  // optional int32 prepare = 10;
  if (has_prepare()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->prepare(), target);
  }
  
  // optional string league_name = 11;
  if (has_league_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->league_name().data(), this->league_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->league_name(), target);
  }
  
  // optional int32 team_num = 12;
  if (has_team_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->team_num(), target);
  }
  
  // optional int32 team_limit = 13;
  if (has_team_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->team_limit(), target);
  }
  
  // repeated .ProtoThreeObj show_info = 14;
  for (int i = 0; i < this->show_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->show_info(i), target);
  }
  
  // repeated .ProtoPairObj mount_info = 15;
  for (int i = 0; i < this->mount_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->mount_info(i), target);
  }
  
  // optional string prev = 16;
  if (has_prev()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prev().data(), this->prev().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->prev(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoTeamer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string role_name = 1;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }
    
    // optional string full_name = 2;
    if (has_full_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->full_name());
    }
    
    // optional int64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional int32 role_level = 4;
    if (has_role_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_level());
    }
    
    // optional int32 role_force = 5;
    if (has_role_force()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_force());
    }
    
    // optional int32 role_career = 6;
    if (has_role_career()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_career());
    }
    
    // optional int32 role_sex = 7;
    if (has_role_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_sex());
    }
    
    // optional int32 vip_type = 8;
    if (has_vip_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_type());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 online_flag = 9;
    if (has_online_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->online_flag());
    }
    
    // optional int32 prepare = 10;
    if (has_prepare()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prepare());
    }
    
    // optional string league_name = 11;
    if (has_league_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->league_name());
    }
    
    // optional int32 team_num = 12;
    if (has_team_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_num());
    }
    
    // optional int32 team_limit = 13;
    if (has_team_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_limit());
    }
    
    // optional string prev = 16;
    if (has_prev()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prev());
    }
    
  }
  // repeated .ProtoThreeObj show_info = 14;
  total_size += 1 * this->show_info_size();
  for (int i = 0; i < this->show_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->show_info(i));
  }
  
  // repeated .ProtoPairObj mount_info = 15;
  total_size += 1 * this->mount_info_size();
  for (int i = 0; i < this->mount_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mount_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoTeamer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoTeamer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoTeamer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoTeamer::MergeFrom(const ProtoTeamer& from) {
  GOOGLE_CHECK_NE(&from, this);
  show_info_.MergeFrom(from.show_info_);
  mount_info_.MergeFrom(from.mount_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_full_name()) {
      set_full_name(from.full_name());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_level()) {
      set_role_level(from.role_level());
    }
    if (from.has_role_force()) {
      set_role_force(from.role_force());
    }
    if (from.has_role_career()) {
      set_role_career(from.role_career());
    }
    if (from.has_role_sex()) {
      set_role_sex(from.role_sex());
    }
    if (from.has_vip_type()) {
      set_vip_type(from.vip_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_online_flag()) {
      set_online_flag(from.online_flag());
    }
    if (from.has_prepare()) {
      set_prepare(from.prepare());
    }
    if (from.has_league_name()) {
      set_league_name(from.league_name());
    }
    if (from.has_team_num()) {
      set_team_num(from.team_num());
    }
    if (from.has_team_limit()) {
      set_team_limit(from.team_limit());
    }
    if (from.has_prev()) {
      set_prev(from.prev());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoTeamer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoTeamer::CopyFrom(const ProtoTeamer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoTeamer::IsInitialized() const {
  
  return true;
}

void ProtoTeamer::Swap(ProtoTeamer* other) {
  if (other != this) {
    std::swap(role_name_, other->role_name_);
    std::swap(full_name_, other->full_name_);
    std::swap(role_id_, other->role_id_);
    std::swap(role_level_, other->role_level_);
    std::swap(role_force_, other->role_force_);
    std::swap(role_career_, other->role_career_);
    std::swap(role_sex_, other->role_sex_);
    std::swap(vip_type_, other->vip_type_);
    std::swap(online_flag_, other->online_flag_);
    std::swap(prepare_, other->prepare_);
    std::swap(league_name_, other->league_name_);
    std::swap(team_num_, other->team_num_);
    std::swap(team_limit_, other->team_limit_);
    show_info_.Swap(&other->show_info_);
    mount_info_.Swap(&other->mount_info_);
    std::swap(prev_, other->prev_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoTeamer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoTeamer_descriptor_;
  metadata.reflection = ProtoTeamer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoLimitTimeLabel::kLabelIdFieldNumber;
const int ProtoLimitTimeLabel::kLeftTimeFieldNumber;
#endif  // !_MSC_VER

ProtoLimitTimeLabel::ProtoLimitTimeLabel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoLimitTimeLabel::InitAsDefaultInstance() {
}

ProtoLimitTimeLabel::ProtoLimitTimeLabel(const ProtoLimitTimeLabel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoLimitTimeLabel::SharedCtor() {
  _cached_size_ = 0;
  label_id_ = 0;
  left_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoLimitTimeLabel::~ProtoLimitTimeLabel() {
  SharedDtor();
}

void ProtoLimitTimeLabel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoLimitTimeLabel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoLimitTimeLabel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoLimitTimeLabel_descriptor_;
}

const ProtoLimitTimeLabel& ProtoLimitTimeLabel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoLimitTimeLabel* ProtoLimitTimeLabel::default_instance_ = NULL;

ProtoLimitTimeLabel* ProtoLimitTimeLabel::New() const {
  return new ProtoLimitTimeLabel;
}

void ProtoLimitTimeLabel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    label_id_ = 0;
    left_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoLimitTimeLabel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 label_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &label_id_)));
          set_has_label_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_left_time;
        break;
      }
      
      // optional int32 left_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_time_)));
          set_has_left_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoLimitTimeLabel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 label_id = 1;
  if (has_label_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->label_id(), output);
  }
  
  // optional int32 left_time = 2;
  if (has_left_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->left_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoLimitTimeLabel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 label_id = 1;
  if (has_label_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->label_id(), target);
  }
  
  // optional int32 left_time = 2;
  if (has_left_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->left_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoLimitTimeLabel::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 label_id = 1;
    if (has_label_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->label_id());
    }
    
    // optional int32 left_time = 2;
    if (has_left_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoLimitTimeLabel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoLimitTimeLabel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoLimitTimeLabel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoLimitTimeLabel::MergeFrom(const ProtoLimitTimeLabel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_label_id()) {
      set_label_id(from.label_id());
    }
    if (from.has_left_time()) {
      set_left_time(from.left_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoLimitTimeLabel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoLimitTimeLabel::CopyFrom(const ProtoLimitTimeLabel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoLimitTimeLabel::IsInitialized() const {
  
  return true;
}

void ProtoLimitTimeLabel::Swap(ProtoLimitTimeLabel* other) {
  if (other != this) {
    std::swap(label_id_, other->label_id_);
    std::swap(left_time_, other->left_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoLimitTimeLabel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoLimitTimeLabel_descriptor_;
  metadata.reflection = ProtoLimitTimeLabel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoDivineRecord::kRoleNameFieldNumber;
const int ProtoDivineRecord::kItemIdFieldNumber;
const int ProtoDivineRecord::kItemAmountFieldNumber;
const int ProtoDivineRecord::kRoleIdFieldNumber;
#endif  // !_MSC_VER

ProtoDivineRecord::ProtoDivineRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoDivineRecord::InitAsDefaultInstance() {
}

ProtoDivineRecord::ProtoDivineRecord(const ProtoDivineRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoDivineRecord::SharedCtor() {
  _cached_size_ = 0;
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  item_id_ = 0;
  item_amount_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoDivineRecord::~ProtoDivineRecord() {
  SharedDtor();
}

void ProtoDivineRecord::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoDivineRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoDivineRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoDivineRecord_descriptor_;
}

const ProtoDivineRecord& ProtoDivineRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoDivineRecord* ProtoDivineRecord::default_instance_ = NULL;

ProtoDivineRecord* ProtoDivineRecord::New() const {
  return new ProtoDivineRecord;
}

void ProtoDivineRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    item_id_ = 0;
    item_amount_ = 0;
    role_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoDivineRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string role_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }
      
      // optional int32 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_amount;
        break;
      }
      
      // optional int32 item_amount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_amount_)));
          set_has_item_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_role_id;
        break;
      }
      
      // optional int64 role_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoDivineRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string role_name = 1;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->role_name(), output);
  }
  
  // optional int32 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_id(), output);
  }
  
  // optional int32 item_amount = 3;
  if (has_item_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->item_amount(), output);
  }
  
  // optional int64 role_id = 4;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->role_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoDivineRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string role_name = 1;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->role_name(), target);
  }
  
  // optional int32 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_id(), target);
  }
  
  // optional int32 item_amount = 3;
  if (has_item_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->item_amount(), target);
  }
  
  // optional int64 role_id = 4;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->role_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoDivineRecord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string role_name = 1;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }
    
    // optional int32 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }
    
    // optional int32 item_amount = 3;
    if (has_item_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_amount());
    }
    
    // optional int64 role_id = 4;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoDivineRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoDivineRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoDivineRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoDivineRecord::MergeFrom(const ProtoDivineRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_amount()) {
      set_item_amount(from.item_amount());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoDivineRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoDivineRecord::CopyFrom(const ProtoDivineRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoDivineRecord::IsInitialized() const {
  
  return true;
}

void ProtoDivineRecord::Swap(ProtoDivineRecord* other) {
  if (other != this) {
    std::swap(role_name_, other->role_name_);
    std::swap(item_id_, other->item_id_);
    std::swap(item_amount_, other->item_amount_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoDivineRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoDivineRecord_descriptor_;
  metadata.reflection = ProtoDivineRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoAchieveDetail::kAchieveIdFieldNumber;
const int ProtoAchieveDetail::kAchIndexFieldNumber;
const int ProtoAchieveDetail::kFinishNumFieldNumber;
const int ProtoAchieveDetail::kGetStatusFieldNumber;
const int ProtoAchieveDetail::kFinishTickFieldNumber;
const int ProtoAchieveDetail::kSpecialValueFieldNumber;
#endif  // !_MSC_VER

ProtoAchieveDetail::ProtoAchieveDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoAchieveDetail::InitAsDefaultInstance() {
}

ProtoAchieveDetail::ProtoAchieveDetail(const ProtoAchieveDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoAchieveDetail::SharedCtor() {
  _cached_size_ = 0;
  achieve_id_ = 0;
  ach_index_ = 0;
  finish_num_ = 0;
  get_status_ = 0;
  finish_tick_ = GOOGLE_LONGLONG(0);
  special_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoAchieveDetail::~ProtoAchieveDetail() {
  SharedDtor();
}

void ProtoAchieveDetail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoAchieveDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoAchieveDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoAchieveDetail_descriptor_;
}

const ProtoAchieveDetail& ProtoAchieveDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoAchieveDetail* ProtoAchieveDetail::default_instance_ = NULL;

ProtoAchieveDetail* ProtoAchieveDetail::New() const {
  return new ProtoAchieveDetail;
}

void ProtoAchieveDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    achieve_id_ = 0;
    ach_index_ = 0;
    finish_num_ = 0;
    get_status_ = 0;
    finish_tick_ = GOOGLE_LONGLONG(0);
    special_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoAchieveDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 achieve_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &achieve_id_)));
          set_has_achieve_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ach_index;
        break;
      }
      
      // optional int32 ach_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ach_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ach_index_)));
          set_has_ach_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_finish_num;
        break;
      }
      
      // optional int32 finish_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finish_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &finish_num_)));
          set_has_finish_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_get_status;
        break;
      }
      
      // optional int32 get_status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &get_status_)));
          set_has_get_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_finish_tick;
        break;
      }
      
      // optional int64 finish_tick = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finish_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &finish_tick_)));
          set_has_finish_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_special_value;
        break;
      }
      
      // optional int32 special_value = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_special_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &special_value_)));
          set_has_special_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoAchieveDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 achieve_id = 1;
  if (has_achieve_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->achieve_id(), output);
  }
  
  // optional int32 ach_index = 2;
  if (has_ach_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ach_index(), output);
  }
  
  // optional int32 finish_num = 3;
  if (has_finish_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->finish_num(), output);
  }
  
  // optional int32 get_status = 4;
  if (has_get_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->get_status(), output);
  }
  
  // optional int64 finish_tick = 5;
  if (has_finish_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->finish_tick(), output);
  }
  
  // optional int32 special_value = 6;
  if (has_special_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->special_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoAchieveDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 achieve_id = 1;
  if (has_achieve_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->achieve_id(), target);
  }
  
  // optional int32 ach_index = 2;
  if (has_ach_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ach_index(), target);
  }
  
  // optional int32 finish_num = 3;
  if (has_finish_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->finish_num(), target);
  }
  
  // optional int32 get_status = 4;
  if (has_get_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->get_status(), target);
  }
  
  // optional int64 finish_tick = 5;
  if (has_finish_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->finish_tick(), target);
  }
  
  // optional int32 special_value = 6;
  if (has_special_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->special_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoAchieveDetail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 achieve_id = 1;
    if (has_achieve_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->achieve_id());
    }
    
    // optional int32 ach_index = 2;
    if (has_ach_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ach_index());
    }
    
    // optional int32 finish_num = 3;
    if (has_finish_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->finish_num());
    }
    
    // optional int32 get_status = 4;
    if (has_get_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->get_status());
    }
    
    // optional int64 finish_tick = 5;
    if (has_finish_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->finish_tick());
    }
    
    // optional int32 special_value = 6;
    if (has_special_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->special_value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoAchieveDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoAchieveDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoAchieveDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoAchieveDetail::MergeFrom(const ProtoAchieveDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_achieve_id()) {
      set_achieve_id(from.achieve_id());
    }
    if (from.has_ach_index()) {
      set_ach_index(from.ach_index());
    }
    if (from.has_finish_num()) {
      set_finish_num(from.finish_num());
    }
    if (from.has_get_status()) {
      set_get_status(from.get_status());
    }
    if (from.has_finish_tick()) {
      set_finish_tick(from.finish_tick());
    }
    if (from.has_special_value()) {
      set_special_value(from.special_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoAchieveDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoAchieveDetail::CopyFrom(const ProtoAchieveDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoAchieveDetail::IsInitialized() const {
  
  return true;
}

void ProtoAchieveDetail::Swap(ProtoAchieveDetail* other) {
  if (other != this) {
    std::swap(achieve_id_, other->achieve_id_);
    std::swap(ach_index_, other->ach_index_);
    std::swap(finish_num_, other->finish_num_);
    std::swap(get_status_, other->get_status_);
    std::swap(finish_tick_, other->finish_tick_);
    std::swap(special_value_, other->special_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoAchieveDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoAchieveDetail_descriptor_;
  metadata.reflection = ProtoAchieveDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoBrocastRole::kRoleIdFieldNumber;
const int ProtoBrocastRole::kRoleNameFieldNumber;
const int ProtoBrocastRole::kTeamStateFieldNumber;
#endif  // !_MSC_VER

ProtoBrocastRole::ProtoBrocastRole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoBrocastRole::InitAsDefaultInstance() {
}

ProtoBrocastRole::ProtoBrocastRole(const ProtoBrocastRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoBrocastRole::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  team_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoBrocastRole::~ProtoBrocastRole() {
  SharedDtor();
}

void ProtoBrocastRole::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoBrocastRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoBrocastRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoBrocastRole_descriptor_;
}

const ProtoBrocastRole& ProtoBrocastRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoBrocastRole* ProtoBrocastRole::default_instance_ = NULL;

ProtoBrocastRole* ProtoBrocastRole::New() const {
  return new ProtoBrocastRole;
}

void ProtoBrocastRole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_LONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    team_state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoBrocastRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_name;
        break;
      }
      
      // optional string role_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_team_state;
        break;
      }
      
      // optional int32 team_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_state_)));
          set_has_team_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoBrocastRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_id(), output);
  }
  
  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->role_name(), output);
  }
  
  // optional int32 team_state = 3;
  if (has_team_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->team_state(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoBrocastRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_id(), target);
  }
  
  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }
  
  // optional int32 team_state = 3;
  if (has_team_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->team_state(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoBrocastRole::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional string role_name = 2;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }
    
    // optional int32 team_state = 3;
    if (has_team_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_state());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoBrocastRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoBrocastRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoBrocastRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoBrocastRole::MergeFrom(const ProtoBrocastRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_team_state()) {
      set_team_state(from.team_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoBrocastRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoBrocastRole::CopyFrom(const ProtoBrocastRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoBrocastRole::IsInitialized() const {
  
  return true;
}

void ProtoBrocastRole::Swap(ProtoBrocastRole* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(team_state_, other->team_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoBrocastRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoBrocastRole_descriptor_;
  metadata.reflection = ProtoBrocastRole_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoMonster::kSortFieldNumber;
const int ProtoMonster::kLeftAmountFieldNumber;
const int ProtoMonster::kTotalAmountFieldNumber;
const int ProtoMonster::kCoordFieldNumber;
#endif  // !_MSC_VER

ProtoMonster::ProtoMonster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoMonster::InitAsDefaultInstance() {
  coord_ = const_cast< ::ProtoCoord*>(&::ProtoCoord::default_instance());
}

ProtoMonster::ProtoMonster(const ProtoMonster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoMonster::SharedCtor() {
  _cached_size_ = 0;
  sort_ = 0;
  left_amount_ = 0;
  total_amount_ = 0;
  coord_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoMonster::~ProtoMonster() {
  SharedDtor();
}

void ProtoMonster::SharedDtor() {
  if (this != default_instance_) {
    delete coord_;
  }
}

void ProtoMonster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoMonster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoMonster_descriptor_;
}

const ProtoMonster& ProtoMonster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoMonster* ProtoMonster::default_instance_ = NULL;

ProtoMonster* ProtoMonster::New() const {
  return new ProtoMonster;
}

void ProtoMonster::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sort_ = 0;
    left_amount_ = 0;
    total_amount_ = 0;
    if (has_coord()) {
      if (coord_ != NULL) coord_->::ProtoCoord::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoMonster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sort = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sort_)));
          set_has_sort();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_left_amount;
        break;
      }
      
      // optional int32 left_amount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_amount_)));
          set_has_left_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total_amount;
        break;
      }
      
      // optional int32 total_amount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_amount_)));
          set_has_total_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_coord;
        break;
      }
      
      // optional .ProtoCoord coord = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_coord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coord()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoMonster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 sort = 1;
  if (has_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sort(), output);
  }
  
  // optional int32 left_amount = 2;
  if (has_left_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->left_amount(), output);
  }
  
  // optional int32 total_amount = 3;
  if (has_total_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->total_amount(), output);
  }
  
  // optional .ProtoCoord coord = 4;
  if (has_coord()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->coord(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoMonster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 sort = 1;
  if (has_sort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sort(), target);
  }
  
  // optional int32 left_amount = 2;
  if (has_left_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->left_amount(), target);
  }
  
  // optional int32 total_amount = 3;
  if (has_total_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->total_amount(), target);
  }
  
  // optional .ProtoCoord coord = 4;
  if (has_coord()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->coord(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoMonster::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sort = 1;
    if (has_sort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sort());
    }
    
    // optional int32 left_amount = 2;
    if (has_left_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_amount());
    }
    
    // optional int32 total_amount = 3;
    if (has_total_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_amount());
    }
    
    // optional .ProtoCoord coord = 4;
    if (has_coord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->coord());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoMonster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoMonster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoMonster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoMonster::MergeFrom(const ProtoMonster& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sort()) {
      set_sort(from.sort());
    }
    if (from.has_left_amount()) {
      set_left_amount(from.left_amount());
    }
    if (from.has_total_amount()) {
      set_total_amount(from.total_amount());
    }
    if (from.has_coord()) {
      mutable_coord()->::ProtoCoord::MergeFrom(from.coord());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoMonster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMonster::CopyFrom(const ProtoMonster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMonster::IsInitialized() const {
  
  return true;
}

void ProtoMonster::Swap(ProtoMonster* other) {
  if (other != this) {
    std::swap(sort_, other->sort_);
    std::swap(left_amount_, other->left_amount_);
    std::swap(total_amount_, other->total_amount_);
    std::swap(coord_, other->coord_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoMonster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoMonster_descriptor_;
  metadata.reflection = ProtoMonster_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoActivityInfo::kActivityIdFieldNumber;
const int ProtoActivityInfo::kActivityStateFieldNumber;
const int ProtoActivityInfo::kIconBlingFieldNumber;
const int ProtoActivityInfo::kLeftTimeFieldNumber;
const int ProtoActivityInfo::kSubValueFieldNumber;
#endif  // !_MSC_VER

ProtoActivityInfo::ProtoActivityInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoActivityInfo::InitAsDefaultInstance() {
}

ProtoActivityInfo::ProtoActivityInfo(const ProtoActivityInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoActivityInfo::SharedCtor() {
  _cached_size_ = 0;
  activity_id_ = 0;
  activity_state_ = 0;
  icon_bling_ = 0;
  left_time_ = 0;
  sub_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoActivityInfo::~ProtoActivityInfo() {
  SharedDtor();
}

void ProtoActivityInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoActivityInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoActivityInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoActivityInfo_descriptor_;
}

const ProtoActivityInfo& ProtoActivityInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoActivityInfo* ProtoActivityInfo::default_instance_ = NULL;

ProtoActivityInfo* ProtoActivityInfo::New() const {
  return new ProtoActivityInfo;
}

void ProtoActivityInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activity_id_ = 0;
    activity_state_ = 0;
    icon_bling_ = 0;
    left_time_ = 0;
    sub_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoActivityInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 activity_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activity_id_)));
          set_has_activity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_activity_state;
        break;
      }
      
      // optional int32 activity_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activity_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activity_state_)));
          set_has_activity_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_icon_bling;
        break;
      }
      
      // optional int32 icon_bling = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_icon_bling:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icon_bling_)));
          set_has_icon_bling();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_left_time;
        break;
      }
      
      // optional int32 left_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_time_)));
          set_has_left_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sub_value;
        break;
      }
      
      // optional int32 sub_value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub_value_)));
          set_has_sub_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoActivityInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 activity_id = 1;
  if (has_activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->activity_id(), output);
  }
  
  // optional int32 activity_state = 2;
  if (has_activity_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->activity_state(), output);
  }
  
  // optional int32 icon_bling = 3;
  if (has_icon_bling()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->icon_bling(), output);
  }
  
  // optional int32 left_time = 4;
  if (has_left_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->left_time(), output);
  }
  
  // optional int32 sub_value = 5;
  if (has_sub_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sub_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoActivityInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 activity_id = 1;
  if (has_activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->activity_id(), target);
  }
  
  // optional int32 activity_state = 2;
  if (has_activity_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->activity_state(), target);
  }
  
  // optional int32 icon_bling = 3;
  if (has_icon_bling()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->icon_bling(), target);
  }
  
  // optional int32 left_time = 4;
  if (has_left_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->left_time(), target);
  }
  
  // optional int32 sub_value = 5;
  if (has_sub_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sub_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoActivityInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 activity_id = 1;
    if (has_activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activity_id());
    }
    
    // optional int32 activity_state = 2;
    if (has_activity_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activity_state());
    }
    
    // optional int32 icon_bling = 3;
    if (has_icon_bling()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icon_bling());
    }
    
    // optional int32 left_time = 4;
    if (has_left_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_time());
    }
    
    // optional int32 sub_value = 5;
    if (has_sub_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sub_value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoActivityInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoActivityInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoActivityInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoActivityInfo::MergeFrom(const ProtoActivityInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity_id()) {
      set_activity_id(from.activity_id());
    }
    if (from.has_activity_state()) {
      set_activity_state(from.activity_state());
    }
    if (from.has_icon_bling()) {
      set_icon_bling(from.icon_bling());
    }
    if (from.has_left_time()) {
      set_left_time(from.left_time());
    }
    if (from.has_sub_value()) {
      set_sub_value(from.sub_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoActivityInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoActivityInfo::CopyFrom(const ProtoActivityInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoActivityInfo::IsInitialized() const {
  
  return true;
}

void ProtoActivityInfo::Swap(ProtoActivityInfo* other) {
  if (other != this) {
    std::swap(activity_id_, other->activity_id_);
    std::swap(activity_state_, other->activity_state_);
    std::swap(icon_bling_, other->icon_bling_);
    std::swap(left_time_, other->left_time_);
    std::swap(sub_value_, other->sub_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoActivityInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoActivityInfo_descriptor_;
  metadata.reflection = ProtoActivityInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoBeast::kBeastIdFieldNumber;
const int ProtoBeast::kBeastSortFieldNumber;
const int ProtoBeast::kBasicAttckFieldNumber;
const int ProtoBeast::kBasicHitFieldNumber;
const int ProtoBeast::kBasicCritFieldNumber;
const int ProtoBeast::kBeastNameFieldNumber;
const int ProtoBeast::kSkillSetFieldNumber;
const int ProtoBeast::kBeastPosFieldNumber;
const int ProtoBeast::kBeastForceFieldNumber;
const int ProtoBeast::kAbilityFieldNumber;
const int ProtoBeast::kGrowthLvlFieldNumber;
const int ProtoBeast::kGrowthValueFieldNumber;
const int ProtoBeast::kBeastSoulFieldNumber;
const int ProtoBeast::kSoulValueFieldNumber;
const int ProtoBeast::kBeastLevelFieldNumber;
const int ProtoBeast::kColorFieldNumber;
const int ProtoBeast::kCombineFieldNumber;
const int ProtoBeast::kGuardFieldNumber;
#endif  // !_MSC_VER

ProtoBeast::ProtoBeast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoBeast::InitAsDefaultInstance() {
}

ProtoBeast::ProtoBeast(const ProtoBeast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoBeast::SharedCtor() {
  _cached_size_ = 0;
  beast_id_ = GOOGLE_LONGLONG(0);
  beast_sort_ = 0;
  basic_attck_ = 0;
  basic_hit_ = 0;
  basic_crit_ = 0;
  beast_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  beast_pos_ = 0;
  beast_force_ = 0;
  ability_ = 0;
  growth_lvl_ = 0;
  growth_value_ = 0;
  beast_level_ = 0;
  color_ = 0;
  combine_ = 0;
  guard_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoBeast::~ProtoBeast() {
  SharedDtor();
}

void ProtoBeast::SharedDtor() {
  if (beast_name_ != &::google::protobuf::internal::kEmptyString) {
    delete beast_name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoBeast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoBeast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoBeast_descriptor_;
}

const ProtoBeast& ProtoBeast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoBeast* ProtoBeast::default_instance_ = NULL;

ProtoBeast* ProtoBeast::New() const {
  return new ProtoBeast;
}

void ProtoBeast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    beast_id_ = GOOGLE_LONGLONG(0);
    beast_sort_ = 0;
    basic_attck_ = 0;
    basic_hit_ = 0;
    basic_crit_ = 0;
    if (has_beast_name()) {
      if (beast_name_ != &::google::protobuf::internal::kEmptyString) {
        beast_name_->clear();
      }
    }
    beast_pos_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    beast_force_ = 0;
    ability_ = 0;
    growth_lvl_ = 0;
    growth_value_ = 0;
    beast_level_ = 0;
    color_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    combine_ = 0;
    guard_ = 0;
  }
  skill_set_.Clear();
  beast_soul_.Clear();
  soul_value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoBeast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 beast_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &beast_id_)));
          set_has_beast_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_beast_sort;
        break;
      }
      
      // optional int32 beast_sort = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beast_sort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beast_sort_)));
          set_has_beast_sort();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_basic_attck;
        break;
      }
      
      // optional int32 basic_attck = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_basic_attck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &basic_attck_)));
          set_has_basic_attck();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_basic_hit;
        break;
      }
      
      // optional int32 basic_hit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_basic_hit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &basic_hit_)));
          set_has_basic_hit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_basic_crit;
        break;
      }
      
      // optional int32 basic_crit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_basic_crit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &basic_crit_)));
          set_has_basic_crit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_beast_name;
        break;
      }
      
      // optional string beast_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beast_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_beast_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->beast_name().data(), this->beast_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_skill_set;
        break;
      }
      
      // repeated .ProtoBeastSkill skill_set = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill_set()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_skill_set;
        if (input->ExpectTag(64)) goto parse_beast_pos;
        break;
      }
      
      // optional int32 beast_pos = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beast_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beast_pos_)));
          set_has_beast_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_beast_force;
        break;
      }
      
      // optional int32 beast_force = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beast_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beast_force_)));
          set_has_beast_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_ability;
        break;
      }
      
      // optional int32 ability = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ability_)));
          set_has_ability();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_growth_lvl;
        break;
      }
      
      // optional int32 growth_lvl = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_growth_lvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &growth_lvl_)));
          set_has_growth_lvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_growth_value;
        break;
      }
      
      // optional int32 growth_value = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_growth_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &growth_value_)));
          set_has_growth_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_beast_soul;
        break;
      }
      
      // repeated int32 beast_soul = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beast_soul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 104, input, this->mutable_beast_soul())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_beast_soul())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_beast_soul;
        if (input->ExpectTag(112)) goto parse_soul_value;
        break;
      }
      
      // repeated int32 soul_value = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_soul_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 112, input, this->mutable_soul_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_soul_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_soul_value;
        if (input->ExpectTag(120)) goto parse_beast_level;
        break;
      }
      
      // optional int32 beast_level = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beast_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beast_level_)));
          set_has_beast_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_color;
        break;
      }
      
      // optional int32 color = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_combine;
        break;
      }
      
      // optional int32 combine = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combine_)));
          set_has_combine();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_guard;
        break;
      }
      
      // optional int32 guard = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guard_)));
          set_has_guard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoBeast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 beast_id = 1;
  if (has_beast_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->beast_id(), output);
  }
  
  // optional int32 beast_sort = 2;
  if (has_beast_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->beast_sort(), output);
  }
  
  // optional int32 basic_attck = 3;
  if (has_basic_attck()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->basic_attck(), output);
  }
  
  // optional int32 basic_hit = 4;
  if (has_basic_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->basic_hit(), output);
  }
  
  // optional int32 basic_crit = 5;
  if (has_basic_crit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->basic_crit(), output);
  }
  
  // optional string beast_name = 6;
  if (has_beast_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beast_name().data(), this->beast_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->beast_name(), output);
  }
  
  // repeated .ProtoBeastSkill skill_set = 7;
  for (int i = 0; i < this->skill_set_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->skill_set(i), output);
  }
  
  // optional int32 beast_pos = 8;
  if (has_beast_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->beast_pos(), output);
  }
  
  // optional int32 beast_force = 9;
  if (has_beast_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->beast_force(), output);
  }
  
  // optional int32 ability = 10;
  if (has_ability()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->ability(), output);
  }
  
  // optional int32 growth_lvl = 11;
  if (has_growth_lvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->growth_lvl(), output);
  }
  
  // optional int32 growth_value = 12;
  if (has_growth_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->growth_value(), output);
  }
  
  // repeated int32 beast_soul = 13;
  for (int i = 0; i < this->beast_soul_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      13, this->beast_soul(i), output);
  }
  
  // repeated int32 soul_value = 14;
  for (int i = 0; i < this->soul_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      14, this->soul_value(i), output);
  }
  
  // optional int32 beast_level = 15;
  if (has_beast_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->beast_level(), output);
  }
  
  // optional int32 color = 16;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->color(), output);
  }
  
  // optional int32 combine = 17;
  if (has_combine()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->combine(), output);
  }
  
  // optional int32 guard = 18;
  if (has_guard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->guard(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoBeast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 beast_id = 1;
  if (has_beast_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->beast_id(), target);
  }
  
  // optional int32 beast_sort = 2;
  if (has_beast_sort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->beast_sort(), target);
  }
  
  // optional int32 basic_attck = 3;
  if (has_basic_attck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->basic_attck(), target);
  }
  
  // optional int32 basic_hit = 4;
  if (has_basic_hit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->basic_hit(), target);
  }
  
  // optional int32 basic_crit = 5;
  if (has_basic_crit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->basic_crit(), target);
  }
  
  // optional string beast_name = 6;
  if (has_beast_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beast_name().data(), this->beast_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->beast_name(), target);
  }
  
  // repeated .ProtoBeastSkill skill_set = 7;
  for (int i = 0; i < this->skill_set_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->skill_set(i), target);
  }
  
  // optional int32 beast_pos = 8;
  if (has_beast_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->beast_pos(), target);
  }
  
  // optional int32 beast_force = 9;
  if (has_beast_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->beast_force(), target);
  }
  
  // optional int32 ability = 10;
  if (has_ability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->ability(), target);
  }
  
  // optional int32 growth_lvl = 11;
  if (has_growth_lvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->growth_lvl(), target);
  }
  
  // optional int32 growth_value = 12;
  if (has_growth_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->growth_value(), target);
  }
  
  // repeated int32 beast_soul = 13;
  for (int i = 0; i < this->beast_soul_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(13, this->beast_soul(i), target);
  }
  
  // repeated int32 soul_value = 14;
  for (int i = 0; i < this->soul_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(14, this->soul_value(i), target);
  }
  
  // optional int32 beast_level = 15;
  if (has_beast_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->beast_level(), target);
  }
  
  // optional int32 color = 16;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->color(), target);
  }
  
  // optional int32 combine = 17;
  if (has_combine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->combine(), target);
  }
  
  // optional int32 guard = 18;
  if (has_guard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->guard(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoBeast::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 beast_id = 1;
    if (has_beast_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->beast_id());
    }
    
    // optional int32 beast_sort = 2;
    if (has_beast_sort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->beast_sort());
    }
    
    // optional int32 basic_attck = 3;
    if (has_basic_attck()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->basic_attck());
    }
    
    // optional int32 basic_hit = 4;
    if (has_basic_hit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->basic_hit());
    }
    
    // optional int32 basic_crit = 5;
    if (has_basic_crit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->basic_crit());
    }
    
    // optional string beast_name = 6;
    if (has_beast_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->beast_name());
    }
    
    // optional int32 beast_pos = 8;
    if (has_beast_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->beast_pos());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 beast_force = 9;
    if (has_beast_force()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->beast_force());
    }
    
    // optional int32 ability = 10;
    if (has_ability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ability());
    }
    
    // optional int32 growth_lvl = 11;
    if (has_growth_lvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->growth_lvl());
    }
    
    // optional int32 growth_value = 12;
    if (has_growth_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->growth_value());
    }
    
    // optional int32 beast_level = 15;
    if (has_beast_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->beast_level());
    }
    
    // optional int32 color = 16;
    if (has_color()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 combine = 17;
    if (has_combine()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combine());
    }
    
    // optional int32 guard = 18;
    if (has_guard()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guard());
    }
    
  }
  // repeated .ProtoBeastSkill skill_set = 7;
  total_size += 1 * this->skill_set_size();
  for (int i = 0; i < this->skill_set_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill_set(i));
  }
  
  // repeated int32 beast_soul = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->beast_soul_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->beast_soul(i));
    }
    total_size += 1 * this->beast_soul_size() + data_size;
  }
  
  // repeated int32 soul_value = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->soul_value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->soul_value(i));
    }
    total_size += 1 * this->soul_value_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoBeast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoBeast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoBeast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoBeast::MergeFrom(const ProtoBeast& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_set_.MergeFrom(from.skill_set_);
  beast_soul_.MergeFrom(from.beast_soul_);
  soul_value_.MergeFrom(from.soul_value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_beast_id()) {
      set_beast_id(from.beast_id());
    }
    if (from.has_beast_sort()) {
      set_beast_sort(from.beast_sort());
    }
    if (from.has_basic_attck()) {
      set_basic_attck(from.basic_attck());
    }
    if (from.has_basic_hit()) {
      set_basic_hit(from.basic_hit());
    }
    if (from.has_basic_crit()) {
      set_basic_crit(from.basic_crit());
    }
    if (from.has_beast_name()) {
      set_beast_name(from.beast_name());
    }
    if (from.has_beast_pos()) {
      set_beast_pos(from.beast_pos());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_beast_force()) {
      set_beast_force(from.beast_force());
    }
    if (from.has_ability()) {
      set_ability(from.ability());
    }
    if (from.has_growth_lvl()) {
      set_growth_lvl(from.growth_lvl());
    }
    if (from.has_growth_value()) {
      set_growth_value(from.growth_value());
    }
    if (from.has_beast_level()) {
      set_beast_level(from.beast_level());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_combine()) {
      set_combine(from.combine());
    }
    if (from.has_guard()) {
      set_guard(from.guard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoBeast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoBeast::CopyFrom(const ProtoBeast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoBeast::IsInitialized() const {
  
  return true;
}

void ProtoBeast::Swap(ProtoBeast* other) {
  if (other != this) {
    std::swap(beast_id_, other->beast_id_);
    std::swap(beast_sort_, other->beast_sort_);
    std::swap(basic_attck_, other->basic_attck_);
    std::swap(basic_hit_, other->basic_hit_);
    std::swap(basic_crit_, other->basic_crit_);
    std::swap(beast_name_, other->beast_name_);
    skill_set_.Swap(&other->skill_set_);
    std::swap(beast_pos_, other->beast_pos_);
    std::swap(beast_force_, other->beast_force_);
    std::swap(ability_, other->ability_);
    std::swap(growth_lvl_, other->growth_lvl_);
    std::swap(growth_value_, other->growth_value_);
    beast_soul_.Swap(&other->beast_soul_);
    soul_value_.Swap(&other->soul_value_);
    std::swap(beast_level_, other->beast_level_);
    std::swap(color_, other->color_);
    std::swap(combine_, other->combine_);
    std::swap(guard_, other->guard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoBeast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoBeast_descriptor_;
  metadata.reflection = ProtoBeast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoFlaunt::kFlauntIdFieldNumber;
const int ProtoFlaunt::kColorFieldNumber;
const int ProtoFlaunt::kContentFieldNumber;
#endif  // !_MSC_VER

ProtoFlaunt::ProtoFlaunt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoFlaunt::InitAsDefaultInstance() {
}

ProtoFlaunt::ProtoFlaunt(const ProtoFlaunt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoFlaunt::SharedCtor() {
  _cached_size_ = 0;
  flaunt_id_ = GOOGLE_LONGLONG(0);
  color_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoFlaunt::~ProtoFlaunt() {
  SharedDtor();
}

void ProtoFlaunt::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void ProtoFlaunt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoFlaunt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoFlaunt_descriptor_;
}

const ProtoFlaunt& ProtoFlaunt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoFlaunt* ProtoFlaunt::default_instance_ = NULL;

ProtoFlaunt* ProtoFlaunt::New() const {
  return new ProtoFlaunt;
}

void ProtoFlaunt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flaunt_id_ = GOOGLE_LONGLONG(0);
    color_ = 0;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoFlaunt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 flaunt_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &flaunt_id_)));
          set_has_flaunt_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_color;
        break;
      }
      
      // optional int32 color = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }
      
      // optional string content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoFlaunt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 flaunt_id = 1;
  if (has_flaunt_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->flaunt_id(), output);
  }
  
  // optional int32 color = 2;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->color(), output);
  }
  
  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->content(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoFlaunt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 flaunt_id = 1;
  if (has_flaunt_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->flaunt_id(), target);
  }
  
  // optional int32 color = 2;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->color(), target);
  }
  
  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoFlaunt::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 flaunt_id = 1;
    if (has_flaunt_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->flaunt_id());
    }
    
    // optional int32 color = 2;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }
    
    // optional string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoFlaunt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoFlaunt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoFlaunt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoFlaunt::MergeFrom(const ProtoFlaunt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flaunt_id()) {
      set_flaunt_id(from.flaunt_id());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoFlaunt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoFlaunt::CopyFrom(const ProtoFlaunt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoFlaunt::IsInitialized() const {
  
  return true;
}

void ProtoFlaunt::Swap(ProtoFlaunt* other) {
  if (other != this) {
    std::swap(flaunt_id_, other->flaunt_id_);
    std::swap(color_, other->color_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoFlaunt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoFlaunt_descriptor_;
  metadata.reflection = ProtoFlaunt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoSyncLeague::kLeagueIndexFieldNumber;
const int ProtoSyncLeague::kLeagueNameFieldNumber;
const int ProtoSyncLeague::kLeagueLevelFieldNumber;
const int ProtoSyncLeague::kForceFieldNumber;
#endif  // !_MSC_VER

ProtoSyncLeague::ProtoSyncLeague()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoSyncLeague::InitAsDefaultInstance() {
}

ProtoSyncLeague::ProtoSyncLeague(const ProtoSyncLeague& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoSyncLeague::SharedCtor() {
  _cached_size_ = 0;
  league_index_ = GOOGLE_LONGLONG(0);
  league_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  league_level_ = 0;
  force_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoSyncLeague::~ProtoSyncLeague() {
  SharedDtor();
}

void ProtoSyncLeague::SharedDtor() {
  if (league_name_ != &::google::protobuf::internal::kEmptyString) {
    delete league_name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoSyncLeague::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoSyncLeague::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoSyncLeague_descriptor_;
}

const ProtoSyncLeague& ProtoSyncLeague::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoSyncLeague* ProtoSyncLeague::default_instance_ = NULL;

ProtoSyncLeague* ProtoSyncLeague::New() const {
  return new ProtoSyncLeague;
}

void ProtoSyncLeague::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    league_index_ = GOOGLE_LONGLONG(0);
    if (has_league_name()) {
      if (league_name_ != &::google::protobuf::internal::kEmptyString) {
        league_name_->clear();
      }
    }
    league_level_ = 0;
    force_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoSyncLeague::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 league_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &league_index_)));
          set_has_league_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_league_name;
        break;
      }
      
      // optional string league_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_league_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_league_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->league_name().data(), this->league_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_league_level;
        break;
      }
      
      // optional int32 league_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_league_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &league_level_)));
          set_has_league_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_force;
        break;
      }
      
      // optional int32 force = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &force_)));
          set_has_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoSyncLeague::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 league_index = 1;
  if (has_league_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->league_index(), output);
  }
  
  // optional string league_name = 2;
  if (has_league_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->league_name().data(), this->league_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->league_name(), output);
  }
  
  // optional int32 league_level = 3;
  if (has_league_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->league_level(), output);
  }
  
  // optional int32 force = 4;
  if (has_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->force(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoSyncLeague::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 league_index = 1;
  if (has_league_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->league_index(), target);
  }
  
  // optional string league_name = 2;
  if (has_league_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->league_name().data(), this->league_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->league_name(), target);
  }
  
  // optional int32 league_level = 3;
  if (has_league_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->league_level(), target);
  }
  
  // optional int32 force = 4;
  if (has_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->force(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoSyncLeague::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 league_index = 1;
    if (has_league_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->league_index());
    }
    
    // optional string league_name = 2;
    if (has_league_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->league_name());
    }
    
    // optional int32 league_level = 3;
    if (has_league_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->league_level());
    }
    
    // optional int32 force = 4;
    if (has_force()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->force());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoSyncLeague::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoSyncLeague* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoSyncLeague*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoSyncLeague::MergeFrom(const ProtoSyncLeague& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_league_index()) {
      set_league_index(from.league_index());
    }
    if (from.has_league_name()) {
      set_league_name(from.league_name());
    }
    if (from.has_league_level()) {
      set_league_level(from.league_level());
    }
    if (from.has_force()) {
      set_force(from.force());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoSyncLeague::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoSyncLeague::CopyFrom(const ProtoSyncLeague& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoSyncLeague::IsInitialized() const {
  
  return true;
}

void ProtoSyncLeague::Swap(ProtoSyncLeague* other) {
  if (other != this) {
    std::swap(league_index_, other->league_index_);
    std::swap(league_name_, other->league_name_);
    std::swap(league_level_, other->league_level_);
    std::swap(force_, other->force_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoSyncLeague::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoSyncLeague_descriptor_;
  metadata.reflection = ProtoSyncLeague_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoLeagueFighter::kRoleNameFieldNumber;
const int ProtoLeagueFighter::kRoleSexFieldNumber;
const int ProtoLeagueFighter::kRoleLevelFieldNumber;
#endif  // !_MSC_VER

ProtoLeagueFighter::ProtoLeagueFighter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoLeagueFighter::InitAsDefaultInstance() {
}

ProtoLeagueFighter::ProtoLeagueFighter(const ProtoLeagueFighter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoLeagueFighter::SharedCtor() {
  _cached_size_ = 0;
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_sex_ = 0;
  role_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoLeagueFighter::~ProtoLeagueFighter() {
  SharedDtor();
}

void ProtoLeagueFighter::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoLeagueFighter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoLeagueFighter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoLeagueFighter_descriptor_;
}

const ProtoLeagueFighter& ProtoLeagueFighter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoLeagueFighter* ProtoLeagueFighter::default_instance_ = NULL;

ProtoLeagueFighter* ProtoLeagueFighter::New() const {
  return new ProtoLeagueFighter;
}

void ProtoLeagueFighter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    role_sex_ = 0;
    role_level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoLeagueFighter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string role_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_sex;
        break;
      }
      
      // optional int32 role_sex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_sex_)));
          set_has_role_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_level;
        break;
      }
      
      // optional int32 role_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_level_)));
          set_has_role_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoLeagueFighter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string role_name = 1;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->role_name(), output);
  }
  
  // optional int32 role_sex = 2;
  if (has_role_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->role_sex(), output);
  }
  
  // optional int32 role_level = 3;
  if (has_role_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->role_level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoLeagueFighter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string role_name = 1;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->role_name(), target);
  }
  
  // optional int32 role_sex = 2;
  if (has_role_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->role_sex(), target);
  }
  
  // optional int32 role_level = 3;
  if (has_role_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->role_level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoLeagueFighter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string role_name = 1;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }
    
    // optional int32 role_sex = 2;
    if (has_role_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_sex());
    }
    
    // optional int32 role_level = 3;
    if (has_role_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoLeagueFighter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoLeagueFighter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoLeagueFighter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoLeagueFighter::MergeFrom(const ProtoLeagueFighter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_role_sex()) {
      set_role_sex(from.role_sex());
    }
    if (from.has_role_level()) {
      set_role_level(from.role_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoLeagueFighter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoLeagueFighter::CopyFrom(const ProtoLeagueFighter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoLeagueFighter::IsInitialized() const {
  
  return true;
}

void ProtoLeagueFighter::Swap(ProtoLeagueFighter* other) {
  if (other != this) {
    std::swap(role_name_, other->role_name_);
    std::swap(role_sex_, other->role_sex_);
    std::swap(role_level_, other->role_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoLeagueFighter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoLeagueFighter_descriptor_;
  metadata.reflection = ProtoLeagueFighter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoExpRestore::kActivityIdFieldNumber;
const int ProtoExpRestore::kRestoreCountFieldNumber;
const int ProtoExpRestore::kMoneyFieldNumber;
const int ProtoExpRestore::kExpFieldNumber;
const int ProtoExpRestore::kReputationFieldNumber;
const int ProtoExpRestore::kHonourFieldNumber;
const int ProtoExpRestore::kExploitFieldNumber;
const int ProtoExpRestore::kLeagueContriFieldNumber;
const int ProtoExpRestore::kReikiFieldNumber;
const int ProtoExpRestore::kFreeRewardListFieldNumber;
const int ProtoExpRestore::kMoneyRewardListFieldNumber;
const int ProtoExpRestore::kFreeRateFieldNumber;
const int ProtoExpRestore::kNeedMoneyFieldNumber;
const int ProtoExpRestore::kOpenLevelFieldNumber;
const int ProtoExpRestore::kVipLimitFieldNumber;
const int ProtoExpRestore::kShowIndexFieldNumber;
#endif  // !_MSC_VER

ProtoExpRestore::ProtoExpRestore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoExpRestore::InitAsDefaultInstance() {
  money_ = const_cast< ::ProtoMoney*>(&::ProtoMoney::default_instance());
}

ProtoExpRestore::ProtoExpRestore(const ProtoExpRestore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoExpRestore::SharedCtor() {
  _cached_size_ = 0;
  activity_id_ = 0;
  restore_count_ = 0;
  money_ = NULL;
  exp_ = 0;
  reputation_ = 0;
  honour_ = 0;
  exploit_ = 0;
  league_contri_ = 0;
  reiki_ = 0;
  free_rate_ = 0;
  need_money_ = 0;
  open_level_ = 0;
  vip_limit_ = 0;
  show_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoExpRestore::~ProtoExpRestore() {
  SharedDtor();
}

void ProtoExpRestore::SharedDtor() {
  if (this != default_instance_) {
    delete money_;
  }
}

void ProtoExpRestore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoExpRestore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoExpRestore_descriptor_;
}

const ProtoExpRestore& ProtoExpRestore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoExpRestore* ProtoExpRestore::default_instance_ = NULL;

ProtoExpRestore* ProtoExpRestore::New() const {
  return new ProtoExpRestore;
}

void ProtoExpRestore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activity_id_ = 0;
    restore_count_ = 0;
    if (has_money()) {
      if (money_ != NULL) money_->::ProtoMoney::Clear();
    }
    exp_ = 0;
    reputation_ = 0;
    honour_ = 0;
    exploit_ = 0;
    league_contri_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    reiki_ = 0;
    free_rate_ = 0;
    need_money_ = 0;
    open_level_ = 0;
    vip_limit_ = 0;
    show_index_ = 0;
  }
  free_reward_list_.Clear();
  money_reward_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoExpRestore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 activity_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activity_id_)));
          set_has_activity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_restore_count;
        break;
      }
      
      // optional int32 restore_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_restore_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &restore_count_)));
          set_has_restore_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_money;
        break;
      }
      
      // optional .ProtoMoney money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_money:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_money()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }
      
      // optional int32 exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_reputation;
        break;
      }
      
      // optional int32 reputation = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reputation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reputation_)));
          set_has_reputation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_honour;
        break;
      }
      
      // optional int32 honour = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_honour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &honour_)));
          set_has_honour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_exploit;
        break;
      }
      
      // optional int32 exploit = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exploit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exploit_)));
          set_has_exploit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_league_contri;
        break;
      }
      
      // optional int32 league_contri = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_league_contri:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &league_contri_)));
          set_has_league_contri();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_reiki;
        break;
      }
      
      // optional int32 reiki = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reiki:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reiki_)));
          set_has_reiki();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_free_reward_list;
        break;
      }
      
      // repeated int32 free_reward_list = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_free_reward_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_free_reward_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_free_reward_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_free_reward_list;
        if (input->ExpectTag(88)) goto parse_money_reward_list;
        break;
      }
      
      // repeated int32 money_reward_list = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money_reward_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_money_reward_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_money_reward_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_money_reward_list;
        if (input->ExpectTag(96)) goto parse_free_rate;
        break;
      }
      
      // optional int32 free_rate = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_free_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &free_rate_)));
          set_has_free_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_need_money;
        break;
      }
      
      // optional int32 need_money = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &need_money_)));
          set_has_need_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_open_level;
        break;
      }
      
      // optional int32 open_level = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_level_)));
          set_has_open_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_vip_limit;
        break;
      }
      
      // optional int32 vip_limit = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_limit_)));
          set_has_vip_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_show_index;
        break;
      }
      
      // optional int32 show_index = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &show_index_)));
          set_has_show_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoExpRestore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 activity_id = 1;
  if (has_activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->activity_id(), output);
  }
  
  // optional int32 restore_count = 2;
  if (has_restore_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->restore_count(), output);
  }
  
  // optional .ProtoMoney money = 3;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->money(), output);
  }
  
  // optional int32 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->exp(), output);
  }
  
  // optional int32 reputation = 5;
  if (has_reputation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->reputation(), output);
  }
  
  // optional int32 honour = 6;
  if (has_honour()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->honour(), output);
  }
  
  // optional int32 exploit = 7;
  if (has_exploit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->exploit(), output);
  }
  
  // optional int32 league_contri = 8;
  if (has_league_contri()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->league_contri(), output);
  }
  
  // optional int32 reiki = 9;
  if (has_reiki()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->reiki(), output);
  }
  
  // repeated int32 free_reward_list = 10;
  for (int i = 0; i < this->free_reward_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->free_reward_list(i), output);
  }
  
  // repeated int32 money_reward_list = 11;
  for (int i = 0; i < this->money_reward_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->money_reward_list(i), output);
  }
  
  // optional int32 free_rate = 12;
  if (has_free_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->free_rate(), output);
  }
  
  // optional int32 need_money = 13;
  if (has_need_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->need_money(), output);
  }
  
  // optional int32 open_level = 14;
  if (has_open_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->open_level(), output);
  }
  
  // optional int32 vip_limit = 15;
  if (has_vip_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->vip_limit(), output);
  }
  
  // optional int32 show_index = 16;
  if (has_show_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->show_index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoExpRestore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 activity_id = 1;
  if (has_activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->activity_id(), target);
  }
  
  // optional int32 restore_count = 2;
  if (has_restore_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->restore_count(), target);
  }
  
  // optional .ProtoMoney money = 3;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->money(), target);
  }
  
  // optional int32 exp = 4;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->exp(), target);
  }
  
  // optional int32 reputation = 5;
  if (has_reputation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->reputation(), target);
  }
  
  // optional int32 honour = 6;
  if (has_honour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->honour(), target);
  }
  
  // optional int32 exploit = 7;
  if (has_exploit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->exploit(), target);
  }
  
  // optional int32 league_contri = 8;
  if (has_league_contri()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->league_contri(), target);
  }
  
  // optional int32 reiki = 9;
  if (has_reiki()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->reiki(), target);
  }
  
  // repeated int32 free_reward_list = 10;
  for (int i = 0; i < this->free_reward_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->free_reward_list(i), target);
  }
  
  // repeated int32 money_reward_list = 11;
  for (int i = 0; i < this->money_reward_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->money_reward_list(i), target);
  }
  
  // optional int32 free_rate = 12;
  if (has_free_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->free_rate(), target);
  }
  
  // optional int32 need_money = 13;
  if (has_need_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->need_money(), target);
  }
  
  // optional int32 open_level = 14;
  if (has_open_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->open_level(), target);
  }
  
  // optional int32 vip_limit = 15;
  if (has_vip_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->vip_limit(), target);
  }
  
  // optional int32 show_index = 16;
  if (has_show_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->show_index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoExpRestore::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 activity_id = 1;
    if (has_activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activity_id());
    }
    
    // optional int32 restore_count = 2;
    if (has_restore_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->restore_count());
    }
    
    // optional .ProtoMoney money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->money());
    }
    
    // optional int32 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
    // optional int32 reputation = 5;
    if (has_reputation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reputation());
    }
    
    // optional int32 honour = 6;
    if (has_honour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->honour());
    }
    
    // optional int32 exploit = 7;
    if (has_exploit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exploit());
    }
    
    // optional int32 league_contri = 8;
    if (has_league_contri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->league_contri());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 reiki = 9;
    if (has_reiki()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reiki());
    }
    
    // optional int32 free_rate = 12;
    if (has_free_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->free_rate());
    }
    
    // optional int32 need_money = 13;
    if (has_need_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->need_money());
    }
    
    // optional int32 open_level = 14;
    if (has_open_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open_level());
    }
    
    // optional int32 vip_limit = 15;
    if (has_vip_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_limit());
    }
    
    // optional int32 show_index = 16;
    if (has_show_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->show_index());
    }
    
  }
  // repeated int32 free_reward_list = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->free_reward_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->free_reward_list(i));
    }
    total_size += 1 * this->free_reward_list_size() + data_size;
  }
  
  // repeated int32 money_reward_list = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->money_reward_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->money_reward_list(i));
    }
    total_size += 1 * this->money_reward_list_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoExpRestore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoExpRestore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoExpRestore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoExpRestore::MergeFrom(const ProtoExpRestore& from) {
  GOOGLE_CHECK_NE(&from, this);
  free_reward_list_.MergeFrom(from.free_reward_list_);
  money_reward_list_.MergeFrom(from.money_reward_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity_id()) {
      set_activity_id(from.activity_id());
    }
    if (from.has_restore_count()) {
      set_restore_count(from.restore_count());
    }
    if (from.has_money()) {
      mutable_money()->::ProtoMoney::MergeFrom(from.money());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_reputation()) {
      set_reputation(from.reputation());
    }
    if (from.has_honour()) {
      set_honour(from.honour());
    }
    if (from.has_exploit()) {
      set_exploit(from.exploit());
    }
    if (from.has_league_contri()) {
      set_league_contri(from.league_contri());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_reiki()) {
      set_reiki(from.reiki());
    }
    if (from.has_free_rate()) {
      set_free_rate(from.free_rate());
    }
    if (from.has_need_money()) {
      set_need_money(from.need_money());
    }
    if (from.has_open_level()) {
      set_open_level(from.open_level());
    }
    if (from.has_vip_limit()) {
      set_vip_limit(from.vip_limit());
    }
    if (from.has_show_index()) {
      set_show_index(from.show_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoExpRestore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoExpRestore::CopyFrom(const ProtoExpRestore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoExpRestore::IsInitialized() const {
  
  return true;
}

void ProtoExpRestore::Swap(ProtoExpRestore* other) {
  if (other != this) {
    std::swap(activity_id_, other->activity_id_);
    std::swap(restore_count_, other->restore_count_);
    std::swap(money_, other->money_);
    std::swap(exp_, other->exp_);
    std::swap(reputation_, other->reputation_);
    std::swap(honour_, other->honour_);
    std::swap(exploit_, other->exploit_);
    std::swap(league_contri_, other->league_contri_);
    std::swap(reiki_, other->reiki_);
    free_reward_list_.Swap(&other->free_reward_list_);
    money_reward_list_.Swap(&other->money_reward_list_);
    std::swap(free_rate_, other->free_rate_);
    std::swap(need_money_, other->need_money_);
    std::swap(open_level_, other->open_level_);
    std::swap(vip_limit_, other->vip_limit_);
    std::swap(show_index_, other->show_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoExpRestore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoExpRestore_descriptor_;
  metadata.reflection = ProtoExpRestore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoLMRole::kRankIndexFieldNumber;
const int ProtoLMRole::kRoleIdFieldNumber;
const int ProtoLMRole::kRoleNameFieldNumber;
const int ProtoLMRole::kLeagueNameFieldNumber;
const int ProtoLMRole::kRoleForceFieldNumber;
const int ProtoLMRole::kFightScoreFieldNumber;
const int ProtoLMRole::kSexFieldNumber;
const int ProtoLMRole::kLevelFieldNumber;
#endif  // !_MSC_VER

ProtoLMRole::ProtoLMRole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoLMRole::InitAsDefaultInstance() {
}

ProtoLMRole::ProtoLMRole(const ProtoLMRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoLMRole::SharedCtor() {
  _cached_size_ = 0;
  rank_index_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  league_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_force_ = 0;
  fight_score_ = 0;
  sex_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoLMRole::~ProtoLMRole() {
  SharedDtor();
}

void ProtoLMRole::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (league_name_ != &::google::protobuf::internal::kEmptyString) {
    delete league_name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoLMRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoLMRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoLMRole_descriptor_;
}

const ProtoLMRole& ProtoLMRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoLMRole* ProtoLMRole::default_instance_ = NULL;

ProtoLMRole* ProtoLMRole::New() const {
  return new ProtoLMRole;
}

void ProtoLMRole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_index_ = 0;
    role_id_ = GOOGLE_LONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    if (has_league_name()) {
      if (league_name_ != &::google::protobuf::internal::kEmptyString) {
        league_name_->clear();
      }
    }
    role_force_ = 0;
    fight_score_ = 0;
    sex_ = 0;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoLMRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rank_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_index_)));
          set_has_rank_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }
      
      // optional int64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role_name;
        break;
      }
      
      // optional string role_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_league_name;
        break;
      }
      
      // optional string league_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_league_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_league_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->league_name().data(), this->league_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_role_force;
        break;
      }
      
      // optional int32 role_force = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_force_)));
          set_has_role_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_fight_score;
        break;
      }
      
      // optional int32 fight_score = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_score_)));
          set_has_fight_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_sex;
        break;
      }
      
      // optional int32 sex = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_level;
        break;
      }
      
      // optional int32 level = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoLMRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rank_index = 1;
  if (has_rank_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank_index(), output);
  }
  
  // optional int64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->role_id(), output);
  }
  
  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->role_name(), output);
  }
  
  // optional string league_name = 4;
  if (has_league_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->league_name().data(), this->league_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->league_name(), output);
  }
  
  // optional int32 role_force = 5;
  if (has_role_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->role_force(), output);
  }
  
  // optional int32 fight_score = 6;
  if (has_fight_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->fight_score(), output);
  }
  
  // optional int32 sex = 7;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->sex(), output);
  }
  
  // optional int32 level = 8;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoLMRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rank_index = 1;
  if (has_rank_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank_index(), target);
  }
  
  // optional int64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->role_id(), target);
  }
  
  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->role_name(), target);
  }
  
  // optional string league_name = 4;
  if (has_league_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->league_name().data(), this->league_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->league_name(), target);
  }
  
  // optional int32 role_force = 5;
  if (has_role_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->role_force(), target);
  }
  
  // optional int32 fight_score = 6;
  if (has_fight_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->fight_score(), target);
  }
  
  // optional int32 sex = 7;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->sex(), target);
  }
  
  // optional int32 level = 8;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoLMRole::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rank_index = 1;
    if (has_rank_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_index());
    }
    
    // optional int64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional string role_name = 3;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }
    
    // optional string league_name = 4;
    if (has_league_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->league_name());
    }
    
    // optional int32 role_force = 5;
    if (has_role_force()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_force());
    }
    
    // optional int32 fight_score = 6;
    if (has_fight_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight_score());
    }
    
    // optional int32 sex = 7;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }
    
    // optional int32 level = 8;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoLMRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoLMRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoLMRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoLMRole::MergeFrom(const ProtoLMRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank_index()) {
      set_rank_index(from.rank_index());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_league_name()) {
      set_league_name(from.league_name());
    }
    if (from.has_role_force()) {
      set_role_force(from.role_force());
    }
    if (from.has_fight_score()) {
      set_fight_score(from.fight_score());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoLMRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoLMRole::CopyFrom(const ProtoLMRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoLMRole::IsInitialized() const {
  
  return true;
}

void ProtoLMRole::Swap(ProtoLMRole* other) {
  if (other != this) {
    std::swap(rank_index_, other->rank_index_);
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(league_name_, other->league_name_);
    std::swap(role_force_, other->role_force_);
    std::swap(fight_score_, other->fight_score_);
    std::swap(sex_, other->sex_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoLMRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoLMRole_descriptor_;
  metadata.reflection = ProtoLMRole_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoMarLeague::kRankFieldNumber;
const int ProtoMarLeague::kLeagueIdFieldNumber;
const int ProtoMarLeague::kLeaderNameFieldNumber;
const int ProtoMarLeague::kLeagueNameFieldNumber;
const int ProtoMarLeague::kLeagueForceFieldNumber;
const int ProtoMarLeague::kLeagueScoreFieldNumber;
#endif  // !_MSC_VER

ProtoMarLeague::ProtoMarLeague()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoMarLeague::InitAsDefaultInstance() {
}

ProtoMarLeague::ProtoMarLeague(const ProtoMarLeague& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoMarLeague::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  league_id_ = GOOGLE_LONGLONG(0);
  leader_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  league_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  league_force_ = 0;
  league_score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoMarLeague::~ProtoMarLeague() {
  SharedDtor();
}

void ProtoMarLeague::SharedDtor() {
  if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
    delete leader_name_;
  }
  if (league_name_ != &::google::protobuf::internal::kEmptyString) {
    delete league_name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoMarLeague::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoMarLeague::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoMarLeague_descriptor_;
}

const ProtoMarLeague& ProtoMarLeague::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoMarLeague* ProtoMarLeague::default_instance_ = NULL;

ProtoMarLeague* ProtoMarLeague::New() const {
  return new ProtoMarLeague;
}

void ProtoMarLeague::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0;
    league_id_ = GOOGLE_LONGLONG(0);
    if (has_leader_name()) {
      if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
        leader_name_->clear();
      }
    }
    if (has_league_name()) {
      if (league_name_ != &::google::protobuf::internal::kEmptyString) {
        league_name_->clear();
      }
    }
    league_force_ = 0;
    league_score_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoMarLeague::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_league_id;
        break;
      }
      
      // optional int64 league_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_league_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &league_id_)));
          set_has_league_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_leader_name;
        break;
      }
      
      // optional string leader_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leader_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leader_name().data(), this->leader_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_league_name;
        break;
      }
      
      // optional string league_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_league_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_league_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->league_name().data(), this->league_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_league_force;
        break;
      }
      
      // optional int32 league_force = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_league_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &league_force_)));
          set_has_league_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_league_score;
        break;
      }
      
      // optional int32 league_score = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_league_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &league_score_)));
          set_has_league_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoMarLeague::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }
  
  // optional int64 league_id = 2;
  if (has_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->league_id(), output);
  }
  
  // optional string leader_name = 3;
  if (has_leader_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leader_name().data(), this->leader_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->leader_name(), output);
  }
  
  // optional string league_name = 4;
  if (has_league_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->league_name().data(), this->league_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->league_name(), output);
  }
  
  // optional int32 league_force = 5;
  if (has_league_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->league_force(), output);
  }
  
  // optional int32 league_score = 6;
  if (has_league_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->league_score(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoMarLeague::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }
  
  // optional int64 league_id = 2;
  if (has_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->league_id(), target);
  }
  
  // optional string leader_name = 3;
  if (has_leader_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leader_name().data(), this->leader_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->leader_name(), target);
  }
  
  // optional string league_name = 4;
  if (has_league_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->league_name().data(), this->league_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->league_name(), target);
  }
  
  // optional int32 league_force = 5;
  if (has_league_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->league_force(), target);
  }
  
  // optional int32 league_score = 6;
  if (has_league_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->league_score(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoMarLeague::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
    // optional int64 league_id = 2;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->league_id());
    }
    
    // optional string leader_name = 3;
    if (has_leader_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leader_name());
    }
    
    // optional string league_name = 4;
    if (has_league_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->league_name());
    }
    
    // optional int32 league_force = 5;
    if (has_league_force()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->league_force());
    }
    
    // optional int32 league_score = 6;
    if (has_league_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->league_score());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoMarLeague::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoMarLeague* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoMarLeague*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoMarLeague::MergeFrom(const ProtoMarLeague& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_league_id()) {
      set_league_id(from.league_id());
    }
    if (from.has_leader_name()) {
      set_leader_name(from.leader_name());
    }
    if (from.has_league_name()) {
      set_league_name(from.league_name());
    }
    if (from.has_league_force()) {
      set_league_force(from.league_force());
    }
    if (from.has_league_score()) {
      set_league_score(from.league_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoMarLeague::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMarLeague::CopyFrom(const ProtoMarLeague& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMarLeague::IsInitialized() const {
  
  return true;
}

void ProtoMarLeague::Swap(ProtoMarLeague* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(league_id_, other->league_id_);
    std::swap(leader_name_, other->leader_name_);
    std::swap(league_name_, other->league_name_);
    std::swap(league_force_, other->league_force_);
    std::swap(league_score_, other->league_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoMarLeague::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoMarLeague_descriptor_;
  metadata.reflection = ProtoMarLeague_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoRoleInfo::kRoleIdFieldNumber;
const int ProtoRoleInfo::kRoleNameFieldNumber;
const int ProtoRoleInfo::kRoleSexFieldNumber;
const int ProtoRoleInfo::kRoleForceFieldNumber;
const int ProtoRoleInfo::kVipTypeFieldNumber;
const int ProtoRoleInfo::kLabelIdFieldNumber;
const int ProtoRoleInfo::kRoleLevelFieldNumber;
const int ProtoRoleInfo::kLeagueIdFieldNumber;
const int ProtoRoleInfo::kLeagueNameFieldNumber;
const int ProtoRoleInfo::kRoleCareerFieldNumber;
const int ProtoRoleInfo::kRoleWingFieldNumber;
const int ProtoRoleInfo::kRoleSoliderFieldNumber;
#endif  // !_MSC_VER

ProtoRoleInfo::ProtoRoleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoRoleInfo::InitAsDefaultInstance() {
}

ProtoRoleInfo::ProtoRoleInfo(const ProtoRoleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoRoleInfo::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_sex_ = 0;
  role_force_ = 0;
  vip_type_ = 0;
  label_id_ = 0;
  role_level_ = 0;
  league_id_ = GOOGLE_LONGLONG(0);
  league_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_career_ = 0;
  role_wing_ = 0;
  role_solider_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoRoleInfo::~ProtoRoleInfo() {
  SharedDtor();
}

void ProtoRoleInfo::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (league_name_ != &::google::protobuf::internal::kEmptyString) {
    delete league_name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoRoleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoRoleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoRoleInfo_descriptor_;
}

const ProtoRoleInfo& ProtoRoleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoRoleInfo* ProtoRoleInfo::default_instance_ = NULL;

ProtoRoleInfo* ProtoRoleInfo::New() const {
  return new ProtoRoleInfo;
}

void ProtoRoleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_LONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    role_sex_ = 0;
    role_force_ = 0;
    vip_type_ = 0;
    label_id_ = 0;
    role_level_ = 0;
    league_id_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_league_name()) {
      if (league_name_ != &::google::protobuf::internal::kEmptyString) {
        league_name_->clear();
      }
    }
    role_career_ = 0;
    role_wing_ = 0;
    role_solider_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoRoleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_name;
        break;
      }
      
      // optional string role_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_sex;
        break;
      }
      
      // optional int32 role_sex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_sex_)));
          set_has_role_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_role_force;
        break;
      }
      
      // optional int32 role_force = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_force_)));
          set_has_role_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_vip_type;
        break;
      }
      
      // optional int32 vip_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_type_)));
          set_has_vip_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_label_id;
        break;
      }
      
      // optional int32 label_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_label_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &label_id_)));
          set_has_label_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_role_level;
        break;
      }
      
      // optional int32 role_level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_level_)));
          set_has_role_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_league_id;
        break;
      }
      
      // optional int64 league_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_league_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &league_id_)));
          set_has_league_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_league_name;
        break;
      }
      
      // optional string league_name = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_league_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_league_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->league_name().data(), this->league_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_role_career;
        break;
      }
      
      // optional int32 role_career = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_career:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_career_)));
          set_has_role_career();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_role_wing;
        break;
      }
      
      // optional int32 role_wing = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_wing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_wing_)));
          set_has_role_wing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_role_solider;
        break;
      }
      
      // optional int32 role_solider = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_solider:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_solider_)));
          set_has_role_solider();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoRoleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_id(), output);
  }
  
  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->role_name(), output);
  }
  
  // optional int32 role_sex = 3;
  if (has_role_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->role_sex(), output);
  }
  
  // optional int32 role_force = 4;
  if (has_role_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->role_force(), output);
  }
  
  // optional int32 vip_type = 5;
  if (has_vip_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->vip_type(), output);
  }
  
  // optional int32 label_id = 6;
  if (has_label_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->label_id(), output);
  }
  
  // optional int32 role_level = 7;
  if (has_role_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->role_level(), output);
  }
  
  // optional int64 league_id = 8;
  if (has_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->league_id(), output);
  }
  
  // optional string league_name = 9;
  if (has_league_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->league_name().data(), this->league_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->league_name(), output);
  }
  
  // optional int32 role_career = 10;
  if (has_role_career()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->role_career(), output);
  }
  
  // optional int32 role_wing = 11;
  if (has_role_wing()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->role_wing(), output);
  }
  
  // optional int32 role_solider = 12;
  if (has_role_solider()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->role_solider(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoRoleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_id(), target);
  }
  
  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }
  
  // optional int32 role_sex = 3;
  if (has_role_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->role_sex(), target);
  }
  
  // optional int32 role_force = 4;
  if (has_role_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->role_force(), target);
  }
  
  // optional int32 vip_type = 5;
  if (has_vip_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->vip_type(), target);
  }
  
  // optional int32 label_id = 6;
  if (has_label_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->label_id(), target);
  }
  
  // optional int32 role_level = 7;
  if (has_role_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->role_level(), target);
  }
  
  // optional int64 league_id = 8;
  if (has_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->league_id(), target);
  }
  
  // optional string league_name = 9;
  if (has_league_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->league_name().data(), this->league_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->league_name(), target);
  }
  
  // optional int32 role_career = 10;
  if (has_role_career()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->role_career(), target);
  }
  
  // optional int32 role_wing = 11;
  if (has_role_wing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->role_wing(), target);
  }
  
  // optional int32 role_solider = 12;
  if (has_role_solider()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->role_solider(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoRoleInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional string role_name = 2;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }
    
    // optional int32 role_sex = 3;
    if (has_role_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_sex());
    }
    
    // optional int32 role_force = 4;
    if (has_role_force()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_force());
    }
    
    // optional int32 vip_type = 5;
    if (has_vip_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_type());
    }
    
    // optional int32 label_id = 6;
    if (has_label_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->label_id());
    }
    
    // optional int32 role_level = 7;
    if (has_role_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_level());
    }
    
    // optional int64 league_id = 8;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->league_id());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string league_name = 9;
    if (has_league_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->league_name());
    }
    
    // optional int32 role_career = 10;
    if (has_role_career()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_career());
    }
    
    // optional int32 role_wing = 11;
    if (has_role_wing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_wing());
    }
    
    // optional int32 role_solider = 12;
    if (has_role_solider()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_solider());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoRoleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoRoleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoRoleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoRoleInfo::MergeFrom(const ProtoRoleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_role_sex()) {
      set_role_sex(from.role_sex());
    }
    if (from.has_role_force()) {
      set_role_force(from.role_force());
    }
    if (from.has_vip_type()) {
      set_vip_type(from.vip_type());
    }
    if (from.has_label_id()) {
      set_label_id(from.label_id());
    }
    if (from.has_role_level()) {
      set_role_level(from.role_level());
    }
    if (from.has_league_id()) {
      set_league_id(from.league_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_league_name()) {
      set_league_name(from.league_name());
    }
    if (from.has_role_career()) {
      set_role_career(from.role_career());
    }
    if (from.has_role_wing()) {
      set_role_wing(from.role_wing());
    }
    if (from.has_role_solider()) {
      set_role_solider(from.role_solider());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoRoleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoRoleInfo::CopyFrom(const ProtoRoleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoRoleInfo::IsInitialized() const {
  
  return true;
}

void ProtoRoleInfo::Swap(ProtoRoleInfo* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(role_sex_, other->role_sex_);
    std::swap(role_force_, other->role_force_);
    std::swap(vip_type_, other->vip_type_);
    std::swap(label_id_, other->label_id_);
    std::swap(role_level_, other->role_level_);
    std::swap(league_id_, other->league_id_);
    std::swap(league_name_, other->league_name_);
    std::swap(role_career_, other->role_career_);
    std::swap(role_wing_, other->role_wing_);
    std::swap(role_solider_, other->role_solider_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoRoleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoRoleInfo_descriptor_;
  metadata.reflection = ProtoRoleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoRankRecord::kCurRankFieldNumber;
const int ProtoRankRecord::kLastRankFieldNumber;
const int ProtoRankRecord::kRoleIdFieldNumber;
const int ProtoRankRecord::kVipTypeFieldNumber;
const int ProtoRankRecord::kRankValueFieldNumber;
const int ProtoRankRecord::kDisplayContentFieldNumber;
const int ProtoRankRecord::kLeagueNameFieldNumber;
const int ProtoRankRecord::kAdditionalIdFieldNumber;
const int ProtoRankRecord::kWorshipNumFieldNumber;
const int ProtoRankRecord::kIsWorshipFieldNumber;
#endif  // !_MSC_VER

ProtoRankRecord::ProtoRankRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoRankRecord::InitAsDefaultInstance() {
}

ProtoRankRecord::ProtoRankRecord(const ProtoRankRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoRankRecord::SharedCtor() {
  _cached_size_ = 0;
  cur_rank_ = 0;
  last_rank_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  vip_type_ = 0;
  rank_value_ = 0;
  display_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  league_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  additional_id_ = GOOGLE_LONGLONG(0);
  worship_num_ = GOOGLE_LONGLONG(0);
  is_worship_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoRankRecord::~ProtoRankRecord() {
  SharedDtor();
}

void ProtoRankRecord::SharedDtor() {
  if (display_content_ != &::google::protobuf::internal::kEmptyString) {
    delete display_content_;
  }
  if (league_name_ != &::google::protobuf::internal::kEmptyString) {
    delete league_name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoRankRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoRankRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoRankRecord_descriptor_;
}

const ProtoRankRecord& ProtoRankRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoRankRecord* ProtoRankRecord::default_instance_ = NULL;

ProtoRankRecord* ProtoRankRecord::New() const {
  return new ProtoRankRecord;
}

void ProtoRankRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cur_rank_ = 0;
    last_rank_ = 0;
    role_id_ = GOOGLE_LONGLONG(0);
    vip_type_ = 0;
    rank_value_ = 0;
    if (has_display_content()) {
      if (display_content_ != &::google::protobuf::internal::kEmptyString) {
        display_content_->clear();
      }
    }
    if (has_league_name()) {
      if (league_name_ != &::google::protobuf::internal::kEmptyString) {
        league_name_->clear();
      }
    }
    additional_id_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    worship_num_ = GOOGLE_LONGLONG(0);
    is_worship_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoRankRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cur_rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_rank_)));
          set_has_cur_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_last_rank;
        break;
      }
      
      // optional int32 last_rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_rank_)));
          set_has_last_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }
      
      // optional int64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_vip_type;
        break;
      }
      
      // optional int32 vip_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_type_)));
          set_has_vip_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rank_value;
        break;
      }
      
      // optional int32 rank_value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_value_)));
          set_has_rank_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_display_content;
        break;
      }
      
      // optional string display_content = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_display_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->display_content().data(), this->display_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_league_name;
        break;
      }
      
      // optional string league_name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_league_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_league_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->league_name().data(), this->league_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_additional_id;
        break;
      }
      
      // optional int64 additional_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_additional_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &additional_id_)));
          set_has_additional_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_worship_num;
        break;
      }
      
      // optional int64 worship_num = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_worship_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &worship_num_)));
          set_has_worship_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_is_worship;
        break;
      }
      
      // optional int32 is_worship = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_worship:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_worship_)));
          set_has_is_worship();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoRankRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cur_rank = 1;
  if (has_cur_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cur_rank(), output);
  }
  
  // optional int32 last_rank = 2;
  if (has_last_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->last_rank(), output);
  }
  
  // optional int64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->role_id(), output);
  }
  
  // optional int32 vip_type = 4;
  if (has_vip_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->vip_type(), output);
  }
  
  // optional int32 rank_value = 5;
  if (has_rank_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rank_value(), output);
  }
  
  // optional string display_content = 6;
  if (has_display_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->display_content().data(), this->display_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->display_content(), output);
  }
  
  // optional string league_name = 7;
  if (has_league_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->league_name().data(), this->league_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->league_name(), output);
  }
  
  // optional int64 additional_id = 8;
  if (has_additional_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->additional_id(), output);
  }
  
  // optional int64 worship_num = 9;
  if (has_worship_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->worship_num(), output);
  }
  
  // optional int32 is_worship = 10;
  if (has_is_worship()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->is_worship(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoRankRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cur_rank = 1;
  if (has_cur_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cur_rank(), target);
  }
  
  // optional int32 last_rank = 2;
  if (has_last_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->last_rank(), target);
  }
  
  // optional int64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->role_id(), target);
  }
  
  // optional int32 vip_type = 4;
  if (has_vip_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->vip_type(), target);
  }
  
  // optional int32 rank_value = 5;
  if (has_rank_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rank_value(), target);
  }
  
  // optional string display_content = 6;
  if (has_display_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->display_content().data(), this->display_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->display_content(), target);
  }
  
  // optional string league_name = 7;
  if (has_league_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->league_name().data(), this->league_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->league_name(), target);
  }
  
  // optional int64 additional_id = 8;
  if (has_additional_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->additional_id(), target);
  }
  
  // optional int64 worship_num = 9;
  if (has_worship_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->worship_num(), target);
  }
  
  // optional int32 is_worship = 10;
  if (has_is_worship()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->is_worship(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoRankRecord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cur_rank = 1;
    if (has_cur_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_rank());
    }
    
    // optional int32 last_rank = 2;
    if (has_last_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_rank());
    }
    
    // optional int64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional int32 vip_type = 4;
    if (has_vip_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_type());
    }
    
    // optional int32 rank_value = 5;
    if (has_rank_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_value());
    }
    
    // optional string display_content = 6;
    if (has_display_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->display_content());
    }
    
    // optional string league_name = 7;
    if (has_league_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->league_name());
    }
    
    // optional int64 additional_id = 8;
    if (has_additional_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->additional_id());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 worship_num = 9;
    if (has_worship_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->worship_num());
    }
    
    // optional int32 is_worship = 10;
    if (has_is_worship()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_worship());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoRankRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoRankRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoRankRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoRankRecord::MergeFrom(const ProtoRankRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cur_rank()) {
      set_cur_rank(from.cur_rank());
    }
    if (from.has_last_rank()) {
      set_last_rank(from.last_rank());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_vip_type()) {
      set_vip_type(from.vip_type());
    }
    if (from.has_rank_value()) {
      set_rank_value(from.rank_value());
    }
    if (from.has_display_content()) {
      set_display_content(from.display_content());
    }
    if (from.has_league_name()) {
      set_league_name(from.league_name());
    }
    if (from.has_additional_id()) {
      set_additional_id(from.additional_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_worship_num()) {
      set_worship_num(from.worship_num());
    }
    if (from.has_is_worship()) {
      set_is_worship(from.is_worship());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoRankRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoRankRecord::CopyFrom(const ProtoRankRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoRankRecord::IsInitialized() const {
  
  return true;
}

void ProtoRankRecord::Swap(ProtoRankRecord* other) {
  if (other != this) {
    std::swap(cur_rank_, other->cur_rank_);
    std::swap(last_rank_, other->last_rank_);
    std::swap(role_id_, other->role_id_);
    std::swap(vip_type_, other->vip_type_);
    std::swap(rank_value_, other->rank_value_);
    std::swap(display_content_, other->display_content_);
    std::swap(league_name_, other->league_name_);
    std::swap(additional_id_, other->additional_id_);
    std::swap(worship_num_, other->worship_num_);
    std::swap(is_worship_, other->is_worship_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoRankRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoRankRecord_descriptor_;
  metadata.reflection = ProtoRankRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoFBReadyInfo::kRoleIdFieldNumber;
const int ProtoFBReadyInfo::kIsReadyFieldNumber;
#endif  // !_MSC_VER

ProtoFBReadyInfo::ProtoFBReadyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoFBReadyInfo::InitAsDefaultInstance() {
}

ProtoFBReadyInfo::ProtoFBReadyInfo(const ProtoFBReadyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoFBReadyInfo::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  is_ready_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoFBReadyInfo::~ProtoFBReadyInfo() {
  SharedDtor();
}

void ProtoFBReadyInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoFBReadyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoFBReadyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoFBReadyInfo_descriptor_;
}

const ProtoFBReadyInfo& ProtoFBReadyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoFBReadyInfo* ProtoFBReadyInfo::default_instance_ = NULL;

ProtoFBReadyInfo* ProtoFBReadyInfo::New() const {
  return new ProtoFBReadyInfo;
}

void ProtoFBReadyInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_LONGLONG(0);
    is_ready_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoFBReadyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_ready;
        break;
      }
      
      // optional bool is_ready = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_ready:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ready_)));
          set_has_is_ready();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoFBReadyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_id(), output);
  }
  
  // optional bool is_ready = 2;
  if (has_is_ready()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_ready(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoFBReadyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_id(), target);
  }
  
  // optional bool is_ready = 2;
  if (has_is_ready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_ready(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoFBReadyInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional bool is_ready = 2;
    if (has_is_ready()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoFBReadyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoFBReadyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoFBReadyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoFBReadyInfo::MergeFrom(const ProtoFBReadyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_is_ready()) {
      set_is_ready(from.is_ready());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoFBReadyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoFBReadyInfo::CopyFrom(const ProtoFBReadyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoFBReadyInfo::IsInitialized() const {
  
  return true;
}

void ProtoFBReadyInfo::Swap(ProtoFBReadyInfo* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(is_ready_, other->is_ready_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoFBReadyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoFBReadyInfo_descriptor_;
  metadata.reflection = ProtoFBReadyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoFightPro::kHitFieldNumber;
const int ProtoFightPro::kAvoidFieldNumber;
const int ProtoFightPro::kCritFieldNumber;
const int ProtoFightPro::kToughnessFieldNumber;
const int ProtoFightPro::kSpeedFieldNumber;
const int ProtoFightPro::kBloodFieldNumber;
const int ProtoFightPro::kBloodMaxFieldNumber;
const int ProtoFightPro::kMagicFieldNumber;
const int ProtoFightPro::kMagicMaxFieldNumber;
const int ProtoFightPro::kAttackFieldNumber;
const int ProtoFightPro::kDefenceFieldNumber;
const int ProtoFightPro::kCritMultiFieldNumber;
const int ProtoFightPro::kDamageMultiFieldNumber;
const int ProtoFightPro::kDamageFieldNumber;
const int ProtoFightPro::kReductionMultiFieldNumber;
const int ProtoFightPro::kReductionFieldNumber;
const int ProtoFightPro::kForceFieldNumber;
#endif  // !_MSC_VER

ProtoFightPro::ProtoFightPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoFightPro::InitAsDefaultInstance() {
}

ProtoFightPro::ProtoFightPro(const ProtoFightPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoFightPro::SharedCtor() {
  _cached_size_ = 0;
  hit_ = 0;
  avoid_ = 0;
  crit_ = 0;
  toughness_ = 0;
  speed_ = 0;
  blood_ = 0;
  blood_max_ = 0;
  magic_ = 0;
  magic_max_ = 0;
  attack_ = 0;
  defence_ = 0;
  crit_multi_ = 0;
  damage_multi_ = 0;
  damage_ = 0;
  reduction_multi_ = 0;
  reduction_ = 0;
  force_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoFightPro::~ProtoFightPro() {
  SharedDtor();
}

void ProtoFightPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoFightPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoFightPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoFightPro_descriptor_;
}

const ProtoFightPro& ProtoFightPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoFightPro* ProtoFightPro::default_instance_ = NULL;

ProtoFightPro* ProtoFightPro::New() const {
  return new ProtoFightPro;
}

void ProtoFightPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hit_ = 0;
    avoid_ = 0;
    crit_ = 0;
    toughness_ = 0;
    speed_ = 0;
    blood_ = 0;
    blood_max_ = 0;
    magic_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    magic_max_ = 0;
    attack_ = 0;
    defence_ = 0;
    crit_multi_ = 0;
    damage_multi_ = 0;
    damage_ = 0;
    reduction_multi_ = 0;
    reduction_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    force_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoFightPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 hit = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hit_)));
          set_has_hit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_avoid;
        break;
      }
      
      // optional int32 avoid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avoid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avoid_)));
          set_has_avoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_crit;
        break;
      }
      
      // optional int32 crit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crit_)));
          set_has_crit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_toughness;
        break;
      }
      
      // optional int32 toughness = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_toughness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &toughness_)));
          set_has_toughness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_speed;
        break;
      }
      
      // optional int32 speed = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_blood;
        break;
      }
      
      // optional int32 blood = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blood_)));
          set_has_blood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_blood_max;
        break;
      }
      
      // optional int32 blood_max = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blood_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blood_max_)));
          set_has_blood_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_magic;
        break;
      }
      
      // optional int32 magic = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magic_)));
          set_has_magic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_magic_max;
        break;
      }
      
      // optional int32 magic_max = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magic_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magic_max_)));
          set_has_magic_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_attack;
        break;
      }
      
      // optional int32 attack = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_)));
          set_has_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_defence;
        break;
      }
      
      // optional int32 defence = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defence_)));
          set_has_defence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_crit_multi;
        break;
      }
      
      // optional int32 crit_multi = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crit_multi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crit_multi_)));
          set_has_crit_multi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_damage_multi;
        break;
      }
      
      // optional int32 damage_multi = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage_multi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_multi_)));
          set_has_damage_multi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_damage;
        break;
      }
      
      // optional int32 damage = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_reduction_multi;
        break;
      }
      
      // optional int32 reduction_multi = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reduction_multi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reduction_multi_)));
          set_has_reduction_multi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_reduction;
        break;
      }
      
      // optional int32 reduction = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reduction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reduction_)));
          set_has_reduction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_force;
        break;
      }
      
      // optional int32 force = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &force_)));
          set_has_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoFightPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 hit = 1;
  if (has_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hit(), output);
  }
  
  // optional int32 avoid = 2;
  if (has_avoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->avoid(), output);
  }
  
  // optional int32 crit = 3;
  if (has_crit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->crit(), output);
  }
  
  // optional int32 toughness = 4;
  if (has_toughness()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->toughness(), output);
  }
  
  // optional int32 speed = 5;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->speed(), output);
  }
  
  // optional int32 blood = 6;
  if (has_blood()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->blood(), output);
  }
  
  // optional int32 blood_max = 7;
  if (has_blood_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->blood_max(), output);
  }
  
  // optional int32 magic = 8;
  if (has_magic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->magic(), output);
  }
  
  // optional int32 magic_max = 9;
  if (has_magic_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->magic_max(), output);
  }
  
  // optional int32 attack = 10;
  if (has_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->attack(), output);
  }
  
  // optional int32 defence = 11;
  if (has_defence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->defence(), output);
  }
  
  // optional int32 crit_multi = 12;
  if (has_crit_multi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->crit_multi(), output);
  }
  
  // optional int32 damage_multi = 13;
  if (has_damage_multi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->damage_multi(), output);
  }
  
  // optional int32 damage = 14;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->damage(), output);
  }
  
  // optional int32 reduction_multi = 15;
  if (has_reduction_multi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->reduction_multi(), output);
  }
  
  // optional int32 reduction = 16;
  if (has_reduction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->reduction(), output);
  }
  
  // optional int32 force = 17;
  if (has_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->force(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoFightPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 hit = 1;
  if (has_hit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hit(), target);
  }
  
  // optional int32 avoid = 2;
  if (has_avoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->avoid(), target);
  }
  
  // optional int32 crit = 3;
  if (has_crit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->crit(), target);
  }
  
  // optional int32 toughness = 4;
  if (has_toughness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->toughness(), target);
  }
  
  // optional int32 speed = 5;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->speed(), target);
  }
  
  // optional int32 blood = 6;
  if (has_blood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->blood(), target);
  }
  
  // optional int32 blood_max = 7;
  if (has_blood_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->blood_max(), target);
  }
  
  // optional int32 magic = 8;
  if (has_magic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->magic(), target);
  }
  
  // optional int32 magic_max = 9;
  if (has_magic_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->magic_max(), target);
  }
  
  // optional int32 attack = 10;
  if (has_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->attack(), target);
  }
  
  // optional int32 defence = 11;
  if (has_defence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->defence(), target);
  }
  
  // optional int32 crit_multi = 12;
  if (has_crit_multi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->crit_multi(), target);
  }
  
  // optional int32 damage_multi = 13;
  if (has_damage_multi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->damage_multi(), target);
  }
  
  // optional int32 damage = 14;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->damage(), target);
  }
  
  // optional int32 reduction_multi = 15;
  if (has_reduction_multi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->reduction_multi(), target);
  }
  
  // optional int32 reduction = 16;
  if (has_reduction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->reduction(), target);
  }
  
  // optional int32 force = 17;
  if (has_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->force(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoFightPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 hit = 1;
    if (has_hit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hit());
    }
    
    // optional int32 avoid = 2;
    if (has_avoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avoid());
    }
    
    // optional int32 crit = 3;
    if (has_crit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crit());
    }
    
    // optional int32 toughness = 4;
    if (has_toughness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->toughness());
    }
    
    // optional int32 speed = 5;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speed());
    }
    
    // optional int32 blood = 6;
    if (has_blood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blood());
    }
    
    // optional int32 blood_max = 7;
    if (has_blood_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blood_max());
    }
    
    // optional int32 magic = 8;
    if (has_magic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magic());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 magic_max = 9;
    if (has_magic_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magic_max());
    }
    
    // optional int32 attack = 10;
    if (has_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack());
    }
    
    // optional int32 defence = 11;
    if (has_defence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defence());
    }
    
    // optional int32 crit_multi = 12;
    if (has_crit_multi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crit_multi());
    }
    
    // optional int32 damage_multi = 13;
    if (has_damage_multi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage_multi());
    }
    
    // optional int32 damage = 14;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage());
    }
    
    // optional int32 reduction_multi = 15;
    if (has_reduction_multi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reduction_multi());
    }
    
    // optional int32 reduction = 16;
    if (has_reduction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reduction());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 force = 17;
    if (has_force()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->force());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoFightPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoFightPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoFightPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoFightPro::MergeFrom(const ProtoFightPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hit()) {
      set_hit(from.hit());
    }
    if (from.has_avoid()) {
      set_avoid(from.avoid());
    }
    if (from.has_crit()) {
      set_crit(from.crit());
    }
    if (from.has_toughness()) {
      set_toughness(from.toughness());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_blood()) {
      set_blood(from.blood());
    }
    if (from.has_blood_max()) {
      set_blood_max(from.blood_max());
    }
    if (from.has_magic()) {
      set_magic(from.magic());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_magic_max()) {
      set_magic_max(from.magic_max());
    }
    if (from.has_attack()) {
      set_attack(from.attack());
    }
    if (from.has_defence()) {
      set_defence(from.defence());
    }
    if (from.has_crit_multi()) {
      set_crit_multi(from.crit_multi());
    }
    if (from.has_damage_multi()) {
      set_damage_multi(from.damage_multi());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_reduction_multi()) {
      set_reduction_multi(from.reduction_multi());
    }
    if (from.has_reduction()) {
      set_reduction(from.reduction());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_force()) {
      set_force(from.force());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoFightPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoFightPro::CopyFrom(const ProtoFightPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoFightPro::IsInitialized() const {
  
  return true;
}

void ProtoFightPro::Swap(ProtoFightPro* other) {
  if (other != this) {
    std::swap(hit_, other->hit_);
    std::swap(avoid_, other->avoid_);
    std::swap(crit_, other->crit_);
    std::swap(toughness_, other->toughness_);
    std::swap(speed_, other->speed_);
    std::swap(blood_, other->blood_);
    std::swap(blood_max_, other->blood_max_);
    std::swap(magic_, other->magic_);
    std::swap(magic_max_, other->magic_max_);
    std::swap(attack_, other->attack_);
    std::swap(defence_, other->defence_);
    std::swap(crit_multi_, other->crit_multi_);
    std::swap(damage_multi_, other->damage_multi_);
    std::swap(damage_, other->damage_);
    std::swap(reduction_multi_, other->reduction_multi_);
    std::swap(reduction_, other->reduction_);
    std::swap(force_, other->force_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoFightPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoFightPro_descriptor_;
  metadata.reflection = ProtoFightPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoWarItem::kLeagueSetFieldNumber;
#endif  // !_MSC_VER

ProtoWarItem::ProtoWarItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoWarItem::InitAsDefaultInstance() {
}

ProtoWarItem::ProtoWarItem(const ProtoWarItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoWarItem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoWarItem::~ProtoWarItem() {
  SharedDtor();
}

void ProtoWarItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoWarItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoWarItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoWarItem_descriptor_;
}

const ProtoWarItem& ProtoWarItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoWarItem* ProtoWarItem::default_instance_ = NULL;

ProtoWarItem* ProtoWarItem::New() const {
  return new ProtoWarItem;
}

void ProtoWarItem::Clear() {
  league_set_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoWarItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoSyncLeague league_set = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_league_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_league_set()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_league_set;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoWarItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoSyncLeague league_set = 1;
  for (int i = 0; i < this->league_set_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->league_set(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoWarItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoSyncLeague league_set = 1;
  for (int i = 0; i < this->league_set_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->league_set(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoWarItem::ByteSize() const {
  int total_size = 0;
  
  // repeated .ProtoSyncLeague league_set = 1;
  total_size += 1 * this->league_set_size();
  for (int i = 0; i < this->league_set_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->league_set(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoWarItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoWarItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoWarItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoWarItem::MergeFrom(const ProtoWarItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  league_set_.MergeFrom(from.league_set_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoWarItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoWarItem::CopyFrom(const ProtoWarItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoWarItem::IsInitialized() const {
  
  return true;
}

void ProtoWarItem::Swap(ProtoWarItem* other) {
  if (other != this) {
    league_set_.Swap(&other->league_set_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoWarItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoWarItem_descriptor_;
  metadata.reflection = ProtoWarItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoSMBattleRankRec::kRoleIdFieldNumber;
const int ProtoSMBattleRankRec::kRoleNameFieldNumber;
const int ProtoSMBattleRankRec::kSexFieldNumber;
const int ProtoSMBattleRankRec::kRankFieldNumber;
const int ProtoSMBattleRankRec::kScoreFieldNumber;
const int ProtoSMBattleRankRec::kCampIdFieldNumber;
const int ProtoSMBattleRankRec::kKillFieldNumber;
const int ProtoSMBattleRankRec::kMaxKillFieldNumber;
#endif  // !_MSC_VER

ProtoSMBattleRankRec::ProtoSMBattleRankRec()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoSMBattleRankRec::InitAsDefaultInstance() {
}

ProtoSMBattleRankRec::ProtoSMBattleRankRec(const ProtoSMBattleRankRec& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoSMBattleRankRec::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  rank_ = 0;
  score_ = 0;
  camp_id_ = 0;
  kill_ = 0;
  max_kill_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoSMBattleRankRec::~ProtoSMBattleRankRec() {
  SharedDtor();
}

void ProtoSMBattleRankRec::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoSMBattleRankRec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoSMBattleRankRec::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoSMBattleRankRec_descriptor_;
}

const ProtoSMBattleRankRec& ProtoSMBattleRankRec::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoSMBattleRankRec* ProtoSMBattleRankRec::default_instance_ = NULL;

ProtoSMBattleRankRec* ProtoSMBattleRankRec::New() const {
  return new ProtoSMBattleRankRec;
}

void ProtoSMBattleRankRec::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_LONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    sex_ = 0;
    rank_ = 0;
    score_ = 0;
    camp_id_ = 0;
    kill_ = 0;
    max_kill_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoSMBattleRankRec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_name;
        break;
      }
      
      // optional string role_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sex;
        break;
      }
      
      // optional int32 sex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rank;
        break;
      }
      
      // optional int32 rank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_score;
        break;
      }
      
      // optional int32 score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_camp_id;
        break;
      }
      
      // optional int32 camp_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_camp_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_id_)));
          set_has_camp_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_kill;
        break;
      }
      
      // optional int32 kill = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kill_)));
          set_has_kill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_max_kill;
        break;
      }
      
      // optional int32 max_kill = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_kill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_kill_)));
          set_has_max_kill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoSMBattleRankRec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_id(), output);
  }
  
  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->role_name(), output);
  }
  
  // optional int32 sex = 3;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sex(), output);
  }
  
  // optional int32 rank = 4;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rank(), output);
  }
  
  // optional int32 score = 5;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->score(), output);
  }
  
  // optional int32 camp_id = 6;
  if (has_camp_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->camp_id(), output);
  }
  
  // optional int32 kill = 7;
  if (has_kill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->kill(), output);
  }
  
  // optional int32 max_kill = 8;
  if (has_max_kill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->max_kill(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoSMBattleRankRec::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_id(), target);
  }
  
  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }
  
  // optional int32 sex = 3;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sex(), target);
  }
  
  // optional int32 rank = 4;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rank(), target);
  }
  
  // optional int32 score = 5;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->score(), target);
  }
  
  // optional int32 camp_id = 6;
  if (has_camp_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->camp_id(), target);
  }
  
  // optional int32 kill = 7;
  if (has_kill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->kill(), target);
  }
  
  // optional int32 max_kill = 8;
  if (has_max_kill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->max_kill(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoSMBattleRankRec::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional string role_name = 2;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }
    
    // optional int32 sex = 3;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }
    
    // optional int32 rank = 4;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
    // optional int32 score = 5;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }
    
    // optional int32 camp_id = 6;
    if (has_camp_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp_id());
    }
    
    // optional int32 kill = 7;
    if (has_kill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kill());
    }
    
    // optional int32 max_kill = 8;
    if (has_max_kill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_kill());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoSMBattleRankRec::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoSMBattleRankRec* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoSMBattleRankRec*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoSMBattleRankRec::MergeFrom(const ProtoSMBattleRankRec& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_camp_id()) {
      set_camp_id(from.camp_id());
    }
    if (from.has_kill()) {
      set_kill(from.kill());
    }
    if (from.has_max_kill()) {
      set_max_kill(from.max_kill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoSMBattleRankRec::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoSMBattleRankRec::CopyFrom(const ProtoSMBattleRankRec& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoSMBattleRankRec::IsInitialized() const {
  
  return true;
}

void ProtoSMBattleRankRec::Swap(ProtoSMBattleRankRec* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(sex_, other->sex_);
    std::swap(rank_, other->rank_);
    std::swap(score_, other->score_);
    std::swap(camp_id_, other->camp_id_);
    std::swap(kill_, other->kill_);
    std::swap(max_kill_, other->max_kill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoSMBattleRankRec::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoSMBattleRankRec_descriptor_;
  metadata.reflection = ProtoSMBattleRankRec_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoLWarItem::kItemRankFieldNumber;
const int ProtoLWarItem::kItemNameFieldNumber;
const int ProtoLWarItem::kItemResourceFieldNumber;
const int ProtoLWarItem::kLeagueIdFieldNumber;
const int ProtoLWarItem::kPixelXFieldNumber;
const int ProtoLWarItem::kPixelYFieldNumber;
#endif  // !_MSC_VER

ProtoLWarItem::ProtoLWarItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoLWarItem::InitAsDefaultInstance() {
}

ProtoLWarItem::ProtoLWarItem(const ProtoLWarItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoLWarItem::SharedCtor() {
  _cached_size_ = 0;
  item_rank_ = 0;
  item_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  item_resource_ = 0;
  league_id_ = GOOGLE_LONGLONG(0);
  pixel_x_ = 0;
  pixel_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoLWarItem::~ProtoLWarItem() {
  SharedDtor();
}

void ProtoLWarItem::SharedDtor() {
  if (item_name_ != &::google::protobuf::internal::kEmptyString) {
    delete item_name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoLWarItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoLWarItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoLWarItem_descriptor_;
}

const ProtoLWarItem& ProtoLWarItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoLWarItem* ProtoLWarItem::default_instance_ = NULL;

ProtoLWarItem* ProtoLWarItem::New() const {
  return new ProtoLWarItem;
}

void ProtoLWarItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_rank_ = 0;
    if (has_item_name()) {
      if (item_name_ != &::google::protobuf::internal::kEmptyString) {
        item_name_->clear();
      }
    }
    item_resource_ = 0;
    league_id_ = GOOGLE_LONGLONG(0);
    pixel_x_ = 0;
    pixel_y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoLWarItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 item_rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_rank_)));
          set_has_item_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_name;
        break;
      }
      
      // optional string item_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->item_name().data(), this->item_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_resource;
        break;
      }
      
      // optional int32 item_resource = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_resource:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_resource_)));
          set_has_item_resource();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_league_id;
        break;
      }
      
      // optional int64 league_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_league_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &league_id_)));
          set_has_league_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pixel_x;
        break;
      }
      
      // optional int32 pixel_x = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pixel_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pixel_x_)));
          set_has_pixel_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_pixel_y;
        break;
      }
      
      // optional int32 pixel_y = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pixel_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pixel_y_)));
          set_has_pixel_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoLWarItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 item_rank = 1;
  if (has_item_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_rank(), output);
  }
  
  // optional string item_name = 2;
  if (has_item_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->item_name().data(), this->item_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->item_name(), output);
  }
  
  // optional int32 item_resource = 3;
  if (has_item_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->item_resource(), output);
  }
  
  // optional int64 league_id = 4;
  if (has_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->league_id(), output);
  }
  
  // optional int32 pixel_x = 5;
  if (has_pixel_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pixel_x(), output);
  }
  
  // optional int32 pixel_y = 6;
  if (has_pixel_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->pixel_y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoLWarItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 item_rank = 1;
  if (has_item_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_rank(), target);
  }
  
  // optional string item_name = 2;
  if (has_item_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->item_name().data(), this->item_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->item_name(), target);
  }
  
  // optional int32 item_resource = 3;
  if (has_item_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->item_resource(), target);
  }
  
  // optional int64 league_id = 4;
  if (has_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->league_id(), target);
  }
  
  // optional int32 pixel_x = 5;
  if (has_pixel_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pixel_x(), target);
  }
  
  // optional int32 pixel_y = 6;
  if (has_pixel_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->pixel_y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoLWarItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 item_rank = 1;
    if (has_item_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_rank());
    }
    
    // optional string item_name = 2;
    if (has_item_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->item_name());
    }
    
    // optional int32 item_resource = 3;
    if (has_item_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_resource());
    }
    
    // optional int64 league_id = 4;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->league_id());
    }
    
    // optional int32 pixel_x = 5;
    if (has_pixel_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pixel_x());
    }
    
    // optional int32 pixel_y = 6;
    if (has_pixel_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pixel_y());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoLWarItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoLWarItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoLWarItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoLWarItem::MergeFrom(const ProtoLWarItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_rank()) {
      set_item_rank(from.item_rank());
    }
    if (from.has_item_name()) {
      set_item_name(from.item_name());
    }
    if (from.has_item_resource()) {
      set_item_resource(from.item_resource());
    }
    if (from.has_league_id()) {
      set_league_id(from.league_id());
    }
    if (from.has_pixel_x()) {
      set_pixel_x(from.pixel_x());
    }
    if (from.has_pixel_y()) {
      set_pixel_y(from.pixel_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoLWarItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoLWarItem::CopyFrom(const ProtoLWarItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoLWarItem::IsInitialized() const {
  
  return true;
}

void ProtoLWarItem::Swap(ProtoLWarItem* other) {
  if (other != this) {
    std::swap(item_rank_, other->item_rank_);
    std::swap(item_name_, other->item_name_);
    std::swap(item_resource_, other->item_resource_);
    std::swap(league_id_, other->league_id_);
    std::swap(pixel_x_, other->pixel_x_);
    std::swap(pixel_y_, other->pixel_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoLWarItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoLWarItem_descriptor_;
  metadata.reflection = ProtoLWarItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldBossRank::kRoleIdFieldNumber;
const int WorldBossRank::kRoleNameFieldNumber;
const int WorldBossRank::kRankFieldNumber;
const int WorldBossRank::kScoreFieldNumber;
#endif  // !_MSC_VER

WorldBossRank::WorldBossRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldBossRank::InitAsDefaultInstance() {
}

WorldBossRank::WorldBossRank(const WorldBossRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldBossRank::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0;
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rank_ = 0;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldBossRank::~WorldBossRank() {
  SharedDtor();
}

void WorldBossRank::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void WorldBossRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldBossRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldBossRank_descriptor_;
}

const WorldBossRank& WorldBossRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

WorldBossRank* WorldBossRank::default_instance_ = NULL;

WorldBossRank* WorldBossRank::New() const {
  return new WorldBossRank;
}

void WorldBossRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0;
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    rank_ = 0;
    score_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldBossRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_name;
        break;
      }
      
      // optional string role_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank;
        break;
      }
      
      // optional int32 rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_score;
        break;
      }
      
      // optional int32 score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldBossRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->role_id(), output);
  }
  
  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->role_name(), output);
  }
  
  // optional int32 rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rank(), output);
  }
  
  // optional int32 score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->score(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldBossRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->role_id(), target);
  }
  
  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }
  
  // optional int32 rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rank(), target);
  }
  
  // optional int32 score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->score(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldBossRank::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_id());
    }
    
    // optional string role_name = 2;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }
    
    // optional int32 rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
    // optional int32 score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldBossRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldBossRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldBossRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldBossRank::MergeFrom(const WorldBossRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldBossRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldBossRank::CopyFrom(const WorldBossRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldBossRank::IsInitialized() const {
  
  return true;
}

void WorldBossRank::Swap(WorldBossRank* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(rank_, other->rank_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldBossRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldBossRank_descriptor_;
  metadata.reflection = WorldBossRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoWorldBossRank::kRoleIdFieldNumber;
const int ProtoWorldBossRank::kRoleNameFieldNumber;
const int ProtoWorldBossRank::kRankFieldNumber;
const int ProtoWorldBossRank::kScoreFieldNumber;
#endif  // !_MSC_VER

ProtoWorldBossRank::ProtoWorldBossRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoWorldBossRank::InitAsDefaultInstance() {
}

ProtoWorldBossRank::ProtoWorldBossRank(const ProtoWorldBossRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoWorldBossRank::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rank_ = 0;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoWorldBossRank::~ProtoWorldBossRank() {
  SharedDtor();
}

void ProtoWorldBossRank::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoWorldBossRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoWorldBossRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoWorldBossRank_descriptor_;
}

const ProtoWorldBossRank& ProtoWorldBossRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoWorldBossRank* ProtoWorldBossRank::default_instance_ = NULL;

ProtoWorldBossRank* ProtoWorldBossRank::New() const {
  return new ProtoWorldBossRank;
}

void ProtoWorldBossRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_LONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    rank_ = 0;
    score_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoWorldBossRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_name;
        break;
      }
      
      // optional string role_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank;
        break;
      }
      
      // optional int32 rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_score;
        break;
      }
      
      // optional double score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoWorldBossRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_id(), output);
  }
  
  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->role_name(), output);
  }
  
  // optional int32 rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rank(), output);
  }
  
  // optional double score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->score(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoWorldBossRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_id(), target);
  }
  
  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }
  
  // optional int32 rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rank(), target);
  }
  
  // optional double score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->score(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoWorldBossRank::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional string role_name = 2;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }
    
    // optional int32 rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
    // optional double score = 4;
    if (has_score()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoWorldBossRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoWorldBossRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoWorldBossRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoWorldBossRank::MergeFrom(const ProtoWorldBossRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoWorldBossRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoWorldBossRank::CopyFrom(const ProtoWorldBossRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoWorldBossRank::IsInitialized() const {
  
  return true;
}

void ProtoWorldBossRank::Swap(ProtoWorldBossRank* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(rank_, other->rank_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoWorldBossRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoWorldBossRank_descriptor_;
  metadata.reflection = ProtoWorldBossRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoShoutDetail::kParseTypeFieldNumber;
const int ProtoShoutDetail::kSingleValueFieldNumber;
const int ProtoShoutDetail::kSingleIdFieldNumber;
const int ProtoShoutDetail::kSingleContentFieldNumber;
const int ProtoShoutDetail::kRoleInfoFieldNumber;
const int ProtoShoutDetail::kItemTipsFieldNumber;
#endif  // !_MSC_VER

ProtoShoutDetail::ProtoShoutDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoShoutDetail::InitAsDefaultInstance() {
  role_info_ = const_cast< ::ProtoBrocastRole*>(&::ProtoBrocastRole::default_instance());
  item_tips_ = const_cast< ::ProtoShoutItem*>(&::ProtoShoutItem::default_instance());
}

ProtoShoutDetail::ProtoShoutDetail(const ProtoShoutDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoShoutDetail::SharedCtor() {
  _cached_size_ = 0;
  parse_type_ = 0;
  single_value_ = 0;
  single_id_ = GOOGLE_LONGLONG(0);
  single_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_info_ = NULL;
  item_tips_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoShoutDetail::~ProtoShoutDetail() {
  SharedDtor();
}

void ProtoShoutDetail::SharedDtor() {
  if (single_content_ != &::google::protobuf::internal::kEmptyString) {
    delete single_content_;
  }
  if (this != default_instance_) {
    delete role_info_;
    delete item_tips_;
  }
}

void ProtoShoutDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoShoutDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoShoutDetail_descriptor_;
}

const ProtoShoutDetail& ProtoShoutDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoShoutDetail* ProtoShoutDetail::default_instance_ = NULL;

ProtoShoutDetail* ProtoShoutDetail::New() const {
  return new ProtoShoutDetail;
}

void ProtoShoutDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    parse_type_ = 0;
    single_value_ = 0;
    single_id_ = GOOGLE_LONGLONG(0);
    if (has_single_content()) {
      if (single_content_ != &::google::protobuf::internal::kEmptyString) {
        single_content_->clear();
      }
    }
    if (has_role_info()) {
      if (role_info_ != NULL) role_info_->::ProtoBrocastRole::Clear();
    }
    if (has_item_tips()) {
      if (item_tips_ != NULL) item_tips_->::ProtoShoutItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoShoutDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 parse_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parse_type_)));
          set_has_parse_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_single_value;
        break;
      }
      
      // optional int32 single_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_single_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &single_value_)));
          set_has_single_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_single_id;
        break;
      }
      
      // optional int64 single_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_single_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &single_id_)));
          set_has_single_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_single_content;
        break;
      }
      
      // optional string single_content = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_single_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_single_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->single_content().data(), this->single_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_role_info;
        break;
      }
      
      // optional .ProtoBrocastRole role_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_item_tips;
        break;
      }
      
      // optional .ProtoShoutItem item_tips = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_tips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_tips()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoShoutDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 parse_type = 1;
  if (has_parse_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->parse_type(), output);
  }
  
  // optional int32 single_value = 2;
  if (has_single_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->single_value(), output);
  }
  
  // optional int64 single_id = 3;
  if (has_single_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->single_id(), output);
  }
  
  // optional string single_content = 4;
  if (has_single_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->single_content().data(), this->single_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->single_content(), output);
  }
  
  // optional .ProtoBrocastRole role_info = 5;
  if (has_role_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->role_info(), output);
  }
  
  // optional .ProtoShoutItem item_tips = 6;
  if (has_item_tips()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->item_tips(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoShoutDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 parse_type = 1;
  if (has_parse_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->parse_type(), target);
  }
  
  // optional int32 single_value = 2;
  if (has_single_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->single_value(), target);
  }
  
  // optional int64 single_id = 3;
  if (has_single_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->single_id(), target);
  }
  
  // optional string single_content = 4;
  if (has_single_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->single_content().data(), this->single_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->single_content(), target);
  }
  
  // optional .ProtoBrocastRole role_info = 5;
  if (has_role_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->role_info(), target);
  }
  
  // optional .ProtoShoutItem item_tips = 6;
  if (has_item_tips()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->item_tips(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoShoutDetail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 parse_type = 1;
    if (has_parse_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parse_type());
    }
    
    // optional int32 single_value = 2;
    if (has_single_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->single_value());
    }
    
    // optional int64 single_id = 3;
    if (has_single_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->single_id());
    }
    
    // optional string single_content = 4;
    if (has_single_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->single_content());
    }
    
    // optional .ProtoBrocastRole role_info = 5;
    if (has_role_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_info());
    }
    
    // optional .ProtoShoutItem item_tips = 6;
    if (has_item_tips()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_tips());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoShoutDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoShoutDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoShoutDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoShoutDetail::MergeFrom(const ProtoShoutDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_parse_type()) {
      set_parse_type(from.parse_type());
    }
    if (from.has_single_value()) {
      set_single_value(from.single_value());
    }
    if (from.has_single_id()) {
      set_single_id(from.single_id());
    }
    if (from.has_single_content()) {
      set_single_content(from.single_content());
    }
    if (from.has_role_info()) {
      mutable_role_info()->::ProtoBrocastRole::MergeFrom(from.role_info());
    }
    if (from.has_item_tips()) {
      mutable_item_tips()->::ProtoShoutItem::MergeFrom(from.item_tips());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoShoutDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoShoutDetail::CopyFrom(const ProtoShoutDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoShoutDetail::IsInitialized() const {
  
  return true;
}

void ProtoShoutDetail::Swap(ProtoShoutDetail* other) {
  if (other != this) {
    std::swap(parse_type_, other->parse_type_);
    std::swap(single_value_, other->single_value_);
    std::swap(single_id_, other->single_id_);
    std::swap(single_content_, other->single_content_);
    std::swap(role_info_, other->role_info_);
    std::swap(item_tips_, other->item_tips_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoShoutDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoShoutDetail_descriptor_;
  metadata.reflection = ProtoShoutDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoTreasure::kCoordXFieldNumber;
const int ProtoTreasure::kCoordYFieldNumber;
const int ProtoTreasure::kMapIndexFieldNumber;
const int ProtoTreasure::kStateFieldNumber;
#endif  // !_MSC_VER

ProtoTreasure::ProtoTreasure()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoTreasure::InitAsDefaultInstance() {
}

ProtoTreasure::ProtoTreasure(const ProtoTreasure& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoTreasure::SharedCtor() {
  _cached_size_ = 0;
  coord_x_ = 0;
  coord_y_ = 0;
  map_index_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoTreasure::~ProtoTreasure() {
  SharedDtor();
}

void ProtoTreasure::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoTreasure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoTreasure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoTreasure_descriptor_;
}

const ProtoTreasure& ProtoTreasure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoTreasure* ProtoTreasure::default_instance_ = NULL;

ProtoTreasure* ProtoTreasure::New() const {
  return new ProtoTreasure;
}

void ProtoTreasure::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    coord_x_ = 0;
    coord_y_ = 0;
    map_index_ = 0;
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoTreasure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 coord_x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coord_x_)));
          set_has_coord_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_coord_y;
        break;
      }
      
      // optional int32 coord_y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coord_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coord_y_)));
          set_has_coord_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_map_index;
        break;
      }
      
      // optional int32 map_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_index_)));
          set_has_map_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }
      
      // optional int32 state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoTreasure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 coord_x = 1;
  if (has_coord_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->coord_x(), output);
  }
  
  // optional int32 coord_y = 2;
  if (has_coord_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->coord_y(), output);
  }
  
  // optional int32 map_index = 3;
  if (has_map_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->map_index(), output);
  }
  
  // optional int32 state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->state(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoTreasure::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 coord_x = 1;
  if (has_coord_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->coord_x(), target);
  }
  
  // optional int32 coord_y = 2;
  if (has_coord_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->coord_y(), target);
  }
  
  // optional int32 map_index = 3;
  if (has_map_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->map_index(), target);
  }
  
  // optional int32 state = 4;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->state(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoTreasure::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 coord_x = 1;
    if (has_coord_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coord_x());
    }
    
    // optional int32 coord_y = 2;
    if (has_coord_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coord_y());
    }
    
    // optional int32 map_index = 3;
    if (has_map_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_index());
    }
    
    // optional int32 state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoTreasure::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoTreasure* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoTreasure*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoTreasure::MergeFrom(const ProtoTreasure& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_coord_x()) {
      set_coord_x(from.coord_x());
    }
    if (from.has_coord_y()) {
      set_coord_y(from.coord_y());
    }
    if (from.has_map_index()) {
      set_map_index(from.map_index());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoTreasure::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoTreasure::CopyFrom(const ProtoTreasure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoTreasure::IsInitialized() const {
  
  return true;
}

void ProtoTreasure::Swap(ProtoTreasure* other) {
  if (other != this) {
    std::swap(coord_x_, other->coord_x_);
    std::swap(coord_y_, other->coord_y_);
    std::swap(map_index_, other->map_index_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoTreasure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoTreasure_descriptor_;
  metadata.reflection = ProtoTreasure_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoScriptClean::kScriptSortFieldNumber;
const int ProtoScriptClean::kScriptTimesFieldNumber;
const int ProtoScriptClean::kChapterKeyFieldNumber;
const int ProtoScriptClean::kScriptUseTickFieldNumber;
const int ProtoScriptClean::kProtectBeastIndexFieldNumber;
const int ProtoScriptClean::kResetTimesFieldNumber;
#endif  // !_MSC_VER

ProtoScriptClean::ProtoScriptClean()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoScriptClean::InitAsDefaultInstance() {
}

ProtoScriptClean::ProtoScriptClean(const ProtoScriptClean& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoScriptClean::SharedCtor() {
  _cached_size_ = 0;
  script_sort_ = 0;
  script_times_ = 0;
  chapter_key_ = 0;
  script_use_tick_ = 0;
  protect_beast_index_ = 0;
  reset_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoScriptClean::~ProtoScriptClean() {
  SharedDtor();
}

void ProtoScriptClean::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoScriptClean::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoScriptClean::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoScriptClean_descriptor_;
}

const ProtoScriptClean& ProtoScriptClean::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoScriptClean* ProtoScriptClean::default_instance_ = NULL;

ProtoScriptClean* ProtoScriptClean::New() const {
  return new ProtoScriptClean;
}

void ProtoScriptClean::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    script_sort_ = 0;
    script_times_ = 0;
    chapter_key_ = 0;
    script_use_tick_ = 0;
    protect_beast_index_ = 0;
    reset_times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoScriptClean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 script_sort = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &script_sort_)));
          set_has_script_sort();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_script_times;
        break;
      }
      
      // optional int32 script_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_script_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &script_times_)));
          set_has_script_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_chapter_key;
        break;
      }
      
      // optional int32 chapter_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chapter_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chapter_key_)));
          set_has_chapter_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_script_use_tick;
        break;
      }
      
      // optional int32 script_use_tick = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_script_use_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &script_use_tick_)));
          set_has_script_use_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_protect_beast_index;
        break;
      }
      
      // optional int32 protect_beast_index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_protect_beast_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &protect_beast_index_)));
          set_has_protect_beast_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_reset_times;
        break;
      }
      
      // optional int32 reset_times = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reset_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reset_times_)));
          set_has_reset_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoScriptClean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 script_sort = 1;
  if (has_script_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->script_sort(), output);
  }
  
  // optional int32 script_times = 2;
  if (has_script_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->script_times(), output);
  }
  
  // optional int32 chapter_key = 3;
  if (has_chapter_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->chapter_key(), output);
  }
  
  // optional int32 script_use_tick = 4;
  if (has_script_use_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->script_use_tick(), output);
  }
  
  // optional int32 protect_beast_index = 5;
  if (has_protect_beast_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->protect_beast_index(), output);
  }
  
  // optional int32 reset_times = 6;
  if (has_reset_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->reset_times(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoScriptClean::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 script_sort = 1;
  if (has_script_sort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->script_sort(), target);
  }
  
  // optional int32 script_times = 2;
  if (has_script_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->script_times(), target);
  }
  
  // optional int32 chapter_key = 3;
  if (has_chapter_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->chapter_key(), target);
  }
  
  // optional int32 script_use_tick = 4;
  if (has_script_use_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->script_use_tick(), target);
  }
  
  // optional int32 protect_beast_index = 5;
  if (has_protect_beast_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->protect_beast_index(), target);
  }
  
  // optional int32 reset_times = 6;
  if (has_reset_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->reset_times(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoScriptClean::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 script_sort = 1;
    if (has_script_sort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->script_sort());
    }
    
    // optional int32 script_times = 2;
    if (has_script_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->script_times());
    }
    
    // optional int32 chapter_key = 3;
    if (has_chapter_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chapter_key());
    }
    
    // optional int32 script_use_tick = 4;
    if (has_script_use_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->script_use_tick());
    }
    
    // optional int32 protect_beast_index = 5;
    if (has_protect_beast_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->protect_beast_index());
    }
    
    // optional int32 reset_times = 6;
    if (has_reset_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reset_times());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoScriptClean::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoScriptClean* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoScriptClean*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoScriptClean::MergeFrom(const ProtoScriptClean& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_script_sort()) {
      set_script_sort(from.script_sort());
    }
    if (from.has_script_times()) {
      set_script_times(from.script_times());
    }
    if (from.has_chapter_key()) {
      set_chapter_key(from.chapter_key());
    }
    if (from.has_script_use_tick()) {
      set_script_use_tick(from.script_use_tick());
    }
    if (from.has_protect_beast_index()) {
      set_protect_beast_index(from.protect_beast_index());
    }
    if (from.has_reset_times()) {
      set_reset_times(from.reset_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoScriptClean::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoScriptClean::CopyFrom(const ProtoScriptClean& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoScriptClean::IsInitialized() const {
  
  return true;
}

void ProtoScriptClean::Swap(ProtoScriptClean* other) {
  if (other != this) {
    std::swap(script_sort_, other->script_sort_);
    std::swap(script_times_, other->script_times_);
    std::swap(chapter_key_, other->chapter_key_);
    std::swap(script_use_tick_, other->script_use_tick_);
    std::swap(protect_beast_index_, other->protect_beast_index_);
    std::swap(reset_times_, other->reset_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoScriptClean::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoScriptClean_descriptor_;
  metadata.reflection = ProtoScriptClean_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoHookDetail::kKillTaskMonsterFieldNumber;
const int ProtoHookDetail::kKillNearbyMonsterFieldNumber;
const int ProtoHookDetail::kAutoPickupFieldNumber;
const int ProtoHookDetail::kAutoCallBeastFieldNumber;
const int ProtoHookDetail::kAutoDrugFieldNumber;
const int ProtoHookDetail::kAutoDrugBloodFieldNumber;
const int ProtoHookDetail::kAutoDrugMagicFieldNumber;
const int ProtoHookDetail::kAutoBuyDrugFieldNumber;
const int ProtoHookDetail::kStopHookFieldNumber;
const int ProtoHookDetail::kReliveTypeFieldNumber;
const int ProtoHookDetail::kHookListIndexFieldNumber;
const int ProtoHookDetail::kSkillListFieldNumber;
const int ProtoHookDetail::kKillOtherFieldNumber;
const int ProtoHookDetail::kAutoDrugBloodBeastFieldNumber;
const int ProtoHookDetail::kAutoDrugMagicBeastFieldNumber;
const int ProtoHookDetail::kAutoAvoidBossFieldNumber;
const int ProtoHookDetail::kIsHookingFieldNumber;
const int ProtoHookDetail::kDrugBloodTickFieldNumber;
const int ProtoHookDetail::kDrugMagicTickFieldNumber;
const int ProtoHookDetail::kDrugBloodNotifyBuyFieldNumber;
const int ProtoHookDetail::kDrugMagicNotifyBuyFieldNumber;
const int ProtoHookDetail::kAutoBackMainFieldNumber;
const int ProtoHookDetail::kAutoBackMainBloodFieldNumber;
const int ProtoHookDetail::kAutoRandomFieldNumber;
const int ProtoHookDetail::kAutoRandomBloodFieldNumber;
const int ProtoHookDetail::kAutoBackMainTickFieldNumber;
const int ProtoHookDetail::kAutoRandomTickFieldNumber;
#endif  // !_MSC_VER

ProtoHookDetail::ProtoHookDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoHookDetail::InitAsDefaultInstance() {
}

ProtoHookDetail::ProtoHookDetail(const ProtoHookDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoHookDetail::SharedCtor() {
  _cached_size_ = 0;
  kill_task_monster_ = 0;
  kill_nearby_monster_ = 0;
  auto_pickup_ = 0;
  auto_call_beast_ = 0;
  auto_drug_ = 0;
  auto_drug_blood_ = 0;
  auto_drug_magic_ = 0;
  auto_buy_drug_ = 0;
  stop_hook_ = 0;
  relive_type_ = 0;
  hook_list_index_ = 0;
  kill_other_ = 0;
  auto_drug_blood_beast_ = 0;
  auto_drug_magic_beast_ = 0;
  auto_avoid_boss_ = 0;
  is_hooking_ = 0;
  drug_blood_tick_ = 0;
  drug_magic_tick_ = 0;
  drug_blood_notify_buy_ = 0;
  drug_magic_notify_buy_ = 0;
  auto_back_main_ = 0;
  auto_back_main_blood_ = 0;
  auto_random_ = 0;
  auto_random_blood_ = 0;
  auto_back_main_tick_ = 0;
  auto_random_tick_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoHookDetail::~ProtoHookDetail() {
  SharedDtor();
}

void ProtoHookDetail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoHookDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoHookDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoHookDetail_descriptor_;
}

const ProtoHookDetail& ProtoHookDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoHookDetail* ProtoHookDetail::default_instance_ = NULL;

ProtoHookDetail* ProtoHookDetail::New() const {
  return new ProtoHookDetail;
}

void ProtoHookDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    kill_task_monster_ = 0;
    kill_nearby_monster_ = 0;
    auto_pickup_ = 0;
    auto_call_beast_ = 0;
    auto_drug_ = 0;
    auto_drug_blood_ = 0;
    auto_drug_magic_ = 0;
    auto_buy_drug_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    stop_hook_ = 0;
    relive_type_ = 0;
    hook_list_index_ = 0;
    kill_other_ = 0;
    auto_drug_blood_beast_ = 0;
    auto_drug_magic_beast_ = 0;
    auto_avoid_boss_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    is_hooking_ = 0;
    drug_blood_tick_ = 0;
    drug_magic_tick_ = 0;
    drug_blood_notify_buy_ = 0;
    drug_magic_notify_buy_ = 0;
    auto_back_main_ = 0;
    auto_back_main_blood_ = 0;
    auto_random_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    auto_random_blood_ = 0;
    auto_back_main_tick_ = 0;
    auto_random_tick_ = 0;
  }
  skill_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoHookDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 kill_task_monster = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kill_task_monster_)));
          set_has_kill_task_monster();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_kill_nearby_monster;
        break;
      }
      
      // optional int32 kill_nearby_monster = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill_nearby_monster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kill_nearby_monster_)));
          set_has_kill_nearby_monster();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_auto_pickup;
        break;
      }
      
      // optional int32 auto_pickup = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_pickup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auto_pickup_)));
          set_has_auto_pickup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_auto_call_beast;
        break;
      }
      
      // optional int32 auto_call_beast = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_call_beast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auto_call_beast_)));
          set_has_auto_call_beast();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_auto_drug;
        break;
      }
      
      // optional int32 auto_drug = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_drug:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auto_drug_)));
          set_has_auto_drug();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_auto_drug_blood;
        break;
      }
      
      // optional int32 auto_drug_blood = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_drug_blood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auto_drug_blood_)));
          set_has_auto_drug_blood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_auto_drug_magic;
        break;
      }
      
      // optional int32 auto_drug_magic = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_drug_magic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auto_drug_magic_)));
          set_has_auto_drug_magic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_auto_buy_drug;
        break;
      }
      
      // optional int32 auto_buy_drug = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_buy_drug:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auto_buy_drug_)));
          set_has_auto_buy_drug();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_stop_hook;
        break;
      }
      
      // optional int32 stop_hook = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stop_hook:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stop_hook_)));
          set_has_stop_hook();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_relive_type;
        break;
      }
      
      // optional int32 relive_type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_relive_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &relive_type_)));
          set_has_relive_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_hook_list_index;
        break;
      }
      
      // optional int32 hook_list_index = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hook_list_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hook_list_index_)));
          set_has_hook_list_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_skill_list;
        break;
      }
      
      // repeated .ProtoHookSkill skill_list = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_skill_list;
        if (input->ExpectTag(104)) goto parse_kill_other;
        break;
      }
      
      // optional int32 kill_other = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill_other:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kill_other_)));
          set_has_kill_other();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_auto_drug_blood_beast;
        break;
      }
      
      // optional int32 auto_drug_blood_beast = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_drug_blood_beast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auto_drug_blood_beast_)));
          set_has_auto_drug_blood_beast();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_auto_drug_magic_beast;
        break;
      }
      
      // optional int32 auto_drug_magic_beast = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_drug_magic_beast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auto_drug_magic_beast_)));
          set_has_auto_drug_magic_beast();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_auto_avoid_boss;
        break;
      }
      
      // optional int32 auto_avoid_boss = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_avoid_boss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auto_avoid_boss_)));
          set_has_auto_avoid_boss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_is_hooking;
        break;
      }
      
      // optional int32 is_hooking = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_hooking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_hooking_)));
          set_has_is_hooking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_drug_blood_tick;
        break;
      }
      
      // optional int32 drug_blood_tick = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drug_blood_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drug_blood_tick_)));
          set_has_drug_blood_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_drug_magic_tick;
        break;
      }
      
      // optional int32 drug_magic_tick = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drug_magic_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drug_magic_tick_)));
          set_has_drug_magic_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_drug_blood_notify_buy;
        break;
      }
      
      // optional int32 drug_blood_notify_buy = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drug_blood_notify_buy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drug_blood_notify_buy_)));
          set_has_drug_blood_notify_buy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_drug_magic_notify_buy;
        break;
      }
      
      // optional int32 drug_magic_notify_buy = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drug_magic_notify_buy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drug_magic_notify_buy_)));
          set_has_drug_magic_notify_buy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_auto_back_main;
        break;
      }
      
      // optional int32 auto_back_main = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_back_main:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auto_back_main_)));
          set_has_auto_back_main();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_auto_back_main_blood;
        break;
      }
      
      // optional int32 auto_back_main_blood = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_back_main_blood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auto_back_main_blood_)));
          set_has_auto_back_main_blood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_auto_random;
        break;
      }
      
      // optional int32 auto_random = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_random:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auto_random_)));
          set_has_auto_random();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_auto_random_blood;
        break;
      }
      
      // optional int32 auto_random_blood = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_random_blood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auto_random_blood_)));
          set_has_auto_random_blood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_auto_back_main_tick;
        break;
      }
      
      // optional int32 auto_back_main_tick = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_back_main_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auto_back_main_tick_)));
          set_has_auto_back_main_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_auto_random_tick;
        break;
      }
      
      // optional int32 auto_random_tick = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_random_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auto_random_tick_)));
          set_has_auto_random_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoHookDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 kill_task_monster = 1;
  if (has_kill_task_monster()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->kill_task_monster(), output);
  }
  
  // optional int32 kill_nearby_monster = 2;
  if (has_kill_nearby_monster()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->kill_nearby_monster(), output);
  }
  
  // optional int32 auto_pickup = 3;
  if (has_auto_pickup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->auto_pickup(), output);
  }
  
  // optional int32 auto_call_beast = 4;
  if (has_auto_call_beast()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->auto_call_beast(), output);
  }
  
  // optional int32 auto_drug = 5;
  if (has_auto_drug()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->auto_drug(), output);
  }
  
  // optional int32 auto_drug_blood = 6;
  if (has_auto_drug_blood()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->auto_drug_blood(), output);
  }
  
  // optional int32 auto_drug_magic = 7;
  if (has_auto_drug_magic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->auto_drug_magic(), output);
  }
  
  // optional int32 auto_buy_drug = 8;
  if (has_auto_buy_drug()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->auto_buy_drug(), output);
  }
  
  // optional int32 stop_hook = 9;
  if (has_stop_hook()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->stop_hook(), output);
  }
  
  // optional int32 relive_type = 10;
  if (has_relive_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->relive_type(), output);
  }
  
  // optional int32 hook_list_index = 11;
  if (has_hook_list_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->hook_list_index(), output);
  }
  
  // repeated .ProtoHookSkill skill_list = 12;
  for (int i = 0; i < this->skill_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->skill_list(i), output);
  }
  
  // optional int32 kill_other = 13;
  if (has_kill_other()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->kill_other(), output);
  }
  
  // optional int32 auto_drug_blood_beast = 14;
  if (has_auto_drug_blood_beast()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->auto_drug_blood_beast(), output);
  }
  
  // optional int32 auto_drug_magic_beast = 15;
  if (has_auto_drug_magic_beast()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->auto_drug_magic_beast(), output);
  }
  
  // optional int32 auto_avoid_boss = 16;
  if (has_auto_avoid_boss()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->auto_avoid_boss(), output);
  }
  
  // optional int32 is_hooking = 17;
  if (has_is_hooking()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->is_hooking(), output);
  }
  
  // optional int32 drug_blood_tick = 18;
  if (has_drug_blood_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->drug_blood_tick(), output);
  }
  
  // optional int32 drug_magic_tick = 19;
  if (has_drug_magic_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->drug_magic_tick(), output);
  }
  
  // optional int32 drug_blood_notify_buy = 20;
  if (has_drug_blood_notify_buy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->drug_blood_notify_buy(), output);
  }
  
  // optional int32 drug_magic_notify_buy = 21;
  if (has_drug_magic_notify_buy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->drug_magic_notify_buy(), output);
  }
  
  // optional int32 auto_back_main = 22;
  if (has_auto_back_main()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->auto_back_main(), output);
  }
  
  // optional int32 auto_back_main_blood = 23;
  if (has_auto_back_main_blood()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->auto_back_main_blood(), output);
  }
  
  // optional int32 auto_random = 24;
  if (has_auto_random()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->auto_random(), output);
  }
  
  // optional int32 auto_random_blood = 25;
  if (has_auto_random_blood()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->auto_random_blood(), output);
  }
  
  // optional int32 auto_back_main_tick = 26;
  if (has_auto_back_main_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->auto_back_main_tick(), output);
  }
  
  // optional int32 auto_random_tick = 27;
  if (has_auto_random_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->auto_random_tick(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoHookDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 kill_task_monster = 1;
  if (has_kill_task_monster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->kill_task_monster(), target);
  }
  
  // optional int32 kill_nearby_monster = 2;
  if (has_kill_nearby_monster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->kill_nearby_monster(), target);
  }
  
  // optional int32 auto_pickup = 3;
  if (has_auto_pickup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->auto_pickup(), target);
  }
  
  // optional int32 auto_call_beast = 4;
  if (has_auto_call_beast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->auto_call_beast(), target);
  }
  
  // optional int32 auto_drug = 5;
  if (has_auto_drug()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->auto_drug(), target);
  }
  
  // optional int32 auto_drug_blood = 6;
  if (has_auto_drug_blood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->auto_drug_blood(), target);
  }
  
  // optional int32 auto_drug_magic = 7;
  if (has_auto_drug_magic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->auto_drug_magic(), target);
  }
  
  // optional int32 auto_buy_drug = 8;
  if (has_auto_buy_drug()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->auto_buy_drug(), target);
  }
  
  // optional int32 stop_hook = 9;
  if (has_stop_hook()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->stop_hook(), target);
  }
  
  // optional int32 relive_type = 10;
  if (has_relive_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->relive_type(), target);
  }
  
  // optional int32 hook_list_index = 11;
  if (has_hook_list_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->hook_list_index(), target);
  }
  
  // repeated .ProtoHookSkill skill_list = 12;
  for (int i = 0; i < this->skill_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->skill_list(i), target);
  }
  
  // optional int32 kill_other = 13;
  if (has_kill_other()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->kill_other(), target);
  }
  
  // optional int32 auto_drug_blood_beast = 14;
  if (has_auto_drug_blood_beast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->auto_drug_blood_beast(), target);
  }
  
  // optional int32 auto_drug_magic_beast = 15;
  if (has_auto_drug_magic_beast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->auto_drug_magic_beast(), target);
  }
  
  // optional int32 auto_avoid_boss = 16;
  if (has_auto_avoid_boss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->auto_avoid_boss(), target);
  }
  
  // optional int32 is_hooking = 17;
  if (has_is_hooking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->is_hooking(), target);
  }
  
  // optional int32 drug_blood_tick = 18;
  if (has_drug_blood_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->drug_blood_tick(), target);
  }
  
  // optional int32 drug_magic_tick = 19;
  if (has_drug_magic_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->drug_magic_tick(), target);
  }
  
  // optional int32 drug_blood_notify_buy = 20;
  if (has_drug_blood_notify_buy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->drug_blood_notify_buy(), target);
  }
  
  // optional int32 drug_magic_notify_buy = 21;
  if (has_drug_magic_notify_buy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->drug_magic_notify_buy(), target);
  }
  
  // optional int32 auto_back_main = 22;
  if (has_auto_back_main()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->auto_back_main(), target);
  }
  
  // optional int32 auto_back_main_blood = 23;
  if (has_auto_back_main_blood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->auto_back_main_blood(), target);
  }
  
  // optional int32 auto_random = 24;
  if (has_auto_random()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->auto_random(), target);
  }
  
  // optional int32 auto_random_blood = 25;
  if (has_auto_random_blood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->auto_random_blood(), target);
  }
  
  // optional int32 auto_back_main_tick = 26;
  if (has_auto_back_main_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->auto_back_main_tick(), target);
  }
  
  // optional int32 auto_random_tick = 27;
  if (has_auto_random_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->auto_random_tick(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoHookDetail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 kill_task_monster = 1;
    if (has_kill_task_monster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kill_task_monster());
    }
    
    // optional int32 kill_nearby_monster = 2;
    if (has_kill_nearby_monster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kill_nearby_monster());
    }
    
    // optional int32 auto_pickup = 3;
    if (has_auto_pickup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auto_pickup());
    }
    
    // optional int32 auto_call_beast = 4;
    if (has_auto_call_beast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auto_call_beast());
    }
    
    // optional int32 auto_drug = 5;
    if (has_auto_drug()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auto_drug());
    }
    
    // optional int32 auto_drug_blood = 6;
    if (has_auto_drug_blood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auto_drug_blood());
    }
    
    // optional int32 auto_drug_magic = 7;
    if (has_auto_drug_magic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auto_drug_magic());
    }
    
    // optional int32 auto_buy_drug = 8;
    if (has_auto_buy_drug()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auto_buy_drug());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 stop_hook = 9;
    if (has_stop_hook()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stop_hook());
    }
    
    // optional int32 relive_type = 10;
    if (has_relive_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->relive_type());
    }
    
    // optional int32 hook_list_index = 11;
    if (has_hook_list_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hook_list_index());
    }
    
    // optional int32 kill_other = 13;
    if (has_kill_other()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kill_other());
    }
    
    // optional int32 auto_drug_blood_beast = 14;
    if (has_auto_drug_blood_beast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auto_drug_blood_beast());
    }
    
    // optional int32 auto_drug_magic_beast = 15;
    if (has_auto_drug_magic_beast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auto_drug_magic_beast());
    }
    
    // optional int32 auto_avoid_boss = 16;
    if (has_auto_avoid_boss()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auto_avoid_boss());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 is_hooking = 17;
    if (has_is_hooking()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_hooking());
    }
    
    // optional int32 drug_blood_tick = 18;
    if (has_drug_blood_tick()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->drug_blood_tick());
    }
    
    // optional int32 drug_magic_tick = 19;
    if (has_drug_magic_tick()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->drug_magic_tick());
    }
    
    // optional int32 drug_blood_notify_buy = 20;
    if (has_drug_blood_notify_buy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->drug_blood_notify_buy());
    }
    
    // optional int32 drug_magic_notify_buy = 21;
    if (has_drug_magic_notify_buy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->drug_magic_notify_buy());
    }
    
    // optional int32 auto_back_main = 22;
    if (has_auto_back_main()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auto_back_main());
    }
    
    // optional int32 auto_back_main_blood = 23;
    if (has_auto_back_main_blood()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auto_back_main_blood());
    }
    
    // optional int32 auto_random = 24;
    if (has_auto_random()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auto_random());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 auto_random_blood = 25;
    if (has_auto_random_blood()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auto_random_blood());
    }
    
    // optional int32 auto_back_main_tick = 26;
    if (has_auto_back_main_tick()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auto_back_main_tick());
    }
    
    // optional int32 auto_random_tick = 27;
    if (has_auto_random_tick()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auto_random_tick());
    }
    
  }
  // repeated .ProtoHookSkill skill_list = 12;
  total_size += 1 * this->skill_list_size();
  for (int i = 0; i < this->skill_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoHookDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoHookDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoHookDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoHookDetail::MergeFrom(const ProtoHookDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_list_.MergeFrom(from.skill_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kill_task_monster()) {
      set_kill_task_monster(from.kill_task_monster());
    }
    if (from.has_kill_nearby_monster()) {
      set_kill_nearby_monster(from.kill_nearby_monster());
    }
    if (from.has_auto_pickup()) {
      set_auto_pickup(from.auto_pickup());
    }
    if (from.has_auto_call_beast()) {
      set_auto_call_beast(from.auto_call_beast());
    }
    if (from.has_auto_drug()) {
      set_auto_drug(from.auto_drug());
    }
    if (from.has_auto_drug_blood()) {
      set_auto_drug_blood(from.auto_drug_blood());
    }
    if (from.has_auto_drug_magic()) {
      set_auto_drug_magic(from.auto_drug_magic());
    }
    if (from.has_auto_buy_drug()) {
      set_auto_buy_drug(from.auto_buy_drug());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_stop_hook()) {
      set_stop_hook(from.stop_hook());
    }
    if (from.has_relive_type()) {
      set_relive_type(from.relive_type());
    }
    if (from.has_hook_list_index()) {
      set_hook_list_index(from.hook_list_index());
    }
    if (from.has_kill_other()) {
      set_kill_other(from.kill_other());
    }
    if (from.has_auto_drug_blood_beast()) {
      set_auto_drug_blood_beast(from.auto_drug_blood_beast());
    }
    if (from.has_auto_drug_magic_beast()) {
      set_auto_drug_magic_beast(from.auto_drug_magic_beast());
    }
    if (from.has_auto_avoid_boss()) {
      set_auto_avoid_boss(from.auto_avoid_boss());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_is_hooking()) {
      set_is_hooking(from.is_hooking());
    }
    if (from.has_drug_blood_tick()) {
      set_drug_blood_tick(from.drug_blood_tick());
    }
    if (from.has_drug_magic_tick()) {
      set_drug_magic_tick(from.drug_magic_tick());
    }
    if (from.has_drug_blood_notify_buy()) {
      set_drug_blood_notify_buy(from.drug_blood_notify_buy());
    }
    if (from.has_drug_magic_notify_buy()) {
      set_drug_magic_notify_buy(from.drug_magic_notify_buy());
    }
    if (from.has_auto_back_main()) {
      set_auto_back_main(from.auto_back_main());
    }
    if (from.has_auto_back_main_blood()) {
      set_auto_back_main_blood(from.auto_back_main_blood());
    }
    if (from.has_auto_random()) {
      set_auto_random(from.auto_random());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_auto_random_blood()) {
      set_auto_random_blood(from.auto_random_blood());
    }
    if (from.has_auto_back_main_tick()) {
      set_auto_back_main_tick(from.auto_back_main_tick());
    }
    if (from.has_auto_random_tick()) {
      set_auto_random_tick(from.auto_random_tick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoHookDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoHookDetail::CopyFrom(const ProtoHookDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoHookDetail::IsInitialized() const {
  
  return true;
}

void ProtoHookDetail::Swap(ProtoHookDetail* other) {
  if (other != this) {
    std::swap(kill_task_monster_, other->kill_task_monster_);
    std::swap(kill_nearby_monster_, other->kill_nearby_monster_);
    std::swap(auto_pickup_, other->auto_pickup_);
    std::swap(auto_call_beast_, other->auto_call_beast_);
    std::swap(auto_drug_, other->auto_drug_);
    std::swap(auto_drug_blood_, other->auto_drug_blood_);
    std::swap(auto_drug_magic_, other->auto_drug_magic_);
    std::swap(auto_buy_drug_, other->auto_buy_drug_);
    std::swap(stop_hook_, other->stop_hook_);
    std::swap(relive_type_, other->relive_type_);
    std::swap(hook_list_index_, other->hook_list_index_);
    skill_list_.Swap(&other->skill_list_);
    std::swap(kill_other_, other->kill_other_);
    std::swap(auto_drug_blood_beast_, other->auto_drug_blood_beast_);
    std::swap(auto_drug_magic_beast_, other->auto_drug_magic_beast_);
    std::swap(auto_avoid_boss_, other->auto_avoid_boss_);
    std::swap(is_hooking_, other->is_hooking_);
    std::swap(drug_blood_tick_, other->drug_blood_tick_);
    std::swap(drug_magic_tick_, other->drug_magic_tick_);
    std::swap(drug_blood_notify_buy_, other->drug_blood_notify_buy_);
    std::swap(drug_magic_notify_buy_, other->drug_magic_notify_buy_);
    std::swap(auto_back_main_, other->auto_back_main_);
    std::swap(auto_back_main_blood_, other->auto_back_main_blood_);
    std::swap(auto_random_, other->auto_random_);
    std::swap(auto_random_blood_, other->auto_random_blood_);
    std::swap(auto_back_main_tick_, other->auto_back_main_tick_);
    std::swap(auto_random_tick_, other->auto_random_tick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoHookDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoHookDetail_descriptor_;
  metadata.reflection = ProtoHookDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoHookSkill::kHookSkillIdFieldNumber;
#endif  // !_MSC_VER

ProtoHookSkill::ProtoHookSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoHookSkill::InitAsDefaultInstance() {
}

ProtoHookSkill::ProtoHookSkill(const ProtoHookSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoHookSkill::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoHookSkill::~ProtoHookSkill() {
  SharedDtor();
}

void ProtoHookSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoHookSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoHookSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoHookSkill_descriptor_;
}

const ProtoHookSkill& ProtoHookSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoHookSkill* ProtoHookSkill::default_instance_ = NULL;

ProtoHookSkill* ProtoHookSkill::New() const {
  return new ProtoHookSkill;
}

void ProtoHookSkill::Clear() {
  hook_skill_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoHookSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 hook_skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hook_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_hook_skill_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_hook_skill_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_hook_skill_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoHookSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 hook_skill_id = 1;
  for (int i = 0; i < this->hook_skill_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->hook_skill_id(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoHookSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 hook_skill_id = 1;
  for (int i = 0; i < this->hook_skill_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->hook_skill_id(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoHookSkill::ByteSize() const {
  int total_size = 0;
  
  // repeated int32 hook_skill_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->hook_skill_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->hook_skill_id(i));
    }
    total_size += 1 * this->hook_skill_id_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoHookSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoHookSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoHookSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoHookSkill::MergeFrom(const ProtoHookSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  hook_skill_id_.MergeFrom(from.hook_skill_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoHookSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoHookSkill::CopyFrom(const ProtoHookSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoHookSkill::IsInitialized() const {
  
  return true;
}

void ProtoHookSkill::Swap(ProtoHookSkill* other) {
  if (other != this) {
    hook_skill_id_.Swap(&other->hook_skill_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoHookSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoHookSkill_descriptor_;
  metadata.reflection = ProtoHookSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoFashionTipInfo::kTipIdFieldNumber;
const int ProtoFashionTipInfo::kFashionIdFieldNumber;
const int ProtoFashionTipInfo::kFashionForceFieldNumber;
const int ProtoFashionTipInfo::kLeftSecFieldNumber;
const int ProtoFashionTipInfo::kMartialIdFieldNumber;
const int ProtoFashionTipInfo::kEventIdFieldNumber;
#endif  // !_MSC_VER

ProtoFashionTipInfo::ProtoFashionTipInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoFashionTipInfo::InitAsDefaultInstance() {
}

ProtoFashionTipInfo::ProtoFashionTipInfo(const ProtoFashionTipInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoFashionTipInfo::SharedCtor() {
  _cached_size_ = 0;
  tip_id_ = GOOGLE_LONGLONG(0);
  fashion_id_ = 0;
  fashion_force_ = 0;
  left_sec_ = 0;
  martial_id_ = 0;
  event_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoFashionTipInfo::~ProtoFashionTipInfo() {
  SharedDtor();
}

void ProtoFashionTipInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoFashionTipInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoFashionTipInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoFashionTipInfo_descriptor_;
}

const ProtoFashionTipInfo& ProtoFashionTipInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoFashionTipInfo* ProtoFashionTipInfo::default_instance_ = NULL;

ProtoFashionTipInfo* ProtoFashionTipInfo::New() const {
  return new ProtoFashionTipInfo;
}

void ProtoFashionTipInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tip_id_ = GOOGLE_LONGLONG(0);
    fashion_id_ = 0;
    fashion_force_ = 0;
    left_sec_ = 0;
    martial_id_ = 0;
    event_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoFashionTipInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 tip_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tip_id_)));
          set_has_tip_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fashion_id;
        break;
      }
      
      // optional int32 fashion_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashion_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fashion_id_)));
          set_has_fashion_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fashion_force;
        break;
      }
      
      // optional int32 fashion_force = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashion_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fashion_force_)));
          set_has_fashion_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_left_sec;
        break;
      }
      
      // optional int32 left_sec = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_sec_)));
          set_has_left_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_martial_id;
        break;
      }
      
      // optional int32 martial_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_martial_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &martial_id_)));
          set_has_martial_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_event_id;
        break;
      }
      
      // optional int32 event_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoFashionTipInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 tip_id = 1;
  if (has_tip_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->tip_id(), output);
  }
  
  // optional int32 fashion_id = 2;
  if (has_fashion_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fashion_id(), output);
  }
  
  // optional int32 fashion_force = 3;
  if (has_fashion_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fashion_force(), output);
  }
  
  // optional int32 left_sec = 4;
  if (has_left_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->left_sec(), output);
  }
  
  // optional int32 martial_id = 5;
  if (has_martial_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->martial_id(), output);
  }
  
  // optional int32 event_id = 6;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->event_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoFashionTipInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 tip_id = 1;
  if (has_tip_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->tip_id(), target);
  }
  
  // optional int32 fashion_id = 2;
  if (has_fashion_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fashion_id(), target);
  }
  
  // optional int32 fashion_force = 3;
  if (has_fashion_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fashion_force(), target);
  }
  
  // optional int32 left_sec = 4;
  if (has_left_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->left_sec(), target);
  }
  
  // optional int32 martial_id = 5;
  if (has_martial_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->martial_id(), target);
  }
  
  // optional int32 event_id = 6;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->event_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoFashionTipInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 tip_id = 1;
    if (has_tip_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tip_id());
    }
    
    // optional int32 fashion_id = 2;
    if (has_fashion_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fashion_id());
    }
    
    // optional int32 fashion_force = 3;
    if (has_fashion_force()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fashion_force());
    }
    
    // optional int32 left_sec = 4;
    if (has_left_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_sec());
    }
    
    // optional int32 martial_id = 5;
    if (has_martial_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->martial_id());
    }
    
    // optional int32 event_id = 6;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoFashionTipInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoFashionTipInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoFashionTipInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoFashionTipInfo::MergeFrom(const ProtoFashionTipInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tip_id()) {
      set_tip_id(from.tip_id());
    }
    if (from.has_fashion_id()) {
      set_fashion_id(from.fashion_id());
    }
    if (from.has_fashion_force()) {
      set_fashion_force(from.fashion_force());
    }
    if (from.has_left_sec()) {
      set_left_sec(from.left_sec());
    }
    if (from.has_martial_id()) {
      set_martial_id(from.martial_id());
    }
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoFashionTipInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoFashionTipInfo::CopyFrom(const ProtoFashionTipInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoFashionTipInfo::IsInitialized() const {
  
  return true;
}

void ProtoFashionTipInfo::Swap(ProtoFashionTipInfo* other) {
  if (other != this) {
    std::swap(tip_id_, other->tip_id_);
    std::swap(fashion_id_, other->fashion_id_);
    std::swap(fashion_force_, other->fashion_force_);
    std::swap(left_sec_, other->left_sec_);
    std::swap(martial_id_, other->martial_id_);
    std::swap(event_id_, other->event_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoFashionTipInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoFashionTipInfo_descriptor_;
  metadata.reflection = ProtoFashionTipInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoVipTimeTipInfo::kTipIdFieldNumber;
const int ProtoVipTimeTipInfo::kVipTypeFieldNumber;
const int ProtoVipTimeTipInfo::kLeftSecFieldNumber;
const int ProtoVipTimeTipInfo::kEventIdFieldNumber;
#endif  // !_MSC_VER

ProtoVipTimeTipInfo::ProtoVipTimeTipInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoVipTimeTipInfo::InitAsDefaultInstance() {
}

ProtoVipTimeTipInfo::ProtoVipTimeTipInfo(const ProtoVipTimeTipInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoVipTimeTipInfo::SharedCtor() {
  _cached_size_ = 0;
  tip_id_ = GOOGLE_LONGLONG(0);
  vip_type_ = 0;
  left_sec_ = 0;
  event_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoVipTimeTipInfo::~ProtoVipTimeTipInfo() {
  SharedDtor();
}

void ProtoVipTimeTipInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoVipTimeTipInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoVipTimeTipInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoVipTimeTipInfo_descriptor_;
}

const ProtoVipTimeTipInfo& ProtoVipTimeTipInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoVipTimeTipInfo* ProtoVipTimeTipInfo::default_instance_ = NULL;

ProtoVipTimeTipInfo* ProtoVipTimeTipInfo::New() const {
  return new ProtoVipTimeTipInfo;
}

void ProtoVipTimeTipInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tip_id_ = GOOGLE_LONGLONG(0);
    vip_type_ = 0;
    left_sec_ = 0;
    event_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoVipTimeTipInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 tip_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tip_id_)));
          set_has_tip_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_vip_type;
        break;
      }
      
      // optional int32 vip_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_type_)));
          set_has_vip_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_left_sec;
        break;
      }
      
      // optional int32 left_sec = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_sec_)));
          set_has_left_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_event_id;
        break;
      }
      
      // optional int32 event_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoVipTimeTipInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 tip_id = 1;
  if (has_tip_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->tip_id(), output);
  }
  
  // optional int32 vip_type = 2;
  if (has_vip_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->vip_type(), output);
  }
  
  // optional int32 left_sec = 3;
  if (has_left_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->left_sec(), output);
  }
  
  // optional int32 event_id = 4;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->event_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoVipTimeTipInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 tip_id = 1;
  if (has_tip_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->tip_id(), target);
  }
  
  // optional int32 vip_type = 2;
  if (has_vip_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->vip_type(), target);
  }
  
  // optional int32 left_sec = 3;
  if (has_left_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->left_sec(), target);
  }
  
  // optional int32 event_id = 4;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->event_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoVipTimeTipInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 tip_id = 1;
    if (has_tip_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tip_id());
    }
    
    // optional int32 vip_type = 2;
    if (has_vip_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_type());
    }
    
    // optional int32 left_sec = 3;
    if (has_left_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_sec());
    }
    
    // optional int32 event_id = 4;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoVipTimeTipInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoVipTimeTipInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoVipTimeTipInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoVipTimeTipInfo::MergeFrom(const ProtoVipTimeTipInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tip_id()) {
      set_tip_id(from.tip_id());
    }
    if (from.has_vip_type()) {
      set_vip_type(from.vip_type());
    }
    if (from.has_left_sec()) {
      set_left_sec(from.left_sec());
    }
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoVipTimeTipInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoVipTimeTipInfo::CopyFrom(const ProtoVipTimeTipInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoVipTimeTipInfo::IsInitialized() const {
  
  return true;
}

void ProtoVipTimeTipInfo::Swap(ProtoVipTimeTipInfo* other) {
  if (other != this) {
    std::swap(tip_id_, other->tip_id_);
    std::swap(vip_type_, other->vip_type_);
    std::swap(left_sec_, other->left_sec_);
    std::swap(event_id_, other->event_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoVipTimeTipInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoVipTimeTipInfo_descriptor_;
  metadata.reflection = ProtoVipTimeTipInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoScriptChapter::kChapterFieldNumber;
const int ProtoScriptChapter::kIsPassedFieldNumber;
const int ProtoScriptChapter::kStartLevelFieldNumber;
const int ProtoScriptChapter::kFirstIdFieldNumber;
const int ProtoScriptChapter::kFirstNameFieldNumber;
const int ProtoScriptChapter::kIsStartedFieldNumber;
const int ProtoScriptChapter::kBestTickFieldNumber;
#endif  // !_MSC_VER

ProtoScriptChapter::ProtoScriptChapter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoScriptChapter::InitAsDefaultInstance() {
}

ProtoScriptChapter::ProtoScriptChapter(const ProtoScriptChapter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoScriptChapter::SharedCtor() {
  _cached_size_ = 0;
  chapter_ = 0;
  is_passed_ = 0;
  start_level_ = 0;
  first_id_ = GOOGLE_LONGLONG(0);
  first_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_started_ = 0;
  best_tick_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoScriptChapter::~ProtoScriptChapter() {
  SharedDtor();
}

void ProtoScriptChapter::SharedDtor() {
  if (first_name_ != &::google::protobuf::internal::kEmptyString) {
    delete first_name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoScriptChapter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoScriptChapter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoScriptChapter_descriptor_;
}

const ProtoScriptChapter& ProtoScriptChapter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoScriptChapter* ProtoScriptChapter::default_instance_ = NULL;

ProtoScriptChapter* ProtoScriptChapter::New() const {
  return new ProtoScriptChapter;
}

void ProtoScriptChapter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chapter_ = 0;
    is_passed_ = 0;
    start_level_ = 0;
    first_id_ = GOOGLE_LONGLONG(0);
    if (has_first_name()) {
      if (first_name_ != &::google::protobuf::internal::kEmptyString) {
        first_name_->clear();
      }
    }
    is_started_ = 0;
    best_tick_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoScriptChapter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chapter = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chapter_)));
          set_has_chapter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_passed;
        break;
      }
      
      // optional int32 is_passed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_passed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_passed_)));
          set_has_is_passed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_start_level;
        break;
      }
      
      // optional int32 start_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_level_)));
          set_has_start_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_first_id;
        break;
      }
      
      // optional int64 first_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &first_id_)));
          set_has_first_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_first_name;
        break;
      }
      
      // optional string first_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_first_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_first_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->first_name().data(), this->first_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_started;
        break;
      }
      
      // optional int32 is_started = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_started:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_started_)));
          set_has_is_started();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_best_tick;
        break;
      }
      
      // optional int32 best_tick = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_best_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &best_tick_)));
          set_has_best_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoScriptChapter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chapter = 1;
  if (has_chapter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chapter(), output);
  }
  
  // optional int32 is_passed = 2;
  if (has_is_passed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->is_passed(), output);
  }
  
  // optional int32 start_level = 3;
  if (has_start_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->start_level(), output);
  }
  
  // optional int64 first_id = 4;
  if (has_first_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->first_id(), output);
  }
  
  // optional string first_name = 5;
  if (has_first_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->first_name().data(), this->first_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->first_name(), output);
  }
  
  // optional int32 is_started = 6;
  if (has_is_started()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->is_started(), output);
  }
  
  // optional int32 best_tick = 7;
  if (has_best_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->best_tick(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoScriptChapter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 chapter = 1;
  if (has_chapter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chapter(), target);
  }
  
  // optional int32 is_passed = 2;
  if (has_is_passed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->is_passed(), target);
  }
  
  // optional int32 start_level = 3;
  if (has_start_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->start_level(), target);
  }
  
  // optional int64 first_id = 4;
  if (has_first_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->first_id(), target);
  }
  
  // optional string first_name = 5;
  if (has_first_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->first_name().data(), this->first_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->first_name(), target);
  }
  
  // optional int32 is_started = 6;
  if (has_is_started()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->is_started(), target);
  }
  
  // optional int32 best_tick = 7;
  if (has_best_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->best_tick(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoScriptChapter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chapter = 1;
    if (has_chapter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chapter());
    }
    
    // optional int32 is_passed = 2;
    if (has_is_passed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_passed());
    }
    
    // optional int32 start_level = 3;
    if (has_start_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_level());
    }
    
    // optional int64 first_id = 4;
    if (has_first_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->first_id());
    }
    
    // optional string first_name = 5;
    if (has_first_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->first_name());
    }
    
    // optional int32 is_started = 6;
    if (has_is_started()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_started());
    }
    
    // optional int32 best_tick = 7;
    if (has_best_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->best_tick());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoScriptChapter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoScriptChapter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoScriptChapter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoScriptChapter::MergeFrom(const ProtoScriptChapter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chapter()) {
      set_chapter(from.chapter());
    }
    if (from.has_is_passed()) {
      set_is_passed(from.is_passed());
    }
    if (from.has_start_level()) {
      set_start_level(from.start_level());
    }
    if (from.has_first_id()) {
      set_first_id(from.first_id());
    }
    if (from.has_first_name()) {
      set_first_name(from.first_name());
    }
    if (from.has_is_started()) {
      set_is_started(from.is_started());
    }
    if (from.has_best_tick()) {
      set_best_tick(from.best_tick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoScriptChapter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoScriptChapter::CopyFrom(const ProtoScriptChapter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoScriptChapter::IsInitialized() const {
  
  return true;
}

void ProtoScriptChapter::Swap(ProtoScriptChapter* other) {
  if (other != this) {
    std::swap(chapter_, other->chapter_);
    std::swap(is_passed_, other->is_passed_);
    std::swap(start_level_, other->start_level_);
    std::swap(first_id_, other->first_id_);
    std::swap(first_name_, other->first_name_);
    std::swap(is_started_, other->is_started_);
    std::swap(best_tick_, other->best_tick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoScriptChapter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoScriptChapter_descriptor_;
  metadata.reflection = ProtoScriptChapter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoSysSetting::kIsShockFieldNumber;
const int ProtoSysSetting::kMusicFieldNumber;
const int ProtoSysSetting::kSoundEffectFieldNumber;
const int ProtoSysSetting::kScreenTypeFieldNumber;
const int ProtoSysSetting::kShieldTypeFieldNumber;
const int ProtoSysSetting::kTurnoffActNotifyFieldNumber;
const int ProtoSysSetting::kAutoAdjustExpressFieldNumber;
const int ProtoSysSetting::kFluencyTypeFieldNumber;
#endif  // !_MSC_VER

ProtoSysSetting::ProtoSysSetting()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoSysSetting::InitAsDefaultInstance() {
  music_ = const_cast< ::ProtoPairObj*>(&::ProtoPairObj::default_instance());
  sound_effect_ = const_cast< ::ProtoPairObj*>(&::ProtoPairObj::default_instance());
}

ProtoSysSetting::ProtoSysSetting(const ProtoSysSetting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoSysSetting::SharedCtor() {
  _cached_size_ = 0;
  is_shock_ = 0;
  music_ = NULL;
  sound_effect_ = NULL;
  screen_type_ = 0;
  turnoff_act_notify_ = 0;
  auto_adjust_express_ = 0;
  fluency_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoSysSetting::~ProtoSysSetting() {
  SharedDtor();
}

void ProtoSysSetting::SharedDtor() {
  if (this != default_instance_) {
    delete music_;
    delete sound_effect_;
  }
}

void ProtoSysSetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoSysSetting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoSysSetting_descriptor_;
}

const ProtoSysSetting& ProtoSysSetting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoSysSetting* ProtoSysSetting::default_instance_ = NULL;

ProtoSysSetting* ProtoSysSetting::New() const {
  return new ProtoSysSetting;
}

void ProtoSysSetting::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_shock_ = 0;
    if (has_music()) {
      if (music_ != NULL) music_->::ProtoPairObj::Clear();
    }
    if (has_sound_effect()) {
      if (sound_effect_ != NULL) sound_effect_->::ProtoPairObj::Clear();
    }
    screen_type_ = 0;
    turnoff_act_notify_ = 0;
    auto_adjust_express_ = 0;
    fluency_type_ = 0;
  }
  shield_type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoSysSetting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 is_shock = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_shock_)));
          set_has_is_shock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_music;
        break;
      }
      
      // optional .ProtoPairObj music = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_music:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_music()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sound_effect;
        break;
      }
      
      // optional .ProtoPairObj sound_effect = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sound_effect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sound_effect()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_screen_type;
        break;
      }
      
      // optional int32 screen_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_screen_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &screen_type_)));
          set_has_screen_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_shield_type;
        break;
      }
      
      // repeated int32 shield_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shield_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_shield_type())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_shield_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_shield_type;
        if (input->ExpectTag(48)) goto parse_turnoff_act_notify;
        break;
      }
      
      // optional int32 turnoff_act_notify = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turnoff_act_notify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &turnoff_act_notify_)));
          set_has_turnoff_act_notify();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_auto_adjust_express;
        break;
      }
      
      // optional int32 auto_adjust_express = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_adjust_express:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auto_adjust_express_)));
          set_has_auto_adjust_express();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_fluency_type;
        break;
      }
      
      // optional int32 fluency_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fluency_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fluency_type_)));
          set_has_fluency_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoSysSetting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 is_shock = 1;
  if (has_is_shock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->is_shock(), output);
  }
  
  // optional .ProtoPairObj music = 2;
  if (has_music()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->music(), output);
  }
  
  // optional .ProtoPairObj sound_effect = 3;
  if (has_sound_effect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sound_effect(), output);
  }
  
  // optional int32 screen_type = 4;
  if (has_screen_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->screen_type(), output);
  }
  
  // repeated int32 shield_type = 5;
  for (int i = 0; i < this->shield_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->shield_type(i), output);
  }
  
  // optional int32 turnoff_act_notify = 6;
  if (has_turnoff_act_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->turnoff_act_notify(), output);
  }
  
  // optional int32 auto_adjust_express = 7;
  if (has_auto_adjust_express()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->auto_adjust_express(), output);
  }
  
  // optional int32 fluency_type = 8;
  if (has_fluency_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->fluency_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoSysSetting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 is_shock = 1;
  if (has_is_shock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->is_shock(), target);
  }
  
  // optional .ProtoPairObj music = 2;
  if (has_music()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->music(), target);
  }
  
  // optional .ProtoPairObj sound_effect = 3;
  if (has_sound_effect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sound_effect(), target);
  }
  
  // optional int32 screen_type = 4;
  if (has_screen_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->screen_type(), target);
  }
  
  // repeated int32 shield_type = 5;
  for (int i = 0; i < this->shield_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->shield_type(i), target);
  }
  
  // optional int32 turnoff_act_notify = 6;
  if (has_turnoff_act_notify()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->turnoff_act_notify(), target);
  }
  
  // optional int32 auto_adjust_express = 7;
  if (has_auto_adjust_express()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->auto_adjust_express(), target);
  }
  
  // optional int32 fluency_type = 8;
  if (has_fluency_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->fluency_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoSysSetting::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 is_shock = 1;
    if (has_is_shock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_shock());
    }
    
    // optional .ProtoPairObj music = 2;
    if (has_music()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->music());
    }
    
    // optional .ProtoPairObj sound_effect = 3;
    if (has_sound_effect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sound_effect());
    }
    
    // optional int32 screen_type = 4;
    if (has_screen_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->screen_type());
    }
    
    // optional int32 turnoff_act_notify = 6;
    if (has_turnoff_act_notify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->turnoff_act_notify());
    }
    
    // optional int32 auto_adjust_express = 7;
    if (has_auto_adjust_express()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auto_adjust_express());
    }
    
    // optional int32 fluency_type = 8;
    if (has_fluency_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fluency_type());
    }
    
  }
  // repeated int32 shield_type = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->shield_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->shield_type(i));
    }
    total_size += 1 * this->shield_type_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoSysSetting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoSysSetting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoSysSetting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoSysSetting::MergeFrom(const ProtoSysSetting& from) {
  GOOGLE_CHECK_NE(&from, this);
  shield_type_.MergeFrom(from.shield_type_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_shock()) {
      set_is_shock(from.is_shock());
    }
    if (from.has_music()) {
      mutable_music()->::ProtoPairObj::MergeFrom(from.music());
    }
    if (from.has_sound_effect()) {
      mutable_sound_effect()->::ProtoPairObj::MergeFrom(from.sound_effect());
    }
    if (from.has_screen_type()) {
      set_screen_type(from.screen_type());
    }
    if (from.has_turnoff_act_notify()) {
      set_turnoff_act_notify(from.turnoff_act_notify());
    }
    if (from.has_auto_adjust_express()) {
      set_auto_adjust_express(from.auto_adjust_express());
    }
    if (from.has_fluency_type()) {
      set_fluency_type(from.fluency_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoSysSetting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoSysSetting::CopyFrom(const ProtoSysSetting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoSysSetting::IsInitialized() const {
  
  return true;
}

void ProtoSysSetting::Swap(ProtoSysSetting* other) {
  if (other != this) {
    std::swap(is_shock_, other->is_shock_);
    std::swap(music_, other->music_);
    std::swap(sound_effect_, other->sound_effect_);
    std::swap(screen_type_, other->screen_type_);
    shield_type_.Swap(&other->shield_type_);
    std::swap(turnoff_act_notify_, other->turnoff_act_notify_);
    std::swap(auto_adjust_express_, other->auto_adjust_express_);
    std::swap(fluency_type_, other->fluency_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoSysSetting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoSysSetting_descriptor_;
  metadata.reflection = ProtoSysSetting_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoRpmRoleInfo::kRoleIdFieldNumber;
const int ProtoRpmRoleInfo::kRoleNameFieldNumber;
const int ProtoRpmRoleInfo::kForceFieldNumber;
const int ProtoRpmRoleInfo::kLevelFieldNumber;
const int ProtoRpmRoleInfo::kCareerFieldNumber;
#endif  // !_MSC_VER

ProtoRpmRoleInfo::ProtoRpmRoleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoRpmRoleInfo::InitAsDefaultInstance() {
}

ProtoRpmRoleInfo::ProtoRpmRoleInfo(const ProtoRpmRoleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoRpmRoleInfo::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  force_ = 0;
  level_ = 0;
  career_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoRpmRoleInfo::~ProtoRpmRoleInfo() {
  SharedDtor();
}

void ProtoRpmRoleInfo::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoRpmRoleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoRpmRoleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoRpmRoleInfo_descriptor_;
}

const ProtoRpmRoleInfo& ProtoRpmRoleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoRpmRoleInfo* ProtoRpmRoleInfo::default_instance_ = NULL;

ProtoRpmRoleInfo* ProtoRpmRoleInfo::New() const {
  return new ProtoRpmRoleInfo;
}

void ProtoRpmRoleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_LONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    force_ = 0;
    level_ = 0;
    career_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoRpmRoleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_name;
        break;
      }
      
      // optional string role_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_force;
        break;
      }
      
      // optional int32 force = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &force_)));
          set_has_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }
      
      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_career;
        break;
      }
      
      // optional int32 career = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_career:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &career_)));
          set_has_career();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoRpmRoleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_id(), output);
  }
  
  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->role_name(), output);
  }
  
  // optional int32 force = 3;
  if (has_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->force(), output);
  }
  
  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }
  
  // optional int32 career = 5;
  if (has_career()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->career(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoRpmRoleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_id(), target);
  }
  
  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }
  
  // optional int32 force = 3;
  if (has_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->force(), target);
  }
  
  // optional int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }
  
  // optional int32 career = 5;
  if (has_career()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->career(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoRpmRoleInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional string role_name = 2;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }
    
    // optional int32 force = 3;
    if (has_force()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->force());
    }
    
    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 career = 5;
    if (has_career()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->career());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoRpmRoleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoRpmRoleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoRpmRoleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoRpmRoleInfo::MergeFrom(const ProtoRpmRoleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_force()) {
      set_force(from.force());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_career()) {
      set_career(from.career());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoRpmRoleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoRpmRoleInfo::CopyFrom(const ProtoRpmRoleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoRpmRoleInfo::IsInitialized() const {
  
  return true;
}

void ProtoRpmRoleInfo::Swap(ProtoRpmRoleInfo* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(force_, other->force_);
    std::swap(level_, other->level_);
    std::swap(career_, other->career_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoRpmRoleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoRpmRoleInfo_descriptor_;
  metadata.reflection = ProtoRpmRoleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TipsItem::kTypeFieldNumber;
const int TipsItem::kIdFieldNumber;
const int TipsItem::kAmountFieldNumber;
const int TipsItem::kExtra1FieldNumber;
const int TipsItem::kVipTypeFieldNumber;
const int TipsItem::kIsSpecialFieldNumber;
#endif  // !_MSC_VER

TipsItem::TipsItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TipsItem::InitAsDefaultInstance() {
}

TipsItem::TipsItem(const TipsItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TipsItem::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = 0;
  amount_ = 0;
  extra_1_ = 0;
  vip_type_ = 0;
  is_special_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TipsItem::~TipsItem() {
  SharedDtor();
}

void TipsItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TipsItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TipsItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TipsItem_descriptor_;
}

const TipsItem& TipsItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

TipsItem* TipsItem::default_instance_ = NULL;

TipsItem* TipsItem::New() const {
  return new TipsItem;
}

void TipsItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    id_ = 0;
    amount_ = 0;
    extra_1_ = 0;
    vip_type_ = 0;
    is_special_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TipsItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_amount;
        break;
      }
      
      // optional int32 amount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_extra_1;
        break;
      }
      
      // optional int32 extra_1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_extra_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &extra_1_)));
          set_has_extra_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_vip_type;
        break;
      }
      
      // optional int32 vip_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_type_)));
          set_has_vip_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_special;
        break;
      }
      
      // optional int32 is_special = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_special:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_special_)));
          set_has_is_special();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TipsItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  // optional int32 amount = 3;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->amount(), output);
  }
  
  // optional int32 extra_1 = 4;
  if (has_extra_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->extra_1(), output);
  }
  
  // optional int32 vip_type = 5;
  if (has_vip_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->vip_type(), output);
  }
  
  // optional int32 is_special = 6;
  if (has_is_special()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->is_special(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TipsItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  // optional int32 amount = 3;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->amount(), target);
  }
  
  // optional int32 extra_1 = 4;
  if (has_extra_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->extra_1(), target);
  }
  
  // optional int32 vip_type = 5;
  if (has_vip_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->vip_type(), target);
  }
  
  // optional int32 is_special = 6;
  if (has_is_special()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->is_special(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TipsItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 amount = 3;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->amount());
    }
    
    // optional int32 extra_1 = 4;
    if (has_extra_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->extra_1());
    }
    
    // optional int32 vip_type = 5;
    if (has_vip_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_type());
    }
    
    // optional int32 is_special = 6;
    if (has_is_special()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_special());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TipsItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TipsItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TipsItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TipsItem::MergeFrom(const TipsItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_extra_1()) {
      set_extra_1(from.extra_1());
    }
    if (from.has_vip_type()) {
      set_vip_type(from.vip_type());
    }
    if (from.has_is_special()) {
      set_is_special(from.is_special());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TipsItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TipsItem::CopyFrom(const TipsItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TipsItem::IsInitialized() const {
  
  return true;
}

void TipsItem::Swap(TipsItem* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(amount_, other->amount_);
    std::swap(extra_1_, other->extra_1_);
    std::swap(vip_type_, other->vip_type_);
    std::swap(is_special_, other->is_special_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TipsItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TipsItem_descriptor_;
  metadata.reflection = TipsItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoFBUseTimes::kRoleIdFieldNumber;
const int ProtoFBUseTimes::kUseTimesFieldNumber;
#endif  // !_MSC_VER

ProtoFBUseTimes::ProtoFBUseTimes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoFBUseTimes::InitAsDefaultInstance() {
}

ProtoFBUseTimes::ProtoFBUseTimes(const ProtoFBUseTimes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoFBUseTimes::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  use_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoFBUseTimes::~ProtoFBUseTimes() {
  SharedDtor();
}

void ProtoFBUseTimes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoFBUseTimes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoFBUseTimes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoFBUseTimes_descriptor_;
}

const ProtoFBUseTimes& ProtoFBUseTimes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoFBUseTimes* ProtoFBUseTimes::default_instance_ = NULL;

ProtoFBUseTimes* ProtoFBUseTimes::New() const {
  return new ProtoFBUseTimes;
}

void ProtoFBUseTimes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_LONGLONG(0);
    use_times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoFBUseTimes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_use_times;
        break;
      }
      
      // optional int32 use_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &use_times_)));
          set_has_use_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoFBUseTimes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_id(), output);
  }
  
  // optional int32 use_times = 2;
  if (has_use_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->use_times(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoFBUseTimes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_id(), target);
  }
  
  // optional int32 use_times = 2;
  if (has_use_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->use_times(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoFBUseTimes::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional int32 use_times = 2;
    if (has_use_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->use_times());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoFBUseTimes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoFBUseTimes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoFBUseTimes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoFBUseTimes::MergeFrom(const ProtoFBUseTimes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_use_times()) {
      set_use_times(from.use_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoFBUseTimes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoFBUseTimes::CopyFrom(const ProtoFBUseTimes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoFBUseTimes::IsInitialized() const {
  
  return true;
}

void ProtoFBUseTimes::Swap(ProtoFBUseTimes* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(use_times_, other->use_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoFBUseTimes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoFBUseTimes_descriptor_;
  metadata.reflection = ProtoFBUseTimes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoMoverPos::kRoleIdFieldNumber;
const int ProtoMoverPos::kPixelXFieldNumber;
const int ProtoMoverPos::kPixelYFieldNumber;
#endif  // !_MSC_VER

ProtoMoverPos::ProtoMoverPos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoMoverPos::InitAsDefaultInstance() {
}

ProtoMoverPos::ProtoMoverPos(const ProtoMoverPos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoMoverPos::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  pixel_x_ = 0;
  pixel_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoMoverPos::~ProtoMoverPos() {
  SharedDtor();
}

void ProtoMoverPos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoMoverPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoMoverPos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoMoverPos_descriptor_;
}

const ProtoMoverPos& ProtoMoverPos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoMoverPos* ProtoMoverPos::default_instance_ = NULL;

ProtoMoverPos* ProtoMoverPos::New() const {
  return new ProtoMoverPos;
}

void ProtoMoverPos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_LONGLONG(0);
    pixel_x_ = 0;
    pixel_y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoMoverPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pixel_x;
        break;
      }
      
      // optional int32 pixel_x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pixel_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pixel_x_)));
          set_has_pixel_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pixel_y;
        break;
      }
      
      // optional int32 pixel_y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pixel_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pixel_y_)));
          set_has_pixel_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoMoverPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_id(), output);
  }
  
  // optional int32 pixel_x = 2;
  if (has_pixel_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pixel_x(), output);
  }
  
  // optional int32 pixel_y = 3;
  if (has_pixel_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pixel_y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoMoverPos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_id(), target);
  }
  
  // optional int32 pixel_x = 2;
  if (has_pixel_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pixel_x(), target);
  }
  
  // optional int32 pixel_y = 3;
  if (has_pixel_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pixel_y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoMoverPos::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional int32 pixel_x = 2;
    if (has_pixel_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pixel_x());
    }
    
    // optional int32 pixel_y = 3;
    if (has_pixel_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pixel_y());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoMoverPos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoMoverPos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoMoverPos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoMoverPos::MergeFrom(const ProtoMoverPos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_pixel_x()) {
      set_pixel_x(from.pixel_x());
    }
    if (from.has_pixel_y()) {
      set_pixel_y(from.pixel_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoMoverPos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMoverPos::CopyFrom(const ProtoMoverPos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMoverPos::IsInitialized() const {
  
  return true;
}

void ProtoMoverPos::Swap(ProtoMoverPos* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(pixel_x_, other->pixel_x_);
    std::swap(pixel_y_, other->pixel_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoMoverPos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoMoverPos_descriptor_;
  metadata.reflection = ProtoMoverPos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoCustomerSVCRecord::kRecordIdFieldNumber;
const int ProtoCustomerSVCRecord::kSendTickFieldNumber;
const int ProtoCustomerSVCRecord::kRecordStatusFieldNumber;
const int ProtoCustomerSVCRecord::kRecordTypeFieldNumber;
const int ProtoCustomerSVCRecord::kTitleFieldNumber;
const int ProtoCustomerSVCRecord::kContentFieldNumber;
const int ProtoCustomerSVCRecord::kReplayContentFieldNumber;
const int ProtoCustomerSVCRecord::kLastEvaluateFieldNumber;
const int ProtoCustomerSVCRecord::kOpinionIndexFieldNumber;
const int ProtoCustomerSVCRecord::kEvaluateStarFieldNumber;
#endif  // !_MSC_VER

ProtoCustomerSVCRecord::ProtoCustomerSVCRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoCustomerSVCRecord::InitAsDefaultInstance() {
}

ProtoCustomerSVCRecord::ProtoCustomerSVCRecord(const ProtoCustomerSVCRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoCustomerSVCRecord::SharedCtor() {
  _cached_size_ = 0;
  record_id_ = GOOGLE_LONGLONG(0);
  send_tick_ = GOOGLE_LONGLONG(0);
  record_status_ = 0;
  record_type_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  replay_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  last_evaluate_ = 0;
  opinion_index_ = 0;
  evaluate_star_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoCustomerSVCRecord::~ProtoCustomerSVCRecord() {
  SharedDtor();
}

void ProtoCustomerSVCRecord::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (replay_content_ != &::google::protobuf::internal::kEmptyString) {
    delete replay_content_;
  }
  if (this != default_instance_) {
  }
}

void ProtoCustomerSVCRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoCustomerSVCRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoCustomerSVCRecord_descriptor_;
}

const ProtoCustomerSVCRecord& ProtoCustomerSVCRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoCustomerSVCRecord* ProtoCustomerSVCRecord::default_instance_ = NULL;

ProtoCustomerSVCRecord* ProtoCustomerSVCRecord::New() const {
  return new ProtoCustomerSVCRecord;
}

void ProtoCustomerSVCRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    record_id_ = GOOGLE_LONGLONG(0);
    send_tick_ = GOOGLE_LONGLONG(0);
    record_status_ = 0;
    record_type_ = 0;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    if (has_replay_content()) {
      if (replay_content_ != &::google::protobuf::internal::kEmptyString) {
        replay_content_->clear();
      }
    }
    last_evaluate_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    opinion_index_ = 0;
    evaluate_star_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoCustomerSVCRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 record_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &record_id_)));
          set_has_record_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_send_tick;
        break;
      }
      
      // optional int64 send_tick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &send_tick_)));
          set_has_send_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_record_status;
        break;
      }
      
      // optional int32 record_status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_record_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &record_status_)));
          set_has_record_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_record_type;
        break;
      }
      
      // optional int32 record_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_record_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &record_type_)));
          set_has_record_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_title;
        break;
      }
      
      // optional string title = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_content;
        break;
      }
      
      // optional string content = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_replay_content;
        break;
      }
      
      // optional string replay_content = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_replay_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_replay_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->replay_content().data(), this->replay_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_last_evaluate;
        break;
      }
      
      // optional int32 last_evaluate = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_evaluate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_evaluate_)));
          set_has_last_evaluate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_opinion_index;
        break;
      }
      
      // optional int32 opinion_index = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opinion_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opinion_index_)));
          set_has_opinion_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_evaluate_star;
        break;
      }
      
      // optional int32 evaluate_star = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_evaluate_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &evaluate_star_)));
          set_has_evaluate_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoCustomerSVCRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 record_id = 1;
  if (has_record_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->record_id(), output);
  }
  
  // optional int64 send_tick = 2;
  if (has_send_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->send_tick(), output);
  }
  
  // optional int32 record_status = 3;
  if (has_record_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->record_status(), output);
  }
  
  // optional int32 record_type = 4;
  if (has_record_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->record_type(), output);
  }
  
  // optional string title = 5;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->title(), output);
  }
  
  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->content(), output);
  }
  
  // optional string replay_content = 7;
  if (has_replay_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->replay_content().data(), this->replay_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->replay_content(), output);
  }
  
  // optional int32 last_evaluate = 8;
  if (has_last_evaluate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->last_evaluate(), output);
  }
  
  // optional int32 opinion_index = 9;
  if (has_opinion_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->opinion_index(), output);
  }
  
  // optional int32 evaluate_star = 10;
  if (has_evaluate_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->evaluate_star(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoCustomerSVCRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 record_id = 1;
  if (has_record_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->record_id(), target);
  }
  
  // optional int64 send_tick = 2;
  if (has_send_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->send_tick(), target);
  }
  
  // optional int32 record_status = 3;
  if (has_record_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->record_status(), target);
  }
  
  // optional int32 record_type = 4;
  if (has_record_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->record_type(), target);
  }
  
  // optional string title = 5;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->title(), target);
  }
  
  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->content(), target);
  }
  
  // optional string replay_content = 7;
  if (has_replay_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->replay_content().data(), this->replay_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->replay_content(), target);
  }
  
  // optional int32 last_evaluate = 8;
  if (has_last_evaluate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->last_evaluate(), target);
  }
  
  // optional int32 opinion_index = 9;
  if (has_opinion_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->opinion_index(), target);
  }
  
  // optional int32 evaluate_star = 10;
  if (has_evaluate_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->evaluate_star(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoCustomerSVCRecord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 record_id = 1;
    if (has_record_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->record_id());
    }
    
    // optional int64 send_tick = 2;
    if (has_send_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->send_tick());
    }
    
    // optional int32 record_status = 3;
    if (has_record_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->record_status());
    }
    
    // optional int32 record_type = 4;
    if (has_record_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->record_type());
    }
    
    // optional string title = 5;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }
    
    // optional string content = 6;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
    // optional string replay_content = 7;
    if (has_replay_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->replay_content());
    }
    
    // optional int32 last_evaluate = 8;
    if (has_last_evaluate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_evaluate());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 opinion_index = 9;
    if (has_opinion_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opinion_index());
    }
    
    // optional int32 evaluate_star = 10;
    if (has_evaluate_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->evaluate_star());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoCustomerSVCRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoCustomerSVCRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoCustomerSVCRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoCustomerSVCRecord::MergeFrom(const ProtoCustomerSVCRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_record_id()) {
      set_record_id(from.record_id());
    }
    if (from.has_send_tick()) {
      set_send_tick(from.send_tick());
    }
    if (from.has_record_status()) {
      set_record_status(from.record_status());
    }
    if (from.has_record_type()) {
      set_record_type(from.record_type());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_replay_content()) {
      set_replay_content(from.replay_content());
    }
    if (from.has_last_evaluate()) {
      set_last_evaluate(from.last_evaluate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_opinion_index()) {
      set_opinion_index(from.opinion_index());
    }
    if (from.has_evaluate_star()) {
      set_evaluate_star(from.evaluate_star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoCustomerSVCRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoCustomerSVCRecord::CopyFrom(const ProtoCustomerSVCRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoCustomerSVCRecord::IsInitialized() const {
  
  return true;
}

void ProtoCustomerSVCRecord::Swap(ProtoCustomerSVCRecord* other) {
  if (other != this) {
    std::swap(record_id_, other->record_id_);
    std::swap(send_tick_, other->send_tick_);
    std::swap(record_status_, other->record_status_);
    std::swap(record_type_, other->record_type_);
    std::swap(title_, other->title_);
    std::swap(content_, other->content_);
    std::swap(replay_content_, other->replay_content_);
    std::swap(last_evaluate_, other->last_evaluate_);
    std::swap(opinion_index_, other->opinion_index_);
    std::swap(evaluate_star_, other->evaluate_star_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoCustomerSVCRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoCustomerSVCRecord_descriptor_;
  metadata.reflection = ProtoCustomerSVCRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoMediaGiftDef::kGiftSortFieldNumber;
const int ProtoMediaGiftDef::kGiftTypeFieldNumber;
const int ProtoMediaGiftDef::kValueExtsFieldNumber;
const int ProtoMediaGiftDef::kGiftItemsFieldNumber;
const int ProtoMediaGiftDef::kGiftNameFieldNumber;
const int ProtoMediaGiftDef::kGiftDescFieldNumber;
const int ProtoMediaGiftDef::kUseTimesFieldNumber;
const int ProtoMediaGiftDef::kLeftUseTimesFieldNumber;
const int ProtoMediaGiftDef::kIconIdFieldNumber;
const int ProtoMediaGiftDef::kFontColorFieldNumber;
#endif  // !_MSC_VER

ProtoMediaGiftDef::ProtoMediaGiftDef()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoMediaGiftDef::InitAsDefaultInstance() {
}

ProtoMediaGiftDef::ProtoMediaGiftDef(const ProtoMediaGiftDef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoMediaGiftDef::SharedCtor() {
  _cached_size_ = 0;
  gift_sort_ = 0;
  gift_type_ = 0;
  gift_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gift_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  use_times_ = 0;
  left_use_times_ = 0;
  icon_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoMediaGiftDef::~ProtoMediaGiftDef() {
  SharedDtor();
}

void ProtoMediaGiftDef::SharedDtor() {
  if (gift_name_ != &::google::protobuf::internal::kEmptyString) {
    delete gift_name_;
  }
  if (gift_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete gift_desc_;
  }
  if (this != default_instance_) {
  }
}

void ProtoMediaGiftDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoMediaGiftDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoMediaGiftDef_descriptor_;
}

const ProtoMediaGiftDef& ProtoMediaGiftDef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoMediaGiftDef* ProtoMediaGiftDef::default_instance_ = NULL;

ProtoMediaGiftDef* ProtoMediaGiftDef::New() const {
  return new ProtoMediaGiftDef;
}

void ProtoMediaGiftDef::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gift_sort_ = 0;
    gift_type_ = 0;
    if (has_gift_name()) {
      if (gift_name_ != &::google::protobuf::internal::kEmptyString) {
        gift_name_->clear();
      }
    }
    if (has_gift_desc()) {
      if (gift_desc_ != &::google::protobuf::internal::kEmptyString) {
        gift_desc_->clear();
      }
    }
    use_times_ = 0;
    left_use_times_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    icon_id_ = 0;
  }
  value_exts_.Clear();
  gift_items_.Clear();
  font_color_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoMediaGiftDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gift_sort = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gift_sort_)));
          set_has_gift_sort();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gift_type;
        break;
      }
      
      // optional int32 gift_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gift_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gift_type_)));
          set_has_gift_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_value_exts;
        break;
      }
      
      // repeated .ProtoPairObj value_exts = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value_exts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_value_exts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_value_exts;
        if (input->ExpectTag(34)) goto parse_gift_items;
        break;
      }
      
      // repeated .ProtoItem gift_items = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gift_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gift_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_gift_items;
        if (input->ExpectTag(42)) goto parse_gift_name;
        break;
      }
      
      // optional string gift_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gift_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gift_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gift_name().data(), this->gift_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_gift_desc;
        break;
      }
      
      // optional string gift_desc = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gift_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gift_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gift_desc().data(), this->gift_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_use_times;
        break;
      }
      
      // optional int32 use_times = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &use_times_)));
          set_has_use_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_left_use_times;
        break;
      }
      
      // optional int32 left_use_times = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_use_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_use_times_)));
          set_has_left_use_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_icon_id;
        break;
      }
      
      // optional int32 icon_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_icon_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icon_id_)));
          set_has_icon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_font_color;
        break;
      }
      
      // repeated int32 font_color = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_font_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_font_color())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_font_color())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_font_color;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoMediaGiftDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gift_sort = 1;
  if (has_gift_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gift_sort(), output);
  }
  
  // optional int32 gift_type = 2;
  if (has_gift_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gift_type(), output);
  }
  
  // repeated .ProtoPairObj value_exts = 3;
  for (int i = 0; i < this->value_exts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->value_exts(i), output);
  }
  
  // repeated .ProtoItem gift_items = 4;
  for (int i = 0; i < this->gift_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->gift_items(i), output);
  }
  
  // optional string gift_name = 5;
  if (has_gift_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gift_name().data(), this->gift_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->gift_name(), output);
  }
  
  // optional string gift_desc = 6;
  if (has_gift_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gift_desc().data(), this->gift_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->gift_desc(), output);
  }
  
  // optional int32 use_times = 7;
  if (has_use_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->use_times(), output);
  }
  
  // optional int32 left_use_times = 8;
  if (has_left_use_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->left_use_times(), output);
  }
  
  // optional int32 icon_id = 9;
  if (has_icon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->icon_id(), output);
  }
  
  // repeated int32 font_color = 10;
  for (int i = 0; i < this->font_color_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->font_color(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoMediaGiftDef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 gift_sort = 1;
  if (has_gift_sort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gift_sort(), target);
  }
  
  // optional int32 gift_type = 2;
  if (has_gift_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gift_type(), target);
  }
  
  // repeated .ProtoPairObj value_exts = 3;
  for (int i = 0; i < this->value_exts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->value_exts(i), target);
  }
  
  // repeated .ProtoItem gift_items = 4;
  for (int i = 0; i < this->gift_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->gift_items(i), target);
  }
  
  // optional string gift_name = 5;
  if (has_gift_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gift_name().data(), this->gift_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->gift_name(), target);
  }
  
  // optional string gift_desc = 6;
  if (has_gift_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gift_desc().data(), this->gift_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->gift_desc(), target);
  }
  
  // optional int32 use_times = 7;
  if (has_use_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->use_times(), target);
  }
  
  // optional int32 left_use_times = 8;
  if (has_left_use_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->left_use_times(), target);
  }
  
  // optional int32 icon_id = 9;
  if (has_icon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->icon_id(), target);
  }
  
  // repeated int32 font_color = 10;
  for (int i = 0; i < this->font_color_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->font_color(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoMediaGiftDef::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gift_sort = 1;
    if (has_gift_sort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gift_sort());
    }
    
    // optional int32 gift_type = 2;
    if (has_gift_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gift_type());
    }
    
    // optional string gift_name = 5;
    if (has_gift_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gift_name());
    }
    
    // optional string gift_desc = 6;
    if (has_gift_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gift_desc());
    }
    
    // optional int32 use_times = 7;
    if (has_use_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->use_times());
    }
    
    // optional int32 left_use_times = 8;
    if (has_left_use_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_use_times());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 icon_id = 9;
    if (has_icon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icon_id());
    }
    
  }
  // repeated .ProtoPairObj value_exts = 3;
  total_size += 1 * this->value_exts_size();
  for (int i = 0; i < this->value_exts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->value_exts(i));
  }
  
  // repeated .ProtoItem gift_items = 4;
  total_size += 1 * this->gift_items_size();
  for (int i = 0; i < this->gift_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gift_items(i));
  }
  
  // repeated int32 font_color = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->font_color_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->font_color(i));
    }
    total_size += 1 * this->font_color_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoMediaGiftDef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoMediaGiftDef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoMediaGiftDef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoMediaGiftDef::MergeFrom(const ProtoMediaGiftDef& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_exts_.MergeFrom(from.value_exts_);
  gift_items_.MergeFrom(from.gift_items_);
  font_color_.MergeFrom(from.font_color_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gift_sort()) {
      set_gift_sort(from.gift_sort());
    }
    if (from.has_gift_type()) {
      set_gift_type(from.gift_type());
    }
    if (from.has_gift_name()) {
      set_gift_name(from.gift_name());
    }
    if (from.has_gift_desc()) {
      set_gift_desc(from.gift_desc());
    }
    if (from.has_use_times()) {
      set_use_times(from.use_times());
    }
    if (from.has_left_use_times()) {
      set_left_use_times(from.left_use_times());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_icon_id()) {
      set_icon_id(from.icon_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoMediaGiftDef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMediaGiftDef::CopyFrom(const ProtoMediaGiftDef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMediaGiftDef::IsInitialized() const {
  
  return true;
}

void ProtoMediaGiftDef::Swap(ProtoMediaGiftDef* other) {
  if (other != this) {
    std::swap(gift_sort_, other->gift_sort_);
    std::swap(gift_type_, other->gift_type_);
    value_exts_.Swap(&other->value_exts_);
    gift_items_.Swap(&other->gift_items_);
    std::swap(gift_name_, other->gift_name_);
    std::swap(gift_desc_, other->gift_desc_);
    std::swap(use_times_, other->use_times_);
    std::swap(left_use_times_, other->left_use_times_);
    std::swap(icon_id_, other->icon_id_);
    font_color_.Swap(&other->font_color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoMediaGiftDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoMediaGiftDef_descriptor_;
  metadata.reflection = ProtoMediaGiftDef_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoAreaRole::kIdFieldNumber;
const int ProtoAreaRole::kNameFieldNumber;
const int ProtoAreaRole::kRankFieldNumber;
const int ProtoAreaRole::kForceFieldNumber;
const int ProtoAreaRole::kSexFieldNumber;
const int ProtoAreaRole::kWeaponFieldNumber;
const int ProtoAreaRole::kClothesFieldNumber;
const int ProtoAreaRole::kFashionWeaponFieldNumber;
const int ProtoAreaRole::kFashionClothesFieldNumber;
const int ProtoAreaRole::kLevelFieldNumber;
const int ProtoAreaRole::kCareerFieldNumber;
const int ProtoAreaRole::kWingLevelFieldNumber;
const int ProtoAreaRole::kSoliderLevelFieldNumber;
#endif  // !_MSC_VER

ProtoAreaRole::ProtoAreaRole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoAreaRole::InitAsDefaultInstance() {
}

ProtoAreaRole::ProtoAreaRole(const ProtoAreaRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoAreaRole::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rank_ = 0;
  force_ = 0;
  sex_ = 0;
  weapon_ = 0;
  clothes_ = 0;
  fashion_weapon_ = 0;
  fashion_clothes_ = 0;
  level_ = 0;
  career_ = 0;
  wing_level_ = 0;
  solider_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoAreaRole::~ProtoAreaRole() {
  SharedDtor();
}

void ProtoAreaRole::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoAreaRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoAreaRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoAreaRole_descriptor_;
}

const ProtoAreaRole& ProtoAreaRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoAreaRole* ProtoAreaRole::default_instance_ = NULL;

ProtoAreaRole* ProtoAreaRole::New() const {
  return new ProtoAreaRole;
}

void ProtoAreaRole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    rank_ = 0;
    force_ = 0;
    sex_ = 0;
    weapon_ = 0;
    clothes_ = 0;
    fashion_weapon_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    fashion_clothes_ = 0;
    level_ = 0;
    career_ = 0;
    wing_level_ = 0;
    solider_level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoAreaRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank;
        break;
      }
      
      // optional int32 rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_force;
        break;
      }
      
      // optional int32 force = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &force_)));
          set_has_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }
      
      // optional int32 sex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_weapon;
        break;
      }
      
      // optional int32 weapon = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weapon_)));
          set_has_weapon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_clothes;
        break;
      }
      
      // optional int32 clothes = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clothes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clothes_)));
          set_has_clothes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_fashion_weapon;
        break;
      }
      
      // optional int32 fashion_weapon = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashion_weapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fashion_weapon_)));
          set_has_fashion_weapon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_fashion_clothes;
        break;
      }
      
      // optional int32 fashion_clothes = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashion_clothes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fashion_clothes_)));
          set_has_fashion_clothes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_level;
        break;
      }
      
      // optional int32 level = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_career;
        break;
      }
      
      // optional int32 career = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_career:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &career_)));
          set_has_career();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_wing_level;
        break;
      }
      
      // optional int32 wing_level = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wing_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wing_level_)));
          set_has_wing_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_solider_level;
        break;
      }
      
      // optional int32 solider_level = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_solider_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &solider_level_)));
          set_has_solider_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoAreaRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional int32 rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rank(), output);
  }
  
  // optional int32 force = 4;
  if (has_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->force(), output);
  }
  
  // optional int32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sex(), output);
  }
  
  // optional int32 weapon = 6;
  if (has_weapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->weapon(), output);
  }
  
  // optional int32 clothes = 7;
  if (has_clothes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->clothes(), output);
  }
  
  // optional int32 fashion_weapon = 8;
  if (has_fashion_weapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->fashion_weapon(), output);
  }
  
  // optional int32 fashion_clothes = 9;
  if (has_fashion_clothes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->fashion_clothes(), output);
  }
  
  // optional int32 level = 10;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->level(), output);
  }
  
  // optional int32 career = 11;
  if (has_career()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->career(), output);
  }
  
  // optional int32 wing_level = 12;
  if (has_wing_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->wing_level(), output);
  }
  
  // optional int32 solider_level = 13;
  if (has_solider_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->solider_level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoAreaRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional int32 rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rank(), target);
  }
  
  // optional int32 force = 4;
  if (has_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->force(), target);
  }
  
  // optional int32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sex(), target);
  }
  
  // optional int32 weapon = 6;
  if (has_weapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->weapon(), target);
  }
  
  // optional int32 clothes = 7;
  if (has_clothes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->clothes(), target);
  }
  
  // optional int32 fashion_weapon = 8;
  if (has_fashion_weapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->fashion_weapon(), target);
  }
  
  // optional int32 fashion_clothes = 9;
  if (has_fashion_clothes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->fashion_clothes(), target);
  }
  
  // optional int32 level = 10;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->level(), target);
  }
  
  // optional int32 career = 11;
  if (has_career()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->career(), target);
  }
  
  // optional int32 wing_level = 12;
  if (has_wing_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->wing_level(), target);
  }
  
  // optional int32 solider_level = 13;
  if (has_solider_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->solider_level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoAreaRole::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
    // optional int32 force = 4;
    if (has_force()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->force());
    }
    
    // optional int32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }
    
    // optional int32 weapon = 6;
    if (has_weapon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weapon());
    }
    
    // optional int32 clothes = 7;
    if (has_clothes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clothes());
    }
    
    // optional int32 fashion_weapon = 8;
    if (has_fashion_weapon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fashion_weapon());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 fashion_clothes = 9;
    if (has_fashion_clothes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fashion_clothes());
    }
    
    // optional int32 level = 10;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 career = 11;
    if (has_career()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->career());
    }
    
    // optional int32 wing_level = 12;
    if (has_wing_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wing_level());
    }
    
    // optional int32 solider_level = 13;
    if (has_solider_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->solider_level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoAreaRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoAreaRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoAreaRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoAreaRole::MergeFrom(const ProtoAreaRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_force()) {
      set_force(from.force());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_weapon()) {
      set_weapon(from.weapon());
    }
    if (from.has_clothes()) {
      set_clothes(from.clothes());
    }
    if (from.has_fashion_weapon()) {
      set_fashion_weapon(from.fashion_weapon());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fashion_clothes()) {
      set_fashion_clothes(from.fashion_clothes());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_career()) {
      set_career(from.career());
    }
    if (from.has_wing_level()) {
      set_wing_level(from.wing_level());
    }
    if (from.has_solider_level()) {
      set_solider_level(from.solider_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoAreaRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoAreaRole::CopyFrom(const ProtoAreaRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoAreaRole::IsInitialized() const {
  
  return true;
}

void ProtoAreaRole::Swap(ProtoAreaRole* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(rank_, other->rank_);
    std::swap(force_, other->force_);
    std::swap(sex_, other->sex_);
    std::swap(weapon_, other->weapon_);
    std::swap(clothes_, other->clothes_);
    std::swap(fashion_weapon_, other->fashion_weapon_);
    std::swap(fashion_clothes_, other->fashion_clothes_);
    std::swap(level_, other->level_);
    std::swap(career_, other->career_);
    std::swap(wing_level_, other->wing_level_);
    std::swap(solider_level_, other->solider_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoAreaRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoAreaRole_descriptor_;
  metadata.reflection = ProtoAreaRole_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoScriptInfo::kScriptSortFieldNumber;
const int ProtoScriptInfo::kLeftTimesFieldNumber;
const int ProtoScriptInfo::kStarLevelFieldNumber;
const int ProtoScriptInfo::kIsPassFieldNumber;
const int ProtoScriptInfo::kIsOpenFieldNumber;
const int ProtoScriptInfo::kLeftBuyTimesFieldNumber;
const int ProtoScriptInfo::kBuyTimesFieldNumber;
const int ProtoScriptInfo::kLeftGetFieldNumber;
const int ProtoScriptInfo::kTodayRankFieldNumber;
const int ProtoScriptInfo::kFloorInfoFieldNumber;
const int ProtoScriptInfo::kPassFloorFieldNumber;
const int ProtoScriptInfo::kResetTimesFieldNumber;
const int ProtoScriptInfo::kIsSweepFieldNumber;
const int ProtoScriptInfo::kPassPieceFieldNumber;
const int ProtoScriptInfo::kPassChapterFieldNumber;
const int ProtoScriptInfo::kSpecialInfoFieldNumber;
const int ProtoScriptInfo::kIsFirstPassFieldNumber;
const int ProtoScriptInfo::kSkillIdFieldNumber;
const int ProtoScriptInfo::kStartWaveFieldNumber;
const int ProtoScriptInfo::kStartChapterFieldNumber;
#endif  // !_MSC_VER

ProtoScriptInfo::ProtoScriptInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoScriptInfo::InitAsDefaultInstance() {
}

ProtoScriptInfo::ProtoScriptInfo(const ProtoScriptInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoScriptInfo::SharedCtor() {
  _cached_size_ = 0;
  script_sort_ = 0;
  left_times_ = 0;
  star_level_ = 0;
  is_pass_ = 0;
  is_open_ = 0;
  left_buy_times_ = 0;
  buy_times_ = 0;
  left_get_ = 0;
  today_rank_ = 0;
  pass_floor_ = 0;
  reset_times_ = 0;
  is_sweep_ = 0;
  pass_piece_ = 0;
  pass_chapter_ = 0;
  is_first_pass_ = 0;
  skill_id_ = 0;
  start_wave_ = 0;
  start_chapter_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoScriptInfo::~ProtoScriptInfo() {
  SharedDtor();
}

void ProtoScriptInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoScriptInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoScriptInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoScriptInfo_descriptor_;
}

const ProtoScriptInfo& ProtoScriptInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoScriptInfo* ProtoScriptInfo::default_instance_ = NULL;

ProtoScriptInfo* ProtoScriptInfo::New() const {
  return new ProtoScriptInfo;
}

void ProtoScriptInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    script_sort_ = 0;
    left_times_ = 0;
    star_level_ = 0;
    is_pass_ = 0;
    is_open_ = 0;
    left_buy_times_ = 0;
    buy_times_ = 0;
    left_get_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    today_rank_ = 0;
    pass_floor_ = 0;
    reset_times_ = 0;
    is_sweep_ = 0;
    pass_piece_ = 0;
    pass_chapter_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    is_first_pass_ = 0;
    skill_id_ = 0;
    start_wave_ = 0;
    start_chapter_ = 0;
  }
  floor_info_.Clear();
  special_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoScriptInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 script_sort = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &script_sort_)));
          set_has_script_sort();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_left_times;
        break;
      }
      
      // optional int32 left_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_times_)));
          set_has_left_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_star_level;
        break;
      }
      
      // optional int32 star_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_level_)));
          set_has_star_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_pass;
        break;
      }
      
      // optional int32 is_pass = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_pass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_pass_)));
          set_has_is_pass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_open;
        break;
      }
      
      // optional int32 is_open = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_open_)));
          set_has_is_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_left_buy_times;
        break;
      }
      
      // optional int32 left_buy_times = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_buy_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_buy_times_)));
          set_has_left_buy_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_buy_times;
        break;
      }
      
      // optional int32 buy_times = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_times_)));
          set_has_buy_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_left_get;
        break;
      }
      
      // optional int32 left_get = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_get:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_get_)));
          set_has_left_get();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_today_rank;
        break;
      }
      
      // optional int32 today_rank = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &today_rank_)));
          set_has_today_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_floor_info;
        break;
      }
      
      // repeated .ProtoFloorInfo floor_info = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_floor_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_floor_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_floor_info;
        if (input->ExpectTag(88)) goto parse_pass_floor;
        break;
      }
      
      // optional int32 pass_floor = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass_floor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_floor_)));
          set_has_pass_floor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_reset_times;
        break;
      }
      
      // optional int32 reset_times = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reset_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reset_times_)));
          set_has_reset_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_is_sweep;
        break;
      }
      
      // optional int32 is_sweep = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_sweep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_sweep_)));
          set_has_is_sweep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_pass_piece;
        break;
      }
      
      // optional int32 pass_piece = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass_piece:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_piece_)));
          set_has_pass_piece();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_pass_chapter;
        break;
      }
      
      // optional int32 pass_chapter = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass_chapter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_chapter_)));
          set_has_pass_chapter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_special_info;
        break;
      }
      
      // repeated .ProtoSpecialAwardInfo special_info = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_special_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_special_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_special_info;
        if (input->ExpectTag(136)) goto parse_is_first_pass;
        break;
      }
      
      // optional int32 is_first_pass = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_first_pass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_first_pass_)));
          set_has_is_first_pass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_skill_id;
        break;
      }
      
      // optional int32 skill_id = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_start_wave;
        break;
      }
      
      // optional int32 start_wave = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_wave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_wave_)));
          set_has_start_wave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_start_chapter;
        break;
      }
      
      // optional int32 start_chapter = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_chapter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_chapter_)));
          set_has_start_chapter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoScriptInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 script_sort = 1;
  if (has_script_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->script_sort(), output);
  }
  
  // optional int32 left_times = 2;
  if (has_left_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->left_times(), output);
  }
  
  // optional int32 star_level = 3;
  if (has_star_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->star_level(), output);
  }
  
  // optional int32 is_pass = 4;
  if (has_is_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->is_pass(), output);
  }
  
  // optional int32 is_open = 5;
  if (has_is_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->is_open(), output);
  }
  
  // optional int32 left_buy_times = 6;
  if (has_left_buy_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->left_buy_times(), output);
  }
  
  // optional int32 buy_times = 7;
  if (has_buy_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->buy_times(), output);
  }
  
  // optional int32 left_get = 8;
  if (has_left_get()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->left_get(), output);
  }
  
  // optional int32 today_rank = 9;
  if (has_today_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->today_rank(), output);
  }
  
  // repeated .ProtoFloorInfo floor_info = 10;
  for (int i = 0; i < this->floor_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->floor_info(i), output);
  }
  
  // optional int32 pass_floor = 11;
  if (has_pass_floor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->pass_floor(), output);
  }
  
  // optional int32 reset_times = 12;
  if (has_reset_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->reset_times(), output);
  }
  
  // optional int32 is_sweep = 13;
  if (has_is_sweep()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->is_sweep(), output);
  }
  
  // optional int32 pass_piece = 14;
  if (has_pass_piece()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->pass_piece(), output);
  }
  
  // optional int32 pass_chapter = 15;
  if (has_pass_chapter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->pass_chapter(), output);
  }
  
  // repeated .ProtoSpecialAwardInfo special_info = 16;
  for (int i = 0; i < this->special_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->special_info(i), output);
  }
  
  // optional int32 is_first_pass = 17;
  if (has_is_first_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->is_first_pass(), output);
  }
  
  // optional int32 skill_id = 18;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->skill_id(), output);
  }
  
  // optional int32 start_wave = 19;
  if (has_start_wave()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->start_wave(), output);
  }
  
  // optional int32 start_chapter = 20;
  if (has_start_chapter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->start_chapter(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoScriptInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 script_sort = 1;
  if (has_script_sort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->script_sort(), target);
  }
  
  // optional int32 left_times = 2;
  if (has_left_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->left_times(), target);
  }
  
  // optional int32 star_level = 3;
  if (has_star_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->star_level(), target);
  }
  
  // optional int32 is_pass = 4;
  if (has_is_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->is_pass(), target);
  }
  
  // optional int32 is_open = 5;
  if (has_is_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->is_open(), target);
  }
  
  // optional int32 left_buy_times = 6;
  if (has_left_buy_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->left_buy_times(), target);
  }
  
  // optional int32 buy_times = 7;
  if (has_buy_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->buy_times(), target);
  }
  
  // optional int32 left_get = 8;
  if (has_left_get()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->left_get(), target);
  }
  
  // optional int32 today_rank = 9;
  if (has_today_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->today_rank(), target);
  }
  
  // repeated .ProtoFloorInfo floor_info = 10;
  for (int i = 0; i < this->floor_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->floor_info(i), target);
  }
  
  // optional int32 pass_floor = 11;
  if (has_pass_floor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->pass_floor(), target);
  }
  
  // optional int32 reset_times = 12;
  if (has_reset_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->reset_times(), target);
  }
  
  // optional int32 is_sweep = 13;
  if (has_is_sweep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->is_sweep(), target);
  }
  
  // optional int32 pass_piece = 14;
  if (has_pass_piece()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->pass_piece(), target);
  }
  
  // optional int32 pass_chapter = 15;
  if (has_pass_chapter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->pass_chapter(), target);
  }
  
  // repeated .ProtoSpecialAwardInfo special_info = 16;
  for (int i = 0; i < this->special_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->special_info(i), target);
  }
  
  // optional int32 is_first_pass = 17;
  if (has_is_first_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->is_first_pass(), target);
  }
  
  // optional int32 skill_id = 18;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->skill_id(), target);
  }
  
  // optional int32 start_wave = 19;
  if (has_start_wave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->start_wave(), target);
  }
  
  // optional int32 start_chapter = 20;
  if (has_start_chapter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->start_chapter(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoScriptInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 script_sort = 1;
    if (has_script_sort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->script_sort());
    }
    
    // optional int32 left_times = 2;
    if (has_left_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_times());
    }
    
    // optional int32 star_level = 3;
    if (has_star_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star_level());
    }
    
    // optional int32 is_pass = 4;
    if (has_is_pass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_pass());
    }
    
    // optional int32 is_open = 5;
    if (has_is_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_open());
    }
    
    // optional int32 left_buy_times = 6;
    if (has_left_buy_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_buy_times());
    }
    
    // optional int32 buy_times = 7;
    if (has_buy_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_times());
    }
    
    // optional int32 left_get = 8;
    if (has_left_get()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_get());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 today_rank = 9;
    if (has_today_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->today_rank());
    }
    
    // optional int32 pass_floor = 11;
    if (has_pass_floor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass_floor());
    }
    
    // optional int32 reset_times = 12;
    if (has_reset_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reset_times());
    }
    
    // optional int32 is_sweep = 13;
    if (has_is_sweep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_sweep());
    }
    
    // optional int32 pass_piece = 14;
    if (has_pass_piece()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass_piece());
    }
    
    // optional int32 pass_chapter = 15;
    if (has_pass_chapter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass_chapter());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 is_first_pass = 17;
    if (has_is_first_pass()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_first_pass());
    }
    
    // optional int32 skill_id = 18;
    if (has_skill_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }
    
    // optional int32 start_wave = 19;
    if (has_start_wave()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_wave());
    }
    
    // optional int32 start_chapter = 20;
    if (has_start_chapter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_chapter());
    }
    
  }
  // repeated .ProtoFloorInfo floor_info = 10;
  total_size += 1 * this->floor_info_size();
  for (int i = 0; i < this->floor_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->floor_info(i));
  }
  
  // repeated .ProtoSpecialAwardInfo special_info = 16;
  total_size += 2 * this->special_info_size();
  for (int i = 0; i < this->special_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->special_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoScriptInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoScriptInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoScriptInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoScriptInfo::MergeFrom(const ProtoScriptInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  floor_info_.MergeFrom(from.floor_info_);
  special_info_.MergeFrom(from.special_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_script_sort()) {
      set_script_sort(from.script_sort());
    }
    if (from.has_left_times()) {
      set_left_times(from.left_times());
    }
    if (from.has_star_level()) {
      set_star_level(from.star_level());
    }
    if (from.has_is_pass()) {
      set_is_pass(from.is_pass());
    }
    if (from.has_is_open()) {
      set_is_open(from.is_open());
    }
    if (from.has_left_buy_times()) {
      set_left_buy_times(from.left_buy_times());
    }
    if (from.has_buy_times()) {
      set_buy_times(from.buy_times());
    }
    if (from.has_left_get()) {
      set_left_get(from.left_get());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_today_rank()) {
      set_today_rank(from.today_rank());
    }
    if (from.has_pass_floor()) {
      set_pass_floor(from.pass_floor());
    }
    if (from.has_reset_times()) {
      set_reset_times(from.reset_times());
    }
    if (from.has_is_sweep()) {
      set_is_sweep(from.is_sweep());
    }
    if (from.has_pass_piece()) {
      set_pass_piece(from.pass_piece());
    }
    if (from.has_pass_chapter()) {
      set_pass_chapter(from.pass_chapter());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_is_first_pass()) {
      set_is_first_pass(from.is_first_pass());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_start_wave()) {
      set_start_wave(from.start_wave());
    }
    if (from.has_start_chapter()) {
      set_start_chapter(from.start_chapter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoScriptInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoScriptInfo::CopyFrom(const ProtoScriptInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoScriptInfo::IsInitialized() const {
  
  return true;
}

void ProtoScriptInfo::Swap(ProtoScriptInfo* other) {
  if (other != this) {
    std::swap(script_sort_, other->script_sort_);
    std::swap(left_times_, other->left_times_);
    std::swap(star_level_, other->star_level_);
    std::swap(is_pass_, other->is_pass_);
    std::swap(is_open_, other->is_open_);
    std::swap(left_buy_times_, other->left_buy_times_);
    std::swap(buy_times_, other->buy_times_);
    std::swap(left_get_, other->left_get_);
    std::swap(today_rank_, other->today_rank_);
    floor_info_.Swap(&other->floor_info_);
    std::swap(pass_floor_, other->pass_floor_);
    std::swap(reset_times_, other->reset_times_);
    std::swap(is_sweep_, other->is_sweep_);
    std::swap(pass_piece_, other->pass_piece_);
    std::swap(pass_chapter_, other->pass_chapter_);
    special_info_.Swap(&other->special_info_);
    std::swap(is_first_pass_, other->is_first_pass_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(start_wave_, other->start_wave_);
    std::swap(start_chapter_, other->start_chapter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoScriptInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoScriptInfo_descriptor_;
  metadata.reflection = ProtoScriptInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoAreaRecord::kPassTimeFieldNumber;
const int ProtoAreaRecord::kTypeFieldNumber;
const int ProtoAreaRecord::kStateFieldNumber;
const int ProtoAreaRecord::kNameFieldNumber;
const int ProtoAreaRecord::kRankFieldNumber;
const int ProtoAreaRecord::kRankChangeFieldNumber;
#endif  // !_MSC_VER

ProtoAreaRecord::ProtoAreaRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoAreaRecord::InitAsDefaultInstance() {
}

ProtoAreaRecord::ProtoAreaRecord(const ProtoAreaRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoAreaRecord::SharedCtor() {
  _cached_size_ = 0;
  pass_time_ = 0;
  type_ = 0;
  state_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rank_ = 0;
  rank_change_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoAreaRecord::~ProtoAreaRecord() {
  SharedDtor();
}

void ProtoAreaRecord::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoAreaRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoAreaRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoAreaRecord_descriptor_;
}

const ProtoAreaRecord& ProtoAreaRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoAreaRecord* ProtoAreaRecord::default_instance_ = NULL;

ProtoAreaRecord* ProtoAreaRecord::New() const {
  return new ProtoAreaRecord;
}

void ProtoAreaRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pass_time_ = 0;
    type_ = 0;
    state_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    rank_ = 0;
    rank_change_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoAreaRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pass_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_time_)));
          set_has_pass_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }
      
      // optional int32 state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }
      
      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rank;
        break;
      }
      
      // optional int32 rank = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rank_change;
        break;
      }
      
      // optional int32 rank_change = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_change:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_change_)));
          set_has_rank_change();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoAreaRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pass_time = 1;
  if (has_pass_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pass_time(), output);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  // optional int32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }
  
  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }
  
  // optional int32 rank = 5;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rank(), output);
  }
  
  // optional int32 rank_change = 6;
  if (has_rank_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rank_change(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoAreaRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pass_time = 1;
  if (has_pass_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pass_time(), target);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  // optional int32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }
  
  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }
  
  // optional int32 rank = 5;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rank(), target);
  }
  
  // optional int32 rank_change = 6;
  if (has_rank_change()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rank_change(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoAreaRecord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pass_time = 1;
    if (has_pass_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass_time());
    }
    
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }
    
    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 rank = 5;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
    // optional int32 rank_change = 6;
    if (has_rank_change()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_change());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoAreaRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoAreaRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoAreaRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoAreaRecord::MergeFrom(const ProtoAreaRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pass_time()) {
      set_pass_time(from.pass_time());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_rank_change()) {
      set_rank_change(from.rank_change());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoAreaRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoAreaRecord::CopyFrom(const ProtoAreaRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoAreaRecord::IsInitialized() const {
  
  return true;
}

void ProtoAreaRecord::Swap(ProtoAreaRecord* other) {
  if (other != this) {
    std::swap(pass_time_, other->pass_time_);
    std::swap(type_, other->type_);
    std::swap(state_, other->state_);
    std::swap(name_, other->name_);
    std::swap(rank_, other->rank_);
    std::swap(rank_change_, other->rank_change_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoAreaRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoAreaRecord_descriptor_;
  metadata.reflection = ProtoAreaRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoBuffStatus::kBuffIdFieldNumber;
const int ProtoBuffStatus::kLastFieldNumber;
const int ProtoBuffStatus::kIntervalFieldNumber;
const int ProtoBuffStatus::kCheckTickFieldNumber;
const int ProtoBuffStatus::kPropIdSetFieldNumber;
const int ProtoBuffStatus::kValueSetFieldNumber;
const int ProtoBuffStatus::kPercentSetFieldNumber;
const int ProtoBuffStatus::kHiddenFieldNumber;
#endif  // !_MSC_VER

ProtoBuffStatus::ProtoBuffStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoBuffStatus::InitAsDefaultInstance() {
}

ProtoBuffStatus::ProtoBuffStatus(const ProtoBuffStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoBuffStatus::SharedCtor() {
  _cached_size_ = 0;
  buff_id_ = 0;
  last_ = 0;
  interval_ = 0;
  check_tick_ = GOOGLE_LONGLONG(0);
  hidden_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoBuffStatus::~ProtoBuffStatus() {
  SharedDtor();
}

void ProtoBuffStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoBuffStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoBuffStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoBuffStatus_descriptor_;
}

const ProtoBuffStatus& ProtoBuffStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoBuffStatus* ProtoBuffStatus::default_instance_ = NULL;

ProtoBuffStatus* ProtoBuffStatus::New() const {
  return new ProtoBuffStatus;
}

void ProtoBuffStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buff_id_ = 0;
    last_ = 0;
    interval_ = 0;
    check_tick_ = GOOGLE_LONGLONG(0);
    hidden_ = 0;
  }
  prop_id_set_.Clear();
  value_set_.Clear();
  percent_set_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoBuffStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 buff_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buff_id_)));
          set_has_buff_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_last;
        break;
      }
      
      // optional int32 last = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_)));
          set_has_last();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_interval;
        break;
      }
      
      // optional int32 interval = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &interval_)));
          set_has_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_check_tick;
        break;
      }
      
      // optional int64 check_tick = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_check_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &check_tick_)));
          set_has_check_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_prop_id_set;
        break;
      }
      
      // repeated int32 prop_id_set = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prop_id_set:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_prop_id_set())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_prop_id_set())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_prop_id_set;
        if (input->ExpectTag(48)) goto parse_value_set;
        break;
      }
      
      // repeated int32 value_set = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value_set:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_value_set())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_value_set())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_value_set;
        if (input->ExpectTag(56)) goto parse_percent_set;
        break;
      }
      
      // repeated int32 percent_set = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_percent_set:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_percent_set())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_percent_set())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_percent_set;
        if (input->ExpectTag(64)) goto parse_hidden;
        break;
      }
      
      // optional int32 hidden = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hidden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hidden_)));
          set_has_hidden();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoBuffStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 buff_id = 1;
  if (has_buff_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buff_id(), output);
  }
  
  // optional int32 last = 2;
  if (has_last()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->last(), output);
  }
  
  // optional int32 interval = 3;
  if (has_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->interval(), output);
  }
  
  // optional int64 check_tick = 4;
  if (has_check_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->check_tick(), output);
  }
  
  // repeated int32 prop_id_set = 5;
  for (int i = 0; i < this->prop_id_set_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->prop_id_set(i), output);
  }
  
  // repeated int32 value_set = 6;
  for (int i = 0; i < this->value_set_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->value_set(i), output);
  }
  
  // repeated int32 percent_set = 7;
  for (int i = 0; i < this->percent_set_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->percent_set(i), output);
  }
  
  // optional int32 hidden = 8;
  if (has_hidden()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->hidden(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoBuffStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 buff_id = 1;
  if (has_buff_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buff_id(), target);
  }
  
  // optional int32 last = 2;
  if (has_last()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->last(), target);
  }
  
  // optional int32 interval = 3;
  if (has_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->interval(), target);
  }
  
  // optional int64 check_tick = 4;
  if (has_check_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->check_tick(), target);
  }
  
  // repeated int32 prop_id_set = 5;
  for (int i = 0; i < this->prop_id_set_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->prop_id_set(i), target);
  }
  
  // repeated int32 value_set = 6;
  for (int i = 0; i < this->value_set_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->value_set(i), target);
  }
  
  // repeated int32 percent_set = 7;
  for (int i = 0; i < this->percent_set_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->percent_set(i), target);
  }
  
  // optional int32 hidden = 8;
  if (has_hidden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->hidden(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoBuffStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 buff_id = 1;
    if (has_buff_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buff_id());
    }
    
    // optional int32 last = 2;
    if (has_last()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last());
    }
    
    // optional int32 interval = 3;
    if (has_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->interval());
    }
    
    // optional int64 check_tick = 4;
    if (has_check_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->check_tick());
    }
    
    // optional int32 hidden = 8;
    if (has_hidden()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hidden());
    }
    
  }
  // repeated int32 prop_id_set = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->prop_id_set_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->prop_id_set(i));
    }
    total_size += 1 * this->prop_id_set_size() + data_size;
  }
  
  // repeated int32 value_set = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->value_set_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->value_set(i));
    }
    total_size += 1 * this->value_set_size() + data_size;
  }
  
  // repeated int32 percent_set = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->percent_set_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->percent_set(i));
    }
    total_size += 1 * this->percent_set_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoBuffStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoBuffStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoBuffStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoBuffStatus::MergeFrom(const ProtoBuffStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  prop_id_set_.MergeFrom(from.prop_id_set_);
  value_set_.MergeFrom(from.value_set_);
  percent_set_.MergeFrom(from.percent_set_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buff_id()) {
      set_buff_id(from.buff_id());
    }
    if (from.has_last()) {
      set_last(from.last());
    }
    if (from.has_interval()) {
      set_interval(from.interval());
    }
    if (from.has_check_tick()) {
      set_check_tick(from.check_tick());
    }
    if (from.has_hidden()) {
      set_hidden(from.hidden());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoBuffStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoBuffStatus::CopyFrom(const ProtoBuffStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoBuffStatus::IsInitialized() const {
  
  return true;
}

void ProtoBuffStatus::Swap(ProtoBuffStatus* other) {
  if (other != this) {
    std::swap(buff_id_, other->buff_id_);
    std::swap(last_, other->last_);
    std::swap(interval_, other->interval_);
    std::swap(check_tick_, other->check_tick_);
    prop_id_set_.Swap(&other->prop_id_set_);
    value_set_.Swap(&other->value_set_);
    percent_set_.Swap(&other->percent_set_);
    std::swap(hidden_, other->hidden_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoBuffStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoBuffStatus_descriptor_;
  metadata.reflection = ProtoBuffStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoShusanBoss::kBossSortFieldNumber;
const int ProtoShusanBoss::kBossIdFieldNumber;
const int ProtoShusanBoss::kBornTimeFieldNumber;
const int ProtoShusanBoss::kAimRoleFieldNumber;
const int ProtoShusanBoss::kLastRoleNameFieldNumber;
const int ProtoShusanBoss::kLastRoleIdFieldNumber;
const int ProtoShusanBoss::kFloorFieldNumber;
const int ProtoShusanBoss::kSceneIdFieldNumber;
const int ProtoShusanBoss::kBornPointFieldNumber;
const int ProtoShusanBoss::kSpaceIdFieldNumber;
const int ProtoShusanBoss::kLeftTimesFieldNumber;
const int ProtoShusanBoss::kIsPackFullFieldNumber;
#endif  // !_MSC_VER

ProtoShusanBoss::ProtoShusanBoss()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoShusanBoss::InitAsDefaultInstance() {
  aim_role_ = const_cast< ::ProtoRoleInfo*>(&::ProtoRoleInfo::default_instance());
  born_point_ = const_cast< ::ProtoCoord*>(&::ProtoCoord::default_instance());
}

ProtoShusanBoss::ProtoShusanBoss(const ProtoShusanBoss& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoShusanBoss::SharedCtor() {
  _cached_size_ = 0;
  boss_sort_ = 0;
  boss_id_ = GOOGLE_LONGLONG(0);
  born_time_ = 0;
  aim_role_ = NULL;
  last_role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  last_role_id_ = GOOGLE_LONGLONG(0);
  floor_ = 0;
  scene_id_ = 0;
  born_point_ = NULL;
  space_id_ = 0;
  left_times_ = 0;
  is_pack_full_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoShusanBoss::~ProtoShusanBoss() {
  SharedDtor();
}

void ProtoShusanBoss::SharedDtor() {
  if (last_role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete last_role_name_;
  }
  if (this != default_instance_) {
    delete aim_role_;
    delete born_point_;
  }
}

void ProtoShusanBoss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoShusanBoss::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoShusanBoss_descriptor_;
}

const ProtoShusanBoss& ProtoShusanBoss::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoShusanBoss* ProtoShusanBoss::default_instance_ = NULL;

ProtoShusanBoss* ProtoShusanBoss::New() const {
  return new ProtoShusanBoss;
}

void ProtoShusanBoss::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    boss_sort_ = 0;
    boss_id_ = GOOGLE_LONGLONG(0);
    born_time_ = 0;
    if (has_aim_role()) {
      if (aim_role_ != NULL) aim_role_->::ProtoRoleInfo::Clear();
    }
    if (has_last_role_name()) {
      if (last_role_name_ != &::google::protobuf::internal::kEmptyString) {
        last_role_name_->clear();
      }
    }
    last_role_id_ = GOOGLE_LONGLONG(0);
    floor_ = 0;
    scene_id_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_born_point()) {
      if (born_point_ != NULL) born_point_->::ProtoCoord::Clear();
    }
    space_id_ = 0;
    left_times_ = 0;
    is_pack_full_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoShusanBoss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 boss_sort = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boss_sort_)));
          set_has_boss_sort();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_boss_id;
        break;
      }
      
      // optional int64 boss_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &boss_id_)));
          set_has_boss_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_born_time;
        break;
      }
      
      // optional int32 born_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_born_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &born_time_)));
          set_has_born_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_aim_role;
        break;
      }
      
      // optional .ProtoRoleInfo aim_role = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aim_role:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_aim_role()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_last_role_name;
        break;
      }
      
      // optional string last_role_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_last_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->last_role_name().data(), this->last_role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_last_role_id;
        break;
      }
      
      // optional int64 last_role_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_role_id_)));
          set_has_last_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_floor;
        break;
      }
      
      // optional int32 floor = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_floor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &floor_)));
          set_has_floor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_scene_id;
        break;
      }
      
      // optional int32 scene_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_born_point;
        break;
      }
      
      // optional .ProtoCoord born_point = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_born_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_born_point()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_space_id;
        break;
      }
      
      // optional int32 space_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_space_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &space_id_)));
          set_has_space_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_left_times;
        break;
      }
      
      // optional int32 left_times = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_times_)));
          set_has_left_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_is_pack_full;
        break;
      }
      
      // optional int32 is_pack_full = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_pack_full:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_pack_full_)));
          set_has_is_pack_full();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoShusanBoss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 boss_sort = 1;
  if (has_boss_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->boss_sort(), output);
  }
  
  // optional int64 boss_id = 2;
  if (has_boss_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->boss_id(), output);
  }
  
  // optional int32 born_time = 3;
  if (has_born_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->born_time(), output);
  }
  
  // optional .ProtoRoleInfo aim_role = 4;
  if (has_aim_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->aim_role(), output);
  }
  
  // optional string last_role_name = 5;
  if (has_last_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->last_role_name().data(), this->last_role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->last_role_name(), output);
  }
  
  // optional int64 last_role_id = 6;
  if (has_last_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->last_role_id(), output);
  }
  
  // optional int32 floor = 7;
  if (has_floor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->floor(), output);
  }
  
  // optional int32 scene_id = 8;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->scene_id(), output);
  }
  
  // optional .ProtoCoord born_point = 9;
  if (has_born_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->born_point(), output);
  }
  
  // optional int32 space_id = 10;
  if (has_space_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->space_id(), output);
  }
  
  // optional int32 left_times = 11;
  if (has_left_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->left_times(), output);
  }
  
  // optional int32 is_pack_full = 12;
  if (has_is_pack_full()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->is_pack_full(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoShusanBoss::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 boss_sort = 1;
  if (has_boss_sort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->boss_sort(), target);
  }
  
  // optional int64 boss_id = 2;
  if (has_boss_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->boss_id(), target);
  }
  
  // optional int32 born_time = 3;
  if (has_born_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->born_time(), target);
  }
  
  // optional .ProtoRoleInfo aim_role = 4;
  if (has_aim_role()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->aim_role(), target);
  }
  
  // optional string last_role_name = 5;
  if (has_last_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->last_role_name().data(), this->last_role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->last_role_name(), target);
  }
  
  // optional int64 last_role_id = 6;
  if (has_last_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->last_role_id(), target);
  }
  
  // optional int32 floor = 7;
  if (has_floor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->floor(), target);
  }
  
  // optional int32 scene_id = 8;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->scene_id(), target);
  }
  
  // optional .ProtoCoord born_point = 9;
  if (has_born_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->born_point(), target);
  }
  
  // optional int32 space_id = 10;
  if (has_space_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->space_id(), target);
  }
  
  // optional int32 left_times = 11;
  if (has_left_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->left_times(), target);
  }
  
  // optional int32 is_pack_full = 12;
  if (has_is_pack_full()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->is_pack_full(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoShusanBoss::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 boss_sort = 1;
    if (has_boss_sort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boss_sort());
    }
    
    // optional int64 boss_id = 2;
    if (has_boss_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->boss_id());
    }
    
    // optional int32 born_time = 3;
    if (has_born_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->born_time());
    }
    
    // optional .ProtoRoleInfo aim_role = 4;
    if (has_aim_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->aim_role());
    }
    
    // optional string last_role_name = 5;
    if (has_last_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_role_name());
    }
    
    // optional int64 last_role_id = 6;
    if (has_last_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_role_id());
    }
    
    // optional int32 floor = 7;
    if (has_floor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->floor());
    }
    
    // optional int32 scene_id = 8;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_id());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .ProtoCoord born_point = 9;
    if (has_born_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->born_point());
    }
    
    // optional int32 space_id = 10;
    if (has_space_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->space_id());
    }
    
    // optional int32 left_times = 11;
    if (has_left_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_times());
    }
    
    // optional int32 is_pack_full = 12;
    if (has_is_pack_full()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_pack_full());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoShusanBoss::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoShusanBoss* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoShusanBoss*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoShusanBoss::MergeFrom(const ProtoShusanBoss& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boss_sort()) {
      set_boss_sort(from.boss_sort());
    }
    if (from.has_boss_id()) {
      set_boss_id(from.boss_id());
    }
    if (from.has_born_time()) {
      set_born_time(from.born_time());
    }
    if (from.has_aim_role()) {
      mutable_aim_role()->::ProtoRoleInfo::MergeFrom(from.aim_role());
    }
    if (from.has_last_role_name()) {
      set_last_role_name(from.last_role_name());
    }
    if (from.has_last_role_id()) {
      set_last_role_id(from.last_role_id());
    }
    if (from.has_floor()) {
      set_floor(from.floor());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_born_point()) {
      mutable_born_point()->::ProtoCoord::MergeFrom(from.born_point());
    }
    if (from.has_space_id()) {
      set_space_id(from.space_id());
    }
    if (from.has_left_times()) {
      set_left_times(from.left_times());
    }
    if (from.has_is_pack_full()) {
      set_is_pack_full(from.is_pack_full());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoShusanBoss::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoShusanBoss::CopyFrom(const ProtoShusanBoss& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoShusanBoss::IsInitialized() const {
  
  return true;
}

void ProtoShusanBoss::Swap(ProtoShusanBoss* other) {
  if (other != this) {
    std::swap(boss_sort_, other->boss_sort_);
    std::swap(boss_id_, other->boss_id_);
    std::swap(born_time_, other->born_time_);
    std::swap(aim_role_, other->aim_role_);
    std::swap(last_role_name_, other->last_role_name_);
    std::swap(last_role_id_, other->last_role_id_);
    std::swap(floor_, other->floor_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(born_point_, other->born_point_);
    std::swap(space_id_, other->space_id_);
    std::swap(left_times_, other->left_times_);
    std::swap(is_pack_full_, other->is_pack_full_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoShusanBoss::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoShusanBoss_descriptor_;
  metadata.reflection = ProtoShusanBoss_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoSuit::kLevelFieldNumber;
const int ProtoSuit::kColorFieldNumber;
const int ProtoSuit::kCountFieldNumber;
const int ProtoSuit::kSuitTypeFieldNumber;
const int ProtoSuit::kIsActiveFieldNumber;
const int ProtoSuit::kUpperIsSuitFieldNumber;
const int ProtoSuit::kIsMinLevelFieldNumber;
#endif  // !_MSC_VER

ProtoSuit::ProtoSuit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoSuit::InitAsDefaultInstance() {
}

ProtoSuit::ProtoSuit(const ProtoSuit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoSuit::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  color_ = 0;
  count_ = 0;
  suit_type_ = 0;
  is_active_ = 0;
  upper_is_suit_ = 0;
  is_min_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoSuit::~ProtoSuit() {
  SharedDtor();
}

void ProtoSuit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoSuit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoSuit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoSuit_descriptor_;
}

const ProtoSuit& ProtoSuit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoSuit* ProtoSuit::default_instance_ = NULL;

ProtoSuit* ProtoSuit::New() const {
  return new ProtoSuit;
}

void ProtoSuit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    color_ = 0;
    count_ = 0;
    suit_type_ = 0;
    is_active_ = 0;
    upper_is_suit_ = 0;
    is_min_level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoSuit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_color;
        break;
      }
      
      // optional int32 color = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }
      
      // optional int32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_suit_type;
        break;
      }
      
      // optional int32 suit_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suit_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &suit_type_)));
          set_has_suit_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_active;
        break;
      }
      
      // optional int32 is_active = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_active_)));
          set_has_is_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_upper_is_suit;
        break;
      }
      
      // optional int32 upper_is_suit = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upper_is_suit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upper_is_suit_)));
          set_has_upper_is_suit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_min_level;
        break;
      }
      
      // optional int32 is_min_level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_min_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_min_level_)));
          set_has_is_min_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoSuit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }
  
  // optional int32 color = 2;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->color(), output);
  }
  
  // optional int32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }
  
  // optional int32 suit_type = 4;
  if (has_suit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->suit_type(), output);
  }
  
  // optional int32 is_active = 5;
  if (has_is_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->is_active(), output);
  }
  
  // optional int32 upper_is_suit = 6;
  if (has_upper_is_suit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->upper_is_suit(), output);
  }
  
  // optional int32 is_min_level = 7;
  if (has_is_min_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->is_min_level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoSuit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }
  
  // optional int32 color = 2;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->color(), target);
  }
  
  // optional int32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }
  
  // optional int32 suit_type = 4;
  if (has_suit_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->suit_type(), target);
  }
  
  // optional int32 is_active = 5;
  if (has_is_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->is_active(), target);
  }
  
  // optional int32 upper_is_suit = 6;
  if (has_upper_is_suit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->upper_is_suit(), target);
  }
  
  // optional int32 is_min_level = 7;
  if (has_is_min_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->is_min_level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoSuit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 color = 2;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }
    
    // optional int32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
    // optional int32 suit_type = 4;
    if (has_suit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->suit_type());
    }
    
    // optional int32 is_active = 5;
    if (has_is_active()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_active());
    }
    
    // optional int32 upper_is_suit = 6;
    if (has_upper_is_suit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upper_is_suit());
    }
    
    // optional int32 is_min_level = 7;
    if (has_is_min_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_min_level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoSuit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoSuit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoSuit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoSuit::MergeFrom(const ProtoSuit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_suit_type()) {
      set_suit_type(from.suit_type());
    }
    if (from.has_is_active()) {
      set_is_active(from.is_active());
    }
    if (from.has_upper_is_suit()) {
      set_upper_is_suit(from.upper_is_suit());
    }
    if (from.has_is_min_level()) {
      set_is_min_level(from.is_min_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoSuit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoSuit::CopyFrom(const ProtoSuit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoSuit::IsInitialized() const {
  
  return true;
}

void ProtoSuit::Swap(ProtoSuit* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(color_, other->color_);
    std::swap(count_, other->count_);
    std::swap(suit_type_, other->suit_type_);
    std::swap(is_active_, other->is_active_);
    std::swap(upper_is_suit_, other->upper_is_suit_);
    std::swap(is_min_level_, other->is_min_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoSuit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoSuit_descriptor_;
  metadata.reflection = ProtoSuit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoLvlReward::kLevelFieldNumber;
const int ProtoLvlReward::kValidateFieldNumber;
const int ProtoLvlReward::kItemsFieldNumber;
#endif  // !_MSC_VER

ProtoLvlReward::ProtoLvlReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoLvlReward::InitAsDefaultInstance() {
}

ProtoLvlReward::ProtoLvlReward(const ProtoLvlReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoLvlReward::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  validate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoLvlReward::~ProtoLvlReward() {
  SharedDtor();
}

void ProtoLvlReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoLvlReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoLvlReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoLvlReward_descriptor_;
}

const ProtoLvlReward& ProtoLvlReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoLvlReward* ProtoLvlReward::default_instance_ = NULL;

ProtoLvlReward* ProtoLvlReward::New() const {
  return new ProtoLvlReward;
}

void ProtoLvlReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    validate_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoLvlReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_validate;
        break;
      }
      
      // optional int32 validate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_validate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &validate_)));
          set_has_validate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }
      
      // repeated .ProtoItem items = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoLvlReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }
  
  // optional int32 validate = 2;
  if (has_validate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->validate(), output);
  }
  
  // repeated .ProtoItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoLvlReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }
  
  // optional int32 validate = 2;
  if (has_validate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->validate(), target);
  }
  
  // repeated .ProtoItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoLvlReward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 validate = 2;
    if (has_validate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->validate());
    }
    
  }
  // repeated .ProtoItem items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoLvlReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoLvlReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoLvlReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoLvlReward::MergeFrom(const ProtoLvlReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_validate()) {
      set_validate(from.validate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoLvlReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoLvlReward::CopyFrom(const ProtoLvlReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoLvlReward::IsInitialized() const {
  
  return true;
}

void ProtoLvlReward::Swap(ProtoLvlReward* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(validate_, other->validate_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoLvlReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoLvlReward_descriptor_;
  metadata.reflection = ProtoLvlReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoDailyRecord::kIdFieldNumber;
const int ProtoDailyRecord::kValueFieldNumber;
const int ProtoDailyRecord::kHasRewardFieldNumber;
const int ProtoDailyRecord::kIsOverFieldNumber;
const int ProtoDailyRecord::kCurrValueFieldNumber;
const int ProtoDailyRecord::kSortFieldNumber;
#endif  // !_MSC_VER

ProtoDailyRecord::ProtoDailyRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoDailyRecord::InitAsDefaultInstance() {
}

ProtoDailyRecord::ProtoDailyRecord(const ProtoDailyRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoDailyRecord::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  value_ = 0;
  has_reward_ = 0;
  is_over_ = 0;
  curr_value_ = 0;
  sort_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoDailyRecord::~ProtoDailyRecord() {
  SharedDtor();
}

void ProtoDailyRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoDailyRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoDailyRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoDailyRecord_descriptor_;
}

const ProtoDailyRecord& ProtoDailyRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoDailyRecord* ProtoDailyRecord::default_instance_ = NULL;

ProtoDailyRecord* ProtoDailyRecord::New() const {
  return new ProtoDailyRecord;
}

void ProtoDailyRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    value_ = 0;
    has_reward_ = 0;
    is_over_ = 0;
    curr_value_ = 0;
    sort_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoDailyRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }
      
      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_has_reward;
        break;
      }
      
      // optional int32 has_reward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &has_reward_)));
          set_has_has_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_over;
        break;
      }
      
      // optional int32 is_over = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_over:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_over_)));
          set_has_is_over();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_curr_value;
        break;
      }
      
      // optional int32 curr_value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curr_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curr_value_)));
          set_has_curr_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sort;
        break;
      }
      
      // optional int32 sort = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sort_)));
          set_has_sort();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoDailyRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }
  
  // optional int32 has_reward = 3;
  if (has_has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->has_reward(), output);
  }
  
  // optional int32 is_over = 4;
  if (has_is_over()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->is_over(), output);
  }
  
  // optional int32 curr_value = 5;
  if (has_curr_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->curr_value(), output);
  }
  
  // optional int32 sort = 6;
  if (has_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sort(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoDailyRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }
  
  // optional int32 has_reward = 3;
  if (has_has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->has_reward(), target);
  }
  
  // optional int32 is_over = 4;
  if (has_is_over()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->is_over(), target);
  }
  
  // optional int32 curr_value = 5;
  if (has_curr_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->curr_value(), target);
  }
  
  // optional int32 sort = 6;
  if (has_sort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sort(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoDailyRecord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
    // optional int32 has_reward = 3;
    if (has_has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->has_reward());
    }
    
    // optional int32 is_over = 4;
    if (has_is_over()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_over());
    }
    
    // optional int32 curr_value = 5;
    if (has_curr_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curr_value());
    }
    
    // optional int32 sort = 6;
    if (has_sort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sort());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoDailyRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoDailyRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoDailyRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoDailyRecord::MergeFrom(const ProtoDailyRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_has_reward()) {
      set_has_reward(from.has_reward());
    }
    if (from.has_is_over()) {
      set_is_over(from.is_over());
    }
    if (from.has_curr_value()) {
      set_curr_value(from.curr_value());
    }
    if (from.has_sort()) {
      set_sort(from.sort());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoDailyRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoDailyRecord::CopyFrom(const ProtoDailyRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoDailyRecord::IsInitialized() const {
  
  return true;
}

void ProtoDailyRecord::Swap(ProtoDailyRecord* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(value_, other->value_);
    std::swap(has_reward_, other->has_reward_);
    std::swap(is_over_, other->is_over_);
    std::swap(curr_value_, other->curr_value_);
    std::swap(sort_, other->sort_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoDailyRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoDailyRecord_descriptor_;
  metadata.reflection = ProtoDailyRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoRoleShape::kRoleIdFieldNumber;
const int ProtoRoleShape::kLabelFieldNumber;
const int ProtoRoleShape::kWeaponFieldNumber;
const int ProtoRoleShape::kClothesFieldNumber;
const int ProtoRoleShape::kFashionWeaponFieldNumber;
const int ProtoRoleShape::kFashionClothesFieldNumber;
const int ProtoRoleShape::kCareerFieldNumber;
const int ProtoRoleShape::kSexFieldNumber;
const int ProtoRoleShape::kWingFieldNumber;
const int ProtoRoleShape::kGodWeaponFieldNumber;
const int ProtoRoleShape::kMountSortFieldNumber;
const int ProtoRoleShape::kSwordPoolFieldNumber;
const int ProtoRoleShape::kTianGangFieldNumber;
const int ProtoRoleShape::kFashionIdFieldNumber;
const int ProtoRoleShape::kFashionColorFieldNumber;
const int ProtoRoleShape::kTransferIdFieldNumber;
const int ProtoRoleShape::kHicktyIdFieldNumber;
#endif  // !_MSC_VER

ProtoRoleShape::ProtoRoleShape()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoRoleShape::InitAsDefaultInstance() {
}

ProtoRoleShape::ProtoRoleShape(const ProtoRoleShape& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoRoleShape::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  label_ = 0;
  weapon_ = 0;
  clothes_ = 0;
  fashion_weapon_ = 0;
  fashion_clothes_ = 0;
  career_ = 0;
  sex_ = 0;
  wing_ = 0;
  god_weapon_ = 0;
  mount_sort_ = 0;
  sword_pool_ = 0;
  tian_gang_ = 0;
  fashion_id_ = 0;
  fashion_color_ = 0;
  transfer_id_ = 0;
  hickty_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoRoleShape::~ProtoRoleShape() {
  SharedDtor();
}

void ProtoRoleShape::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoRoleShape::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoRoleShape::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoRoleShape_descriptor_;
}

const ProtoRoleShape& ProtoRoleShape::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoRoleShape* ProtoRoleShape::default_instance_ = NULL;

ProtoRoleShape* ProtoRoleShape::New() const {
  return new ProtoRoleShape;
}

void ProtoRoleShape::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_LONGLONG(0);
    label_ = 0;
    weapon_ = 0;
    clothes_ = 0;
    fashion_weapon_ = 0;
    fashion_clothes_ = 0;
    career_ = 0;
    sex_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    wing_ = 0;
    god_weapon_ = 0;
    mount_sort_ = 0;
    sword_pool_ = 0;
    tian_gang_ = 0;
    fashion_id_ = 0;
    fashion_color_ = 0;
    transfer_id_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    hickty_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoRoleShape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_label;
        break;
      }
      
      // optional int32 label = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_label:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &label_)));
          set_has_label();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_weapon;
        break;
      }
      
      // optional int32 weapon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weapon_)));
          set_has_weapon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_clothes;
        break;
      }
      
      // optional int32 clothes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clothes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clothes_)));
          set_has_clothes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fashion_weapon;
        break;
      }
      
      // optional int32 fashion_weapon = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashion_weapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fashion_weapon_)));
          set_has_fashion_weapon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_fashion_clothes;
        break;
      }
      
      // optional int32 fashion_clothes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashion_clothes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fashion_clothes_)));
          set_has_fashion_clothes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_career;
        break;
      }
      
      // optional int32 career = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_career:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &career_)));
          set_has_career();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_sex;
        break;
      }
      
      // optional int32 sex = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_wing;
        break;
      }
      
      // optional int32 wing = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wing_)));
          set_has_wing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_god_weapon;
        break;
      }
      
      // optional int32 god_weapon = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_god_weapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &god_weapon_)));
          set_has_god_weapon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_mount_sort;
        break;
      }
      
      // optional int32 mount_sort = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mount_sort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mount_sort_)));
          set_has_mount_sort();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_sword_pool;
        break;
      }
      
      // optional int32 sword_pool = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sword_pool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sword_pool_)));
          set_has_sword_pool();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_tian_gang;
        break;
      }
      
      // optional int32 tian_gang = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tian_gang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tian_gang_)));
          set_has_tian_gang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_fashion_id;
        break;
      }
      
      // optional int32 fashion_id = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashion_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fashion_id_)));
          set_has_fashion_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_fashion_color;
        break;
      }
      
      // optional int32 fashion_color = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashion_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fashion_color_)));
          set_has_fashion_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_transfer_id;
        break;
      }
      
      // optional int32 transfer_id = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transfer_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transfer_id_)));
          set_has_transfer_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_hickty_id;
        break;
      }
      
      // optional int32 hickty_id = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hickty_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hickty_id_)));
          set_has_hickty_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoRoleShape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_id(), output);
  }
  
  // optional int32 label = 2;
  if (has_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->label(), output);
  }
  
  // optional int32 weapon = 3;
  if (has_weapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->weapon(), output);
  }
  
  // optional int32 clothes = 4;
  if (has_clothes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->clothes(), output);
  }
  
  // optional int32 fashion_weapon = 5;
  if (has_fashion_weapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->fashion_weapon(), output);
  }
  
  // optional int32 fashion_clothes = 6;
  if (has_fashion_clothes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->fashion_clothes(), output);
  }
  
  // optional int32 career = 7;
  if (has_career()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->career(), output);
  }
  
  // optional int32 sex = 8;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->sex(), output);
  }
  
  // optional int32 wing = 9;
  if (has_wing()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->wing(), output);
  }
  
  // optional int32 god_weapon = 10;
  if (has_god_weapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->god_weapon(), output);
  }
  
  // optional int32 mount_sort = 11;
  if (has_mount_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->mount_sort(), output);
  }
  
  // optional int32 sword_pool = 12;
  if (has_sword_pool()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->sword_pool(), output);
  }
  
  // optional int32 tian_gang = 13;
  if (has_tian_gang()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->tian_gang(), output);
  }
  
  // optional int32 fashion_id = 14;
  if (has_fashion_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->fashion_id(), output);
  }
  
  // optional int32 fashion_color = 15;
  if (has_fashion_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->fashion_color(), output);
  }
  
  // optional int32 transfer_id = 16;
  if (has_transfer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->transfer_id(), output);
  }
  
  // optional int32 hickty_id = 17;
  if (has_hickty_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->hickty_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoRoleShape::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_id(), target);
  }
  
  // optional int32 label = 2;
  if (has_label()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->label(), target);
  }
  
  // optional int32 weapon = 3;
  if (has_weapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->weapon(), target);
  }
  
  // optional int32 clothes = 4;
  if (has_clothes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->clothes(), target);
  }
  
  // optional int32 fashion_weapon = 5;
  if (has_fashion_weapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->fashion_weapon(), target);
  }
  
  // optional int32 fashion_clothes = 6;
  if (has_fashion_clothes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->fashion_clothes(), target);
  }
  
  // optional int32 career = 7;
  if (has_career()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->career(), target);
  }
  
  // optional int32 sex = 8;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->sex(), target);
  }
  
  // optional int32 wing = 9;
  if (has_wing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->wing(), target);
  }
  
  // optional int32 god_weapon = 10;
  if (has_god_weapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->god_weapon(), target);
  }
  
  // optional int32 mount_sort = 11;
  if (has_mount_sort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->mount_sort(), target);
  }
  
  // optional int32 sword_pool = 12;
  if (has_sword_pool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->sword_pool(), target);
  }
  
  // optional int32 tian_gang = 13;
  if (has_tian_gang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->tian_gang(), target);
  }
  
  // optional int32 fashion_id = 14;
  if (has_fashion_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->fashion_id(), target);
  }
  
  // optional int32 fashion_color = 15;
  if (has_fashion_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->fashion_color(), target);
  }
  
  // optional int32 transfer_id = 16;
  if (has_transfer_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->transfer_id(), target);
  }
  
  // optional int32 hickty_id = 17;
  if (has_hickty_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->hickty_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoRoleShape::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional int32 label = 2;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->label());
    }
    
    // optional int32 weapon = 3;
    if (has_weapon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weapon());
    }
    
    // optional int32 clothes = 4;
    if (has_clothes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clothes());
    }
    
    // optional int32 fashion_weapon = 5;
    if (has_fashion_weapon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fashion_weapon());
    }
    
    // optional int32 fashion_clothes = 6;
    if (has_fashion_clothes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fashion_clothes());
    }
    
    // optional int32 career = 7;
    if (has_career()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->career());
    }
    
    // optional int32 sex = 8;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 wing = 9;
    if (has_wing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wing());
    }
    
    // optional int32 god_weapon = 10;
    if (has_god_weapon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->god_weapon());
    }
    
    // optional int32 mount_sort = 11;
    if (has_mount_sort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mount_sort());
    }
    
    // optional int32 sword_pool = 12;
    if (has_sword_pool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sword_pool());
    }
    
    // optional int32 tian_gang = 13;
    if (has_tian_gang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tian_gang());
    }
    
    // optional int32 fashion_id = 14;
    if (has_fashion_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fashion_id());
    }
    
    // optional int32 fashion_color = 15;
    if (has_fashion_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fashion_color());
    }
    
    // optional int32 transfer_id = 16;
    if (has_transfer_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transfer_id());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 hickty_id = 17;
    if (has_hickty_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hickty_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoRoleShape::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoRoleShape* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoRoleShape*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoRoleShape::MergeFrom(const ProtoRoleShape& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
    if (from.has_weapon()) {
      set_weapon(from.weapon());
    }
    if (from.has_clothes()) {
      set_clothes(from.clothes());
    }
    if (from.has_fashion_weapon()) {
      set_fashion_weapon(from.fashion_weapon());
    }
    if (from.has_fashion_clothes()) {
      set_fashion_clothes(from.fashion_clothes());
    }
    if (from.has_career()) {
      set_career(from.career());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_wing()) {
      set_wing(from.wing());
    }
    if (from.has_god_weapon()) {
      set_god_weapon(from.god_weapon());
    }
    if (from.has_mount_sort()) {
      set_mount_sort(from.mount_sort());
    }
    if (from.has_sword_pool()) {
      set_sword_pool(from.sword_pool());
    }
    if (from.has_tian_gang()) {
      set_tian_gang(from.tian_gang());
    }
    if (from.has_fashion_id()) {
      set_fashion_id(from.fashion_id());
    }
    if (from.has_fashion_color()) {
      set_fashion_color(from.fashion_color());
    }
    if (from.has_transfer_id()) {
      set_transfer_id(from.transfer_id());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_hickty_id()) {
      set_hickty_id(from.hickty_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoRoleShape::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoRoleShape::CopyFrom(const ProtoRoleShape& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoRoleShape::IsInitialized() const {
  
  return true;
}

void ProtoRoleShape::Swap(ProtoRoleShape* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(label_, other->label_);
    std::swap(weapon_, other->weapon_);
    std::swap(clothes_, other->clothes_);
    std::swap(fashion_weapon_, other->fashion_weapon_);
    std::swap(fashion_clothes_, other->fashion_clothes_);
    std::swap(career_, other->career_);
    std::swap(sex_, other->sex_);
    std::swap(wing_, other->wing_);
    std::swap(god_weapon_, other->god_weapon_);
    std::swap(mount_sort_, other->mount_sort_);
    std::swap(sword_pool_, other->sword_pool_);
    std::swap(tian_gang_, other->tian_gang_);
    std::swap(fashion_id_, other->fashion_id_);
    std::swap(fashion_color_, other->fashion_color_);
    std::swap(transfer_id_, other->transfer_id_);
    std::swap(hickty_id_, other->hickty_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoRoleShape::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoRoleShape_descriptor_;
  metadata.reflection = ProtoRoleShape_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoCQAttackerInfo::kOrderFieldNumber;
const int ProtoCQAttackerInfo::kRoleIdFieldNumber;
const int ProtoCQAttackerInfo::kRoleNameFieldNumber;
const int ProtoCQAttackerInfo::kStatusFieldNumber;
#endif  // !_MSC_VER

ProtoCQAttackerInfo::ProtoCQAttackerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoCQAttackerInfo::InitAsDefaultInstance() {
}

ProtoCQAttackerInfo::ProtoCQAttackerInfo(const ProtoCQAttackerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoCQAttackerInfo::SharedCtor() {
  _cached_size_ = 0;
  order_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoCQAttackerInfo::~ProtoCQAttackerInfo() {
  SharedDtor();
}

void ProtoCQAttackerInfo::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoCQAttackerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoCQAttackerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoCQAttackerInfo_descriptor_;
}

const ProtoCQAttackerInfo& ProtoCQAttackerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoCQAttackerInfo* ProtoCQAttackerInfo::default_instance_ = NULL;

ProtoCQAttackerInfo* ProtoCQAttackerInfo::New() const {
  return new ProtoCQAttackerInfo;
}

void ProtoCQAttackerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    order_ = 0;
    role_id_ = GOOGLE_LONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoCQAttackerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 order = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }
      
      // optional int64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role_name;
        break;
      }
      
      // optional string role_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }
      
      // optional int32 status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoCQAttackerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 order = 1;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->order(), output);
  }
  
  // optional int64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->role_id(), output);
  }
  
  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->role_name(), output);
  }
  
  // optional int32 status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoCQAttackerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 order = 1;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->order(), target);
  }
  
  // optional int64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->role_id(), target);
  }
  
  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->role_name(), target);
  }
  
  // optional int32 status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoCQAttackerInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 order = 1;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order());
    }
    
    // optional int64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional string role_name = 3;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }
    
    // optional int32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoCQAttackerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoCQAttackerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoCQAttackerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoCQAttackerInfo::MergeFrom(const ProtoCQAttackerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_order()) {
      set_order(from.order());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoCQAttackerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoCQAttackerInfo::CopyFrom(const ProtoCQAttackerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoCQAttackerInfo::IsInitialized() const {
  
  return true;
}

void ProtoCQAttackerInfo::Swap(ProtoCQAttackerInfo* other) {
  if (other != this) {
    std::swap(order_, other->order_);
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoCQAttackerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoCQAttackerInfo_descriptor_;
  metadata.reflection = ProtoCQAttackerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoWing::kWingIdFieldNumber;
const int ProtoWing::kWingLevelFieldNumber;
const int ProtoWing::kWingProcessFieldNumber;
#endif  // !_MSC_VER

ProtoWing::ProtoWing()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoWing::InitAsDefaultInstance() {
}

ProtoWing::ProtoWing(const ProtoWing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoWing::SharedCtor() {
  _cached_size_ = 0;
  wing_id_ = 0;
  wing_level_ = 0;
  wing_process_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoWing::~ProtoWing() {
  SharedDtor();
}

void ProtoWing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoWing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoWing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoWing_descriptor_;
}

const ProtoWing& ProtoWing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoWing* ProtoWing::default_instance_ = NULL;

ProtoWing* ProtoWing::New() const {
  return new ProtoWing;
}

void ProtoWing::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wing_id_ = 0;
    wing_level_ = 0;
    wing_process_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoWing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 wing_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wing_id_)));
          set_has_wing_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_wing_level;
        break;
      }
      
      // optional int32 wing_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wing_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wing_level_)));
          set_has_wing_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wing_process;
        break;
      }
      
      // optional int32 wing_process = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wing_process:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wing_process_)));
          set_has_wing_process();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoWing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 wing_id = 1;
  if (has_wing_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wing_id(), output);
  }
  
  // optional int32 wing_level = 2;
  if (has_wing_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->wing_level(), output);
  }
  
  // optional int32 wing_process = 3;
  if (has_wing_process()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wing_process(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoWing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 wing_id = 1;
  if (has_wing_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wing_id(), target);
  }
  
  // optional int32 wing_level = 2;
  if (has_wing_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->wing_level(), target);
  }
  
  // optional int32 wing_process = 3;
  if (has_wing_process()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wing_process(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoWing::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 wing_id = 1;
    if (has_wing_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wing_id());
    }
    
    // optional int32 wing_level = 2;
    if (has_wing_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wing_level());
    }
    
    // optional int32 wing_process = 3;
    if (has_wing_process()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wing_process());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoWing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoWing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoWing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoWing::MergeFrom(const ProtoWing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wing_id()) {
      set_wing_id(from.wing_id());
    }
    if (from.has_wing_level()) {
      set_wing_level(from.wing_level());
    }
    if (from.has_wing_process()) {
      set_wing_process(from.wing_process());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoWing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoWing::CopyFrom(const ProtoWing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoWing::IsInitialized() const {
  
  return true;
}

void ProtoWing::Swap(ProtoWing* other) {
  if (other != this) {
    std::swap(wing_id_, other->wing_id_);
    std::swap(wing_level_, other->wing_level_);
    std::swap(wing_process_, other->wing_process_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoWing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoWing_descriptor_;
  metadata.reflection = ProtoWing_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoCQRank::kRankFieldNumber;
const int ProtoCQRank::kRoleIdFieldNumber;
const int ProtoCQRank::kRoleNameFieldNumber;
const int ProtoCQRank::kScoreFieldNumber;
const int ProtoCQRank::kFightTimeFieldNumber;
#endif  // !_MSC_VER

ProtoCQRank::ProtoCQRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoCQRank::InitAsDefaultInstance() {
}

ProtoCQRank::ProtoCQRank(const ProtoCQRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoCQRank::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_ = 0;
  fight_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoCQRank::~ProtoCQRank() {
  SharedDtor();
}

void ProtoCQRank::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoCQRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoCQRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoCQRank_descriptor_;
}

const ProtoCQRank& ProtoCQRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoCQRank* ProtoCQRank::default_instance_ = NULL;

ProtoCQRank* ProtoCQRank::New() const {
  return new ProtoCQRank;
}

void ProtoCQRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0;
    role_id_ = GOOGLE_LONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    score_ = 0;
    fight_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoCQRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }
      
      // optional int64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role_name;
        break;
      }
      
      // optional string role_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_score;
        break;
      }
      
      // optional int32 score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fight_time;
        break;
      }
      
      // optional int32 fight_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_time_)));
          set_has_fight_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoCQRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }
  
  // optional int64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->role_id(), output);
  }
  
  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->role_name(), output);
  }
  
  // optional int32 score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->score(), output);
  }
  
  // optional int32 fight_time = 5;
  if (has_fight_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->fight_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoCQRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }
  
  // optional int64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->role_id(), target);
  }
  
  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->role_name(), target);
  }
  
  // optional int32 score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->score(), target);
  }
  
  // optional int32 fight_time = 5;
  if (has_fight_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->fight_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoCQRank::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
    // optional int64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional string role_name = 3;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }
    
    // optional int32 score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }
    
    // optional int32 fight_time = 5;
    if (has_fight_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoCQRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoCQRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoCQRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoCQRank::MergeFrom(const ProtoCQRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_fight_time()) {
      set_fight_time(from.fight_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoCQRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoCQRank::CopyFrom(const ProtoCQRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoCQRank::IsInitialized() const {
  
  return true;
}

void ProtoCQRank::Swap(ProtoCQRank* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(score_, other->score_);
    std::swap(fight_time_, other->fight_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoCQRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoCQRank_descriptor_;
  metadata.reflection = ProtoCQRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoThreeObj::kIdFieldNumber;
const int ProtoThreeObj::kValueFieldNumber;
const int ProtoThreeObj::kTickFieldNumber;
const int ProtoThreeObj::kTotalTimesFieldNumber;
const int ProtoThreeObj::kLastTickFieldNumber;
#endif  // !_MSC_VER

ProtoThreeObj::ProtoThreeObj()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoThreeObj::InitAsDefaultInstance() {
}

ProtoThreeObj::ProtoThreeObj(const ProtoThreeObj& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoThreeObj::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  value_ = 0;
  tick_ = GOOGLE_LONGLONG(0);
  total_times_ = 0;
  last_tick_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoThreeObj::~ProtoThreeObj() {
  SharedDtor();
}

void ProtoThreeObj::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoThreeObj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoThreeObj::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoThreeObj_descriptor_;
}

const ProtoThreeObj& ProtoThreeObj::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoThreeObj* ProtoThreeObj::default_instance_ = NULL;

ProtoThreeObj* ProtoThreeObj::New() const {
  return new ProtoThreeObj;
}

void ProtoThreeObj::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    value_ = 0;
    tick_ = GOOGLE_LONGLONG(0);
    total_times_ = 0;
    last_tick_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoThreeObj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }
      
      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tick;
        break;
      }
      
      // optional int64 tick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tick_)));
          set_has_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total_times;
        break;
      }
      
      // optional int32 total_times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_times_)));
          set_has_total_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_last_tick;
        break;
      }
      
      // optional int64 last_tick = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_tick_)));
          set_has_last_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoThreeObj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }
  
  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }
  
  // optional int64 tick = 3;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->tick(), output);
  }
  
  // optional int32 total_times = 4;
  if (has_total_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->total_times(), output);
  }
  
  // optional int64 last_tick = 5;
  if (has_last_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->last_tick(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoThreeObj::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }
  
  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }
  
  // optional int64 tick = 3;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->tick(), target);
  }
  
  // optional int32 total_times = 4;
  if (has_total_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->total_times(), target);
  }
  
  // optional int64 last_tick = 5;
  if (has_last_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->last_tick(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoThreeObj::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
    // optional int64 tick = 3;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tick());
    }
    
    // optional int32 total_times = 4;
    if (has_total_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_times());
    }
    
    // optional int64 last_tick = 5;
    if (has_last_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_tick());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoThreeObj::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoThreeObj* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoThreeObj*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoThreeObj::MergeFrom(const ProtoThreeObj& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_tick()) {
      set_tick(from.tick());
    }
    if (from.has_total_times()) {
      set_total_times(from.total_times());
    }
    if (from.has_last_tick()) {
      set_last_tick(from.last_tick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoThreeObj::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoThreeObj::CopyFrom(const ProtoThreeObj& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoThreeObj::IsInitialized() const {
  
  return true;
}

void ProtoThreeObj::Swap(ProtoThreeObj* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(value_, other->value_);
    std::swap(tick_, other->tick_);
    std::swap(total_times_, other->total_times_);
    std::swap(last_tick_, other->last_tick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoThreeObj::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoThreeObj_descriptor_;
  metadata.reflection = ProtoThreeObj_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoEscortMapItem::kTypeFieldNumber;
const int ProtoEscortMapItem::kIdFieldNumber;
const int ProtoEscortMapItem::kXFieldNumber;
const int ProtoEscortMapItem::kYFieldNumber;
const int ProtoEscortMapItem::kNameFieldNumber;
#endif  // !_MSC_VER

ProtoEscortMapItem::ProtoEscortMapItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoEscortMapItem::InitAsDefaultInstance() {
}

ProtoEscortMapItem::ProtoEscortMapItem(const ProtoEscortMapItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoEscortMapItem::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  x_ = 0;
  y_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoEscortMapItem::~ProtoEscortMapItem() {
  SharedDtor();
}

void ProtoEscortMapItem::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoEscortMapItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoEscortMapItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoEscortMapItem_descriptor_;
}

const ProtoEscortMapItem& ProtoEscortMapItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoEscortMapItem* ProtoEscortMapItem::default_instance_ = NULL;

ProtoEscortMapItem* ProtoEscortMapItem::New() const {
  return new ProtoEscortMapItem;
}

void ProtoEscortMapItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    id_ = GOOGLE_LONGLONG(0);
    x_ = 0;
    y_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoEscortMapItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_x;
        break;
      }
      
      // optional int32 x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_y;
        break;
      }
      
      // optional int32 y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }
      
      // optional string name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoEscortMapItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // optional int64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }
  
  // optional int32 x = 3;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->x(), output);
  }
  
  // optional int32 y = 4;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->y(), output);
  }
  
  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoEscortMapItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // optional int64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }
  
  // optional int32 x = 3;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->x(), target);
  }
  
  // optional int32 y = 4;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->y(), target);
  }
  
  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoEscortMapItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
    // optional int32 x = 3;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }
    
    // optional int32 y = 4;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }
    
    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoEscortMapItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoEscortMapItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoEscortMapItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoEscortMapItem::MergeFrom(const ProtoEscortMapItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoEscortMapItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoEscortMapItem::CopyFrom(const ProtoEscortMapItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoEscortMapItem::IsInitialized() const {
  
  return true;
}

void ProtoEscortMapItem::Swap(ProtoEscortMapItem* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoEscortMapItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoEscortMapItem_descriptor_;
  metadata.reflection = ProtoEscortMapItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoRefineSuit::kIsActivityFieldNumber;
const int ProtoRefineSuit::kLevelFieldNumber;
const int ProtoRefineSuit::kCountFieldNumber;
#endif  // !_MSC_VER

ProtoRefineSuit::ProtoRefineSuit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoRefineSuit::InitAsDefaultInstance() {
}

ProtoRefineSuit::ProtoRefineSuit(const ProtoRefineSuit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoRefineSuit::SharedCtor() {
  _cached_size_ = 0;
  is_activity_ = 0;
  level_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoRefineSuit::~ProtoRefineSuit() {
  SharedDtor();
}

void ProtoRefineSuit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoRefineSuit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoRefineSuit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoRefineSuit_descriptor_;
}

const ProtoRefineSuit& ProtoRefineSuit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoRefineSuit* ProtoRefineSuit::default_instance_ = NULL;

ProtoRefineSuit* ProtoRefineSuit::New() const {
  return new ProtoRefineSuit;
}

void ProtoRefineSuit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_activity_ = 0;
    level_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoRefineSuit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 is_activity = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_activity_)));
          set_has_is_activity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }
      
      // optional int32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoRefineSuit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 is_activity = 1;
  if (has_is_activity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->is_activity(), output);
  }
  
  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }
  
  // optional int32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoRefineSuit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 is_activity = 1;
  if (has_is_activity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->is_activity(), target);
  }
  
  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }
  
  // optional int32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoRefineSuit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 is_activity = 1;
    if (has_is_activity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_activity());
    }
    
    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoRefineSuit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoRefineSuit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoRefineSuit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoRefineSuit::MergeFrom(const ProtoRefineSuit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_activity()) {
      set_is_activity(from.is_activity());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoRefineSuit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoRefineSuit::CopyFrom(const ProtoRefineSuit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoRefineSuit::IsInitialized() const {
  
  return true;
}

void ProtoRefineSuit::Swap(ProtoRefineSuit* other) {
  if (other != this) {
    std::swap(is_activity_, other->is_activity_);
    std::swap(level_, other->level_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoRefineSuit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoRefineSuit_descriptor_;
  metadata.reflection = ProtoRefineSuit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoPanicItem::kItemIdFieldNumber;
const int ProtoPanicItem::kOrgPriceFieldNumber;
const int ProtoPanicItem::kPriceFieldNumber;
const int ProtoPanicItem::kLeftAmountFieldNumber;
const int ProtoPanicItem::kLimitBuyFieldNumber;
const int ProtoPanicItem::kLeftBuyTimesFieldNumber;
const int ProtoPanicItem::kTypeFieldNumber;
const int ProtoPanicItem::kItemBindFieldNumber;
#endif  // !_MSC_VER

ProtoPanicItem::ProtoPanicItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoPanicItem::InitAsDefaultInstance() {
}

ProtoPanicItem::ProtoPanicItem(const ProtoPanicItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoPanicItem::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0;
  org_price_ = 0;
  price_ = 0;
  left_amount_ = 0;
  limit_buy_ = 0;
  left_buy_times_ = 0;
  type_ = 0;
  item_bind_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoPanicItem::~ProtoPanicItem() {
  SharedDtor();
}

void ProtoPanicItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoPanicItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoPanicItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoPanicItem_descriptor_;
}

const ProtoPanicItem& ProtoPanicItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoPanicItem* ProtoPanicItem::default_instance_ = NULL;

ProtoPanicItem* ProtoPanicItem::New() const {
  return new ProtoPanicItem;
}

void ProtoPanicItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0;
    org_price_ = 0;
    price_ = 0;
    left_amount_ = 0;
    limit_buy_ = 0;
    left_buy_times_ = 0;
    type_ = 0;
    item_bind_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoPanicItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_org_price;
        break;
      }
      
      // optional int32 org_price = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_org_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &org_price_)));
          set_has_org_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_price;
        break;
      }
      
      // optional int32 price = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_left_amount;
        break;
      }
      
      // optional int32 left_amount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_amount_)));
          set_has_left_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_limit_buy;
        break;
      }
      
      // optional int32 limit_buy = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit_buy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_buy_)));
          set_has_limit_buy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_left_buy_times;
        break;
      }
      
      // optional int32 left_buy_times = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_buy_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_buy_times_)));
          set_has_left_buy_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_type;
        break;
      }
      
      // optional int32 type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_item_bind;
        break;
      }
      
      // optional int32 item_bind = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_bind_)));
          set_has_item_bind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoPanicItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_id(), output);
  }
  
  // optional int32 org_price = 2;
  if (has_org_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->org_price(), output);
  }
  
  // optional int32 price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->price(), output);
  }
  
  // optional int32 left_amount = 4;
  if (has_left_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->left_amount(), output);
  }
  
  // optional int32 limit_buy = 5;
  if (has_limit_buy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->limit_buy(), output);
  }
  
  // optional int32 left_buy_times = 6;
  if (has_left_buy_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->left_buy_times(), output);
  }
  
  // optional int32 type = 7;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->type(), output);
  }
  
  // optional int32 item_bind = 8;
  if (has_item_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->item_bind(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoPanicItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_id(), target);
  }
  
  // optional int32 org_price = 2;
  if (has_org_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->org_price(), target);
  }
  
  // optional int32 price = 3;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->price(), target);
  }
  
  // optional int32 left_amount = 4;
  if (has_left_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->left_amount(), target);
  }
  
  // optional int32 limit_buy = 5;
  if (has_limit_buy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->limit_buy(), target);
  }
  
  // optional int32 left_buy_times = 6;
  if (has_left_buy_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->left_buy_times(), target);
  }
  
  // optional int32 type = 7;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->type(), target);
  }
  
  // optional int32 item_bind = 8;
  if (has_item_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->item_bind(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoPanicItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }
    
    // optional int32 org_price = 2;
    if (has_org_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->org_price());
    }
    
    // optional int32 price = 3;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }
    
    // optional int32 left_amount = 4;
    if (has_left_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_amount());
    }
    
    // optional int32 limit_buy = 5;
    if (has_limit_buy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit_buy());
    }
    
    // optional int32 left_buy_times = 6;
    if (has_left_buy_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_buy_times());
    }
    
    // optional int32 type = 7;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int32 item_bind = 8;
    if (has_item_bind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_bind());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoPanicItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoPanicItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoPanicItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoPanicItem::MergeFrom(const ProtoPanicItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_org_price()) {
      set_org_price(from.org_price());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_left_amount()) {
      set_left_amount(from.left_amount());
    }
    if (from.has_limit_buy()) {
      set_limit_buy(from.limit_buy());
    }
    if (from.has_left_buy_times()) {
      set_left_buy_times(from.left_buy_times());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_item_bind()) {
      set_item_bind(from.item_bind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoPanicItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoPanicItem::CopyFrom(const ProtoPanicItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoPanicItem::IsInitialized() const {
  
  return true;
}

void ProtoPanicItem::Swap(ProtoPanicItem* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(org_price_, other->org_price_);
    std::swap(price_, other->price_);
    std::swap(left_amount_, other->left_amount_);
    std::swap(limit_buy_, other->limit_buy_);
    std::swap(left_buy_times_, other->left_buy_times_);
    std::swap(type_, other->type_);
    std::swap(item_bind_, other->item_bind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoPanicItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoPanicItem_descriptor_;
  metadata.reflection = ProtoPanicItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoKiller::kRoleIdFieldNumber;
const int ProtoKiller::kRoleNameFieldNumber;
const int ProtoKiller::kRoleLevelFieldNumber;
const int ProtoKiller::kFightForceFieldNumber;
const int ProtoKiller::kKillTimesFieldNumber;
const int ProtoKiller::kLastestKillTickFieldNumber;
const int ProtoKiller::kIsInSceneFieldNumber;
const int ProtoKiller::kRoleSexFieldNumber;
const int ProtoKiller::kKillTickFieldNumber;
#endif  // !_MSC_VER

ProtoKiller::ProtoKiller()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoKiller::InitAsDefaultInstance() {
}

ProtoKiller::ProtoKiller(const ProtoKiller& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoKiller::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_level_ = 0;
  fight_force_ = 0;
  kill_times_ = 0;
  lastest_kill_tick_ = 0;
  is_in_scene_ = 0;
  role_sex_ = 0;
  kill_tick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoKiller::~ProtoKiller() {
  SharedDtor();
}

void ProtoKiller::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (kill_tick_ != &::google::protobuf::internal::kEmptyString) {
    delete kill_tick_;
  }
  if (this != default_instance_) {
  }
}

void ProtoKiller::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoKiller::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoKiller_descriptor_;
}

const ProtoKiller& ProtoKiller::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoKiller* ProtoKiller::default_instance_ = NULL;

ProtoKiller* ProtoKiller::New() const {
  return new ProtoKiller;
}

void ProtoKiller::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_LONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    role_level_ = 0;
    fight_force_ = 0;
    kill_times_ = 0;
    lastest_kill_tick_ = 0;
    is_in_scene_ = 0;
    role_sex_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_kill_tick()) {
      if (kill_tick_ != &::google::protobuf::internal::kEmptyString) {
        kill_tick_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoKiller::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_name;
        break;
      }
      
      // optional string role_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_level;
        break;
      }
      
      // optional int32 role_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_level_)));
          set_has_role_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fight_force;
        break;
      }
      
      // optional int32 fight_force = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_force_)));
          set_has_fight_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_kill_times;
        break;
      }
      
      // optional int32 kill_times = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kill_times_)));
          set_has_kill_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lastest_kill_tick;
        break;
      }
      
      // optional int32 lastest_kill_tick = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastest_kill_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastest_kill_tick_)));
          set_has_lastest_kill_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_in_scene;
        break;
      }
      
      // optional int32 is_in_scene = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_in_scene:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_in_scene_)));
          set_has_is_in_scene();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_role_sex;
        break;
      }
      
      // optional int32 role_sex = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_sex_)));
          set_has_role_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_kill_tick;
        break;
      }
      
      // optional string kill_tick = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kill_tick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kill_tick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->kill_tick().data(), this->kill_tick().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoKiller::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_id(), output);
  }
  
  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->role_name(), output);
  }
  
  // optional int32 role_level = 3;
  if (has_role_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->role_level(), output);
  }
  
  // optional int32 fight_force = 4;
  if (has_fight_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fight_force(), output);
  }
  
  // optional int32 kill_times = 5;
  if (has_kill_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->kill_times(), output);
  }
  
  // optional int32 lastest_kill_tick = 6;
  if (has_lastest_kill_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lastest_kill_tick(), output);
  }
  
  // optional int32 is_in_scene = 7;
  if (has_is_in_scene()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->is_in_scene(), output);
  }
  
  // optional int32 role_sex = 8;
  if (has_role_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->role_sex(), output);
  }
  
  // optional string kill_tick = 9;
  if (has_kill_tick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->kill_tick().data(), this->kill_tick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->kill_tick(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoKiller::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_id(), target);
  }
  
  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }
  
  // optional int32 role_level = 3;
  if (has_role_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->role_level(), target);
  }
  
  // optional int32 fight_force = 4;
  if (has_fight_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fight_force(), target);
  }
  
  // optional int32 kill_times = 5;
  if (has_kill_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->kill_times(), target);
  }
  
  // optional int32 lastest_kill_tick = 6;
  if (has_lastest_kill_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lastest_kill_tick(), target);
  }
  
  // optional int32 is_in_scene = 7;
  if (has_is_in_scene()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->is_in_scene(), target);
  }
  
  // optional int32 role_sex = 8;
  if (has_role_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->role_sex(), target);
  }
  
  // optional string kill_tick = 9;
  if (has_kill_tick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->kill_tick().data(), this->kill_tick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->kill_tick(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoKiller::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional string role_name = 2;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }
    
    // optional int32 role_level = 3;
    if (has_role_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_level());
    }
    
    // optional int32 fight_force = 4;
    if (has_fight_force()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight_force());
    }
    
    // optional int32 kill_times = 5;
    if (has_kill_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kill_times());
    }
    
    // optional int32 lastest_kill_tick = 6;
    if (has_lastest_kill_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastest_kill_tick());
    }
    
    // optional int32 is_in_scene = 7;
    if (has_is_in_scene()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_in_scene());
    }
    
    // optional int32 role_sex = 8;
    if (has_role_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_sex());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string kill_tick = 9;
    if (has_kill_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->kill_tick());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoKiller::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoKiller* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoKiller*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoKiller::MergeFrom(const ProtoKiller& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_role_level()) {
      set_role_level(from.role_level());
    }
    if (from.has_fight_force()) {
      set_fight_force(from.fight_force());
    }
    if (from.has_kill_times()) {
      set_kill_times(from.kill_times());
    }
    if (from.has_lastest_kill_tick()) {
      set_lastest_kill_tick(from.lastest_kill_tick());
    }
    if (from.has_is_in_scene()) {
      set_is_in_scene(from.is_in_scene());
    }
    if (from.has_role_sex()) {
      set_role_sex(from.role_sex());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_kill_tick()) {
      set_kill_tick(from.kill_tick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoKiller::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoKiller::CopyFrom(const ProtoKiller& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoKiller::IsInitialized() const {
  
  return true;
}

void ProtoKiller::Swap(ProtoKiller* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(role_level_, other->role_level_);
    std::swap(fight_force_, other->fight_force_);
    std::swap(kill_times_, other->kill_times_);
    std::swap(lastest_kill_tick_, other->lastest_kill_tick_);
    std::swap(is_in_scene_, other->is_in_scene_);
    std::swap(role_sex_, other->role_sex_);
    std::swap(kill_tick_, other->kill_tick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoKiller::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoKiller_descriptor_;
  metadata.reflection = ProtoKiller_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoPeakWarRank::kRankFieldNumber;
const int ProtoPeakWarRank::kRoleIdFieldNumber;
const int ProtoPeakWarRank::kRoleNameFieldNumber;
const int ProtoPeakWarRank::kKillAmountFieldNumber;
const int ProtoPeakWarRank::kFloorFieldNumber;
const int ProtoPeakWarRank::kExploitFieldNumber;
#endif  // !_MSC_VER

ProtoPeakWarRank::ProtoPeakWarRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoPeakWarRank::InitAsDefaultInstance() {
}

ProtoPeakWarRank::ProtoPeakWarRank(const ProtoPeakWarRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoPeakWarRank::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  kill_amount_ = 0;
  floor_ = 0;
  exploit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoPeakWarRank::~ProtoPeakWarRank() {
  SharedDtor();
}

void ProtoPeakWarRank::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoPeakWarRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoPeakWarRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoPeakWarRank_descriptor_;
}

const ProtoPeakWarRank& ProtoPeakWarRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoPeakWarRank* ProtoPeakWarRank::default_instance_ = NULL;

ProtoPeakWarRank* ProtoPeakWarRank::New() const {
  return new ProtoPeakWarRank;
}

void ProtoPeakWarRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0;
    role_id_ = GOOGLE_LONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    kill_amount_ = 0;
    floor_ = 0;
    exploit_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoPeakWarRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }
      
      // optional int64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role_name;
        break;
      }
      
      // optional string role_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_kill_amount;
        break;
      }
      
      // optional int32 kill_amount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kill_amount_)));
          set_has_kill_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_floor;
        break;
      }
      
      // optional int32 floor = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_floor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &floor_)));
          set_has_floor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_exploit;
        break;
      }
      
      // optional int32 exploit = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exploit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exploit_)));
          set_has_exploit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoPeakWarRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }
  
  // optional int64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->role_id(), output);
  }
  
  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->role_name(), output);
  }
  
  // optional int32 kill_amount = 4;
  if (has_kill_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->kill_amount(), output);
  }
  
  // optional int32 floor = 5;
  if (has_floor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->floor(), output);
  }
  
  // optional int32 exploit = 6;
  if (has_exploit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->exploit(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoPeakWarRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }
  
  // optional int64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->role_id(), target);
  }
  
  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->role_name(), target);
  }
  
  // optional int32 kill_amount = 4;
  if (has_kill_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->kill_amount(), target);
  }
  
  // optional int32 floor = 5;
  if (has_floor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->floor(), target);
  }
  
  // optional int32 exploit = 6;
  if (has_exploit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->exploit(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoPeakWarRank::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
    // optional int64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional string role_name = 3;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }
    
    // optional int32 kill_amount = 4;
    if (has_kill_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kill_amount());
    }
    
    // optional int32 floor = 5;
    if (has_floor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->floor());
    }
    
    // optional int32 exploit = 6;
    if (has_exploit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exploit());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoPeakWarRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoPeakWarRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoPeakWarRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoPeakWarRank::MergeFrom(const ProtoPeakWarRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_kill_amount()) {
      set_kill_amount(from.kill_amount());
    }
    if (from.has_floor()) {
      set_floor(from.floor());
    }
    if (from.has_exploit()) {
      set_exploit(from.exploit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoPeakWarRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoPeakWarRank::CopyFrom(const ProtoPeakWarRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoPeakWarRank::IsInitialized() const {
  
  return true;
}

void ProtoPeakWarRank::Swap(ProtoPeakWarRank* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(kill_amount_, other->kill_amount_);
    std::swap(floor_, other->floor_);
    std::swap(exploit_, other->exploit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoPeakWarRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoPeakWarRank_descriptor_;
  metadata.reflection = ProtoPeakWarRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PActTypeItem::kRewardInfoFieldNumber;
const int PActTypeItem::kSubValueFieldNumber;
const int PActTypeItem::kSecondSubFieldNumber;
const int PActTypeItem::kUpdateTickFieldNumber;
const int PActTypeItem::kActIndexFieldNumber;
const int PActTypeItem::kFirstTypeFieldNumber;
const int PActTypeItem::kSecondTypeFieldNumber;
const int PActTypeItem::kOpenTimeFieldNumber;
const int PActTypeItem::kRewardCountFieldNumber;
const int PActTypeItem::kTitleFieldNumber;
const int PActTypeItem::kContentFieldNumber;
const int PActTypeItem::kStartTickFieldNumber;
const int PActTypeItem::kStopTickFieldNumber;
const int PActTypeItem::kAgentFieldNumber;
const int PActTypeItem::kPriorityFieldNumber;
const int PActTypeItem::kTimesFieldNumber;
const int PActTypeItem::kIconTypeFieldNumber;
const int PActTypeItem::kRoleRechargeFieldNumber;
const int PActTypeItem::kLimitFieldNumber;
const int PActTypeItem::kRoleConsumeFieldNumber;
const int PActTypeItem::kCumulativeLoginFieldNumber;
#endif  // !_MSC_VER

PActTypeItem::PActTypeItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PActTypeItem::InitAsDefaultInstance() {
  cumulative_login_ = const_cast< ::PActCumulativeLogin*>(&::PActCumulativeLogin::default_instance());
}

PActTypeItem::PActTypeItem(const PActTypeItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PActTypeItem::SharedCtor() {
  _cached_size_ = 0;
  sub_value_ = GOOGLE_LONGLONG(0);
  second_sub_ = GOOGLE_LONGLONG(0);
  update_tick_ = 0;
  act_index_ = 0;
  first_type_ = 0;
  second_type_ = 0;
  reward_count_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  start_tick_ = GOOGLE_LONGLONG(0);
  stop_tick_ = GOOGLE_LONGLONG(0);
  priority_ = 0;
  times_ = GOOGLE_ULONGLONG(0);
  icon_type_ = 0;
  role_recharge_ = 0;
  limit_ = 0;
  role_consume_ = 0;
  cumulative_login_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PActTypeItem::~PActTypeItem() {
  SharedDtor();
}

void PActTypeItem::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
    delete cumulative_login_;
  }
}

void PActTypeItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PActTypeItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PActTypeItem_descriptor_;
}

const PActTypeItem& PActTypeItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

PActTypeItem* PActTypeItem::default_instance_ = NULL;

PActTypeItem* PActTypeItem::New() const {
  return new PActTypeItem;
}

void PActTypeItem::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    sub_value_ = GOOGLE_LONGLONG(0);
    second_sub_ = GOOGLE_LONGLONG(0);
    update_tick_ = 0;
    act_index_ = 0;
    first_type_ = 0;
    second_type_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    reward_count_ = 0;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    start_tick_ = GOOGLE_LONGLONG(0);
    stop_tick_ = GOOGLE_LONGLONG(0);
    priority_ = 0;
    times_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    icon_type_ = 0;
    role_recharge_ = 0;
    limit_ = 0;
    role_consume_ = 0;
    if (has_cumulative_login()) {
      if (cumulative_login_ != NULL) cumulative_login_->::PActCumulativeLogin::Clear();
    }
  }
  reward_info_.Clear();
  open_time_.Clear();
  agent_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PActTypeItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PRewardItem reward_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_reward_info;
        if (input->ExpectTag(16)) goto parse_sub_value;
        break;
      }
      
      // optional int64 sub_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sub_value_)));
          set_has_sub_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_second_sub;
        break;
      }
      
      // optional int64 second_sub = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_second_sub:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &second_sub_)));
          set_has_second_sub();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_update_tick;
        break;
      }
      
      // optional int32 update_tick = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &update_tick_)));
          set_has_update_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_act_index;
        break;
      }
      
      // optional int32 act_index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_act_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &act_index_)));
          set_has_act_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_first_type;
        break;
      }
      
      // optional int32 first_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_type_)));
          set_has_first_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_second_type;
        break;
      }
      
      // optional int32 second_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_second_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &second_type_)));
          set_has_second_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_open_time;
        break;
      }
      
      // repeated int32 open_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_open_time())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_open_time())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_open_time;
        if (input->ExpectTag(72)) goto parse_reward_count;
        break;
      }
      
      // optional int32 reward_count = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_count_)));
          set_has_reward_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_title;
        break;
      }
      
      // optional string title = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_content;
        break;
      }
      
      // optional string content = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_start_tick;
        break;
      }
      
      // optional int64 start_tick = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_tick_)));
          set_has_start_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_stop_tick;
        break;
      }
      
      // optional int64 stop_tick = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stop_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &stop_tick_)));
          set_has_stop_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_agent;
        break;
      }
      
      // repeated int32 agent = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 112, input, this->mutable_agent())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_agent())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_agent;
        if (input->ExpectTag(120)) goto parse_priority;
        break;
      }
      
      // optional int32 priority = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_times;
        break;
      }
      
      // optional uint64 times = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_icon_type;
        break;
      }
      
      // optional int32 icon_type = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_icon_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icon_type_)));
          set_has_icon_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_role_recharge;
        break;
      }
      
      // optional int32 role_recharge = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_recharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_recharge_)));
          set_has_role_recharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_limit;
        break;
      }
      
      // optional int32 limit = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_role_consume;
        break;
      }
      
      // optional int32 role_consume = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_consume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_consume_)));
          set_has_role_consume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_cumulative_login;
        break;
      }
      
      // optional .PActCumulativeLogin cumulative_login = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cumulative_login:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cumulative_login()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PActTypeItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PRewardItem reward_info = 1;
  for (int i = 0; i < this->reward_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reward_info(i), output);
  }
  
  // optional int64 sub_value = 2;
  if (has_sub_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->sub_value(), output);
  }
  
  // optional int64 second_sub = 3;
  if (has_second_sub()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->second_sub(), output);
  }
  
  // optional int32 update_tick = 4;
  if (has_update_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->update_tick(), output);
  }
  
  // optional int32 act_index = 5;
  if (has_act_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->act_index(), output);
  }
  
  // optional int32 first_type = 6;
  if (has_first_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->first_type(), output);
  }
  
  // optional int32 second_type = 7;
  if (has_second_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->second_type(), output);
  }
  
  // repeated int32 open_time = 8;
  for (int i = 0; i < this->open_time_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->open_time(i), output);
  }
  
  // optional int32 reward_count = 9;
  if (has_reward_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->reward_count(), output);
  }
  
  // optional string title = 10;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->title(), output);
  }
  
  // optional string content = 11;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->content(), output);
  }
  
  // optional int64 start_tick = 12;
  if (has_start_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->start_tick(), output);
  }
  
  // optional int64 stop_tick = 13;
  if (has_stop_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->stop_tick(), output);
  }
  
  // repeated int32 agent = 14;
  for (int i = 0; i < this->agent_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      14, this->agent(i), output);
  }
  
  // optional int32 priority = 15;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->priority(), output);
  }
  
  // optional uint64 times = 16;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->times(), output);
  }
  
  // optional int32 icon_type = 17;
  if (has_icon_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->icon_type(), output);
  }
  
  // optional int32 role_recharge = 18;
  if (has_role_recharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->role_recharge(), output);
  }
  
  // optional int32 limit = 19;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->limit(), output);
  }
  
  // optional int32 role_consume = 20;
  if (has_role_consume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->role_consume(), output);
  }
  
  // optional .PActCumulativeLogin cumulative_login = 21;
  if (has_cumulative_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->cumulative_login(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PActTypeItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PRewardItem reward_info = 1;
  for (int i = 0; i < this->reward_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reward_info(i), target);
  }
  
  // optional int64 sub_value = 2;
  if (has_sub_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->sub_value(), target);
  }
  
  // optional int64 second_sub = 3;
  if (has_second_sub()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->second_sub(), target);
  }
  
  // optional int32 update_tick = 4;
  if (has_update_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->update_tick(), target);
  }
  
  // optional int32 act_index = 5;
  if (has_act_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->act_index(), target);
  }
  
  // optional int32 first_type = 6;
  if (has_first_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->first_type(), target);
  }
  
  // optional int32 second_type = 7;
  if (has_second_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->second_type(), target);
  }
  
  // repeated int32 open_time = 8;
  for (int i = 0; i < this->open_time_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->open_time(i), target);
  }
  
  // optional int32 reward_count = 9;
  if (has_reward_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->reward_count(), target);
  }
  
  // optional string title = 10;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->title(), target);
  }
  
  // optional string content = 11;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->content(), target);
  }
  
  // optional int64 start_tick = 12;
  if (has_start_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->start_tick(), target);
  }
  
  // optional int64 stop_tick = 13;
  if (has_stop_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->stop_tick(), target);
  }
  
  // repeated int32 agent = 14;
  for (int i = 0; i < this->agent_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(14, this->agent(i), target);
  }
  
  // optional int32 priority = 15;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->priority(), target);
  }
  
  // optional uint64 times = 16;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->times(), target);
  }
  
  // optional int32 icon_type = 17;
  if (has_icon_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->icon_type(), target);
  }
  
  // optional int32 role_recharge = 18;
  if (has_role_recharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->role_recharge(), target);
  }
  
  // optional int32 limit = 19;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->limit(), target);
  }
  
  // optional int32 role_consume = 20;
  if (has_role_consume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->role_consume(), target);
  }
  
  // optional .PActCumulativeLogin cumulative_login = 21;
  if (has_cumulative_login()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->cumulative_login(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PActTypeItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int64 sub_value = 2;
    if (has_sub_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sub_value());
    }
    
    // optional int64 second_sub = 3;
    if (has_second_sub()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->second_sub());
    }
    
    // optional int32 update_tick = 4;
    if (has_update_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->update_tick());
    }
    
    // optional int32 act_index = 5;
    if (has_act_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->act_index());
    }
    
    // optional int32 first_type = 6;
    if (has_first_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->first_type());
    }
    
    // optional int32 second_type = 7;
    if (has_second_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->second_type());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 reward_count = 9;
    if (has_reward_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_count());
    }
    
    // optional string title = 10;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }
    
    // optional string content = 11;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
    // optional int64 start_tick = 12;
    if (has_start_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_tick());
    }
    
    // optional int64 stop_tick = 13;
    if (has_stop_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->stop_tick());
    }
    
    // optional int32 priority = 15;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority());
    }
    
    // optional uint64 times = 16;
    if (has_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->times());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 icon_type = 17;
    if (has_icon_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icon_type());
    }
    
    // optional int32 role_recharge = 18;
    if (has_role_recharge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_recharge());
    }
    
    // optional int32 limit = 19;
    if (has_limit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit());
    }
    
    // optional int32 role_consume = 20;
    if (has_role_consume()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_consume());
    }
    
    // optional .PActCumulativeLogin cumulative_login = 21;
    if (has_cumulative_login()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cumulative_login());
    }
    
  }
  // repeated .PRewardItem reward_info = 1;
  total_size += 1 * this->reward_info_size();
  for (int i = 0; i < this->reward_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward_info(i));
  }
  
  // repeated int32 open_time = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->open_time_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->open_time(i));
    }
    total_size += 1 * this->open_time_size() + data_size;
  }
  
  // repeated int32 agent = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->agent_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->agent(i));
    }
    total_size += 1 * this->agent_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PActTypeItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PActTypeItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PActTypeItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PActTypeItem::MergeFrom(const PActTypeItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_info_.MergeFrom(from.reward_info_);
  open_time_.MergeFrom(from.open_time_);
  agent_.MergeFrom(from.agent_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_sub_value()) {
      set_sub_value(from.sub_value());
    }
    if (from.has_second_sub()) {
      set_second_sub(from.second_sub());
    }
    if (from.has_update_tick()) {
      set_update_tick(from.update_tick());
    }
    if (from.has_act_index()) {
      set_act_index(from.act_index());
    }
    if (from.has_first_type()) {
      set_first_type(from.first_type());
    }
    if (from.has_second_type()) {
      set_second_type(from.second_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_reward_count()) {
      set_reward_count(from.reward_count());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_start_tick()) {
      set_start_tick(from.start_tick());
    }
    if (from.has_stop_tick()) {
      set_stop_tick(from.stop_tick());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_icon_type()) {
      set_icon_type(from.icon_type());
    }
    if (from.has_role_recharge()) {
      set_role_recharge(from.role_recharge());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
    if (from.has_role_consume()) {
      set_role_consume(from.role_consume());
    }
    if (from.has_cumulative_login()) {
      mutable_cumulative_login()->::PActCumulativeLogin::MergeFrom(from.cumulative_login());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PActTypeItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PActTypeItem::CopyFrom(const PActTypeItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PActTypeItem::IsInitialized() const {
  
  return true;
}

void PActTypeItem::Swap(PActTypeItem* other) {
  if (other != this) {
    reward_info_.Swap(&other->reward_info_);
    std::swap(sub_value_, other->sub_value_);
    std::swap(second_sub_, other->second_sub_);
    std::swap(update_tick_, other->update_tick_);
    std::swap(act_index_, other->act_index_);
    std::swap(first_type_, other->first_type_);
    std::swap(second_type_, other->second_type_);
    open_time_.Swap(&other->open_time_);
    std::swap(reward_count_, other->reward_count_);
    std::swap(title_, other->title_);
    std::swap(content_, other->content_);
    std::swap(start_tick_, other->start_tick_);
    std::swap(stop_tick_, other->stop_tick_);
    agent_.Swap(&other->agent_);
    std::swap(priority_, other->priority_);
    std::swap(times_, other->times_);
    std::swap(icon_type_, other->icon_type_);
    std::swap(role_recharge_, other->role_recharge_);
    std::swap(limit_, other->limit_);
    std::swap(role_consume_, other->role_consume_);
    std::swap(cumulative_login_, other->cumulative_login_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PActTypeItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PActTypeItem_descriptor_;
  metadata.reflection = PActTypeItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PRewardItem::kContentFieldNumber;
const int PRewardItem::kRewardIdFieldNumber;
const int PRewardItem::kRewardSetFieldNumber;
const int PRewardItem::kDrawFlagFieldNumber;
const int PRewardItem::kIndexFieldNumber;
const int PRewardItem::kCondFieldNumber;
const int PRewardItem::kArriveFieldNumber;
const int PRewardItem::kDrawedFieldNumber;
const int PRewardItem::kRoleIdNameFieldNumber;
const int PRewardItem::kBrocastFieldNumber;
const int PRewardItem::kTimesFieldNumber;
const int PRewardItem::kSubMapFieldNumber;
const int PRewardItem::kRechargeMapFieldNumber;
const int PRewardItem::kMustResetFieldNumber;
const int PRewardItem::kCostItemFieldNumber;
const int PRewardItem::kPreItemFieldNumber;
const int PRewardItem::kExchangeTypeFieldNumber;
const int PRewardItem::kExchangeItemNameFieldNumber;
const int PRewardItem::kCashCouponFieldNumber;
const int PRewardItem::kSubValueFieldNumber;
#endif  // !_MSC_VER

PRewardItem::PRewardItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PRewardItem::InitAsDefaultInstance() {
}

PRewardItem::PRewardItem(const PRewardItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PRewardItem::SharedCtor() {
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reward_id_ = 0;
  draw_flag_ = 0;
  index_ = 0;
  arrive_ = 0;
  drawed_ = 0;
  brocast_ = 0;
  times_ = 0;
  must_reset_ = 0;
  exchange_type_ = 0;
  exchange_item_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cash_coupon_ = 0;
  sub_value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PRewardItem::~PRewardItem() {
  SharedDtor();
}

void PRewardItem::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (exchange_item_name_ != &::google::protobuf::internal::kEmptyString) {
    delete exchange_item_name_;
  }
  if (this != default_instance_) {
  }
}

void PRewardItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PRewardItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PRewardItem_descriptor_;
}

const PRewardItem& PRewardItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

PRewardItem* PRewardItem::default_instance_ = NULL;

PRewardItem* PRewardItem::New() const {
  return new PRewardItem;
}

void PRewardItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    reward_id_ = 0;
    draw_flag_ = 0;
    index_ = 0;
    arrive_ = 0;
    drawed_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    brocast_ = 0;
    times_ = 0;
    must_reset_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    exchange_type_ = 0;
    if (has_exchange_item_name()) {
      if (exchange_item_name_ != &::google::protobuf::internal::kEmptyString) {
        exchange_item_name_->clear();
      }
    }
    cash_coupon_ = 0;
    sub_value_ = GOOGLE_LONGLONG(0);
  }
  reward_set_.Clear();
  cond_.Clear();
  role_id_name_.Clear();
  sub_map_.Clear();
  recharge_map_.Clear();
  cost_item_.Clear();
  pre_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PRewardItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reward_id;
        break;
      }
      
      // optional int32 reward_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id_)));
          set_has_reward_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_reward_set;
        break;
      }
      
      // repeated .ProtoItem reward_set = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward_set()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_reward_set;
        if (input->ExpectTag(32)) goto parse_draw_flag;
        break;
      }
      
      // optional int32 draw_flag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_draw_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &draw_flag_)));
          set_has_draw_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_index;
        break;
      }
      
      // optional int32 index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cond;
        break;
      }
      
      // repeated int64 cond = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 48, input, this->mutable_cond())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_cond())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cond;
        if (input->ExpectTag(56)) goto parse_arrive;
        break;
      }
      
      // optional int32 arrive = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arrive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arrive_)));
          set_has_arrive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_drawed;
        break;
      }
      
      // optional int32 drawed = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drawed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drawed_)));
          set_has_drawed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_role_id_name;
        break;
      }
      
      // repeated .ProtoPairLongString role_id_name = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_id_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_role_id_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_role_id_name;
        if (input->ExpectTag(80)) goto parse_brocast;
        break;
      }
      
      // optional int32 brocast = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_brocast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &brocast_)));
          set_has_brocast();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_times;
        break;
      }
      
      // optional int32 times = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_sub_map;
        break;
      }
      
      // repeated .ProtoPairLong sub_map = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sub_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sub_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_sub_map;
        if (input->ExpectTag(106)) goto parse_recharge_map;
        break;
      }
      
      // repeated .ProtoPairLong recharge_map = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recharge_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recharge_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_recharge_map;
        if (input->ExpectTag(112)) goto parse_must_reset;
        break;
      }
      
      // optional int32 must_reset = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_must_reset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &must_reset_)));
          set_has_must_reset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_cost_item;
        break;
      }
      
      // repeated .ProtoItem cost_item = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cost_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cost_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_cost_item;
        if (input->ExpectTag(130)) goto parse_pre_item;
        break;
      }
      
      // repeated .ProtoItem pre_item = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pre_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pre_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_pre_item;
        if (input->ExpectTag(136)) goto parse_exchange_type;
        break;
      }
      
      // optional int32 exchange_type = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exchange_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchange_type_)));
          set_has_exchange_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_exchange_item_name;
        break;
      }
      
      // optional string exchange_item_name = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exchange_item_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange_item_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exchange_item_name().data(), this->exchange_item_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_cash_coupon;
        break;
      }
      
      // optional int32 cash_coupon = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cash_coupon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cash_coupon_)));
          set_has_cash_coupon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_sub_value;
        break;
      }
      
      // optional int64 sub_value = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sub_value_)));
          set_has_sub_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PRewardItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->content(), output);
  }
  
  // optional int32 reward_id = 2;
  if (has_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reward_id(), output);
  }
  
  // repeated .ProtoItem reward_set = 3;
  for (int i = 0; i < this->reward_set_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reward_set(i), output);
  }
  
  // optional int32 draw_flag = 4;
  if (has_draw_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->draw_flag(), output);
  }
  
  // optional int32 index = 5;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->index(), output);
  }
  
  // repeated int64 cond = 6;
  for (int i = 0; i < this->cond_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      6, this->cond(i), output);
  }
  
  // optional int32 arrive = 7;
  if (has_arrive()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->arrive(), output);
  }
  
  // optional int32 drawed = 8;
  if (has_drawed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->drawed(), output);
  }
  
  // repeated .ProtoPairLongString role_id_name = 9;
  for (int i = 0; i < this->role_id_name_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->role_id_name(i), output);
  }
  
  // optional int32 brocast = 10;
  if (has_brocast()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->brocast(), output);
  }
  
  // optional int32 times = 11;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->times(), output);
  }
  
  // repeated .ProtoPairLong sub_map = 12;
  for (int i = 0; i < this->sub_map_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->sub_map(i), output);
  }
  
  // repeated .ProtoPairLong recharge_map = 13;
  for (int i = 0; i < this->recharge_map_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->recharge_map(i), output);
  }
  
  // optional int32 must_reset = 14;
  if (has_must_reset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->must_reset(), output);
  }
  
  // repeated .ProtoItem cost_item = 15;
  for (int i = 0; i < this->cost_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->cost_item(i), output);
  }
  
  // repeated .ProtoItem pre_item = 16;
  for (int i = 0; i < this->pre_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->pre_item(i), output);
  }
  
  // optional int32 exchange_type = 17;
  if (has_exchange_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->exchange_type(), output);
  }
  
  // optional string exchange_item_name = 18;
  if (has_exchange_item_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchange_item_name().data(), this->exchange_item_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->exchange_item_name(), output);
  }
  
  // optional int32 cash_coupon = 19;
  if (has_cash_coupon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->cash_coupon(), output);
  }
  
  // optional int64 sub_value = 20;
  if (has_sub_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->sub_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PRewardItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }
  
  // optional int32 reward_id = 2;
  if (has_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reward_id(), target);
  }
  
  // repeated .ProtoItem reward_set = 3;
  for (int i = 0; i < this->reward_set_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reward_set(i), target);
  }
  
  // optional int32 draw_flag = 4;
  if (has_draw_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->draw_flag(), target);
  }
  
  // optional int32 index = 5;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->index(), target);
  }
  
  // repeated int64 cond = 6;
  for (int i = 0; i < this->cond_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(6, this->cond(i), target);
  }
  
  // optional int32 arrive = 7;
  if (has_arrive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->arrive(), target);
  }
  
  // optional int32 drawed = 8;
  if (has_drawed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->drawed(), target);
  }
  
  // repeated .ProtoPairLongString role_id_name = 9;
  for (int i = 0; i < this->role_id_name_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->role_id_name(i), target);
  }
  
  // optional int32 brocast = 10;
  if (has_brocast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->brocast(), target);
  }
  
  // optional int32 times = 11;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->times(), target);
  }
  
  // repeated .ProtoPairLong sub_map = 12;
  for (int i = 0; i < this->sub_map_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->sub_map(i), target);
  }
  
  // repeated .ProtoPairLong recharge_map = 13;
  for (int i = 0; i < this->recharge_map_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->recharge_map(i), target);
  }
  
  // optional int32 must_reset = 14;
  if (has_must_reset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->must_reset(), target);
  }
  
  // repeated .ProtoItem cost_item = 15;
  for (int i = 0; i < this->cost_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->cost_item(i), target);
  }
  
  // repeated .ProtoItem pre_item = 16;
  for (int i = 0; i < this->pre_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->pre_item(i), target);
  }
  
  // optional int32 exchange_type = 17;
  if (has_exchange_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->exchange_type(), target);
  }
  
  // optional string exchange_item_name = 18;
  if (has_exchange_item_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchange_item_name().data(), this->exchange_item_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->exchange_item_name(), target);
  }
  
  // optional int32 cash_coupon = 19;
  if (has_cash_coupon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->cash_coupon(), target);
  }
  
  // optional int64 sub_value = 20;
  if (has_sub_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->sub_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PRewardItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
    // optional int32 reward_id = 2;
    if (has_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id());
    }
    
    // optional int32 draw_flag = 4;
    if (has_draw_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->draw_flag());
    }
    
    // optional int32 index = 5;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional int32 arrive = 7;
    if (has_arrive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arrive());
    }
    
    // optional int32 drawed = 8;
    if (has_drawed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->drawed());
    }
    
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int32 brocast = 10;
    if (has_brocast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->brocast());
    }
    
    // optional int32 times = 11;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }
    
    // optional int32 must_reset = 14;
    if (has_must_reset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->must_reset());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 exchange_type = 17;
    if (has_exchange_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exchange_type());
    }
    
    // optional string exchange_item_name = 18;
    if (has_exchange_item_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange_item_name());
    }
    
    // optional int32 cash_coupon = 19;
    if (has_cash_coupon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cash_coupon());
    }
    
    // optional int64 sub_value = 20;
    if (has_sub_value()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sub_value());
    }
    
  }
  // repeated .ProtoItem reward_set = 3;
  total_size += 1 * this->reward_set_size();
  for (int i = 0; i < this->reward_set_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward_set(i));
  }
  
  // repeated int64 cond = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->cond_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->cond(i));
    }
    total_size += 1 * this->cond_size() + data_size;
  }
  
  // repeated .ProtoPairLongString role_id_name = 9;
  total_size += 1 * this->role_id_name_size();
  for (int i = 0; i < this->role_id_name_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->role_id_name(i));
  }
  
  // repeated .ProtoPairLong sub_map = 12;
  total_size += 1 * this->sub_map_size();
  for (int i = 0; i < this->sub_map_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sub_map(i));
  }
  
  // repeated .ProtoPairLong recharge_map = 13;
  total_size += 1 * this->recharge_map_size();
  for (int i = 0; i < this->recharge_map_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recharge_map(i));
  }
  
  // repeated .ProtoItem cost_item = 15;
  total_size += 1 * this->cost_item_size();
  for (int i = 0; i < this->cost_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cost_item(i));
  }
  
  // repeated .ProtoItem pre_item = 16;
  total_size += 2 * this->pre_item_size();
  for (int i = 0; i < this->pre_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pre_item(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PRewardItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PRewardItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PRewardItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PRewardItem::MergeFrom(const PRewardItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_set_.MergeFrom(from.reward_set_);
  cond_.MergeFrom(from.cond_);
  role_id_name_.MergeFrom(from.role_id_name_);
  sub_map_.MergeFrom(from.sub_map_);
  recharge_map_.MergeFrom(from.recharge_map_);
  cost_item_.MergeFrom(from.cost_item_);
  pre_item_.MergeFrom(from.pre_item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_reward_id()) {
      set_reward_id(from.reward_id());
    }
    if (from.has_draw_flag()) {
      set_draw_flag(from.draw_flag());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_arrive()) {
      set_arrive(from.arrive());
    }
    if (from.has_drawed()) {
      set_drawed(from.drawed());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_brocast()) {
      set_brocast(from.brocast());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_must_reset()) {
      set_must_reset(from.must_reset());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_exchange_type()) {
      set_exchange_type(from.exchange_type());
    }
    if (from.has_exchange_item_name()) {
      set_exchange_item_name(from.exchange_item_name());
    }
    if (from.has_cash_coupon()) {
      set_cash_coupon(from.cash_coupon());
    }
    if (from.has_sub_value()) {
      set_sub_value(from.sub_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PRewardItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PRewardItem::CopyFrom(const PRewardItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PRewardItem::IsInitialized() const {
  
  return true;
}

void PRewardItem::Swap(PRewardItem* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(reward_id_, other->reward_id_);
    reward_set_.Swap(&other->reward_set_);
    std::swap(draw_flag_, other->draw_flag_);
    std::swap(index_, other->index_);
    cond_.Swap(&other->cond_);
    std::swap(arrive_, other->arrive_);
    std::swap(drawed_, other->drawed_);
    role_id_name_.Swap(&other->role_id_name_);
    std::swap(brocast_, other->brocast_);
    std::swap(times_, other->times_);
    sub_map_.Swap(&other->sub_map_);
    recharge_map_.Swap(&other->recharge_map_);
    std::swap(must_reset_, other->must_reset_);
    cost_item_.Swap(&other->cost_item_);
    pre_item_.Swap(&other->pre_item_);
    std::swap(exchange_type_, other->exchange_type_);
    std::swap(exchange_item_name_, other->exchange_item_name_);
    std::swap(cash_coupon_, other->cash_coupon_);
    std::swap(sub_value_, other->sub_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PRewardItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PRewardItem_descriptor_;
  metadata.reflection = PRewardItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoGateRole::kRoleIdFieldNumber;
const int ProtoGateRole::kNameFieldNumber;
const int ProtoGateRole::kLevelFieldNumber;
const int ProtoGateRole::kSexFieldNumber;
const int ProtoGateRole::kCareerFieldNumber;
#endif  // !_MSC_VER

ProtoGateRole::ProtoGateRole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoGateRole::InitAsDefaultInstance() {
}

ProtoGateRole::ProtoGateRole(const ProtoGateRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoGateRole::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  sex_ = 0;
  career_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoGateRole::~ProtoGateRole() {
  SharedDtor();
}

void ProtoGateRole::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoGateRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoGateRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoGateRole_descriptor_;
}

const ProtoGateRole& ProtoGateRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoGateRole* ProtoGateRole::default_instance_ = NULL;

ProtoGateRole* ProtoGateRole::New() const {
  return new ProtoGateRole;
}

void ProtoGateRole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0;
    sex_ = 0;
    career_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoGateRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }
      
      // optional int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sex;
        break;
      }
      
      // optional int32 sex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_career;
        break;
      }
      
      // optional int32 career = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_career:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &career_)));
          set_has_career();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoGateRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_id(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }
  
  // optional int32 sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sex(), output);
  }
  
  // optional int32 career = 5;
  if (has_career()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->career(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoGateRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_id(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }
  
  // optional int32 sex = 4;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sex(), target);
  }
  
  // optional int32 career = 5;
  if (has_career()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->career(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoGateRole::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }
    
    // optional int32 career = 5;
    if (has_career()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->career());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoGateRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoGateRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoGateRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoGateRole::MergeFrom(const ProtoGateRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_career()) {
      set_career(from.career());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoGateRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoGateRole::CopyFrom(const ProtoGateRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoGateRole::IsInitialized() const {
  
  return true;
}

void ProtoGateRole::Swap(ProtoGateRole* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(sex_, other->sex_);
    std::swap(career_, other->career_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoGateRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoGateRole_descriptor_;
  metadata.reflection = ProtoGateRole_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoPackageItem::kItemIdFieldNumber;
const int ProtoPackageItem::kItemIndexFieldNumber;
const int ProtoPackageItem::kItemTypeFieldNumber;
#endif  // !_MSC_VER

ProtoPackageItem::ProtoPackageItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoPackageItem::InitAsDefaultInstance() {
}

ProtoPackageItem::ProtoPackageItem(const ProtoPackageItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoPackageItem::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0;
  item_index_ = 0;
  item_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoPackageItem::~ProtoPackageItem() {
  SharedDtor();
}

void ProtoPackageItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoPackageItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoPackageItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoPackageItem_descriptor_;
}

const ProtoPackageItem& ProtoPackageItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoPackageItem* ProtoPackageItem::default_instance_ = NULL;

ProtoPackageItem* ProtoPackageItem::New() const {
  return new ProtoPackageItem;
}

void ProtoPackageItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0;
    item_index_ = 0;
    item_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoPackageItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_index;
        break;
      }
      
      // optional int32 item_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_index_)));
          set_has_item_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_type;
        break;
      }
      
      // optional int32 item_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_type_)));
          set_has_item_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoPackageItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_id(), output);
  }
  
  // optional int32 item_index = 2;
  if (has_item_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_index(), output);
  }
  
  // optional int32 item_type = 3;
  if (has_item_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->item_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoPackageItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_id(), target);
  }
  
  // optional int32 item_index = 2;
  if (has_item_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_index(), target);
  }
  
  // optional int32 item_type = 3;
  if (has_item_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->item_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoPackageItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }
    
    // optional int32 item_index = 2;
    if (has_item_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_index());
    }
    
    // optional int32 item_type = 3;
    if (has_item_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoPackageItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoPackageItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoPackageItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoPackageItem::MergeFrom(const ProtoPackageItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_index()) {
      set_item_index(from.item_index());
    }
    if (from.has_item_type()) {
      set_item_type(from.item_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoPackageItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoPackageItem::CopyFrom(const ProtoPackageItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoPackageItem::IsInitialized() const {
  
  return true;
}

void ProtoPackageItem::Swap(ProtoPackageItem* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(item_index_, other->item_index_);
    std::swap(item_type_, other->item_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoPackageItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoPackageItem_descriptor_;
  metadata.reflection = ProtoPackageItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoEquipPolishAttrInfo::kLockIndexFieldNumber;
const int ProtoEquipPolishAttrInfo::kAttrTypeFieldNumber;
const int ProtoEquipPolishAttrInfo::kCurValueFieldNumber;
const int ProtoEquipPolishAttrInfo::kColorFieldNumber;
const int ProtoEquipPolishAttrInfo::kMaxValueFieldNumber;
#endif  // !_MSC_VER

ProtoEquipPolishAttrInfo::ProtoEquipPolishAttrInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoEquipPolishAttrInfo::InitAsDefaultInstance() {
}

ProtoEquipPolishAttrInfo::ProtoEquipPolishAttrInfo(const ProtoEquipPolishAttrInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoEquipPolishAttrInfo::SharedCtor() {
  _cached_size_ = 0;
  lock_index_ = 0;
  attr_type_ = 0;
  cur_value_ = 0;
  color_ = 0;
  max_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoEquipPolishAttrInfo::~ProtoEquipPolishAttrInfo() {
  SharedDtor();
}

void ProtoEquipPolishAttrInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoEquipPolishAttrInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoEquipPolishAttrInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoEquipPolishAttrInfo_descriptor_;
}

const ProtoEquipPolishAttrInfo& ProtoEquipPolishAttrInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoEquipPolishAttrInfo* ProtoEquipPolishAttrInfo::default_instance_ = NULL;

ProtoEquipPolishAttrInfo* ProtoEquipPolishAttrInfo::New() const {
  return new ProtoEquipPolishAttrInfo;
}

void ProtoEquipPolishAttrInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lock_index_ = 0;
    attr_type_ = 0;
    cur_value_ = 0;
    color_ = 0;
    max_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoEquipPolishAttrInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lock_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lock_index_)));
          set_has_lock_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attr_type;
        break;
      }
      
      // optional int32 attr_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attr_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attr_type_)));
          set_has_attr_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_value;
        break;
      }
      
      // optional int32 cur_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_value_)));
          set_has_cur_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_color;
        break;
      }
      
      // optional int32 color = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_max_value;
        break;
      }
      
      // optional int32 max_value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_value_)));
          set_has_max_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoEquipPolishAttrInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lock_index = 1;
  if (has_lock_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lock_index(), output);
  }
  
  // optional int32 attr_type = 2;
  if (has_attr_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->attr_type(), output);
  }
  
  // optional int32 cur_value = 3;
  if (has_cur_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cur_value(), output);
  }
  
  // optional int32 color = 4;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->color(), output);
  }
  
  // optional int32 max_value = 5;
  if (has_max_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->max_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoEquipPolishAttrInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lock_index = 1;
  if (has_lock_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lock_index(), target);
  }
  
  // optional int32 attr_type = 2;
  if (has_attr_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->attr_type(), target);
  }
  
  // optional int32 cur_value = 3;
  if (has_cur_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cur_value(), target);
  }
  
  // optional int32 color = 4;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->color(), target);
  }
  
  // optional int32 max_value = 5;
  if (has_max_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->max_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoEquipPolishAttrInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lock_index = 1;
    if (has_lock_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lock_index());
    }
    
    // optional int32 attr_type = 2;
    if (has_attr_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attr_type());
    }
    
    // optional int32 cur_value = 3;
    if (has_cur_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_value());
    }
    
    // optional int32 color = 4;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }
    
    // optional int32 max_value = 5;
    if (has_max_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoEquipPolishAttrInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoEquipPolishAttrInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoEquipPolishAttrInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoEquipPolishAttrInfo::MergeFrom(const ProtoEquipPolishAttrInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lock_index()) {
      set_lock_index(from.lock_index());
    }
    if (from.has_attr_type()) {
      set_attr_type(from.attr_type());
    }
    if (from.has_cur_value()) {
      set_cur_value(from.cur_value());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_max_value()) {
      set_max_value(from.max_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoEquipPolishAttrInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoEquipPolishAttrInfo::CopyFrom(const ProtoEquipPolishAttrInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoEquipPolishAttrInfo::IsInitialized() const {
  
  return true;
}

void ProtoEquipPolishAttrInfo::Swap(ProtoEquipPolishAttrInfo* other) {
  if (other != this) {
    std::swap(lock_index_, other->lock_index_);
    std::swap(attr_type_, other->attr_type_);
    std::swap(cur_value_, other->cur_value_);
    std::swap(color_, other->color_);
    std::swap(max_value_, other->max_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoEquipPolishAttrInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoEquipPolishAttrInfo_descriptor_;
  metadata.reflection = ProtoEquipPolishAttrInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoEquipPolishStruct::kEquipPolishInfoFieldNumber;
#endif  // !_MSC_VER

ProtoEquipPolishStruct::ProtoEquipPolishStruct()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoEquipPolishStruct::InitAsDefaultInstance() {
}

ProtoEquipPolishStruct::ProtoEquipPolishStruct(const ProtoEquipPolishStruct& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoEquipPolishStruct::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoEquipPolishStruct::~ProtoEquipPolishStruct() {
  SharedDtor();
}

void ProtoEquipPolishStruct::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoEquipPolishStruct::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoEquipPolishStruct::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoEquipPolishStruct_descriptor_;
}

const ProtoEquipPolishStruct& ProtoEquipPolishStruct::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoEquipPolishStruct* ProtoEquipPolishStruct::default_instance_ = NULL;

ProtoEquipPolishStruct* ProtoEquipPolishStruct::New() const {
  return new ProtoEquipPolishStruct;
}

void ProtoEquipPolishStruct::Clear() {
  equip_polish_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoEquipPolishStruct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoEquipPolishAttrInfo equip_polish_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_polish_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_polish_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equip_polish_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoEquipPolishStruct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoEquipPolishAttrInfo equip_polish_info = 1;
  for (int i = 0; i < this->equip_polish_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equip_polish_info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoEquipPolishStruct::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoEquipPolishAttrInfo equip_polish_info = 1;
  for (int i = 0; i < this->equip_polish_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equip_polish_info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoEquipPolishStruct::ByteSize() const {
  int total_size = 0;
  
  // repeated .ProtoEquipPolishAttrInfo equip_polish_info = 1;
  total_size += 1 * this->equip_polish_info_size();
  for (int i = 0; i < this->equip_polish_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_polish_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoEquipPolishStruct::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoEquipPolishStruct* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoEquipPolishStruct*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoEquipPolishStruct::MergeFrom(const ProtoEquipPolishStruct& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_polish_info_.MergeFrom(from.equip_polish_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoEquipPolishStruct::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoEquipPolishStruct::CopyFrom(const ProtoEquipPolishStruct& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoEquipPolishStruct::IsInitialized() const {
  
  return true;
}

void ProtoEquipPolishStruct::Swap(ProtoEquipPolishStruct* other) {
  if (other != this) {
    equip_polish_info_.Swap(&other->equip_polish_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoEquipPolishStruct::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoEquipPolishStruct_descriptor_;
  metadata.reflection = ProtoEquipPolishStruct_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoEquipPolish::kCurPolishInfoFieldNumber;
const int ProtoEquipPolish::kSinglePolishInfoFieldNumber;
const int ProtoEquipPolish::kBatchPolishInfoFieldNumber;
const int ProtoEquipPolish::kProcessValueFieldNumber;
#endif  // !_MSC_VER

ProtoEquipPolish::ProtoEquipPolish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoEquipPolish::InitAsDefaultInstance() {
  cur_polish_info_ = const_cast< ::ProtoEquipPolishStruct*>(&::ProtoEquipPolishStruct::default_instance());
  single_polish_info_ = const_cast< ::ProtoEquipPolishStruct*>(&::ProtoEquipPolishStruct::default_instance());
}

ProtoEquipPolish::ProtoEquipPolish(const ProtoEquipPolish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoEquipPolish::SharedCtor() {
  _cached_size_ = 0;
  cur_polish_info_ = NULL;
  single_polish_info_ = NULL;
  process_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoEquipPolish::~ProtoEquipPolish() {
  SharedDtor();
}

void ProtoEquipPolish::SharedDtor() {
  if (this != default_instance_) {
    delete cur_polish_info_;
    delete single_polish_info_;
  }
}

void ProtoEquipPolish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoEquipPolish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoEquipPolish_descriptor_;
}

const ProtoEquipPolish& ProtoEquipPolish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoEquipPolish* ProtoEquipPolish::default_instance_ = NULL;

ProtoEquipPolish* ProtoEquipPolish::New() const {
  return new ProtoEquipPolish;
}

void ProtoEquipPolish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cur_polish_info()) {
      if (cur_polish_info_ != NULL) cur_polish_info_->::ProtoEquipPolishStruct::Clear();
    }
    if (has_single_polish_info()) {
      if (single_polish_info_ != NULL) single_polish_info_->::ProtoEquipPolishStruct::Clear();
    }
    process_value_ = 0;
  }
  batch_polish_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoEquipPolish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ProtoEquipPolishStruct cur_polish_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cur_polish_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_single_polish_info;
        break;
      }
      
      // optional .ProtoEquipPolishStruct single_polish_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_single_polish_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_single_polish_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_batch_polish_info;
        break;
      }
      
      // repeated .ProtoEquipPolishStruct batch_polish_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_batch_polish_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_batch_polish_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_batch_polish_info;
        if (input->ExpectTag(32)) goto parse_process_value;
        break;
      }
      
      // optional int32 process_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_process_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &process_value_)));
          set_has_process_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoEquipPolish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ProtoEquipPolishStruct cur_polish_info = 1;
  if (has_cur_polish_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cur_polish_info(), output);
  }
  
  // optional .ProtoEquipPolishStruct single_polish_info = 2;
  if (has_single_polish_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->single_polish_info(), output);
  }
  
  // repeated .ProtoEquipPolishStruct batch_polish_info = 3;
  for (int i = 0; i < this->batch_polish_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->batch_polish_info(i), output);
  }
  
  // optional int32 process_value = 4;
  if (has_process_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->process_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoEquipPolish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ProtoEquipPolishStruct cur_polish_info = 1;
  if (has_cur_polish_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cur_polish_info(), target);
  }
  
  // optional .ProtoEquipPolishStruct single_polish_info = 2;
  if (has_single_polish_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->single_polish_info(), target);
  }
  
  // repeated .ProtoEquipPolishStruct batch_polish_info = 3;
  for (int i = 0; i < this->batch_polish_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->batch_polish_info(i), target);
  }
  
  // optional int32 process_value = 4;
  if (has_process_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->process_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoEquipPolish::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ProtoEquipPolishStruct cur_polish_info = 1;
    if (has_cur_polish_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cur_polish_info());
    }
    
    // optional .ProtoEquipPolishStruct single_polish_info = 2;
    if (has_single_polish_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->single_polish_info());
    }
    
    // optional int32 process_value = 4;
    if (has_process_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->process_value());
    }
    
  }
  // repeated .ProtoEquipPolishStruct batch_polish_info = 3;
  total_size += 1 * this->batch_polish_info_size();
  for (int i = 0; i < this->batch_polish_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->batch_polish_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoEquipPolish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoEquipPolish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoEquipPolish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoEquipPolish::MergeFrom(const ProtoEquipPolish& from) {
  GOOGLE_CHECK_NE(&from, this);
  batch_polish_info_.MergeFrom(from.batch_polish_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cur_polish_info()) {
      mutable_cur_polish_info()->::ProtoEquipPolishStruct::MergeFrom(from.cur_polish_info());
    }
    if (from.has_single_polish_info()) {
      mutable_single_polish_info()->::ProtoEquipPolishStruct::MergeFrom(from.single_polish_info());
    }
    if (from.has_process_value()) {
      set_process_value(from.process_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoEquipPolish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoEquipPolish::CopyFrom(const ProtoEquipPolish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoEquipPolish::IsInitialized() const {
  
  return true;
}

void ProtoEquipPolish::Swap(ProtoEquipPolish* other) {
  if (other != this) {
    std::swap(cur_polish_info_, other->cur_polish_info_);
    std::swap(single_polish_info_, other->single_polish_info_);
    batch_polish_info_.Swap(&other->batch_polish_info_);
    std::swap(process_value_, other->process_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoEquipPolish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoEquipPolish_descriptor_;
  metadata.reflection = ProtoEquipPolish_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoVipGift::kItemListFieldNumber;
const int ProtoVipGift::kVipTypeFieldNumber;
const int ProtoVipGift::kIsHasGiftFieldNumber;
const int ProtoVipGift::kRewardIdFieldNumber;
#endif  // !_MSC_VER

ProtoVipGift::ProtoVipGift()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoVipGift::InitAsDefaultInstance() {
}

ProtoVipGift::ProtoVipGift(const ProtoVipGift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoVipGift::SharedCtor() {
  _cached_size_ = 0;
  vip_type_ = 0;
  ishasgift_ = 0;
  reward_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoVipGift::~ProtoVipGift() {
  SharedDtor();
}

void ProtoVipGift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoVipGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoVipGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoVipGift_descriptor_;
}

const ProtoVipGift& ProtoVipGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoVipGift* ProtoVipGift::default_instance_ = NULL;

ProtoVipGift* ProtoVipGift::New() const {
  return new ProtoVipGift;
}

void ProtoVipGift::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    vip_type_ = 0;
    ishasgift_ = 0;
    reward_id_ = 0;
  }
  item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoVipGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoItem item_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_item_list;
        if (input->ExpectTag(16)) goto parse_vip_type;
        break;
      }
      
      // optional int32 vip_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_type_)));
          set_has_vip_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isHasGift;
        break;
      }
      
      // optional int32 isHasGift = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isHasGift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ishasgift_)));
          set_has_ishasgift();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reward_id;
        break;
      }
      
      // optional int32 reward_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id_)));
          set_has_reward_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoVipGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoItem item_list = 1;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item_list(i), output);
  }
  
  // optional int32 vip_type = 2;
  if (has_vip_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->vip_type(), output);
  }
  
  // optional int32 isHasGift = 3;
  if (has_ishasgift()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ishasgift(), output);
  }
  
  // optional int32 reward_id = 4;
  if (has_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->reward_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoVipGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoItem item_list = 1;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item_list(i), target);
  }
  
  // optional int32 vip_type = 2;
  if (has_vip_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->vip_type(), target);
  }
  
  // optional int32 isHasGift = 3;
  if (has_ishasgift()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ishasgift(), target);
  }
  
  // optional int32 reward_id = 4;
  if (has_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->reward_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoVipGift::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 vip_type = 2;
    if (has_vip_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_type());
    }
    
    // optional int32 isHasGift = 3;
    if (has_ishasgift()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ishasgift());
    }
    
    // optional int32 reward_id = 4;
    if (has_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id());
    }
    
  }
  // repeated .ProtoItem item_list = 1;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoVipGift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoVipGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoVipGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoVipGift::MergeFrom(const ProtoVipGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_vip_type()) {
      set_vip_type(from.vip_type());
    }
    if (from.has_ishasgift()) {
      set_ishasgift(from.ishasgift());
    }
    if (from.has_reward_id()) {
      set_reward_id(from.reward_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoVipGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoVipGift::CopyFrom(const ProtoVipGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoVipGift::IsInitialized() const {
  
  return true;
}

void ProtoVipGift::Swap(ProtoVipGift* other) {
  if (other != this) {
    item_list_.Swap(&other->item_list_);
    std::swap(vip_type_, other->vip_type_);
    std::swap(ishasgift_, other->ishasgift_);
    std::swap(reward_id_, other->reward_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoVipGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoVipGift_descriptor_;
  metadata.reflection = ProtoVipGift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoTrialTask::kTaskIdFieldNumber;
const int ProtoTrialTask::kStatusFieldNumber;
const int ProtoTrialTask::kAwardExpFieldNumber;
const int ProtoTrialTask::kMoneyFieldNumber;
const int ProtoTrialTask::kValueFieldNumber;
const int ProtoTrialTask::kFinalValueFieldNumber;
#endif  // !_MSC_VER

ProtoTrialTask::ProtoTrialTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoTrialTask::InitAsDefaultInstance() {
  money_ = const_cast< ::ProtoMoney*>(&::ProtoMoney::default_instance());
}

ProtoTrialTask::ProtoTrialTask(const ProtoTrialTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoTrialTask::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0;
  status_ = 0;
  award_exp_ = 0;
  money_ = NULL;
  value_ = 0;
  final_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoTrialTask::~ProtoTrialTask() {
  SharedDtor();
}

void ProtoTrialTask::SharedDtor() {
  if (this != default_instance_) {
    delete money_;
  }
}

void ProtoTrialTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoTrialTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoTrialTask_descriptor_;
}

const ProtoTrialTask& ProtoTrialTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoTrialTask* ProtoTrialTask::default_instance_ = NULL;

ProtoTrialTask* ProtoTrialTask::New() const {
  return new ProtoTrialTask;
}

void ProtoTrialTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0;
    status_ = 0;
    award_exp_ = 0;
    if (has_money()) {
      if (money_ != NULL) money_->::ProtoMoney::Clear();
    }
    value_ = 0;
    final_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoTrialTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }
      
      // optional int32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_award_exp;
        break;
      }
      
      // optional int32 award_exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_award_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &award_exp_)));
          set_has_award_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_money;
        break;
      }
      
      // optional .ProtoMoney money = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_money:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_money()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_value;
        break;
      }
      
      // optional int32 value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_final_value;
        break;
      }
      
      // optional int32 final_value = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_final_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &final_value_)));
          set_has_final_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoTrialTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->task_id(), output);
  }
  
  // optional int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }
  
  // optional int32 award_exp = 3;
  if (has_award_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->award_exp(), output);
  }
  
  // optional .ProtoMoney money = 4;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->money(), output);
  }
  
  // optional int32 value = 5;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->value(), output);
  }
  
  // optional int32 final_value = 6;
  if (has_final_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->final_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoTrialTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->task_id(), target);
  }
  
  // optional int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }
  
  // optional int32 award_exp = 3;
  if (has_award_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->award_exp(), target);
  }
  
  // optional .ProtoMoney money = 4;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->money(), target);
  }
  
  // optional int32 value = 5;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->value(), target);
  }
  
  // optional int32 final_value = 6;
  if (has_final_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->final_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoTrialTask::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_id());
    }
    
    // optional int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // optional int32 award_exp = 3;
    if (has_award_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->award_exp());
    }
    
    // optional .ProtoMoney money = 4;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->money());
    }
    
    // optional int32 value = 5;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
    // optional int32 final_value = 6;
    if (has_final_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->final_value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoTrialTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoTrialTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoTrialTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoTrialTask::MergeFrom(const ProtoTrialTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_award_exp()) {
      set_award_exp(from.award_exp());
    }
    if (from.has_money()) {
      mutable_money()->::ProtoMoney::MergeFrom(from.money());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_final_value()) {
      set_final_value(from.final_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoTrialTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoTrialTask::CopyFrom(const ProtoTrialTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoTrialTask::IsInitialized() const {
  
  return true;
}

void ProtoTrialTask::Swap(ProtoTrialTask* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(status_, other->status_);
    std::swap(award_exp_, other->award_exp_);
    std::swap(money_, other->money_);
    std::swap(value_, other->value_);
    std::swap(final_value_, other->final_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoTrialTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoTrialTask_descriptor_;
  metadata.reflection = ProtoTrialTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoWeddingIcon::kWeddingReqIdFieldNumber;
const int ProtoWeddingIcon::kWeddingReqNameFieldNumber;
const int ProtoWeddingIcon::kWeddingPartnerIdFieldNumber;
const int ProtoWeddingIcon::kWeddingPartnerNameFieldNumber;
#endif  // !_MSC_VER

ProtoWeddingIcon::ProtoWeddingIcon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoWeddingIcon::InitAsDefaultInstance() {
}

ProtoWeddingIcon::ProtoWeddingIcon(const ProtoWeddingIcon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoWeddingIcon::SharedCtor() {
  _cached_size_ = 0;
  wedding_req_id_ = GOOGLE_LONGLONG(0);
  wedding_req_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wedding_partner_id_ = GOOGLE_LONGLONG(0);
  wedding_partner_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoWeddingIcon::~ProtoWeddingIcon() {
  SharedDtor();
}

void ProtoWeddingIcon::SharedDtor() {
  if (wedding_req_name_ != &::google::protobuf::internal::kEmptyString) {
    delete wedding_req_name_;
  }
  if (wedding_partner_name_ != &::google::protobuf::internal::kEmptyString) {
    delete wedding_partner_name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoWeddingIcon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoWeddingIcon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoWeddingIcon_descriptor_;
}

const ProtoWeddingIcon& ProtoWeddingIcon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoWeddingIcon* ProtoWeddingIcon::default_instance_ = NULL;

ProtoWeddingIcon* ProtoWeddingIcon::New() const {
  return new ProtoWeddingIcon;
}

void ProtoWeddingIcon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wedding_req_id_ = GOOGLE_LONGLONG(0);
    if (has_wedding_req_name()) {
      if (wedding_req_name_ != &::google::protobuf::internal::kEmptyString) {
        wedding_req_name_->clear();
      }
    }
    wedding_partner_id_ = GOOGLE_LONGLONG(0);
    if (has_wedding_partner_name()) {
      if (wedding_partner_name_ != &::google::protobuf::internal::kEmptyString) {
        wedding_partner_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoWeddingIcon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 wedding_req_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &wedding_req_id_)));
          set_has_wedding_req_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_wedding_req_name;
        break;
      }
      
      // optional string wedding_req_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wedding_req_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wedding_req_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->wedding_req_name().data(), this->wedding_req_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wedding_partner_id;
        break;
      }
      
      // optional int64 wedding_partner_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wedding_partner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &wedding_partner_id_)));
          set_has_wedding_partner_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_wedding_partner_name;
        break;
      }
      
      // optional string wedding_partner_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wedding_partner_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wedding_partner_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->wedding_partner_name().data(), this->wedding_partner_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoWeddingIcon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 wedding_req_id = 1;
  if (has_wedding_req_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->wedding_req_id(), output);
  }
  
  // optional string wedding_req_name = 2;
  if (has_wedding_req_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wedding_req_name().data(), this->wedding_req_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->wedding_req_name(), output);
  }
  
  // optional int64 wedding_partner_id = 3;
  if (has_wedding_partner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->wedding_partner_id(), output);
  }
  
  // optional string wedding_partner_name = 4;
  if (has_wedding_partner_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wedding_partner_name().data(), this->wedding_partner_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->wedding_partner_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoWeddingIcon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 wedding_req_id = 1;
  if (has_wedding_req_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->wedding_req_id(), target);
  }
  
  // optional string wedding_req_name = 2;
  if (has_wedding_req_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wedding_req_name().data(), this->wedding_req_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->wedding_req_name(), target);
  }
  
  // optional int64 wedding_partner_id = 3;
  if (has_wedding_partner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->wedding_partner_id(), target);
  }
  
  // optional string wedding_partner_name = 4;
  if (has_wedding_partner_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wedding_partner_name().data(), this->wedding_partner_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->wedding_partner_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoWeddingIcon::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 wedding_req_id = 1;
    if (has_wedding_req_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->wedding_req_id());
    }
    
    // optional string wedding_req_name = 2;
    if (has_wedding_req_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wedding_req_name());
    }
    
    // optional int64 wedding_partner_id = 3;
    if (has_wedding_partner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->wedding_partner_id());
    }
    
    // optional string wedding_partner_name = 4;
    if (has_wedding_partner_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wedding_partner_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoWeddingIcon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoWeddingIcon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoWeddingIcon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoWeddingIcon::MergeFrom(const ProtoWeddingIcon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wedding_req_id()) {
      set_wedding_req_id(from.wedding_req_id());
    }
    if (from.has_wedding_req_name()) {
      set_wedding_req_name(from.wedding_req_name());
    }
    if (from.has_wedding_partner_id()) {
      set_wedding_partner_id(from.wedding_partner_id());
    }
    if (from.has_wedding_partner_name()) {
      set_wedding_partner_name(from.wedding_partner_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoWeddingIcon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoWeddingIcon::CopyFrom(const ProtoWeddingIcon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoWeddingIcon::IsInitialized() const {
  
  return true;
}

void ProtoWeddingIcon::Swap(ProtoWeddingIcon* other) {
  if (other != this) {
    std::swap(wedding_req_id_, other->wedding_req_id_);
    std::swap(wedding_req_name_, other->wedding_req_name_);
    std::swap(wedding_partner_id_, other->wedding_partner_id_);
    std::swap(wedding_partner_name_, other->wedding_partner_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoWeddingIcon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoWeddingIcon_descriptor_;
  metadata.reflection = ProtoWeddingIcon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoShoutItem::kItemIdFieldNumber;
const int ProtoShoutItem::kItemNameFieldNumber;
const int ProtoShoutItem::kTypeFieldNumber;
const int ProtoShoutItem::kMsgFieldNumber;
const int ProtoShoutItem::kColorFieldNumber;
const int ProtoShoutItem::kItemNumFieldNumber;
#endif  // !_MSC_VER

ProtoShoutItem::ProtoShoutItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoShoutItem::InitAsDefaultInstance() {
}

ProtoShoutItem::ProtoShoutItem(const ProtoShoutItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoShoutItem::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0;
  item_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  color_ = 0;
  item_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoShoutItem::~ProtoShoutItem() {
  SharedDtor();
}

void ProtoShoutItem::SharedDtor() {
  if (item_name_ != &::google::protobuf::internal::kEmptyString) {
    delete item_name_;
  }
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void ProtoShoutItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoShoutItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoShoutItem_descriptor_;
}

const ProtoShoutItem& ProtoShoutItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoShoutItem* ProtoShoutItem::default_instance_ = NULL;

ProtoShoutItem* ProtoShoutItem::New() const {
  return new ProtoShoutItem;
}

void ProtoShoutItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0;
    if (has_item_name()) {
      if (item_name_ != &::google::protobuf::internal::kEmptyString) {
        item_name_->clear();
      }
    }
    type_ = 0;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    color_ = 0;
    item_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoShoutItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_name;
        break;
      }
      
      // optional string item_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->item_name().data(), this->item_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_msg;
        break;
      }
      
      // optional bytes msg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_color;
        break;
      }
      
      // optional int32 color = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_item_num;
        break;
      }
      
      // optional int32 item_num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_num_)));
          set_has_item_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoShoutItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_id(), output);
  }
  
  // optional string item_name = 2;
  if (has_item_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->item_name().data(), this->item_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->item_name(), output);
  }
  
  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }
  
  // optional bytes msg = 4;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->msg(), output);
  }
  
  // optional int32 color = 5;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->color(), output);
  }
  
  // optional int32 item_num = 6;
  if (has_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->item_num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoShoutItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_id(), target);
  }
  
  // optional string item_name = 2;
  if (has_item_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->item_name().data(), this->item_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->item_name(), target);
  }
  
  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }
  
  // optional bytes msg = 4;
  if (has_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->msg(), target);
  }
  
  // optional int32 color = 5;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->color(), target);
  }
  
  // optional int32 item_num = 6;
  if (has_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->item_num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoShoutItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }
    
    // optional string item_name = 2;
    if (has_item_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->item_name());
    }
    
    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional bytes msg = 4;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg());
    }
    
    // optional int32 color = 5;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }
    
    // optional int32 item_num = 6;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_num());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoShoutItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoShoutItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoShoutItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoShoutItem::MergeFrom(const ProtoShoutItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_name()) {
      set_item_name(from.item_name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_item_num()) {
      set_item_num(from.item_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoShoutItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoShoutItem::CopyFrom(const ProtoShoutItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoShoutItem::IsInitialized() const {
  
  return true;
}

void ProtoShoutItem::Swap(ProtoShoutItem* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(item_name_, other->item_name_);
    std::swap(type_, other->type_);
    std::swap(msg_, other->msg_);
    std::swap(color_, other->color_);
    std::swap(item_num_, other->item_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoShoutItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoShoutItem_descriptor_;
  metadata.reflection = ProtoShoutItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PActPanelInfo::kActIndexFieldNumber;
const int PActPanelInfo::kFirstTypeFieldNumber;
const int PActPanelInfo::kSecondTypeFieldNumber;
const int PActPanelInfo::kTitleFieldNumber;
const int PActPanelInfo::kContentFieldNumber;
const int PActPanelInfo::kStartTickFieldNumber;
const int PActPanelInfo::kEndTickFieldNumber;
const int PActPanelInfo::kRewardCountFieldNumber;
const int PActPanelInfo::kPriorityFieldNumber;
const int PActPanelInfo::kTimesFieldNumber;
#endif  // !_MSC_VER

PActPanelInfo::PActPanelInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PActPanelInfo::InitAsDefaultInstance() {
}

PActPanelInfo::PActPanelInfo(const PActPanelInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PActPanelInfo::SharedCtor() {
  _cached_size_ = 0;
  act_index_ = 0;
  first_type_ = 0;
  second_type_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  start_tick_ = GOOGLE_LONGLONG(0);
  end_tick_ = GOOGLE_LONGLONG(0);
  reward_count_ = 0;
  priority_ = 0;
  times_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PActPanelInfo::~PActPanelInfo() {
  SharedDtor();
}

void PActPanelInfo::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void PActPanelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PActPanelInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PActPanelInfo_descriptor_;
}

const PActPanelInfo& PActPanelInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

PActPanelInfo* PActPanelInfo::default_instance_ = NULL;

PActPanelInfo* PActPanelInfo::New() const {
  return new PActPanelInfo;
}

void PActPanelInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    act_index_ = 0;
    first_type_ = 0;
    second_type_ = 0;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    start_tick_ = GOOGLE_LONGLONG(0);
    end_tick_ = GOOGLE_LONGLONG(0);
    reward_count_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    priority_ = 0;
    times_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PActPanelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 act_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &act_index_)));
          set_has_act_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_first_type;
        break;
      }
      
      // optional int32 first_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_type_)));
          set_has_first_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_second_type;
        break;
      }
      
      // optional int32 second_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_second_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &second_type_)));
          set_has_second_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_title;
        break;
      }
      
      // optional string title = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_content;
        break;
      }
      
      // optional string content = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_start_tick;
        break;
      }
      
      // optional int64 start_tick = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_tick_)));
          set_has_start_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_end_tick;
        break;
      }
      
      // optional int64 end_tick = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_tick_)));
          set_has_end_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_reward_count;
        break;
      }
      
      // optional int32 reward_count = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_count_)));
          set_has_reward_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_priority;
        break;
      }
      
      // optional int32 priority = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_times;
        break;
      }
      
      // optional int64 times = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PActPanelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 act_index = 1;
  if (has_act_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->act_index(), output);
  }
  
  // optional int32 first_type = 2;
  if (has_first_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->first_type(), output);
  }
  
  // optional int32 second_type = 3;
  if (has_second_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->second_type(), output);
  }
  
  // optional string title = 4;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->title(), output);
  }
  
  // optional string content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->content(), output);
  }
  
  // optional int64 start_tick = 6;
  if (has_start_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->start_tick(), output);
  }
  
  // optional int64 end_tick = 7;
  if (has_end_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->end_tick(), output);
  }
  
  // optional int32 reward_count = 8;
  if (has_reward_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->reward_count(), output);
  }
  
  // optional int32 priority = 9;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->priority(), output);
  }
  
  // optional int64 times = 10;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->times(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PActPanelInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 act_index = 1;
  if (has_act_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->act_index(), target);
  }
  
  // optional int32 first_type = 2;
  if (has_first_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->first_type(), target);
  }
  
  // optional int32 second_type = 3;
  if (has_second_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->second_type(), target);
  }
  
  // optional string title = 4;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->title(), target);
  }
  
  // optional string content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->content(), target);
  }
  
  // optional int64 start_tick = 6;
  if (has_start_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->start_tick(), target);
  }
  
  // optional int64 end_tick = 7;
  if (has_end_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->end_tick(), target);
  }
  
  // optional int32 reward_count = 8;
  if (has_reward_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->reward_count(), target);
  }
  
  // optional int32 priority = 9;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->priority(), target);
  }
  
  // optional int64 times = 10;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->times(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PActPanelInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 act_index = 1;
    if (has_act_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->act_index());
    }
    
    // optional int32 first_type = 2;
    if (has_first_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->first_type());
    }
    
    // optional int32 second_type = 3;
    if (has_second_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->second_type());
    }
    
    // optional string title = 4;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }
    
    // optional string content = 5;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
    // optional int64 start_tick = 6;
    if (has_start_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_tick());
    }
    
    // optional int64 end_tick = 7;
    if (has_end_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_tick());
    }
    
    // optional int32 reward_count = 8;
    if (has_reward_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_count());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 priority = 9;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority());
    }
    
    // optional int64 times = 10;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->times());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PActPanelInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PActPanelInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PActPanelInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PActPanelInfo::MergeFrom(const PActPanelInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_act_index()) {
      set_act_index(from.act_index());
    }
    if (from.has_first_type()) {
      set_first_type(from.first_type());
    }
    if (from.has_second_type()) {
      set_second_type(from.second_type());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_start_tick()) {
      set_start_tick(from.start_tick());
    }
    if (from.has_end_tick()) {
      set_end_tick(from.end_tick());
    }
    if (from.has_reward_count()) {
      set_reward_count(from.reward_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PActPanelInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PActPanelInfo::CopyFrom(const PActPanelInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PActPanelInfo::IsInitialized() const {
  
  return true;
}

void PActPanelInfo::Swap(PActPanelInfo* other) {
  if (other != this) {
    std::swap(act_index_, other->act_index_);
    std::swap(first_type_, other->first_type_);
    std::swap(second_type_, other->second_type_);
    std::swap(title_, other->title_);
    std::swap(content_, other->content_);
    std::swap(start_tick_, other->start_tick_);
    std::swap(end_tick_, other->end_tick_);
    std::swap(reward_count_, other->reward_count_);
    std::swap(priority_, other->priority_);
    std::swap(times_, other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PActPanelInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PActPanelInfo_descriptor_;
  metadata.reflection = PActPanelInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoLeagueStoreApply::kRoleNameFieldNumber;
const int ProtoLeagueStoreApply::kRoleLevelFieldNumber;
const int ProtoLeagueStoreApply::kContriFieldNumber;
const int ProtoLeagueStoreApply::kItemIdFieldNumber;
const int ProtoLeagueStoreApply::kItemNumFieldNumber;
const int ProtoLeagueStoreApply::kApplyIdFieldNumber;
const int ProtoLeagueStoreApply::kItemFieldNumber;
#endif  // !_MSC_VER

ProtoLeagueStoreApply::ProtoLeagueStoreApply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoLeagueStoreApply::InitAsDefaultInstance() {
  item_ = const_cast< ::ProtoItem*>(&::ProtoItem::default_instance());
}

ProtoLeagueStoreApply::ProtoLeagueStoreApply(const ProtoLeagueStoreApply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoLeagueStoreApply::SharedCtor() {
  _cached_size_ = 0;
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_level_ = 0;
  contri_ = 0;
  item_id_ = 0;
  item_num_ = 0;
  apply_id_ = GOOGLE_LONGLONG(0);
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoLeagueStoreApply::~ProtoLeagueStoreApply() {
  SharedDtor();
}

void ProtoLeagueStoreApply::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
    delete item_;
  }
}

void ProtoLeagueStoreApply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoLeagueStoreApply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoLeagueStoreApply_descriptor_;
}

const ProtoLeagueStoreApply& ProtoLeagueStoreApply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoLeagueStoreApply* ProtoLeagueStoreApply::default_instance_ = NULL;

ProtoLeagueStoreApply* ProtoLeagueStoreApply::New() const {
  return new ProtoLeagueStoreApply;
}

void ProtoLeagueStoreApply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    role_level_ = 0;
    contri_ = 0;
    item_id_ = 0;
    item_num_ = 0;
    apply_id_ = GOOGLE_LONGLONG(0);
    if (has_item()) {
      if (item_ != NULL) item_->::ProtoItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoLeagueStoreApply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string role_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_level;
        break;
      }
      
      // optional int32 role_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_level_)));
          set_has_role_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_contri;
        break;
      }
      
      // optional int32 contri = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contri:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contri_)));
          set_has_contri();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item_id;
        break;
      }
      
      // optional int32 item_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_item_num;
        break;
      }
      
      // optional int32 item_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_num_)));
          set_has_item_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_apply_id;
        break;
      }
      
      // optional int64 apply_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &apply_id_)));
          set_has_apply_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_item;
        break;
      }
      
      // optional .ProtoItem item = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoLeagueStoreApply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string role_name = 1;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->role_name(), output);
  }
  
  // optional int32 role_level = 2;
  if (has_role_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->role_level(), output);
  }
  
  // optional int32 contri = 3;
  if (has_contri()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->contri(), output);
  }
  
  // optional int32 item_id = 4;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->item_id(), output);
  }
  
  // optional int32 item_num = 5;
  if (has_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->item_num(), output);
  }
  
  // optional int64 apply_id = 6;
  if (has_apply_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->apply_id(), output);
  }
  
  // optional .ProtoItem item = 7;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->item(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoLeagueStoreApply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string role_name = 1;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->role_name(), target);
  }
  
  // optional int32 role_level = 2;
  if (has_role_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->role_level(), target);
  }
  
  // optional int32 contri = 3;
  if (has_contri()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->contri(), target);
  }
  
  // optional int32 item_id = 4;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->item_id(), target);
  }
  
  // optional int32 item_num = 5;
  if (has_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->item_num(), target);
  }
  
  // optional int64 apply_id = 6;
  if (has_apply_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->apply_id(), target);
  }
  
  // optional .ProtoItem item = 7;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->item(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoLeagueStoreApply::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string role_name = 1;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }
    
    // optional int32 role_level = 2;
    if (has_role_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_level());
    }
    
    // optional int32 contri = 3;
    if (has_contri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contri());
    }
    
    // optional int32 item_id = 4;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }
    
    // optional int32 item_num = 5;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_num());
    }
    
    // optional int64 apply_id = 6;
    if (has_apply_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->apply_id());
    }
    
    // optional .ProtoItem item = 7;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoLeagueStoreApply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoLeagueStoreApply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoLeagueStoreApply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoLeagueStoreApply::MergeFrom(const ProtoLeagueStoreApply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_role_level()) {
      set_role_level(from.role_level());
    }
    if (from.has_contri()) {
      set_contri(from.contri());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_num()) {
      set_item_num(from.item_num());
    }
    if (from.has_apply_id()) {
      set_apply_id(from.apply_id());
    }
    if (from.has_item()) {
      mutable_item()->::ProtoItem::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoLeagueStoreApply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoLeagueStoreApply::CopyFrom(const ProtoLeagueStoreApply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoLeagueStoreApply::IsInitialized() const {
  
  return true;
}

void ProtoLeagueStoreApply::Swap(ProtoLeagueStoreApply* other) {
  if (other != this) {
    std::swap(role_name_, other->role_name_);
    std::swap(role_level_, other->role_level_);
    std::swap(contri_, other->contri_);
    std::swap(item_id_, other->item_id_);
    std::swap(item_num_, other->item_num_);
    std::swap(apply_id_, other->apply_id_);
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoLeagueStoreApply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoLeagueStoreApply_descriptor_;
  metadata.reflection = ProtoLeagueStoreApply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoLeagueStoreApplyHis::kExecTickFieldNumber;
const int ProtoLeagueStoreApplyHis::kExecNameFieldNumber;
const int ProtoLeagueStoreApplyHis::kItemIdFieldNumber;
const int ProtoLeagueStoreApplyHis::kItemNumFieldNumber;
const int ProtoLeagueStoreApplyHis::kCheckerNameFieldNumber;
const int ProtoLeagueStoreApplyHis::kExecFieldNumber;
#endif  // !_MSC_VER

ProtoLeagueStoreApplyHis::ProtoLeagueStoreApplyHis()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoLeagueStoreApplyHis::InitAsDefaultInstance() {
}

ProtoLeagueStoreApplyHis::ProtoLeagueStoreApplyHis(const ProtoLeagueStoreApplyHis& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoLeagueStoreApplyHis::SharedCtor() {
  _cached_size_ = 0;
  exec_tick_ = GOOGLE_LONGLONG(0);
  exec_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  item_id_ = 0;
  item_num_ = 0;
  checker_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exec_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoLeagueStoreApplyHis::~ProtoLeagueStoreApplyHis() {
  SharedDtor();
}

void ProtoLeagueStoreApplyHis::SharedDtor() {
  if (exec_name_ != &::google::protobuf::internal::kEmptyString) {
    delete exec_name_;
  }
  if (checker_name_ != &::google::protobuf::internal::kEmptyString) {
    delete checker_name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoLeagueStoreApplyHis::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoLeagueStoreApplyHis::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoLeagueStoreApplyHis_descriptor_;
}

const ProtoLeagueStoreApplyHis& ProtoLeagueStoreApplyHis::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoLeagueStoreApplyHis* ProtoLeagueStoreApplyHis::default_instance_ = NULL;

ProtoLeagueStoreApplyHis* ProtoLeagueStoreApplyHis::New() const {
  return new ProtoLeagueStoreApplyHis;
}

void ProtoLeagueStoreApplyHis::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exec_tick_ = GOOGLE_LONGLONG(0);
    if (has_exec_name()) {
      if (exec_name_ != &::google::protobuf::internal::kEmptyString) {
        exec_name_->clear();
      }
    }
    item_id_ = 0;
    item_num_ = 0;
    if (has_checker_name()) {
      if (checker_name_ != &::google::protobuf::internal::kEmptyString) {
        checker_name_->clear();
      }
    }
    exec_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoLeagueStoreApplyHis::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 exec_tick = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exec_tick_)));
          set_has_exec_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_exec_name;
        break;
      }
      
      // optional string exec_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exec_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exec_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exec_name().data(), this->exec_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_id;
        break;
      }
      
      // optional int32 item_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item_num;
        break;
      }
      
      // optional int32 item_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_num_)));
          set_has_item_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_checker_name;
        break;
      }
      
      // optional string checker_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_checker_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_checker_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->checker_name().data(), this->checker_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_exec;
        break;
      }
      
      // optional int32 exec = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exec_)));
          set_has_exec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoLeagueStoreApplyHis::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 exec_tick = 1;
  if (has_exec_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->exec_tick(), output);
  }
  
  // optional string exec_name = 2;
  if (has_exec_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exec_name().data(), this->exec_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->exec_name(), output);
  }
  
  // optional int32 item_id = 3;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->item_id(), output);
  }
  
  // optional int32 item_num = 4;
  if (has_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->item_num(), output);
  }
  
  // optional string checker_name = 5;
  if (has_checker_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->checker_name().data(), this->checker_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->checker_name(), output);
  }
  
  // optional int32 exec = 6;
  if (has_exec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->exec(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoLeagueStoreApplyHis::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 exec_tick = 1;
  if (has_exec_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->exec_tick(), target);
  }
  
  // optional string exec_name = 2;
  if (has_exec_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exec_name().data(), this->exec_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exec_name(), target);
  }
  
  // optional int32 item_id = 3;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->item_id(), target);
  }
  
  // optional int32 item_num = 4;
  if (has_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->item_num(), target);
  }
  
  // optional string checker_name = 5;
  if (has_checker_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->checker_name().data(), this->checker_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->checker_name(), target);
  }
  
  // optional int32 exec = 6;
  if (has_exec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->exec(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoLeagueStoreApplyHis::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 exec_tick = 1;
    if (has_exec_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exec_tick());
    }
    
    // optional string exec_name = 2;
    if (has_exec_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exec_name());
    }
    
    // optional int32 item_id = 3;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }
    
    // optional int32 item_num = 4;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_num());
    }
    
    // optional string checker_name = 5;
    if (has_checker_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->checker_name());
    }
    
    // optional int32 exec = 6;
    if (has_exec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exec());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoLeagueStoreApplyHis::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoLeagueStoreApplyHis* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoLeagueStoreApplyHis*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoLeagueStoreApplyHis::MergeFrom(const ProtoLeagueStoreApplyHis& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exec_tick()) {
      set_exec_tick(from.exec_tick());
    }
    if (from.has_exec_name()) {
      set_exec_name(from.exec_name());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_num()) {
      set_item_num(from.item_num());
    }
    if (from.has_checker_name()) {
      set_checker_name(from.checker_name());
    }
    if (from.has_exec()) {
      set_exec(from.exec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoLeagueStoreApplyHis::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoLeagueStoreApplyHis::CopyFrom(const ProtoLeagueStoreApplyHis& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoLeagueStoreApplyHis::IsInitialized() const {
  
  return true;
}

void ProtoLeagueStoreApplyHis::Swap(ProtoLeagueStoreApplyHis* other) {
  if (other != this) {
    std::swap(exec_tick_, other->exec_tick_);
    std::swap(exec_name_, other->exec_name_);
    std::swap(item_id_, other->item_id_);
    std::swap(item_num_, other->item_num_);
    std::swap(checker_name_, other->checker_name_);
    std::swap(exec_, other->exec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoLeagueStoreApplyHis::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoLeagueStoreApplyHis_descriptor_;
  metadata.reflection = ProtoLeagueStoreApplyHis_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoActRewardItem::kIndexFieldNumber;
const int ProtoActRewardItem::kCountFieldNumber;
#endif  // !_MSC_VER

ProtoActRewardItem::ProtoActRewardItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoActRewardItem::InitAsDefaultInstance() {
}

ProtoActRewardItem::ProtoActRewardItem(const ProtoActRewardItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoActRewardItem::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoActRewardItem::~ProtoActRewardItem() {
  SharedDtor();
}

void ProtoActRewardItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoActRewardItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoActRewardItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoActRewardItem_descriptor_;
}

const ProtoActRewardItem& ProtoActRewardItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoActRewardItem* ProtoActRewardItem::default_instance_ = NULL;

ProtoActRewardItem* ProtoActRewardItem::New() const {
  return new ProtoActRewardItem;
}

void ProtoActRewardItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoActRewardItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoActRewardItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }
  
  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoActRewardItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }
  
  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoActRewardItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoActRewardItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoActRewardItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoActRewardItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoActRewardItem::MergeFrom(const ProtoActRewardItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoActRewardItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoActRewardItem::CopyFrom(const ProtoActRewardItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoActRewardItem::IsInitialized() const {
  
  return true;
}

void ProtoActRewardItem::Swap(ProtoActRewardItem* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoActRewardItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoActRewardItem_descriptor_;
  metadata.reflection = ProtoActRewardItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoActRoleReward::kDrawedSetFieldNumber;
const int ProtoActRoleReward::kRoleIdFieldNumber;
const int ProtoActRoleReward::kCarrerFieldNumber;
#endif  // !_MSC_VER

ProtoActRoleReward::ProtoActRoleReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoActRoleReward::InitAsDefaultInstance() {
}

ProtoActRoleReward::ProtoActRoleReward(const ProtoActRoleReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoActRoleReward::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  carrer_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoActRoleReward::~ProtoActRoleReward() {
  SharedDtor();
}

void ProtoActRoleReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoActRoleReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoActRoleReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoActRoleReward_descriptor_;
}

const ProtoActRoleReward& ProtoActRoleReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoActRoleReward* ProtoActRoleReward::default_instance_ = NULL;

ProtoActRoleReward* ProtoActRoleReward::New() const {
  return new ProtoActRoleReward;
}

void ProtoActRoleReward::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    role_id_ = GOOGLE_LONGLONG(0);
    carrer_ = 0;
  }
  drawed_set_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoActRoleReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoActRewardItem drawed_set = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drawed_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_drawed_set()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_drawed_set;
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }
      
      // optional int64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_carrer;
        break;
      }
      
      // optional int32 carrer = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carrer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &carrer_)));
          set_has_carrer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoActRoleReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoActRewardItem drawed_set = 1;
  for (int i = 0; i < this->drawed_set_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->drawed_set(i), output);
  }
  
  // optional int64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->role_id(), output);
  }
  
  // optional int32 carrer = 3;
  if (has_carrer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->carrer(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoActRoleReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoActRewardItem drawed_set = 1;
  for (int i = 0; i < this->drawed_set_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->drawed_set(i), target);
  }
  
  // optional int64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->role_id(), target);
  }
  
  // optional int32 carrer = 3;
  if (has_carrer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->carrer(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoActRoleReward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional int32 carrer = 3;
    if (has_carrer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->carrer());
    }
    
  }
  // repeated .ProtoActRewardItem drawed_set = 1;
  total_size += 1 * this->drawed_set_size();
  for (int i = 0; i < this->drawed_set_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->drawed_set(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoActRoleReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoActRoleReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoActRoleReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoActRoleReward::MergeFrom(const ProtoActRoleReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  drawed_set_.MergeFrom(from.drawed_set_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_carrer()) {
      set_carrer(from.carrer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoActRoleReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoActRoleReward::CopyFrom(const ProtoActRoleReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoActRoleReward::IsInitialized() const {
  
  return true;
}

void ProtoActRoleReward::Swap(ProtoActRoleReward* other) {
  if (other != this) {
    drawed_set_.Swap(&other->drawed_set_);
    std::swap(role_id_, other->role_id_);
    std::swap(carrer_, other->carrer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoActRoleReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoActRoleReward_descriptor_;
  metadata.reflection = ProtoActRoleReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoPairLongString::kDataInt64FieldNumber;
const int ProtoPairLongString::kDataStringFieldNumber;
const int ProtoPairLongString::kLeagueFieldNumber;
#endif  // !_MSC_VER

ProtoPairLongString::ProtoPairLongString()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoPairLongString::InitAsDefaultInstance() {
}

ProtoPairLongString::ProtoPairLongString(const ProtoPairLongString& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoPairLongString::SharedCtor() {
  _cached_size_ = 0;
  data_int64_ = GOOGLE_LONGLONG(0);
  data_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  league_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoPairLongString::~ProtoPairLongString() {
  SharedDtor();
}

void ProtoPairLongString::SharedDtor() {
  if (data_string_ != &::google::protobuf::internal::kEmptyString) {
    delete data_string_;
  }
  if (league_ != &::google::protobuf::internal::kEmptyString) {
    delete league_;
  }
  if (this != default_instance_) {
  }
}

void ProtoPairLongString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoPairLongString::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoPairLongString_descriptor_;
}

const ProtoPairLongString& ProtoPairLongString::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoPairLongString* ProtoPairLongString::default_instance_ = NULL;

ProtoPairLongString* ProtoPairLongString::New() const {
  return new ProtoPairLongString;
}

void ProtoPairLongString::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    data_int64_ = GOOGLE_LONGLONG(0);
    if (has_data_string()) {
      if (data_string_ != &::google::protobuf::internal::kEmptyString) {
        data_string_->clear();
      }
    }
    if (has_league()) {
      if (league_ != &::google::protobuf::internal::kEmptyString) {
        league_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoPairLongString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 data_int64 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &data_int64_)));
          set_has_data_int64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data_string;
        break;
      }
      
      // optional string data_string = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data_string().data(), this->data_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_league;
        break;
      }
      
      // optional string league = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_league:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_league()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->league().data(), this->league().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoPairLongString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 data_int64 = 1;
  if (has_data_int64()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->data_int64(), output);
  }
  
  // optional string data_string = 2;
  if (has_data_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data_string().data(), this->data_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->data_string(), output);
  }
  
  // optional string league = 3;
  if (has_league()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->league().data(), this->league().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->league(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoPairLongString::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 data_int64 = 1;
  if (has_data_int64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->data_int64(), target);
  }
  
  // optional string data_string = 2;
  if (has_data_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data_string().data(), this->data_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->data_string(), target);
  }
  
  // optional string league = 3;
  if (has_league()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->league().data(), this->league().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->league(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoPairLongString::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 data_int64 = 1;
    if (has_data_int64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->data_int64());
    }
    
    // optional string data_string = 2;
    if (has_data_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data_string());
    }
    
    // optional string league = 3;
    if (has_league()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->league());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoPairLongString::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoPairLongString* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoPairLongString*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoPairLongString::MergeFrom(const ProtoPairLongString& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data_int64()) {
      set_data_int64(from.data_int64());
    }
    if (from.has_data_string()) {
      set_data_string(from.data_string());
    }
    if (from.has_league()) {
      set_league(from.league());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoPairLongString::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoPairLongString::CopyFrom(const ProtoPairLongString& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoPairLongString::IsInitialized() const {
  
  return true;
}

void ProtoPairLongString::Swap(ProtoPairLongString* other) {
  if (other != this) {
    std::swap(data_int64_, other->data_int64_);
    std::swap(data_string_, other->data_string_);
    std::swap(league_, other->league_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoPairLongString::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoPairLongString_descriptor_;
  metadata.reflection = ProtoPairLongString_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoPairLong::kObjIdFieldNumber;
const int ProtoPairLong::kObjValueFieldNumber;
#endif  // !_MSC_VER

ProtoPairLong::ProtoPairLong()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoPairLong::InitAsDefaultInstance() {
}

ProtoPairLong::ProtoPairLong(const ProtoPairLong& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoPairLong::SharedCtor() {
  _cached_size_ = 0;
  obj_id_ = GOOGLE_LONGLONG(0);
  obj_value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoPairLong::~ProtoPairLong() {
  SharedDtor();
}

void ProtoPairLong::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoPairLong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoPairLong::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoPairLong_descriptor_;
}

const ProtoPairLong& ProtoPairLong::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoPairLong* ProtoPairLong::default_instance_ = NULL;

ProtoPairLong* ProtoPairLong::New() const {
  return new ProtoPairLong;
}

void ProtoPairLong::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    obj_id_ = GOOGLE_LONGLONG(0);
    obj_value_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoPairLong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 obj_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &obj_id_)));
          set_has_obj_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_obj_value;
        break;
      }
      
      // optional int64 obj_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_obj_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &obj_value_)));
          set_has_obj_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoPairLong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 obj_id = 1;
  if (has_obj_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->obj_id(), output);
  }
  
  // optional int64 obj_value = 2;
  if (has_obj_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->obj_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoPairLong::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 obj_id = 1;
  if (has_obj_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->obj_id(), target);
  }
  
  // optional int64 obj_value = 2;
  if (has_obj_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->obj_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoPairLong::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 obj_id = 1;
    if (has_obj_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->obj_id());
    }
    
    // optional int64 obj_value = 2;
    if (has_obj_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->obj_value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoPairLong::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoPairLong* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoPairLong*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoPairLong::MergeFrom(const ProtoPairLong& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_obj_id()) {
      set_obj_id(from.obj_id());
    }
    if (from.has_obj_value()) {
      set_obj_value(from.obj_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoPairLong::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoPairLong::CopyFrom(const ProtoPairLong& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoPairLong::IsInitialized() const {
  
  return true;
}

void ProtoPairLong::Swap(ProtoPairLong* other) {
  if (other != this) {
    std::swap(obj_id_, other->obj_id_);
    std::swap(obj_value_, other->obj_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoPairLong::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoPairLong_descriptor_;
  metadata.reflection = ProtoPairLong_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoActRewardNotify::kPriorityFieldNumber;
const int ProtoActRewardNotify::kActIndexFieldNumber;
#endif  // !_MSC_VER

ProtoActRewardNotify::ProtoActRewardNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoActRewardNotify::InitAsDefaultInstance() {
}

ProtoActRewardNotify::ProtoActRewardNotify(const ProtoActRewardNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoActRewardNotify::SharedCtor() {
  _cached_size_ = 0;
  priority_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoActRewardNotify::~ProtoActRewardNotify() {
  SharedDtor();
}

void ProtoActRewardNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoActRewardNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoActRewardNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoActRewardNotify_descriptor_;
}

const ProtoActRewardNotify& ProtoActRewardNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoActRewardNotify* ProtoActRewardNotify::default_instance_ = NULL;

ProtoActRewardNotify* ProtoActRewardNotify::New() const {
  return new ProtoActRewardNotify;
}

void ProtoActRewardNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    priority_ = 0;
  }
  act_index_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoActRewardNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 priority = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_act_index;
        break;
      }
      
      // repeated int32 act_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_act_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_act_index())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_act_index())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_act_index;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoActRewardNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 priority = 1;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->priority(), output);
  }
  
  // repeated int32 act_index = 2;
  for (int i = 0; i < this->act_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->act_index(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoActRewardNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 priority = 1;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->priority(), target);
  }
  
  // repeated int32 act_index = 2;
  for (int i = 0; i < this->act_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->act_index(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoActRewardNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 priority = 1;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority());
    }
    
  }
  // repeated int32 act_index = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->act_index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->act_index(i));
    }
    total_size += 1 * this->act_index_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoActRewardNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoActRewardNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoActRewardNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoActRewardNotify::MergeFrom(const ProtoActRewardNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  act_index_.MergeFrom(from.act_index_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_priority()) {
      set_priority(from.priority());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoActRewardNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoActRewardNotify::CopyFrom(const ProtoActRewardNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoActRewardNotify::IsInitialized() const {
  
  return true;
}

void ProtoActRewardNotify::Swap(ProtoActRewardNotify* other) {
  if (other != this) {
    std::swap(priority_, other->priority_);
    act_index_.Swap(&other->act_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoActRewardNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoActRewardNotify_descriptor_;
  metadata.reflection = ProtoActRewardNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoNearRole::kRoleIdFieldNumber;
const int ProtoNearRole::kRoleNameFieldNumber;
const int ProtoNearRole::kLevelFieldNumber;
const int ProtoNearRole::kLocationFieldNumber;
const int ProtoNearRole::kNameColorFieldNumber;
#endif  // !_MSC_VER

ProtoNearRole::ProtoNearRole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoNearRole::InitAsDefaultInstance() {
  location_ = const_cast< ::ProtoCoord*>(&::ProtoCoord::default_instance());
}

ProtoNearRole::ProtoNearRole(const ProtoNearRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoNearRole::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  location_ = NULL;
  name_color_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoNearRole::~ProtoNearRole() {
  SharedDtor();
}

void ProtoNearRole::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
    delete location_;
  }
}

void ProtoNearRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoNearRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoNearRole_descriptor_;
}

const ProtoNearRole& ProtoNearRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoNearRole* ProtoNearRole::default_instance_ = NULL;

ProtoNearRole* ProtoNearRole::New() const {
  return new ProtoNearRole;
}

void ProtoNearRole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_LONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    level_ = 0;
    if (has_location()) {
      if (location_ != NULL) location_->::ProtoCoord::Clear();
    }
    name_color_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoNearRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_name;
        break;
      }
      
      // optional string role_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }
      
      // optional int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_location;
        break;
      }
      
      // optional .ProtoCoord location = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_name_color;
        break;
      }
      
      // optional int32 name_color = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_name_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &name_color_)));
          set_has_name_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoNearRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_id(), output);
  }
  
  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->role_name(), output);
  }
  
  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }
  
  // optional .ProtoCoord location = 4;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->location(), output);
  }
  
  // optional int32 name_color = 5;
  if (has_name_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->name_color(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoNearRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_id(), target);
  }
  
  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }
  
  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }
  
  // optional .ProtoCoord location = 4;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->location(), target);
  }
  
  // optional int32 name_color = 5;
  if (has_name_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->name_color(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoNearRole::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional string role_name = 2;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }
    
    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional .ProtoCoord location = 4;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location());
    }
    
    // optional int32 name_color = 5;
    if (has_name_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->name_color());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoNearRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoNearRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoNearRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoNearRole::MergeFrom(const ProtoNearRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_location()) {
      mutable_location()->::ProtoCoord::MergeFrom(from.location());
    }
    if (from.has_name_color()) {
      set_name_color(from.name_color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoNearRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoNearRole::CopyFrom(const ProtoNearRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoNearRole::IsInitialized() const {
  
  return true;
}

void ProtoNearRole::Swap(ProtoNearRole* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(level_, other->level_);
    std::swap(location_, other->location_);
    std::swap(name_color_, other->name_color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoNearRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoNearRole_descriptor_;
  metadata.reflection = ProtoNearRole_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoTravelTeam::kTeamIdFieldNumber;
const int ProtoTravelTeam::kTeamNameFieldNumber;
const int ProtoTravelTeam::kLeaderIdFieldNumber;
const int ProtoTravelTeam::kLeaderNameFieldNumber;
const int ProtoTravelTeam::kTeamerAmountFieldNumber;
const int ProtoTravelTeam::kTeamForceFieldNumber;
const int ProtoTravelTeam::kSceneIdFieldNumber;
const int ProtoTravelTeam::kSceretFlagFieldNumber;
const int ProtoTravelTeam::kLimitForceFieldNumber;
const int ProtoTravelTeam::kAutoStartFieldNumber;
const int ProtoTravelTeam::kStartFbFieldNumber;
const int ProtoTravelTeam::kTeamerIdFieldNumber;
const int ProtoTravelTeam::kIsApplyFieldNumber;
#endif  // !_MSC_VER

ProtoTravelTeam::ProtoTravelTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoTravelTeam::InitAsDefaultInstance() {
}

ProtoTravelTeam::ProtoTravelTeam(const ProtoTravelTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoTravelTeam::SharedCtor() {
  _cached_size_ = 0;
  team_id_ = GOOGLE_LONGLONG(0);
  team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leader_id_ = GOOGLE_LONGLONG(0);
  leader_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  teamer_amount_ = 0;
  team_force_ = 0;
  scene_id_ = 0;
  sceret_flag_ = 0;
  limit_force_ = 0;
  auto_start_ = 0;
  start_fb_ = 0;
  is_apply_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoTravelTeam::~ProtoTravelTeam() {
  SharedDtor();
}

void ProtoTravelTeam::SharedDtor() {
  if (team_name_ != &::google::protobuf::internal::kEmptyString) {
    delete team_name_;
  }
  if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
    delete leader_name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoTravelTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoTravelTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoTravelTeam_descriptor_;
}

const ProtoTravelTeam& ProtoTravelTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoTravelTeam* ProtoTravelTeam::default_instance_ = NULL;

ProtoTravelTeam* ProtoTravelTeam::New() const {
  return new ProtoTravelTeam;
}

void ProtoTravelTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    team_id_ = GOOGLE_LONGLONG(0);
    if (has_team_name()) {
      if (team_name_ != &::google::protobuf::internal::kEmptyString) {
        team_name_->clear();
      }
    }
    leader_id_ = GOOGLE_LONGLONG(0);
    if (has_leader_name()) {
      if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
        leader_name_->clear();
      }
    }
    teamer_amount_ = 0;
    team_force_ = 0;
    scene_id_ = 0;
    sceret_flag_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    limit_force_ = 0;
    auto_start_ = 0;
    start_fb_ = 0;
    is_apply_ = 0;
  }
  teamer_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoTravelTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 team_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_team_name;
        break;
      }
      
      // optional string team_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_leader_id;
        break;
      }
      
      // optional int64 leader_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &leader_id_)));
          set_has_leader_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_leader_name;
        break;
      }
      
      // optional string leader_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leader_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leader_name().data(), this->leader_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_teamer_amount;
        break;
      }
      
      // optional int32 teamer_amount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamer_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamer_amount_)));
          set_has_teamer_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_team_force;
        break;
      }
      
      // optional int32 team_force = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_force_)));
          set_has_team_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_scene_id;
        break;
      }
      
      // optional int32 scene_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_sceret_flag;
        break;
      }
      
      // optional int32 sceret_flag = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceret_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceret_flag_)));
          set_has_sceret_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_limit_force;
        break;
      }
      
      // optional int32 limit_force = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_force_)));
          set_has_limit_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_auto_start;
        break;
      }
      
      // optional int32 auto_start = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auto_start_)));
          set_has_auto_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_start_fb;
        break;
      }
      
      // optional int32 start_fb = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_fb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_fb_)));
          set_has_start_fb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_teamer_id;
        break;
      }
      
      // repeated int64 teamer_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamer_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 96, input, this->mutable_teamer_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_teamer_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_teamer_id;
        if (input->ExpectTag(104)) goto parse_is_apply;
        break;
      }
      
      // optional int32 is_apply = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_apply:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_apply_)));
          set_has_is_apply();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoTravelTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->team_id(), output);
  }
  
  // optional string team_name = 2;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->team_name(), output);
  }
  
  // optional int64 leader_id = 3;
  if (has_leader_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->leader_id(), output);
  }
  
  // optional string leader_name = 4;
  if (has_leader_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leader_name().data(), this->leader_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->leader_name(), output);
  }
  
  // optional int32 teamer_amount = 5;
  if (has_teamer_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->teamer_amount(), output);
  }
  
  // optional int32 team_force = 6;
  if (has_team_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->team_force(), output);
  }
  
  // optional int32 scene_id = 7;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->scene_id(), output);
  }
  
  // optional int32 sceret_flag = 8;
  if (has_sceret_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->sceret_flag(), output);
  }
  
  // optional int32 limit_force = 9;
  if (has_limit_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->limit_force(), output);
  }
  
  // optional int32 auto_start = 10;
  if (has_auto_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->auto_start(), output);
  }
  
  // optional int32 start_fb = 11;
  if (has_start_fb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->start_fb(), output);
  }
  
  // repeated int64 teamer_id = 12;
  for (int i = 0; i < this->teamer_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      12, this->teamer_id(i), output);
  }
  
  // optional int32 is_apply = 13;
  if (has_is_apply()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->is_apply(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoTravelTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 team_id = 1;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->team_id(), target);
  }
  
  // optional string team_name = 2;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->team_name(), target);
  }
  
  // optional int64 leader_id = 3;
  if (has_leader_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->leader_id(), target);
  }
  
  // optional string leader_name = 4;
  if (has_leader_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leader_name().data(), this->leader_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->leader_name(), target);
  }
  
  // optional int32 teamer_amount = 5;
  if (has_teamer_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->teamer_amount(), target);
  }
  
  // optional int32 team_force = 6;
  if (has_team_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->team_force(), target);
  }
  
  // optional int32 scene_id = 7;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->scene_id(), target);
  }
  
  // optional int32 sceret_flag = 8;
  if (has_sceret_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->sceret_flag(), target);
  }
  
  // optional int32 limit_force = 9;
  if (has_limit_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->limit_force(), target);
  }
  
  // optional int32 auto_start = 10;
  if (has_auto_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->auto_start(), target);
  }
  
  // optional int32 start_fb = 11;
  if (has_start_fb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->start_fb(), target);
  }
  
  // repeated int64 teamer_id = 12;
  for (int i = 0; i < this->teamer_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(12, this->teamer_id(i), target);
  }
  
  // optional int32 is_apply = 13;
  if (has_is_apply()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->is_apply(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoTravelTeam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->team_id());
    }
    
    // optional string team_name = 2;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }
    
    // optional int64 leader_id = 3;
    if (has_leader_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->leader_id());
    }
    
    // optional string leader_name = 4;
    if (has_leader_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leader_name());
    }
    
    // optional int32 teamer_amount = 5;
    if (has_teamer_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamer_amount());
    }
    
    // optional int32 team_force = 6;
    if (has_team_force()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_force());
    }
    
    // optional int32 scene_id = 7;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_id());
    }
    
    // optional int32 sceret_flag = 8;
    if (has_sceret_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceret_flag());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 limit_force = 9;
    if (has_limit_force()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit_force());
    }
    
    // optional int32 auto_start = 10;
    if (has_auto_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auto_start());
    }
    
    // optional int32 start_fb = 11;
    if (has_start_fb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_fb());
    }
    
    // optional int32 is_apply = 13;
    if (has_is_apply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_apply());
    }
    
  }
  // repeated int64 teamer_id = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->teamer_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->teamer_id(i));
    }
    total_size += 1 * this->teamer_id_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoTravelTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoTravelTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoTravelTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoTravelTeam::MergeFrom(const ProtoTravelTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  teamer_id_.MergeFrom(from.teamer_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_team_name()) {
      set_team_name(from.team_name());
    }
    if (from.has_leader_id()) {
      set_leader_id(from.leader_id());
    }
    if (from.has_leader_name()) {
      set_leader_name(from.leader_name());
    }
    if (from.has_teamer_amount()) {
      set_teamer_amount(from.teamer_amount());
    }
    if (from.has_team_force()) {
      set_team_force(from.team_force());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_sceret_flag()) {
      set_sceret_flag(from.sceret_flag());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_limit_force()) {
      set_limit_force(from.limit_force());
    }
    if (from.has_auto_start()) {
      set_auto_start(from.auto_start());
    }
    if (from.has_start_fb()) {
      set_start_fb(from.start_fb());
    }
    if (from.has_is_apply()) {
      set_is_apply(from.is_apply());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoTravelTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoTravelTeam::CopyFrom(const ProtoTravelTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoTravelTeam::IsInitialized() const {
  
  return true;
}

void ProtoTravelTeam::Swap(ProtoTravelTeam* other) {
  if (other != this) {
    std::swap(team_id_, other->team_id_);
    std::swap(team_name_, other->team_name_);
    std::swap(leader_id_, other->leader_id_);
    std::swap(leader_name_, other->leader_name_);
    std::swap(teamer_amount_, other->teamer_amount_);
    std::swap(team_force_, other->team_force_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(sceret_flag_, other->sceret_flag_);
    std::swap(limit_force_, other->limit_force_);
    std::swap(auto_start_, other->auto_start_);
    std::swap(start_fb_, other->start_fb_);
    teamer_id_.Swap(&other->teamer_id_);
    std::swap(is_apply_, other->is_apply_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoTravelTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoTravelTeam_descriptor_;
  metadata.reflection = ProtoTravelTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoBrotherInfo::kRoleIdFieldNumber;
const int ProtoBrotherInfo::kRoleNameFieldNumber;
const int ProtoBrotherInfo::kRoleCareerFieldNumber;
const int ProtoBrotherInfo::kRoleLevelFieldNumber;
const int ProtoBrotherInfo::kEmotionFieldNumber;
const int ProtoBrotherInfo::kOnlineFieldNumber;
#endif  // !_MSC_VER

ProtoBrotherInfo::ProtoBrotherInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoBrotherInfo::InitAsDefaultInstance() {
}

ProtoBrotherInfo::ProtoBrotherInfo(const ProtoBrotherInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoBrotherInfo::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_career_ = 0;
  role_level_ = 0;
  emotion_ = 0;
  online_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoBrotherInfo::~ProtoBrotherInfo() {
  SharedDtor();
}

void ProtoBrotherInfo::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoBrotherInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoBrotherInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoBrotherInfo_descriptor_;
}

const ProtoBrotherInfo& ProtoBrotherInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoBrotherInfo* ProtoBrotherInfo::default_instance_ = NULL;

ProtoBrotherInfo* ProtoBrotherInfo::New() const {
  return new ProtoBrotherInfo;
}

void ProtoBrotherInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_LONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    role_career_ = 0;
    role_level_ = 0;
    emotion_ = 0;
    online_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoBrotherInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_name;
        break;
      }
      
      // optional string role_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_career;
        break;
      }
      
      // optional int32 role_career = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_career:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_career_)));
          set_has_role_career();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_role_level;
        break;
      }
      
      // optional int32 role_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_level_)));
          set_has_role_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_emotion;
        break;
      }
      
      // optional int32 emotion = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_emotion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &emotion_)));
          set_has_emotion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_online;
        break;
      }
      
      // optional int32 online = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoBrotherInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_id(), output);
  }
  
  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->role_name(), output);
  }
  
  // optional int32 role_career = 3;
  if (has_role_career()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->role_career(), output);
  }
  
  // optional int32 role_level = 4;
  if (has_role_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->role_level(), output);
  }
  
  // optional int32 emotion = 5;
  if (has_emotion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->emotion(), output);
  }
  
  // optional int32 online = 6;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->online(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoBrotherInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_id(), target);
  }
  
  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }
  
  // optional int32 role_career = 3;
  if (has_role_career()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->role_career(), target);
  }
  
  // optional int32 role_level = 4;
  if (has_role_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->role_level(), target);
  }
  
  // optional int32 emotion = 5;
  if (has_emotion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->emotion(), target);
  }
  
  // optional int32 online = 6;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->online(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoBrotherInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional string role_name = 2;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }
    
    // optional int32 role_career = 3;
    if (has_role_career()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_career());
    }
    
    // optional int32 role_level = 4;
    if (has_role_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_level());
    }
    
    // optional int32 emotion = 5;
    if (has_emotion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->emotion());
    }
    
    // optional int32 online = 6;
    if (has_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->online());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoBrotherInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoBrotherInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoBrotherInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoBrotherInfo::MergeFrom(const ProtoBrotherInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_role_career()) {
      set_role_career(from.role_career());
    }
    if (from.has_role_level()) {
      set_role_level(from.role_level());
    }
    if (from.has_emotion()) {
      set_emotion(from.emotion());
    }
    if (from.has_online()) {
      set_online(from.online());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoBrotherInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoBrotherInfo::CopyFrom(const ProtoBrotherInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoBrotherInfo::IsInitialized() const {
  
  return true;
}

void ProtoBrotherInfo::Swap(ProtoBrotherInfo* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(role_career_, other->role_career_);
    std::swap(role_level_, other->role_level_);
    std::swap(emotion_, other->emotion_);
    std::swap(online_, other->online_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoBrotherInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoBrotherInfo_descriptor_;
  metadata.reflection = ProtoBrotherInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoBrotherTask::kTaskIdFieldNumber;
const int ProtoBrotherTask::kFinishedNumFieldNumber;
const int ProtoBrotherTask::kFinishedPlayerFieldNumber;
#endif  // !_MSC_VER

ProtoBrotherTask::ProtoBrotherTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoBrotherTask::InitAsDefaultInstance() {
}

ProtoBrotherTask::ProtoBrotherTask(const ProtoBrotherTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoBrotherTask::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0;
  finished_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoBrotherTask::~ProtoBrotherTask() {
  SharedDtor();
}

void ProtoBrotherTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoBrotherTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoBrotherTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoBrotherTask_descriptor_;
}

const ProtoBrotherTask& ProtoBrotherTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoBrotherTask* ProtoBrotherTask::default_instance_ = NULL;

ProtoBrotherTask* ProtoBrotherTask::New() const {
  return new ProtoBrotherTask;
}

void ProtoBrotherTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0;
    finished_num_ = 0;
  }
  finished_player_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoBrotherTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_finished_num;
        break;
      }
      
      // optional int32 finished_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finished_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &finished_num_)));
          set_has_finished_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_finished_player;
        break;
      }
      
      // repeated int32 finished_player = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finished_player:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_finished_player())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_finished_player())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_finished_player;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoBrotherTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->task_id(), output);
  }
  
  // optional int32 finished_num = 2;
  if (has_finished_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->finished_num(), output);
  }
  
  // repeated int32 finished_player = 3;
  for (int i = 0; i < this->finished_player_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->finished_player(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoBrotherTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->task_id(), target);
  }
  
  // optional int32 finished_num = 2;
  if (has_finished_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->finished_num(), target);
  }
  
  // repeated int32 finished_player = 3;
  for (int i = 0; i < this->finished_player_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->finished_player(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoBrotherTask::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_id());
    }
    
    // optional int32 finished_num = 2;
    if (has_finished_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->finished_num());
    }
    
  }
  // repeated int32 finished_player = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->finished_player_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->finished_player(i));
    }
    total_size += 1 * this->finished_player_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoBrotherTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoBrotherTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoBrotherTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoBrotherTask::MergeFrom(const ProtoBrotherTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  finished_player_.MergeFrom(from.finished_player_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_finished_num()) {
      set_finished_num(from.finished_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoBrotherTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoBrotherTask::CopyFrom(const ProtoBrotherTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoBrotherTask::IsInitialized() const {
  
  return true;
}

void ProtoBrotherTask::Swap(ProtoBrotherTask* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(finished_num_, other->finished_num_);
    finished_player_.Swap(&other->finished_player_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoBrotherTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoBrotherTask_descriptor_;
  metadata.reflection = ProtoBrotherTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoMagicWeapon::kMagicweaponIdFieldNumber;
const int ProtoMagicWeapon::kRankStarGradeFieldNumber;
const int ProtoMagicWeapon::kRankStarProgressFieldNumber;
const int ProtoMagicWeapon::kSkillIdFieldNumber;
const int ProtoMagicWeapon::kSkillLevelFieldNumber;
const int ProtoMagicWeapon::kQuaStarGradeFieldNumber;
const int ProtoMagicWeapon::kQuaStarProgressFieldNumber;
const int ProtoMagicWeapon::kActivateStateFieldNumber;
#endif  // !_MSC_VER

ProtoMagicWeapon::ProtoMagicWeapon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoMagicWeapon::InitAsDefaultInstance() {
}

ProtoMagicWeapon::ProtoMagicWeapon(const ProtoMagicWeapon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoMagicWeapon::SharedCtor() {
  _cached_size_ = 0;
  magicweapon_id_ = 0;
  rank_star_grade_ = 0;
  rank_star_progress_ = 0;
  skill_id_ = 0;
  skill_level_ = 0;
  qua_star_grade_ = 0;
  qua_star_progress_ = 0;
  activate_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoMagicWeapon::~ProtoMagicWeapon() {
  SharedDtor();
}

void ProtoMagicWeapon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoMagicWeapon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoMagicWeapon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoMagicWeapon_descriptor_;
}

const ProtoMagicWeapon& ProtoMagicWeapon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoMagicWeapon* ProtoMagicWeapon::default_instance_ = NULL;

ProtoMagicWeapon* ProtoMagicWeapon::New() const {
  return new ProtoMagicWeapon;
}

void ProtoMagicWeapon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    magicweapon_id_ = 0;
    rank_star_grade_ = 0;
    rank_star_progress_ = 0;
    skill_id_ = 0;
    skill_level_ = 0;
    qua_star_grade_ = 0;
    qua_star_progress_ = 0;
    activate_state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoMagicWeapon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 magicweapon_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magicweapon_id_)));
          set_has_magicweapon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank_star_grade;
        break;
      }
      
      // optional int32 rank_star_grade = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_star_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_star_grade_)));
          set_has_rank_star_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank_star_progress;
        break;
      }
      
      // optional int32 rank_star_progress = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_star_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_star_progress_)));
          set_has_rank_star_progress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_skill_id;
        break;
      }
      
      // optional int32 skill_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_skill_level;
        break;
      }
      
      // optional int32 skill_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_level_)));
          set_has_skill_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_qua_star_grade;
        break;
      }
      
      // optional int32 qua_star_grade = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qua_star_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qua_star_grade_)));
          set_has_qua_star_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_qua_star_progress;
        break;
      }
      
      // optional int32 qua_star_progress = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qua_star_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qua_star_progress_)));
          set_has_qua_star_progress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_activate_state;
        break;
      }
      
      // optional int32 activate_state = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activate_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activate_state_)));
          set_has_activate_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoMagicWeapon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 magicweapon_id = 1;
  if (has_magicweapon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->magicweapon_id(), output);
  }
  
  // optional int32 rank_star_grade = 2;
  if (has_rank_star_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank_star_grade(), output);
  }
  
  // optional int32 rank_star_progress = 3;
  if (has_rank_star_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rank_star_progress(), output);
  }
  
  // optional int32 skill_id = 4;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->skill_id(), output);
  }
  
  // optional int32 skill_level = 5;
  if (has_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->skill_level(), output);
  }
  
  // optional int32 qua_star_grade = 6;
  if (has_qua_star_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->qua_star_grade(), output);
  }
  
  // optional int32 qua_star_progress = 7;
  if (has_qua_star_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->qua_star_progress(), output);
  }
  
  // optional int32 activate_state = 8;
  if (has_activate_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->activate_state(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoMagicWeapon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 magicweapon_id = 1;
  if (has_magicweapon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->magicweapon_id(), target);
  }
  
  // optional int32 rank_star_grade = 2;
  if (has_rank_star_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank_star_grade(), target);
  }
  
  // optional int32 rank_star_progress = 3;
  if (has_rank_star_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rank_star_progress(), target);
  }
  
  // optional int32 skill_id = 4;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->skill_id(), target);
  }
  
  // optional int32 skill_level = 5;
  if (has_skill_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->skill_level(), target);
  }
  
  // optional int32 qua_star_grade = 6;
  if (has_qua_star_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->qua_star_grade(), target);
  }
  
  // optional int32 qua_star_progress = 7;
  if (has_qua_star_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->qua_star_progress(), target);
  }
  
  // optional int32 activate_state = 8;
  if (has_activate_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->activate_state(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoMagicWeapon::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 magicweapon_id = 1;
    if (has_magicweapon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magicweapon_id());
    }
    
    // optional int32 rank_star_grade = 2;
    if (has_rank_star_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_star_grade());
    }
    
    // optional int32 rank_star_progress = 3;
    if (has_rank_star_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_star_progress());
    }
    
    // optional int32 skill_id = 4;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }
    
    // optional int32 skill_level = 5;
    if (has_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_level());
    }
    
    // optional int32 qua_star_grade = 6;
    if (has_qua_star_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qua_star_grade());
    }
    
    // optional int32 qua_star_progress = 7;
    if (has_qua_star_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qua_star_progress());
    }
    
    // optional int32 activate_state = 8;
    if (has_activate_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activate_state());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoMagicWeapon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoMagicWeapon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoMagicWeapon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoMagicWeapon::MergeFrom(const ProtoMagicWeapon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_magicweapon_id()) {
      set_magicweapon_id(from.magicweapon_id());
    }
    if (from.has_rank_star_grade()) {
      set_rank_star_grade(from.rank_star_grade());
    }
    if (from.has_rank_star_progress()) {
      set_rank_star_progress(from.rank_star_progress());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_skill_level()) {
      set_skill_level(from.skill_level());
    }
    if (from.has_qua_star_grade()) {
      set_qua_star_grade(from.qua_star_grade());
    }
    if (from.has_qua_star_progress()) {
      set_qua_star_progress(from.qua_star_progress());
    }
    if (from.has_activate_state()) {
      set_activate_state(from.activate_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoMagicWeapon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMagicWeapon::CopyFrom(const ProtoMagicWeapon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMagicWeapon::IsInitialized() const {
  
  return true;
}

void ProtoMagicWeapon::Swap(ProtoMagicWeapon* other) {
  if (other != this) {
    std::swap(magicweapon_id_, other->magicweapon_id_);
    std::swap(rank_star_grade_, other->rank_star_grade_);
    std::swap(rank_star_progress_, other->rank_star_progress_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(skill_level_, other->skill_level_);
    std::swap(qua_star_grade_, other->qua_star_grade_);
    std::swap(qua_star_progress_, other->qua_star_progress_);
    std::swap(activate_state_, other->activate_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoMagicWeapon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoMagicWeapon_descriptor_;
  metadata.reflection = ProtoMagicWeapon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoAIllusion::kIdFieldNumber;
const int ProtoAIllusion::kUnlockFieldNumber;
const int ProtoAIllusion::kTypeFieldNumber;
const int ProtoAIllusion::kLastSecFieldNumber;
const int ProtoAIllusion::kUnlockTypeFieldNumber;
#endif  // !_MSC_VER

ProtoAIllusion::ProtoAIllusion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoAIllusion::InitAsDefaultInstance() {
}

ProtoAIllusion::ProtoAIllusion(const ProtoAIllusion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoAIllusion::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  unlock_ = false;
  type_ = 0;
  last_sec_ = 0;
  unlock_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoAIllusion::~ProtoAIllusion() {
  SharedDtor();
}

void ProtoAIllusion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoAIllusion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoAIllusion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoAIllusion_descriptor_;
}

const ProtoAIllusion& ProtoAIllusion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoAIllusion* ProtoAIllusion::default_instance_ = NULL;

ProtoAIllusion* ProtoAIllusion::New() const {
  return new ProtoAIllusion;
}

void ProtoAIllusion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    unlock_ = false;
    type_ = 0;
    last_sec_ = 0;
    unlock_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoAIllusion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_unlock;
        break;
      }
      
      // optional bool unlock = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unlock_)));
          set_has_unlock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_sec;
        break;
      }
      
      // optional int32 last_sec = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_sec_)));
          set_has_last_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_unlock_type;
        break;
      }
      
      // optional int32 unlock_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unlock_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unlock_type_)));
          set_has_unlock_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoAIllusion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional bool unlock = 2;
  if (has_unlock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->unlock(), output);
  }
  
  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }
  
  // optional int32 last_sec = 4;
  if (has_last_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->last_sec(), output);
  }
  
  // optional int32 unlock_type = 5;
  if (has_unlock_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->unlock_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoAIllusion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional bool unlock = 2;
  if (has_unlock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->unlock(), target);
  }
  
  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }
  
  // optional int32 last_sec = 4;
  if (has_last_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->last_sec(), target);
  }
  
  // optional int32 unlock_type = 5;
  if (has_unlock_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->unlock_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoAIllusion::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional bool unlock = 2;
    if (has_unlock()) {
      total_size += 1 + 1;
    }
    
    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int32 last_sec = 4;
    if (has_last_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_sec());
    }
    
    // optional int32 unlock_type = 5;
    if (has_unlock_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unlock_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoAIllusion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoAIllusion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoAIllusion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoAIllusion::MergeFrom(const ProtoAIllusion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_unlock()) {
      set_unlock(from.unlock());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_last_sec()) {
      set_last_sec(from.last_sec());
    }
    if (from.has_unlock_type()) {
      set_unlock_type(from.unlock_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoAIllusion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoAIllusion::CopyFrom(const ProtoAIllusion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoAIllusion::IsInitialized() const {
  
  return true;
}

void ProtoAIllusion::Swap(ProtoAIllusion* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(unlock_, other->unlock_);
    std::swap(type_, other->type_);
    std::swap(last_sec_, other->last_sec_);
    std::swap(unlock_type_, other->unlock_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoAIllusion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoAIllusion_descriptor_;
  metadata.reflection = ProtoAIllusion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoTravelTeamer::kRoleIdFieldNumber;
const int ProtoTravelTeamer::kRoleNameFieldNumber;
const int ProtoTravelTeamer::kRoleSexFieldNumber;
const int ProtoTravelTeamer::kRoleCareerFieldNumber;
const int ProtoTravelTeamer::kLeftBloodFieldNumber;
const int ProtoTravelTeamer::kTotalBloodFieldNumber;
const int ProtoTravelTeamer::kLeftMagicFieldNumber;
const int ProtoTravelTeamer::kTotalMagicFieldNumber;
const int ProtoTravelTeamer::kLevelFieldNumber;
const int ProtoTravelTeamer::kFightForceFieldNumber;
#endif  // !_MSC_VER

ProtoTravelTeamer::ProtoTravelTeamer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoTravelTeamer::InitAsDefaultInstance() {
}

ProtoTravelTeamer::ProtoTravelTeamer(const ProtoTravelTeamer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoTravelTeamer::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_sex_ = 0;
  role_career_ = 0;
  left_blood_ = 0;
  total_blood_ = 0;
  left_magic_ = 0;
  total_magic_ = 0;
  level_ = 0;
  fight_force_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoTravelTeamer::~ProtoTravelTeamer() {
  SharedDtor();
}

void ProtoTravelTeamer::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoTravelTeamer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoTravelTeamer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoTravelTeamer_descriptor_;
}

const ProtoTravelTeamer& ProtoTravelTeamer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoTravelTeamer* ProtoTravelTeamer::default_instance_ = NULL;

ProtoTravelTeamer* ProtoTravelTeamer::New() const {
  return new ProtoTravelTeamer;
}

void ProtoTravelTeamer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_LONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    role_sex_ = 0;
    role_career_ = 0;
    left_blood_ = 0;
    total_blood_ = 0;
    left_magic_ = 0;
    total_magic_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    level_ = 0;
    fight_force_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoTravelTeamer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_name;
        break;
      }
      
      // optional string role_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_sex;
        break;
      }
      
      // optional int32 role_sex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_sex_)));
          set_has_role_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_role_career;
        break;
      }
      
      // optional int32 role_career = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_career:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_career_)));
          set_has_role_career();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_left_blood;
        break;
      }
      
      // optional int32 left_blood = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_blood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_blood_)));
          set_has_left_blood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_total_blood;
        break;
      }
      
      // optional int32 total_blood = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_blood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_blood_)));
          set_has_total_blood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_left_magic;
        break;
      }
      
      // optional int32 left_magic = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_magic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_magic_)));
          set_has_left_magic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_total_magic;
        break;
      }
      
      // optional int32 total_magic = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_magic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_magic_)));
          set_has_total_magic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_level;
        break;
      }
      
      // optional int32 level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_fight_force;
        break;
      }
      
      // optional int32 fight_force = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_force_)));
          set_has_fight_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoTravelTeamer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_id(), output);
  }
  
  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->role_name(), output);
  }
  
  // optional int32 role_sex = 3;
  if (has_role_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->role_sex(), output);
  }
  
  // optional int32 role_career = 4;
  if (has_role_career()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->role_career(), output);
  }
  
  // optional int32 left_blood = 5;
  if (has_left_blood()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->left_blood(), output);
  }
  
  // optional int32 total_blood = 6;
  if (has_total_blood()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->total_blood(), output);
  }
  
  // optional int32 left_magic = 7;
  if (has_left_magic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->left_magic(), output);
  }
  
  // optional int32 total_magic = 8;
  if (has_total_magic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->total_magic(), output);
  }
  
  // optional int32 level = 9;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->level(), output);
  }
  
  // optional int32 fight_force = 10;
  if (has_fight_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->fight_force(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoTravelTeamer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_id(), target);
  }
  
  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }
  
  // optional int32 role_sex = 3;
  if (has_role_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->role_sex(), target);
  }
  
  // optional int32 role_career = 4;
  if (has_role_career()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->role_career(), target);
  }
  
  // optional int32 left_blood = 5;
  if (has_left_blood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->left_blood(), target);
  }
  
  // optional int32 total_blood = 6;
  if (has_total_blood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->total_blood(), target);
  }
  
  // optional int32 left_magic = 7;
  if (has_left_magic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->left_magic(), target);
  }
  
  // optional int32 total_magic = 8;
  if (has_total_magic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->total_magic(), target);
  }
  
  // optional int32 level = 9;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->level(), target);
  }
  
  // optional int32 fight_force = 10;
  if (has_fight_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->fight_force(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoTravelTeamer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional string role_name = 2;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }
    
    // optional int32 role_sex = 3;
    if (has_role_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_sex());
    }
    
    // optional int32 role_career = 4;
    if (has_role_career()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_career());
    }
    
    // optional int32 left_blood = 5;
    if (has_left_blood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_blood());
    }
    
    // optional int32 total_blood = 6;
    if (has_total_blood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_blood());
    }
    
    // optional int32 left_magic = 7;
    if (has_left_magic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_magic());
    }
    
    // optional int32 total_magic = 8;
    if (has_total_magic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_magic());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 level = 9;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 fight_force = 10;
    if (has_fight_force()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight_force());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoTravelTeamer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoTravelTeamer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoTravelTeamer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoTravelTeamer::MergeFrom(const ProtoTravelTeamer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_role_sex()) {
      set_role_sex(from.role_sex());
    }
    if (from.has_role_career()) {
      set_role_career(from.role_career());
    }
    if (from.has_left_blood()) {
      set_left_blood(from.left_blood());
    }
    if (from.has_total_blood()) {
      set_total_blood(from.total_blood());
    }
    if (from.has_left_magic()) {
      set_left_magic(from.left_magic());
    }
    if (from.has_total_magic()) {
      set_total_magic(from.total_magic());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_fight_force()) {
      set_fight_force(from.fight_force());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoTravelTeamer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoTravelTeamer::CopyFrom(const ProtoTravelTeamer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoTravelTeamer::IsInitialized() const {
  
  return true;
}

void ProtoTravelTeamer::Swap(ProtoTravelTeamer* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(role_sex_, other->role_sex_);
    std::swap(role_career_, other->role_career_);
    std::swap(left_blood_, other->left_blood_);
    std::swap(total_blood_, other->total_blood_);
    std::swap(left_magic_, other->left_magic_);
    std::swap(total_magic_, other->total_magic_);
    std::swap(level_, other->level_);
    std::swap(fight_force_, other->fight_force_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoTravelTeamer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoTravelTeamer_descriptor_;
  metadata.reflection = ProtoTravelTeamer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoPromotTeam::kTeamIdFieldNumber;
const int ProtoPromotTeam::kTeamNameFieldNumber;
const int ProtoPromotTeam::kServerPrevFieldNumber;
const int ProtoPromotTeam::kIsBetFieldNumber;
const int ProtoPromotTeam::kIsPromotTurnsFieldNumber;
const int ProtoPromotTeam::kIsNextTurnsFieldNumber;
const int ProtoPromotTeam::kTeamIconFieldNumber;
#endif  // !_MSC_VER

ProtoPromotTeam::ProtoPromotTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoPromotTeam::InitAsDefaultInstance() {
}

ProtoPromotTeam::ProtoPromotTeam(const ProtoPromotTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoPromotTeam::SharedCtor() {
  _cached_size_ = 0;
  team_id_ = GOOGLE_LONGLONG(0);
  team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_prev_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_bet_ = 0;
  is_promot_turns_ = 0;
  is_next_turns_ = 0;
  team_icon_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoPromotTeam::~ProtoPromotTeam() {
  SharedDtor();
}

void ProtoPromotTeam::SharedDtor() {
  if (team_name_ != &::google::protobuf::internal::kEmptyString) {
    delete team_name_;
  }
  if (server_prev_ != &::google::protobuf::internal::kEmptyString) {
    delete server_prev_;
  }
  if (this != default_instance_) {
  }
}

void ProtoPromotTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoPromotTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoPromotTeam_descriptor_;
}

const ProtoPromotTeam& ProtoPromotTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoPromotTeam* ProtoPromotTeam::default_instance_ = NULL;

ProtoPromotTeam* ProtoPromotTeam::New() const {
  return new ProtoPromotTeam;
}

void ProtoPromotTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    team_id_ = GOOGLE_LONGLONG(0);
    if (has_team_name()) {
      if (team_name_ != &::google::protobuf::internal::kEmptyString) {
        team_name_->clear();
      }
    }
    if (has_server_prev()) {
      if (server_prev_ != &::google::protobuf::internal::kEmptyString) {
        server_prev_->clear();
      }
    }
    is_bet_ = 0;
    is_promot_turns_ = 0;
    is_next_turns_ = 0;
    team_icon_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoPromotTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 team_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_team_name;
        break;
      }
      
      // optional string team_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_server_prev;
        break;
      }
      
      // optional string server_prev = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_prev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_prev()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_prev().data(), this->server_prev().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_bet;
        break;
      }
      
      // optional int32 is_bet = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_bet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_bet_)));
          set_has_is_bet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_promot_turns;
        break;
      }
      
      // optional int32 is_promot_turns = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_promot_turns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_promot_turns_)));
          set_has_is_promot_turns();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_next_turns;
        break;
      }
      
      // optional int32 is_next_turns = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_next_turns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_next_turns_)));
          set_has_is_next_turns();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_team_icon;
        break;
      }
      
      // optional int32 team_icon = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_icon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_icon_)));
          set_has_team_icon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoPromotTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->team_id(), output);
  }
  
  // optional string team_name = 2;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->team_name(), output);
  }
  
  // optional string server_prev = 3;
  if (has_server_prev()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_prev().data(), this->server_prev().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->server_prev(), output);
  }
  
  // optional int32 is_bet = 4;
  if (has_is_bet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->is_bet(), output);
  }
  
  // optional int32 is_promot_turns = 5;
  if (has_is_promot_turns()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->is_promot_turns(), output);
  }
  
  // optional int32 is_next_turns = 6;
  if (has_is_next_turns()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->is_next_turns(), output);
  }
  
  // optional int32 team_icon = 7;
  if (has_team_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->team_icon(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoPromotTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 team_id = 1;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->team_id(), target);
  }
  
  // optional string team_name = 2;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->team_name(), target);
  }
  
  // optional string server_prev = 3;
  if (has_server_prev()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_prev().data(), this->server_prev().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->server_prev(), target);
  }
  
  // optional int32 is_bet = 4;
  if (has_is_bet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->is_bet(), target);
  }
  
  // optional int32 is_promot_turns = 5;
  if (has_is_promot_turns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->is_promot_turns(), target);
  }
  
  // optional int32 is_next_turns = 6;
  if (has_is_next_turns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->is_next_turns(), target);
  }
  
  // optional int32 team_icon = 7;
  if (has_team_icon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->team_icon(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoPromotTeam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->team_id());
    }
    
    // optional string team_name = 2;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }
    
    // optional string server_prev = 3;
    if (has_server_prev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_prev());
    }
    
    // optional int32 is_bet = 4;
    if (has_is_bet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_bet());
    }
    
    // optional int32 is_promot_turns = 5;
    if (has_is_promot_turns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_promot_turns());
    }
    
    // optional int32 is_next_turns = 6;
    if (has_is_next_turns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_next_turns());
    }
    
    // optional int32 team_icon = 7;
    if (has_team_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_icon());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoPromotTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoPromotTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoPromotTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoPromotTeam::MergeFrom(const ProtoPromotTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_team_name()) {
      set_team_name(from.team_name());
    }
    if (from.has_server_prev()) {
      set_server_prev(from.server_prev());
    }
    if (from.has_is_bet()) {
      set_is_bet(from.is_bet());
    }
    if (from.has_is_promot_turns()) {
      set_is_promot_turns(from.is_promot_turns());
    }
    if (from.has_is_next_turns()) {
      set_is_next_turns(from.is_next_turns());
    }
    if (from.has_team_icon()) {
      set_team_icon(from.team_icon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoPromotTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoPromotTeam::CopyFrom(const ProtoPromotTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoPromotTeam::IsInitialized() const {
  
  return true;
}

void ProtoPromotTeam::Swap(ProtoPromotTeam* other) {
  if (other != this) {
    std::swap(team_id_, other->team_id_);
    std::swap(team_name_, other->team_name_);
    std::swap(server_prev_, other->server_prev_);
    std::swap(is_bet_, other->is_bet_);
    std::swap(is_promot_turns_, other->is_promot_turns_);
    std::swap(is_next_turns_, other->is_next_turns_);
    std::swap(team_icon_, other->team_icon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoPromotTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoPromotTeam_descriptor_;
  metadata.reflection = ProtoPromotTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoTravelPeakBet::kPromotTurnsFieldNumber;
const int ProtoTravelPeakBet::kTeamIdFieldNumber;
const int ProtoTravelPeakBet::kTeamNameFieldNumber;
const int ProtoTravelPeakBet::kServerPrevFieldNumber;
const int ProtoTravelPeakBet::kCopperFieldNumber;
const int ProtoTravelPeakBet::kStateFieldNumber;
#endif  // !_MSC_VER

ProtoTravelPeakBet::ProtoTravelPeakBet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoTravelPeakBet::InitAsDefaultInstance() {
}

ProtoTravelPeakBet::ProtoTravelPeakBet(const ProtoTravelPeakBet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoTravelPeakBet::SharedCtor() {
  _cached_size_ = 0;
  promot_turns_ = 0;
  team_id_ = GOOGLE_LONGLONG(0);
  team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_prev_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  copper_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoTravelPeakBet::~ProtoTravelPeakBet() {
  SharedDtor();
}

void ProtoTravelPeakBet::SharedDtor() {
  if (team_name_ != &::google::protobuf::internal::kEmptyString) {
    delete team_name_;
  }
  if (server_prev_ != &::google::protobuf::internal::kEmptyString) {
    delete server_prev_;
  }
  if (this != default_instance_) {
  }
}

void ProtoTravelPeakBet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoTravelPeakBet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoTravelPeakBet_descriptor_;
}

const ProtoTravelPeakBet& ProtoTravelPeakBet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoTravelPeakBet* ProtoTravelPeakBet::default_instance_ = NULL;

ProtoTravelPeakBet* ProtoTravelPeakBet::New() const {
  return new ProtoTravelPeakBet;
}

void ProtoTravelPeakBet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    promot_turns_ = 0;
    team_id_ = GOOGLE_LONGLONG(0);
    if (has_team_name()) {
      if (team_name_ != &::google::protobuf::internal::kEmptyString) {
        team_name_->clear();
      }
    }
    if (has_server_prev()) {
      if (server_prev_ != &::google::protobuf::internal::kEmptyString) {
        server_prev_->clear();
      }
    }
    copper_ = 0;
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoTravelPeakBet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 promot_turns = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &promot_turns_)));
          set_has_promot_turns();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team_id;
        break;
      }
      
      // optional int64 team_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_team_name;
        break;
      }
      
      // optional string team_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_server_prev;
        break;
      }
      
      // optional string server_prev = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_prev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_prev()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_prev().data(), this->server_prev().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_copper;
        break;
      }
      
      // optional int32 copper = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_copper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &copper_)));
          set_has_copper();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_state;
        break;
      }
      
      // optional int32 state = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoTravelPeakBet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 promot_turns = 1;
  if (has_promot_turns()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->promot_turns(), output);
  }
  
  // optional int64 team_id = 2;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->team_id(), output);
  }
  
  // optional string team_name = 3;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->team_name(), output);
  }
  
  // optional string server_prev = 4;
  if (has_server_prev()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_prev().data(), this->server_prev().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->server_prev(), output);
  }
  
  // optional int32 copper = 5;
  if (has_copper()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->copper(), output);
  }
  
  // optional int32 state = 6;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->state(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoTravelPeakBet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 promot_turns = 1;
  if (has_promot_turns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->promot_turns(), target);
  }
  
  // optional int64 team_id = 2;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->team_id(), target);
  }
  
  // optional string team_name = 3;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->team_name(), target);
  }
  
  // optional string server_prev = 4;
  if (has_server_prev()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_prev().data(), this->server_prev().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->server_prev(), target);
  }
  
  // optional int32 copper = 5;
  if (has_copper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->copper(), target);
  }
  
  // optional int32 state = 6;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->state(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoTravelPeakBet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 promot_turns = 1;
    if (has_promot_turns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->promot_turns());
    }
    
    // optional int64 team_id = 2;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->team_id());
    }
    
    // optional string team_name = 3;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }
    
    // optional string server_prev = 4;
    if (has_server_prev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_prev());
    }
    
    // optional int32 copper = 5;
    if (has_copper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->copper());
    }
    
    // optional int32 state = 6;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoTravelPeakBet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoTravelPeakBet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoTravelPeakBet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoTravelPeakBet::MergeFrom(const ProtoTravelPeakBet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_promot_turns()) {
      set_promot_turns(from.promot_turns());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_team_name()) {
      set_team_name(from.team_name());
    }
    if (from.has_server_prev()) {
      set_server_prev(from.server_prev());
    }
    if (from.has_copper()) {
      set_copper(from.copper());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoTravelPeakBet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoTravelPeakBet::CopyFrom(const ProtoTravelPeakBet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoTravelPeakBet::IsInitialized() const {
  
  return true;
}

void ProtoTravelPeakBet::Swap(ProtoTravelPeakBet* other) {
  if (other != this) {
    std::swap(promot_turns_, other->promot_turns_);
    std::swap(team_id_, other->team_id_);
    std::swap(team_name_, other->team_name_);
    std::swap(server_prev_, other->server_prev_);
    std::swap(copper_, other->copper_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoTravelPeakBet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoTravelPeakBet_descriptor_;
  metadata.reflection = ProtoTravelPeakBet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoMilitaryExploits::kTypeFieldNumber;
const int ProtoMilitaryExploits::kTeamIdFieldNumber;
const int ProtoMilitaryExploits::kTeamNameFieldNumber;
const int ProtoMilitaryExploits::kServerPrevFieldNumber;
const int ProtoMilitaryExploits::kWinTimesFieldNumber;
const int ProtoMilitaryExploits::kLossTimesFieldNumber;
const int ProtoMilitaryExploits::kResultFieldNumber;
#endif  // !_MSC_VER

ProtoMilitaryExploits::ProtoMilitaryExploits()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoMilitaryExploits::InitAsDefaultInstance() {
}

ProtoMilitaryExploits::ProtoMilitaryExploits(const ProtoMilitaryExploits& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoMilitaryExploits::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  team_id_ = GOOGLE_LONGLONG(0);
  team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_prev_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  win_times_ = 0;
  loss_times_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoMilitaryExploits::~ProtoMilitaryExploits() {
  SharedDtor();
}

void ProtoMilitaryExploits::SharedDtor() {
  if (team_name_ != &::google::protobuf::internal::kEmptyString) {
    delete team_name_;
  }
  if (server_prev_ != &::google::protobuf::internal::kEmptyString) {
    delete server_prev_;
  }
  if (this != default_instance_) {
  }
}

void ProtoMilitaryExploits::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoMilitaryExploits::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoMilitaryExploits_descriptor_;
}

const ProtoMilitaryExploits& ProtoMilitaryExploits::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoMilitaryExploits* ProtoMilitaryExploits::default_instance_ = NULL;

ProtoMilitaryExploits* ProtoMilitaryExploits::New() const {
  return new ProtoMilitaryExploits;
}

void ProtoMilitaryExploits::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    team_id_ = GOOGLE_LONGLONG(0);
    if (has_team_name()) {
      if (team_name_ != &::google::protobuf::internal::kEmptyString) {
        team_name_->clear();
      }
    }
    if (has_server_prev()) {
      if (server_prev_ != &::google::protobuf::internal::kEmptyString) {
        server_prev_->clear();
      }
    }
    win_times_ = 0;
    loss_times_ = 0;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoMilitaryExploits::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team_id;
        break;
      }
      
      // optional int64 team_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_team_name;
        break;
      }
      
      // optional string team_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_server_prev;
        break;
      }
      
      // optional string server_prev = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_prev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_prev()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_prev().data(), this->server_prev().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_win_times;
        break;
      }
      
      // optional int32 win_times = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_times_)));
          set_has_win_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_loss_times;
        break;
      }
      
      // optional int32 loss_times = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loss_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loss_times_)));
          set_has_loss_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_result;
        break;
      }
      
      // optional int32 result = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoMilitaryExploits::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // optional int64 team_id = 2;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->team_id(), output);
  }
  
  // optional string team_name = 3;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->team_name(), output);
  }
  
  // optional string server_prev = 4;
  if (has_server_prev()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_prev().data(), this->server_prev().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->server_prev(), output);
  }
  
  // optional int32 win_times = 5;
  if (has_win_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->win_times(), output);
  }
  
  // optional int32 loss_times = 6;
  if (has_loss_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->loss_times(), output);
  }
  
  // optional int32 result = 7;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoMilitaryExploits::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // optional int64 team_id = 2;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->team_id(), target);
  }
  
  // optional string team_name = 3;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->team_name(), target);
  }
  
  // optional string server_prev = 4;
  if (has_server_prev()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_prev().data(), this->server_prev().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->server_prev(), target);
  }
  
  // optional int32 win_times = 5;
  if (has_win_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->win_times(), target);
  }
  
  // optional int32 loss_times = 6;
  if (has_loss_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->loss_times(), target);
  }
  
  // optional int32 result = 7;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoMilitaryExploits::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int64 team_id = 2;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->team_id());
    }
    
    // optional string team_name = 3;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }
    
    // optional string server_prev = 4;
    if (has_server_prev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_prev());
    }
    
    // optional int32 win_times = 5;
    if (has_win_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_times());
    }
    
    // optional int32 loss_times = 6;
    if (has_loss_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loss_times());
    }
    
    // optional int32 result = 7;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoMilitaryExploits::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoMilitaryExploits* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoMilitaryExploits*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoMilitaryExploits::MergeFrom(const ProtoMilitaryExploits& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_team_name()) {
      set_team_name(from.team_name());
    }
    if (from.has_server_prev()) {
      set_server_prev(from.server_prev());
    }
    if (from.has_win_times()) {
      set_win_times(from.win_times());
    }
    if (from.has_loss_times()) {
      set_loss_times(from.loss_times());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoMilitaryExploits::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMilitaryExploits::CopyFrom(const ProtoMilitaryExploits& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMilitaryExploits::IsInitialized() const {
  
  return true;
}

void ProtoMilitaryExploits::Swap(ProtoMilitaryExploits* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(team_id_, other->team_id_);
    std::swap(team_name_, other->team_name_);
    std::swap(server_prev_, other->server_prev_);
    std::swap(win_times_, other->win_times_);
    std::swap(loss_times_, other->loss_times_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoMilitaryExploits::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoMilitaryExploits_descriptor_;
  metadata.reflection = ProtoMilitaryExploits_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoTravPeakWorth::kRankFieldNumber;
const int ProtoTravPeakWorth::kTeamIdFieldNumber;
const int ProtoTravPeakWorth::kTeamNameFieldNumber;
const int ProtoTravPeakWorth::kTeamForceFieldNumber;
const int ProtoTravPeakWorth::kWorthFieldNumber;
#endif  // !_MSC_VER

ProtoTravPeakWorth::ProtoTravPeakWorth()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoTravPeakWorth::InitAsDefaultInstance() {
}

ProtoTravPeakWorth::ProtoTravPeakWorth(const ProtoTravPeakWorth& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoTravPeakWorth::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  team_id_ = GOOGLE_LONGLONG(0);
  team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  team_force_ = 0;
  worth_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoTravPeakWorth::~ProtoTravPeakWorth() {
  SharedDtor();
}

void ProtoTravPeakWorth::SharedDtor() {
  if (team_name_ != &::google::protobuf::internal::kEmptyString) {
    delete team_name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoTravPeakWorth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoTravPeakWorth::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoTravPeakWorth_descriptor_;
}

const ProtoTravPeakWorth& ProtoTravPeakWorth::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoTravPeakWorth* ProtoTravPeakWorth::default_instance_ = NULL;

ProtoTravPeakWorth* ProtoTravPeakWorth::New() const {
  return new ProtoTravPeakWorth;
}

void ProtoTravPeakWorth::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0;
    team_id_ = GOOGLE_LONGLONG(0);
    if (has_team_name()) {
      if (team_name_ != &::google::protobuf::internal::kEmptyString) {
        team_name_->clear();
      }
    }
    team_force_ = 0;
    worth_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoTravPeakWorth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team_id;
        break;
      }
      
      // optional int64 team_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_team_name;
        break;
      }
      
      // optional string team_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_team_force;
        break;
      }
      
      // optional int32 team_force = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_force_)));
          set_has_team_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_worth;
        break;
      }
      
      // optional int32 worth = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_worth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &worth_)));
          set_has_worth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoTravPeakWorth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }
  
  // optional int64 team_id = 2;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->team_id(), output);
  }
  
  // optional string team_name = 3;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->team_name(), output);
  }
  
  // optional int32 team_force = 4;
  if (has_team_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->team_force(), output);
  }
  
  // optional int32 worth = 5;
  if (has_worth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->worth(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoTravPeakWorth::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }
  
  // optional int64 team_id = 2;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->team_id(), target);
  }
  
  // optional string team_name = 3;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->team_name(), target);
  }
  
  // optional int32 team_force = 4;
  if (has_team_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->team_force(), target);
  }
  
  // optional int32 worth = 5;
  if (has_worth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->worth(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoTravPeakWorth::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
    // optional int64 team_id = 2;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->team_id());
    }
    
    // optional string team_name = 3;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }
    
    // optional int32 team_force = 4;
    if (has_team_force()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_force());
    }
    
    // optional int32 worth = 5;
    if (has_worth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->worth());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoTravPeakWorth::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoTravPeakWorth* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoTravPeakWorth*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoTravPeakWorth::MergeFrom(const ProtoTravPeakWorth& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_team_name()) {
      set_team_name(from.team_name());
    }
    if (from.has_team_force()) {
      set_team_force(from.team_force());
    }
    if (from.has_worth()) {
      set_worth(from.worth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoTravPeakWorth::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoTravPeakWorth::CopyFrom(const ProtoTravPeakWorth& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoTravPeakWorth::IsInitialized() const {
  
  return true;
}

void ProtoTravPeakWorth::Swap(ProtoTravPeakWorth* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(team_id_, other->team_id_);
    std::swap(team_name_, other->team_name_);
    std::swap(team_force_, other->team_force_);
    std::swap(worth_, other->worth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoTravPeakWorth::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoTravPeakWorth_descriptor_;
  metadata.reflection = ProtoTravPeakWorth_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoMagicActBase::kActiveFieldNumber;
const int ProtoMagicActBase::kLevelFieldNumber;
const int ProtoMagicActBase::kDegreeFieldNumber;
const int ProtoMagicActBase::kAutoUseFieldNumber;
const int ProtoMagicActBase::kPartFieldNumber;
const int ProtoMagicActBase::kMagicIdFieldNumber;
#endif  // !_MSC_VER

ProtoMagicActBase::ProtoMagicActBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoMagicActBase::InitAsDefaultInstance() {
}

ProtoMagicActBase::ProtoMagicActBase(const ProtoMagicActBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoMagicActBase::SharedCtor() {
  _cached_size_ = 0;
  active_ = 0;
  level_ = 0;
  degree_ = 0;
  auto_use_ = 0;
  magic_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoMagicActBase::~ProtoMagicActBase() {
  SharedDtor();
}

void ProtoMagicActBase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoMagicActBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoMagicActBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoMagicActBase_descriptor_;
}

const ProtoMagicActBase& ProtoMagicActBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoMagicActBase* ProtoMagicActBase::default_instance_ = NULL;

ProtoMagicActBase* ProtoMagicActBase::New() const {
  return new ProtoMagicActBase;
}

void ProtoMagicActBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    active_ = 0;
    level_ = 0;
    degree_ = 0;
    auto_use_ = 0;
    magic_id_ = 0;
  }
  part_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoMagicActBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 active = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_degree;
        break;
      }
      
      // optional int32 degree = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_degree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &degree_)));
          set_has_degree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_auto_use;
        break;
      }
      
      // optional int32 auto_use = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_use:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auto_use_)));
          set_has_auto_use();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_part;
        break;
      }
      
      // repeated int32 part = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_part:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_part())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_part())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_part;
        if (input->ExpectTag(48)) goto parse_magic_id;
        break;
      }
      
      // optional int32 magic_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magic_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magic_id_)));
          set_has_magic_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoMagicActBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->active(), output);
  }
  
  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }
  
  // optional int32 degree = 3;
  if (has_degree()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->degree(), output);
  }
  
  // optional int32 auto_use = 4;
  if (has_auto_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->auto_use(), output);
  }
  
  // repeated int32 part = 5;
  for (int i = 0; i < this->part_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->part(i), output);
  }
  
  // optional int32 magic_id = 6;
  if (has_magic_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->magic_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoMagicActBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->active(), target);
  }
  
  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }
  
  // optional int32 degree = 3;
  if (has_degree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->degree(), target);
  }
  
  // optional int32 auto_use = 4;
  if (has_auto_use()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->auto_use(), target);
  }
  
  // repeated int32 part = 5;
  for (int i = 0; i < this->part_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->part(i), target);
  }
  
  // optional int32 magic_id = 6;
  if (has_magic_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->magic_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoMagicActBase::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 active = 1;
    if (has_active()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->active());
    }
    
    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 degree = 3;
    if (has_degree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->degree());
    }
    
    // optional int32 auto_use = 4;
    if (has_auto_use()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auto_use());
    }
    
    // optional int32 magic_id = 6;
    if (has_magic_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magic_id());
    }
    
  }
  // repeated int32 part = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->part_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->part(i));
    }
    total_size += 1 * this->part_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoMagicActBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoMagicActBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoMagicActBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoMagicActBase::MergeFrom(const ProtoMagicActBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  part_.MergeFrom(from.part_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_degree()) {
      set_degree(from.degree());
    }
    if (from.has_auto_use()) {
      set_auto_use(from.auto_use());
    }
    if (from.has_magic_id()) {
      set_magic_id(from.magic_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoMagicActBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMagicActBase::CopyFrom(const ProtoMagicActBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMagicActBase::IsInitialized() const {
  
  return true;
}

void ProtoMagicActBase::Swap(ProtoMagicActBase* other) {
  if (other != this) {
    std::swap(active_, other->active_);
    std::swap(level_, other->level_);
    std::swap(degree_, other->degree_);
    std::swap(auto_use_, other->auto_use_);
    part_.Swap(&other->part_);
    std::swap(magic_id_, other->magic_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoMagicActBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoMagicActBase_descriptor_;
  metadata.reflection = ProtoMagicActBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SecretTShopItem::kItemIdFieldNumber;
const int SecretTShopItem::kBuyRecordFieldNumber;
const int SecretTShopItem::kBindFieldNumber;
const int SecretTShopItem::kPriceFieldNumber;
const int SecretTShopItem::kAmountFieldNumber;
#endif  // !_MSC_VER

SecretTShopItem::SecretTShopItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SecretTShopItem::InitAsDefaultInstance() {
}

SecretTShopItem::SecretTShopItem(const SecretTShopItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SecretTShopItem::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0;
  buy_record_ = 0;
  bind_ = 0;
  price_ = 0;
  amount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SecretTShopItem::~SecretTShopItem() {
  SharedDtor();
}

void SecretTShopItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SecretTShopItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SecretTShopItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SecretTShopItem_descriptor_;
}

const SecretTShopItem& SecretTShopItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

SecretTShopItem* SecretTShopItem::default_instance_ = NULL;

SecretTShopItem* SecretTShopItem::New() const {
  return new SecretTShopItem;
}

void SecretTShopItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0;
    buy_record_ = 0;
    bind_ = 0;
    price_ = 0;
    amount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SecretTShopItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buy_record;
        break;
      }
      
      // optional int32 buy_record = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_record:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_record_)));
          set_has_buy_record();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bind;
        break;
      }
      
      // optional int32 bind = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bind_)));
          set_has_bind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_price;
        break;
      }
      
      // optional int32 price = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_amount;
        break;
      }
      
      // optional int32 amount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SecretTShopItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_id(), output);
  }
  
  // optional int32 buy_record = 2;
  if (has_buy_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->buy_record(), output);
  }
  
  // optional int32 bind = 3;
  if (has_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bind(), output);
  }
  
  // optional int32 price = 4;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->price(), output);
  }
  
  // optional int32 amount = 5;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->amount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SecretTShopItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_id(), target);
  }
  
  // optional int32 buy_record = 2;
  if (has_buy_record()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->buy_record(), target);
  }
  
  // optional int32 bind = 3;
  if (has_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bind(), target);
  }
  
  // optional int32 price = 4;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->price(), target);
  }
  
  // optional int32 amount = 5;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->amount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SecretTShopItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }
    
    // optional int32 buy_record = 2;
    if (has_buy_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_record());
    }
    
    // optional int32 bind = 3;
    if (has_bind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bind());
    }
    
    // optional int32 price = 4;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }
    
    // optional int32 amount = 5;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->amount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SecretTShopItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SecretTShopItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SecretTShopItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SecretTShopItem::MergeFrom(const SecretTShopItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_buy_record()) {
      set_buy_record(from.buy_record());
    }
    if (from.has_bind()) {
      set_bind(from.bind());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SecretTShopItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecretTShopItem::CopyFrom(const SecretTShopItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecretTShopItem::IsInitialized() const {
  
  return true;
}

void SecretTShopItem::Swap(SecretTShopItem* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(buy_record_, other->buy_record_);
    std::swap(bind_, other->bind_);
    std::swap(price_, other->price_);
    std::swap(amount_, other->amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SecretTShopItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SecretTShopItem_descriptor_;
  metadata.reflection = SecretTShopItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StRankUnit::kPlayerIdFieldNumber;
const int StRankUnit::kPlayerNameFieldNumber;
const int StRankUnit::kValueFieldNumber;
const int StRankUnit::kRankFieldNumber;
const int StRankUnit::kCoordFieldNumber;
#endif  // !_MSC_VER

StRankUnit::StRankUnit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StRankUnit::InitAsDefaultInstance() {
  coord_ = const_cast< ::ProtoCoord*>(&::ProtoCoord::default_instance());
}

StRankUnit::StRankUnit(const StRankUnit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StRankUnit::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_LONGLONG(0);
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = 0;
  rank_ = 0;
  coord_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StRankUnit::~StRankUnit() {
  SharedDtor();
}

void StRankUnit::SharedDtor() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (this != default_instance_) {
    delete coord_;
  }
}

void StRankUnit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StRankUnit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StRankUnit_descriptor_;
}

const StRankUnit& StRankUnit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

StRankUnit* StRankUnit::default_instance_ = NULL;

StRankUnit* StRankUnit::New() const {
  return new StRankUnit;
}

void StRankUnit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_LONGLONG(0);
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::kEmptyString) {
        player_name_->clear();
      }
    }
    value_ = 0;
    rank_ = 0;
    if (has_coord()) {
      if (coord_ != NULL) coord_->::ProtoCoord::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StRankUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_name;
        break;
      }
      
      // optional string player_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }
      
      // optional int32 value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rank;
        break;
      }
      
      // optional int32 rank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_coord;
        break;
      }
      
      // optional .ProtoCoord coord = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_coord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coord()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StRankUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->player_id(), output);
  }
  
  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->player_name(), output);
  }
  
  // optional int32 value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->value(), output);
  }
  
  // optional int32 rank = 4;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rank(), output);
  }
  
  // optional .ProtoCoord coord = 5;
  if (has_coord()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->coord(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StRankUnit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->player_id(), target);
  }
  
  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_name(), target);
  }
  
  // optional int32 value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->value(), target);
  }
  
  // optional int32 rank = 4;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rank(), target);
  }
  
  // optional .ProtoCoord coord = 5;
  if (has_coord()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->coord(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StRankUnit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_id());
    }
    
    // optional string player_name = 2;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }
    
    // optional int32 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
    // optional int32 rank = 4;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
    // optional .ProtoCoord coord = 5;
    if (has_coord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->coord());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StRankUnit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StRankUnit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StRankUnit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StRankUnit::MergeFrom(const StRankUnit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_coord()) {
      mutable_coord()->::ProtoCoord::MergeFrom(from.coord());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StRankUnit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StRankUnit::CopyFrom(const StRankUnit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StRankUnit::IsInitialized() const {
  
  return true;
}

void StRankUnit::Swap(StRankUnit* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(player_name_, other->player_name_);
    std::swap(value_, other->value_);
    std::swap(rank_, other->rank_);
    std::swap(coord_, other->coord_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StRankUnit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StRankUnit_descriptor_;
  metadata.reflection = StRankUnit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int STHistoryRankUnit::kPlayerIdFieldNumber;
const int STHistoryRankUnit::kNameFieldNumber;
const int STHistoryRankUnit::kLevelFieldNumber;
const int STHistoryRankUnit::kFightFieldNumber;
const int STHistoryRankUnit::kValFieldNumber;
const int STHistoryRankUnit::kRankFieldNumber;
#endif  // !_MSC_VER

STHistoryRankUnit::STHistoryRankUnit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void STHistoryRankUnit::InitAsDefaultInstance() {
}

STHistoryRankUnit::STHistoryRankUnit(const STHistoryRankUnit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void STHistoryRankUnit::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  fight_ = 0;
  val_ = 0;
  rank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

STHistoryRankUnit::~STHistoryRankUnit() {
  SharedDtor();
}

void STHistoryRankUnit::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void STHistoryRankUnit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* STHistoryRankUnit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return STHistoryRankUnit_descriptor_;
}

const STHistoryRankUnit& STHistoryRankUnit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

STHistoryRankUnit* STHistoryRankUnit::default_instance_ = NULL;

STHistoryRankUnit* STHistoryRankUnit::New() const {
  return new STHistoryRankUnit;
}

void STHistoryRankUnit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0;
    fight_ = 0;
    val_ = 0;
    rank_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool STHistoryRankUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }
      
      // optional int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fight;
        break;
      }
      
      // optional int32 fight = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_val;
        break;
      }
      
      // optional int32 val = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &val_)));
          set_has_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rank;
        break;
      }
      
      // optional int32 rank = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void STHistoryRankUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->player_id(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }
  
  // optional int32 fight = 4;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fight(), output);
  }
  
  // optional int32 val = 5;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->val(), output);
  }
  
  // optional int32 rank = 6;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rank(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* STHistoryRankUnit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->player_id(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }
  
  // optional int32 fight = 4;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fight(), target);
  }
  
  // optional int32 val = 5;
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->val(), target);
  }
  
  // optional int32 rank = 6;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rank(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int STHistoryRankUnit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_id());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 fight = 4;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight());
    }
    
    // optional int32 val = 5;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->val());
    }
    
    // optional int32 rank = 6;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void STHistoryRankUnit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const STHistoryRankUnit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const STHistoryRankUnit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void STHistoryRankUnit::MergeFrom(const STHistoryRankUnit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void STHistoryRankUnit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STHistoryRankUnit::CopyFrom(const STHistoryRankUnit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STHistoryRankUnit::IsInitialized() const {
  
  return true;
}

void STHistoryRankUnit::Swap(STHistoryRankUnit* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(fight_, other->fight_);
    std::swap(val_, other->val_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata STHistoryRankUnit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = STHistoryRankUnit_descriptor_;
  metadata.reflection = STHistoryRankUnit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PTLeagueItem::kIdFieldNumber;
const int PTLeagueItem::kNameFieldNumber;
const int PTLeagueItem::kResultFieldNumber;
#endif  // !_MSC_VER

PTLeagueItem::PTLeagueItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PTLeagueItem::InitAsDefaultInstance() {
}

PTLeagueItem::PTLeagueItem(const PTLeagueItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PTLeagueItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PTLeagueItem::~PTLeagueItem() {
  SharedDtor();
}

void PTLeagueItem::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PTLeagueItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PTLeagueItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PTLeagueItem_descriptor_;
}

const PTLeagueItem& PTLeagueItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

PTLeagueItem* PTLeagueItem::default_instance_ = NULL;

PTLeagueItem* PTLeagueItem::New() const {
  return new PTLeagueItem;
}

void PTLeagueItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PTLeagueItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }
      
      // repeated int32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_result())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_result())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PTLeagueItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // repeated int32 result = 3;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->result(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PTLeagueItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // repeated int32 result = 3;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->result(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PTLeagueItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  // repeated int32 result = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->result_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->result(i));
    }
    total_size += 1 * this->result_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PTLeagueItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PTLeagueItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PTLeagueItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PTLeagueItem::MergeFrom(const PTLeagueItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PTLeagueItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PTLeagueItem::CopyFrom(const PTLeagueItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PTLeagueItem::IsInitialized() const {
  
  return true;
}

void PTLeagueItem::Swap(PTLeagueItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    result_.Swap(&other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PTLeagueItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PTLeagueItem_descriptor_;
  metadata.reflection = PTLeagueItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoSession::kAccountFieldNumber;
const int ProtoSession::kSessionFieldNumber;
#endif  // !_MSC_VER

ProtoSession::ProtoSession()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoSession::InitAsDefaultInstance() {
}

ProtoSession::ProtoSession(const ProtoSession& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoSession::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  session_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoSession::~ProtoSession() {
  SharedDtor();
}

void ProtoSession::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (session_ != &::google::protobuf::internal::kEmptyString) {
    delete session_;
  }
  if (this != default_instance_) {
  }
}

void ProtoSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoSession::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoSession_descriptor_;
}

const ProtoSession& ProtoSession::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoSession* ProtoSession::default_instance_ = NULL;

ProtoSession* ProtoSession::New() const {
  return new ProtoSession;
}

void ProtoSession::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_session()) {
      if (session_ != &::google::protobuf::internal::kEmptyString) {
        session_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_session;
        break;
      }
      
      // optional string session = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session().data(), this->session().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }
  
  // optional string session = 2;
  if (has_session()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session().data(), this->session().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->session(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoSession::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }
  
  // optional string session = 2;
  if (has_session()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session().data(), this->session().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoSession::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }
    
    // optional string session = 2;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoSession::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoSession* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoSession*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoSession::MergeFrom(const ProtoSession& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_session()) {
      set_session(from.session());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoSession::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoSession::CopyFrom(const ProtoSession& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoSession::IsInitialized() const {
  
  return true;
}

void ProtoSession::Swap(ProtoSession* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(session_, other->session_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoSession::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoSession_descriptor_;
  metadata.reflection = ProtoSession_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Illustrations::kIllusIdFieldNumber;
const int Illustrations::kIllusClassIdFieldNumber;
const int Illustrations::kIllusGroupIdFieldNumber;
const int Illustrations::kIllusLevelFieldNumber;
const int Illustrations::kUpgradeGoodsIdFieldNumber;
const int Illustrations::kUpgradeGoodsAmountFieldNumber;
const int Illustrations::kOpenLevelFieldNumber;
const int Illustrations::kAttrTypeFieldNumber;
const int Illustrations::kCurValueFieldNumber;
#endif  // !_MSC_VER

Illustrations::Illustrations()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Illustrations::InitAsDefaultInstance() {
}

Illustrations::Illustrations(const Illustrations& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Illustrations::SharedCtor() {
  _cached_size_ = 0;
  illus_id_ = 0;
  illus_class_id_ = 0;
  illus_group_id_ = 0;
  illus_level_ = 0;
  upgrade_goods_id_ = 0;
  upgrade_goods_amount_ = 0;
  open_level_ = 0;
  attr_type_ = 0;
  cur_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Illustrations::~Illustrations() {
  SharedDtor();
}

void Illustrations::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Illustrations::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Illustrations::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Illustrations_descriptor_;
}

const Illustrations& Illustrations::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

Illustrations* Illustrations::default_instance_ = NULL;

Illustrations* Illustrations::New() const {
  return new Illustrations;
}

void Illustrations::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    illus_id_ = 0;
    illus_class_id_ = 0;
    illus_group_id_ = 0;
    illus_level_ = 0;
    upgrade_goods_id_ = 0;
    upgrade_goods_amount_ = 0;
    open_level_ = 0;
    attr_type_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    cur_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Illustrations::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 illus_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &illus_id_)));
          set_has_illus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_illus_class_id;
        break;
      }
      
      // optional int32 illus_class_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_illus_class_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &illus_class_id_)));
          set_has_illus_class_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_illus_group_id;
        break;
      }
      
      // optional int32 illus_group_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_illus_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &illus_group_id_)));
          set_has_illus_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_illus_level;
        break;
      }
      
      // optional int32 illus_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_illus_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &illus_level_)));
          set_has_illus_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_upgrade_goods_id;
        break;
      }
      
      // optional int32 upgrade_goods_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgrade_goods_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgrade_goods_id_)));
          set_has_upgrade_goods_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_upgrade_goods_amount;
        break;
      }
      
      // optional int32 upgrade_goods_amount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgrade_goods_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgrade_goods_amount_)));
          set_has_upgrade_goods_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_open_level;
        break;
      }
      
      // optional int32 open_level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_level_)));
          set_has_open_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_attr_type;
        break;
      }
      
      // optional int32 attr_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attr_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attr_type_)));
          set_has_attr_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_cur_value;
        break;
      }
      
      // optional int32 cur_value = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_value_)));
          set_has_cur_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Illustrations::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 illus_id = 1;
  if (has_illus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->illus_id(), output);
  }
  
  // optional int32 illus_class_id = 2;
  if (has_illus_class_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->illus_class_id(), output);
  }
  
  // optional int32 illus_group_id = 3;
  if (has_illus_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->illus_group_id(), output);
  }
  
  // optional int32 illus_level = 4;
  if (has_illus_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->illus_level(), output);
  }
  
  // optional int32 upgrade_goods_id = 5;
  if (has_upgrade_goods_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->upgrade_goods_id(), output);
  }
  
  // optional int32 upgrade_goods_amount = 6;
  if (has_upgrade_goods_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->upgrade_goods_amount(), output);
  }
  
  // optional int32 open_level = 7;
  if (has_open_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->open_level(), output);
  }
  
  // optional int32 attr_type = 8;
  if (has_attr_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->attr_type(), output);
  }
  
  // optional int32 cur_value = 9;
  if (has_cur_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->cur_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Illustrations::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 illus_id = 1;
  if (has_illus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->illus_id(), target);
  }
  
  // optional int32 illus_class_id = 2;
  if (has_illus_class_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->illus_class_id(), target);
  }
  
  // optional int32 illus_group_id = 3;
  if (has_illus_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->illus_group_id(), target);
  }
  
  // optional int32 illus_level = 4;
  if (has_illus_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->illus_level(), target);
  }
  
  // optional int32 upgrade_goods_id = 5;
  if (has_upgrade_goods_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->upgrade_goods_id(), target);
  }
  
  // optional int32 upgrade_goods_amount = 6;
  if (has_upgrade_goods_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->upgrade_goods_amount(), target);
  }
  
  // optional int32 open_level = 7;
  if (has_open_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->open_level(), target);
  }
  
  // optional int32 attr_type = 8;
  if (has_attr_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->attr_type(), target);
  }
  
  // optional int32 cur_value = 9;
  if (has_cur_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->cur_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Illustrations::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 illus_id = 1;
    if (has_illus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->illus_id());
    }
    
    // optional int32 illus_class_id = 2;
    if (has_illus_class_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->illus_class_id());
    }
    
    // optional int32 illus_group_id = 3;
    if (has_illus_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->illus_group_id());
    }
    
    // optional int32 illus_level = 4;
    if (has_illus_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->illus_level());
    }
    
    // optional int32 upgrade_goods_id = 5;
    if (has_upgrade_goods_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgrade_goods_id());
    }
    
    // optional int32 upgrade_goods_amount = 6;
    if (has_upgrade_goods_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgrade_goods_amount());
    }
    
    // optional int32 open_level = 7;
    if (has_open_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open_level());
    }
    
    // optional int32 attr_type = 8;
    if (has_attr_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attr_type());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 cur_value = 9;
    if (has_cur_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Illustrations::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Illustrations* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Illustrations*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Illustrations::MergeFrom(const Illustrations& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_illus_id()) {
      set_illus_id(from.illus_id());
    }
    if (from.has_illus_class_id()) {
      set_illus_class_id(from.illus_class_id());
    }
    if (from.has_illus_group_id()) {
      set_illus_group_id(from.illus_group_id());
    }
    if (from.has_illus_level()) {
      set_illus_level(from.illus_level());
    }
    if (from.has_upgrade_goods_id()) {
      set_upgrade_goods_id(from.upgrade_goods_id());
    }
    if (from.has_upgrade_goods_amount()) {
      set_upgrade_goods_amount(from.upgrade_goods_amount());
    }
    if (from.has_open_level()) {
      set_open_level(from.open_level());
    }
    if (from.has_attr_type()) {
      set_attr_type(from.attr_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cur_value()) {
      set_cur_value(from.cur_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Illustrations::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Illustrations::CopyFrom(const Illustrations& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Illustrations::IsInitialized() const {
  
  return true;
}

void Illustrations::Swap(Illustrations* other) {
  if (other != this) {
    std::swap(illus_id_, other->illus_id_);
    std::swap(illus_class_id_, other->illus_class_id_);
    std::swap(illus_group_id_, other->illus_group_id_);
    std::swap(illus_level_, other->illus_level_);
    std::swap(upgrade_goods_id_, other->upgrade_goods_id_);
    std::swap(upgrade_goods_amount_, other->upgrade_goods_amount_);
    std::swap(open_level_, other->open_level_);
    std::swap(attr_type_, other->attr_type_);
    std::swap(cur_value_, other->cur_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Illustrations::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Illustrations_descriptor_;
  metadata.reflection = Illustrations_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Illus_group::kGroupIdFieldNumber;
const int Illus_group::kGroupTypeFieldNumber;
#endif  // !_MSC_VER

Illus_group::Illus_group()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Illus_group::InitAsDefaultInstance() {
}

Illus_group::Illus_group(const Illus_group& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Illus_group::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0;
  group_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Illus_group::~Illus_group() {
  SharedDtor();
}

void Illus_group::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Illus_group::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Illus_group::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Illus_group_descriptor_;
}

const Illus_group& Illus_group::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

Illus_group* Illus_group::default_instance_ = NULL;

Illus_group* Illus_group::New() const {
  return new Illus_group;
}

void Illus_group::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = 0;
    group_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Illus_group::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_group_type;
        break;
      }
      
      // optional int32 group_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_type_)));
          set_has_group_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Illus_group::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->group_id(), output);
  }
  
  // optional int32 group_type = 2;
  if (has_group_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->group_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Illus_group::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->group_id(), target);
  }
  
  // optional int32 group_type = 2;
  if (has_group_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->group_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Illus_group::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group_id());
    }
    
    // optional int32 group_type = 2;
    if (has_group_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Illus_group::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Illus_group* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Illus_group*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Illus_group::MergeFrom(const Illus_group& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_group_type()) {
      set_group_type(from.group_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Illus_group::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Illus_group::CopyFrom(const Illus_group& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Illus_group::IsInitialized() const {
  
  return true;
}

void Illus_group::Swap(Illus_group* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(group_type_, other->group_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Illus_group::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Illus_group_descriptor_;
  metadata.reflection = Illus_group_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Illus_class::kGroupListFieldNumber;
const int Illus_class::kClassIdFieldNumber;
#endif  // !_MSC_VER

Illus_class::Illus_class()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Illus_class::InitAsDefaultInstance() {
}

Illus_class::Illus_class(const Illus_class& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Illus_class::SharedCtor() {
  _cached_size_ = 0;
  class_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Illus_class::~Illus_class() {
  SharedDtor();
}

void Illus_class::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Illus_class::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Illus_class::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Illus_class_descriptor_;
}

const Illus_class& Illus_class::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

Illus_class* Illus_class::default_instance_ = NULL;

Illus_class* Illus_class::New() const {
  return new Illus_class;
}

void Illus_class::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    class_id_ = 0;
  }
  group_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Illus_class::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Illus_group group_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_group_list;
        if (input->ExpectTag(16)) goto parse_class_id;
        break;
      }
      
      // optional int32 class_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_class_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &class_id_)));
          set_has_class_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Illus_class::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Illus_group group_list = 1;
  for (int i = 0; i < this->group_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->group_list(i), output);
  }
  
  // optional int32 class_id = 2;
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->class_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Illus_class::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Illus_group group_list = 1;
  for (int i = 0; i < this->group_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->group_list(i), target);
  }
  
  // optional int32 class_id = 2;
  if (has_class_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->class_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Illus_class::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 class_id = 2;
    if (has_class_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->class_id());
    }
    
  }
  // repeated .Illus_group group_list = 1;
  total_size += 1 * this->group_list_size();
  for (int i = 0; i < this->group_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->group_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Illus_class::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Illus_class* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Illus_class*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Illus_class::MergeFrom(const Illus_class& from) {
  GOOGLE_CHECK_NE(&from, this);
  group_list_.MergeFrom(from.group_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_class_id()) {
      set_class_id(from.class_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Illus_class::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Illus_class::CopyFrom(const Illus_class& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Illus_class::IsInitialized() const {
  
  return true;
}

void Illus_class::Swap(Illus_class* other) {
  if (other != this) {
    group_list_.Swap(&other->group_list_);
    std::swap(class_id_, other->class_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Illus_class::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Illus_class_descriptor_;
  metadata.reflection = Illus_class_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoFloorInfo::kFloorIdFieldNumber;
const int ProtoFloorInfo::kIsSpecialFieldNumber;
const int ProtoFloorInfo::kPassTickFieldNumber;
const int ProtoFloorInfo::kIsTodayPassFieldNumber;
#endif  // !_MSC_VER

ProtoFloorInfo::ProtoFloorInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoFloorInfo::InitAsDefaultInstance() {
}

ProtoFloorInfo::ProtoFloorInfo(const ProtoFloorInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoFloorInfo::SharedCtor() {
  _cached_size_ = 0;
  floor_id_ = 0;
  is_special_ = 0;
  pass_tick_ = GOOGLE_LONGLONG(0);
  is_today_pass_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoFloorInfo::~ProtoFloorInfo() {
  SharedDtor();
}

void ProtoFloorInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoFloorInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoFloorInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoFloorInfo_descriptor_;
}

const ProtoFloorInfo& ProtoFloorInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoFloorInfo* ProtoFloorInfo::default_instance_ = NULL;

ProtoFloorInfo* ProtoFloorInfo::New() const {
  return new ProtoFloorInfo;
}

void ProtoFloorInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    floor_id_ = 0;
    is_special_ = 0;
    pass_tick_ = GOOGLE_LONGLONG(0);
    is_today_pass_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoFloorInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 floor_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &floor_id_)));
          set_has_floor_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_special;
        break;
      }
      
      // optional int32 is_special = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_special:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_special_)));
          set_has_is_special();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pass_tick;
        break;
      }
      
      // optional int64 pass_tick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pass_tick_)));
          set_has_pass_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_today_pass;
        break;
      }
      
      // optional int32 is_today_pass = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_today_pass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_today_pass_)));
          set_has_is_today_pass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoFloorInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 floor_id = 1;
  if (has_floor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->floor_id(), output);
  }
  
  // optional int32 is_special = 2;
  if (has_is_special()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->is_special(), output);
  }
  
  // optional int64 pass_tick = 3;
  if (has_pass_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->pass_tick(), output);
  }
  
  // optional int32 is_today_pass = 4;
  if (has_is_today_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->is_today_pass(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoFloorInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 floor_id = 1;
  if (has_floor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->floor_id(), target);
  }
  
  // optional int32 is_special = 2;
  if (has_is_special()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->is_special(), target);
  }
  
  // optional int64 pass_tick = 3;
  if (has_pass_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->pass_tick(), target);
  }
  
  // optional int32 is_today_pass = 4;
  if (has_is_today_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->is_today_pass(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoFloorInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 floor_id = 1;
    if (has_floor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->floor_id());
    }
    
    // optional int32 is_special = 2;
    if (has_is_special()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_special());
    }
    
    // optional int64 pass_tick = 3;
    if (has_pass_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pass_tick());
    }
    
    // optional int32 is_today_pass = 4;
    if (has_is_today_pass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_today_pass());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoFloorInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoFloorInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoFloorInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoFloorInfo::MergeFrom(const ProtoFloorInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_floor_id()) {
      set_floor_id(from.floor_id());
    }
    if (from.has_is_special()) {
      set_is_special(from.is_special());
    }
    if (from.has_pass_tick()) {
      set_pass_tick(from.pass_tick());
    }
    if (from.has_is_today_pass()) {
      set_is_today_pass(from.is_today_pass());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoFloorInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoFloorInfo::CopyFrom(const ProtoFloorInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoFloorInfo::IsInitialized() const {
  
  return true;
}

void ProtoFloorInfo::Swap(ProtoFloorInfo* other) {
  if (other != this) {
    std::swap(floor_id_, other->floor_id_);
    std::swap(is_special_, other->is_special_);
    std::swap(pass_tick_, other->pass_tick_);
    std::swap(is_today_pass_, other->is_today_pass_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoFloorInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoFloorInfo_descriptor_;
  metadata.reflection = ProtoFloorInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoLScoreInfo::kRoleRankFieldNumber;
const int ProtoLScoreInfo::kRoleNameFieldNumber;
const int ProtoLScoreInfo::kRoleHurtFieldNumber;
#endif  // !_MSC_VER

ProtoLScoreInfo::ProtoLScoreInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoLScoreInfo::InitAsDefaultInstance() {
}

ProtoLScoreInfo::ProtoLScoreInfo(const ProtoLScoreInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoLScoreInfo::SharedCtor() {
  _cached_size_ = 0;
  role_rank_ = 0;
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_hurt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoLScoreInfo::~ProtoLScoreInfo() {
  SharedDtor();
}

void ProtoLScoreInfo::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoLScoreInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoLScoreInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoLScoreInfo_descriptor_;
}

const ProtoLScoreInfo& ProtoLScoreInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoLScoreInfo* ProtoLScoreInfo::default_instance_ = NULL;

ProtoLScoreInfo* ProtoLScoreInfo::New() const {
  return new ProtoLScoreInfo;
}

void ProtoLScoreInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_rank_ = 0;
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    role_hurt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoLScoreInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 role_rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_rank_)));
          set_has_role_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_name;
        break;
      }
      
      // optional string role_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_hurt;
        break;
      }
      
      // optional int32 role_hurt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_hurt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_hurt_)));
          set_has_role_hurt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoLScoreInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 role_rank = 1;
  if (has_role_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->role_rank(), output);
  }
  
  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->role_name(), output);
  }
  
  // optional int32 role_hurt = 3;
  if (has_role_hurt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->role_hurt(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoLScoreInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 role_rank = 1;
  if (has_role_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->role_rank(), target);
  }
  
  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }
  
  // optional int32 role_hurt = 3;
  if (has_role_hurt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->role_hurt(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoLScoreInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 role_rank = 1;
    if (has_role_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_rank());
    }
    
    // optional string role_name = 2;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }
    
    // optional int32 role_hurt = 3;
    if (has_role_hurt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_hurt());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoLScoreInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoLScoreInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoLScoreInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoLScoreInfo::MergeFrom(const ProtoLScoreInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_rank()) {
      set_role_rank(from.role_rank());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_role_hurt()) {
      set_role_hurt(from.role_hurt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoLScoreInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoLScoreInfo::CopyFrom(const ProtoLScoreInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoLScoreInfo::IsInitialized() const {
  
  return true;
}

void ProtoLScoreInfo::Swap(ProtoLScoreInfo* other) {
  if (other != this) {
    std::swap(role_rank_, other->role_rank_);
    std::swap(role_name_, other->role_name_);
    std::swap(role_hurt_, other->role_hurt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoLScoreInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoLScoreInfo_descriptor_;
  metadata.reflection = ProtoLScoreInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoScriptAdvance::kScriptSortFieldNumber;
const int ProtoScriptAdvance::kLeftTimesFieldNumber;
const int ProtoScriptAdvance::kResetTimesFieldNumber;
const int ProtoScriptAdvance::kIsSweepFieldNumber;
#endif  // !_MSC_VER

ProtoScriptAdvance::ProtoScriptAdvance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoScriptAdvance::InitAsDefaultInstance() {
}

ProtoScriptAdvance::ProtoScriptAdvance(const ProtoScriptAdvance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoScriptAdvance::SharedCtor() {
  _cached_size_ = 0;
  script_sort_ = 0;
  left_times_ = 0;
  reset_times_ = 0;
  is_sweep_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoScriptAdvance::~ProtoScriptAdvance() {
  SharedDtor();
}

void ProtoScriptAdvance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoScriptAdvance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoScriptAdvance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoScriptAdvance_descriptor_;
}

const ProtoScriptAdvance& ProtoScriptAdvance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoScriptAdvance* ProtoScriptAdvance::default_instance_ = NULL;

ProtoScriptAdvance* ProtoScriptAdvance::New() const {
  return new ProtoScriptAdvance;
}

void ProtoScriptAdvance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    script_sort_ = 0;
    left_times_ = 0;
    reset_times_ = 0;
    is_sweep_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoScriptAdvance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 script_sort = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &script_sort_)));
          set_has_script_sort();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_left_times;
        break;
      }
      
      // optional int32 left_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_times_)));
          set_has_left_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reset_times;
        break;
      }
      
      // optional int32 reset_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reset_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reset_times_)));
          set_has_reset_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_sweep;
        break;
      }
      
      // optional int32 is_sweep = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_sweep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_sweep_)));
          set_has_is_sweep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoScriptAdvance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 script_sort = 1;
  if (has_script_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->script_sort(), output);
  }
  
  // optional int32 left_times = 2;
  if (has_left_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->left_times(), output);
  }
  
  // optional int32 reset_times = 3;
  if (has_reset_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reset_times(), output);
  }
  
  // optional int32 is_sweep = 4;
  if (has_is_sweep()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->is_sweep(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoScriptAdvance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 script_sort = 1;
  if (has_script_sort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->script_sort(), target);
  }
  
  // optional int32 left_times = 2;
  if (has_left_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->left_times(), target);
  }
  
  // optional int32 reset_times = 3;
  if (has_reset_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reset_times(), target);
  }
  
  // optional int32 is_sweep = 4;
  if (has_is_sweep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->is_sweep(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoScriptAdvance::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 script_sort = 1;
    if (has_script_sort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->script_sort());
    }
    
    // optional int32 left_times = 2;
    if (has_left_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_times());
    }
    
    // optional int32 reset_times = 3;
    if (has_reset_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reset_times());
    }
    
    // optional int32 is_sweep = 4;
    if (has_is_sweep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_sweep());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoScriptAdvance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoScriptAdvance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoScriptAdvance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoScriptAdvance::MergeFrom(const ProtoScriptAdvance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_script_sort()) {
      set_script_sort(from.script_sort());
    }
    if (from.has_left_times()) {
      set_left_times(from.left_times());
    }
    if (from.has_reset_times()) {
      set_reset_times(from.reset_times());
    }
    if (from.has_is_sweep()) {
      set_is_sweep(from.is_sweep());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoScriptAdvance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoScriptAdvance::CopyFrom(const ProtoScriptAdvance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoScriptAdvance::IsInitialized() const {
  
  return true;
}

void ProtoScriptAdvance::Swap(ProtoScriptAdvance* other) {
  if (other != this) {
    std::swap(script_sort_, other->script_sort_);
    std::swap(left_times_, other->left_times_);
    std::swap(reset_times_, other->reset_times_);
    std::swap(is_sweep_, other->is_sweep_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoScriptAdvance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoScriptAdvance_descriptor_;
  metadata.reflection = ProtoScriptAdvance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoScriptExpInfo::kChapterIdFieldNumber;
const int ProtoScriptExpInfo::kIsTodayPassFieldNumber;
const int ProtoScriptExpInfo::kIsPassFieldNumber;
const int ProtoScriptExpInfo::kIsOpenFieldNumber;
#endif  // !_MSC_VER

ProtoScriptExpInfo::ProtoScriptExpInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoScriptExpInfo::InitAsDefaultInstance() {
}

ProtoScriptExpInfo::ProtoScriptExpInfo(const ProtoScriptExpInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoScriptExpInfo::SharedCtor() {
  _cached_size_ = 0;
  chapter_id_ = 0;
  is_today_pass_ = 0;
  is_pass_ = 0;
  is_open_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoScriptExpInfo::~ProtoScriptExpInfo() {
  SharedDtor();
}

void ProtoScriptExpInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoScriptExpInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoScriptExpInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoScriptExpInfo_descriptor_;
}

const ProtoScriptExpInfo& ProtoScriptExpInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoScriptExpInfo* ProtoScriptExpInfo::default_instance_ = NULL;

ProtoScriptExpInfo* ProtoScriptExpInfo::New() const {
  return new ProtoScriptExpInfo;
}

void ProtoScriptExpInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chapter_id_ = 0;
    is_today_pass_ = 0;
    is_pass_ = 0;
    is_open_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoScriptExpInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chapter_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chapter_id_)));
          set_has_chapter_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_today_pass;
        break;
      }
      
      // optional int32 is_today_pass = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_today_pass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_today_pass_)));
          set_has_is_today_pass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_pass;
        break;
      }
      
      // optional int32 is_pass = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_pass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_pass_)));
          set_has_is_pass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_open;
        break;
      }
      
      // optional int32 is_open = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_open_)));
          set_has_is_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoScriptExpInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chapter_id = 1;
  if (has_chapter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chapter_id(), output);
  }
  
  // optional int32 is_today_pass = 2;
  if (has_is_today_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->is_today_pass(), output);
  }
  
  // optional int32 is_pass = 3;
  if (has_is_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->is_pass(), output);
  }
  
  // optional int32 is_open = 4;
  if (has_is_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->is_open(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoScriptExpInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 chapter_id = 1;
  if (has_chapter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chapter_id(), target);
  }
  
  // optional int32 is_today_pass = 2;
  if (has_is_today_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->is_today_pass(), target);
  }
  
  // optional int32 is_pass = 3;
  if (has_is_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->is_pass(), target);
  }
  
  // optional int32 is_open = 4;
  if (has_is_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->is_open(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoScriptExpInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chapter_id = 1;
    if (has_chapter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chapter_id());
    }
    
    // optional int32 is_today_pass = 2;
    if (has_is_today_pass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_today_pass());
    }
    
    // optional int32 is_pass = 3;
    if (has_is_pass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_pass());
    }
    
    // optional int32 is_open = 4;
    if (has_is_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_open());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoScriptExpInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoScriptExpInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoScriptExpInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoScriptExpInfo::MergeFrom(const ProtoScriptExpInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chapter_id()) {
      set_chapter_id(from.chapter_id());
    }
    if (from.has_is_today_pass()) {
      set_is_today_pass(from.is_today_pass());
    }
    if (from.has_is_pass()) {
      set_is_pass(from.is_pass());
    }
    if (from.has_is_open()) {
      set_is_open(from.is_open());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoScriptExpInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoScriptExpInfo::CopyFrom(const ProtoScriptExpInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoScriptExpInfo::IsInitialized() const {
  
  return true;
}

void ProtoScriptExpInfo::Swap(ProtoScriptExpInfo* other) {
  if (other != this) {
    std::swap(chapter_id_, other->chapter_id_);
    std::swap(is_today_pass_, other->is_today_pass_);
    std::swap(is_pass_, other->is_pass_);
    std::swap(is_open_, other->is_open_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoScriptExpInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoScriptExpInfo_descriptor_;
  metadata.reflection = ProtoScriptExpInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoSpecialAwardInfo::kScriptWaveIdFieldNumber;
const int ProtoSpecialAwardInfo::kScriptSortFieldNumber;
const int ProtoSpecialAwardInfo::kWaveFieldNumber;
const int ProtoSpecialAwardInfo::kIsGetFieldNumber;
#endif  // !_MSC_VER

ProtoSpecialAwardInfo::ProtoSpecialAwardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoSpecialAwardInfo::InitAsDefaultInstance() {
}

ProtoSpecialAwardInfo::ProtoSpecialAwardInfo(const ProtoSpecialAwardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoSpecialAwardInfo::SharedCtor() {
  _cached_size_ = 0;
  script_wave_id_ = 0;
  script_sort_ = 0;
  wave_ = 0;
  is_get_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoSpecialAwardInfo::~ProtoSpecialAwardInfo() {
  SharedDtor();
}

void ProtoSpecialAwardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoSpecialAwardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoSpecialAwardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoSpecialAwardInfo_descriptor_;
}

const ProtoSpecialAwardInfo& ProtoSpecialAwardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoSpecialAwardInfo* ProtoSpecialAwardInfo::default_instance_ = NULL;

ProtoSpecialAwardInfo* ProtoSpecialAwardInfo::New() const {
  return new ProtoSpecialAwardInfo;
}

void ProtoSpecialAwardInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    script_wave_id_ = 0;
    script_sort_ = 0;
    wave_ = 0;
    is_get_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoSpecialAwardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 script_wave_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &script_wave_id_)));
          set_has_script_wave_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_script_sort;
        break;
      }
      
      // optional int32 script_sort = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_script_sort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &script_sort_)));
          set_has_script_sort();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wave;
        break;
      }
      
      // optional int32 wave = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wave_)));
          set_has_wave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_get;
        break;
      }
      
      // optional int32 is_get = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_get:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_get_)));
          set_has_is_get();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoSpecialAwardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 script_wave_id = 1;
  if (has_script_wave_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->script_wave_id(), output);
  }
  
  // optional int32 script_sort = 2;
  if (has_script_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->script_sort(), output);
  }
  
  // optional int32 wave = 3;
  if (has_wave()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wave(), output);
  }
  
  // optional int32 is_get = 4;
  if (has_is_get()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->is_get(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoSpecialAwardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 script_wave_id = 1;
  if (has_script_wave_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->script_wave_id(), target);
  }
  
  // optional int32 script_sort = 2;
  if (has_script_sort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->script_sort(), target);
  }
  
  // optional int32 wave = 3;
  if (has_wave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wave(), target);
  }
  
  // optional int32 is_get = 4;
  if (has_is_get()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->is_get(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoSpecialAwardInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 script_wave_id = 1;
    if (has_script_wave_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->script_wave_id());
    }
    
    // optional int32 script_sort = 2;
    if (has_script_sort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->script_sort());
    }
    
    // optional int32 wave = 3;
    if (has_wave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wave());
    }
    
    // optional int32 is_get = 4;
    if (has_is_get()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_get());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoSpecialAwardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoSpecialAwardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoSpecialAwardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoSpecialAwardInfo::MergeFrom(const ProtoSpecialAwardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_script_wave_id()) {
      set_script_wave_id(from.script_wave_id());
    }
    if (from.has_script_sort()) {
      set_script_sort(from.script_sort());
    }
    if (from.has_wave()) {
      set_wave(from.wave());
    }
    if (from.has_is_get()) {
      set_is_get(from.is_get());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoSpecialAwardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoSpecialAwardInfo::CopyFrom(const ProtoSpecialAwardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoSpecialAwardInfo::IsInitialized() const {
  
  return true;
}

void ProtoSpecialAwardInfo::Swap(ProtoSpecialAwardInfo* other) {
  if (other != this) {
    std::swap(script_wave_id_, other->script_wave_id_);
    std::swap(script_sort_, other->script_sort_);
    std::swap(wave_, other->wave_);
    std::swap(is_get_, other->is_get_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoSpecialAwardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoSpecialAwardInfo_descriptor_;
  metadata.reflection = ProtoSpecialAwardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoServer::kIdFieldNumber;
const int ProtoServer::kNameFieldNumber;
const int ProtoServer::kPrevFieldNumber;
const int ProtoServer::kFlagFieldNumber;
const int ProtoServer::kCurFlagFieldNumber;
#endif  // !_MSC_VER

ProtoServer::ProtoServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoServer::InitAsDefaultInstance() {
}

ProtoServer::ProtoServer(const ProtoServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoServer::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prev_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cur_flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoServer::~ProtoServer() {
  SharedDtor();
}

void ProtoServer::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (prev_ != &::google::protobuf::internal::kEmptyString) {
    delete prev_;
  }
  if (flag_ != &::google::protobuf::internal::kEmptyString) {
    delete flag_;
  }
  if (cur_flag_ != &::google::protobuf::internal::kEmptyString) {
    delete cur_flag_;
  }
  if (this != default_instance_) {
  }
}

void ProtoServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoServer_descriptor_;
}

const ProtoServer& ProtoServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoServer* ProtoServer::default_instance_ = NULL;

ProtoServer* ProtoServer::New() const {
  return new ProtoServer;
}

void ProtoServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_prev()) {
      if (prev_ != &::google::protobuf::internal::kEmptyString) {
        prev_->clear();
      }
    }
    if (has_flag()) {
      if (flag_ != &::google::protobuf::internal::kEmptyString) {
        flag_->clear();
      }
    }
    if (has_cur_flag()) {
      if (cur_flag_ != &::google::protobuf::internal::kEmptyString) {
        cur_flag_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_prev;
        break;
      }
      
      // optional string prev = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prev()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->prev().data(), this->prev().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_flag;
        break;
      }
      
      // optional string flag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_flag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->flag().data(), this->flag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_cur_flag;
        break;
      }
      
      // optional string cur_flag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cur_flag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cur_flag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cur_flag().data(), this->cur_flag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional string prev = 3;
  if (has_prev()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prev().data(), this->prev().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->prev(), output);
  }
  
  // optional string flag = 4;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->flag().data(), this->flag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->flag(), output);
  }
  
  // optional string cur_flag = 5;
  if (has_cur_flag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cur_flag().data(), this->cur_flag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->cur_flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional string prev = 3;
  if (has_prev()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prev().data(), this->prev().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->prev(), target);
  }
  
  // optional string flag = 4;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->flag().data(), this->flag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->flag(), target);
  }
  
  // optional string cur_flag = 5;
  if (has_cur_flag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cur_flag().data(), this->cur_flag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->cur_flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoServer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string prev = 3;
    if (has_prev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prev());
    }
    
    // optional string flag = 4;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->flag());
    }
    
    // optional string cur_flag = 5;
    if (has_cur_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cur_flag());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoServer::MergeFrom(const ProtoServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_prev()) {
      set_prev(from.prev());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_cur_flag()) {
      set_cur_flag(from.cur_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoServer::CopyFrom(const ProtoServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoServer::IsInitialized() const {
  
  return true;
}

void ProtoServer::Swap(ProtoServer* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(prev_, other->prev_);
    std::swap(flag_, other->flag_);
    std::swap(cur_flag_, other->cur_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoServer_descriptor_;
  metadata.reflection = ProtoServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoWorldBossInfo::kBossSceneIdFieldNumber;
const int ProtoWorldBossInfo::kBossStatusFieldNumber;
const int ProtoWorldBossInfo::kBloodFieldNumber;
const int ProtoWorldBossInfo::kKillerFieldNumber;
const int ProtoWorldBossInfo::kIsFullFieldNumber;
#endif  // !_MSC_VER

ProtoWorldBossInfo::ProtoWorldBossInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoWorldBossInfo::InitAsDefaultInstance() {
}

ProtoWorldBossInfo::ProtoWorldBossInfo(const ProtoWorldBossInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoWorldBossInfo::SharedCtor() {
  _cached_size_ = 0;
  boss_scene_id_ = 0;
  boss_status_ = 0;
  blood_ = 0;
  killer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_full_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoWorldBossInfo::~ProtoWorldBossInfo() {
  SharedDtor();
}

void ProtoWorldBossInfo::SharedDtor() {
  if (killer_ != &::google::protobuf::internal::kEmptyString) {
    delete killer_;
  }
  if (this != default_instance_) {
  }
}

void ProtoWorldBossInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoWorldBossInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoWorldBossInfo_descriptor_;
}

const ProtoWorldBossInfo& ProtoWorldBossInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoWorldBossInfo* ProtoWorldBossInfo::default_instance_ = NULL;

ProtoWorldBossInfo* ProtoWorldBossInfo::New() const {
  return new ProtoWorldBossInfo;
}

void ProtoWorldBossInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    boss_scene_id_ = 0;
    boss_status_ = 0;
    blood_ = 0;
    if (has_killer()) {
      if (killer_ != &::google::protobuf::internal::kEmptyString) {
        killer_->clear();
      }
    }
    is_full_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoWorldBossInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 boss_scene_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boss_scene_id_)));
          set_has_boss_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_boss_status;
        break;
      }
      
      // optional int32 boss_status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boss_status_)));
          set_has_boss_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_blood;
        break;
      }
      
      // optional double blood = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_blood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &blood_)));
          set_has_blood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_killer;
        break;
      }
      
      // optional string killer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_killer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_killer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->killer().data(), this->killer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_full;
        break;
      }
      
      // optional int32 is_full = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_full:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_full_)));
          set_has_is_full();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoWorldBossInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 boss_scene_id = 1;
  if (has_boss_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->boss_scene_id(), output);
  }
  
  // optional int32 boss_status = 2;
  if (has_boss_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->boss_status(), output);
  }
  
  // optional double blood = 3;
  if (has_blood()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->blood(), output);
  }
  
  // optional string killer = 4;
  if (has_killer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->killer().data(), this->killer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->killer(), output);
  }
  
  // optional int32 is_full = 5;
  if (has_is_full()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->is_full(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoWorldBossInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 boss_scene_id = 1;
  if (has_boss_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->boss_scene_id(), target);
  }
  
  // optional int32 boss_status = 2;
  if (has_boss_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->boss_status(), target);
  }
  
  // optional double blood = 3;
  if (has_blood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->blood(), target);
  }
  
  // optional string killer = 4;
  if (has_killer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->killer().data(), this->killer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->killer(), target);
  }
  
  // optional int32 is_full = 5;
  if (has_is_full()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->is_full(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoWorldBossInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 boss_scene_id = 1;
    if (has_boss_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boss_scene_id());
    }
    
    // optional int32 boss_status = 2;
    if (has_boss_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boss_status());
    }
    
    // optional double blood = 3;
    if (has_blood()) {
      total_size += 1 + 8;
    }
    
    // optional string killer = 4;
    if (has_killer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->killer());
    }
    
    // optional int32 is_full = 5;
    if (has_is_full()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_full());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoWorldBossInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoWorldBossInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoWorldBossInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoWorldBossInfo::MergeFrom(const ProtoWorldBossInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boss_scene_id()) {
      set_boss_scene_id(from.boss_scene_id());
    }
    if (from.has_boss_status()) {
      set_boss_status(from.boss_status());
    }
    if (from.has_blood()) {
      set_blood(from.blood());
    }
    if (from.has_killer()) {
      set_killer(from.killer());
    }
    if (from.has_is_full()) {
      set_is_full(from.is_full());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoWorldBossInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoWorldBossInfo::CopyFrom(const ProtoWorldBossInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoWorldBossInfo::IsInitialized() const {
  
  return true;
}

void ProtoWorldBossInfo::Swap(ProtoWorldBossInfo* other) {
  if (other != this) {
    std::swap(boss_scene_id_, other->boss_scene_id_);
    std::swap(boss_status_, other->boss_status_);
    std::swap(blood_, other->blood_);
    std::swap(killer_, other->killer_);
    std::swap(is_full_, other->is_full_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoWorldBossInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoWorldBossInfo_descriptor_;
  metadata.reflection = ProtoWorldBossInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoLeagueRankInfo::kLeagueIndexFieldNumber;
const int ProtoLeagueRankInfo::kLeagueNameFieldNumber;
const int ProtoLeagueRankInfo::kRankFieldNumber;
const int ProtoLeagueRankInfo::kHurtFieldNumber;
const int ProtoLeagueRankInfo::kScoreFieldNumber;
const int ProtoLeagueRankInfo::kSpaceIdFieldNumber;
#endif  // !_MSC_VER

ProtoLeagueRankInfo::ProtoLeagueRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoLeagueRankInfo::InitAsDefaultInstance() {
}

ProtoLeagueRankInfo::ProtoLeagueRankInfo(const ProtoLeagueRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoLeagueRankInfo::SharedCtor() {
  _cached_size_ = 0;
  league_index_ = GOOGLE_LONGLONG(0);
  league_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rank_ = 0;
  hurt_ = 0;
  score_ = 0;
  space_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoLeagueRankInfo::~ProtoLeagueRankInfo() {
  SharedDtor();
}

void ProtoLeagueRankInfo::SharedDtor() {
  if (league_name_ != &::google::protobuf::internal::kEmptyString) {
    delete league_name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoLeagueRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoLeagueRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoLeagueRankInfo_descriptor_;
}

const ProtoLeagueRankInfo& ProtoLeagueRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoLeagueRankInfo* ProtoLeagueRankInfo::default_instance_ = NULL;

ProtoLeagueRankInfo* ProtoLeagueRankInfo::New() const {
  return new ProtoLeagueRankInfo;
}

void ProtoLeagueRankInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    league_index_ = GOOGLE_LONGLONG(0);
    if (has_league_name()) {
      if (league_name_ != &::google::protobuf::internal::kEmptyString) {
        league_name_->clear();
      }
    }
    rank_ = 0;
    hurt_ = 0;
    score_ = 0;
    space_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoLeagueRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 league_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &league_index_)));
          set_has_league_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_league_name;
        break;
      }
      
      // optional string league_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_league_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_league_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->league_name().data(), this->league_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank;
        break;
      }
      
      // optional int32 rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_hurt;
        break;
      }
      
      // optional double hurt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_hurt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hurt_)));
          set_has_hurt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_score;
        break;
      }
      
      // optional int32 score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_space_id;
        break;
      }
      
      // optional int32 space_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_space_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &space_id_)));
          set_has_space_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoLeagueRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 league_index = 1;
  if (has_league_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->league_index(), output);
  }
  
  // optional string league_name = 2;
  if (has_league_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->league_name().data(), this->league_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->league_name(), output);
  }
  
  // optional int32 rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rank(), output);
  }
  
  // optional double hurt = 4;
  if (has_hurt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->hurt(), output);
  }
  
  // optional int32 score = 5;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->score(), output);
  }
  
  // optional int32 space_id = 6;
  if (has_space_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->space_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoLeagueRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 league_index = 1;
  if (has_league_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->league_index(), target);
  }
  
  // optional string league_name = 2;
  if (has_league_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->league_name().data(), this->league_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->league_name(), target);
  }
  
  // optional int32 rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rank(), target);
  }
  
  // optional double hurt = 4;
  if (has_hurt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->hurt(), target);
  }
  
  // optional int32 score = 5;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->score(), target);
  }
  
  // optional int32 space_id = 6;
  if (has_space_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->space_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoLeagueRankInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 league_index = 1;
    if (has_league_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->league_index());
    }
    
    // optional string league_name = 2;
    if (has_league_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->league_name());
    }
    
    // optional int32 rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
    // optional double hurt = 4;
    if (has_hurt()) {
      total_size += 1 + 8;
    }
    
    // optional int32 score = 5;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }
    
    // optional int32 space_id = 6;
    if (has_space_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->space_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoLeagueRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoLeagueRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoLeagueRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoLeagueRankInfo::MergeFrom(const ProtoLeagueRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_league_index()) {
      set_league_index(from.league_index());
    }
    if (from.has_league_name()) {
      set_league_name(from.league_name());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_hurt()) {
      set_hurt(from.hurt());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_space_id()) {
      set_space_id(from.space_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoLeagueRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoLeagueRankInfo::CopyFrom(const ProtoLeagueRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoLeagueRankInfo::IsInitialized() const {
  
  return true;
}

void ProtoLeagueRankInfo::Swap(ProtoLeagueRankInfo* other) {
  if (other != this) {
    std::swap(league_index_, other->league_index_);
    std::swap(league_name_, other->league_name_);
    std::swap(rank_, other->rank_);
    std::swap(hurt_, other->hurt_);
    std::swap(score_, other->score_);
    std::swap(space_id_, other->space_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoLeagueRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoLeagueRankInfo_descriptor_;
  metadata.reflection = ProtoLeagueRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoLWarInfo::kSpaceIdFieldNumber;
const int ProtoLWarInfo::kAttackResourceFieldNumber;
const int ProtoLWarInfo::kDefenceResourceFieldNumber;
const int ProtoLWarInfo::kAttackLevelFieldNumber;
const int ProtoLWarInfo::kDefenceLevelFieldNumber;
const int ProtoLWarInfo::kAttackAddFieldNumber;
const int ProtoLWarInfo::kDefenceAddFieldNumber;
const int ProtoLWarInfo::kBossNameFieldNumber;
const int ProtoLWarInfo::kBossBloodFieldNumber;
const int ProtoLWarInfo::kRoomLeagueRankFieldNumber;
const int ProtoLWarInfo::kRoomMyLeagueFieldNumber;
#endif  // !_MSC_VER

ProtoLWarInfo::ProtoLWarInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoLWarInfo::InitAsDefaultInstance() {
  room_my_league_ = const_cast< ::ProtoLeagueRankInfo*>(&::ProtoLeagueRankInfo::default_instance());
}

ProtoLWarInfo::ProtoLWarInfo(const ProtoLWarInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoLWarInfo::SharedCtor() {
  _cached_size_ = 0;
  space_id_ = 0;
  attack_resource_ = 0;
  defence_resource_ = 0;
  attack_level_ = 0;
  defence_level_ = 0;
  attack_add_ = 0;
  defence_add_ = 0;
  boss_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  boss_blood_ = 0;
  room_my_league_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoLWarInfo::~ProtoLWarInfo() {
  SharedDtor();
}

void ProtoLWarInfo::SharedDtor() {
  if (boss_name_ != &::google::protobuf::internal::kEmptyString) {
    delete boss_name_;
  }
  if (this != default_instance_) {
    delete room_my_league_;
  }
}

void ProtoLWarInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoLWarInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoLWarInfo_descriptor_;
}

const ProtoLWarInfo& ProtoLWarInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoLWarInfo* ProtoLWarInfo::default_instance_ = NULL;

ProtoLWarInfo* ProtoLWarInfo::New() const {
  return new ProtoLWarInfo;
}

void ProtoLWarInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    space_id_ = 0;
    attack_resource_ = 0;
    defence_resource_ = 0;
    attack_level_ = 0;
    defence_level_ = 0;
    attack_add_ = 0;
    defence_add_ = 0;
    if (has_boss_name()) {
      if (boss_name_ != &::google::protobuf::internal::kEmptyString) {
        boss_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    boss_blood_ = 0;
    if (has_room_my_league()) {
      if (room_my_league_ != NULL) room_my_league_->::ProtoLeagueRankInfo::Clear();
    }
  }
  room_league_rank_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoLWarInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 space_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &space_id_)));
          set_has_space_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attack_resource;
        break;
      }
      
      // optional int32 attack_resource = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_resource:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_resource_)));
          set_has_attack_resource();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_defence_resource;
        break;
      }
      
      // optional int32 defence_resource = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defence_resource:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defence_resource_)));
          set_has_defence_resource();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_attack_level;
        break;
      }
      
      // optional int32 attack_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_level_)));
          set_has_attack_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_defence_level;
        break;
      }
      
      // optional int32 defence_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defence_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defence_level_)));
          set_has_defence_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_attack_add;
        break;
      }
      
      // optional int32 attack_add = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_add_)));
          set_has_attack_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_defence_add;
        break;
      }
      
      // optional int32 defence_add = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defence_add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defence_add_)));
          set_has_defence_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_boss_name;
        break;
      }
      
      // optional string boss_name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boss_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_boss_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->boss_name().data(), this->boss_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_boss_blood;
        break;
      }
      
      // optional double boss_blood = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_boss_blood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &boss_blood_)));
          set_has_boss_blood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_room_league_rank;
        break;
      }
      
      // repeated .ProtoLeagueRankInfo room_league_rank = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_league_rank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room_league_rank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_room_league_rank;
        if (input->ExpectTag(90)) goto parse_room_my_league;
        break;
      }
      
      // optional .ProtoLeagueRankInfo room_my_league = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_my_league:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room_my_league()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoLWarInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 space_id = 1;
  if (has_space_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->space_id(), output);
  }
  
  // optional int32 attack_resource = 2;
  if (has_attack_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->attack_resource(), output);
  }
  
  // optional int32 defence_resource = 3;
  if (has_defence_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->defence_resource(), output);
  }
  
  // optional int32 attack_level = 4;
  if (has_attack_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->attack_level(), output);
  }
  
  // optional int32 defence_level = 5;
  if (has_defence_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->defence_level(), output);
  }
  
  // optional int32 attack_add = 6;
  if (has_attack_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->attack_add(), output);
  }
  
  // optional int32 defence_add = 7;
  if (has_defence_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->defence_add(), output);
  }
  
  // optional string boss_name = 8;
  if (has_boss_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->boss_name().data(), this->boss_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->boss_name(), output);
  }
  
  // optional double boss_blood = 9;
  if (has_boss_blood()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->boss_blood(), output);
  }
  
  // repeated .ProtoLeagueRankInfo room_league_rank = 10;
  for (int i = 0; i < this->room_league_rank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->room_league_rank(i), output);
  }
  
  // optional .ProtoLeagueRankInfo room_my_league = 11;
  if (has_room_my_league()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->room_my_league(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoLWarInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 space_id = 1;
  if (has_space_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->space_id(), target);
  }
  
  // optional int32 attack_resource = 2;
  if (has_attack_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->attack_resource(), target);
  }
  
  // optional int32 defence_resource = 3;
  if (has_defence_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->defence_resource(), target);
  }
  
  // optional int32 attack_level = 4;
  if (has_attack_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->attack_level(), target);
  }
  
  // optional int32 defence_level = 5;
  if (has_defence_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->defence_level(), target);
  }
  
  // optional int32 attack_add = 6;
  if (has_attack_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->attack_add(), target);
  }
  
  // optional int32 defence_add = 7;
  if (has_defence_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->defence_add(), target);
  }
  
  // optional string boss_name = 8;
  if (has_boss_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->boss_name().data(), this->boss_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->boss_name(), target);
  }
  
  // optional double boss_blood = 9;
  if (has_boss_blood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->boss_blood(), target);
  }
  
  // repeated .ProtoLeagueRankInfo room_league_rank = 10;
  for (int i = 0; i < this->room_league_rank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->room_league_rank(i), target);
  }
  
  // optional .ProtoLeagueRankInfo room_my_league = 11;
  if (has_room_my_league()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->room_my_league(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoLWarInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 space_id = 1;
    if (has_space_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->space_id());
    }
    
    // optional int32 attack_resource = 2;
    if (has_attack_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack_resource());
    }
    
    // optional int32 defence_resource = 3;
    if (has_defence_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defence_resource());
    }
    
    // optional int32 attack_level = 4;
    if (has_attack_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack_level());
    }
    
    // optional int32 defence_level = 5;
    if (has_defence_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defence_level());
    }
    
    // optional int32 attack_add = 6;
    if (has_attack_add()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack_add());
    }
    
    // optional int32 defence_add = 7;
    if (has_defence_add()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defence_add());
    }
    
    // optional string boss_name = 8;
    if (has_boss_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->boss_name());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double boss_blood = 9;
    if (has_boss_blood()) {
      total_size += 1 + 8;
    }
    
    // optional .ProtoLeagueRankInfo room_my_league = 11;
    if (has_room_my_league()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->room_my_league());
    }
    
  }
  // repeated .ProtoLeagueRankInfo room_league_rank = 10;
  total_size += 1 * this->room_league_rank_size();
  for (int i = 0; i < this->room_league_rank_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room_league_rank(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoLWarInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoLWarInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoLWarInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoLWarInfo::MergeFrom(const ProtoLWarInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_league_rank_.MergeFrom(from.room_league_rank_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_space_id()) {
      set_space_id(from.space_id());
    }
    if (from.has_attack_resource()) {
      set_attack_resource(from.attack_resource());
    }
    if (from.has_defence_resource()) {
      set_defence_resource(from.defence_resource());
    }
    if (from.has_attack_level()) {
      set_attack_level(from.attack_level());
    }
    if (from.has_defence_level()) {
      set_defence_level(from.defence_level());
    }
    if (from.has_attack_add()) {
      set_attack_add(from.attack_add());
    }
    if (from.has_defence_add()) {
      set_defence_add(from.defence_add());
    }
    if (from.has_boss_name()) {
      set_boss_name(from.boss_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_boss_blood()) {
      set_boss_blood(from.boss_blood());
    }
    if (from.has_room_my_league()) {
      mutable_room_my_league()->::ProtoLeagueRankInfo::MergeFrom(from.room_my_league());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoLWarInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoLWarInfo::CopyFrom(const ProtoLWarInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoLWarInfo::IsInitialized() const {
  
  return true;
}

void ProtoLWarInfo::Swap(ProtoLWarInfo* other) {
  if (other != this) {
    std::swap(space_id_, other->space_id_);
    std::swap(attack_resource_, other->attack_resource_);
    std::swap(defence_resource_, other->defence_resource_);
    std::swap(attack_level_, other->attack_level_);
    std::swap(defence_level_, other->defence_level_);
    std::swap(attack_add_, other->attack_add_);
    std::swap(defence_add_, other->defence_add_);
    std::swap(boss_name_, other->boss_name_);
    std::swap(boss_blood_, other->boss_blood_);
    room_league_rank_.Swap(&other->room_league_rank_);
    std::swap(room_my_league_, other->room_my_league_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoLWarInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoLWarInfo_descriptor_;
  metadata.reflection = ProtoLWarInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoItemId::kIdFieldNumber;
const int ProtoItemId::kAmountFieldNumber;
const int ProtoItemId::kBindFieldNumber;
const int ProtoItemId::kCondFieldNumber;
const int ProtoItemId::kStateFieldNumber;
#endif  // !_MSC_VER

ProtoItemId::ProtoItemId()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoItemId::InitAsDefaultInstance() {
}

ProtoItemId::ProtoItemId(const ProtoItemId& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoItemId::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  amount_ = 0;
  bind_ = 0;
  cond_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoItemId::~ProtoItemId() {
  SharedDtor();
}

void ProtoItemId::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoItemId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoItemId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoItemId_descriptor_;
}

const ProtoItemId& ProtoItemId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoItemId* ProtoItemId::default_instance_ = NULL;

ProtoItemId* ProtoItemId::New() const {
  return new ProtoItemId;
}

void ProtoItemId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    amount_ = 0;
    bind_ = 0;
    cond_ = 0;
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoItemId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_amount;
        break;
      }
      
      // optional int32 amount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bind;
        break;
      }
      
      // optional int32 bind = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bind_)));
          set_has_bind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cond;
        break;
      }
      
      // optional int32 cond = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cond_)));
          set_has_cond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_state;
        break;
      }
      
      // optional int32 state = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoItemId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 amount = 2;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->amount(), output);
  }
  
  // optional int32 bind = 3;
  if (has_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bind(), output);
  }
  
  // optional int32 cond = 4;
  if (has_cond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cond(), output);
  }
  
  // optional int32 state = 5;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->state(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoItemId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 amount = 2;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->amount(), target);
  }
  
  // optional int32 bind = 3;
  if (has_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bind(), target);
  }
  
  // optional int32 cond = 4;
  if (has_cond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cond(), target);
  }
  
  // optional int32 state = 5;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->state(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoItemId::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 amount = 2;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->amount());
    }
    
    // optional int32 bind = 3;
    if (has_bind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bind());
    }
    
    // optional int32 cond = 4;
    if (has_cond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cond());
    }
    
    // optional int32 state = 5;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoItemId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoItemId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoItemId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoItemId::MergeFrom(const ProtoItemId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_bind()) {
      set_bind(from.bind());
    }
    if (from.has_cond()) {
      set_cond(from.cond());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoItemId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoItemId::CopyFrom(const ProtoItemId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoItemId::IsInitialized() const {
  
  return true;
}

void ProtoItemId::Swap(ProtoItemId* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(amount_, other->amount_);
    std::swap(bind_, other->bind_);
    std::swap(cond_, other->cond_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoItemId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoItemId_descriptor_;
  metadata.reflection = ProtoItemId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoSwordPoolTask::kTaskIdFieldNumber;
const int ProtoSwordPoolTask::kTotalNumFieldNumber;
const int ProtoSwordPoolTask::kLeftNumFieldNumber;
const int ProtoSwordPoolTask::kOnceExpFieldNumber;
#endif  // !_MSC_VER

ProtoSwordPoolTask::ProtoSwordPoolTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoSwordPoolTask::InitAsDefaultInstance() {
}

ProtoSwordPoolTask::ProtoSwordPoolTask(const ProtoSwordPoolTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoSwordPoolTask::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0;
  total_num_ = 0;
  left_num_ = 0;
  once_exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoSwordPoolTask::~ProtoSwordPoolTask() {
  SharedDtor();
}

void ProtoSwordPoolTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoSwordPoolTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoSwordPoolTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoSwordPoolTask_descriptor_;
}

const ProtoSwordPoolTask& ProtoSwordPoolTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoSwordPoolTask* ProtoSwordPoolTask::default_instance_ = NULL;

ProtoSwordPoolTask* ProtoSwordPoolTask::New() const {
  return new ProtoSwordPoolTask;
}

void ProtoSwordPoolTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0;
    total_num_ = 0;
    left_num_ = 0;
    once_exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoSwordPoolTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total_num;
        break;
      }
      
      // optional int32 total_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_num_)));
          set_has_total_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_left_num;
        break;
      }
      
      // optional int32 left_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_num_)));
          set_has_left_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_once_exp;
        break;
      }
      
      // optional int32 once_exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_once_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &once_exp_)));
          set_has_once_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoSwordPoolTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->task_id(), output);
  }
  
  // optional int32 total_num = 2;
  if (has_total_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_num(), output);
  }
  
  // optional int32 left_num = 3;
  if (has_left_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->left_num(), output);
  }
  
  // optional int32 once_exp = 4;
  if (has_once_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->once_exp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoSwordPoolTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->task_id(), target);
  }
  
  // optional int32 total_num = 2;
  if (has_total_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_num(), target);
  }
  
  // optional int32 left_num = 3;
  if (has_left_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->left_num(), target);
  }
  
  // optional int32 once_exp = 4;
  if (has_once_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->once_exp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoSwordPoolTask::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_id());
    }
    
    // optional int32 total_num = 2;
    if (has_total_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_num());
    }
    
    // optional int32 left_num = 3;
    if (has_left_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_num());
    }
    
    // optional int32 once_exp = 4;
    if (has_once_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->once_exp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoSwordPoolTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoSwordPoolTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoSwordPoolTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoSwordPoolTask::MergeFrom(const ProtoSwordPoolTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_total_num()) {
      set_total_num(from.total_num());
    }
    if (from.has_left_num()) {
      set_left_num(from.left_num());
    }
    if (from.has_once_exp()) {
      set_once_exp(from.once_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoSwordPoolTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoSwordPoolTask::CopyFrom(const ProtoSwordPoolTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoSwordPoolTask::IsInitialized() const {
  
  return true;
}

void ProtoSwordPoolTask::Swap(ProtoSwordPoolTask* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(total_num_, other->total_num_);
    std::swap(left_num_, other->left_num_);
    std::swap(once_exp_, other->once_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoSwordPoolTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoSwordPoolTask_descriptor_;
  metadata.reflection = ProtoSwordPoolTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoSvenDayItem::kDayFieldNumber;
const int ProtoSvenDayItem::kItemIdFieldNumber;
#endif  // !_MSC_VER

ProtoSvenDayItem::ProtoSvenDayItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoSvenDayItem::InitAsDefaultInstance() {
}

ProtoSvenDayItem::ProtoSvenDayItem(const ProtoSvenDayItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoSvenDayItem::SharedCtor() {
  _cached_size_ = 0;
  day_ = 0;
  item_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoSvenDayItem::~ProtoSvenDayItem() {
  SharedDtor();
}

void ProtoSvenDayItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoSvenDayItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoSvenDayItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoSvenDayItem_descriptor_;
}

const ProtoSvenDayItem& ProtoSvenDayItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoSvenDayItem* ProtoSvenDayItem::default_instance_ = NULL;

ProtoSvenDayItem* ProtoSvenDayItem::New() const {
  return new ProtoSvenDayItem;
}

void ProtoSvenDayItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    day_ = 0;
    item_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoSvenDayItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 day = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }
      
      // optional int32 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoSvenDayItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 day = 1;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->day(), output);
  }
  
  // optional int32 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoSvenDayItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 day = 1;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->day(), target);
  }
  
  // optional int32 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoSvenDayItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 day = 1;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day());
    }
    
    // optional int32 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoSvenDayItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoSvenDayItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoSvenDayItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoSvenDayItem::MergeFrom(const ProtoSvenDayItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoSvenDayItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoSvenDayItem::CopyFrom(const ProtoSvenDayItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoSvenDayItem::IsInitialized() const {
  
  return true;
}

void ProtoSvenDayItem::Swap(ProtoSvenDayItem* other) {
  if (other != this) {
    std::swap(day_, other->day_);
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoSvenDayItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoSvenDayItem_descriptor_;
  metadata.reflection = ProtoSvenDayItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoSevenDayItem::kDayFieldNumber;
const int ProtoSevenDayItem::kItemIdFieldNumber;
#endif  // !_MSC_VER

ProtoSevenDayItem::ProtoSevenDayItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoSevenDayItem::InitAsDefaultInstance() {
}

ProtoSevenDayItem::ProtoSevenDayItem(const ProtoSevenDayItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoSevenDayItem::SharedCtor() {
  _cached_size_ = 0;
  day_ = 0;
  item_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoSevenDayItem::~ProtoSevenDayItem() {
  SharedDtor();
}

void ProtoSevenDayItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoSevenDayItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoSevenDayItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoSevenDayItem_descriptor_;
}

const ProtoSevenDayItem& ProtoSevenDayItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoSevenDayItem* ProtoSevenDayItem::default_instance_ = NULL;

ProtoSevenDayItem* ProtoSevenDayItem::New() const {
  return new ProtoSevenDayItem;
}

void ProtoSevenDayItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    day_ = 0;
    item_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoSevenDayItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 day = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }
      
      // optional int32 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoSevenDayItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 day = 1;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->day(), output);
  }
  
  // optional int32 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoSevenDayItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 day = 1;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->day(), target);
  }
  
  // optional int32 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoSevenDayItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 day = 1;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day());
    }
    
    // optional int32 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoSevenDayItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoSevenDayItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoSevenDayItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoSevenDayItem::MergeFrom(const ProtoSevenDayItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoSevenDayItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoSevenDayItem::CopyFrom(const ProtoSevenDayItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoSevenDayItem::IsInitialized() const {
  
  return true;
}

void ProtoSevenDayItem::Swap(ProtoSevenDayItem* other) {
  if (other != this) {
    std::swap(day_, other->day_);
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoSevenDayItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoSevenDayItem_descriptor_;
  metadata.reflection = ProtoSevenDayItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoLegendTopRank::kRoleIdFieldNumber;
const int ProtoLegendTopRank::kRoleNameFieldNumber;
const int ProtoLegendTopRank::kRankFieldNumber;
const int ProtoLegendTopRank::kFightScoreFieldNumber;
const int ProtoLegendTopRank::kFloorFieldNumber;
#endif  // !_MSC_VER

ProtoLegendTopRank::ProtoLegendTopRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoLegendTopRank::InitAsDefaultInstance() {
}

ProtoLegendTopRank::ProtoLegendTopRank(const ProtoLegendTopRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoLegendTopRank::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rank_ = 0;
  fight_score_ = 0;
  floor_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoLegendTopRank::~ProtoLegendTopRank() {
  SharedDtor();
}

void ProtoLegendTopRank::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoLegendTopRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoLegendTopRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoLegendTopRank_descriptor_;
}

const ProtoLegendTopRank& ProtoLegendTopRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoLegendTopRank* ProtoLegendTopRank::default_instance_ = NULL;

ProtoLegendTopRank* ProtoLegendTopRank::New() const {
  return new ProtoLegendTopRank;
}

void ProtoLegendTopRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_LONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    rank_ = 0;
    fight_score_ = 0;
    floor_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoLegendTopRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_name;
        break;
      }
      
      // optional string role_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank;
        break;
      }
      
      // optional int32 rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fight_score;
        break;
      }
      
      // optional int32 fight_score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_score_)));
          set_has_fight_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_floor;
        break;
      }
      
      // optional int32 floor = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_floor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &floor_)));
          set_has_floor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoLegendTopRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_id(), output);
  }
  
  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->role_name(), output);
  }
  
  // optional int32 rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rank(), output);
  }
  
  // optional int32 fight_score = 4;
  if (has_fight_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fight_score(), output);
  }
  
  // optional int32 floor = 5;
  if (has_floor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->floor(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoLegendTopRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_id(), target);
  }
  
  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }
  
  // optional int32 rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rank(), target);
  }
  
  // optional int32 fight_score = 4;
  if (has_fight_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fight_score(), target);
  }
  
  // optional int32 floor = 5;
  if (has_floor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->floor(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoLegendTopRank::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional string role_name = 2;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }
    
    // optional int32 rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
    // optional int32 fight_score = 4;
    if (has_fight_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight_score());
    }
    
    // optional int32 floor = 5;
    if (has_floor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->floor());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoLegendTopRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoLegendTopRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoLegendTopRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoLegendTopRank::MergeFrom(const ProtoLegendTopRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_fight_score()) {
      set_fight_score(from.fight_score());
    }
    if (from.has_floor()) {
      set_floor(from.floor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoLegendTopRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoLegendTopRank::CopyFrom(const ProtoLegendTopRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoLegendTopRank::IsInitialized() const {
  
  return true;
}

void ProtoLegendTopRank::Swap(ProtoLegendTopRank* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(rank_, other->rank_);
    std::swap(fight_score_, other->fight_score_);
    std::swap(floor_, other->floor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoLegendTopRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoLegendTopRank_descriptor_;
  metadata.reflection = ProtoLegendTopRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoApplyInfo::kFriendIdFieldNumber;
const int ProtoApplyInfo::kFriendNameFieldNumber;
const int ProtoApplyInfo::kLeagueIdFieldNumber;
const int ProtoApplyInfo::kLeagueNameFieldNumber;
const int ProtoApplyInfo::kLevelFieldNumber;
const int ProtoApplyInfo::kSexFieldNumber;
const int ProtoApplyInfo::kTickFieldNumber;
#endif  // !_MSC_VER

ProtoApplyInfo::ProtoApplyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoApplyInfo::InitAsDefaultInstance() {
}

ProtoApplyInfo::ProtoApplyInfo(const ProtoApplyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoApplyInfo::SharedCtor() {
  _cached_size_ = 0;
  friend_id_ = GOOGLE_LONGLONG(0);
  friend_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  league_id_ = GOOGLE_LONGLONG(0);
  league_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  sex_ = 0;
  tick_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoApplyInfo::~ProtoApplyInfo() {
  SharedDtor();
}

void ProtoApplyInfo::SharedDtor() {
  if (friend_name_ != &::google::protobuf::internal::kEmptyString) {
    delete friend_name_;
  }
  if (league_name_ != &::google::protobuf::internal::kEmptyString) {
    delete league_name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoApplyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoApplyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoApplyInfo_descriptor_;
}

const ProtoApplyInfo& ProtoApplyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoApplyInfo* ProtoApplyInfo::default_instance_ = NULL;

ProtoApplyInfo* ProtoApplyInfo::New() const {
  return new ProtoApplyInfo;
}

void ProtoApplyInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    friend_id_ = GOOGLE_LONGLONG(0);
    if (has_friend_name()) {
      if (friend_name_ != &::google::protobuf::internal::kEmptyString) {
        friend_name_->clear();
      }
    }
    league_id_ = GOOGLE_LONGLONG(0);
    if (has_league_name()) {
      if (league_name_ != &::google::protobuf::internal::kEmptyString) {
        league_name_->clear();
      }
    }
    level_ = 0;
    sex_ = 0;
    tick_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoApplyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 friend_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &friend_id_)));
          set_has_friend_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_friend_name;
        break;
      }
      
      // optional string friend_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friend_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_friend_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->friend_name().data(), this->friend_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_league_id;
        break;
      }
      
      // optional int64 league_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_league_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &league_id_)));
          set_has_league_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_league_name;
        break;
      }
      
      // optional string league_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_league_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_league_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->league_name().data(), this->league_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }
      
      // optional int32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sex;
        break;
      }
      
      // optional int32 sex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_tick;
        break;
      }
      
      // optional int64 tick = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tick_)));
          set_has_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoApplyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 friend_id = 1;
  if (has_friend_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->friend_id(), output);
  }
  
  // optional string friend_name = 2;
  if (has_friend_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friend_name().data(), this->friend_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->friend_name(), output);
  }
  
  // optional int64 league_id = 3;
  if (has_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->league_id(), output);
  }
  
  // optional string league_name = 4;
  if (has_league_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->league_name().data(), this->league_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->league_name(), output);
  }
  
  // optional int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }
  
  // optional int32 sex = 6;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sex(), output);
  }
  
  // optional int64 tick = 7;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->tick(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoApplyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 friend_id = 1;
  if (has_friend_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->friend_id(), target);
  }
  
  // optional string friend_name = 2;
  if (has_friend_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friend_name().data(), this->friend_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->friend_name(), target);
  }
  
  // optional int64 league_id = 3;
  if (has_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->league_id(), target);
  }
  
  // optional string league_name = 4;
  if (has_league_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->league_name().data(), this->league_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->league_name(), target);
  }
  
  // optional int32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }
  
  // optional int32 sex = 6;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sex(), target);
  }
  
  // optional int64 tick = 7;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->tick(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoApplyInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 friend_id = 1;
    if (has_friend_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->friend_id());
    }
    
    // optional string friend_name = 2;
    if (has_friend_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->friend_name());
    }
    
    // optional int64 league_id = 3;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->league_id());
    }
    
    // optional string league_name = 4;
    if (has_league_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->league_name());
    }
    
    // optional int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 sex = 6;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }
    
    // optional int64 tick = 7;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tick());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoApplyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoApplyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoApplyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoApplyInfo::MergeFrom(const ProtoApplyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friend_id()) {
      set_friend_id(from.friend_id());
    }
    if (from.has_friend_name()) {
      set_friend_name(from.friend_name());
    }
    if (from.has_league_id()) {
      set_league_id(from.league_id());
    }
    if (from.has_league_name()) {
      set_league_name(from.league_name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_tick()) {
      set_tick(from.tick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoApplyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoApplyInfo::CopyFrom(const ProtoApplyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoApplyInfo::IsInitialized() const {
  
  return true;
}

void ProtoApplyInfo::Swap(ProtoApplyInfo* other) {
  if (other != this) {
    std::swap(friend_id_, other->friend_id_);
    std::swap(friend_name_, other->friend_name_);
    std::swap(league_id_, other->league_id_);
    std::swap(league_name_, other->league_name_);
    std::swap(level_, other->level_);
    std::swap(sex_, other->sex_);
    std::swap(tick_, other->tick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoApplyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoApplyInfo_descriptor_;
  metadata.reflection = ProtoApplyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoPairMap::kObjListFieldNumber;
#endif  // !_MSC_VER

ProtoPairMap::ProtoPairMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoPairMap::InitAsDefaultInstance() {
}

ProtoPairMap::ProtoPairMap(const ProtoPairMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoPairMap::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoPairMap::~ProtoPairMap() {
  SharedDtor();
}

void ProtoPairMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoPairMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoPairMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoPairMap_descriptor_;
}

const ProtoPairMap& ProtoPairMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoPairMap* ProtoPairMap::default_instance_ = NULL;

ProtoPairMap* ProtoPairMap::New() const {
  return new ProtoPairMap;
}

void ProtoPairMap::Clear() {
  obj_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoPairMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoPairObj obj_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_obj_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_obj_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_obj_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoPairMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoPairObj obj_list = 1;
  for (int i = 0; i < this->obj_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->obj_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoPairMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoPairObj obj_list = 1;
  for (int i = 0; i < this->obj_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->obj_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoPairMap::ByteSize() const {
  int total_size = 0;
  
  // repeated .ProtoPairObj obj_list = 1;
  total_size += 1 * this->obj_list_size();
  for (int i = 0; i < this->obj_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->obj_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoPairMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoPairMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoPairMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoPairMap::MergeFrom(const ProtoPairMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  obj_list_.MergeFrom(from.obj_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoPairMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoPairMap::CopyFrom(const ProtoPairMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoPairMap::IsInitialized() const {
  
  return true;
}

void ProtoPairMap::Swap(ProtoPairMap* other) {
  if (other != this) {
    obj_list_.Swap(&other->obj_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoPairMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoPairMap_descriptor_;
  metadata.reflection = ProtoPairMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoDonateRank::kRankFieldNumber;
const int ProtoDonateRank::kRoleNameFieldNumber;
const int ProtoDonateRank::kVipFieldNumber;
const int ProtoDonateRank::kContriFieldNumber;
#endif  // !_MSC_VER

ProtoDonateRank::ProtoDonateRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoDonateRank::InitAsDefaultInstance() {
}

ProtoDonateRank::ProtoDonateRank(const ProtoDonateRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoDonateRank::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vip_ = 0;
  contri_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoDonateRank::~ProtoDonateRank() {
  SharedDtor();
}

void ProtoDonateRank::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoDonateRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoDonateRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoDonateRank_descriptor_;
}

const ProtoDonateRank& ProtoDonateRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoDonateRank* ProtoDonateRank::default_instance_ = NULL;

ProtoDonateRank* ProtoDonateRank::New() const {
  return new ProtoDonateRank;
}

void ProtoDonateRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0;
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    vip_ = 0;
    contri_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoDonateRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_name;
        break;
      }
      
      // optional string role_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vip;
        break;
      }
      
      // optional int32 vip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_contri;
        break;
      }
      
      // optional int32 contri = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contri:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contri_)));
          set_has_contri();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoDonateRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }
  
  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->role_name(), output);
  }
  
  // optional int32 vip = 3;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->vip(), output);
  }
  
  // optional int32 contri = 4;
  if (has_contri()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->contri(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoDonateRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }
  
  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }
  
  // optional int32 vip = 3;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->vip(), target);
  }
  
  // optional int32 contri = 4;
  if (has_contri()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->contri(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoDonateRank::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
    // optional string role_name = 2;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }
    
    // optional int32 vip = 3;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip());
    }
    
    // optional int32 contri = 4;
    if (has_contri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contri());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoDonateRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoDonateRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoDonateRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoDonateRank::MergeFrom(const ProtoDonateRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_contri()) {
      set_contri(from.contri());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoDonateRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoDonateRank::CopyFrom(const ProtoDonateRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoDonateRank::IsInitialized() const {
  
  return true;
}

void ProtoDonateRank::Swap(ProtoDonateRank* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(role_name_, other->role_name_);
    std::swap(vip_, other->vip_);
    std::swap(contri_, other->contri_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoDonateRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoDonateRank_descriptor_;
  metadata.reflection = ProtoDonateRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoMAttackLabel::kLabelIdFieldNumber;
const int ProtoMAttackLabel::kRoleIdFieldNumber;
const int ProtoMAttackLabel::kRoleNameFieldNumber;
const int ProtoMAttackLabel::kRoleSexFieldNumber;
#endif  // !_MSC_VER

ProtoMAttackLabel::ProtoMAttackLabel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoMAttackLabel::InitAsDefaultInstance() {
}

ProtoMAttackLabel::ProtoMAttackLabel(const ProtoMAttackLabel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoMAttackLabel::SharedCtor() {
  _cached_size_ = 0;
  label_id_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_sex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoMAttackLabel::~ProtoMAttackLabel() {
  SharedDtor();
}

void ProtoMAttackLabel::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoMAttackLabel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoMAttackLabel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoMAttackLabel_descriptor_;
}

const ProtoMAttackLabel& ProtoMAttackLabel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoMAttackLabel* ProtoMAttackLabel::default_instance_ = NULL;

ProtoMAttackLabel* ProtoMAttackLabel::New() const {
  return new ProtoMAttackLabel;
}

void ProtoMAttackLabel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    label_id_ = 0;
    role_id_ = GOOGLE_LONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    role_sex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoMAttackLabel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 label_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &label_id_)));
          set_has_label_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }
      
      // optional int64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role_name;
        break;
      }
      
      // optional string role_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_role_sex;
        break;
      }
      
      // optional int32 role_sex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_sex_)));
          set_has_role_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoMAttackLabel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 label_id = 1;
  if (has_label_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->label_id(), output);
  }
  
  // optional int64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->role_id(), output);
  }
  
  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->role_name(), output);
  }
  
  // optional int32 role_sex = 4;
  if (has_role_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->role_sex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoMAttackLabel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 label_id = 1;
  if (has_label_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->label_id(), target);
  }
  
  // optional int64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->role_id(), target);
  }
  
  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->role_name(), target);
  }
  
  // optional int32 role_sex = 4;
  if (has_role_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->role_sex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoMAttackLabel::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 label_id = 1;
    if (has_label_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->label_id());
    }
    
    // optional int64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional string role_name = 3;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }
    
    // optional int32 role_sex = 4;
    if (has_role_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_sex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoMAttackLabel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoMAttackLabel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoMAttackLabel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoMAttackLabel::MergeFrom(const ProtoMAttackLabel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_label_id()) {
      set_label_id(from.label_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_role_sex()) {
      set_role_sex(from.role_sex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoMAttackLabel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMAttackLabel::CopyFrom(const ProtoMAttackLabel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMAttackLabel::IsInitialized() const {
  
  return true;
}

void ProtoMAttackLabel::Swap(ProtoMAttackLabel* other) {
  if (other != this) {
    std::swap(label_id_, other->label_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(role_sex_, other->role_sex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoMAttackLabel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoMAttackLabel_descriptor_;
  metadata.reflection = ProtoMAttackLabel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoActivityLWarRank::kRoleIdFieldNumber;
const int ProtoActivityLWarRank::kRankFieldNumber;
const int ProtoActivityLWarRank::kIsLeaderFieldNumber;
#endif  // !_MSC_VER

ProtoActivityLWarRank::ProtoActivityLWarRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoActivityLWarRank::InitAsDefaultInstance() {
}

ProtoActivityLWarRank::ProtoActivityLWarRank(const ProtoActivityLWarRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoActivityLWarRank::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  rank_ = 0;
  is_leader_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoActivityLWarRank::~ProtoActivityLWarRank() {
  SharedDtor();
}

void ProtoActivityLWarRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoActivityLWarRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoActivityLWarRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoActivityLWarRank_descriptor_;
}

const ProtoActivityLWarRank& ProtoActivityLWarRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoActivityLWarRank* ProtoActivityLWarRank::default_instance_ = NULL;

ProtoActivityLWarRank* ProtoActivityLWarRank::New() const {
  return new ProtoActivityLWarRank;
}

void ProtoActivityLWarRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_LONGLONG(0);
    rank_ = 0;
    is_leader_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoActivityLWarRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }
      
      // optional int32 rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_leader;
        break;
      }
      
      // optional int32 is_leader = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_leader:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_leader_)));
          set_has_is_leader();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoActivityLWarRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_id(), output);
  }
  
  // optional int32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank(), output);
  }
  
  // optional int32 is_leader = 3;
  if (has_is_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->is_leader(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoActivityLWarRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_id(), target);
  }
  
  // optional int32 rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank(), target);
  }
  
  // optional int32 is_leader = 3;
  if (has_is_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->is_leader(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoActivityLWarRank::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional int32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
    // optional int32 is_leader = 3;
    if (has_is_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_leader());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoActivityLWarRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoActivityLWarRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoActivityLWarRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoActivityLWarRank::MergeFrom(const ProtoActivityLWarRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_is_leader()) {
      set_is_leader(from.is_leader());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoActivityLWarRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoActivityLWarRank::CopyFrom(const ProtoActivityLWarRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoActivityLWarRank::IsInitialized() const {
  
  return true;
}

void ProtoActivityLWarRank::Swap(ProtoActivityLWarRank* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(rank_, other->rank_);
    std::swap(is_leader_, other->is_leader_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoActivityLWarRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoActivityLWarRank_descriptor_;
  metadata.reflection = ProtoActivityLWarRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoChildAchieve::kAchIndexFieldNumber;
const int ProtoChildAchieve::kBaseTypeFieldNumber;
const int ProtoChildAchieve::kChildTypeFieldNumber;
const int ProtoChildAchieve::kActTypeFieldNumber;
const int ProtoChildAchieve::kCompareFieldNumber;
const int ProtoChildAchieve::kSortFieldNumber;
const int ProtoChildAchieve::kRedPointFieldNumber;
const int ProtoChildAchieve::kAchieveInfoFieldNumber;
#endif  // !_MSC_VER

ProtoChildAchieve::ProtoChildAchieve()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoChildAchieve::InitAsDefaultInstance() {
}

ProtoChildAchieve::ProtoChildAchieve(const ProtoChildAchieve& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoChildAchieve::SharedCtor() {
  _cached_size_ = 0;
  ach_index_ = 0;
  base_type_ = 0;
  child_type_ = 0;
  act_type_ = 0;
  compare_ = 0;
  sort_ = 0;
  red_point_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoChildAchieve::~ProtoChildAchieve() {
  SharedDtor();
}

void ProtoChildAchieve::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoChildAchieve::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoChildAchieve::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoChildAchieve_descriptor_;
}

const ProtoChildAchieve& ProtoChildAchieve::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoChildAchieve* ProtoChildAchieve::default_instance_ = NULL;

ProtoChildAchieve* ProtoChildAchieve::New() const {
  return new ProtoChildAchieve;
}

void ProtoChildAchieve::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ach_index_ = 0;
    base_type_ = 0;
    child_type_ = 0;
    act_type_ = 0;
    compare_ = 0;
    sort_ = 0;
    red_point_ = 0;
  }
  achieve_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoChildAchieve::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ach_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ach_index_)));
          set_has_ach_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_base_type;
        break;
      }
      
      // optional int32 base_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_type_)));
          set_has_base_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_child_type;
        break;
      }
      
      // optional int32 child_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_child_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &child_type_)));
          set_has_child_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_act_type;
        break;
      }
      
      // optional int32 act_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_act_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &act_type_)));
          set_has_act_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_compare;
        break;
      }
      
      // optional int32 compare = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_compare:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &compare_)));
          set_has_compare();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sort;
        break;
      }
      
      // optional int32 sort = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sort_)));
          set_has_sort();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_red_point;
        break;
      }
      
      // optional int32 red_point = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_red_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &red_point_)));
          set_has_red_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_achieve_info;
        break;
      }
      
      // repeated .ProtoAchieveInfo achieve_info = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_achieve_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_achieve_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_achieve_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoChildAchieve::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ach_index = 1;
  if (has_ach_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ach_index(), output);
  }
  
  // optional int32 base_type = 2;
  if (has_base_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->base_type(), output);
  }
  
  // optional int32 child_type = 3;
  if (has_child_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->child_type(), output);
  }
  
  // optional int32 act_type = 4;
  if (has_act_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->act_type(), output);
  }
  
  // optional int32 compare = 5;
  if (has_compare()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->compare(), output);
  }
  
  // optional int32 sort = 6;
  if (has_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sort(), output);
  }
  
  // optional int32 red_point = 7;
  if (has_red_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->red_point(), output);
  }
  
  // repeated .ProtoAchieveInfo achieve_info = 8;
  for (int i = 0; i < this->achieve_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->achieve_info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoChildAchieve::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ach_index = 1;
  if (has_ach_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ach_index(), target);
  }
  
  // optional int32 base_type = 2;
  if (has_base_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->base_type(), target);
  }
  
  // optional int32 child_type = 3;
  if (has_child_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->child_type(), target);
  }
  
  // optional int32 act_type = 4;
  if (has_act_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->act_type(), target);
  }
  
  // optional int32 compare = 5;
  if (has_compare()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->compare(), target);
  }
  
  // optional int32 sort = 6;
  if (has_sort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sort(), target);
  }
  
  // optional int32 red_point = 7;
  if (has_red_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->red_point(), target);
  }
  
  // repeated .ProtoAchieveInfo achieve_info = 8;
  for (int i = 0; i < this->achieve_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->achieve_info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoChildAchieve::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ach_index = 1;
    if (has_ach_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ach_index());
    }
    
    // optional int32 base_type = 2;
    if (has_base_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_type());
    }
    
    // optional int32 child_type = 3;
    if (has_child_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->child_type());
    }
    
    // optional int32 act_type = 4;
    if (has_act_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->act_type());
    }
    
    // optional int32 compare = 5;
    if (has_compare()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->compare());
    }
    
    // optional int32 sort = 6;
    if (has_sort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sort());
    }
    
    // optional int32 red_point = 7;
    if (has_red_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->red_point());
    }
    
  }
  // repeated .ProtoAchieveInfo achieve_info = 8;
  total_size += 1 * this->achieve_info_size();
  for (int i = 0; i < this->achieve_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->achieve_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoChildAchieve::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoChildAchieve* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoChildAchieve*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoChildAchieve::MergeFrom(const ProtoChildAchieve& from) {
  GOOGLE_CHECK_NE(&from, this);
  achieve_info_.MergeFrom(from.achieve_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ach_index()) {
      set_ach_index(from.ach_index());
    }
    if (from.has_base_type()) {
      set_base_type(from.base_type());
    }
    if (from.has_child_type()) {
      set_child_type(from.child_type());
    }
    if (from.has_act_type()) {
      set_act_type(from.act_type());
    }
    if (from.has_compare()) {
      set_compare(from.compare());
    }
    if (from.has_sort()) {
      set_sort(from.sort());
    }
    if (from.has_red_point()) {
      set_red_point(from.red_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoChildAchieve::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoChildAchieve::CopyFrom(const ProtoChildAchieve& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoChildAchieve::IsInitialized() const {
  
  return true;
}

void ProtoChildAchieve::Swap(ProtoChildAchieve* other) {
  if (other != this) {
    std::swap(ach_index_, other->ach_index_);
    std::swap(base_type_, other->base_type_);
    std::swap(child_type_, other->child_type_);
    std::swap(act_type_, other->act_type_);
    std::swap(compare_, other->compare_);
    std::swap(sort_, other->sort_);
    std::swap(red_point_, other->red_point_);
    achieve_info_.Swap(&other->achieve_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoChildAchieve::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoChildAchieve_descriptor_;
  metadata.reflection = ProtoChildAchieve_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoAchieveInfo::kAchieveIdFieldNumber;
const int ProtoAchieveInfo::kAchTypeFieldNumber;
const int ProtoAchieveInfo::kNumberTypeFieldNumber;
const int ProtoAchieveInfo::kNeedAmountFieldNumber;
const int ProtoAchieveInfo::kSortFieldNumber;
const int ProtoAchieveInfo::kRewardIdFieldNumber;
const int ProtoAchieveInfo::kAchAmountFieldNumber;
#endif  // !_MSC_VER

ProtoAchieveInfo::ProtoAchieveInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoAchieveInfo::InitAsDefaultInstance() {
}

ProtoAchieveInfo::ProtoAchieveInfo(const ProtoAchieveInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoAchieveInfo::SharedCtor() {
  _cached_size_ = 0;
  achieve_id_ = 0;
  ach_type_ = 0;
  number_type_ = 0;
  need_amount_ = 0;
  sort_ = 0;
  reward_id_ = 0;
  ach_amount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoAchieveInfo::~ProtoAchieveInfo() {
  SharedDtor();
}

void ProtoAchieveInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoAchieveInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoAchieveInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoAchieveInfo_descriptor_;
}

const ProtoAchieveInfo& ProtoAchieveInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoAchieveInfo* ProtoAchieveInfo::default_instance_ = NULL;

ProtoAchieveInfo* ProtoAchieveInfo::New() const {
  return new ProtoAchieveInfo;
}

void ProtoAchieveInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    achieve_id_ = 0;
    ach_type_ = 0;
    number_type_ = 0;
    need_amount_ = 0;
    sort_ = 0;
    reward_id_ = 0;
    ach_amount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoAchieveInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 achieve_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &achieve_id_)));
          set_has_achieve_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ach_type;
        break;
      }
      
      // optional int32 ach_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ach_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ach_type_)));
          set_has_ach_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_number_type;
        break;
      }
      
      // optional int32 number_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_type_)));
          set_has_number_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_need_amount;
        break;
      }
      
      // optional int32 need_amount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &need_amount_)));
          set_has_need_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sort;
        break;
      }
      
      // optional int32 sort = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sort_)));
          set_has_sort();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_reward_id;
        break;
      }
      
      // optional int32 reward_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id_)));
          set_has_reward_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ach_amount;
        break;
      }
      
      // optional int32 ach_amount = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ach_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ach_amount_)));
          set_has_ach_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoAchieveInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 achieve_id = 1;
  if (has_achieve_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->achieve_id(), output);
  }
  
  // optional int32 ach_type = 2;
  if (has_ach_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ach_type(), output);
  }
  
  // optional int32 number_type = 3;
  if (has_number_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->number_type(), output);
  }
  
  // optional int32 need_amount = 4;
  if (has_need_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->need_amount(), output);
  }
  
  // optional int32 sort = 5;
  if (has_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sort(), output);
  }
  
  // optional int32 reward_id = 6;
  if (has_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->reward_id(), output);
  }
  
  // optional int32 ach_amount = 7;
  if (has_ach_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ach_amount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoAchieveInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 achieve_id = 1;
  if (has_achieve_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->achieve_id(), target);
  }
  
  // optional int32 ach_type = 2;
  if (has_ach_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ach_type(), target);
  }
  
  // optional int32 number_type = 3;
  if (has_number_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->number_type(), target);
  }
  
  // optional int32 need_amount = 4;
  if (has_need_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->need_amount(), target);
  }
  
  // optional int32 sort = 5;
  if (has_sort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sort(), target);
  }
  
  // optional int32 reward_id = 6;
  if (has_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->reward_id(), target);
  }
  
  // optional int32 ach_amount = 7;
  if (has_ach_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ach_amount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoAchieveInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 achieve_id = 1;
    if (has_achieve_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->achieve_id());
    }
    
    // optional int32 ach_type = 2;
    if (has_ach_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ach_type());
    }
    
    // optional int32 number_type = 3;
    if (has_number_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number_type());
    }
    
    // optional int32 need_amount = 4;
    if (has_need_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->need_amount());
    }
    
    // optional int32 sort = 5;
    if (has_sort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sort());
    }
    
    // optional int32 reward_id = 6;
    if (has_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id());
    }
    
    // optional int32 ach_amount = 7;
    if (has_ach_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ach_amount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoAchieveInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoAchieveInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoAchieveInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoAchieveInfo::MergeFrom(const ProtoAchieveInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_achieve_id()) {
      set_achieve_id(from.achieve_id());
    }
    if (from.has_ach_type()) {
      set_ach_type(from.ach_type());
    }
    if (from.has_number_type()) {
      set_number_type(from.number_type());
    }
    if (from.has_need_amount()) {
      set_need_amount(from.need_amount());
    }
    if (from.has_sort()) {
      set_sort(from.sort());
    }
    if (from.has_reward_id()) {
      set_reward_id(from.reward_id());
    }
    if (from.has_ach_amount()) {
      set_ach_amount(from.ach_amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoAchieveInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoAchieveInfo::CopyFrom(const ProtoAchieveInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoAchieveInfo::IsInitialized() const {
  
  return true;
}

void ProtoAchieveInfo::Swap(ProtoAchieveInfo* other) {
  if (other != this) {
    std::swap(achieve_id_, other->achieve_id_);
    std::swap(ach_type_, other->ach_type_);
    std::swap(number_type_, other->number_type_);
    std::swap(need_amount_, other->need_amount_);
    std::swap(sort_, other->sort_);
    std::swap(reward_id_, other->reward_id_);
    std::swap(ach_amount_, other->ach_amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoAchieveInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoAchieveInfo_descriptor_;
  metadata.reflection = ProtoAchieveInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoServerRecord::kPlayerIdFieldNumber;
const int ProtoServerRecord::kPlayerNameFieldNumber;
const int ProtoServerRecord::kGetTmeFieldNumber;
const int ProtoServerRecord::kAmountFieldNumber;
const int ProtoServerRecord::kItemIdFieldNumber;
const int ProtoServerRecord::kItemBindFieldNumber;
const int ProtoServerRecord::kRewardMultFieldNumber;
const int ProtoServerRecord::kSubValueFieldNumber;
#endif  // !_MSC_VER

ProtoServerRecord::ProtoServerRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoServerRecord::InitAsDefaultInstance() {
}

ProtoServerRecord::ProtoServerRecord(const ProtoServerRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoServerRecord::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_LONGLONG(0);
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  get_tme_ = GOOGLE_LONGLONG(0);
  amount_ = 0;
  item_id_ = 0;
  item_bind_ = 0;
  reward_mult_ = 0;
  sub_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoServerRecord::~ProtoServerRecord() {
  SharedDtor();
}

void ProtoServerRecord::SharedDtor() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoServerRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoServerRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoServerRecord_descriptor_;
}

const ProtoServerRecord& ProtoServerRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoServerRecord* ProtoServerRecord::default_instance_ = NULL;

ProtoServerRecord* ProtoServerRecord::New() const {
  return new ProtoServerRecord;
}

void ProtoServerRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_LONGLONG(0);
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::kEmptyString) {
        player_name_->clear();
      }
    }
    get_tme_ = GOOGLE_LONGLONG(0);
    amount_ = 0;
    item_id_ = 0;
    item_bind_ = 0;
    reward_mult_ = 0;
    sub_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoServerRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_name;
        break;
      }
      
      // optional string player_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_get_tme;
        break;
      }
      
      // optional int64 get_tme = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_tme:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &get_tme_)));
          set_has_get_tme();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_amount;
        break;
      }
      
      // optional int32 amount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_item_id;
        break;
      }
      
      // optional int32 item_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_item_bind;
        break;
      }
      
      // optional int32 item_bind = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_bind_)));
          set_has_item_bind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_reward_mult;
        break;
      }
      
      // optional int32 reward_mult = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_mult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_mult_)));
          set_has_reward_mult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_sub_value;
        break;
      }
      
      // optional int32 sub_value = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub_value_)));
          set_has_sub_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoServerRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->player_id(), output);
  }
  
  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->player_name(), output);
  }
  
  // optional int64 get_tme = 3;
  if (has_get_tme()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->get_tme(), output);
  }
  
  // optional int32 amount = 4;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->amount(), output);
  }
  
  // optional int32 item_id = 5;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->item_id(), output);
  }
  
  // optional int32 item_bind = 6;
  if (has_item_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->item_bind(), output);
  }
  
  // optional int32 reward_mult = 7;
  if (has_reward_mult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->reward_mult(), output);
  }
  
  // optional int32 sub_value = 8;
  if (has_sub_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->sub_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoServerRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->player_id(), target);
  }
  
  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_name(), target);
  }
  
  // optional int64 get_tme = 3;
  if (has_get_tme()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->get_tme(), target);
  }
  
  // optional int32 amount = 4;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->amount(), target);
  }
  
  // optional int32 item_id = 5;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->item_id(), target);
  }
  
  // optional int32 item_bind = 6;
  if (has_item_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->item_bind(), target);
  }
  
  // optional int32 reward_mult = 7;
  if (has_reward_mult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->reward_mult(), target);
  }
  
  // optional int32 sub_value = 8;
  if (has_sub_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->sub_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoServerRecord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_id());
    }
    
    // optional string player_name = 2;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }
    
    // optional int64 get_tme = 3;
    if (has_get_tme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->get_tme());
    }
    
    // optional int32 amount = 4;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->amount());
    }
    
    // optional int32 item_id = 5;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }
    
    // optional int32 item_bind = 6;
    if (has_item_bind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_bind());
    }
    
    // optional int32 reward_mult = 7;
    if (has_reward_mult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_mult());
    }
    
    // optional int32 sub_value = 8;
    if (has_sub_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sub_value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoServerRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoServerRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoServerRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoServerRecord::MergeFrom(const ProtoServerRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
    if (from.has_get_tme()) {
      set_get_tme(from.get_tme());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_bind()) {
      set_item_bind(from.item_bind());
    }
    if (from.has_reward_mult()) {
      set_reward_mult(from.reward_mult());
    }
    if (from.has_sub_value()) {
      set_sub_value(from.sub_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoServerRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoServerRecord::CopyFrom(const ProtoServerRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoServerRecord::IsInitialized() const {
  
  return true;
}

void ProtoServerRecord::Swap(ProtoServerRecord* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(player_name_, other->player_name_);
    std::swap(get_tme_, other->get_tme_);
    std::swap(amount_, other->amount_);
    std::swap(item_id_, other->item_id_);
    std::swap(item_bind_, other->item_bind_);
    std::swap(reward_mult_, other->reward_mult_);
    std::swap(sub_value_, other->sub_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoServerRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoServerRecord_descriptor_;
  metadata.reflection = ProtoServerRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoSlotInfo::kIndexFieldNumber;
const int ProtoSlotInfo::kSlotIdFieldNumber;
const int ProtoSlotInfo::kItemFieldNumber;
const int ProtoSlotInfo::kIsPreciousFieldNumber;
const int ProtoSlotInfo::kPreCostFieldNumber;
const int ProtoSlotInfo::kNowCostFieldNumber;
const int ProtoSlotInfo::kPersonLimitFieldNumber;
const int ProtoSlotInfo::kServerLimitFieldNumber;
const int ProtoSlotInfo::kPersonLeftLimitFieldNumber;
const int ProtoSlotInfo::kServerLeftLimitFieldNumber;
const int ProtoSlotInfo::kSlotTypeFieldNumber;
const int ProtoSlotInfo::kPairInfoFieldNumber;
#endif  // !_MSC_VER

ProtoSlotInfo::ProtoSlotInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoSlotInfo::InitAsDefaultInstance() {
  item_ = const_cast< ::ProtoItem*>(&::ProtoItem::default_instance());
}

ProtoSlotInfo::ProtoSlotInfo(const ProtoSlotInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoSlotInfo::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  slot_id_ = 0;
  item_ = NULL;
  is_precious_ = 0;
  pre_cost_ = 0;
  now_cost_ = 0;
  person_limit_ = 0;
  server_limit_ = 0;
  person_left_limit_ = 0;
  server_left_limit_ = 0;
  slot_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoSlotInfo::~ProtoSlotInfo() {
  SharedDtor();
}

void ProtoSlotInfo::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void ProtoSlotInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoSlotInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoSlotInfo_descriptor_;
}

const ProtoSlotInfo& ProtoSlotInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoSlotInfo* ProtoSlotInfo::default_instance_ = NULL;

ProtoSlotInfo* ProtoSlotInfo::New() const {
  return new ProtoSlotInfo;
}

void ProtoSlotInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    slot_id_ = 0;
    if (has_item()) {
      if (item_ != NULL) item_->::ProtoItem::Clear();
    }
    is_precious_ = 0;
    pre_cost_ = 0;
    now_cost_ = 0;
    person_limit_ = 0;
    server_limit_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    person_left_limit_ = 0;
    server_left_limit_ = 0;
    slot_type_ = 0;
  }
  pair_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoSlotInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_slot_id;
        break;
      }
      
      // optional int32 slot_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_id_)));
          set_has_slot_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item;
        break;
      }
      
      // optional .ProtoItem item = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_precious;
        break;
      }
      
      // optional int32 is_precious = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_precious:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_precious_)));
          set_has_is_precious();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pre_cost;
        break;
      }
      
      // optional int32 pre_cost = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pre_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pre_cost_)));
          set_has_pre_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_now_cost;
        break;
      }
      
      // optional int32 now_cost = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_now_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &now_cost_)));
          set_has_now_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_person_limit;
        break;
      }
      
      // optional int32 person_limit = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_person_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &person_limit_)));
          set_has_person_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_server_limit;
        break;
      }
      
      // optional int32 server_limit = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_limit_)));
          set_has_server_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_person_left_limit;
        break;
      }
      
      // optional int32 person_left_limit = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_person_left_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &person_left_limit_)));
          set_has_person_left_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_server_left_limit;
        break;
      }
      
      // optional int32 server_left_limit = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_left_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_left_limit_)));
          set_has_server_left_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_slot_type;
        break;
      }
      
      // optional int32 slot_type = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_type_)));
          set_has_slot_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_pair_info;
        break;
      }
      
      // repeated .ProtoPairObj pair_info = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pair_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pair_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_pair_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoSlotInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }
  
  // optional int32 slot_id = 2;
  if (has_slot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->slot_id(), output);
  }
  
  // optional .ProtoItem item = 3;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item(), output);
  }
  
  // optional int32 is_precious = 4;
  if (has_is_precious()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->is_precious(), output);
  }
  
  // optional int32 pre_cost = 5;
  if (has_pre_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pre_cost(), output);
  }
  
  // optional int32 now_cost = 6;
  if (has_now_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->now_cost(), output);
  }
  
  // optional int32 person_limit = 7;
  if (has_person_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->person_limit(), output);
  }
  
  // optional int32 server_limit = 8;
  if (has_server_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->server_limit(), output);
  }
  
  // optional int32 person_left_limit = 9;
  if (has_person_left_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->person_left_limit(), output);
  }
  
  // optional int32 server_left_limit = 10;
  if (has_server_left_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->server_left_limit(), output);
  }
  
  // optional int32 slot_type = 11;
  if (has_slot_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->slot_type(), output);
  }
  
  // repeated .ProtoPairObj pair_info = 12;
  for (int i = 0; i < this->pair_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->pair_info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoSlotInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }
  
  // optional int32 slot_id = 2;
  if (has_slot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->slot_id(), target);
  }
  
  // optional .ProtoItem item = 3;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item(), target);
  }
  
  // optional int32 is_precious = 4;
  if (has_is_precious()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->is_precious(), target);
  }
  
  // optional int32 pre_cost = 5;
  if (has_pre_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pre_cost(), target);
  }
  
  // optional int32 now_cost = 6;
  if (has_now_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->now_cost(), target);
  }
  
  // optional int32 person_limit = 7;
  if (has_person_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->person_limit(), target);
  }
  
  // optional int32 server_limit = 8;
  if (has_server_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->server_limit(), target);
  }
  
  // optional int32 person_left_limit = 9;
  if (has_person_left_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->person_left_limit(), target);
  }
  
  // optional int32 server_left_limit = 10;
  if (has_server_left_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->server_left_limit(), target);
  }
  
  // optional int32 slot_type = 11;
  if (has_slot_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->slot_type(), target);
  }
  
  // repeated .ProtoPairObj pair_info = 12;
  for (int i = 0; i < this->pair_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->pair_info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoSlotInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional int32 slot_id = 2;
    if (has_slot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_id());
    }
    
    // optional .ProtoItem item = 3;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }
    
    // optional int32 is_precious = 4;
    if (has_is_precious()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_precious());
    }
    
    // optional int32 pre_cost = 5;
    if (has_pre_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pre_cost());
    }
    
    // optional int32 now_cost = 6;
    if (has_now_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->now_cost());
    }
    
    // optional int32 person_limit = 7;
    if (has_person_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->person_limit());
    }
    
    // optional int32 server_limit = 8;
    if (has_server_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_limit());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 person_left_limit = 9;
    if (has_person_left_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->person_left_limit());
    }
    
    // optional int32 server_left_limit = 10;
    if (has_server_left_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_left_limit());
    }
    
    // optional int32 slot_type = 11;
    if (has_slot_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_type());
    }
    
  }
  // repeated .ProtoPairObj pair_info = 12;
  total_size += 1 * this->pair_info_size();
  for (int i = 0; i < this->pair_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pair_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoSlotInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoSlotInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoSlotInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoSlotInfo::MergeFrom(const ProtoSlotInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  pair_info_.MergeFrom(from.pair_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_slot_id()) {
      set_slot_id(from.slot_id());
    }
    if (from.has_item()) {
      mutable_item()->::ProtoItem::MergeFrom(from.item());
    }
    if (from.has_is_precious()) {
      set_is_precious(from.is_precious());
    }
    if (from.has_pre_cost()) {
      set_pre_cost(from.pre_cost());
    }
    if (from.has_now_cost()) {
      set_now_cost(from.now_cost());
    }
    if (from.has_person_limit()) {
      set_person_limit(from.person_limit());
    }
    if (from.has_server_limit()) {
      set_server_limit(from.server_limit());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_person_left_limit()) {
      set_person_left_limit(from.person_left_limit());
    }
    if (from.has_server_left_limit()) {
      set_server_left_limit(from.server_left_limit());
    }
    if (from.has_slot_type()) {
      set_slot_type(from.slot_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoSlotInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoSlotInfo::CopyFrom(const ProtoSlotInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoSlotInfo::IsInitialized() const {
  
  return true;
}

void ProtoSlotInfo::Swap(ProtoSlotInfo* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(slot_id_, other->slot_id_);
    std::swap(item_, other->item_);
    std::swap(is_precious_, other->is_precious_);
    std::swap(pre_cost_, other->pre_cost_);
    std::swap(now_cost_, other->now_cost_);
    std::swap(person_limit_, other->person_limit_);
    std::swap(server_limit_, other->server_limit_);
    std::swap(person_left_limit_, other->person_left_limit_);
    std::swap(server_left_limit_, other->server_left_limit_);
    std::swap(slot_type_, other->slot_type_);
    pair_info_.Swap(&other->pair_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoSlotInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoSlotInfo_descriptor_;
  metadata.reflection = ProtoSlotInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoPersonRecord::kAmountFieldNumber;
const int ProtoPersonRecord::kGetTimeFieldNumber;
const int ProtoPersonRecord::kItemIdFieldNumber;
const int ProtoPersonRecord::kItemBindFieldNumber;
const int ProtoPersonRecord::kRewardMultFieldNumber;
const int ProtoPersonRecord::kSubValueFieldNumber;
#endif  // !_MSC_VER

ProtoPersonRecord::ProtoPersonRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoPersonRecord::InitAsDefaultInstance() {
}

ProtoPersonRecord::ProtoPersonRecord(const ProtoPersonRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoPersonRecord::SharedCtor() {
  _cached_size_ = 0;
  amount_ = 0;
  get_time_ = 0;
  item_id_ = 0;
  item_bind_ = 0;
  reward_mult_ = 0;
  sub_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoPersonRecord::~ProtoPersonRecord() {
  SharedDtor();
}

void ProtoPersonRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoPersonRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoPersonRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoPersonRecord_descriptor_;
}

const ProtoPersonRecord& ProtoPersonRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoPersonRecord* ProtoPersonRecord::default_instance_ = NULL;

ProtoPersonRecord* ProtoPersonRecord::New() const {
  return new ProtoPersonRecord;
}

void ProtoPersonRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    amount_ = 0;
    get_time_ = 0;
    item_id_ = 0;
    item_bind_ = 0;
    reward_mult_ = 0;
    sub_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoPersonRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 amount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_get_time;
        break;
      }
      
      // optional int32 get_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &get_time_)));
          set_has_get_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_id;
        break;
      }
      
      // optional int32 item_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item_bind;
        break;
      }
      
      // optional int32 item_bind = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_bind_)));
          set_has_item_bind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_reward_mult;
        break;
      }
      
      // optional int32 reward_mult = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_mult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_mult_)));
          set_has_reward_mult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sub_value;
        break;
      }
      
      // optional int32 sub_value = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub_value_)));
          set_has_sub_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoPersonRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 amount = 1;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->amount(), output);
  }
  
  // optional int32 get_time = 2;
  if (has_get_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->get_time(), output);
  }
  
  // optional int32 item_id = 3;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->item_id(), output);
  }
  
  // optional int32 item_bind = 4;
  if (has_item_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->item_bind(), output);
  }
  
  // optional int32 reward_mult = 5;
  if (has_reward_mult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->reward_mult(), output);
  }
  
  // optional int32 sub_value = 6;
  if (has_sub_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sub_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoPersonRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 amount = 1;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->amount(), target);
  }
  
  // optional int32 get_time = 2;
  if (has_get_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->get_time(), target);
  }
  
  // optional int32 item_id = 3;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->item_id(), target);
  }
  
  // optional int32 item_bind = 4;
  if (has_item_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->item_bind(), target);
  }
  
  // optional int32 reward_mult = 5;
  if (has_reward_mult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->reward_mult(), target);
  }
  
  // optional int32 sub_value = 6;
  if (has_sub_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sub_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoPersonRecord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 amount = 1;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->amount());
    }
    
    // optional int32 get_time = 2;
    if (has_get_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->get_time());
    }
    
    // optional int32 item_id = 3;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }
    
    // optional int32 item_bind = 4;
    if (has_item_bind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_bind());
    }
    
    // optional int32 reward_mult = 5;
    if (has_reward_mult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_mult());
    }
    
    // optional int32 sub_value = 6;
    if (has_sub_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sub_value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoPersonRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoPersonRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoPersonRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoPersonRecord::MergeFrom(const ProtoPersonRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_get_time()) {
      set_get_time(from.get_time());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_bind()) {
      set_item_bind(from.item_bind());
    }
    if (from.has_reward_mult()) {
      set_reward_mult(from.reward_mult());
    }
    if (from.has_sub_value()) {
      set_sub_value(from.sub_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoPersonRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoPersonRecord::CopyFrom(const ProtoPersonRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoPersonRecord::IsInitialized() const {
  
  return true;
}

void ProtoPersonRecord::Swap(ProtoPersonRecord* other) {
  if (other != this) {
    std::swap(amount_, other->amount_);
    std::swap(get_time_, other->get_time_);
    std::swap(item_id_, other->item_id_);
    std::swap(item_bind_, other->item_bind_);
    std::swap(reward_mult_, other->reward_mult_);
    std::swap(sub_value_, other->sub_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoPersonRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoPersonRecord_descriptor_;
  metadata.reflection = ProtoPersonRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoTimeLimitInfo::kTimePointFieldNumber;
const int ProtoTimeLimitInfo::kTimePointTickFieldNumber;
const int ProtoTimeLimitInfo::kSlotInfoFieldNumber;
#endif  // !_MSC_VER

ProtoTimeLimitInfo::ProtoTimeLimitInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoTimeLimitInfo::InitAsDefaultInstance() {
}

ProtoTimeLimitInfo::ProtoTimeLimitInfo(const ProtoTimeLimitInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoTimeLimitInfo::SharedCtor() {
  _cached_size_ = 0;
  time_point_ = 0;
  time_point_tick_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoTimeLimitInfo::~ProtoTimeLimitInfo() {
  SharedDtor();
}

void ProtoTimeLimitInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoTimeLimitInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoTimeLimitInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoTimeLimitInfo_descriptor_;
}

const ProtoTimeLimitInfo& ProtoTimeLimitInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoTimeLimitInfo* ProtoTimeLimitInfo::default_instance_ = NULL;

ProtoTimeLimitInfo* ProtoTimeLimitInfo::New() const {
  return new ProtoTimeLimitInfo;
}

void ProtoTimeLimitInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_point_ = 0;
    time_point_tick_ = 0;
  }
  slot_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoTimeLimitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 time_point = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_point_)));
          set_has_time_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time_point_tick;
        break;
      }
      
      // optional int32 time_point_tick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_point_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_point_tick_)));
          set_has_time_point_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_slot_info;
        break;
      }
      
      // repeated .ProtoSlotInfo slot_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slot_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_slot_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_slot_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoTimeLimitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 time_point = 1;
  if (has_time_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->time_point(), output);
  }
  
  // optional int32 time_point_tick = 2;
  if (has_time_point_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time_point_tick(), output);
  }
  
  // repeated .ProtoSlotInfo slot_info = 3;
  for (int i = 0; i < this->slot_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->slot_info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoTimeLimitInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 time_point = 1;
  if (has_time_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->time_point(), target);
  }
  
  // optional int32 time_point_tick = 2;
  if (has_time_point_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time_point_tick(), target);
  }
  
  // repeated .ProtoSlotInfo slot_info = 3;
  for (int i = 0; i < this->slot_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->slot_info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoTimeLimitInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 time_point = 1;
    if (has_time_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_point());
    }
    
    // optional int32 time_point_tick = 2;
    if (has_time_point_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_point_tick());
    }
    
  }
  // repeated .ProtoSlotInfo slot_info = 3;
  total_size += 1 * this->slot_info_size();
  for (int i = 0; i < this->slot_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->slot_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoTimeLimitInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoTimeLimitInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoTimeLimitInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoTimeLimitInfo::MergeFrom(const ProtoTimeLimitInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  slot_info_.MergeFrom(from.slot_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_point()) {
      set_time_point(from.time_point());
    }
    if (from.has_time_point_tick()) {
      set_time_point_tick(from.time_point_tick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoTimeLimitInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoTimeLimitInfo::CopyFrom(const ProtoTimeLimitInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoTimeLimitInfo::IsInitialized() const {
  
  return true;
}

void ProtoTimeLimitInfo::Swap(ProtoTimeLimitInfo* other) {
  if (other != this) {
    std::swap(time_point_, other->time_point_);
    std::swap(time_point_tick_, other->time_point_tick_);
    slot_info_.Swap(&other->slot_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoTimeLimitInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoTimeLimitInfo_descriptor_;
  metadata.reflection = ProtoTimeLimitInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoShopInfo::kItemFieldNumber;
const int ProtoShopInfo::kCostFieldNumber;
const int ProtoShopInfo::kIsBuyFieldNumber;
const int ProtoShopInfo::kIsRarityFieldNumber;
const int ProtoShopInfo::kCostPreFieldNumber;
#endif  // !_MSC_VER

ProtoShopInfo::ProtoShopInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoShopInfo::InitAsDefaultInstance() {
  item_ = const_cast< ::ProtoItem*>(&::ProtoItem::default_instance());
}

ProtoShopInfo::ProtoShopInfo(const ProtoShopInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoShopInfo::SharedCtor() {
  _cached_size_ = 0;
  item_ = NULL;
  cost_ = 0;
  is_buy_ = 0;
  is_rarity_ = 0;
  cost_pre_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoShopInfo::~ProtoShopInfo() {
  SharedDtor();
}

void ProtoShopInfo::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void ProtoShopInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoShopInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoShopInfo_descriptor_;
}

const ProtoShopInfo& ProtoShopInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoShopInfo* ProtoShopInfo::default_instance_ = NULL;

ProtoShopInfo* ProtoShopInfo::New() const {
  return new ProtoShopInfo;
}

void ProtoShopInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_item()) {
      if (item_ != NULL) item_->::ProtoItem::Clear();
    }
    cost_ = 0;
    is_buy_ = 0;
    is_rarity_ = 0;
    cost_pre_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoShopInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ProtoItem item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cost;
        break;
      }
      
      // optional int32 cost = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_buy;
        break;
      }
      
      // optional int32 is_buy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_buy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_buy_)));
          set_has_is_buy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_rarity;
        break;
      }
      
      // optional int32 is_rarity = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_rarity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_rarity_)));
          set_has_is_rarity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cost_pre;
        break;
      }
      
      // optional int32 cost_pre = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_pre:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_pre_)));
          set_has_cost_pre();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoShopInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ProtoItem item = 1;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(), output);
  }
  
  // optional int32 cost = 2;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cost(), output);
  }
  
  // optional int32 is_buy = 3;
  if (has_is_buy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->is_buy(), output);
  }
  
  // optional int32 is_rarity = 4;
  if (has_is_rarity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->is_rarity(), output);
  }
  
  // optional int32 cost_pre = 5;
  if (has_cost_pre()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cost_pre(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoShopInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ProtoItem item = 1;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(), target);
  }
  
  // optional int32 cost = 2;
  if (has_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cost(), target);
  }
  
  // optional int32 is_buy = 3;
  if (has_is_buy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->is_buy(), target);
  }
  
  // optional int32 is_rarity = 4;
  if (has_is_rarity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->is_rarity(), target);
  }
  
  // optional int32 cost_pre = 5;
  if (has_cost_pre()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cost_pre(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoShopInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ProtoItem item = 1;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }
    
    // optional int32 cost = 2;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cost());
    }
    
    // optional int32 is_buy = 3;
    if (has_is_buy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_buy());
    }
    
    // optional int32 is_rarity = 4;
    if (has_is_rarity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_rarity());
    }
    
    // optional int32 cost_pre = 5;
    if (has_cost_pre()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cost_pre());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoShopInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoShopInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoShopInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoShopInfo::MergeFrom(const ProtoShopInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item()) {
      mutable_item()->::ProtoItem::MergeFrom(from.item());
    }
    if (from.has_cost()) {
      set_cost(from.cost());
    }
    if (from.has_is_buy()) {
      set_is_buy(from.is_buy());
    }
    if (from.has_is_rarity()) {
      set_is_rarity(from.is_rarity());
    }
    if (from.has_cost_pre()) {
      set_cost_pre(from.cost_pre());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoShopInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoShopInfo::CopyFrom(const ProtoShopInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoShopInfo::IsInitialized() const {
  
  return true;
}

void ProtoShopInfo::Swap(ProtoShopInfo* other) {
  if (other != this) {
    std::swap(item_, other->item_);
    std::swap(cost_, other->cost_);
    std::swap(is_buy_, other->is_buy_);
    std::swap(is_rarity_, other->is_rarity_);
    std::swap(cost_pre_, other->cost_pre_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoShopInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoShopInfo_descriptor_;
  metadata.reflection = ProtoShopInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoFashionDetail::kFashionIdFieldNumber;
const int ProtoFashionDetail::kActiveTypeFieldNumber;
const int ProtoFashionDetail::kColorIdFieldNumber;
const int ProtoFashionDetail::kIsPermanentFieldNumber;
const int ProtoFashionDetail::kActiveTickFieldNumber;
const int ProtoFashionDetail::kEndTickFieldNumber;
const int ProtoFashionDetail::kColorSetFieldNumber;
#endif  // !_MSC_VER

ProtoFashionDetail::ProtoFashionDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoFashionDetail::InitAsDefaultInstance() {
}

ProtoFashionDetail::ProtoFashionDetail(const ProtoFashionDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoFashionDetail::SharedCtor() {
  _cached_size_ = 0;
  fashion_id_ = 0;
  active_type_ = 0;
  color_id_ = 0;
  is_permanent_ = 0;
  active_tick_ = GOOGLE_LONGLONG(0);
  end_tick_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoFashionDetail::~ProtoFashionDetail() {
  SharedDtor();
}

void ProtoFashionDetail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoFashionDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoFashionDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoFashionDetail_descriptor_;
}

const ProtoFashionDetail& ProtoFashionDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoFashionDetail* ProtoFashionDetail::default_instance_ = NULL;

ProtoFashionDetail* ProtoFashionDetail::New() const {
  return new ProtoFashionDetail;
}

void ProtoFashionDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fashion_id_ = 0;
    active_type_ = 0;
    color_id_ = 0;
    is_permanent_ = 0;
    active_tick_ = GOOGLE_LONGLONG(0);
    end_tick_ = GOOGLE_LONGLONG(0);
  }
  color_set_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoFashionDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fashion_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fashion_id_)));
          set_has_fashion_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_active_type;
        break;
      }
      
      // optional int32 active_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_type_)));
          set_has_active_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_color_id;
        break;
      }
      
      // optional int32 color_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_id_)));
          set_has_color_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_permanent;
        break;
      }
      
      // optional int32 is_permanent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_permanent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_permanent_)));
          set_has_is_permanent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_active_tick;
        break;
      }
      
      // optional int64 active_tick = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &active_tick_)));
          set_has_active_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_end_tick;
        break;
      }
      
      // optional int64 end_tick = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_tick_)));
          set_has_end_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_color_set;
        break;
      }
      
      // repeated int32 color_set = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color_set:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_color_set())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_color_set())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_color_set;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoFashionDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 fashion_id = 1;
  if (has_fashion_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fashion_id(), output);
  }
  
  // optional int32 active_type = 2;
  if (has_active_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->active_type(), output);
  }
  
  // optional int32 color_id = 3;
  if (has_color_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->color_id(), output);
  }
  
  // optional int32 is_permanent = 4;
  if (has_is_permanent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->is_permanent(), output);
  }
  
  // optional int64 active_tick = 5;
  if (has_active_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->active_tick(), output);
  }
  
  // optional int64 end_tick = 6;
  if (has_end_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->end_tick(), output);
  }
  
  // repeated int32 color_set = 7;
  for (int i = 0; i < this->color_set_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->color_set(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoFashionDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 fashion_id = 1;
  if (has_fashion_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fashion_id(), target);
  }
  
  // optional int32 active_type = 2;
  if (has_active_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->active_type(), target);
  }
  
  // optional int32 color_id = 3;
  if (has_color_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->color_id(), target);
  }
  
  // optional int32 is_permanent = 4;
  if (has_is_permanent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->is_permanent(), target);
  }
  
  // optional int64 active_tick = 5;
  if (has_active_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->active_tick(), target);
  }
  
  // optional int64 end_tick = 6;
  if (has_end_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->end_tick(), target);
  }
  
  // repeated int32 color_set = 7;
  for (int i = 0; i < this->color_set_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->color_set(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoFashionDetail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 fashion_id = 1;
    if (has_fashion_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fashion_id());
    }
    
    // optional int32 active_type = 2;
    if (has_active_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->active_type());
    }
    
    // optional int32 color_id = 3;
    if (has_color_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color_id());
    }
    
    // optional int32 is_permanent = 4;
    if (has_is_permanent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_permanent());
    }
    
    // optional int64 active_tick = 5;
    if (has_active_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->active_tick());
    }
    
    // optional int64 end_tick = 6;
    if (has_end_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_tick());
    }
    
  }
  // repeated int32 color_set = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->color_set_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->color_set(i));
    }
    total_size += 1 * this->color_set_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoFashionDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoFashionDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoFashionDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoFashionDetail::MergeFrom(const ProtoFashionDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  color_set_.MergeFrom(from.color_set_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fashion_id()) {
      set_fashion_id(from.fashion_id());
    }
    if (from.has_active_type()) {
      set_active_type(from.active_type());
    }
    if (from.has_color_id()) {
      set_color_id(from.color_id());
    }
    if (from.has_is_permanent()) {
      set_is_permanent(from.is_permanent());
    }
    if (from.has_active_tick()) {
      set_active_tick(from.active_tick());
    }
    if (from.has_end_tick()) {
      set_end_tick(from.end_tick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoFashionDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoFashionDetail::CopyFrom(const ProtoFashionDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoFashionDetail::IsInitialized() const {
  
  return true;
}

void ProtoFashionDetail::Swap(ProtoFashionDetail* other) {
  if (other != this) {
    std::swap(fashion_id_, other->fashion_id_);
    std::swap(active_type_, other->active_type_);
    std::swap(color_id_, other->color_id_);
    std::swap(is_permanent_, other->is_permanent_);
    std::swap(active_tick_, other->active_tick_);
    std::swap(end_tick_, other->end_tick_);
    color_set_.Swap(&other->color_set_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoFashionDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoFashionDetail_descriptor_;
  metadata.reflection = ProtoFashionDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoWeddingDetail::kLevelFieldNumber;
const int ProtoWeddingDetail::kOrderFieldNumber;
const int ProtoWeddingDetail::kSideLevelFieldNumber;
const int ProtoWeddingDetail::kSideOrderFieldNumber;
const int ProtoWeddingDetail::kExpFieldNumber;
const int ProtoWeddingDetail::kIsOpenFieldNumber;
const int ProtoWeddingDetail::kProListFieldNumber;
const int ProtoWeddingDetail::kOtherInfoFieldNumber;
#endif  // !_MSC_VER

ProtoWeddingDetail::ProtoWeddingDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoWeddingDetail::InitAsDefaultInstance() {
  pro_list_ = const_cast< ::ProtoFightPro*>(&::ProtoFightPro::default_instance());
  other_info_ = const_cast< ::ProtoThreeObj*>(&::ProtoThreeObj::default_instance());
}

ProtoWeddingDetail::ProtoWeddingDetail(const ProtoWeddingDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoWeddingDetail::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  order_ = 0;
  side_level_ = 0;
  side_order_ = 0;
  exp_ = 0;
  is_open_ = 0;
  pro_list_ = NULL;
  other_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoWeddingDetail::~ProtoWeddingDetail() {
  SharedDtor();
}

void ProtoWeddingDetail::SharedDtor() {
  if (this != default_instance_) {
    delete pro_list_;
    delete other_info_;
  }
}

void ProtoWeddingDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoWeddingDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoWeddingDetail_descriptor_;
}

const ProtoWeddingDetail& ProtoWeddingDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoWeddingDetail* ProtoWeddingDetail::default_instance_ = NULL;

ProtoWeddingDetail* ProtoWeddingDetail::New() const {
  return new ProtoWeddingDetail;
}

void ProtoWeddingDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    order_ = 0;
    side_level_ = 0;
    side_order_ = 0;
    exp_ = 0;
    is_open_ = 0;
    if (has_pro_list()) {
      if (pro_list_ != NULL) pro_list_->::ProtoFightPro::Clear();
    }
    if (has_other_info()) {
      if (other_info_ != NULL) other_info_->::ProtoThreeObj::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoWeddingDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_order;
        break;
      }
      
      // optional int32 order = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_side_level;
        break;
      }
      
      // optional int32 side_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_side_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &side_level_)));
          set_has_side_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_side_order;
        break;
      }
      
      // optional int32 side_order = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_side_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &side_order_)));
          set_has_side_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_exp;
        break;
      }
      
      // optional int32 exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_open;
        break;
      }
      
      // optional int32 is_open = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_open_)));
          set_has_is_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_pro_list;
        break;
      }
      
      // optional .ProtoFightPro pro_list = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pro_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pro_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_other_info;
        break;
      }
      
      // optional .ProtoThreeObj other_info = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_other_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_other_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoWeddingDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }
  
  // optional int32 order = 2;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->order(), output);
  }
  
  // optional int32 side_level = 3;
  if (has_side_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->side_level(), output);
  }
  
  // optional int32 side_order = 4;
  if (has_side_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->side_order(), output);
  }
  
  // optional int32 exp = 5;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->exp(), output);
  }
  
  // optional int32 is_open = 6;
  if (has_is_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->is_open(), output);
  }
  
  // optional .ProtoFightPro pro_list = 7;
  if (has_pro_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->pro_list(), output);
  }
  
  // optional .ProtoThreeObj other_info = 8;
  if (has_other_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->other_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoWeddingDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }
  
  // optional int32 order = 2;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->order(), target);
  }
  
  // optional int32 side_level = 3;
  if (has_side_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->side_level(), target);
  }
  
  // optional int32 side_order = 4;
  if (has_side_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->side_order(), target);
  }
  
  // optional int32 exp = 5;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->exp(), target);
  }
  
  // optional int32 is_open = 6;
  if (has_is_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->is_open(), target);
  }
  
  // optional .ProtoFightPro pro_list = 7;
  if (has_pro_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->pro_list(), target);
  }
  
  // optional .ProtoThreeObj other_info = 8;
  if (has_other_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->other_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoWeddingDetail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 order = 2;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order());
    }
    
    // optional int32 side_level = 3;
    if (has_side_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->side_level());
    }
    
    // optional int32 side_order = 4;
    if (has_side_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->side_order());
    }
    
    // optional int32 exp = 5;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
    // optional int32 is_open = 6;
    if (has_is_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_open());
    }
    
    // optional .ProtoFightPro pro_list = 7;
    if (has_pro_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pro_list());
    }
    
    // optional .ProtoThreeObj other_info = 8;
    if (has_other_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->other_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoWeddingDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoWeddingDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoWeddingDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoWeddingDetail::MergeFrom(const ProtoWeddingDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
    if (from.has_side_level()) {
      set_side_level(from.side_level());
    }
    if (from.has_side_order()) {
      set_side_order(from.side_order());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_is_open()) {
      set_is_open(from.is_open());
    }
    if (from.has_pro_list()) {
      mutable_pro_list()->::ProtoFightPro::MergeFrom(from.pro_list());
    }
    if (from.has_other_info()) {
      mutable_other_info()->::ProtoThreeObj::MergeFrom(from.other_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoWeddingDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoWeddingDetail::CopyFrom(const ProtoWeddingDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoWeddingDetail::IsInitialized() const {
  
  return true;
}

void ProtoWeddingDetail::Swap(ProtoWeddingDetail* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(order_, other->order_);
    std::swap(side_level_, other->side_level_);
    std::swap(side_order_, other->side_order_);
    std::swap(exp_, other->exp_);
    std::swap(is_open_, other->is_open_);
    std::swap(pro_list_, other->pro_list_);
    std::swap(other_info_, other->other_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoWeddingDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoWeddingDetail_descriptor_;
  metadata.reflection = ProtoWeddingDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoWedTreasures::kBuyTickFieldNumber;
const int ProtoWedTreasures::kIsFetchFieldNumber;
const int ProtoWedTreasures::kLeftTimeFieldNumber;
const int ProtoWedTreasures::kTypeFieldNumber;
#endif  // !_MSC_VER

ProtoWedTreasures::ProtoWedTreasures()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoWedTreasures::InitAsDefaultInstance() {
}

ProtoWedTreasures::ProtoWedTreasures(const ProtoWedTreasures& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoWedTreasures::SharedCtor() {
  _cached_size_ = 0;
  buy_tick_ = GOOGLE_LONGLONG(0);
  is_fetch_ = 0;
  left_time_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoWedTreasures::~ProtoWedTreasures() {
  SharedDtor();
}

void ProtoWedTreasures::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoWedTreasures::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoWedTreasures::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoWedTreasures_descriptor_;
}

const ProtoWedTreasures& ProtoWedTreasures::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoWedTreasures* ProtoWedTreasures::default_instance_ = NULL;

ProtoWedTreasures* ProtoWedTreasures::New() const {
  return new ProtoWedTreasures;
}

void ProtoWedTreasures::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buy_tick_ = GOOGLE_LONGLONG(0);
    is_fetch_ = 0;
    left_time_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoWedTreasures::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 buy_tick = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &buy_tick_)));
          set_has_buy_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_fetch;
        break;
      }
      
      // optional int32 is_fetch = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_fetch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_fetch_)));
          set_has_is_fetch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_left_time;
        break;
      }
      
      // optional int32 left_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_time_)));
          set_has_left_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }
      
      // optional int32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoWedTreasures::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 buy_tick = 1;
  if (has_buy_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->buy_tick(), output);
  }
  
  // optional int32 is_fetch = 2;
  if (has_is_fetch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->is_fetch(), output);
  }
  
  // optional int32 left_time = 3;
  if (has_left_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->left_time(), output);
  }
  
  // optional int32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoWedTreasures::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 buy_tick = 1;
  if (has_buy_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->buy_tick(), target);
  }
  
  // optional int32 is_fetch = 2;
  if (has_is_fetch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->is_fetch(), target);
  }
  
  // optional int32 left_time = 3;
  if (has_left_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->left_time(), target);
  }
  
  // optional int32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoWedTreasures::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 buy_tick = 1;
    if (has_buy_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->buy_tick());
    }
    
    // optional int32 is_fetch = 2;
    if (has_is_fetch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_fetch());
    }
    
    // optional int32 left_time = 3;
    if (has_left_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_time());
    }
    
    // optional int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoWedTreasures::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoWedTreasures* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoWedTreasures*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoWedTreasures::MergeFrom(const ProtoWedTreasures& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buy_tick()) {
      set_buy_tick(from.buy_tick());
    }
    if (from.has_is_fetch()) {
      set_is_fetch(from.is_fetch());
    }
    if (from.has_left_time()) {
      set_left_time(from.left_time());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoWedTreasures::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoWedTreasures::CopyFrom(const ProtoWedTreasures& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoWedTreasures::IsInitialized() const {
  
  return true;
}

void ProtoWedTreasures::Swap(ProtoWedTreasures* other) {
  if (other != this) {
    std::swap(buy_tick_, other->buy_tick_);
    std::swap(is_fetch_, other->is_fetch_);
    std::swap(left_time_, other->left_time_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoWedTreasures::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoWedTreasures_descriptor_;
  metadata.reflection = ProtoWedTreasures_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoWeddingRole::kRoleIdFieldNumber;
const int ProtoWeddingRole::kRoleNameFieldNumber;
const int ProtoWeddingRole::kSexFieldNumber;
#endif  // !_MSC_VER

ProtoWeddingRole::ProtoWeddingRole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoWeddingRole::InitAsDefaultInstance() {
}

ProtoWeddingRole::ProtoWeddingRole(const ProtoWeddingRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoWeddingRole::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoWeddingRole::~ProtoWeddingRole() {
  SharedDtor();
}

void ProtoWeddingRole::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoWeddingRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoWeddingRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoWeddingRole_descriptor_;
}

const ProtoWeddingRole& ProtoWeddingRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoWeddingRole* ProtoWeddingRole::default_instance_ = NULL;

ProtoWeddingRole* ProtoWeddingRole::New() const {
  return new ProtoWeddingRole;
}

void ProtoWeddingRole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_LONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    sex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoWeddingRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_name;
        break;
      }
      
      // optional string role_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sex;
        break;
      }
      
      // optional int32 sex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoWeddingRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_id(), output);
  }
  
  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->role_name(), output);
  }
  
  // optional int32 sex = 3;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoWeddingRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_id(), target);
  }
  
  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }
  
  // optional int32 sex = 3;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoWeddingRole::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional string role_name = 2;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }
    
    // optional int32 sex = 3;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoWeddingRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoWeddingRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoWeddingRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoWeddingRole::MergeFrom(const ProtoWeddingRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoWeddingRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoWeddingRole::CopyFrom(const ProtoWeddingRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoWeddingRole::IsInitialized() const {
  
  return true;
}

void ProtoWeddingRole::Swap(ProtoWeddingRole* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(sex_, other->sex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoWeddingRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoWeddingRole_descriptor_;
  metadata.reflection = ProtoWeddingRole_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoWeddingRank::kRankFieldNumber;
const int ProtoWeddingRank::kTickFieldNumber;
const int ProtoWeddingRank::kServerIdFieldNumber;
const int ProtoWeddingRank::kServerFlagFieldNumber;
const int ProtoWeddingRank::kServerPrevFieldNumber;
const int ProtoWeddingRank::kServerNameFieldNumber;
const int ProtoWeddingRank::kPlayer1FieldNumber;
const int ProtoWeddingRank::kPlayer2FieldNumber;
#endif  // !_MSC_VER

ProtoWeddingRank::ProtoWeddingRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoWeddingRank::InitAsDefaultInstance() {
  player1_ = const_cast< ::ProtoWeddingRole*>(&::ProtoWeddingRole::default_instance());
  player2_ = const_cast< ::ProtoWeddingRole*>(&::ProtoWeddingRole::default_instance());
}

ProtoWeddingRank::ProtoWeddingRank(const ProtoWeddingRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoWeddingRank::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  tick_ = GOOGLE_LONGLONG(0);
  server_id_ = 0;
  server_flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_prev_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  player1_ = NULL;
  player2_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoWeddingRank::~ProtoWeddingRank() {
  SharedDtor();
}

void ProtoWeddingRank::SharedDtor() {
  if (server_flag_ != &::google::protobuf::internal::kEmptyString) {
    delete server_flag_;
  }
  if (server_prev_ != &::google::protobuf::internal::kEmptyString) {
    delete server_prev_;
  }
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (this != default_instance_) {
    delete player1_;
    delete player2_;
  }
}

void ProtoWeddingRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoWeddingRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoWeddingRank_descriptor_;
}

const ProtoWeddingRank& ProtoWeddingRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoWeddingRank* ProtoWeddingRank::default_instance_ = NULL;

ProtoWeddingRank* ProtoWeddingRank::New() const {
  return new ProtoWeddingRank;
}

void ProtoWeddingRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0;
    tick_ = GOOGLE_LONGLONG(0);
    server_id_ = 0;
    if (has_server_flag()) {
      if (server_flag_ != &::google::protobuf::internal::kEmptyString) {
        server_flag_->clear();
      }
    }
    if (has_server_prev()) {
      if (server_prev_ != &::google::protobuf::internal::kEmptyString) {
        server_prev_->clear();
      }
    }
    if (has_server_name()) {
      if (server_name_ != &::google::protobuf::internal::kEmptyString) {
        server_name_->clear();
      }
    }
    if (has_player1()) {
      if (player1_ != NULL) player1_->::ProtoWeddingRole::Clear();
    }
    if (has_player2()) {
      if (player2_ != NULL) player2_->::ProtoWeddingRole::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoWeddingRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tick;
        break;
      }
      
      // optional int64 tick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tick_)));
          set_has_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_server_id;
        break;
      }
      
      // optional int32 server_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_server_flag;
        break;
      }
      
      // optional string server_flag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_flag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_flag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_flag().data(), this->server_flag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_server_prev;
        break;
      }
      
      // optional string server_prev = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_prev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_prev()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_prev().data(), this->server_prev().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_server_name;
        break;
      }
      
      // optional string server_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_name().data(), this->server_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_player1;
        break;
      }
      
      // optional .ProtoWeddingRole player1 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_player2;
        break;
      }
      
      // optional .ProtoWeddingRole player2 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoWeddingRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }
  
  // optional int64 tick = 2;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->tick(), output);
  }
  
  // optional int32 server_id = 3;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->server_id(), output);
  }
  
  // optional string server_flag = 4;
  if (has_server_flag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_flag().data(), this->server_flag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->server_flag(), output);
  }
  
  // optional string server_prev = 5;
  if (has_server_prev()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_prev().data(), this->server_prev().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->server_prev(), output);
  }
  
  // optional string server_name = 6;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->server_name(), output);
  }
  
  // optional .ProtoWeddingRole player1 = 7;
  if (has_player1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->player1(), output);
  }
  
  // optional .ProtoWeddingRole player2 = 8;
  if (has_player2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->player2(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoWeddingRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }
  
  // optional int64 tick = 2;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->tick(), target);
  }
  
  // optional int32 server_id = 3;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->server_id(), target);
  }
  
  // optional string server_flag = 4;
  if (has_server_flag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_flag().data(), this->server_flag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->server_flag(), target);
  }
  
  // optional string server_prev = 5;
  if (has_server_prev()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_prev().data(), this->server_prev().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->server_prev(), target);
  }
  
  // optional string server_name = 6;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->server_name(), target);
  }
  
  // optional .ProtoWeddingRole player1 = 7;
  if (has_player1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->player1(), target);
  }
  
  // optional .ProtoWeddingRole player2 = 8;
  if (has_player2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->player2(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoWeddingRank::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
    // optional int64 tick = 2;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tick());
    }
    
    // optional int32 server_id = 3;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }
    
    // optional string server_flag = 4;
    if (has_server_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_flag());
    }
    
    // optional string server_prev = 5;
    if (has_server_prev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_prev());
    }
    
    // optional string server_name = 6;
    if (has_server_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_name());
    }
    
    // optional .ProtoWeddingRole player1 = 7;
    if (has_player1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player1());
    }
    
    // optional .ProtoWeddingRole player2 = 8;
    if (has_player2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player2());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoWeddingRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoWeddingRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoWeddingRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoWeddingRank::MergeFrom(const ProtoWeddingRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_tick()) {
      set_tick(from.tick());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_server_flag()) {
      set_server_flag(from.server_flag());
    }
    if (from.has_server_prev()) {
      set_server_prev(from.server_prev());
    }
    if (from.has_server_name()) {
      set_server_name(from.server_name());
    }
    if (from.has_player1()) {
      mutable_player1()->::ProtoWeddingRole::MergeFrom(from.player1());
    }
    if (from.has_player2()) {
      mutable_player2()->::ProtoWeddingRole::MergeFrom(from.player2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoWeddingRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoWeddingRank::CopyFrom(const ProtoWeddingRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoWeddingRank::IsInitialized() const {
  
  return true;
}

void ProtoWeddingRank::Swap(ProtoWeddingRank* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(tick_, other->tick_);
    std::swap(server_id_, other->server_id_);
    std::swap(server_flag_, other->server_flag_);
    std::swap(server_prev_, other->server_prev_);
    std::swap(server_name_, other->server_name_);
    std::swap(player1_, other->player1_);
    std::swap(player2_, other->player2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoWeddingRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoWeddingRank_descriptor_;
  metadata.reflection = ProtoWeddingRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoWedLabel::kIdFieldNumber;
const int ProtoWedLabel::kLabelIdFieldNumber;
const int ProtoWedLabel::kRingLevelLimitFieldNumber;
const int ProtoWedLabel::kSysLevelLimitFieldNumber;
const int ProtoWedLabel::kTreeLevelLimitFieldNumber;
const int ProtoWedLabel::kStatusFieldNumber;
const int ProtoWedLabel::kOtherInfoFieldNumber;
#endif  // !_MSC_VER

ProtoWedLabel::ProtoWedLabel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoWedLabel::InitAsDefaultInstance() {
  other_info_ = const_cast< ::ProtoThreeObj*>(&::ProtoThreeObj::default_instance());
}

ProtoWedLabel::ProtoWedLabel(const ProtoWedLabel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoWedLabel::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  label_id_ = 0;
  ring_level_limit_ = 0;
  sys_level_limit_ = 0;
  tree_level_limit_ = 0;
  status_ = 0;
  other_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoWedLabel::~ProtoWedLabel() {
  SharedDtor();
}

void ProtoWedLabel::SharedDtor() {
  if (this != default_instance_) {
    delete other_info_;
  }
}

void ProtoWedLabel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoWedLabel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoWedLabel_descriptor_;
}

const ProtoWedLabel& ProtoWedLabel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoWedLabel* ProtoWedLabel::default_instance_ = NULL;

ProtoWedLabel* ProtoWedLabel::New() const {
  return new ProtoWedLabel;
}

void ProtoWedLabel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    label_id_ = 0;
    ring_level_limit_ = 0;
    sys_level_limit_ = 0;
    tree_level_limit_ = 0;
    status_ = 0;
    if (has_other_info()) {
      if (other_info_ != NULL) other_info_->::ProtoThreeObj::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoWedLabel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_label_id;
        break;
      }
      
      // optional int32 label_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_label_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &label_id_)));
          set_has_label_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ring_level_limit;
        break;
      }
      
      // optional int32 ring_level_limit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ring_level_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ring_level_limit_)));
          set_has_ring_level_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sys_level_limit;
        break;
      }
      
      // optional int32 sys_level_limit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sys_level_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sys_level_limit_)));
          set_has_sys_level_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_tree_level_limit;
        break;
      }
      
      // optional int32 tree_level_limit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tree_level_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tree_level_limit_)));
          set_has_tree_level_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_status;
        break;
      }
      
      // optional int32 status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_other_info;
        break;
      }
      
      // optional .ProtoThreeObj other_info = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_other_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_other_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoWedLabel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 label_id = 2;
  if (has_label_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->label_id(), output);
  }
  
  // optional int32 ring_level_limit = 3;
  if (has_ring_level_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ring_level_limit(), output);
  }
  
  // optional int32 sys_level_limit = 4;
  if (has_sys_level_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sys_level_limit(), output);
  }
  
  // optional int32 tree_level_limit = 5;
  if (has_tree_level_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->tree_level_limit(), output);
  }
  
  // optional int32 status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->status(), output);
  }
  
  // optional .ProtoThreeObj other_info = 7;
  if (has_other_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->other_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoWedLabel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 label_id = 2;
  if (has_label_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->label_id(), target);
  }
  
  // optional int32 ring_level_limit = 3;
  if (has_ring_level_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ring_level_limit(), target);
  }
  
  // optional int32 sys_level_limit = 4;
  if (has_sys_level_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sys_level_limit(), target);
  }
  
  // optional int32 tree_level_limit = 5;
  if (has_tree_level_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->tree_level_limit(), target);
  }
  
  // optional int32 status = 6;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->status(), target);
  }
  
  // optional .ProtoThreeObj other_info = 7;
  if (has_other_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->other_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoWedLabel::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 label_id = 2;
    if (has_label_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->label_id());
    }
    
    // optional int32 ring_level_limit = 3;
    if (has_ring_level_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ring_level_limit());
    }
    
    // optional int32 sys_level_limit = 4;
    if (has_sys_level_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sys_level_limit());
    }
    
    // optional int32 tree_level_limit = 5;
    if (has_tree_level_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tree_level_limit());
    }
    
    // optional int32 status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // optional .ProtoThreeObj other_info = 7;
    if (has_other_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->other_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoWedLabel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoWedLabel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoWedLabel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoWedLabel::MergeFrom(const ProtoWedLabel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_label_id()) {
      set_label_id(from.label_id());
    }
    if (from.has_ring_level_limit()) {
      set_ring_level_limit(from.ring_level_limit());
    }
    if (from.has_sys_level_limit()) {
      set_sys_level_limit(from.sys_level_limit());
    }
    if (from.has_tree_level_limit()) {
      set_tree_level_limit(from.tree_level_limit());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_other_info()) {
      mutable_other_info()->::ProtoThreeObj::MergeFrom(from.other_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoWedLabel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoWedLabel::CopyFrom(const ProtoWedLabel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoWedLabel::IsInitialized() const {
  
  return true;
}

void ProtoWedLabel::Swap(ProtoWedLabel* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(label_id_, other->label_id_);
    std::swap(ring_level_limit_, other->ring_level_limit_);
    std::swap(sys_level_limit_, other->sys_level_limit_);
    std::swap(tree_level_limit_, other->tree_level_limit_);
    std::swap(status_, other->status_);
    std::swap(other_info_, other->other_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoWedLabel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoWedLabel_descriptor_;
  metadata.reflection = ProtoWedLabel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoActRankInfo::kRankFieldNumber;
const int ProtoActRankInfo::kRoleIdFieldNumber;
const int ProtoActRankInfo::kNameFieldNumber;
const int ProtoActRankInfo::kRankValueFieldNumber;
const int ProtoActRankInfo::kTickFieldNumber;
#endif  // !_MSC_VER

ProtoActRankInfo::ProtoActRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoActRankInfo::InitAsDefaultInstance() {
}

ProtoActRankInfo::ProtoActRankInfo(const ProtoActRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoActRankInfo::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rank_value_ = 0;
  tick_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoActRankInfo::~ProtoActRankInfo() {
  SharedDtor();
}

void ProtoActRankInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoActRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoActRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoActRankInfo_descriptor_;
}

const ProtoActRankInfo& ProtoActRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoActRankInfo* ProtoActRankInfo::default_instance_ = NULL;

ProtoActRankInfo* ProtoActRankInfo::New() const {
  return new ProtoActRankInfo;
}

void ProtoActRankInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0;
    role_id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    rank_value_ = 0;
    tick_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoActRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }
      
      // optional int64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rank_value;
        break;
      }
      
      // optional int32 rank_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_value_)));
          set_has_rank_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_tick;
        break;
      }
      
      // optional int64 tick = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tick_)));
          set_has_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoActRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }
  
  // optional int64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->role_id(), output);
  }
  
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }
  
  // optional int32 rank_value = 4;
  if (has_rank_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rank_value(), output);
  }
  
  // optional int64 tick = 5;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->tick(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoActRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }
  
  // optional int64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->role_id(), target);
  }
  
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }
  
  // optional int32 rank_value = 4;
  if (has_rank_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rank_value(), target);
  }
  
  // optional int64 tick = 5;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->tick(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoActRankInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
    // optional int64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 rank_value = 4;
    if (has_rank_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_value());
    }
    
    // optional int64 tick = 5;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tick());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoActRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoActRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoActRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoActRankInfo::MergeFrom(const ProtoActRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_rank_value()) {
      set_rank_value(from.rank_value());
    }
    if (from.has_tick()) {
      set_tick(from.tick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoActRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoActRankInfo::CopyFrom(const ProtoActRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoActRankInfo::IsInitialized() const {
  
  return true;
}

void ProtoActRankInfo::Swap(ProtoActRankInfo* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(role_id_, other->role_id_);
    std::swap(name_, other->name_);
    std::swap(rank_value_, other->rank_value_);
    std::swap(tick_, other->tick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoActRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoActRankInfo_descriptor_;
  metadata.reflection = ProtoActRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoWaveReward::kWaveFieldNumber;
const int ProtoWaveReward::kAmountFieldNumber;
const int ProtoWaveReward::kObjFieldNumber;
#endif  // !_MSC_VER

ProtoWaveReward::ProtoWaveReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoWaveReward::InitAsDefaultInstance() {
}

ProtoWaveReward::ProtoWaveReward(const ProtoWaveReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoWaveReward::SharedCtor() {
  _cached_size_ = 0;
  wave_ = 0;
  amount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoWaveReward::~ProtoWaveReward() {
  SharedDtor();
}

void ProtoWaveReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoWaveReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoWaveReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoWaveReward_descriptor_;
}

const ProtoWaveReward& ProtoWaveReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoWaveReward* ProtoWaveReward::default_instance_ = NULL;

ProtoWaveReward* ProtoWaveReward::New() const {
  return new ProtoWaveReward;
}

void ProtoWaveReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wave_ = 0;
    amount_ = 0;
  }
  obj_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoWaveReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 wave = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wave_)));
          set_has_wave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_amount;
        break;
      }
      
      // optional int32 amount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_obj;
        break;
      }
      
      // repeated .ProtoPairObj obj = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_obj:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_obj()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_obj;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoWaveReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 wave = 1;
  if (has_wave()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wave(), output);
  }
  
  // optional int32 amount = 2;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->amount(), output);
  }
  
  // repeated .ProtoPairObj obj = 3;
  for (int i = 0; i < this->obj_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->obj(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoWaveReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 wave = 1;
  if (has_wave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wave(), target);
  }
  
  // optional int32 amount = 2;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->amount(), target);
  }
  
  // repeated .ProtoPairObj obj = 3;
  for (int i = 0; i < this->obj_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->obj(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoWaveReward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 wave = 1;
    if (has_wave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wave());
    }
    
    // optional int32 amount = 2;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->amount());
    }
    
  }
  // repeated .ProtoPairObj obj = 3;
  total_size += 1 * this->obj_size();
  for (int i = 0; i < this->obj_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->obj(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoWaveReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoWaveReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoWaveReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoWaveReward::MergeFrom(const ProtoWaveReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  obj_.MergeFrom(from.obj_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wave()) {
      set_wave(from.wave());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoWaveReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoWaveReward::CopyFrom(const ProtoWaveReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoWaveReward::IsInitialized() const {
  
  return true;
}

void ProtoWaveReward::Swap(ProtoWaveReward* other) {
  if (other != this) {
    std::swap(wave_, other->wave_);
    std::swap(amount_, other->amount_);
    obj_.Swap(&other->obj_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoWaveReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoWaveReward_descriptor_;
  metadata.reflection = ProtoWaveReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoPlayerCheer::kRoleIdFieldNumber;
const int ProtoPlayerCheer::kRoleNameFieldNumber;
const int ProtoPlayerCheer::kWaveFieldNumber;
const int ProtoPlayerCheer::kIsCheerFieldNumber;
const int ProtoPlayerCheer::kIsEncourageFieldNumber;
#endif  // !_MSC_VER

ProtoPlayerCheer::ProtoPlayerCheer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoPlayerCheer::InitAsDefaultInstance() {
}

ProtoPlayerCheer::ProtoPlayerCheer(const ProtoPlayerCheer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoPlayerCheer::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wave_ = 0;
  is_cheer_ = 0;
  is_encourage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoPlayerCheer::~ProtoPlayerCheer() {
  SharedDtor();
}

void ProtoPlayerCheer::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoPlayerCheer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoPlayerCheer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoPlayerCheer_descriptor_;
}

const ProtoPlayerCheer& ProtoPlayerCheer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoPlayerCheer* ProtoPlayerCheer::default_instance_ = NULL;

ProtoPlayerCheer* ProtoPlayerCheer::New() const {
  return new ProtoPlayerCheer;
}

void ProtoPlayerCheer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_LONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    wave_ = 0;
    is_cheer_ = 0;
    is_encourage_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoPlayerCheer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_name;
        break;
      }
      
      // optional string role_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wave;
        break;
      }
      
      // optional int32 wave = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wave_)));
          set_has_wave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_cheer;
        break;
      }
      
      // optional int32 is_cheer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_cheer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_cheer_)));
          set_has_is_cheer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_encourage;
        break;
      }
      
      // optional int32 is_encourage = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_encourage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_encourage_)));
          set_has_is_encourage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoPlayerCheer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_id(), output);
  }
  
  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->role_name(), output);
  }
  
  // optional int32 wave = 3;
  if (has_wave()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wave(), output);
  }
  
  // optional int32 is_cheer = 4;
  if (has_is_cheer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->is_cheer(), output);
  }
  
  // optional int32 is_encourage = 5;
  if (has_is_encourage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->is_encourage(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoPlayerCheer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_id(), target);
  }
  
  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }
  
  // optional int32 wave = 3;
  if (has_wave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wave(), target);
  }
  
  // optional int32 is_cheer = 4;
  if (has_is_cheer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->is_cheer(), target);
  }
  
  // optional int32 is_encourage = 5;
  if (has_is_encourage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->is_encourage(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoPlayerCheer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional string role_name = 2;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }
    
    // optional int32 wave = 3;
    if (has_wave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wave());
    }
    
    // optional int32 is_cheer = 4;
    if (has_is_cheer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_cheer());
    }
    
    // optional int32 is_encourage = 5;
    if (has_is_encourage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_encourage());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoPlayerCheer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoPlayerCheer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoPlayerCheer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoPlayerCheer::MergeFrom(const ProtoPlayerCheer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_wave()) {
      set_wave(from.wave());
    }
    if (from.has_is_cheer()) {
      set_is_cheer(from.is_cheer());
    }
    if (from.has_is_encourage()) {
      set_is_encourage(from.is_encourage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoPlayerCheer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoPlayerCheer::CopyFrom(const ProtoPlayerCheer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoPlayerCheer::IsInitialized() const {
  
  return true;
}

void ProtoPlayerCheer::Swap(ProtoPlayerCheer* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(wave_, other->wave_);
    std::swap(is_cheer_, other->is_cheer_);
    std::swap(is_encourage_, other->is_encourage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoPlayerCheer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoPlayerCheer_descriptor_;
  metadata.reflection = ProtoPlayerCheer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoCheerRecord::kRoleIdFieldNumber;
const int ProtoCheerRecord::kRoleNameFieldNumber;
const int ProtoCheerRecord::kTypeFieldNumber;
const int ProtoCheerRecord::kIsActiveFieldNumber;
const int ProtoCheerRecord::kTimeFieldNumber;
#endif  // !_MSC_VER

ProtoCheerRecord::ProtoCheerRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoCheerRecord::InitAsDefaultInstance() {
}

ProtoCheerRecord::ProtoCheerRecord(const ProtoCheerRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoCheerRecord::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  is_active_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoCheerRecord::~ProtoCheerRecord() {
  SharedDtor();
}

void ProtoCheerRecord::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoCheerRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoCheerRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoCheerRecord_descriptor_;
}

const ProtoCheerRecord& ProtoCheerRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoCheerRecord* ProtoCheerRecord::default_instance_ = NULL;

ProtoCheerRecord* ProtoCheerRecord::New() const {
  return new ProtoCheerRecord;
}

void ProtoCheerRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_LONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    type_ = 0;
    is_active_ = 0;
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoCheerRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_name;
        break;
      }
      
      // optional string role_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_active;
        break;
      }
      
      // optional int32 is_active = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_active_)));
          set_has_is_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }
      
      // optional int32 time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoCheerRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_id(), output);
  }
  
  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->role_name(), output);
  }
  
  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }
  
  // optional int32 is_active = 4;
  if (has_is_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->is_active(), output);
  }
  
  // optional int32 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoCheerRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_id(), target);
  }
  
  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }
  
  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }
  
  // optional int32 is_active = 4;
  if (has_is_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->is_active(), target);
  }
  
  // optional int32 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoCheerRecord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional string role_name = 2;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }
    
    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int32 is_active = 4;
    if (has_is_active()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_active());
    }
    
    // optional int32 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoCheerRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoCheerRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoCheerRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoCheerRecord::MergeFrom(const ProtoCheerRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_is_active()) {
      set_is_active(from.is_active());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoCheerRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoCheerRecord::CopyFrom(const ProtoCheerRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoCheerRecord::IsInitialized() const {
  
  return true;
}

void ProtoCheerRecord::Swap(ProtoCheerRecord* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(type_, other->type_);
    std::swap(is_active_, other->is_active_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoCheerRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoCheerRecord_descriptor_;
  metadata.reflection = ProtoCheerRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoRechargeRank::kRoleIdFieldNumber;
const int ProtoRechargeRank::kNameFieldNumber;
const int ProtoRechargeRank::kRankFieldNumber;
const int ProtoRechargeRank::kAmountFieldNumber;
#endif  // !_MSC_VER

ProtoRechargeRank::ProtoRechargeRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoRechargeRank::InitAsDefaultInstance() {
}

ProtoRechargeRank::ProtoRechargeRank(const ProtoRechargeRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoRechargeRank::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rank_ = 0;
  amount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoRechargeRank::~ProtoRechargeRank() {
  SharedDtor();
}

void ProtoRechargeRank::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoRechargeRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoRechargeRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoRechargeRank_descriptor_;
}

const ProtoRechargeRank& ProtoRechargeRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoRechargeRank* ProtoRechargeRank::default_instance_ = NULL;

ProtoRechargeRank* ProtoRechargeRank::New() const {
  return new ProtoRechargeRank;
}

void ProtoRechargeRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    rank_ = 0;
    amount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoRechargeRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank;
        break;
      }
      
      // optional int32 rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_amount;
        break;
      }
      
      // optional int32 amount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoRechargeRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_id(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional int32 rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rank(), output);
  }
  
  // optional int32 amount = 4;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->amount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoRechargeRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_id(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional int32 rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rank(), target);
  }
  
  // optional int32 amount = 4;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->amount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoRechargeRank::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
    // optional int32 amount = 4;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->amount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoRechargeRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoRechargeRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoRechargeRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoRechargeRank::MergeFrom(const ProtoRechargeRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoRechargeRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoRechargeRank::CopyFrom(const ProtoRechargeRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoRechargeRank::IsInitialized() const {
  
  return true;
}

void ProtoRechargeRank::Swap(ProtoRechargeRank* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(name_, other->name_);
    std::swap(rank_, other->rank_);
    std::swap(amount_, other->amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoRechargeRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoRechargeRank_descriptor_;
  metadata.reflection = ProtoRechargeRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoMountInfo::kMountGradeFieldNumber;
const int ProtoMountInfo::kMountShapeFieldNumber;
const int ProtoMountInfo::kForceFieldNumber;
const int ProtoMountInfo::kPropFieldNumber;
const int ProtoMountInfo::kTypeFieldNumber;
const int ProtoMountInfo::kTempFieldNumber;
const int ProtoMountInfo::kSkillFieldNumber;
const int ProtoMountInfo::kActShapeFieldNumber;
#endif  // !_MSC_VER

ProtoMountInfo::ProtoMountInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoMountInfo::InitAsDefaultInstance() {
  prop_ = const_cast< ::ProtoFightPro*>(&::ProtoFightPro::default_instance());
  temp_ = const_cast< ::ProtoFightPro*>(&::ProtoFightPro::default_instance());
}

ProtoMountInfo::ProtoMountInfo(const ProtoMountInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoMountInfo::SharedCtor() {
  _cached_size_ = 0;
  mount_grade_ = 0;
  mount_shape_ = 0;
  force_ = 0;
  prop_ = NULL;
  type_ = 0;
  temp_ = NULL;
  act_shape_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoMountInfo::~ProtoMountInfo() {
  SharedDtor();
}

void ProtoMountInfo::SharedDtor() {
  if (this != default_instance_) {
    delete prop_;
    delete temp_;
  }
}

void ProtoMountInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoMountInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoMountInfo_descriptor_;
}

const ProtoMountInfo& ProtoMountInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoMountInfo* ProtoMountInfo::default_instance_ = NULL;

ProtoMountInfo* ProtoMountInfo::New() const {
  return new ProtoMountInfo;
}

void ProtoMountInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mount_grade_ = 0;
    mount_shape_ = 0;
    force_ = 0;
    if (has_prop()) {
      if (prop_ != NULL) prop_->::ProtoFightPro::Clear();
    }
    type_ = 0;
    if (has_temp()) {
      if (temp_ != NULL) temp_->::ProtoFightPro::Clear();
    }
    act_shape_ = 0;
  }
  skill_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoMountInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mount_grade = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mount_grade_)));
          set_has_mount_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mount_shape;
        break;
      }
      
      // optional int32 mount_shape = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mount_shape:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mount_shape_)));
          set_has_mount_shape();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_force;
        break;
      }
      
      // optional int32 force = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &force_)));
          set_has_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_prop;
        break;
      }
      
      // optional .ProtoFightPro prop = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }
      
      // optional int32 type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_temp;
        break;
      }
      
      // optional .ProtoFightPro temp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_temp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_temp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_skill;
        break;
      }
      
      // repeated .ProtoSkill skill = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_skill;
        if (input->ExpectTag(64)) goto parse_act_shape;
        break;
      }
      
      // optional int32 act_shape = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_act_shape:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &act_shape_)));
          set_has_act_shape();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoMountInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 mount_grade = 1;
  if (has_mount_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mount_grade(), output);
  }
  
  // optional int32 mount_shape = 2;
  if (has_mount_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mount_shape(), output);
  }
  
  // optional int32 force = 3;
  if (has_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->force(), output);
  }
  
  // optional .ProtoFightPro prop = 4;
  if (has_prop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->prop(), output);
  }
  
  // optional int32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }
  
  // optional .ProtoFightPro temp = 6;
  if (has_temp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->temp(), output);
  }
  
  // repeated .ProtoSkill skill = 7;
  for (int i = 0; i < this->skill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->skill(i), output);
  }
  
  // optional int32 act_shape = 8;
  if (has_act_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->act_shape(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoMountInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 mount_grade = 1;
  if (has_mount_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mount_grade(), target);
  }
  
  // optional int32 mount_shape = 2;
  if (has_mount_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mount_shape(), target);
  }
  
  // optional int32 force = 3;
  if (has_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->force(), target);
  }
  
  // optional .ProtoFightPro prop = 4;
  if (has_prop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->prop(), target);
  }
  
  // optional int32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }
  
  // optional .ProtoFightPro temp = 6;
  if (has_temp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->temp(), target);
  }
  
  // repeated .ProtoSkill skill = 7;
  for (int i = 0; i < this->skill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->skill(i), target);
  }
  
  // optional int32 act_shape = 8;
  if (has_act_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->act_shape(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoMountInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 mount_grade = 1;
    if (has_mount_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mount_grade());
    }
    
    // optional int32 mount_shape = 2;
    if (has_mount_shape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mount_shape());
    }
    
    // optional int32 force = 3;
    if (has_force()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->force());
    }
    
    // optional .ProtoFightPro prop = 4;
    if (has_prop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prop());
    }
    
    // optional int32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional .ProtoFightPro temp = 6;
    if (has_temp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->temp());
    }
    
    // optional int32 act_shape = 8;
    if (has_act_shape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->act_shape());
    }
    
  }
  // repeated .ProtoSkill skill = 7;
  total_size += 1 * this->skill_size();
  for (int i = 0; i < this->skill_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoMountInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoMountInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoMountInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoMountInfo::MergeFrom(const ProtoMountInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_.MergeFrom(from.skill_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mount_grade()) {
      set_mount_grade(from.mount_grade());
    }
    if (from.has_mount_shape()) {
      set_mount_shape(from.mount_shape());
    }
    if (from.has_force()) {
      set_force(from.force());
    }
    if (from.has_prop()) {
      mutable_prop()->::ProtoFightPro::MergeFrom(from.prop());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_temp()) {
      mutable_temp()->::ProtoFightPro::MergeFrom(from.temp());
    }
    if (from.has_act_shape()) {
      set_act_shape(from.act_shape());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoMountInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMountInfo::CopyFrom(const ProtoMountInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMountInfo::IsInitialized() const {
  
  return true;
}

void ProtoMountInfo::Swap(ProtoMountInfo* other) {
  if (other != this) {
    std::swap(mount_grade_, other->mount_grade_);
    std::swap(mount_shape_, other->mount_shape_);
    std::swap(force_, other->force_);
    std::swap(prop_, other->prop_);
    std::swap(type_, other->type_);
    std::swap(temp_, other->temp_);
    skill_.Swap(&other->skill_);
    std::swap(act_shape_, other->act_shape_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoMountInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoMountInfo_descriptor_;
  metadata.reflection = ProtoMountInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoEquipList::kPackTypeFieldNumber;
const int ProtoEquipList::kPackItemListFieldNumber;
#endif  // !_MSC_VER

ProtoEquipList::ProtoEquipList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoEquipList::InitAsDefaultInstance() {
}

ProtoEquipList::ProtoEquipList(const ProtoEquipList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoEquipList::SharedCtor() {
  _cached_size_ = 0;
  pack_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoEquipList::~ProtoEquipList() {
  SharedDtor();
}

void ProtoEquipList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoEquipList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoEquipList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoEquipList_descriptor_;
}

const ProtoEquipList& ProtoEquipList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoEquipList* ProtoEquipList::default_instance_ = NULL;

ProtoEquipList* ProtoEquipList::New() const {
  return new ProtoEquipList;
}

void ProtoEquipList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pack_type_ = 0;
  }
  pack_item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoEquipList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pack_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pack_type_)));
          set_has_pack_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pack_item_list;
        break;
      }
      
      // repeated .ProtoItem pack_item_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pack_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pack_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pack_item_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoEquipList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pack_type = 1;
  if (has_pack_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pack_type(), output);
  }
  
  // repeated .ProtoItem pack_item_list = 2;
  for (int i = 0; i < this->pack_item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pack_item_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoEquipList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pack_type = 1;
  if (has_pack_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pack_type(), target);
  }
  
  // repeated .ProtoItem pack_item_list = 2;
  for (int i = 0; i < this->pack_item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pack_item_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoEquipList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pack_type = 1;
    if (has_pack_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pack_type());
    }
    
  }
  // repeated .ProtoItem pack_item_list = 2;
  total_size += 1 * this->pack_item_list_size();
  for (int i = 0; i < this->pack_item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pack_item_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoEquipList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoEquipList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoEquipList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoEquipList::MergeFrom(const ProtoEquipList& from) {
  GOOGLE_CHECK_NE(&from, this);
  pack_item_list_.MergeFrom(from.pack_item_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pack_type()) {
      set_pack_type(from.pack_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoEquipList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoEquipList::CopyFrom(const ProtoEquipList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoEquipList::IsInitialized() const {
  
  return true;
}

void ProtoEquipList::Swap(ProtoEquipList* other) {
  if (other != this) {
    std::swap(pack_type_, other->pack_type_);
    pack_item_list_.Swap(&other->pack_item_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoEquipList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoEquipList_descriptor_;
  metadata.reflection = ProtoEquipList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PActCumulativeLogin::kSingleFieldNumber;
const int PActCumulativeLogin::kTenFieldNumber;
const int PActCumulativeLogin::kHundredFieldNumber;
const int PActCumulativeLogin::kMultipleFieldNumber;
const int PActCumulativeLogin::kSingleStateFieldNumber;
const int PActCumulativeLogin::kTenStateFieldNumber;
const int PActCumulativeLogin::kHundredStateFieldNumber;
const int PActCumulativeLogin::kMultipleStateFieldNumber;
const int PActCumulativeLogin::kLoginCountFieldNumber;
#endif  // !_MSC_VER

PActCumulativeLogin::PActCumulativeLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PActCumulativeLogin::InitAsDefaultInstance() {
}

PActCumulativeLogin::PActCumulativeLogin(const PActCumulativeLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PActCumulativeLogin::SharedCtor() {
  _cached_size_ = 0;
  single_ = 0;
  ten_ = 0;
  hundred_ = 0;
  multiple_ = 0;
  single_state_ = 0;
  ten_state_ = 0;
  hundred_state_ = 0;
  multiple_state_ = 0;
  login_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PActCumulativeLogin::~PActCumulativeLogin() {
  SharedDtor();
}

void PActCumulativeLogin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PActCumulativeLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PActCumulativeLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PActCumulativeLogin_descriptor_;
}

const PActCumulativeLogin& PActCumulativeLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

PActCumulativeLogin* PActCumulativeLogin::default_instance_ = NULL;

PActCumulativeLogin* PActCumulativeLogin::New() const {
  return new PActCumulativeLogin;
}

void PActCumulativeLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    single_ = 0;
    ten_ = 0;
    hundred_ = 0;
    multiple_ = 0;
    single_state_ = 0;
    ten_state_ = 0;
    hundred_state_ = 0;
    multiple_state_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    login_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PActCumulativeLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 single = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &single_)));
          set_has_single();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ten;
        break;
      }
      
      // optional int32 ten = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ten:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ten_)));
          set_has_ten();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hundred;
        break;
      }
      
      // optional int32 hundred = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hundred:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hundred_)));
          set_has_hundred();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_multiple;
        break;
      }
      
      // optional int32 multiple = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_multiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &multiple_)));
          set_has_multiple();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_single_state;
        break;
      }
      
      // optional int32 single_state = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_single_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &single_state_)));
          set_has_single_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ten_state;
        break;
      }
      
      // optional int32 ten_state = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ten_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ten_state_)));
          set_has_ten_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_hundred_state;
        break;
      }
      
      // optional int32 hundred_state = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hundred_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hundred_state_)));
          set_has_hundred_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_multiple_state;
        break;
      }
      
      // optional int32 multiple_state = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_multiple_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &multiple_state_)));
          set_has_multiple_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_login_count;
        break;
      }
      
      // optional int32 login_count = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &login_count_)));
          set_has_login_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PActCumulativeLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 single = 1;
  if (has_single()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->single(), output);
  }
  
  // optional int32 ten = 2;
  if (has_ten()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ten(), output);
  }
  
  // optional int32 hundred = 3;
  if (has_hundred()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hundred(), output);
  }
  
  // optional int32 multiple = 4;
  if (has_multiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->multiple(), output);
  }
  
  // optional int32 single_state = 5;
  if (has_single_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->single_state(), output);
  }
  
  // optional int32 ten_state = 6;
  if (has_ten_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ten_state(), output);
  }
  
  // optional int32 hundred_state = 7;
  if (has_hundred_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->hundred_state(), output);
  }
  
  // optional int32 multiple_state = 8;
  if (has_multiple_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->multiple_state(), output);
  }
  
  // optional int32 login_count = 9;
  if (has_login_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->login_count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PActCumulativeLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 single = 1;
  if (has_single()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->single(), target);
  }
  
  // optional int32 ten = 2;
  if (has_ten()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ten(), target);
  }
  
  // optional int32 hundred = 3;
  if (has_hundred()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hundred(), target);
  }
  
  // optional int32 multiple = 4;
  if (has_multiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->multiple(), target);
  }
  
  // optional int32 single_state = 5;
  if (has_single_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->single_state(), target);
  }
  
  // optional int32 ten_state = 6;
  if (has_ten_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ten_state(), target);
  }
  
  // optional int32 hundred_state = 7;
  if (has_hundred_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->hundred_state(), target);
  }
  
  // optional int32 multiple_state = 8;
  if (has_multiple_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->multiple_state(), target);
  }
  
  // optional int32 login_count = 9;
  if (has_login_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->login_count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PActCumulativeLogin::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 single = 1;
    if (has_single()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->single());
    }
    
    // optional int32 ten = 2;
    if (has_ten()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ten());
    }
    
    // optional int32 hundred = 3;
    if (has_hundred()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hundred());
    }
    
    // optional int32 multiple = 4;
    if (has_multiple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->multiple());
    }
    
    // optional int32 single_state = 5;
    if (has_single_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->single_state());
    }
    
    // optional int32 ten_state = 6;
    if (has_ten_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ten_state());
    }
    
    // optional int32 hundred_state = 7;
    if (has_hundred_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hundred_state());
    }
    
    // optional int32 multiple_state = 8;
    if (has_multiple_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->multiple_state());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 login_count = 9;
    if (has_login_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->login_count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PActCumulativeLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PActCumulativeLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PActCumulativeLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PActCumulativeLogin::MergeFrom(const PActCumulativeLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_single()) {
      set_single(from.single());
    }
    if (from.has_ten()) {
      set_ten(from.ten());
    }
    if (from.has_hundred()) {
      set_hundred(from.hundred());
    }
    if (from.has_multiple()) {
      set_multiple(from.multiple());
    }
    if (from.has_single_state()) {
      set_single_state(from.single_state());
    }
    if (from.has_ten_state()) {
      set_ten_state(from.ten_state());
    }
    if (from.has_hundred_state()) {
      set_hundred_state(from.hundred_state());
    }
    if (from.has_multiple_state()) {
      set_multiple_state(from.multiple_state());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_login_count()) {
      set_login_count(from.login_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PActCumulativeLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PActCumulativeLogin::CopyFrom(const PActCumulativeLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PActCumulativeLogin::IsInitialized() const {
  
  return true;
}

void PActCumulativeLogin::Swap(PActCumulativeLogin* other) {
  if (other != this) {
    std::swap(single_, other->single_);
    std::swap(ten_, other->ten_);
    std::swap(hundred_, other->hundred_);
    std::swap(multiple_, other->multiple_);
    std::swap(single_state_, other->single_state_);
    std::swap(ten_state_, other->ten_state_);
    std::swap(hundred_state_, other->hundred_state_);
    std::swap(multiple_state_, other->multiple_state_);
    std::swap(login_count_, other->login_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PActCumulativeLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PActCumulativeLogin_descriptor_;
  metadata.reflection = PActCumulativeLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoLegendTop::kPassFloorFieldNumber;
const int ProtoLegendTop::kTodayRankFieldNumber;
const int ProtoLegendTop::kIsSweepFieldNumber;
const int ProtoLegendTop::kFloorInfoFieldNumber;
#endif  // !_MSC_VER

ProtoLegendTop::ProtoLegendTop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoLegendTop::InitAsDefaultInstance() {
}

ProtoLegendTop::ProtoLegendTop(const ProtoLegendTop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoLegendTop::SharedCtor() {
  _cached_size_ = 0;
  pass_floor_ = 0;
  today_rank_ = 0;
  is_sweep_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoLegendTop::~ProtoLegendTop() {
  SharedDtor();
}

void ProtoLegendTop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoLegendTop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoLegendTop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoLegendTop_descriptor_;
}

const ProtoLegendTop& ProtoLegendTop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoLegendTop* ProtoLegendTop::default_instance_ = NULL;

ProtoLegendTop* ProtoLegendTop::New() const {
  return new ProtoLegendTop;
}

void ProtoLegendTop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pass_floor_ = 0;
    today_rank_ = 0;
    is_sweep_ = 0;
  }
  floor_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoLegendTop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pass_floor = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_floor_)));
          set_has_pass_floor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_today_rank;
        break;
      }
      
      // optional int32 today_rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &today_rank_)));
          set_has_today_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_sweep;
        break;
      }
      
      // optional int32 is_sweep = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_sweep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_sweep_)));
          set_has_is_sweep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_floor_info;
        break;
      }
      
      // repeated .ProtoFloorInfo floor_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_floor_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_floor_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_floor_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoLegendTop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pass_floor = 1;
  if (has_pass_floor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pass_floor(), output);
  }
  
  // optional int32 today_rank = 2;
  if (has_today_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->today_rank(), output);
  }
  
  // optional int32 is_sweep = 3;
  if (has_is_sweep()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->is_sweep(), output);
  }
  
  // repeated .ProtoFloorInfo floor_info = 4;
  for (int i = 0; i < this->floor_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->floor_info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoLegendTop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pass_floor = 1;
  if (has_pass_floor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pass_floor(), target);
  }
  
  // optional int32 today_rank = 2;
  if (has_today_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->today_rank(), target);
  }
  
  // optional int32 is_sweep = 3;
  if (has_is_sweep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->is_sweep(), target);
  }
  
  // repeated .ProtoFloorInfo floor_info = 4;
  for (int i = 0; i < this->floor_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->floor_info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoLegendTop::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pass_floor = 1;
    if (has_pass_floor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass_floor());
    }
    
    // optional int32 today_rank = 2;
    if (has_today_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->today_rank());
    }
    
    // optional int32 is_sweep = 3;
    if (has_is_sweep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_sweep());
    }
    
  }
  // repeated .ProtoFloorInfo floor_info = 4;
  total_size += 1 * this->floor_info_size();
  for (int i = 0; i < this->floor_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->floor_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoLegendTop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoLegendTop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoLegendTop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoLegendTop::MergeFrom(const ProtoLegendTop& from) {
  GOOGLE_CHECK_NE(&from, this);
  floor_info_.MergeFrom(from.floor_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pass_floor()) {
      set_pass_floor(from.pass_floor());
    }
    if (from.has_today_rank()) {
      set_today_rank(from.today_rank());
    }
    if (from.has_is_sweep()) {
      set_is_sweep(from.is_sweep());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoLegendTop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoLegendTop::CopyFrom(const ProtoLegendTop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoLegendTop::IsInitialized() const {
  
  return true;
}

void ProtoLegendTop::Swap(ProtoLegendTop* other) {
  if (other != this) {
    std::swap(pass_floor_, other->pass_floor_);
    std::swap(today_rank_, other->today_rank_);
    std::swap(is_sweep_, other->is_sweep_);
    floor_info_.Swap(&other->floor_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoLegendTop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoLegendTop_descriptor_;
  metadata.reflection = ProtoLegendTop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoWavePlayer::kRoleIdFieldNumber;
const int ProtoWavePlayer::kNameFieldNumber;
const int ProtoWavePlayer::kSexFieldNumber;
const int ProtoWavePlayer::kWaveFieldNumber;
const int ProtoWavePlayer::kTickFieldNumber;
#endif  // !_MSC_VER

ProtoWavePlayer::ProtoWavePlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoWavePlayer::InitAsDefaultInstance() {
}

ProtoWavePlayer::ProtoWavePlayer(const ProtoWavePlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoWavePlayer::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  wave_ = 0;
  tick_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoWavePlayer::~ProtoWavePlayer() {
  SharedDtor();
}

void ProtoWavePlayer::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoWavePlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoWavePlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoWavePlayer_descriptor_;
}

const ProtoWavePlayer& ProtoWavePlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoWavePlayer* ProtoWavePlayer::default_instance_ = NULL;

ProtoWavePlayer* ProtoWavePlayer::New() const {
  return new ProtoWavePlayer;
}

void ProtoWavePlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    sex_ = 0;
    wave_ = 0;
    tick_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoWavePlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sex;
        break;
      }
      
      // optional int32 sex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_wave;
        break;
      }
      
      // optional int32 wave = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wave_)));
          set_has_wave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_tick;
        break;
      }
      
      // optional int64 tick = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tick_)));
          set_has_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoWavePlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_id(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional int32 sex = 3;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sex(), output);
  }
  
  // optional int32 wave = 4;
  if (has_wave()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->wave(), output);
  }
  
  // optional int64 tick = 5;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->tick(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoWavePlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_id(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional int32 sex = 3;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sex(), target);
  }
  
  // optional int32 wave = 4;
  if (has_wave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->wave(), target);
  }
  
  // optional int64 tick = 5;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->tick(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoWavePlayer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 sex = 3;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }
    
    // optional int32 wave = 4;
    if (has_wave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wave());
    }
    
    // optional int64 tick = 5;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tick());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoWavePlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoWavePlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoWavePlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoWavePlayer::MergeFrom(const ProtoWavePlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_wave()) {
      set_wave(from.wave());
    }
    if (from.has_tick()) {
      set_tick(from.tick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoWavePlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoWavePlayer::CopyFrom(const ProtoWavePlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoWavePlayer::IsInitialized() const {
  
  return true;
}

void ProtoWavePlayer::Swap(ProtoWavePlayer* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(name_, other->name_);
    std::swap(sex_, other->sex_);
    std::swap(wave_, other->wave_);
    std::swap(tick_, other->tick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoWavePlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoWavePlayer_descriptor_;
  metadata.reflection = ProtoWavePlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoTransferInfo::kTransferIdFieldNumber;
const int ProtoTransferInfo::kTransferLvFieldNumber;
const int ProtoTransferInfo::kIsPermanentFieldNumber;
const int ProtoTransferInfo::kIsActiveFieldNumber;
const int ProtoTransferInfo::kActiveTickFieldNumber;
const int ProtoTransferInfo::kEndTickFieldNumber;
const int ProtoTransferInfo::kTransferSkillFieldNumber;
const int ProtoTransferInfo::kSkillFieldNumber;
#endif  // !_MSC_VER

ProtoTransferInfo::ProtoTransferInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoTransferInfo::InitAsDefaultInstance() {
}

ProtoTransferInfo::ProtoTransferInfo(const ProtoTransferInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoTransferInfo::SharedCtor() {
  _cached_size_ = 0;
  transfer_id_ = 0;
  transfer_lv_ = 0;
  is_permanent_ = 0;
  is_active_ = 0;
  active_tick_ = GOOGLE_LONGLONG(0);
  end_tick_ = GOOGLE_LONGLONG(0);
  transfer_skill_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoTransferInfo::~ProtoTransferInfo() {
  SharedDtor();
}

void ProtoTransferInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoTransferInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoTransferInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoTransferInfo_descriptor_;
}

const ProtoTransferInfo& ProtoTransferInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoTransferInfo* ProtoTransferInfo::default_instance_ = NULL;

ProtoTransferInfo* ProtoTransferInfo::New() const {
  return new ProtoTransferInfo;
}

void ProtoTransferInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    transfer_id_ = 0;
    transfer_lv_ = 0;
    is_permanent_ = 0;
    is_active_ = 0;
    active_tick_ = GOOGLE_LONGLONG(0);
    end_tick_ = GOOGLE_LONGLONG(0);
    transfer_skill_ = 0;
  }
  skill_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoTransferInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 transfer_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transfer_id_)));
          set_has_transfer_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_transfer_lv;
        break;
      }
      
      // optional int32 transfer_lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transfer_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transfer_lv_)));
          set_has_transfer_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_permanent;
        break;
      }
      
      // optional int32 is_permanent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_permanent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_permanent_)));
          set_has_is_permanent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_active;
        break;
      }
      
      // optional int32 is_active = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_active_)));
          set_has_is_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_active_tick;
        break;
      }
      
      // optional int64 active_tick = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &active_tick_)));
          set_has_active_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_end_tick;
        break;
      }
      
      // optional int64 end_tick = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_tick_)));
          set_has_end_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_transfer_skill;
        break;
      }
      
      // optional int32 transfer_skill = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transfer_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transfer_skill_)));
          set_has_transfer_skill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_skill;
        break;
      }
      
      // repeated .ProtoPairObj skill = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_skill;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoTransferInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 transfer_id = 1;
  if (has_transfer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->transfer_id(), output);
  }
  
  // optional int32 transfer_lv = 2;
  if (has_transfer_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->transfer_lv(), output);
  }
  
  // optional int32 is_permanent = 3;
  if (has_is_permanent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->is_permanent(), output);
  }
  
  // optional int32 is_active = 4;
  if (has_is_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->is_active(), output);
  }
  
  // optional int64 active_tick = 5;
  if (has_active_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->active_tick(), output);
  }
  
  // optional int64 end_tick = 6;
  if (has_end_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->end_tick(), output);
  }
  
  // optional int32 transfer_skill = 7;
  if (has_transfer_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->transfer_skill(), output);
  }
  
  // repeated .ProtoPairObj skill = 8;
  for (int i = 0; i < this->skill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->skill(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoTransferInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 transfer_id = 1;
  if (has_transfer_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->transfer_id(), target);
  }
  
  // optional int32 transfer_lv = 2;
  if (has_transfer_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->transfer_lv(), target);
  }
  
  // optional int32 is_permanent = 3;
  if (has_is_permanent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->is_permanent(), target);
  }
  
  // optional int32 is_active = 4;
  if (has_is_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->is_active(), target);
  }
  
  // optional int64 active_tick = 5;
  if (has_active_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->active_tick(), target);
  }
  
  // optional int64 end_tick = 6;
  if (has_end_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->end_tick(), target);
  }
  
  // optional int32 transfer_skill = 7;
  if (has_transfer_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->transfer_skill(), target);
  }
  
  // repeated .ProtoPairObj skill = 8;
  for (int i = 0; i < this->skill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->skill(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoTransferInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 transfer_id = 1;
    if (has_transfer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transfer_id());
    }
    
    // optional int32 transfer_lv = 2;
    if (has_transfer_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transfer_lv());
    }
    
    // optional int32 is_permanent = 3;
    if (has_is_permanent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_permanent());
    }
    
    // optional int32 is_active = 4;
    if (has_is_active()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_active());
    }
    
    // optional int64 active_tick = 5;
    if (has_active_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->active_tick());
    }
    
    // optional int64 end_tick = 6;
    if (has_end_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_tick());
    }
    
    // optional int32 transfer_skill = 7;
    if (has_transfer_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transfer_skill());
    }
    
  }
  // repeated .ProtoPairObj skill = 8;
  total_size += 1 * this->skill_size();
  for (int i = 0; i < this->skill_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoTransferInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoTransferInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoTransferInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoTransferInfo::MergeFrom(const ProtoTransferInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_.MergeFrom(from.skill_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transfer_id()) {
      set_transfer_id(from.transfer_id());
    }
    if (from.has_transfer_lv()) {
      set_transfer_lv(from.transfer_lv());
    }
    if (from.has_is_permanent()) {
      set_is_permanent(from.is_permanent());
    }
    if (from.has_is_active()) {
      set_is_active(from.is_active());
    }
    if (from.has_active_tick()) {
      set_active_tick(from.active_tick());
    }
    if (from.has_end_tick()) {
      set_end_tick(from.end_tick());
    }
    if (from.has_transfer_skill()) {
      set_transfer_skill(from.transfer_skill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoTransferInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoTransferInfo::CopyFrom(const ProtoTransferInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoTransferInfo::IsInitialized() const {
  
  return true;
}

void ProtoTransferInfo::Swap(ProtoTransferInfo* other) {
  if (other != this) {
    std::swap(transfer_id_, other->transfer_id_);
    std::swap(transfer_lv_, other->transfer_lv_);
    std::swap(is_permanent_, other->is_permanent_);
    std::swap(is_active_, other->is_active_);
    std::swap(active_tick_, other->active_tick_);
    std::swap(end_tick_, other->end_tick_);
    std::swap(transfer_skill_, other->transfer_skill_);
    skill_.Swap(&other->skill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoTransferInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoTransferInfo_descriptor_;
  metadata.reflection = ProtoTransferInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoScriptReset::kScriptSortFieldNumber;
const int ProtoScriptReset::kLeftTimesFieldNumber;
const int ProtoScriptReset::kLeftBuyTimesFieldNumber;
#endif  // !_MSC_VER

ProtoScriptReset::ProtoScriptReset()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoScriptReset::InitAsDefaultInstance() {
}

ProtoScriptReset::ProtoScriptReset(const ProtoScriptReset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoScriptReset::SharedCtor() {
  _cached_size_ = 0;
  script_sort_ = 0;
  left_times_ = 0;
  left_buy_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoScriptReset::~ProtoScriptReset() {
  SharedDtor();
}

void ProtoScriptReset::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoScriptReset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoScriptReset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoScriptReset_descriptor_;
}

const ProtoScriptReset& ProtoScriptReset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoScriptReset* ProtoScriptReset::default_instance_ = NULL;

ProtoScriptReset* ProtoScriptReset::New() const {
  return new ProtoScriptReset;
}

void ProtoScriptReset::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    script_sort_ = 0;
    left_times_ = 0;
    left_buy_times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoScriptReset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 script_sort = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &script_sort_)));
          set_has_script_sort();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_left_times;
        break;
      }
      
      // optional int32 left_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_times_)));
          set_has_left_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_left_buy_times;
        break;
      }
      
      // optional int32 left_buy_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_buy_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_buy_times_)));
          set_has_left_buy_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoScriptReset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 script_sort = 1;
  if (has_script_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->script_sort(), output);
  }
  
  // optional int32 left_times = 2;
  if (has_left_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->left_times(), output);
  }
  
  // optional int32 left_buy_times = 3;
  if (has_left_buy_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->left_buy_times(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoScriptReset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 script_sort = 1;
  if (has_script_sort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->script_sort(), target);
  }
  
  // optional int32 left_times = 2;
  if (has_left_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->left_times(), target);
  }
  
  // optional int32 left_buy_times = 3;
  if (has_left_buy_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->left_buy_times(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoScriptReset::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 script_sort = 1;
    if (has_script_sort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->script_sort());
    }
    
    // optional int32 left_times = 2;
    if (has_left_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_times());
    }
    
    // optional int32 left_buy_times = 3;
    if (has_left_buy_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_buy_times());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoScriptReset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoScriptReset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoScriptReset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoScriptReset::MergeFrom(const ProtoScriptReset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_script_sort()) {
      set_script_sort(from.script_sort());
    }
    if (from.has_left_times()) {
      set_left_times(from.left_times());
    }
    if (from.has_left_buy_times()) {
      set_left_buy_times(from.left_buy_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoScriptReset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoScriptReset::CopyFrom(const ProtoScriptReset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoScriptReset::IsInitialized() const {
  
  return true;
}

void ProtoScriptReset::Swap(ProtoScriptReset* other) {
  if (other != this) {
    std::swap(script_sort_, other->script_sort_);
    std::swap(left_times_, other->left_times_);
    std::swap(left_buy_times_, other->left_buy_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoScriptReset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoScriptReset_descriptor_;
  metadata.reflection = ProtoScriptReset_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoBackActName::kActIdFieldNumber;
const int ProtoBackActName::kActTitleFieldNumber;
const int ProtoBackActName::kHasRewardFieldNumber;
#endif  // !_MSC_VER

ProtoBackActName::ProtoBackActName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoBackActName::InitAsDefaultInstance() {
}

ProtoBackActName::ProtoBackActName(const ProtoBackActName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoBackActName::SharedCtor() {
  _cached_size_ = 0;
  act_id_ = 0;
  act_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  has_reward_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoBackActName::~ProtoBackActName() {
  SharedDtor();
}

void ProtoBackActName::SharedDtor() {
  if (act_title_ != &::google::protobuf::internal::kEmptyString) {
    delete act_title_;
  }
  if (this != default_instance_) {
  }
}

void ProtoBackActName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoBackActName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoBackActName_descriptor_;
}

const ProtoBackActName& ProtoBackActName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoBackActName* ProtoBackActName::default_instance_ = NULL;

ProtoBackActName* ProtoBackActName::New() const {
  return new ProtoBackActName;
}

void ProtoBackActName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    act_id_ = 0;
    if (has_act_title()) {
      if (act_title_ != &::google::protobuf::internal::kEmptyString) {
        act_title_->clear();
      }
    }
    has_reward_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoBackActName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 act_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &act_id_)));
          set_has_act_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_act_title;
        break;
      }
      
      // optional string act_title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_act_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_act_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->act_title().data(), this->act_title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_has_reward;
        break;
      }
      
      // optional int32 has_reward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &has_reward_)));
          set_has_has_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoBackActName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 act_id = 1;
  if (has_act_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->act_id(), output);
  }
  
  // optional string act_title = 2;
  if (has_act_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->act_title().data(), this->act_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->act_title(), output);
  }
  
  // optional int32 has_reward = 3;
  if (has_has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->has_reward(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoBackActName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 act_id = 1;
  if (has_act_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->act_id(), target);
  }
  
  // optional string act_title = 2;
  if (has_act_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->act_title().data(), this->act_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->act_title(), target);
  }
  
  // optional int32 has_reward = 3;
  if (has_has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->has_reward(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoBackActName::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 act_id = 1;
    if (has_act_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->act_id());
    }
    
    // optional string act_title = 2;
    if (has_act_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->act_title());
    }
    
    // optional int32 has_reward = 3;
    if (has_has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->has_reward());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoBackActName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoBackActName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoBackActName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoBackActName::MergeFrom(const ProtoBackActName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_act_id()) {
      set_act_id(from.act_id());
    }
    if (from.has_act_title()) {
      set_act_title(from.act_title());
    }
    if (from.has_has_reward()) {
      set_has_reward(from.has_reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoBackActName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoBackActName::CopyFrom(const ProtoBackActName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoBackActName::IsInitialized() const {
  
  return true;
}

void ProtoBackActName::Swap(ProtoBackActName* other) {
  if (other != this) {
    std::swap(act_id_, other->act_id_);
    std::swap(act_title_, other->act_title_);
    std::swap(has_reward_, other->has_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoBackActName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoBackActName_descriptor_;
  metadata.reflection = ProtoBackActName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoBackActInfo::kActIdFieldNumber;
const int ProtoBackActInfo::kSecondTypeFieldNumber;
const int ProtoBackActInfo::kActStartFieldNumber;
const int ProtoBackActInfo::kActEndFieldNumber;
const int ProtoBackActInfo::kActContentFieldNumber;
const int ProtoBackActInfo::kRewardListFieldNumber;
const int ProtoBackActInfo::kNeedGoldFieldNumber;
#endif  // !_MSC_VER

ProtoBackActInfo::ProtoBackActInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoBackActInfo::InitAsDefaultInstance() {
}

ProtoBackActInfo::ProtoBackActInfo(const ProtoBackActInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoBackActInfo::SharedCtor() {
  _cached_size_ = 0;
  act_id_ = 0;
  second_type_ = 0;
  act_start_ = 0;
  act_end_ = 0;
  act_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  need_gold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoBackActInfo::~ProtoBackActInfo() {
  SharedDtor();
}

void ProtoBackActInfo::SharedDtor() {
  if (act_content_ != &::google::protobuf::internal::kEmptyString) {
    delete act_content_;
  }
  if (this != default_instance_) {
  }
}

void ProtoBackActInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoBackActInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoBackActInfo_descriptor_;
}

const ProtoBackActInfo& ProtoBackActInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoBackActInfo* ProtoBackActInfo::default_instance_ = NULL;

ProtoBackActInfo* ProtoBackActInfo::New() const {
  return new ProtoBackActInfo;
}

void ProtoBackActInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    act_id_ = 0;
    second_type_ = 0;
    act_start_ = 0;
    act_end_ = 0;
    if (has_act_content()) {
      if (act_content_ != &::google::protobuf::internal::kEmptyString) {
        act_content_->clear();
      }
    }
    need_gold_ = 0;
  }
  reward_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoBackActInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 act_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &act_id_)));
          set_has_act_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_second_type;
        break;
      }
      
      // optional int32 second_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_second_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &second_type_)));
          set_has_second_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_act_start;
        break;
      }
      
      // optional int32 act_start = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_act_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &act_start_)));
          set_has_act_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_act_end;
        break;
      }
      
      // optional int32 act_end = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_act_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &act_end_)));
          set_has_act_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_act_content;
        break;
      }
      
      // optional string act_content = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_act_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_act_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->act_content().data(), this->act_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_reward_list;
        break;
      }
      
      // repeated .ProtoBackActReward reward_list = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_reward_list;
        if (input->ExpectTag(56)) goto parse_need_gold;
        break;
      }
      
      // optional int32 need_gold = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &need_gold_)));
          set_has_need_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoBackActInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 act_id = 1;
  if (has_act_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->act_id(), output);
  }
  
  // optional int32 second_type = 2;
  if (has_second_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->second_type(), output);
  }
  
  // optional int32 act_start = 3;
  if (has_act_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->act_start(), output);
  }
  
  // optional int32 act_end = 4;
  if (has_act_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->act_end(), output);
  }
  
  // optional string act_content = 5;
  if (has_act_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->act_content().data(), this->act_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->act_content(), output);
  }
  
  // repeated .ProtoBackActReward reward_list = 6;
  for (int i = 0; i < this->reward_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->reward_list(i), output);
  }
  
  // optional int32 need_gold = 7;
  if (has_need_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->need_gold(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoBackActInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 act_id = 1;
  if (has_act_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->act_id(), target);
  }
  
  // optional int32 second_type = 2;
  if (has_second_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->second_type(), target);
  }
  
  // optional int32 act_start = 3;
  if (has_act_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->act_start(), target);
  }
  
  // optional int32 act_end = 4;
  if (has_act_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->act_end(), target);
  }
  
  // optional string act_content = 5;
  if (has_act_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->act_content().data(), this->act_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->act_content(), target);
  }
  
  // repeated .ProtoBackActReward reward_list = 6;
  for (int i = 0; i < this->reward_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->reward_list(i), target);
  }
  
  // optional int32 need_gold = 7;
  if (has_need_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->need_gold(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoBackActInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 act_id = 1;
    if (has_act_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->act_id());
    }
    
    // optional int32 second_type = 2;
    if (has_second_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->second_type());
    }
    
    // optional int32 act_start = 3;
    if (has_act_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->act_start());
    }
    
    // optional int32 act_end = 4;
    if (has_act_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->act_end());
    }
    
    // optional string act_content = 5;
    if (has_act_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->act_content());
    }
    
    // optional int32 need_gold = 7;
    if (has_need_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->need_gold());
    }
    
  }
  // repeated .ProtoBackActReward reward_list = 6;
  total_size += 1 * this->reward_list_size();
  for (int i = 0; i < this->reward_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoBackActInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoBackActInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoBackActInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoBackActInfo::MergeFrom(const ProtoBackActInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_list_.MergeFrom(from.reward_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_act_id()) {
      set_act_id(from.act_id());
    }
    if (from.has_second_type()) {
      set_second_type(from.second_type());
    }
    if (from.has_act_start()) {
      set_act_start(from.act_start());
    }
    if (from.has_act_end()) {
      set_act_end(from.act_end());
    }
    if (from.has_act_content()) {
      set_act_content(from.act_content());
    }
    if (from.has_need_gold()) {
      set_need_gold(from.need_gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoBackActInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoBackActInfo::CopyFrom(const ProtoBackActInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoBackActInfo::IsInitialized() const {
  
  return true;
}

void ProtoBackActInfo::Swap(ProtoBackActInfo* other) {
  if (other != this) {
    std::swap(act_id_, other->act_id_);
    std::swap(second_type_, other->second_type_);
    std::swap(act_start_, other->act_start_);
    std::swap(act_end_, other->act_end_);
    std::swap(act_content_, other->act_content_);
    reward_list_.Swap(&other->reward_list_);
    std::swap(need_gold_, other->need_gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoBackActInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoBackActInfo_descriptor_;
  metadata.reflection = ProtoBackActInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoBackActReward::kRewardIdFieldNumber;
const int ProtoBackActReward::kRewardItemListFieldNumber;
const int ProtoBackActReward::kRewardAmountFieldNumber;
const int ProtoBackActReward::kCondValueListFieldNumber;
const int ProtoBackActReward::kRestoreGoldRateFieldNumber;
#endif  // !_MSC_VER

ProtoBackActReward::ProtoBackActReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoBackActReward::InitAsDefaultInstance() {
}

ProtoBackActReward::ProtoBackActReward(const ProtoBackActReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoBackActReward::SharedCtor() {
  _cached_size_ = 0;
  reward_id_ = 0;
  reward_amount_ = 0;
  restore_gold_rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoBackActReward::~ProtoBackActReward() {
  SharedDtor();
}

void ProtoBackActReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoBackActReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoBackActReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoBackActReward_descriptor_;
}

const ProtoBackActReward& ProtoBackActReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoBackActReward* ProtoBackActReward::default_instance_ = NULL;

ProtoBackActReward* ProtoBackActReward::New() const {
  return new ProtoBackActReward;
}

void ProtoBackActReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reward_id_ = 0;
    reward_amount_ = 0;
    restore_gold_rate_ = 0;
  }
  reward_item_list_.Clear();
  cond_value_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoBackActReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 reward_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id_)));
          set_has_reward_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward_item_list;
        break;
      }
      
      // repeated .ProtoItem reward_item_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward_item_list;
        if (input->ExpectTag(24)) goto parse_reward_amount;
        break;
      }
      
      // optional int32 reward_amount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_amount_)));
          set_has_reward_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cond_value_list;
        break;
      }
      
      // repeated int32 cond_value_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cond_value_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_cond_value_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cond_value_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cond_value_list;
        if (input->ExpectTag(40)) goto parse_restore_gold_rate;
        break;
      }
      
      // optional int32 restore_gold_rate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_restore_gold_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &restore_gold_rate_)));
          set_has_restore_gold_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoBackActReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 reward_id = 1;
  if (has_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reward_id(), output);
  }
  
  // repeated .ProtoItem reward_item_list = 2;
  for (int i = 0; i < this->reward_item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward_item_list(i), output);
  }
  
  // optional int32 reward_amount = 3;
  if (has_reward_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reward_amount(), output);
  }
  
  // repeated int32 cond_value_list = 4;
  for (int i = 0; i < this->cond_value_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->cond_value_list(i), output);
  }
  
  // optional int32 restore_gold_rate = 5;
  if (has_restore_gold_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->restore_gold_rate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoBackActReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 reward_id = 1;
  if (has_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reward_id(), target);
  }
  
  // repeated .ProtoItem reward_item_list = 2;
  for (int i = 0; i < this->reward_item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward_item_list(i), target);
  }
  
  // optional int32 reward_amount = 3;
  if (has_reward_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reward_amount(), target);
  }
  
  // repeated int32 cond_value_list = 4;
  for (int i = 0; i < this->cond_value_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->cond_value_list(i), target);
  }
  
  // optional int32 restore_gold_rate = 5;
  if (has_restore_gold_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->restore_gold_rate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoBackActReward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 reward_id = 1;
    if (has_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id());
    }
    
    // optional int32 reward_amount = 3;
    if (has_reward_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_amount());
    }
    
    // optional int32 restore_gold_rate = 5;
    if (has_restore_gold_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->restore_gold_rate());
    }
    
  }
  // repeated .ProtoItem reward_item_list = 2;
  total_size += 1 * this->reward_item_list_size();
  for (int i = 0; i < this->reward_item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward_item_list(i));
  }
  
  // repeated int32 cond_value_list = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->cond_value_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cond_value_list(i));
    }
    total_size += 1 * this->cond_value_list_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoBackActReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoBackActReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoBackActReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoBackActReward::MergeFrom(const ProtoBackActReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_item_list_.MergeFrom(from.reward_item_list_);
  cond_value_list_.MergeFrom(from.cond_value_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reward_id()) {
      set_reward_id(from.reward_id());
    }
    if (from.has_reward_amount()) {
      set_reward_amount(from.reward_amount());
    }
    if (from.has_restore_gold_rate()) {
      set_restore_gold_rate(from.restore_gold_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoBackActReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoBackActReward::CopyFrom(const ProtoBackActReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoBackActReward::IsInitialized() const {
  
  return true;
}

void ProtoBackActReward::Swap(ProtoBackActReward* other) {
  if (other != this) {
    std::swap(reward_id_, other->reward_id_);
    reward_item_list_.Swap(&other->reward_item_list_);
    std::swap(reward_amount_, other->reward_amount_);
    cond_value_list_.Swap(&other->cond_value_list_);
    std::swap(restore_gold_rate_, other->restore_gold_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoBackActReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoBackActReward_descriptor_;
  metadata.reflection = ProtoBackActReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoTransferClient::kTransferIdFieldNumber;
const int ProtoTransferClient::kTransferLvFieldNumber;
const int ProtoTransferClient::kIsActiveFieldNumber;
const int ProtoTransferClient::kIsPermanentFieldNumber;
const int ProtoTransferClient::kActiveTickFieldNumber;
const int ProtoTransferClient::kEndTickFieldNumber;
const int ProtoTransferClient::kTransferSkillFieldNumber;
const int ProtoTransferClient::kSkillFieldNumber;
const int ProtoTransferClient::kPropFieldNumber;
const int ProtoTransferClient::kLastFieldNumber;
const int ProtoTransferClient::kCoolFieldNumber;
#endif  // !_MSC_VER

ProtoTransferClient::ProtoTransferClient()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoTransferClient::InitAsDefaultInstance() {
  prop_ = const_cast< ::ProtoFightPro*>(&::ProtoFightPro::default_instance());
}

ProtoTransferClient::ProtoTransferClient(const ProtoTransferClient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoTransferClient::SharedCtor() {
  _cached_size_ = 0;
  transfer_id_ = 0;
  transfer_lv_ = 0;
  is_active_ = 0;
  is_permanent_ = 0;
  active_tick_ = GOOGLE_LONGLONG(0);
  end_tick_ = GOOGLE_LONGLONG(0);
  transfer_skill_ = 0;
  prop_ = NULL;
  last_ = 0;
  cool_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoTransferClient::~ProtoTransferClient() {
  SharedDtor();
}

void ProtoTransferClient::SharedDtor() {
  if (this != default_instance_) {
    delete prop_;
  }
}

void ProtoTransferClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoTransferClient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoTransferClient_descriptor_;
}

const ProtoTransferClient& ProtoTransferClient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoTransferClient* ProtoTransferClient::default_instance_ = NULL;

ProtoTransferClient* ProtoTransferClient::New() const {
  return new ProtoTransferClient;
}

void ProtoTransferClient::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    transfer_id_ = 0;
    transfer_lv_ = 0;
    is_active_ = 0;
    is_permanent_ = 0;
    active_tick_ = GOOGLE_LONGLONG(0);
    end_tick_ = GOOGLE_LONGLONG(0);
    transfer_skill_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_prop()) {
      if (prop_ != NULL) prop_->::ProtoFightPro::Clear();
    }
    last_ = 0;
    cool_ = 0;
  }
  skill_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoTransferClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 transfer_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transfer_id_)));
          set_has_transfer_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_transfer_lv;
        break;
      }
      
      // optional int32 transfer_lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transfer_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transfer_lv_)));
          set_has_transfer_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_active;
        break;
      }
      
      // optional int32 is_active = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_active_)));
          set_has_is_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_permanent;
        break;
      }
      
      // optional int32 is_permanent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_permanent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_permanent_)));
          set_has_is_permanent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_active_tick;
        break;
      }
      
      // optional int64 active_tick = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &active_tick_)));
          set_has_active_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_end_tick;
        break;
      }
      
      // optional int64 end_tick = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_tick_)));
          set_has_end_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_transfer_skill;
        break;
      }
      
      // optional int32 transfer_skill = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transfer_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transfer_skill_)));
          set_has_transfer_skill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_skill;
        break;
      }
      
      // repeated .ProtoSkill skill = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_skill;
        if (input->ExpectTag(74)) goto parse_prop;
        break;
      }
      
      // optional .ProtoFightPro prop = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_last;
        break;
      }
      
      // optional int32 last = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_)));
          set_has_last();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_cool;
        break;
      }
      
      // optional int32 cool = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cool_)));
          set_has_cool();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoTransferClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 transfer_id = 1;
  if (has_transfer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->transfer_id(), output);
  }
  
  // optional int32 transfer_lv = 2;
  if (has_transfer_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->transfer_lv(), output);
  }
  
  // optional int32 is_active = 3;
  if (has_is_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->is_active(), output);
  }
  
  // optional int32 is_permanent = 4;
  if (has_is_permanent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->is_permanent(), output);
  }
  
  // optional int64 active_tick = 5;
  if (has_active_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->active_tick(), output);
  }
  
  // optional int64 end_tick = 6;
  if (has_end_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->end_tick(), output);
  }
  
  // optional int32 transfer_skill = 7;
  if (has_transfer_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->transfer_skill(), output);
  }
  
  // repeated .ProtoSkill skill = 8;
  for (int i = 0; i < this->skill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->skill(i), output);
  }
  
  // optional .ProtoFightPro prop = 9;
  if (has_prop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->prop(), output);
  }
  
  // optional int32 last = 10;
  if (has_last()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->last(), output);
  }
  
  // optional int32 cool = 11;
  if (has_cool()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->cool(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoTransferClient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 transfer_id = 1;
  if (has_transfer_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->transfer_id(), target);
  }
  
  // optional int32 transfer_lv = 2;
  if (has_transfer_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->transfer_lv(), target);
  }
  
  // optional int32 is_active = 3;
  if (has_is_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->is_active(), target);
  }
  
  // optional int32 is_permanent = 4;
  if (has_is_permanent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->is_permanent(), target);
  }
  
  // optional int64 active_tick = 5;
  if (has_active_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->active_tick(), target);
  }
  
  // optional int64 end_tick = 6;
  if (has_end_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->end_tick(), target);
  }
  
  // optional int32 transfer_skill = 7;
  if (has_transfer_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->transfer_skill(), target);
  }
  
  // repeated .ProtoSkill skill = 8;
  for (int i = 0; i < this->skill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->skill(i), target);
  }
  
  // optional .ProtoFightPro prop = 9;
  if (has_prop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->prop(), target);
  }
  
  // optional int32 last = 10;
  if (has_last()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->last(), target);
  }
  
  // optional int32 cool = 11;
  if (has_cool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->cool(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoTransferClient::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 transfer_id = 1;
    if (has_transfer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transfer_id());
    }
    
    // optional int32 transfer_lv = 2;
    if (has_transfer_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transfer_lv());
    }
    
    // optional int32 is_active = 3;
    if (has_is_active()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_active());
    }
    
    // optional int32 is_permanent = 4;
    if (has_is_permanent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_permanent());
    }
    
    // optional int64 active_tick = 5;
    if (has_active_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->active_tick());
    }
    
    // optional int64 end_tick = 6;
    if (has_end_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_tick());
    }
    
    // optional int32 transfer_skill = 7;
    if (has_transfer_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transfer_skill());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .ProtoFightPro prop = 9;
    if (has_prop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prop());
    }
    
    // optional int32 last = 10;
    if (has_last()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last());
    }
    
    // optional int32 cool = 11;
    if (has_cool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cool());
    }
    
  }
  // repeated .ProtoSkill skill = 8;
  total_size += 1 * this->skill_size();
  for (int i = 0; i < this->skill_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoTransferClient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoTransferClient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoTransferClient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoTransferClient::MergeFrom(const ProtoTransferClient& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_.MergeFrom(from.skill_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transfer_id()) {
      set_transfer_id(from.transfer_id());
    }
    if (from.has_transfer_lv()) {
      set_transfer_lv(from.transfer_lv());
    }
    if (from.has_is_active()) {
      set_is_active(from.is_active());
    }
    if (from.has_is_permanent()) {
      set_is_permanent(from.is_permanent());
    }
    if (from.has_active_tick()) {
      set_active_tick(from.active_tick());
    }
    if (from.has_end_tick()) {
      set_end_tick(from.end_tick());
    }
    if (from.has_transfer_skill()) {
      set_transfer_skill(from.transfer_skill());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_prop()) {
      mutable_prop()->::ProtoFightPro::MergeFrom(from.prop());
    }
    if (from.has_last()) {
      set_last(from.last());
    }
    if (from.has_cool()) {
      set_cool(from.cool());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoTransferClient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoTransferClient::CopyFrom(const ProtoTransferClient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoTransferClient::IsInitialized() const {
  
  return true;
}

void ProtoTransferClient::Swap(ProtoTransferClient* other) {
  if (other != this) {
    std::swap(transfer_id_, other->transfer_id_);
    std::swap(transfer_lv_, other->transfer_lv_);
    std::swap(is_active_, other->is_active_);
    std::swap(is_permanent_, other->is_permanent_);
    std::swap(active_tick_, other->active_tick_);
    std::swap(end_tick_, other->end_tick_);
    std::swap(transfer_skill_, other->transfer_skill_);
    skill_.Swap(&other->skill_);
    std::swap(prop_, other->prop_);
    std::swap(last_, other->last_);
    std::swap(cool_, other->cool_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoTransferClient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoTransferClient_descriptor_;
  metadata.reflection = ProtoTransferClient_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoBackActRewardIndex::kRewardIdFieldNumber;
const int ProtoBackActRewardIndex::kRewardValueFieldNumber;
#endif  // !_MSC_VER

ProtoBackActRewardIndex::ProtoBackActRewardIndex()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoBackActRewardIndex::InitAsDefaultInstance() {
}

ProtoBackActRewardIndex::ProtoBackActRewardIndex(const ProtoBackActRewardIndex& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoBackActRewardIndex::SharedCtor() {
  _cached_size_ = 0;
  reward_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoBackActRewardIndex::~ProtoBackActRewardIndex() {
  SharedDtor();
}

void ProtoBackActRewardIndex::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoBackActRewardIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoBackActRewardIndex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoBackActRewardIndex_descriptor_;
}

const ProtoBackActRewardIndex& ProtoBackActRewardIndex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoBackActRewardIndex* ProtoBackActRewardIndex::default_instance_ = NULL;

ProtoBackActRewardIndex* ProtoBackActRewardIndex::New() const {
  return new ProtoBackActRewardIndex;
}

void ProtoBackActRewardIndex::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reward_id_ = 0;
  }
  reward_value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoBackActRewardIndex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 reward_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id_)));
          set_has_reward_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reward_value;
        break;
      }
      
      // repeated int32 reward_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_reward_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_reward_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reward_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoBackActRewardIndex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 reward_id = 1;
  if (has_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reward_id(), output);
  }
  
  // repeated int32 reward_value = 2;
  for (int i = 0; i < this->reward_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->reward_value(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoBackActRewardIndex::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 reward_id = 1;
  if (has_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reward_id(), target);
  }
  
  // repeated int32 reward_value = 2;
  for (int i = 0; i < this->reward_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->reward_value(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoBackActRewardIndex::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 reward_id = 1;
    if (has_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id());
    }
    
  }
  // repeated int32 reward_value = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->reward_value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->reward_value(i));
    }
    total_size += 1 * this->reward_value_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoBackActRewardIndex::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoBackActRewardIndex* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoBackActRewardIndex*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoBackActRewardIndex::MergeFrom(const ProtoBackActRewardIndex& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_value_.MergeFrom(from.reward_value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reward_id()) {
      set_reward_id(from.reward_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoBackActRewardIndex::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoBackActRewardIndex::CopyFrom(const ProtoBackActRewardIndex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoBackActRewardIndex::IsInitialized() const {
  
  return true;
}

void ProtoBackActRewardIndex::Swap(ProtoBackActRewardIndex* other) {
  if (other != this) {
    std::swap(reward_id_, other->reward_id_);
    reward_value_.Swap(&other->reward_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoBackActRewardIndex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoBackActRewardIndex_descriptor_;
  metadata.reflection = ProtoBackActRewardIndex_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PActTastList::kTaskIdFieldNumber;
const int PActTastList::kTotalNumFieldNumber;
const int PActTastList::kLeftNumFieldNumber;
#endif  // !_MSC_VER

PActTastList::PActTastList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PActTastList::InitAsDefaultInstance() {
}

PActTastList::PActTastList(const PActTastList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PActTastList::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0;
  total_num_ = 0;
  left_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PActTastList::~PActTastList() {
  SharedDtor();
}

void PActTastList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PActTastList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PActTastList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PActTastList_descriptor_;
}

const PActTastList& PActTastList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

PActTastList* PActTastList::default_instance_ = NULL;

PActTastList* PActTastList::New() const {
  return new PActTastList;
}

void PActTastList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0;
    total_num_ = 0;
    left_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PActTastList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total_num;
        break;
      }
      
      // optional int32 total_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_num_)));
          set_has_total_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_left_num;
        break;
      }
      
      // optional int32 left_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_num_)));
          set_has_left_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PActTastList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->task_id(), output);
  }
  
  // optional int32 total_num = 2;
  if (has_total_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_num(), output);
  }
  
  // optional int32 left_num = 3;
  if (has_left_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->left_num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PActTastList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->task_id(), target);
  }
  
  // optional int32 total_num = 2;
  if (has_total_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_num(), target);
  }
  
  // optional int32 left_num = 3;
  if (has_left_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->left_num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PActTastList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_id());
    }
    
    // optional int32 total_num = 2;
    if (has_total_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_num());
    }
    
    // optional int32 left_num = 3;
    if (has_left_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_num());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PActTastList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PActTastList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PActTastList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PActTastList::MergeFrom(const PActTastList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_total_num()) {
      set_total_num(from.total_num());
    }
    if (from.has_left_num()) {
      set_left_num(from.left_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PActTastList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PActTastList::CopyFrom(const PActTastList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PActTastList::IsInitialized() const {
  
  return true;
}

void PActTastList::Swap(PActTastList* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(total_num_, other->total_num_);
    std::swap(left_num_, other->left_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PActTastList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PActTastList_descriptor_;
  metadata.reflection = PActTastList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MayRewardInfo::kIndexFieldNumber;
const int MayRewardInfo::kNameFieldNumber;
const int MayRewardInfo::kContentFieldNumber;
const int MayRewardInfo::kCondFieldNumber;
const int MayRewardInfo::kArriveFieldNumber;
const int MayRewardInfo::kDrawedFieldNumber;
const int MayRewardInfo::kDrawFlagFieldNumber;
const int MayRewardInfo::kPreCostFieldNumber;
const int MayRewardInfo::kNowCostFieldNumber;
const int MayRewardInfo::kTimesFieldNumber;
const int MayRewardInfo::kRewardIdFieldNumber;
const int MayRewardInfo::kChangeItemFieldNumber;
const int MayRewardInfo::kChangeStateFieldNumber;
#endif  // !_MSC_VER

MayRewardInfo::MayRewardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MayRewardInfo::InitAsDefaultInstance() {
}

MayRewardInfo::MayRewardInfo(const MayRewardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MayRewardInfo::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  arrive_ = 0;
  drawed_ = 0;
  draw_flag_ = 0;
  pre_cost_ = 0;
  now_cost_ = 0;
  times_ = 0;
  reward_id_ = 0;
  change_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MayRewardInfo::~MayRewardInfo() {
  SharedDtor();
}

void MayRewardInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void MayRewardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MayRewardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MayRewardInfo_descriptor_;
}

const MayRewardInfo& MayRewardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

MayRewardInfo* MayRewardInfo::default_instance_ = NULL;

MayRewardInfo* MayRewardInfo::New() const {
  return new MayRewardInfo;
}

void MayRewardInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    arrive_ = 0;
    drawed_ = 0;
    draw_flag_ = 0;
    pre_cost_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    now_cost_ = 0;
    times_ = 0;
    reward_id_ = 0;
    change_state_ = 0;
  }
  cond_.Clear();
  change_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MayRewardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }
      
      // optional string content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cond;
        break;
      }
      
      // repeated int32 cond = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_cond())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cond())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cond;
        if (input->ExpectTag(40)) goto parse_arrive;
        break;
      }
      
      // optional int32 arrive = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arrive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arrive_)));
          set_has_arrive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_drawed;
        break;
      }
      
      // optional int32 drawed = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drawed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drawed_)));
          set_has_drawed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_draw_flag;
        break;
      }
      
      // optional int32 draw_flag = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_draw_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &draw_flag_)));
          set_has_draw_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_pre_cost;
        break;
      }
      
      // optional int32 pre_cost = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pre_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pre_cost_)));
          set_has_pre_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_now_cost;
        break;
      }
      
      // optional int32 now_cost = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_now_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &now_cost_)));
          set_has_now_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_times;
        break;
      }
      
      // optional int32 times = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_reward_id;
        break;
      }
      
      // optional int32 reward_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id_)));
          set_has_reward_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_change_item;
        break;
      }
      
      // repeated .ProtoItemId change_item = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_change_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_change_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_change_item;
        if (input->ExpectTag(104)) goto parse_change_state;
        break;
      }
      
      // optional int32 change_state = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &change_state_)));
          set_has_change_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MayRewardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->content(), output);
  }
  
  // repeated int32 cond = 4;
  for (int i = 0; i < this->cond_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->cond(i), output);
  }
  
  // optional int32 arrive = 5;
  if (has_arrive()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->arrive(), output);
  }
  
  // optional int32 drawed = 6;
  if (has_drawed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->drawed(), output);
  }
  
  // optional int32 draw_flag = 7;
  if (has_draw_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->draw_flag(), output);
  }
  
  // optional int32 pre_cost = 8;
  if (has_pre_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->pre_cost(), output);
  }
  
  // optional int32 now_cost = 9;
  if (has_now_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->now_cost(), output);
  }
  
  // optional int32 times = 10;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->times(), output);
  }
  
  // optional int32 reward_id = 11;
  if (has_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->reward_id(), output);
  }
  
  // repeated .ProtoItemId change_item = 12;
  for (int i = 0; i < this->change_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->change_item(i), output);
  }
  
  // optional int32 change_state = 13;
  if (has_change_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->change_state(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MayRewardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }
  
  // repeated int32 cond = 4;
  for (int i = 0; i < this->cond_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->cond(i), target);
  }
  
  // optional int32 arrive = 5;
  if (has_arrive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->arrive(), target);
  }
  
  // optional int32 drawed = 6;
  if (has_drawed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->drawed(), target);
  }
  
  // optional int32 draw_flag = 7;
  if (has_draw_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->draw_flag(), target);
  }
  
  // optional int32 pre_cost = 8;
  if (has_pre_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->pre_cost(), target);
  }
  
  // optional int32 now_cost = 9;
  if (has_now_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->now_cost(), target);
  }
  
  // optional int32 times = 10;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->times(), target);
  }
  
  // optional int32 reward_id = 11;
  if (has_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->reward_id(), target);
  }
  
  // repeated .ProtoItemId change_item = 12;
  for (int i = 0; i < this->change_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->change_item(i), target);
  }
  
  // optional int32 change_state = 13;
  if (has_change_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->change_state(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MayRewardInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
    // optional int32 arrive = 5;
    if (has_arrive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arrive());
    }
    
    // optional int32 drawed = 6;
    if (has_drawed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->drawed());
    }
    
    // optional int32 draw_flag = 7;
    if (has_draw_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->draw_flag());
    }
    
    // optional int32 pre_cost = 8;
    if (has_pre_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pre_cost());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 now_cost = 9;
    if (has_now_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->now_cost());
    }
    
    // optional int32 times = 10;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }
    
    // optional int32 reward_id = 11;
    if (has_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id());
    }
    
    // optional int32 change_state = 13;
    if (has_change_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->change_state());
    }
    
  }
  // repeated int32 cond = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->cond_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cond(i));
    }
    total_size += 1 * this->cond_size() + data_size;
  }
  
  // repeated .ProtoItemId change_item = 12;
  total_size += 1 * this->change_item_size();
  for (int i = 0; i < this->change_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->change_item(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MayRewardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MayRewardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MayRewardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MayRewardInfo::MergeFrom(const MayRewardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  cond_.MergeFrom(from.cond_);
  change_item_.MergeFrom(from.change_item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_arrive()) {
      set_arrive(from.arrive());
    }
    if (from.has_drawed()) {
      set_drawed(from.drawed());
    }
    if (from.has_draw_flag()) {
      set_draw_flag(from.draw_flag());
    }
    if (from.has_pre_cost()) {
      set_pre_cost(from.pre_cost());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_now_cost()) {
      set_now_cost(from.now_cost());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_reward_id()) {
      set_reward_id(from.reward_id());
    }
    if (from.has_change_state()) {
      set_change_state(from.change_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MayRewardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MayRewardInfo::CopyFrom(const MayRewardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MayRewardInfo::IsInitialized() const {
  
  return true;
}

void MayRewardInfo::Swap(MayRewardInfo* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(name_, other->name_);
    std::swap(content_, other->content_);
    cond_.Swap(&other->cond_);
    std::swap(arrive_, other->arrive_);
    std::swap(drawed_, other->drawed_);
    std::swap(draw_flag_, other->draw_flag_);
    std::swap(pre_cost_, other->pre_cost_);
    std::swap(now_cost_, other->now_cost_);
    std::swap(times_, other->times_);
    std::swap(reward_id_, other->reward_id_);
    change_item_.Swap(&other->change_item_);
    std::swap(change_state_, other->change_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MayRewardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MayRewardInfo_descriptor_;
  metadata.reflection = MayRewardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoLimitValue::kValue1FieldNumber;
const int ProtoLimitValue::kValue2FieldNumber;
const int ProtoLimitValue::kValue3FieldNumber;
const int ProtoLimitValue::kValue4FieldNumber;
const int ProtoLimitValue::kValue5FieldNumber;
#endif  // !_MSC_VER

ProtoLimitValue::ProtoLimitValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoLimitValue::InitAsDefaultInstance() {
}

ProtoLimitValue::ProtoLimitValue(const ProtoLimitValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoLimitValue::SharedCtor() {
  _cached_size_ = 0;
  value1_ = 0;
  value2_ = 0;
  value3_ = 0;
  value4_ = 0;
  value5_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoLimitValue::~ProtoLimitValue() {
  SharedDtor();
}

void ProtoLimitValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoLimitValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoLimitValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoLimitValue_descriptor_;
}

const ProtoLimitValue& ProtoLimitValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoLimitValue* ProtoLimitValue::default_instance_ = NULL;

ProtoLimitValue* ProtoLimitValue::New() const {
  return new ProtoLimitValue;
}

void ProtoLimitValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value1_ = 0;
    value2_ = 0;
    value3_ = 0;
    value4_ = 0;
    value5_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoLimitValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 value1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value1_)));
          set_has_value1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value2;
        break;
      }
      
      // optional int32 value2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value2_)));
          set_has_value2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value3;
        break;
      }
      
      // optional int32 value3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value3_)));
          set_has_value3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_value4;
        break;
      }
      
      // optional int32 value4 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value4_)));
          set_has_value4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_value5;
        break;
      }
      
      // optional int32 value5 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value5_)));
          set_has_value5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoLimitValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 value1 = 1;
  if (has_value1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->value1(), output);
  }
  
  // optional int32 value2 = 2;
  if (has_value2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value2(), output);
  }
  
  // optional int32 value3 = 3;
  if (has_value3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->value3(), output);
  }
  
  // optional int32 value4 = 4;
  if (has_value4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->value4(), output);
  }
  
  // optional int32 value5 = 5;
  if (has_value5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->value5(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoLimitValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 value1 = 1;
  if (has_value1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->value1(), target);
  }
  
  // optional int32 value2 = 2;
  if (has_value2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value2(), target);
  }
  
  // optional int32 value3 = 3;
  if (has_value3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->value3(), target);
  }
  
  // optional int32 value4 = 4;
  if (has_value4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->value4(), target);
  }
  
  // optional int32 value5 = 5;
  if (has_value5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->value5(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoLimitValue::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 value1 = 1;
    if (has_value1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value1());
    }
    
    // optional int32 value2 = 2;
    if (has_value2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value2());
    }
    
    // optional int32 value3 = 3;
    if (has_value3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value3());
    }
    
    // optional int32 value4 = 4;
    if (has_value4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value4());
    }
    
    // optional int32 value5 = 5;
    if (has_value5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value5());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoLimitValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoLimitValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoLimitValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoLimitValue::MergeFrom(const ProtoLimitValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value1()) {
      set_value1(from.value1());
    }
    if (from.has_value2()) {
      set_value2(from.value2());
    }
    if (from.has_value3()) {
      set_value3(from.value3());
    }
    if (from.has_value4()) {
      set_value4(from.value4());
    }
    if (from.has_value5()) {
      set_value5(from.value5());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoLimitValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoLimitValue::CopyFrom(const ProtoLimitValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoLimitValue::IsInitialized() const {
  
  return true;
}

void ProtoLimitValue::Swap(ProtoLimitValue* other) {
  if (other != this) {
    std::swap(value1_, other->value1_);
    std::swap(value2_, other->value2_);
    std::swap(value3_, other->value3_);
    std::swap(value4_, other->value4_);
    std::swap(value5_, other->value5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoLimitValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoLimitValue_descriptor_;
  metadata.reflection = ProtoLimitValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActOpenLimitTime::kOpenTimeFieldNumber;
const int ActOpenLimitTime::kOpenStateFieldNumber;
#endif  // !_MSC_VER

ActOpenLimitTime::ActOpenLimitTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActOpenLimitTime::InitAsDefaultInstance() {
}

ActOpenLimitTime::ActOpenLimitTime(const ActOpenLimitTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActOpenLimitTime::SharedCtor() {
  _cached_size_ = 0;
  open_time_ = 0;
  open_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActOpenLimitTime::~ActOpenLimitTime() {
  SharedDtor();
}

void ActOpenLimitTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActOpenLimitTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActOpenLimitTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActOpenLimitTime_descriptor_;
}

const ActOpenLimitTime& ActOpenLimitTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ActOpenLimitTime* ActOpenLimitTime::default_instance_ = NULL;

ActOpenLimitTime* ActOpenLimitTime::New() const {
  return new ActOpenLimitTime;
}

void ActOpenLimitTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    open_time_ = 0;
    open_state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActOpenLimitTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 open_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_time_)));
          set_has_open_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_open_state;
        break;
      }
      
      // optional int32 open_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_state_)));
          set_has_open_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActOpenLimitTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 open_time = 1;
  if (has_open_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->open_time(), output);
  }
  
  // optional int32 open_state = 2;
  if (has_open_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->open_state(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActOpenLimitTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 open_time = 1;
  if (has_open_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->open_time(), target);
  }
  
  // optional int32 open_state = 2;
  if (has_open_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->open_state(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActOpenLimitTime::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 open_time = 1;
    if (has_open_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open_time());
    }
    
    // optional int32 open_state = 2;
    if (has_open_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open_state());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActOpenLimitTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActOpenLimitTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActOpenLimitTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActOpenLimitTime::MergeFrom(const ActOpenLimitTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_open_time()) {
      set_open_time(from.open_time());
    }
    if (from.has_open_state()) {
      set_open_state(from.open_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActOpenLimitTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActOpenLimitTime::CopyFrom(const ActOpenLimitTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActOpenLimitTime::IsInitialized() const {
  
  return true;
}

void ActOpenLimitTime::Swap(ActOpenLimitTime* other) {
  if (other != this) {
    std::swap(open_time_, other->open_time_);
    std::swap(open_state_, other->open_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActOpenLimitTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActOpenLimitTime_descriptor_;
  metadata.reflection = ActOpenLimitTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoRedPacketInfo::kPlayerNameFieldNumber;
const int ProtoRedPacketInfo::kMoneyFieldNumber;
#endif  // !_MSC_VER

ProtoRedPacketInfo::ProtoRedPacketInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoRedPacketInfo::InitAsDefaultInstance() {
}

ProtoRedPacketInfo::ProtoRedPacketInfo(const ProtoRedPacketInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoRedPacketInfo::SharedCtor() {
  _cached_size_ = 0;
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  money_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoRedPacketInfo::~ProtoRedPacketInfo() {
  SharedDtor();
}

void ProtoRedPacketInfo::SharedDtor() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoRedPacketInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoRedPacketInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoRedPacketInfo_descriptor_;
}

const ProtoRedPacketInfo& ProtoRedPacketInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoRedPacketInfo* ProtoRedPacketInfo::default_instance_ = NULL;

ProtoRedPacketInfo* ProtoRedPacketInfo::New() const {
  return new ProtoRedPacketInfo;
}

void ProtoRedPacketInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::kEmptyString) {
        player_name_->clear();
      }
    }
    money_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoRedPacketInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string player_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_money;
        break;
      }
      
      // optional int32 money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoRedPacketInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string player_name = 1;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->player_name(), output);
  }
  
  // optional int32 money = 2;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->money(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoRedPacketInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string player_name = 1;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->player_name(), target);
  }
  
  // optional int32 money = 2;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->money(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoRedPacketInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string player_name = 1;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }
    
    // optional int32 money = 2;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoRedPacketInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoRedPacketInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoRedPacketInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoRedPacketInfo::MergeFrom(const ProtoRedPacketInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoRedPacketInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoRedPacketInfo::CopyFrom(const ProtoRedPacketInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoRedPacketInfo::IsInitialized() const {
  
  return true;
}

void ProtoRedPacketInfo::Swap(ProtoRedPacketInfo* other) {
  if (other != this) {
    std::swap(player_name_, other->player_name_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoRedPacketInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoRedPacketInfo_descriptor_;
  metadata.reflection = ProtoRedPacketInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoRunRole::kRoleIdFieldNumber;
const int ProtoRunRole::kRoleNameFieldNumber;
const int ProtoRunRole::kRoleSexFieldNumber;
const int ProtoRunRole::kValueFieldNumber;
#endif  // !_MSC_VER

ProtoRunRole::ProtoRunRole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoRunRole::InitAsDefaultInstance() {
}

ProtoRunRole::ProtoRunRole(const ProtoRunRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoRunRole::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_sex_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoRunRole::~ProtoRunRole() {
  SharedDtor();
}

void ProtoRunRole::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoRunRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoRunRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoRunRole_descriptor_;
}

const ProtoRunRole& ProtoRunRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoRunRole* ProtoRunRole::default_instance_ = NULL;

ProtoRunRole* ProtoRunRole::New() const {
  return new ProtoRunRole;
}

void ProtoRunRole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_LONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    role_sex_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoRunRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_name;
        break;
      }
      
      // optional string role_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_sex;
        break;
      }
      
      // optional int32 role_sex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_sex_)));
          set_has_role_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_value;
        break;
      }
      
      // optional int32 value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoRunRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_id(), output);
  }
  
  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->role_name(), output);
  }
  
  // optional int32 role_sex = 3;
  if (has_role_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->role_sex(), output);
  }
  
  // optional int32 value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoRunRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_id(), target);
  }
  
  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }
  
  // optional int32 role_sex = 3;
  if (has_role_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->role_sex(), target);
  }
  
  // optional int32 value = 4;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoRunRole::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional string role_name = 2;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }
    
    // optional int32 role_sex = 3;
    if (has_role_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_sex());
    }
    
    // optional int32 value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoRunRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoRunRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoRunRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoRunRole::MergeFrom(const ProtoRunRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_role_sex()) {
      set_role_sex(from.role_sex());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoRunRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoRunRole::CopyFrom(const ProtoRunRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoRunRole::IsInitialized() const {
  
  return true;
}

void ProtoRunRole::Swap(ProtoRunRole* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(role_sex_, other->role_sex_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoRunRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoRunRole_descriptor_;
  metadata.reflection = ProtoRunRole_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoAllRedActInfo::kStateFieldNumber;
const int ProtoAllRedActInfo::kTickFieldNumber;
const int ProtoAllRedActInfo::kMoneyFieldNumber;
#endif  // !_MSC_VER

ProtoAllRedActInfo::ProtoAllRedActInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoAllRedActInfo::InitAsDefaultInstance() {
}

ProtoAllRedActInfo::ProtoAllRedActInfo(const ProtoAllRedActInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoAllRedActInfo::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  tick_ = 0;
  money_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoAllRedActInfo::~ProtoAllRedActInfo() {
  SharedDtor();
}

void ProtoAllRedActInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoAllRedActInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoAllRedActInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoAllRedActInfo_descriptor_;
}

const ProtoAllRedActInfo& ProtoAllRedActInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoAllRedActInfo* ProtoAllRedActInfo::default_instance_ = NULL;

ProtoAllRedActInfo* ProtoAllRedActInfo::New() const {
  return new ProtoAllRedActInfo;
}

void ProtoAllRedActInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0;
    tick_ = 0;
    money_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoAllRedActInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tick;
        break;
      }
      
      // optional int32 tick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tick_)));
          set_has_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_money;
        break;
      }
      
      // optional int32 money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoAllRedActInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }
  
  // optional int32 tick = 2;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tick(), output);
  }
  
  // optional int32 money = 3;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->money(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoAllRedActInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }
  
  // optional int32 tick = 2;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tick(), target);
  }
  
  // optional int32 money = 3;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->money(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoAllRedActInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }
    
    // optional int32 tick = 2;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tick());
    }
    
    // optional int32 money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoAllRedActInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoAllRedActInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoAllRedActInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoAllRedActInfo::MergeFrom(const ProtoAllRedActInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_tick()) {
      set_tick(from.tick());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoAllRedActInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoAllRedActInfo::CopyFrom(const ProtoAllRedActInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoAllRedActInfo::IsInitialized() const {
  
  return true;
}

void ProtoAllRedActInfo::Swap(ProtoAllRedActInfo* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(tick_, other->tick_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoAllRedActInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoAllRedActInfo_descriptor_;
  metadata.reflection = ProtoAllRedActInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoTrvlBaseRole::kRoleIdFieldNumber;
const int ProtoTrvlBaseRole::kRoleNameFieldNumber;
const int ProtoTrvlBaseRole::kPrevFieldNumber;
const int ProtoTrvlBaseRole::kSexFieldNumber;
const int ProtoTrvlBaseRole::kCareerFieldNumber;
const int ProtoTrvlBaseRole::kLevelFieldNumber;
const int ProtoTrvlBaseRole::kForceFieldNumber;
const int ProtoTrvlBaseRole::kWeaponFieldNumber;
const int ProtoTrvlBaseRole::kClothesFieldNumber;
const int ProtoTrvlBaseRole::kFashionWeaponFieldNumber;
const int ProtoTrvlBaseRole::kFashionClothesFieldNumber;
const int ProtoTrvlBaseRole::kWingLevelFieldNumber;
const int ProtoTrvlBaseRole::kSoliderLevelFieldNumber;
const int ProtoTrvlBaseRole::kVipTypeFieldNumber;
const int ProtoTrvlBaseRole::kMountSortFieldNumber;
const int ProtoTrvlBaseRole::kSwordPoolFieldNumber;
const int ProtoTrvlBaseRole::kTianGangFieldNumber;
const int ProtoTrvlBaseRole::kFashionIdFieldNumber;
const int ProtoTrvlBaseRole::kFashionColorFieldNumber;
#endif  // !_MSC_VER

ProtoTrvlBaseRole::ProtoTrvlBaseRole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoTrvlBaseRole::InitAsDefaultInstance() {
}

ProtoTrvlBaseRole::ProtoTrvlBaseRole(const ProtoTrvlBaseRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoTrvlBaseRole::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prev_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  career_ = 0;
  level_ = 0;
  force_ = 0;
  weapon_ = 0;
  clothes_ = 0;
  fashion_weapon_ = 0;
  fashion_clothes_ = 0;
  wing_level_ = 0;
  solider_level_ = 0;
  vip_type_ = 0;
  mount_sort_ = 0;
  sword_pool_ = 0;
  tian_gang_ = 0;
  fashion_id_ = 0;
  fashion_color_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoTrvlBaseRole::~ProtoTrvlBaseRole() {
  SharedDtor();
}

void ProtoTrvlBaseRole::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (prev_ != &::google::protobuf::internal::kEmptyString) {
    delete prev_;
  }
  if (this != default_instance_) {
  }
}

void ProtoTrvlBaseRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoTrvlBaseRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoTrvlBaseRole_descriptor_;
}

const ProtoTrvlBaseRole& ProtoTrvlBaseRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoTrvlBaseRole* ProtoTrvlBaseRole::default_instance_ = NULL;

ProtoTrvlBaseRole* ProtoTrvlBaseRole::New() const {
  return new ProtoTrvlBaseRole;
}

void ProtoTrvlBaseRole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_LONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    if (has_prev()) {
      if (prev_ != &::google::protobuf::internal::kEmptyString) {
        prev_->clear();
      }
    }
    sex_ = 0;
    career_ = 0;
    level_ = 0;
    force_ = 0;
    weapon_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    clothes_ = 0;
    fashion_weapon_ = 0;
    fashion_clothes_ = 0;
    wing_level_ = 0;
    solider_level_ = 0;
    vip_type_ = 0;
    mount_sort_ = 0;
    sword_pool_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    tian_gang_ = 0;
    fashion_id_ = 0;
    fashion_color_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoTrvlBaseRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_name;
        break;
      }
      
      // optional string role_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_prev;
        break;
      }
      
      // optional string prev = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prev()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->prev().data(), this->prev().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sex;
        break;
      }
      
      // optional int32 sex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_career;
        break;
      }
      
      // optional int32 career = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_career:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &career_)));
          set_has_career();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }
      
      // optional int32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_force;
        break;
      }
      
      // optional int32 force = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &force_)));
          set_has_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_weapon;
        break;
      }
      
      // optional int32 weapon = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weapon_)));
          set_has_weapon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_clothes;
        break;
      }
      
      // optional int32 clothes = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clothes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clothes_)));
          set_has_clothes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_fashion_weapon;
        break;
      }
      
      // optional int32 fashion_weapon = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashion_weapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fashion_weapon_)));
          set_has_fashion_weapon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_fashion_clothes;
        break;
      }
      
      // optional int32 fashion_clothes = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashion_clothes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fashion_clothes_)));
          set_has_fashion_clothes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_wing_level;
        break;
      }
      
      // optional int32 wing_level = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wing_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wing_level_)));
          set_has_wing_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_solider_level;
        break;
      }
      
      // optional int32 solider_level = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_solider_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &solider_level_)));
          set_has_solider_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_vip_type;
        break;
      }
      
      // optional int32 vip_type = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_type_)));
          set_has_vip_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_mount_sort;
        break;
      }
      
      // optional int32 mount_sort = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mount_sort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mount_sort_)));
          set_has_mount_sort();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_sword_pool;
        break;
      }
      
      // optional int32 sword_pool = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sword_pool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sword_pool_)));
          set_has_sword_pool();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_tian_gang;
        break;
      }
      
      // optional int32 tian_gang = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tian_gang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tian_gang_)));
          set_has_tian_gang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_fashion_id;
        break;
      }
      
      // optional int32 fashion_id = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashion_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fashion_id_)));
          set_has_fashion_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_fashion_color;
        break;
      }
      
      // optional int32 fashion_color = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashion_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fashion_color_)));
          set_has_fashion_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoTrvlBaseRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_id(), output);
  }
  
  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->role_name(), output);
  }
  
  // optional string prev = 3;
  if (has_prev()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prev().data(), this->prev().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->prev(), output);
  }
  
  // optional int32 sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sex(), output);
  }
  
  // optional int32 career = 5;
  if (has_career()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->career(), output);
  }
  
  // optional int32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->level(), output);
  }
  
  // optional int32 force = 7;
  if (has_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->force(), output);
  }
  
  // optional int32 weapon = 8;
  if (has_weapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->weapon(), output);
  }
  
  // optional int32 clothes = 9;
  if (has_clothes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->clothes(), output);
  }
  
  // optional int32 fashion_weapon = 10;
  if (has_fashion_weapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->fashion_weapon(), output);
  }
  
  // optional int32 fashion_clothes = 11;
  if (has_fashion_clothes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->fashion_clothes(), output);
  }
  
  // optional int32 wing_level = 12;
  if (has_wing_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->wing_level(), output);
  }
  
  // optional int32 solider_level = 13;
  if (has_solider_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->solider_level(), output);
  }
  
  // optional int32 vip_type = 14;
  if (has_vip_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->vip_type(), output);
  }
  
  // optional int32 mount_sort = 15;
  if (has_mount_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->mount_sort(), output);
  }
  
  // optional int32 sword_pool = 16;
  if (has_sword_pool()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->sword_pool(), output);
  }
  
  // optional int32 tian_gang = 17;
  if (has_tian_gang()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->tian_gang(), output);
  }
  
  // optional int32 fashion_id = 18;
  if (has_fashion_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->fashion_id(), output);
  }
  
  // optional int32 fashion_color = 19;
  if (has_fashion_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->fashion_color(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoTrvlBaseRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_id(), target);
  }
  
  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }
  
  // optional string prev = 3;
  if (has_prev()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prev().data(), this->prev().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->prev(), target);
  }
  
  // optional int32 sex = 4;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sex(), target);
  }
  
  // optional int32 career = 5;
  if (has_career()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->career(), target);
  }
  
  // optional int32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->level(), target);
  }
  
  // optional int32 force = 7;
  if (has_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->force(), target);
  }
  
  // optional int32 weapon = 8;
  if (has_weapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->weapon(), target);
  }
  
  // optional int32 clothes = 9;
  if (has_clothes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->clothes(), target);
  }
  
  // optional int32 fashion_weapon = 10;
  if (has_fashion_weapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->fashion_weapon(), target);
  }
  
  // optional int32 fashion_clothes = 11;
  if (has_fashion_clothes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->fashion_clothes(), target);
  }
  
  // optional int32 wing_level = 12;
  if (has_wing_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->wing_level(), target);
  }
  
  // optional int32 solider_level = 13;
  if (has_solider_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->solider_level(), target);
  }
  
  // optional int32 vip_type = 14;
  if (has_vip_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->vip_type(), target);
  }
  
  // optional int32 mount_sort = 15;
  if (has_mount_sort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->mount_sort(), target);
  }
  
  // optional int32 sword_pool = 16;
  if (has_sword_pool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->sword_pool(), target);
  }
  
  // optional int32 tian_gang = 17;
  if (has_tian_gang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->tian_gang(), target);
  }
  
  // optional int32 fashion_id = 18;
  if (has_fashion_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->fashion_id(), target);
  }
  
  // optional int32 fashion_color = 19;
  if (has_fashion_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->fashion_color(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoTrvlBaseRole::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional string role_name = 2;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }
    
    // optional string prev = 3;
    if (has_prev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prev());
    }
    
    // optional int32 sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }
    
    // optional int32 career = 5;
    if (has_career()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->career());
    }
    
    // optional int32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 force = 7;
    if (has_force()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->force());
    }
    
    // optional int32 weapon = 8;
    if (has_weapon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weapon());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 clothes = 9;
    if (has_clothes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clothes());
    }
    
    // optional int32 fashion_weapon = 10;
    if (has_fashion_weapon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fashion_weapon());
    }
    
    // optional int32 fashion_clothes = 11;
    if (has_fashion_clothes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fashion_clothes());
    }
    
    // optional int32 wing_level = 12;
    if (has_wing_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wing_level());
    }
    
    // optional int32 solider_level = 13;
    if (has_solider_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->solider_level());
    }
    
    // optional int32 vip_type = 14;
    if (has_vip_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_type());
    }
    
    // optional int32 mount_sort = 15;
    if (has_mount_sort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mount_sort());
    }
    
    // optional int32 sword_pool = 16;
    if (has_sword_pool()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sword_pool());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 tian_gang = 17;
    if (has_tian_gang()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tian_gang());
    }
    
    // optional int32 fashion_id = 18;
    if (has_fashion_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fashion_id());
    }
    
    // optional int32 fashion_color = 19;
    if (has_fashion_color()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fashion_color());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoTrvlBaseRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoTrvlBaseRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoTrvlBaseRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoTrvlBaseRole::MergeFrom(const ProtoTrvlBaseRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_prev()) {
      set_prev(from.prev());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_career()) {
      set_career(from.career());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_force()) {
      set_force(from.force());
    }
    if (from.has_weapon()) {
      set_weapon(from.weapon());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_clothes()) {
      set_clothes(from.clothes());
    }
    if (from.has_fashion_weapon()) {
      set_fashion_weapon(from.fashion_weapon());
    }
    if (from.has_fashion_clothes()) {
      set_fashion_clothes(from.fashion_clothes());
    }
    if (from.has_wing_level()) {
      set_wing_level(from.wing_level());
    }
    if (from.has_solider_level()) {
      set_solider_level(from.solider_level());
    }
    if (from.has_vip_type()) {
      set_vip_type(from.vip_type());
    }
    if (from.has_mount_sort()) {
      set_mount_sort(from.mount_sort());
    }
    if (from.has_sword_pool()) {
      set_sword_pool(from.sword_pool());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_tian_gang()) {
      set_tian_gang(from.tian_gang());
    }
    if (from.has_fashion_id()) {
      set_fashion_id(from.fashion_id());
    }
    if (from.has_fashion_color()) {
      set_fashion_color(from.fashion_color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoTrvlBaseRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoTrvlBaseRole::CopyFrom(const ProtoTrvlBaseRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoTrvlBaseRole::IsInitialized() const {
  
  return true;
}

void ProtoTrvlBaseRole::Swap(ProtoTrvlBaseRole* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(prev_, other->prev_);
    std::swap(sex_, other->sex_);
    std::swap(career_, other->career_);
    std::swap(level_, other->level_);
    std::swap(force_, other->force_);
    std::swap(weapon_, other->weapon_);
    std::swap(clothes_, other->clothes_);
    std::swap(fashion_weapon_, other->fashion_weapon_);
    std::swap(fashion_clothes_, other->fashion_clothes_);
    std::swap(wing_level_, other->wing_level_);
    std::swap(solider_level_, other->solider_level_);
    std::swap(vip_type_, other->vip_type_);
    std::swap(mount_sort_, other->mount_sort_);
    std::swap(sword_pool_, other->sword_pool_);
    std::swap(tian_gang_, other->tian_gang_);
    std::swap(fashion_id_, other->fashion_id_);
    std::swap(fashion_color_, other->fashion_color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoTrvlBaseRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoTrvlBaseRole_descriptor_;
  metadata.reflection = ProtoTrvlBaseRole_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoMayFashionInfo::kLivenessFieldNumber;
const int ProtoMayFashionInfo::kItemFieldNumber;
const int ProtoMayFashionInfo::kOneTimesMoneyFieldNumber;
const int ProtoMayFashionInfo::kTenTimesMoneyFieldNumber;
#endif  // !_MSC_VER

ProtoMayFashionInfo::ProtoMayFashionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoMayFashionInfo::InitAsDefaultInstance() {
}

ProtoMayFashionInfo::ProtoMayFashionInfo(const ProtoMayFashionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoMayFashionInfo::SharedCtor() {
  _cached_size_ = 0;
  liveness_ = 0;
  one_times_money_ = 0;
  ten_times_money_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoMayFashionInfo::~ProtoMayFashionInfo() {
  SharedDtor();
}

void ProtoMayFashionInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoMayFashionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoMayFashionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoMayFashionInfo_descriptor_;
}

const ProtoMayFashionInfo& ProtoMayFashionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoMayFashionInfo* ProtoMayFashionInfo::default_instance_ = NULL;

ProtoMayFashionInfo* ProtoMayFashionInfo::New() const {
  return new ProtoMayFashionInfo;
}

void ProtoMayFashionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    liveness_ = 0;
    one_times_money_ = 0;
    ten_times_money_ = 0;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoMayFashionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 liveness = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &liveness_)));
          set_has_liveness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }
      
      // repeated .ProtoItemId item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectTag(24)) goto parse_one_times_money;
        break;
      }
      
      // optional int32 one_times_money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_one_times_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &one_times_money_)));
          set_has_one_times_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ten_times_money;
        break;
      }
      
      // optional int32 ten_times_money = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ten_times_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ten_times_money_)));
          set_has_ten_times_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoMayFashionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 liveness = 1;
  if (has_liveness()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->liveness(), output);
  }
  
  // repeated .ProtoItemId item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }
  
  // optional int32 one_times_money = 3;
  if (has_one_times_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->one_times_money(), output);
  }
  
  // optional int32 ten_times_money = 4;
  if (has_ten_times_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ten_times_money(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoMayFashionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 liveness = 1;
  if (has_liveness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->liveness(), target);
  }
  
  // repeated .ProtoItemId item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }
  
  // optional int32 one_times_money = 3;
  if (has_one_times_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->one_times_money(), target);
  }
  
  // optional int32 ten_times_money = 4;
  if (has_ten_times_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ten_times_money(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoMayFashionInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 liveness = 1;
    if (has_liveness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->liveness());
    }
    
    // optional int32 one_times_money = 3;
    if (has_one_times_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->one_times_money());
    }
    
    // optional int32 ten_times_money = 4;
    if (has_ten_times_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ten_times_money());
    }
    
  }
  // repeated .ProtoItemId item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoMayFashionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoMayFashionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoMayFashionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoMayFashionInfo::MergeFrom(const ProtoMayFashionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_liveness()) {
      set_liveness(from.liveness());
    }
    if (from.has_one_times_money()) {
      set_one_times_money(from.one_times_money());
    }
    if (from.has_ten_times_money()) {
      set_ten_times_money(from.ten_times_money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoMayFashionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMayFashionInfo::CopyFrom(const ProtoMayFashionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMayFashionInfo::IsInitialized() const {
  
  return true;
}

void ProtoMayFashionInfo::Swap(ProtoMayFashionInfo* other) {
  if (other != this) {
    std::swap(liveness_, other->liveness_);
    item_.Swap(&other->item_);
    std::swap(one_times_money_, other->one_times_money_);
    std::swap(ten_times_money_, other->ten_times_money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoMayFashionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoMayFashionInfo_descriptor_;
  metadata.reflection = ProtoMayFashionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoTrvlBattleRank::kRankFieldNumber;
const int ProtoTrvlBattleRank::kRoleIdFieldNumber;
const int ProtoTrvlBattleRank::kScoreFieldNumber;
const int ProtoTrvlBattleRank::kKillAmountFieldNumber;
const int ProtoTrvlBattleRank::kForceFieldNumber;
const int ProtoTrvlBattleRank::kTickFieldNumber;
const int ProtoTrvlBattleRank::kRoleNameFieldNumber;
const int ProtoTrvlBattleRank::kRoleSexFieldNumber;
#endif  // !_MSC_VER

ProtoTrvlBattleRank::ProtoTrvlBattleRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoTrvlBattleRank::InitAsDefaultInstance() {
}

ProtoTrvlBattleRank::ProtoTrvlBattleRank(const ProtoTrvlBattleRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoTrvlBattleRank::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  score_ = 0;
  kill_amount_ = 0;
  force_ = 0;
  tick_ = 0;
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_sex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoTrvlBattleRank::~ProtoTrvlBattleRank() {
  SharedDtor();
}

void ProtoTrvlBattleRank::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoTrvlBattleRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoTrvlBattleRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoTrvlBattleRank_descriptor_;
}

const ProtoTrvlBattleRank& ProtoTrvlBattleRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoTrvlBattleRank* ProtoTrvlBattleRank::default_instance_ = NULL;

ProtoTrvlBattleRank* ProtoTrvlBattleRank::New() const {
  return new ProtoTrvlBattleRank;
}

void ProtoTrvlBattleRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0;
    role_id_ = GOOGLE_LONGLONG(0);
    score_ = 0;
    kill_amount_ = 0;
    force_ = 0;
    tick_ = 0;
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    role_sex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoTrvlBattleRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }
      
      // optional int64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }
      
      // optional int32 score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_kill_amount;
        break;
      }
      
      // optional int32 kill_amount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kill_amount_)));
          set_has_kill_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_force;
        break;
      }
      
      // optional int32 force = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &force_)));
          set_has_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_tick;
        break;
      }
      
      // optional int32 tick = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tick_)));
          set_has_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_role_name;
        break;
      }
      
      // optional string role_name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_role_sex;
        break;
      }
      
      // optional int32 role_sex = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_sex_)));
          set_has_role_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoTrvlBattleRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }
  
  // optional int64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->role_id(), output);
  }
  
  // optional int32 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->score(), output);
  }
  
  // optional int32 kill_amount = 4;
  if (has_kill_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->kill_amount(), output);
  }
  
  // optional int32 force = 5;
  if (has_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->force(), output);
  }
  
  // optional int32 tick = 6;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->tick(), output);
  }
  
  // optional string role_name = 7;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->role_name(), output);
  }
  
  // optional int32 role_sex = 8;
  if (has_role_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->role_sex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoTrvlBattleRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }
  
  // optional int64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->role_id(), target);
  }
  
  // optional int32 score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->score(), target);
  }
  
  // optional int32 kill_amount = 4;
  if (has_kill_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->kill_amount(), target);
  }
  
  // optional int32 force = 5;
  if (has_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->force(), target);
  }
  
  // optional int32 tick = 6;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->tick(), target);
  }
  
  // optional string role_name = 7;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->role_name(), target);
  }
  
  // optional int32 role_sex = 8;
  if (has_role_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->role_sex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoTrvlBattleRank::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
    // optional int64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional int32 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }
    
    // optional int32 kill_amount = 4;
    if (has_kill_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kill_amount());
    }
    
    // optional int32 force = 5;
    if (has_force()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->force());
    }
    
    // optional int32 tick = 6;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tick());
    }
    
    // optional string role_name = 7;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }
    
    // optional int32 role_sex = 8;
    if (has_role_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_sex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoTrvlBattleRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoTrvlBattleRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoTrvlBattleRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoTrvlBattleRank::MergeFrom(const ProtoTrvlBattleRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_kill_amount()) {
      set_kill_amount(from.kill_amount());
    }
    if (from.has_force()) {
      set_force(from.force());
    }
    if (from.has_tick()) {
      set_tick(from.tick());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_role_sex()) {
      set_role_sex(from.role_sex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoTrvlBattleRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoTrvlBattleRank::CopyFrom(const ProtoTrvlBattleRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoTrvlBattleRank::IsInitialized() const {
  
  return true;
}

void ProtoTrvlBattleRank::Swap(ProtoTrvlBattleRank* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(role_id_, other->role_id_);
    std::swap(score_, other->score_);
    std::swap(kill_amount_, other->kill_amount_);
    std::swap(force_, other->force_);
    std::swap(tick_, other->tick_);
    std::swap(role_name_, other->role_name_);
    std::swap(role_sex_, other->role_sex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoTrvlBattleRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoTrvlBattleRank_descriptor_;
  metadata.reflection = ProtoTrvlBattleRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoGemInfo::kGemIdFieldNumber;
const int ProtoGemInfo::kGemAmountFieldNumber;
#endif  // !_MSC_VER

ProtoGemInfo::ProtoGemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoGemInfo::InitAsDefaultInstance() {
}

ProtoGemInfo::ProtoGemInfo(const ProtoGemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoGemInfo::SharedCtor() {
  _cached_size_ = 0;
  gem_id_ = 0;
  gem_amount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoGemInfo::~ProtoGemInfo() {
  SharedDtor();
}

void ProtoGemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoGemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoGemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoGemInfo_descriptor_;
}

const ProtoGemInfo& ProtoGemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoGemInfo* ProtoGemInfo::default_instance_ = NULL;

ProtoGemInfo* ProtoGemInfo::New() const {
  return new ProtoGemInfo;
}

void ProtoGemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gem_id_ = 0;
    gem_amount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoGemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gem_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gem_id_)));
          set_has_gem_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gem_amount;
        break;
      }
      
      // optional int32 gem_amount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gem_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gem_amount_)));
          set_has_gem_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoGemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gem_id = 1;
  if (has_gem_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gem_id(), output);
  }
  
  // optional int32 gem_amount = 2;
  if (has_gem_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gem_amount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoGemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 gem_id = 1;
  if (has_gem_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gem_id(), target);
  }
  
  // optional int32 gem_amount = 2;
  if (has_gem_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gem_amount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoGemInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gem_id = 1;
    if (has_gem_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gem_id());
    }
    
    // optional int32 gem_amount = 2;
    if (has_gem_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gem_amount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoGemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoGemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoGemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoGemInfo::MergeFrom(const ProtoGemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gem_id()) {
      set_gem_id(from.gem_id());
    }
    if (from.has_gem_amount()) {
      set_gem_amount(from.gem_amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoGemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoGemInfo::CopyFrom(const ProtoGemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoGemInfo::IsInitialized() const {
  
  return true;
}

void ProtoGemInfo::Swap(ProtoGemInfo* other) {
  if (other != this) {
    std::swap(gem_id_, other->gem_id_);
    std::swap(gem_amount_, other->gem_amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoGemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoGemInfo_descriptor_;
  metadata.reflection = ProtoGemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoTrvlWbossMail::kRewardIdFieldNumber;
const int ProtoTrvlWbossMail::kRoleIdFieldNumber;
const int ProtoTrvlWbossMail::kRankFieldNumber;
#endif  // !_MSC_VER

ProtoTrvlWbossMail::ProtoTrvlWbossMail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoTrvlWbossMail::InitAsDefaultInstance() {
}

ProtoTrvlWbossMail::ProtoTrvlWbossMail(const ProtoTrvlWbossMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoTrvlWbossMail::SharedCtor() {
  _cached_size_ = 0;
  reward_id_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  rank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoTrvlWbossMail::~ProtoTrvlWbossMail() {
  SharedDtor();
}

void ProtoTrvlWbossMail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoTrvlWbossMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoTrvlWbossMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoTrvlWbossMail_descriptor_;
}

const ProtoTrvlWbossMail& ProtoTrvlWbossMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoTrvlWbossMail* ProtoTrvlWbossMail::default_instance_ = NULL;

ProtoTrvlWbossMail* ProtoTrvlWbossMail::New() const {
  return new ProtoTrvlWbossMail;
}

void ProtoTrvlWbossMail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reward_id_ = 0;
    role_id_ = GOOGLE_LONGLONG(0);
    rank_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoTrvlWbossMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 reward_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id_)));
          set_has_reward_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }
      
      // optional int64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank;
        break;
      }
      
      // optional int32 rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoTrvlWbossMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 reward_id = 1;
  if (has_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reward_id(), output);
  }
  
  // optional int64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->role_id(), output);
  }
  
  // optional int32 rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rank(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoTrvlWbossMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 reward_id = 1;
  if (has_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reward_id(), target);
  }
  
  // optional int64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->role_id(), target);
  }
  
  // optional int32 rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rank(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoTrvlWbossMail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 reward_id = 1;
    if (has_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id());
    }
    
    // optional int64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional int32 rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoTrvlWbossMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoTrvlWbossMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoTrvlWbossMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoTrvlWbossMail::MergeFrom(const ProtoTrvlWbossMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reward_id()) {
      set_reward_id(from.reward_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoTrvlWbossMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoTrvlWbossMail::CopyFrom(const ProtoTrvlWbossMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoTrvlWbossMail::IsInitialized() const {
  
  return true;
}

void ProtoTrvlWbossMail::Swap(ProtoTrvlWbossMail* other) {
  if (other != this) {
    std::swap(reward_id_, other->reward_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoTrvlWbossMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoTrvlWbossMail_descriptor_;
  metadata.reflection = ProtoTrvlWbossMail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoldingNature::kValueFieldNumber;
const int MoldingNature::kLevelFieldNumber;
const int MoldingNature::kCurScheduleFieldNumber;
const int MoldingNature::kMaxScheduleFieldNumber;
const int MoldingNature::kNatureIdFieldNumber;
#endif  // !_MSC_VER

MoldingNature::MoldingNature()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoldingNature::InitAsDefaultInstance() {
}

MoldingNature::MoldingNature(const MoldingNature& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoldingNature::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0;
  level_ = 0;
  cur_schedule_ = 0;
  max_schedule_ = 0;
  nature_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoldingNature::~MoldingNature() {
  SharedDtor();
}

void MoldingNature::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoldingNature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoldingNature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoldingNature_descriptor_;
}

const MoldingNature& MoldingNature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

MoldingNature* MoldingNature::default_instance_ = NULL;

MoldingNature* MoldingNature::New() const {
  return new MoldingNature;
}

void MoldingNature::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = 0;
    level_ = 0;
    cur_schedule_ = 0;
    max_schedule_ = 0;
    nature_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoldingNature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_schedule;
        break;
      }
      
      // optional int32 cur_schedule = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_schedule:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_schedule_)));
          set_has_cur_schedule();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_schedule;
        break;
      }
      
      // optional int32 max_schedule = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_schedule:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_schedule_)));
          set_has_max_schedule();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_nature_id;
        break;
      }
      
      // optional int32 nature_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nature_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nature_id_)));
          set_has_nature_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoldingNature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->value(), output);
  }
  
  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }
  
  // optional int32 cur_schedule = 3;
  if (has_cur_schedule()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cur_schedule(), output);
  }
  
  // optional int32 max_schedule = 4;
  if (has_max_schedule()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_schedule(), output);
  }
  
  // optional int32 nature_id = 5;
  if (has_nature_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nature_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoldingNature::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->value(), target);
  }
  
  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }
  
  // optional int32 cur_schedule = 3;
  if (has_cur_schedule()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cur_schedule(), target);
  }
  
  // optional int32 max_schedule = 4;
  if (has_max_schedule()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_schedule(), target);
  }
  
  // optional int32 nature_id = 5;
  if (has_nature_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nature_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoldingNature::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 cur_schedule = 3;
    if (has_cur_schedule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_schedule());
    }
    
    // optional int32 max_schedule = 4;
    if (has_max_schedule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_schedule());
    }
    
    // optional int32 nature_id = 5;
    if (has_nature_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nature_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoldingNature::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoldingNature* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoldingNature*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoldingNature::MergeFrom(const MoldingNature& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_cur_schedule()) {
      set_cur_schedule(from.cur_schedule());
    }
    if (from.has_max_schedule()) {
      set_max_schedule(from.max_schedule());
    }
    if (from.has_nature_id()) {
      set_nature_id(from.nature_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoldingNature::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoldingNature::CopyFrom(const MoldingNature& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoldingNature::IsInitialized() const {
  
  return true;
}

void MoldingNature::Swap(MoldingNature* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(level_, other->level_);
    std::swap(cur_schedule_, other->cur_schedule_);
    std::swap(max_schedule_, other->max_schedule_);
    std::swap(nature_id_, other->nature_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoldingNature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoldingNature_descriptor_;
  metadata.reflection = MoldingNature_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoCleanInfo::kScriptSortFieldNumber;
const int ProtoCleanInfo::kItemListFieldNumber;
const int ProtoCleanInfo::kDropListFieldNumber;
#endif  // !_MSC_VER

ProtoCleanInfo::ProtoCleanInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoCleanInfo::InitAsDefaultInstance() {
}

ProtoCleanInfo::ProtoCleanInfo(const ProtoCleanInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoCleanInfo::SharedCtor() {
  _cached_size_ = 0;
  script_sort_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoCleanInfo::~ProtoCleanInfo() {
  SharedDtor();
}

void ProtoCleanInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoCleanInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoCleanInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoCleanInfo_descriptor_;
}

const ProtoCleanInfo& ProtoCleanInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoCleanInfo* ProtoCleanInfo::default_instance_ = NULL;

ProtoCleanInfo* ProtoCleanInfo::New() const {
  return new ProtoCleanInfo;
}

void ProtoCleanInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    script_sort_ = 0;
  }
  item_list_.Clear();
  drop_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoCleanInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 script_sort = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &script_sort_)));
          set_has_script_sort();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_list;
        break;
      }
      
      // repeated .ProtoItem item_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_list;
        if (input->ExpectTag(26)) goto parse_drop_list;
        break;
      }
      
      // repeated .ProtoItem drop_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drop_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_drop_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_drop_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoCleanInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 script_sort = 1;
  if (has_script_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->script_sort(), output);
  }
  
  // repeated .ProtoItem item_list = 2;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item_list(i), output);
  }
  
  // repeated .ProtoItem drop_list = 3;
  for (int i = 0; i < this->drop_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->drop_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoCleanInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 script_sort = 1;
  if (has_script_sort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->script_sort(), target);
  }
  
  // repeated .ProtoItem item_list = 2;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item_list(i), target);
  }
  
  // repeated .ProtoItem drop_list = 3;
  for (int i = 0; i < this->drop_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->drop_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoCleanInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 script_sort = 1;
    if (has_script_sort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->script_sort());
    }
    
  }
  // repeated .ProtoItem item_list = 2;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }
  
  // repeated .ProtoItem drop_list = 3;
  total_size += 1 * this->drop_list_size();
  for (int i = 0; i < this->drop_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->drop_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoCleanInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoCleanInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoCleanInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoCleanInfo::MergeFrom(const ProtoCleanInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  drop_list_.MergeFrom(from.drop_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_script_sort()) {
      set_script_sort(from.script_sort());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoCleanInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoCleanInfo::CopyFrom(const ProtoCleanInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoCleanInfo::IsInitialized() const {
  
  return true;
}

void ProtoCleanInfo::Swap(ProtoCleanInfo* other) {
  if (other != this) {
    std::swap(script_sort_, other->script_sort_);
    item_list_.Swap(&other->item_list_);
    drop_list_.Swap(&other->drop_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoCleanInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoCleanInfo_descriptor_;
  metadata.reflection = ProtoCleanInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FishDetail::kTypeFieldNumber;
const int FishDetail::kLayerFieldNumber;
const int FishDetail::kFlagFieldNumber;
const int FishDetail::kPosXFieldNumber;
const int FishDetail::kPosYFieldNumber;
const int FishDetail::kItemIdFieldNumber;
const int FishDetail::kItemAmountFieldNumber;
#endif  // !_MSC_VER

FishDetail::FishDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FishDetail::InitAsDefaultInstance() {
}

FishDetail::FishDetail(const FishDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FishDetail::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  layer_ = 0;
  flag_ = 0;
  pos_x_ = 0;
  pos_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FishDetail::~FishDetail() {
  SharedDtor();
}

void FishDetail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FishDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FishDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FishDetail_descriptor_;
}

const FishDetail& FishDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

FishDetail* FishDetail::default_instance_ = NULL;

FishDetail* FishDetail::New() const {
  return new FishDetail;
}

void FishDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    layer_ = 0;
    flag_ = 0;
    pos_x_ = 0;
    pos_y_ = 0;
  }
  item_id_.Clear();
  item_amount_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FishDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_layer;
        break;
      }
      
      // optional int32 layer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flag;
        break;
      }
      
      // optional int32 flag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pos_x;
        break;
      }
      
      // optional int32 pos_x = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_x_)));
          set_has_pos_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pos_y;
        break;
      }
      
      // optional int32 pos_y = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_y_)));
          set_has_pos_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_item_id;
        break;
      }
      
      // repeated int32 item_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_item_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_item_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_item_id;
        if (input->ExpectTag(56)) goto parse_item_amount;
        break;
      }
      
      // repeated int32 item_amount = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_item_amount())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_item_amount())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_item_amount;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FishDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // optional int32 layer = 2;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->layer(), output);
  }
  
  // optional int32 flag = 3;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->flag(), output);
  }
  
  // optional int32 pos_x = 4;
  if (has_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pos_x(), output);
  }
  
  // optional int32 pos_y = 5;
  if (has_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pos_y(), output);
  }
  
  // repeated int32 item_id = 6;
  for (int i = 0; i < this->item_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->item_id(i), output);
  }
  
  // repeated int32 item_amount = 7;
  for (int i = 0; i < this->item_amount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->item_amount(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FishDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // optional int32 layer = 2;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->layer(), target);
  }
  
  // optional int32 flag = 3;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->flag(), target);
  }
  
  // optional int32 pos_x = 4;
  if (has_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pos_x(), target);
  }
  
  // optional int32 pos_y = 5;
  if (has_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pos_y(), target);
  }
  
  // repeated int32 item_id = 6;
  for (int i = 0; i < this->item_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->item_id(i), target);
  }
  
  // repeated int32 item_amount = 7;
  for (int i = 0; i < this->item_amount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->item_amount(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FishDetail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int32 layer = 2;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layer());
    }
    
    // optional int32 flag = 3;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }
    
    // optional int32 pos_x = 4;
    if (has_pos_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_x());
    }
    
    // optional int32 pos_y = 5;
    if (has_pos_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_y());
    }
    
  }
  // repeated int32 item_id = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->item_id(i));
    }
    total_size += 1 * this->item_id_size() + data_size;
  }
  
  // repeated int32 item_amount = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_amount_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->item_amount(i));
    }
    total_size += 1 * this->item_amount_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FishDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FishDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FishDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FishDetail::MergeFrom(const FishDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_id_.MergeFrom(from.item_id_);
  item_amount_.MergeFrom(from.item_amount_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_layer()) {
      set_layer(from.layer());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_pos_x()) {
      set_pos_x(from.pos_x());
    }
    if (from.has_pos_y()) {
      set_pos_y(from.pos_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FishDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FishDetail::CopyFrom(const FishDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FishDetail::IsInitialized() const {
  
  return true;
}

void FishDetail::Swap(FishDetail* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(layer_, other->layer_);
    std::swap(flag_, other->flag_);
    std::swap(pos_x_, other->pos_x_);
    std::swap(pos_y_, other->pos_y_);
    item_id_.Swap(&other->item_id_);
    item_amount_.Swap(&other->item_amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FishDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FishDetail_descriptor_;
  metadata.reflection = FishDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoTeamForceInfo::kTeamIdFieldNumber;
const int ProtoTeamForceInfo::kRoleIdFieldNumber;
const int ProtoTeamForceInfo::kForceFieldNumber;
const int ProtoTeamForceInfo::kLevelFieldNumber;
#endif  // !_MSC_VER

ProtoTeamForceInfo::ProtoTeamForceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoTeamForceInfo::InitAsDefaultInstance() {
}

ProtoTeamForceInfo::ProtoTeamForceInfo(const ProtoTeamForceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoTeamForceInfo::SharedCtor() {
  _cached_size_ = 0;
  team_id_ = GOOGLE_LONGLONG(0);
  role_id_ = GOOGLE_LONGLONG(0);
  force_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoTeamForceInfo::~ProtoTeamForceInfo() {
  SharedDtor();
}

void ProtoTeamForceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoTeamForceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoTeamForceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoTeamForceInfo_descriptor_;
}

const ProtoTeamForceInfo& ProtoTeamForceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoTeamForceInfo* ProtoTeamForceInfo::default_instance_ = NULL;

ProtoTeamForceInfo* ProtoTeamForceInfo::New() const {
  return new ProtoTeamForceInfo;
}

void ProtoTeamForceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    team_id_ = GOOGLE_LONGLONG(0);
    role_id_ = GOOGLE_LONGLONG(0);
    force_ = 0;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoTeamForceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 team_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }
      
      // optional int64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_force;
        break;
      }
      
      // optional int32 force = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &force_)));
          set_has_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }
      
      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoTeamForceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->team_id(), output);
  }
  
  // optional int64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->role_id(), output);
  }
  
  // optional int32 force = 3;
  if (has_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->force(), output);
  }
  
  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoTeamForceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 team_id = 1;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->team_id(), target);
  }
  
  // optional int64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->role_id(), target);
  }
  
  // optional int32 force = 3;
  if (has_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->force(), target);
  }
  
  // optional int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoTeamForceInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->team_id());
    }
    
    // optional int64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional int32 force = 3;
    if (has_force()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->force());
    }
    
    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoTeamForceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoTeamForceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoTeamForceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoTeamForceInfo::MergeFrom(const ProtoTeamForceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_force()) {
      set_force(from.force());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoTeamForceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoTeamForceInfo::CopyFrom(const ProtoTeamForceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoTeamForceInfo::IsInitialized() const {
  
  return true;
}

void ProtoTeamForceInfo::Swap(ProtoTeamForceInfo* other) {
  if (other != this) {
    std::swap(team_id_, other->team_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(force_, other->force_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoTeamForceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoTeamForceInfo_descriptor_;
  metadata.reflection = ProtoTeamForceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoItemExchangeTimes::kItemIdFieldNumber;
const int ProtoItemExchangeTimes::kTimesFieldNumber;
#endif  // !_MSC_VER

ProtoItemExchangeTimes::ProtoItemExchangeTimes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoItemExchangeTimes::InitAsDefaultInstance() {
}

ProtoItemExchangeTimes::ProtoItemExchangeTimes(const ProtoItemExchangeTimes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoItemExchangeTimes::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0;
  times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoItemExchangeTimes::~ProtoItemExchangeTimes() {
  SharedDtor();
}

void ProtoItemExchangeTimes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoItemExchangeTimes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoItemExchangeTimes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoItemExchangeTimes_descriptor_;
}

const ProtoItemExchangeTimes& ProtoItemExchangeTimes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoItemExchangeTimes* ProtoItemExchangeTimes::default_instance_ = NULL;

ProtoItemExchangeTimes* ProtoItemExchangeTimes::New() const {
  return new ProtoItemExchangeTimes;
}

void ProtoItemExchangeTimes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0;
    times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoItemExchangeTimes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_times;
        break;
      }
      
      // optional int32 times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoItemExchangeTimes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_id(), output);
  }
  
  // optional int32 times = 2;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->times(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoItemExchangeTimes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_id(), target);
  }
  
  // optional int32 times = 2;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->times(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoItemExchangeTimes::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }
    
    // optional int32 times = 2;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoItemExchangeTimes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoItemExchangeTimes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoItemExchangeTimes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoItemExchangeTimes::MergeFrom(const ProtoItemExchangeTimes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoItemExchangeTimes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoItemExchangeTimes::CopyFrom(const ProtoItemExchangeTimes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoItemExchangeTimes::IsInitialized() const {
  
  return true;
}

void ProtoItemExchangeTimes::Swap(ProtoItemExchangeTimes* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(times_, other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoItemExchangeTimes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoItemExchangeTimes_descriptor_;
  metadata.reflection = ProtoItemExchangeTimes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoPeakQualityInfo::kScoreFieldNumber;
const int ProtoPeakQualityInfo::kRankFieldNumber;
const int ProtoPeakQualityInfo::kLeftFightTimesFieldNumber;
#endif  // !_MSC_VER

ProtoPeakQualityInfo::ProtoPeakQualityInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoPeakQualityInfo::InitAsDefaultInstance() {
}

ProtoPeakQualityInfo::ProtoPeakQualityInfo(const ProtoPeakQualityInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoPeakQualityInfo::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0;
  rank_ = 0;
  left_fight_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoPeakQualityInfo::~ProtoPeakQualityInfo() {
  SharedDtor();
}

void ProtoPeakQualityInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoPeakQualityInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoPeakQualityInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoPeakQualityInfo_descriptor_;
}

const ProtoPeakQualityInfo& ProtoPeakQualityInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoPeakQualityInfo* ProtoPeakQualityInfo::default_instance_ = NULL;

ProtoPeakQualityInfo* ProtoPeakQualityInfo::New() const {
  return new ProtoPeakQualityInfo;
}

void ProtoPeakQualityInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    score_ = 0;
    rank_ = 0;
    left_fight_times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoPeakQualityInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }
      
      // optional int32 rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_left_fight_times;
        break;
      }
      
      // optional int32 left_fight_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_fight_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_fight_times_)));
          set_has_left_fight_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoPeakQualityInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 score = 1;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->score(), output);
  }
  
  // optional int32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank(), output);
  }
  
  // optional int32 left_fight_times = 3;
  if (has_left_fight_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->left_fight_times(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoPeakQualityInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 score = 1;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->score(), target);
  }
  
  // optional int32 rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank(), target);
  }
  
  // optional int32 left_fight_times = 3;
  if (has_left_fight_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->left_fight_times(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoPeakQualityInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 score = 1;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }
    
    // optional int32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
    // optional int32 left_fight_times = 3;
    if (has_left_fight_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_fight_times());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoPeakQualityInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoPeakQualityInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoPeakQualityInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoPeakQualityInfo::MergeFrom(const ProtoPeakQualityInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_left_fight_times()) {
      set_left_fight_times(from.left_fight_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoPeakQualityInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoPeakQualityInfo::CopyFrom(const ProtoPeakQualityInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoPeakQualityInfo::IsInitialized() const {
  
  return true;
}

void ProtoPeakQualityInfo::Swap(ProtoPeakQualityInfo* other) {
  if (other != this) {
    std::swap(score_, other->score_);
    std::swap(rank_, other->rank_);
    std::swap(left_fight_times_, other->left_fight_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoPeakQualityInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoPeakQualityInfo_descriptor_;
  metadata.reflection = ProtoPeakQualityInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoPeakKnockoutInfo::kRivalTeamIdFieldNumber;
const int ProtoPeakKnockoutInfo::kRivalTeamNameFieldNumber;
const int ProtoPeakKnockoutInfo::kRivalTeamerFieldNumber;
const int ProtoPeakKnockoutInfo::kMyScoreFieldNumber;
const int ProtoPeakKnockoutInfo::kRivalSocreFieldNumber;
const int ProtoPeakKnockoutInfo::kScoreTypeFieldNumber;
#endif  // !_MSC_VER

ProtoPeakKnockoutInfo::ProtoPeakKnockoutInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoPeakKnockoutInfo::InitAsDefaultInstance() {
}

ProtoPeakKnockoutInfo::ProtoPeakKnockoutInfo(const ProtoPeakKnockoutInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoPeakKnockoutInfo::SharedCtor() {
  _cached_size_ = 0;
  rival_team_id_ = GOOGLE_LONGLONG(0);
  rival_team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  my_score_ = 0;
  rival_socre_ = 0;
  score_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoPeakKnockoutInfo::~ProtoPeakKnockoutInfo() {
  SharedDtor();
}

void ProtoPeakKnockoutInfo::SharedDtor() {
  if (rival_team_name_ != &::google::protobuf::internal::kEmptyString) {
    delete rival_team_name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoPeakKnockoutInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoPeakKnockoutInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoPeakKnockoutInfo_descriptor_;
}

const ProtoPeakKnockoutInfo& ProtoPeakKnockoutInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoPeakKnockoutInfo* ProtoPeakKnockoutInfo::default_instance_ = NULL;

ProtoPeakKnockoutInfo* ProtoPeakKnockoutInfo::New() const {
  return new ProtoPeakKnockoutInfo;
}

void ProtoPeakKnockoutInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rival_team_id_ = GOOGLE_LONGLONG(0);
    if (has_rival_team_name()) {
      if (rival_team_name_ != &::google::protobuf::internal::kEmptyString) {
        rival_team_name_->clear();
      }
    }
    my_score_ = 0;
    rival_socre_ = 0;
    score_type_ = 0;
  }
  rival_teamer_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoPeakKnockoutInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 rival_team_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rival_team_id_)));
          set_has_rival_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rival_team_name;
        break;
      }
      
      // optional string rival_team_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rival_team_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rival_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rival_team_name().data(), this->rival_team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rival_teamer;
        break;
      }
      
      // repeated .ProtoTeamer rival_teamer = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rival_teamer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rival_teamer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rival_teamer;
        if (input->ExpectTag(32)) goto parse_my_score;
        break;
      }
      
      // optional int32 my_score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_my_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &my_score_)));
          set_has_my_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rival_socre;
        break;
      }
      
      // optional int32 rival_socre = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rival_socre:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rival_socre_)));
          set_has_rival_socre();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_score_type;
        break;
      }
      
      // optional int32 score_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_type_)));
          set_has_score_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoPeakKnockoutInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 rival_team_id = 1;
  if (has_rival_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->rival_team_id(), output);
  }
  
  // optional string rival_team_name = 2;
  if (has_rival_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rival_team_name().data(), this->rival_team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->rival_team_name(), output);
  }
  
  // repeated .ProtoTeamer rival_teamer = 3;
  for (int i = 0; i < this->rival_teamer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rival_teamer(i), output);
  }
  
  // optional int32 my_score = 4;
  if (has_my_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->my_score(), output);
  }
  
  // optional int32 rival_socre = 5;
  if (has_rival_socre()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rival_socre(), output);
  }
  
  // optional int32 score_type = 6;
  if (has_score_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->score_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoPeakKnockoutInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 rival_team_id = 1;
  if (has_rival_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->rival_team_id(), target);
  }
  
  // optional string rival_team_name = 2;
  if (has_rival_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rival_team_name().data(), this->rival_team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rival_team_name(), target);
  }
  
  // repeated .ProtoTeamer rival_teamer = 3;
  for (int i = 0; i < this->rival_teamer_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rival_teamer(i), target);
  }
  
  // optional int32 my_score = 4;
  if (has_my_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->my_score(), target);
  }
  
  // optional int32 rival_socre = 5;
  if (has_rival_socre()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rival_socre(), target);
  }
  
  // optional int32 score_type = 6;
  if (has_score_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->score_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoPeakKnockoutInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 rival_team_id = 1;
    if (has_rival_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rival_team_id());
    }
    
    // optional string rival_team_name = 2;
    if (has_rival_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rival_team_name());
    }
    
    // optional int32 my_score = 4;
    if (has_my_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->my_score());
    }
    
    // optional int32 rival_socre = 5;
    if (has_rival_socre()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rival_socre());
    }
    
    // optional int32 score_type = 6;
    if (has_score_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score_type());
    }
    
  }
  // repeated .ProtoTeamer rival_teamer = 3;
  total_size += 1 * this->rival_teamer_size();
  for (int i = 0; i < this->rival_teamer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rival_teamer(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoPeakKnockoutInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoPeakKnockoutInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoPeakKnockoutInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoPeakKnockoutInfo::MergeFrom(const ProtoPeakKnockoutInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  rival_teamer_.MergeFrom(from.rival_teamer_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rival_team_id()) {
      set_rival_team_id(from.rival_team_id());
    }
    if (from.has_rival_team_name()) {
      set_rival_team_name(from.rival_team_name());
    }
    if (from.has_my_score()) {
      set_my_score(from.my_score());
    }
    if (from.has_rival_socre()) {
      set_rival_socre(from.rival_socre());
    }
    if (from.has_score_type()) {
      set_score_type(from.score_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoPeakKnockoutInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoPeakKnockoutInfo::CopyFrom(const ProtoPeakKnockoutInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoPeakKnockoutInfo::IsInitialized() const {
  
  return true;
}

void ProtoPeakKnockoutInfo::Swap(ProtoPeakKnockoutInfo* other) {
  if (other != this) {
    std::swap(rival_team_id_, other->rival_team_id_);
    std::swap(rival_team_name_, other->rival_team_name_);
    rival_teamer_.Swap(&other->rival_teamer_);
    std::swap(my_score_, other->my_score_);
    std::swap(rival_socre_, other->rival_socre_);
    std::swap(score_type_, other->score_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoPeakKnockoutInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoPeakKnockoutInfo_descriptor_;
  metadata.reflection = ProtoPeakKnockoutInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpecialBoxChange::kItemIdFieldNumber;
const int SpecialBoxChange::kItemAmountFieldNumber;
const int SpecialBoxChange::kItemBindFieldNumber;
const int SpecialBoxChange::kPageFieldNumber;
const int SpecialBoxChange::kGroupFieldNumber;
const int SpecialBoxChange::kChangeItemIdFieldNumber;
const int SpecialBoxChange::kChangeItemAmountFieldNumber;
const int SpecialBoxChange::kChangeItemBindFieldNumber;
const int SpecialBoxChange::kIndexFieldNumber;
#endif  // !_MSC_VER

SpecialBoxChange::SpecialBoxChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpecialBoxChange::InitAsDefaultInstance() {
}

SpecialBoxChange::SpecialBoxChange(const SpecialBoxChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpecialBoxChange::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0;
  item_amount_ = 0;
  item_bind_ = 0;
  page_ = 0;
  group_ = 0;
  change_item_id_ = 0;
  change_item_amount_ = 0;
  change_item_bind_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpecialBoxChange::~SpecialBoxChange() {
  SharedDtor();
}

void SpecialBoxChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpecialBoxChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpecialBoxChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpecialBoxChange_descriptor_;
}

const SpecialBoxChange& SpecialBoxChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

SpecialBoxChange* SpecialBoxChange::default_instance_ = NULL;

SpecialBoxChange* SpecialBoxChange::New() const {
  return new SpecialBoxChange;
}

void SpecialBoxChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0;
    item_amount_ = 0;
    item_bind_ = 0;
    page_ = 0;
    group_ = 0;
    change_item_id_ = 0;
    change_item_amount_ = 0;
    change_item_bind_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpecialBoxChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_amount;
        break;
      }
      
      // optional int32 item_amount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_amount_)));
          set_has_item_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_bind;
        break;
      }
      
      // optional int32 item_bind = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_bind_)));
          set_has_item_bind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_page;
        break;
      }
      
      // optional int32 page = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_group;
        break;
      }
      
      // optional int32 group = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_change_item_id;
        break;
      }
      
      // optional int32 change_item_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &change_item_id_)));
          set_has_change_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_change_item_amount;
        break;
      }
      
      // optional int32 change_item_amount = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_item_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &change_item_amount_)));
          set_has_change_item_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_change_item_bind;
        break;
      }
      
      // optional int32 change_item_bind = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_item_bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &change_item_bind_)));
          set_has_change_item_bind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_index;
        break;
      }
      
      // optional int32 index = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpecialBoxChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_id(), output);
  }
  
  // optional int32 item_amount = 2;
  if (has_item_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_amount(), output);
  }
  
  // optional int32 item_bind = 3;
  if (has_item_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->item_bind(), output);
  }
  
  // optional int32 page = 4;
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->page(), output);
  }
  
  // optional int32 group = 5;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->group(), output);
  }
  
  // optional int32 change_item_id = 6;
  if (has_change_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->change_item_id(), output);
  }
  
  // optional int32 change_item_amount = 7;
  if (has_change_item_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->change_item_amount(), output);
  }
  
  // optional int32 change_item_bind = 8;
  if (has_change_item_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->change_item_bind(), output);
  }
  
  // optional int32 index = 9;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpecialBoxChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_id(), target);
  }
  
  // optional int32 item_amount = 2;
  if (has_item_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_amount(), target);
  }
  
  // optional int32 item_bind = 3;
  if (has_item_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->item_bind(), target);
  }
  
  // optional int32 page = 4;
  if (has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->page(), target);
  }
  
  // optional int32 group = 5;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->group(), target);
  }
  
  // optional int32 change_item_id = 6;
  if (has_change_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->change_item_id(), target);
  }
  
  // optional int32 change_item_amount = 7;
  if (has_change_item_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->change_item_amount(), target);
  }
  
  // optional int32 change_item_bind = 8;
  if (has_change_item_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->change_item_bind(), target);
  }
  
  // optional int32 index = 9;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpecialBoxChange::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }
    
    // optional int32 item_amount = 2;
    if (has_item_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_amount());
    }
    
    // optional int32 item_bind = 3;
    if (has_item_bind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_bind());
    }
    
    // optional int32 page = 4;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page());
    }
    
    // optional int32 group = 5;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group());
    }
    
    // optional int32 change_item_id = 6;
    if (has_change_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->change_item_id());
    }
    
    // optional int32 change_item_amount = 7;
    if (has_change_item_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->change_item_amount());
    }
    
    // optional int32 change_item_bind = 8;
    if (has_change_item_bind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->change_item_bind());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 index = 9;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpecialBoxChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpecialBoxChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpecialBoxChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpecialBoxChange::MergeFrom(const SpecialBoxChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_amount()) {
      set_item_amount(from.item_amount());
    }
    if (from.has_item_bind()) {
      set_item_bind(from.item_bind());
    }
    if (from.has_page()) {
      set_page(from.page());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_change_item_id()) {
      set_change_item_id(from.change_item_id());
    }
    if (from.has_change_item_amount()) {
      set_change_item_amount(from.change_item_amount());
    }
    if (from.has_change_item_bind()) {
      set_change_item_bind(from.change_item_bind());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpecialBoxChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecialBoxChange::CopyFrom(const SpecialBoxChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecialBoxChange::IsInitialized() const {
  
  return true;
}

void SpecialBoxChange::Swap(SpecialBoxChange* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(item_amount_, other->item_amount_);
    std::swap(item_bind_, other->item_bind_);
    std::swap(page_, other->page_);
    std::swap(group_, other->group_);
    std::swap(change_item_id_, other->change_item_id_);
    std::swap(change_item_amount_, other->change_item_amount_);
    std::swap(change_item_bind_, other->change_item_bind_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpecialBoxChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpecialBoxChange_descriptor_;
  metadata.reflection = SpecialBoxChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoQualityRank::kTeamIdFieldNumber;
const int ProtoQualityRank::kTeamNameFieldNumber;
const int ProtoQualityRank::kTeamScoreFieldNumber;
const int ProtoQualityRank::kRankFieldNumber;
#endif  // !_MSC_VER

ProtoQualityRank::ProtoQualityRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoQualityRank::InitAsDefaultInstance() {
}

ProtoQualityRank::ProtoQualityRank(const ProtoQualityRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoQualityRank::SharedCtor() {
  _cached_size_ = 0;
  team_id_ = GOOGLE_LONGLONG(0);
  team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  team_score_ = 0;
  rank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoQualityRank::~ProtoQualityRank() {
  SharedDtor();
}

void ProtoQualityRank::SharedDtor() {
  if (team_name_ != &::google::protobuf::internal::kEmptyString) {
    delete team_name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoQualityRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoQualityRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoQualityRank_descriptor_;
}

const ProtoQualityRank& ProtoQualityRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPublic_2eproto();  return *default_instance_;
}

ProtoQualityRank* ProtoQualityRank::default_instance_ = NULL;

ProtoQualityRank* ProtoQualityRank::New() const {
  return new ProtoQualityRank;
}

void ProtoQualityRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    team_id_ = GOOGLE_LONGLONG(0);
    if (has_team_name()) {
      if (team_name_ != &::google::protobuf::internal::kEmptyString) {
        team_name_->clear();
      }
    }
    team_score_ = 0;
    rank_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoQualityRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 team_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_team_name;
        break;
      }
      
      // optional string team_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_team_score;
        break;
      }
      
      // optional int32 team_score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_score_)));
          set_has_team_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rank;
        break;
      }
      
      // optional int32 rank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoQualityRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->team_id(), output);
  }
  
  // optional string team_name = 2;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->team_name(), output);
  }
  
  // optional int32 team_score = 3;
  if (has_team_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->team_score(), output);
  }
  
  // optional int32 rank = 4;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rank(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoQualityRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 team_id = 1;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->team_id(), target);
  }
  
  // optional string team_name = 2;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->team_name(), target);
  }
  
  // optional int32 team_score = 3;
  if (has_team_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->team_score(), target);
  }
  
  // optional int32 rank = 4;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rank(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoQualityRank::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->team_id());
    }
    
    // optional string team_name = 2;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }
    
    // optional int32 team_score = 3;
    if (has_team_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_score());
    }
    
    // optional int32 rank = 4;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoQualityRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoQualityRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoQualityRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoQualityRank::MergeFrom(const ProtoQualityRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_team_name()) {
      set_team_name(from.team_name());
    }
    if (from.has_team_score()) {
      set_team_score(from.team_score());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoQualityRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoQualityRank::CopyFrom(const ProtoQualityRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoQualityRank::IsInitialized() const {
  
  return true;
}

void ProtoQualityRank::Swap(ProtoQualityRank* other) {
  if (other != this) {
    std::swap(team_id_, other->team_id_);
    std::swap(team_name_, other->team_name_);
    std::swap(team_score_, other->team_score_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoQualityRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoQualityRank_descriptor_;
  metadata.reflection = ProtoQualityRank_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
