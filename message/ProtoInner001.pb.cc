// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoInner001.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Proto30100101_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto30100101_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto30400004_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto30400004_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto30400101_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto30400101_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto30400102_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto30400102_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto30400103_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto30400103_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto30400104_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto30400104_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto30400105_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto30400105_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto30400201_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto30400201_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto30310001_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto30310001_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto30330001_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto30330001_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto30800001_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto30800001_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto30200101_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto30200101_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto30200103_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto30200103_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto30200104_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto30200104_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto30200105_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto30200105_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto30200106_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto30200106_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto30200107_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto30200107_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto30200108_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto30200108_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto30200109_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto30200109_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto30200110_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto30200110_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto30200111_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto30200111_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto30200113_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto30200113_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto31400106_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto31400106_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto31400107_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto31400107_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto31400101_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto31400101_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto31400102_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto31400102_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto31400103_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto31400103_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto31400104_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto31400104_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto31400105_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto31400105_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto31400001_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto31400001_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto31400011_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto31400011_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto31400012_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto31400012_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto31400221_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto31400221_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto31400222_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto31400222_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto31400223_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto31400223_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto30400013_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto30400013_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto31400014_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto31400014_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto31400015_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto31400015_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto30400011_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto30400011_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto31400016_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto31400016_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto30400401_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto30400401_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto30400402_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto30400402_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto30400405_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto30400405_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto30400406_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto30400406_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto31400108_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto31400108_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto31400109_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto31400109_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto31400110_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto31400110_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto31400111_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto31400111_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto30400017_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto30400017_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto31400301_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto31400301_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoInner001_2eproto() {
  protobuf_AddDesc_ProtoInner001_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoInner001.proto");
  GOOGLE_CHECK(file != NULL);
  Proto30100101_descriptor_ = file->message_type(0);
  static const int Proto30100101_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30100101, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30100101, uc_sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30100101, client_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30100101, client_mac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30100101, session_info_),
  };
  Proto30100101_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto30100101_descriptor_,
      Proto30100101::default_instance_,
      Proto30100101_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30100101, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30100101, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto30100101));
  Proto30400004_descriptor_ = file->message_type(1);
  static const int Proto30400004_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400004, session_info_),
  };
  Proto30400004_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto30400004_descriptor_,
      Proto30400004::default_instance_,
      Proto30400004_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400004, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400004, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto30400004));
  Proto30400101_descriptor_ = file->message_type(2);
  static const int Proto30400101_offsets_[50] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400101, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400101, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400101, label_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400101, vip_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400101, league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400101, fight_force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400101, agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400101, agent_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400101, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400101, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400101, permission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400101, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400101, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400101, career_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400101, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400101, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400101, is_new_script_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400101, enter_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400101, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400101, market_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400101, league_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400101, already_league_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400101, kill_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400101, scene_pk_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400101, wedding_giftbox_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400101, wedding_giftbox_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400101, fresh_free_relive_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400101, used_free_relive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400101, translate_to_enemy_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400101, save_blood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400101, save_magic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400101, collect_chest_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400101, sacredstone_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400101, escort_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400101, protect_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400101, rob_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400101, league_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400101, server_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400101, fb_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400101, src_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400101, login_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400101, login_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400101, sign_trvl_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400101, client_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400101, partner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400101, partner_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400101, wedding_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400101, wedding_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400101, transfer_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400101, cur_server_flag_),
  };
  Proto30400101_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto30400101_descriptor_,
      Proto30400101::default_instance_,
      Proto30400101_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400101, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400101, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto30400101));
  Proto30400102_descriptor_ = file->message_type(3);
  static const int Proto30400102_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400102, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400102, prev_scene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400102, transfer_tick_),
  };
  Proto30400102_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto30400102_descriptor_,
      Proto30400102::default_instance_,
      Proto30400102_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400102, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400102, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto30400102));
  Proto30400103_descriptor_ = file->message_type(4);
  static const int Proto30400103_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400103, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400103, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400103, toward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400103, scene_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400103, space_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400103, prev_scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400103, prev_scene_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400103, prev_space_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400103, speed_basic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400103, scene_history_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400103, prev_town_coord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400103, prev_scene_coord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400103, coord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400103, s_scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400103, s_coord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400103, s_blood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400103, s_magic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400103, s_pk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400103, server_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400103, drop_act_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400103, combine_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400103, prev_force_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400103, is_big_act_time_),
  };
  Proto30400103_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto30400103_descriptor_,
      Proto30400103::default_instance_,
      Proto30400103_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400103, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400103, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto30400103));
  Proto30400104_descriptor_ = file->message_type(5);
  static const int Proto30400104_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400104, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400104, pk_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400104, save_pk_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400104, camp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400104, fight_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400104, fight_tick_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400104, fight_tick_usec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400104, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400104, experience_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400104, blood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400104, magic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400104, skill_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400104, status_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400104, prev_fight_mount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400104, angry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400104, jump_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400104, cur_rama_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400104, rama_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400104, glamour_),
  };
  Proto30400104_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto30400104_descriptor_,
      Proto30400104::default_instance_,
      Proto30400104_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400104, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400104, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto30400104));
  Proto30400105_descriptor_ = file->message_type(6);
  static const int Proto30400105_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400105, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400105, sign_in_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400105, sign_out_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400105, total_online_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400105, day_online_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400105, week_online_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400105, month_online_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400105, year_online_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400105, day_refresh_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400105, week_refresh_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400105, month_refresh_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400105, year_refresh_tick_),
  };
  Proto30400105_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto30400105_descriptor_,
      Proto30400105::default_instance_,
      Proto30400105_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400105, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400105, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto30400105));
  Proto30400201_descriptor_ = file->message_type(7);
  static const int Proto30400201_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400201, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400201, career_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400201, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400201, camp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400201, permission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400201, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400201, force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400201, scene_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400201, space_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400201, prev_scene_),
  };
  Proto30400201_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto30400201_descriptor_,
      Proto30400201::default_instance_,
      Proto30400201_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400201, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400201, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto30400201));
  Proto30310001_descriptor_ = file->message_type(8);
  static const int Proto30310001_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30310001, log_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30310001, log_sub_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30310001, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30310001, nowtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30310001, log_text_),
  };
  Proto30310001_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto30310001_descriptor_,
      Proto30310001::default_instance_,
      Proto30310001_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30310001, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30310001, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto30310001));
  Proto30330001_descriptor_ = file->message_type(9);
  static const int Proto30330001_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30330001, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30330001, data_),
  };
  Proto30330001_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto30330001_descriptor_,
      Proto30330001::default_instance_,
      Proto30330001_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30330001, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30330001, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto30330001));
  Proto30800001_descriptor_ = file->message_type(10);
  static const int Proto30800001_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30800001, role_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30800001, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30800001, recogn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30800001, args_),
  };
  Proto30800001_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto30800001_descriptor_,
      Proto30800001::default_instance_,
      Proto30800001_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30800001, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30800001, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto30800001));
  Proto30200101_descriptor_ = file->message_type(11);
  static const int Proto30200101_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200101, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200101, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200101, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200101, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200101, permission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200101, career_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200101, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200101, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200101, league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200101, league_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200101, label_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200101, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200101, last_sign_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200101, agent_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200101, server_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200101, market_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200101, server_prev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200101, server_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200101, area_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200101, session_info_),
  };
  Proto30200101_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto30200101_descriptor_,
      Proto30200101::default_instance_,
      Proto30200101_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200101, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200101, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto30200101));
  Proto30200103_descriptor_ = file->message_type(12);
  static const int Proto30200103_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200103, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200103, content_),
  };
  Proto30200103_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto30200103_descriptor_,
      Proto30200103::default_instance_,
      Proto30200103_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200103, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200103, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto30200103));
  Proto30200104_descriptor_ = file->message_type(13);
  static const int Proto30200104_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200104, master_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200104, league_id_),
  };
  Proto30200104_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto30200104_descriptor_,
      Proto30200104::default_instance_,
      Proto30200104_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200104, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200104, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto30200104));
  Proto30200105_descriptor_ = file->message_type(14);
  static const int Proto30200105_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200105, master_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200105, league_id_),
  };
  Proto30200105_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto30200105_descriptor_,
      Proto30200105::default_instance_,
      Proto30200105_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200105, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200105, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto30200105));
  Proto30200106_descriptor_ = file->message_type(15);
  static const int Proto30200106_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200106, master_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200106, league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200106, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200106, league_name_),
  };
  Proto30200106_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto30200106_descriptor_,
      Proto30200106::default_instance_,
      Proto30200106_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200106, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200106, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto30200106));
  Proto30200107_descriptor_ = file->message_type(16);
  static const int Proto30200107_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200107, master_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200107, league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200107, role_id_),
  };
  Proto30200107_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto30200107_descriptor_,
      Proto30200107::default_instance_,
      Proto30200107_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200107, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200107, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto30200107));
  Proto30200108_descriptor_ = file->message_type(17);
  static const int Proto30200108_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200108, leader_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200108, team_id_),
  };
  Proto30200108_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto30200108_descriptor_,
      Proto30200108::default_instance_,
      Proto30200108_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200108, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200108, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto30200108));
  Proto30200109_descriptor_ = file->message_type(18);
  static const int Proto30200109_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200109, leader_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200109, team_id_),
  };
  Proto30200109_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto30200109_descriptor_,
      Proto30200109::default_instance_,
      Proto30200109_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200109, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200109, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto30200109));
  Proto30200110_descriptor_ = file->message_type(19);
  static const int Proto30200110_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200110, leader_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200110, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200110, role_id_),
  };
  Proto30200110_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto30200110_descriptor_,
      Proto30200110::default_instance_,
      Proto30200110_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200110, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200110, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto30200110));
  Proto30200111_descriptor_ = file->message_type(20);
  static const int Proto30200111_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200111, leader_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200111, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200111, role_id_),
  };
  Proto30200111_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto30200111_descriptor_,
      Proto30200111::default_instance_,
      Proto30200111_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200111, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200111, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto30200111));
  Proto30200113_descriptor_ = file->message_type(21);
  static const int Proto30200113_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200113, role_id_set_),
  };
  Proto30200113_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto30200113_descriptor_,
      Proto30200113::default_instance_,
      Proto30200113_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200113, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30200113, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto30200113));
  Proto31400106_descriptor_ = file->message_type(22);
  static const int Proto31400106_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400106, lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400106, fight_force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400106, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400106, scene_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400106, space_id_),
  };
  Proto31400106_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto31400106_descriptor_,
      Proto31400106::default_instance_,
      Proto31400106_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400106, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400106, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto31400106));
  Proto31400107_descriptor_ = file->message_type(23);
  static const int Proto31400107_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400107, lvl_),
  };
  Proto31400107_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto31400107_descriptor_,
      Proto31400107::default_instance_,
      Proto31400107_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400107, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400107, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto31400107));
  Proto31400101_descriptor_ = file->message_type(24);
  static const int Proto31400101_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400101, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400101, prev_scene_),
  };
  Proto31400101_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto31400101_descriptor_,
      Proto31400101::default_instance_,
      Proto31400101_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400101, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400101, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto31400101));
  Proto31400102_descriptor_ = file->message_type(25);
  static const int Proto31400102_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400102, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400102, prev_scene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400102, transfer_tick_),
  };
  Proto31400102_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto31400102_descriptor_,
      Proto31400102::default_instance_,
      Proto31400102_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400102, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400102, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto31400102));
  Proto31400103_descriptor_ = file->message_type(26);
  static const int Proto31400103_offsets_[35] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400103, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400103, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400103, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400103, agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400103, agent_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400103, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400103, career_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400103, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400103, camp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400103, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400103, force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400103, is_death_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400103, death_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400103, fight_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400103, draw_days_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400103, draw_gift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400103, create_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400103, scene_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400103, day_reset_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400103, draw_vips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400103, league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400103, login_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400103, open_gift_close_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400103, login_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400103, partner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400103, partner_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400103, wedding_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400103, wedding_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400103, wedding_self_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400103, wedding_side_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400103, combine_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400103, transfer_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400103, drop_act_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400103, rand_use_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400103, is_big_act_time_),
  };
  Proto31400103_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto31400103_descriptor_,
      Proto31400103::default_instance_,
      Proto31400103_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400103, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400103, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto31400103));
  Proto31400104_descriptor_ = file->message_type(27);
  static const int Proto31400104_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400104, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400104, package_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400104, lottery_),
  };
  Proto31400104_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto31400104_descriptor_,
      Proto31400104::default_instance_,
      Proto31400104_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400104, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400104, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto31400104));
  Proto31400105_descriptor_ = file->message_type(28);
  static const int Proto31400105_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400105, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400105, sign_in_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400105, sign_out_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400105, total_online_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400105, day_online_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400105, week_online_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400105, month_online_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400105, year_online_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400105, day_refresh_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400105, week_refresh_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400105, month_refresh_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400105, year_refresh_tick_),
  };
  Proto31400105_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto31400105_descriptor_,
      Proto31400105::default_instance_,
      Proto31400105_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400105, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400105, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto31400105));
  Proto31400001_descriptor_ = file->message_type(29);
  static const int Proto31400001_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400001, gate_sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400001, login_tick_),
  };
  Proto31400001_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto31400001_descriptor_,
      Proto31400001::default_instance_,
      Proto31400001_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400001, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400001, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto31400001));
  Proto31400011_descriptor_ = file->message_type(30);
  static const int Proto31400011_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400011, add_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400011, serial_obj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400011, is_notify_),
  };
  Proto31400011_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto31400011_descriptor_,
      Proto31400011::default_instance_,
      Proto31400011_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400011, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400011, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto31400011));
  Proto31400012_descriptor_ = file->message_type(31);
  static const int Proto31400012_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400012, item_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400012, serial_obj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400012, source_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400012, operate_result_),
  };
  Proto31400012_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto31400012_descriptor_,
      Proto31400012::default_instance_,
      Proto31400012_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400012, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400012, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto31400012));
  Proto31400221_descriptor_ = file->message_type(32);
  static const int Proto31400221_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400221, money_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400221, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400221, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400221, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400221, item_obj_),
  };
  Proto31400221_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto31400221_descriptor_,
      Proto31400221::default_instance_,
      Proto31400221_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400221, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400221, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto31400221));
  Proto31400222_descriptor_ = file->message_type(33);
  static const int Proto31400222_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400222, market_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400222, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400222, money_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400222, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400222, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400222, operate_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400222, item_obj_),
  };
  Proto31400222_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto31400222_descriptor_,
      Proto31400222::default_instance_,
      Proto31400222_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400222, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400222, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto31400222));
  Proto31400223_descriptor_ = file->message_type(34);
  static const int Proto31400223_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400223, market_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400223, money_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400223, money_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400223, send_brocast_),
  };
  Proto31400223_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto31400223_descriptor_,
      Proto31400223::default_instance_,
      Proto31400223_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400223, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400223, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto31400223));
  Proto30400013_descriptor_ = file->message_type(35);
  static const int Proto30400013_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400013, add_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400013, serial_obj_),
  };
  Proto30400013_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto30400013_descriptor_,
      Proto30400013::default_instance_,
      Proto30400013_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400013, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400013, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto30400013));
  Proto31400014_descriptor_ = file->message_type(36);
  static const int Proto31400014_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400014, sort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400014, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400014, monster_set_),
  };
  Proto31400014_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto31400014_descriptor_,
      Proto31400014::default_instance_,
      Proto31400014_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400014, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400014, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto31400014));
  Proto31400015_descriptor_ = file->message_type(37);
  static const int Proto31400015_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400015, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400015, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400015, bind_),
  };
  Proto31400015_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto31400015_descriptor_,
      Proto31400015::default_instance_,
      Proto31400015_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400015, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400015, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto31400015));
  Proto30400011_descriptor_ = file->message_type(38);
  static const int Proto30400011_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400011, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400011, prop_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400011, enter_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400011, unnotify_),
  };
  Proto30400011_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto30400011_descriptor_,
      Proto30400011::default_instance_,
      Proto30400011_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400011, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400011, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto30400011));
  Proto31400016_descriptor_ = file->message_type(39);
  static const int Proto31400016_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400016, death_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400016, inc_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400016, attackor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400016, mount_flag_),
  };
  Proto31400016_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto31400016_descriptor_,
      Proto31400016::default_instance_,
      Proto31400016_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400016, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400016, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto31400016));
  Proto30400401_descriptor_ = file->message_type(40);
  static const int Proto30400401_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400401, beast_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400401, beast_sort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400401, beast_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400401, beast_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400401, action_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400401, ability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400401, growth_lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400401, notify_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400401, skill_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400401, beast_force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400401, enter_flag_),
  };
  Proto30400401_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto30400401_descriptor_,
      Proto30400401::default_instance_,
      Proto30400401_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400401, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400401, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto30400401));
  Proto30400402_descriptor_ = file->message_type(41);
  static const int Proto30400402_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400402, beast_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400402, notify_flag_),
  };
  Proto30400402_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto30400402_descriptor_,
      Proto30400402::default_instance_,
      Proto30400402_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400402, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400402, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto30400402));
  Proto30400405_descriptor_ = file->message_type(42);
  static const int Proto30400405_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400405, beast_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400405, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400405, prop_set_),
  };
  Proto30400405_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto30400405_descriptor_,
      Proto30400405::default_instance_,
      Proto30400405_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400405, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400405, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto30400405));
  Proto30400406_descriptor_ = file->message_type(43);
  static const int Proto30400406_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400406, mount_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400406, on_mount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400406, mount_shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400406, notify_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400406, skill_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400406, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400406, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400406, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400406, act_shape_),
  };
  Proto30400406_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto30400406_descriptor_,
      Proto30400406::default_instance_,
      Proto30400406_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400406, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400406, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto30400406));
  Proto31400108_descriptor_ = file->message_type(44);
  static const int Proto31400108_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400108, task_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400108, submited_task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400108, is_first_rename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400108, novice_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400108, latest_main_task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400108, uiopen_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400108, routine_refresh_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400108, routine_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400108, routine_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400108, routine_consume_history_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400108, is_finish_all_routine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400108, is_routine_task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400108, total_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400108, is_second_routine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400108, lcontri_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400108, lcontri_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400108, open_ui_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400108, trial_fresh_tck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400108, used_trial_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400108, trial_task_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400108, ui_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400108, finish_task_),
  };
  Proto31400108_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto31400108_descriptor_,
      Proto31400108::default_instance_,
      Proto31400108_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400108, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400108, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto31400108));
  Proto31400109_descriptor_ = file->message_type(45);
  static const int Proto31400109_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400109, mount_set_),
  };
  Proto31400109_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto31400109_descriptor_,
      Proto31400109::default_instance_,
      Proto31400109_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400109, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400109, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto31400109));
  Proto31400110_descriptor_ = file->message_type(46);
  static const int Proto31400110_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400110, pack_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400110, beast_skill_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400110, cur_beast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400110, last_beast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400110, cur_sort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400110, last_sort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400110, save_beast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400110, skill_book_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400110, skill_book_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400110, lucky_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400110, is_open_skill_),
  };
  Proto31400110_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto31400110_descriptor_,
      Proto31400110::default_instance_,
      Proto31400110_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400110, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400110, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto31400110));
  Proto31400111_descriptor_ = file->message_type(47);
  static const int Proto31400111_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400111, is_open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400111, practice_lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400111, dragon_lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400111, add_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400111, finish_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400111, cool_all_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400111, anima_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400111, light_lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400111, light_degree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400111, open_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400111, n_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400111, s_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400111, sacrifice_notify_),
  };
  Proto31400111_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto31400111_descriptor_,
      Proto31400111::default_instance_,
      Proto31400111_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400111, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400111, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto31400111));
  Proto30400017_descriptor_ = file->message_type(48);
  static const int Proto30400017_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400017, fighter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400017, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400017, remove_skill_),
  };
  Proto30400017_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto30400017_descriptor_,
      Proto30400017::default_instance_,
      Proto30400017_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400017, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto30400017, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto30400017));
  Proto31400301_descriptor_ = file->message_type(49);
  static const int Proto31400301_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400301, donate_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400301, donate_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400301, send_flag_),
  };
  Proto31400301_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto31400301_descriptor_,
      Proto31400301::default_instance_,
      Proto31400301_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400301, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto31400301, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto31400301));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoInner001_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto30100101_descriptor_, &Proto30100101::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto30400004_descriptor_, &Proto30400004::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto30400101_descriptor_, &Proto30400101::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto30400102_descriptor_, &Proto30400102::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto30400103_descriptor_, &Proto30400103::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto30400104_descriptor_, &Proto30400104::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto30400105_descriptor_, &Proto30400105::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto30400201_descriptor_, &Proto30400201::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto30310001_descriptor_, &Proto30310001::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto30330001_descriptor_, &Proto30330001::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto30800001_descriptor_, &Proto30800001::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto30200101_descriptor_, &Proto30200101::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto30200103_descriptor_, &Proto30200103::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto30200104_descriptor_, &Proto30200104::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto30200105_descriptor_, &Proto30200105::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto30200106_descriptor_, &Proto30200106::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto30200107_descriptor_, &Proto30200107::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto30200108_descriptor_, &Proto30200108::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto30200109_descriptor_, &Proto30200109::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto30200110_descriptor_, &Proto30200110::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto30200111_descriptor_, &Proto30200111::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto30200113_descriptor_, &Proto30200113::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto31400106_descriptor_, &Proto31400106::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto31400107_descriptor_, &Proto31400107::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto31400101_descriptor_, &Proto31400101::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto31400102_descriptor_, &Proto31400102::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto31400103_descriptor_, &Proto31400103::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto31400104_descriptor_, &Proto31400104::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto31400105_descriptor_, &Proto31400105::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto31400001_descriptor_, &Proto31400001::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto31400011_descriptor_, &Proto31400011::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto31400012_descriptor_, &Proto31400012::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto31400221_descriptor_, &Proto31400221::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto31400222_descriptor_, &Proto31400222::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto31400223_descriptor_, &Proto31400223::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto30400013_descriptor_, &Proto30400013::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto31400014_descriptor_, &Proto31400014::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto31400015_descriptor_, &Proto31400015::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto30400011_descriptor_, &Proto30400011::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto31400016_descriptor_, &Proto31400016::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto30400401_descriptor_, &Proto30400401::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto30400402_descriptor_, &Proto30400402::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto30400405_descriptor_, &Proto30400405::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto30400406_descriptor_, &Proto30400406::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto31400108_descriptor_, &Proto31400108::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto31400109_descriptor_, &Proto31400109::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto31400110_descriptor_, &Proto31400110::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto31400111_descriptor_, &Proto31400111::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto30400017_descriptor_, &Proto30400017::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto31400301_descriptor_, &Proto31400301::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoInner001_2eproto() {
  delete Proto30100101::default_instance_;
  delete Proto30100101_reflection_;
  delete Proto30400004::default_instance_;
  delete Proto30400004_reflection_;
  delete Proto30400101::default_instance_;
  delete Proto30400101_reflection_;
  delete Proto30400102::default_instance_;
  delete Proto30400102_reflection_;
  delete Proto30400103::default_instance_;
  delete Proto30400103_reflection_;
  delete Proto30400104::default_instance_;
  delete Proto30400104_reflection_;
  delete Proto30400105::default_instance_;
  delete Proto30400105_reflection_;
  delete Proto30400201::default_instance_;
  delete Proto30400201_reflection_;
  delete Proto30310001::default_instance_;
  delete Proto30310001_reflection_;
  delete Proto30330001::default_instance_;
  delete Proto30330001_reflection_;
  delete Proto30800001::default_instance_;
  delete Proto30800001_reflection_;
  delete Proto30200101::default_instance_;
  delete Proto30200101_reflection_;
  delete Proto30200103::default_instance_;
  delete Proto30200103_reflection_;
  delete Proto30200104::default_instance_;
  delete Proto30200104_reflection_;
  delete Proto30200105::default_instance_;
  delete Proto30200105_reflection_;
  delete Proto30200106::default_instance_;
  delete Proto30200106_reflection_;
  delete Proto30200107::default_instance_;
  delete Proto30200107_reflection_;
  delete Proto30200108::default_instance_;
  delete Proto30200108_reflection_;
  delete Proto30200109::default_instance_;
  delete Proto30200109_reflection_;
  delete Proto30200110::default_instance_;
  delete Proto30200110_reflection_;
  delete Proto30200111::default_instance_;
  delete Proto30200111_reflection_;
  delete Proto30200113::default_instance_;
  delete Proto30200113_reflection_;
  delete Proto31400106::default_instance_;
  delete Proto31400106_reflection_;
  delete Proto31400107::default_instance_;
  delete Proto31400107_reflection_;
  delete Proto31400101::default_instance_;
  delete Proto31400101_reflection_;
  delete Proto31400102::default_instance_;
  delete Proto31400102_reflection_;
  delete Proto31400103::default_instance_;
  delete Proto31400103_reflection_;
  delete Proto31400104::default_instance_;
  delete Proto31400104_reflection_;
  delete Proto31400105::default_instance_;
  delete Proto31400105_reflection_;
  delete Proto31400001::default_instance_;
  delete Proto31400001_reflection_;
  delete Proto31400011::default_instance_;
  delete Proto31400011_reflection_;
  delete Proto31400012::default_instance_;
  delete Proto31400012_reflection_;
  delete Proto31400221::default_instance_;
  delete Proto31400221_reflection_;
  delete Proto31400222::default_instance_;
  delete Proto31400222_reflection_;
  delete Proto31400223::default_instance_;
  delete Proto31400223_reflection_;
  delete Proto30400013::default_instance_;
  delete Proto30400013_reflection_;
  delete Proto31400014::default_instance_;
  delete Proto31400014_reflection_;
  delete Proto31400015::default_instance_;
  delete Proto31400015_reflection_;
  delete Proto30400011::default_instance_;
  delete Proto30400011_reflection_;
  delete Proto31400016::default_instance_;
  delete Proto31400016_reflection_;
  delete Proto30400401::default_instance_;
  delete Proto30400401_reflection_;
  delete Proto30400402::default_instance_;
  delete Proto30400402_reflection_;
  delete Proto30400405::default_instance_;
  delete Proto30400405_reflection_;
  delete Proto30400406::default_instance_;
  delete Proto30400406_reflection_;
  delete Proto31400108::default_instance_;
  delete Proto31400108_reflection_;
  delete Proto31400109::default_instance_;
  delete Proto31400109_reflection_;
  delete Proto31400110::default_instance_;
  delete Proto31400110_reflection_;
  delete Proto31400111::default_instance_;
  delete Proto31400111_reflection_;
  delete Proto30400017::default_instance_;
  delete Proto30400017_reflection_;
  delete Proto31400301::default_instance_;
  delete Proto31400301_reflection_;
}

void protobuf_AddDesc_ProtoInner001_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_ProtoPublic_2eproto();
  ::protobuf_AddDesc_ProtoInnerPublic_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023ProtoInner001.proto\032\021ProtoPublic.proto"
    "\032\026ProtoInnerPublic.proto\"}\n\rProto3010010"
    "1\022\020\n\010scene_id\030\001 \001(\005\022\016\n\006uc_sid\030\002 \001(\t\022\021\n\tc"
    "lient_ip\030\003 \001(\t\022\022\n\nclient_mac\030\004 \001(\t\022#\n\014se"
    "ssion_info\030\005 \001(\0132\r.ProtoSession\"4\n\rProto"
    "30400004\022#\n\014session_info\030\001 \001(\0132\r.ProtoSe"
    "ssion\"\250\010\n\rProto30400101\022\017\n\007role_id\030\001 \001(\003"
    "\022\017\n\007team_id\030\002 \001(\005\022\020\n\010label_id\030\003 \001(\005\022\020\n\010v"
    "ip_type\030\004 \001(\005\022\021\n\tleague_id\030\005 \001(\003\022\023\n\013figh"
    "t_force\030\006 \001(\005\022\r\n\005agent\030\007 \001(\t\022\022\n\nagent_co"
    "de\030\010 \001(\005\022\017\n\007account\030\t \001(\t\022\017\n\007session\030\n \001"
    "(\t\022\022\n\npermission\030\013 \001(\005\022\014\n\004name\030\014 \001(\t\022\013\n\003"
    "sex\030\r \001(\005\022\016\n\006career\030\016 \001(\005\022\r\n\005level\030\017 \001(\005"
    "\022\020\n\010scene_id\030\020 \001(\005\022\025\n\ris_new_script\030\021 \001("
    "\005\022\023\n\013enter_error\030\022 \001(\005\022\020\n\010platform\030\023 \001(\t"
    "\022\023\n\013market_code\030\024 \001(\005\022\023\n\013league_name\030\025 \001"
    "(\t\022\026\n\016already_league\030\026 \003(\005\022\020\n\010kill_set\030\027"
    " \003(\005\022\026\n\016scene_pk_state\030\030 \003(\005\022\034\n\024wedding_"
    "giftbox_tick\030\031 \001(\005\022\035\n\025wedding_giftbox_ti"
    "mes\030\032 \001(\005\022\036\n\026fresh_free_relive_tick\030\033 \001("
    "\005\022\030\n\020used_free_relive\030\034 \001(\005\022 \n\030translate"
    "_to_enemy_times\030\035 \001(\005\022\022\n\nsave_blood\030\036 \001("
    "\005\022\022\n\nsave_magic\030\037 \001(\005\022\034\n\024collect_chest_a"
    "mount\030  \001(\005\022\027\n\017sacredstone_exp\030! \001(\005\022\024\n\014"
    "escort_times\030\" \001(\005\022\025\n\rprotect_times\030# \001("
    "\005\022\021\n\trob_times\030$ \001(\005\022\022\n\nleague_pos\030% \001(\005"
    "\022\023\n\013server_flag\030& \001(\t\022\017\n\007fb_flag\030\' \001(\005\022\020"
    "\n\010src_name\030( \001(\t\022\021\n\tlogin_day\030) \001(\003\022\022\n\nl"
    "ogin_tick\030* \001(\003\022\026\n\016sign_trvl_team\030+ \001(\005\022"
    "\023\n\013client_type\030, \001(\005\022\022\n\npartner_id\030- \001(\003"
    "\022\024\n\014partner_name\030. \001(\t\022\022\n\nwedding_id\030/ \001"
    "(\003\022\024\n\014wedding_type\0300 \001(\005\022\025\n\rtransfer_tic"
    "k\0301 \001(\003\022\027\n\017cur_server_flag\0302 \001(\t\"K\n\rProt"
    "o30400102\022\017\n\007role_id\030\001 \001(\003\022\022\n\nprev_scene"
    "\030\002 \001(\005\022\025\n\rtransfer_tick\030\003 \001(\003\"\243\004\n\rProto3"
    "0400103\022\017\n\007role_id\030\001 \001(\003\022\020\n\010scene_id\030\002 \001"
    "(\005\022\016\n\006toward\030\003 \001(\005\022\022\n\nscene_mode\030\004 \001(\005\022\020"
    "\n\010space_id\030\005 \001(\005\022\025\n\rprev_scene_id\030\006 \001(\005\022"
    "\027\n\017prev_scene_mode\030\007 \001(\005\022\025\n\rprev_space_i"
    "d\030\010 \001(\005\022\023\n\013speed_basic\030\t \001(\002\022\025\n\rscene_hi"
    "story\030\n \003(\005\022$\n\017prev_town_coord\030\013 \001(\0132\013.P"
    "rotoCoord\022%\n\020prev_scene_coord\030\014 \001(\0132\013.Pr"
    "otoCoord\022\032\n\005coord\030\r \001(\0132\013.ProtoCoord\022\022\n\n"
    "s_scene_id\030\016 \001(\005\022\034\n\007s_coord\030\017 \001(\0132\013.Prot"
    "oCoord\022\017\n\007s_blood\030\020 \001(\005\022\017\n\007s_magic\030\021 \001(\005"
    "\022\014\n\004s_pk\030\022 \001(\005\022\023\n\013server_tick\030\023 \001(\003\022\020\n\010d"
    "rop_act\030\024 \001(\005\022\024\n\014combine_tick\030\025 \001(\003\022%\n\016p"
    "rev_force_map\030\026 \001(\0132\r.ProtoPairMap\022\027\n\017is"
    "_big_act_time\030\027 \001(\005\"\245\003\n\rProto30400104\022\017\n"
    "\007role_id\030\001 \001(\003\022\020\n\010pk_state\030\002 \001(\005\022\025\n\rsave"
    "_pk_state\030\003 \001(\005\022\017\n\007camp_id\030\004 \001(\005\022\023\n\013figh"
    "t_state\030\005 \001(\005\022\026\n\016fight_tick_sec\030\006 \001(\003\022\027\n"
    "\017fight_tick_usec\030\007 \001(\003\022\r\n\005level\030\010 \001(\005\022\022\n"
    "\nexperience\030\t \001(\003\022\r\n\005blood\030\n \001(\005\022\r\n\005magi"
    "c\030\013 \001(\005\022\037\n\nskill_list\030\014 \003(\0132\013.ProtoSkill"
    "\022%\n\013status_list\030\r \003(\0132\020.ProtoSyncStatus\022"
    "\030\n\020prev_fight_mount\030\016 \001(\005\022\r\n\005angry\030\017 \001(\005"
    "\022\014\n\004jump\030\020 \001(\005\022\020\n\010cur_rama\030\021 \001(\005\022 \n\trama"
    "_list\030\022 \003(\0132\r.ProtoPairObj\022\017\n\007glamour\030\023 "
    "\001(\005\"\274\002\n\rProto30400105\022\017\n\007role_id\030\001 \001(\003\022\024"
    "\n\014sign_in_tick\030\002 \001(\005\022\025\n\rsign_out_tick\030\003 "
    "\001(\005\022\031\n\021total_online_tick\030\004 \001(\003\022\027\n\017day_on"
    "line_tick\030\005 \001(\003\022\030\n\020week_online_tick\030\006 \001("
    "\003\022\031\n\021month_online_tick\030\007 \001(\003\022\030\n\020year_onl"
    "ine_tick\030\010 \001(\003\022\030\n\020day_refresh_tick\030\t \001(\005"
    "\022\031\n\021week_refresh_tick\030\n \001(\005\022\032\n\022month_ref"
    "resh_tick\030\013 \001(\005\022\031\n\021year_refresh_tick\030\014 \001"
    "(\005\"\277\001\n\rProto30400201\022\017\n\007role_id\030\001 \001(\003\022\016\n"
    "\006career\030\002 \001(\005\022\020\n\010scene_id\030\003 \001(\005\022\017\n\007camp_"
    "id\030\004 \001(\005\022\022\n\npermission\030\005 \001(\005\022\r\n\005level\030\006 "
    "\001(\005\022\r\n\005force\030\007 \001(\005\022\022\n\nscene_mode\030\010 \001(\005\022\020"
    "\n\010space_id\030\t \001(\005\022\022\n\nprev_scene\030\n \001(\005\"g\n\r"
    "Proto30310001\022\020\n\010log_type\030\001 \001(\005\022\024\n\014log_s"
    "ub_type\030\002 \001(\005\022\013\n\003pid\030\003 \001(\005\022\017\n\007nowtime\030\004 "
    "\001(\005\022\020\n\010log_text\030\005 \001(\t\"1\n\rProto30330001\022\022"
    "\n\ntable_name\030\001 \001(\t\022\014\n\004data\030\002 \001(\014\"Q\n\rProt"
    "o30800001\022\021\n\trole_size\030\001 \001(\005\022\017\n\007role_id\030"
    "\002 \003(\003\022\016\n\006recogn\030\003 \001(\005\022\014\n\004args\030\004 \003(\005\"\215\003\n\r"
    "Proto30200101\022\017\n\007role_id\030\001 \001(\003\022\014\n\004name\030\002"
    " \001(\t\022\r\n\005level\030\003 \001(\005\022\013\n\003sex\030\004 \001(\005\022\022\n\nperm"
    "ission\030\005 \001(\005\022\016\n\006career\030\006 \001(\005\022\020\n\010scene_id"
    "\030\007 \001(\005\022\013\n\003vip\030\010 \001(\005\022\021\n\tleague_id\030\t \001(\003\022\023"
    "\n\013league_name\030\n \001(\t\022\020\n\010label_id\030\013 \001(\005\022\017\n"
    "\007team_id\030\014 \001(\005\022\025\n\rlast_sign_out\030\r \001(\005\022\022\n"
    "\nagent_code\030\016 \001(\005\022\023\n\013server_flag\030\017 \001(\t\022\023"
    "\n\013market_code\030\020 \001(\005\022\023\n\013server_prev\030\021 \001(\t"
    "\022\023\n\013server_name\030\022 \001(\t\022\017\n\007area_id\030\023 \001(\005\022#"
    "\n\014session_info\030\024 \001(\0132\r.ProtoSession\"1\n\rP"
    "roto30200103\022\017\n\007role_id\030\001 \001(\003\022\017\n\007content"
    "\030\002 \001(\t\"5\n\rProto30200104\022\021\n\tmaster_id\030\001 \001"
    "(\003\022\021\n\tleague_id\030\002 \001(\003\"5\n\rProto30200105\022\021"
    "\n\tmaster_id\030\001 \001(\003\022\021\n\tleague_id\030\002 \001(\003\"[\n\r"
    "Proto30200106\022\021\n\tmaster_id\030\001 \001(\003\022\021\n\tleag"
    "ue_id\030\002 \001(\003\022\017\n\007role_id\030\003 \001(\003\022\023\n\013league_n"
    "ame\030\004 \001(\t\"F\n\rProto30200107\022\021\n\tmaster_id\030"
    "\001 \001(\003\022\021\n\tleague_id\030\002 \001(\003\022\017\n\007role_id\030\003 \001("
    "\003\"3\n\rProto30200108\022\021\n\tleader_id\030\001 \001(\003\022\017\n"
    "\007team_id\030\002 \001(\005\"3\n\rProto30200109\022\021\n\tleade"
    "r_id\030\001 \001(\003\022\017\n\007team_id\030\002 \001(\005\"D\n\rProto3020"
    "0110\022\021\n\tleader_id\030\001 \001(\003\022\017\n\007team_id\030\002 \001(\005"
    "\022\017\n\007role_id\030\003 \001(\003\"D\n\rProto30200111\022\021\n\tle"
    "ader_id\030\001 \001(\003\022\017\n\007team_id\030\002 \001(\005\022\017\n\007role_i"
    "d\030\003 \001(\003\"$\n\rProto30200113\022\023\n\013role_id_set\030"
    "\001 \003(\003\"i\n\rProto31400106\022\013\n\003lvl\030\001 \001(\005\022\023\n\013f"
    "ight_force\030\002 \001(\005\022\020\n\010scene_id\030\003 \001(\005\022\022\n\nsc"
    "ene_mode\030\004 \001(\005\022\020\n\010space_id\030\005 \001(\005\"\034\n\rProt"
    "o31400107\022\013\n\003lvl\030\001 \001(\005\"5\n\rProto31400101\022"
    "\020\n\010scene_id\030\001 \001(\005\022\022\n\nprev_scene\030\002 \001(\005\"K\n"
    "\rProto31400102\022\017\n\007role_id\030\001 \001(\003\022\022\n\nprev_"
    "scene\030\002 \001(\005\022\025\n\rtransfer_tick\030\003 \001(\003\"\314\005\n\rP"
    "roto31400103\022\017\n\007role_id\030\001 \001(\003\022\021\n\trole_na"
    "me\030\002 \001(\t\022\017\n\007account\030\003 \001(\t\022\r\n\005agent\030\004 \001(\t"
    "\022\022\n\nagent_code\030\005 \001(\005\022\013\n\003sex\030\006 \001(\005\022\016\n\006car"
    "eer\030\007 \001(\005\022\020\n\010scene_id\030\010 \001(\005\022\017\n\007camp_id\030\t"
    " \001(\005\022\r\n\005level\030\n \001(\005\022\r\n\005force\030\013 \001(\005\022\020\n\010is"
    "_death\030\014 \001(\010\022\022\n\ndeath_tick\030\r \001(\005\022\023\n\013figh"
    "t_state\030\016 \001(\005\022\021\n\tdraw_days\030\017 \003(\005\022\021\n\tdraw"
    "_gift\030\020 \003(\005\022\023\n\013create_tick\030\021 \001(\003\022\022\n\nscen"
    "e_mode\030\022 \001(\005\022\026\n\016day_reset_tick\030\023 \001(\005\022\021\n\t"
    "draw_vips\030\024 \003(\005\022\021\n\tleague_id\030\025 \001(\003\022\021\n\tlo"
    "gin_day\030\026 \001(\003\022\027\n\017open_gift_close\030\027 \001(\005\022\022"
    "\n\nlogin_tick\030\030 \001(\003\022\022\n\npartner_id\030\031 \001(\003\022\024"
    "\n\014partner_name\030\032 \001(\t\022\022\n\nwedding_id\030\033 \001(\003"
    "\022\024\n\014wedding_type\030\034 \001(\005\022\024\n\014wedding_self\030\035"
    " \003(\005\022\024\n\014wedding_side\030\036 \003(\005\022\024\n\014combine_ti"
    "ck\030\037 \001(\003\022\025\n\rtransfer_tick\030  \001(\003\022\020\n\010drop_"
    "act\030! \001(\005\022%\n\016rand_use_times\030\" \001(\0132\r.Prot"
    "oPairMap\022\027\n\017is_big_act_time\030# \001(\005\"g\n\rPro"
    "to31400104\022\017\n\007role_id\030\001 \001(\003\022%\n\013package_s"
    "et\030\002 \001(\0132\020.ProtoPackageSet\022\036\n\007lottery\030\003 "
    "\003(\0132\r.ProtoLottery\"\274\002\n\rProto31400105\022\017\n\007"
    "role_id\030\001 \001(\003\022\024\n\014sign_in_tick\030\002 \001(\003\022\025\n\rs"
    "ign_out_tick\030\003 \001(\003\022\031\n\021total_online_tick\030"
    "\004 \001(\005\022\027\n\017day_online_tick\030\005 \001(\005\022\030\n\020week_o"
    "nline_tick\030\006 \001(\005\022\031\n\021month_online_tick\030\007 "
    "\001(\005\022\030\n\020year_online_tick\030\010 \001(\005\022\030\n\020day_ref"
    "resh_tick\030\t \001(\003\022\031\n\021week_refresh_tick\030\n \001"
    "(\003\022\032\n\022month_refresh_tick\030\013 \001(\003\022\031\n\021year_r"
    "efresh_tick\030\014 \001(\003\"5\n\rProto31400001\022\020\n\010ga"
    "te_sid\030\001 \001(\005\022\022\n\nlogin_tick\030\002 \001(\003\"g\n\rProt"
    "o31400011\022\036\n\tadd_money\030\001 \001(\0132\013.ProtoMone"
    "y\022#\n\nserial_obj\030\002 \001(\0132\017.ProtoSerialObj\022\021"
    "\n\tis_notify\030\003 \001(\005\"\177\n\rProto31400012\022\034\n\010it"
    "em_set\030\001 \001(\0132\n.ProtoItem\022#\n\nserial_obj\030\002"
    " \001(\0132\017.ProtoSerialObj\022\023\n\013source_type\030\003 \001"
    "(\005\022\026\n\016operate_result\030\004 \001(\005\"o\n\rProto31400"
    "221\022\022\n\nmoney_type\030\001 \001(\005\022\r\n\005price\030\002 \001(\005\022\r"
    "\n\005index\030\003 \001(\005\022\016\n\006amount\030\004 \001(\005\022\034\n\010item_ob"
    "j\030\005 \001(\0132\n.ProtoItem\"\237\001\n\rProto31400222\022\024\n"
    "\014market_index\030\001 \001(\005\022\017\n\007role_id\030\002 \001(\003\022\022\n\n"
    "money_type\030\003 \001(\005\022\r\n\005price\030\004 \001(\005\022\016\n\006amoun"
    "t\030\005 \001(\005\022\026\n\016operate_result\030\006 \001(\005\022\034\n\010item_"
    "obj\030\007 \001(\0132\n.ProtoItem\"e\n\rProto31400223\022\024"
    "\n\014market_index\030\001 \001(\005\022\022\n\nmoney_type\030\002 \001(\005"
    "\022\024\n\014money_amount\030\003 \001(\005\022\024\n\014send_brocast\030\004"
    " \001(\005\"E\n\rProto30400013\022\017\n\007add_exp\030\001 \001(\005\022#"
    "\n\nserial_obj\030\002 \001(\0132\017.ProtoSerialObj\"N\n\rP"
    "roto31400014\022\014\n\004sort\030\001 \001(\005\022\013\n\003num\030\002 \001(\005\022"
    "\"\n\013monster_set\030\003 \003(\0132\r.ProtoMonster\";\n\rP"
    "roto31400015\022\017\n\007item_id\030\001 \001(\005\022\013\n\003num\030\002 \001"
    "(\005\022\014\n\004bind\030\003 \001(\005\"f\n\rProto30400011\022\016\n\006off"
    "set\030\001 \001(\005\022\037\n\010prop_set\030\002 \003(\0132\r.ProtoPairO"
    "bj\022\022\n\nenter_type\030\003 \001(\005\022\020\n\010unnotify\030\004 \001(\005"
    "\"Z\n\rProto31400016\022\022\n\ndeath_flag\030\001 \001(\005\022\017\n"
    "\007inc_val\030\002 \001(\003\022\020\n\010attackor\030\003 \001(\003\022\022\n\nmoun"
    "t_flag\030\004 \001(\005\"\371\001\n\rProto30400401\022\020\n\010beast_"
    "id\030\001 \001(\003\022\022\n\nbeast_sort\030\002 \001(\005\022\023\n\013beast_le"
    "vel\030\003 \001(\005\022\022\n\nbeast_name\030\004 \001(\t\022\024\n\014action_"
    "state\030\005 \001(\005\022\017\n\007ability\030\006 \001(\005\022\022\n\ngrowth_l"
    "vl\030\007 \001(\005\022\023\n\013notify_flag\030\010 \001(\005\022 \n\tskill_s"
    "et\030\t \003(\0132\r.ProtoPairObj\022\023\n\013beast_force\030\n"
    " \001(\005\022\022\n\nenter_flag\030\013 \001(\005\"6\n\rProto3040040"
    "2\022\020\n\010beast_id\030\001 \001(\003\022\023\n\013notify_flag\030\002 \001(\005"
    "\"R\n\rProto30400405\022\020\n\010beast_id\030\001 \001(\003\022\016\n\006o"
    "ffset\030\002 \001(\005\022\037\n\010prop_set\030\003 \003(\0132\r.ProtoPai"
    "rObj\"\302\001\n\rProto30400406\022\023\n\013mount_grade\030\001 "
    "\001(\005\022\020\n\010on_mount\030\002 \001(\005\022\023\n\013mount_shape\030\003 \001"
    "(\005\022\023\n\013notify_flag\030\004 \001(\005\022 \n\tskill_set\030\005 \003"
    "(\0132\r.ProtoPairObj\022\014\n\004type\030\006 \001(\005\022\017\n\007opera"
    "te\030\007 \001(\005\022\014\n\004open\030\010 \001(\005\022\021\n\tact_shape\030\t \001("
    "\005\"\262\004\n\rProto31400108\022&\n\ttask_list\030\001 \003(\0132\023"
    ".ProtoInnerTaskInfo\022\025\n\rsubmited_task\030\002 \003"
    "(\005\022\027\n\017is_first_rename\030\003 \001(\005\022\023\n\013novice_st"
    "ep\030\004 \001(\005\022\030\n\020latest_main_task\030\005 \001(\005\022\023\n\013ui"
    "open_step\030\006 \003(\005\022\034\n\024routine_refresh_tick\030"
    "\007 \001(\005\022\024\n\014routine_list\030\010 \003(\005\022\025\n\rroutine_i"
    "ndex\030\t \003(\005\022\037\n\027routine_consume_history\030\n "
    "\003(\005\022\035\n\025is_finish_all_routine\030\013 \003(\005\022\027\n\017is"
    "_routine_task\030\014 \003(\005\022\021\n\ttotal_num\030\r \003(\005\022\031"
    "\n\021is_second_routine\030\016 \003(\005\022\024\n\014lcontri_tic"
    "k\030\017 \001(\005\022\023\n\013lcontri_day\030\020 \001(\005\022\024\n\014open_ui_"
    "list\030\021 \003(\t\022\027\n\017trial_fresh_tck\030\022 \001(\005\022\030\n\020u"
    "sed_trial_times\030\023 \001(\005\022\026\n\016trial_task_set\030"
    "\024 \003(\005\022\022\n\nui_version\030\025 \001(\005\022\023\n\013finish_task"
    "\030\026 \003(\005\"/\n\rProto31400109\022\036\n\tmount_set\030\001 \003"
    "(\0132\013.ProtoMount\"\204\002\n\rProto31400110\022\021\n\tpac"
    "k_size\030\001 \001(\005\022)\n\017beast_skill_set\030\002 \003(\0132\020."
    "ProtoBeastSkill\022\021\n\tcur_beast\030\003 \001(\003\022\022\n\nla"
    "st_beast\030\004 \001(\003\022\020\n\010cur_sort\030\005 \001(\005\022\021\n\tlast"
    "_sort\030\006 \001(\005\022\022\n\nsave_beast\030\007 \001(\003\022\025\n\rskill"
    "_book_id\030\010 \003(\005\022\030\n\020skill_book_index\030\t \003(\005"
    "\022\r\n\005lucky\030\n \001(\005\022\025\n\ris_open_skill\030\013 \001(\005\"\220"
    "\002\n\rProto31400111\022\017\n\007is_open\030\001 \001(\005\022\024\n\014pra"
    "ctice_lvl\030\002 \001(\005\022\022\n\ndragon_lvl\030\003 \001(\005\022\020\n\010a"
    "dd_rate\030\004 \001(\005\022\023\n\013finish_tick\030\005 \001(\003\022\020\n\010co"
    "ol_all\030\006 \001(\005\022\023\n\013anima_value\030\007 \001(\005\022\021\n\tlig"
    "ht_lvl\030\010 \001(\005\022\024\n\014light_degree\030\t \001(\005\022\021\n\top"
    "en_flag\030\n \001(\005\022\017\n\007n_times\030\013 \003(\005\022\017\n\007s_time"
    "s\030\014 \003(\005\022\030\n\020sacrifice_notify\030\r \001(\005\"b\n\rPro"
    "to30400017\022\022\n\nfighter_id\030\001 \001(\003\022\032\n\005skill\030"
    "\002 \001(\0132\013.ProtoSkill\022!\n\014remove_skill\030\003 \001(\013"
    "2\013.ProtoSkill\"N\n\rProto31400301\022\023\n\013donate"
    "_type\030\001 \001(\005\022\025\n\rdonate_number\030\002 \001(\005\022\021\n\tse"
    "nd_flag\030\003 \001(\005", 8533);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoInner001.proto", &protobuf_RegisterTypes);
  Proto30100101::default_instance_ = new Proto30100101();
  Proto30400004::default_instance_ = new Proto30400004();
  Proto30400101::default_instance_ = new Proto30400101();
  Proto30400102::default_instance_ = new Proto30400102();
  Proto30400103::default_instance_ = new Proto30400103();
  Proto30400104::default_instance_ = new Proto30400104();
  Proto30400105::default_instance_ = new Proto30400105();
  Proto30400201::default_instance_ = new Proto30400201();
  Proto30310001::default_instance_ = new Proto30310001();
  Proto30330001::default_instance_ = new Proto30330001();
  Proto30800001::default_instance_ = new Proto30800001();
  Proto30200101::default_instance_ = new Proto30200101();
  Proto30200103::default_instance_ = new Proto30200103();
  Proto30200104::default_instance_ = new Proto30200104();
  Proto30200105::default_instance_ = new Proto30200105();
  Proto30200106::default_instance_ = new Proto30200106();
  Proto30200107::default_instance_ = new Proto30200107();
  Proto30200108::default_instance_ = new Proto30200108();
  Proto30200109::default_instance_ = new Proto30200109();
  Proto30200110::default_instance_ = new Proto30200110();
  Proto30200111::default_instance_ = new Proto30200111();
  Proto30200113::default_instance_ = new Proto30200113();
  Proto31400106::default_instance_ = new Proto31400106();
  Proto31400107::default_instance_ = new Proto31400107();
  Proto31400101::default_instance_ = new Proto31400101();
  Proto31400102::default_instance_ = new Proto31400102();
  Proto31400103::default_instance_ = new Proto31400103();
  Proto31400104::default_instance_ = new Proto31400104();
  Proto31400105::default_instance_ = new Proto31400105();
  Proto31400001::default_instance_ = new Proto31400001();
  Proto31400011::default_instance_ = new Proto31400011();
  Proto31400012::default_instance_ = new Proto31400012();
  Proto31400221::default_instance_ = new Proto31400221();
  Proto31400222::default_instance_ = new Proto31400222();
  Proto31400223::default_instance_ = new Proto31400223();
  Proto30400013::default_instance_ = new Proto30400013();
  Proto31400014::default_instance_ = new Proto31400014();
  Proto31400015::default_instance_ = new Proto31400015();
  Proto30400011::default_instance_ = new Proto30400011();
  Proto31400016::default_instance_ = new Proto31400016();
  Proto30400401::default_instance_ = new Proto30400401();
  Proto30400402::default_instance_ = new Proto30400402();
  Proto30400405::default_instance_ = new Proto30400405();
  Proto30400406::default_instance_ = new Proto30400406();
  Proto31400108::default_instance_ = new Proto31400108();
  Proto31400109::default_instance_ = new Proto31400109();
  Proto31400110::default_instance_ = new Proto31400110();
  Proto31400111::default_instance_ = new Proto31400111();
  Proto30400017::default_instance_ = new Proto30400017();
  Proto31400301::default_instance_ = new Proto31400301();
  Proto30100101::default_instance_->InitAsDefaultInstance();
  Proto30400004::default_instance_->InitAsDefaultInstance();
  Proto30400101::default_instance_->InitAsDefaultInstance();
  Proto30400102::default_instance_->InitAsDefaultInstance();
  Proto30400103::default_instance_->InitAsDefaultInstance();
  Proto30400104::default_instance_->InitAsDefaultInstance();
  Proto30400105::default_instance_->InitAsDefaultInstance();
  Proto30400201::default_instance_->InitAsDefaultInstance();
  Proto30310001::default_instance_->InitAsDefaultInstance();
  Proto30330001::default_instance_->InitAsDefaultInstance();
  Proto30800001::default_instance_->InitAsDefaultInstance();
  Proto30200101::default_instance_->InitAsDefaultInstance();
  Proto30200103::default_instance_->InitAsDefaultInstance();
  Proto30200104::default_instance_->InitAsDefaultInstance();
  Proto30200105::default_instance_->InitAsDefaultInstance();
  Proto30200106::default_instance_->InitAsDefaultInstance();
  Proto30200107::default_instance_->InitAsDefaultInstance();
  Proto30200108::default_instance_->InitAsDefaultInstance();
  Proto30200109::default_instance_->InitAsDefaultInstance();
  Proto30200110::default_instance_->InitAsDefaultInstance();
  Proto30200111::default_instance_->InitAsDefaultInstance();
  Proto30200113::default_instance_->InitAsDefaultInstance();
  Proto31400106::default_instance_->InitAsDefaultInstance();
  Proto31400107::default_instance_->InitAsDefaultInstance();
  Proto31400101::default_instance_->InitAsDefaultInstance();
  Proto31400102::default_instance_->InitAsDefaultInstance();
  Proto31400103::default_instance_->InitAsDefaultInstance();
  Proto31400104::default_instance_->InitAsDefaultInstance();
  Proto31400105::default_instance_->InitAsDefaultInstance();
  Proto31400001::default_instance_->InitAsDefaultInstance();
  Proto31400011::default_instance_->InitAsDefaultInstance();
  Proto31400012::default_instance_->InitAsDefaultInstance();
  Proto31400221::default_instance_->InitAsDefaultInstance();
  Proto31400222::default_instance_->InitAsDefaultInstance();
  Proto31400223::default_instance_->InitAsDefaultInstance();
  Proto30400013::default_instance_->InitAsDefaultInstance();
  Proto31400014::default_instance_->InitAsDefaultInstance();
  Proto31400015::default_instance_->InitAsDefaultInstance();
  Proto30400011::default_instance_->InitAsDefaultInstance();
  Proto31400016::default_instance_->InitAsDefaultInstance();
  Proto30400401::default_instance_->InitAsDefaultInstance();
  Proto30400402::default_instance_->InitAsDefaultInstance();
  Proto30400405::default_instance_->InitAsDefaultInstance();
  Proto30400406::default_instance_->InitAsDefaultInstance();
  Proto31400108::default_instance_->InitAsDefaultInstance();
  Proto31400109::default_instance_->InitAsDefaultInstance();
  Proto31400110::default_instance_->InitAsDefaultInstance();
  Proto31400111::default_instance_->InitAsDefaultInstance();
  Proto30400017::default_instance_->InitAsDefaultInstance();
  Proto31400301::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoInner001_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoInner001_2eproto {
  StaticDescriptorInitializer_ProtoInner001_2eproto() {
    protobuf_AddDesc_ProtoInner001_2eproto();
  }
} static_descriptor_initializer_ProtoInner001_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Proto30100101::kSceneIdFieldNumber;
const int Proto30100101::kUcSidFieldNumber;
const int Proto30100101::kClientIpFieldNumber;
const int Proto30100101::kClientMacFieldNumber;
const int Proto30100101::kSessionInfoFieldNumber;
#endif  // !_MSC_VER

Proto30100101::Proto30100101()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto30100101::InitAsDefaultInstance() {
  session_info_ = const_cast< ::ProtoSession*>(&::ProtoSession::default_instance());
}

Proto30100101::Proto30100101(const Proto30100101& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto30100101::SharedCtor() {
  _cached_size_ = 0;
  scene_id_ = 0;
  uc_sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  client_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  client_mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  session_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto30100101::~Proto30100101() {
  SharedDtor();
}

void Proto30100101::SharedDtor() {
  if (uc_sid_ != &::google::protobuf::internal::kEmptyString) {
    delete uc_sid_;
  }
  if (client_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete client_ip_;
  }
  if (client_mac_ != &::google::protobuf::internal::kEmptyString) {
    delete client_mac_;
  }
  if (this != default_instance_) {
    delete session_info_;
  }
}

void Proto30100101::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto30100101::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto30100101_descriptor_;
}

const Proto30100101& Proto30100101::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInner001_2eproto();  return *default_instance_;
}

Proto30100101* Proto30100101::default_instance_ = NULL;

Proto30100101* Proto30100101::New() const {
  return new Proto30100101;
}

void Proto30100101::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scene_id_ = 0;
    if (has_uc_sid()) {
      if (uc_sid_ != &::google::protobuf::internal::kEmptyString) {
        uc_sid_->clear();
      }
    }
    if (has_client_ip()) {
      if (client_ip_ != &::google::protobuf::internal::kEmptyString) {
        client_ip_->clear();
      }
    }
    if (has_client_mac()) {
      if (client_mac_ != &::google::protobuf::internal::kEmptyString) {
        client_mac_->clear();
      }
    }
    if (has_session_info()) {
      if (session_info_ != NULL) session_info_->::ProtoSession::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto30100101::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 scene_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uc_sid;
        break;
      }
      
      // optional string uc_sid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uc_sid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uc_sid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uc_sid().data(), this->uc_sid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_client_ip;
        break;
      }
      
      // optional string client_ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->client_ip().data(), this->client_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_client_mac;
        break;
      }
      
      // optional string client_mac = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_mac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_mac()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->client_mac().data(), this->client_mac().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_session_info;
        break;
      }
      
      // optional .ProtoSession session_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto30100101::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 scene_id = 1;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->scene_id(), output);
  }
  
  // optional string uc_sid = 2;
  if (has_uc_sid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uc_sid().data(), this->uc_sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->uc_sid(), output);
  }
  
  // optional string client_ip = 3;
  if (has_client_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_ip().data(), this->client_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->client_ip(), output);
  }
  
  // optional string client_mac = 4;
  if (has_client_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_mac().data(), this->client_mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->client_mac(), output);
  }
  
  // optional .ProtoSession session_info = 5;
  if (has_session_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->session_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto30100101::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 scene_id = 1;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->scene_id(), target);
  }
  
  // optional string uc_sid = 2;
  if (has_uc_sid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uc_sid().data(), this->uc_sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uc_sid(), target);
  }
  
  // optional string client_ip = 3;
  if (has_client_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_ip().data(), this->client_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->client_ip(), target);
  }
  
  // optional string client_mac = 4;
  if (has_client_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_mac().data(), this->client_mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->client_mac(), target);
  }
  
  // optional .ProtoSession session_info = 5;
  if (has_session_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->session_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto30100101::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 scene_id = 1;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_id());
    }
    
    // optional string uc_sid = 2;
    if (has_uc_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uc_sid());
    }
    
    // optional string client_ip = 3;
    if (has_client_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_ip());
    }
    
    // optional string client_mac = 4;
    if (has_client_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_mac());
    }
    
    // optional .ProtoSession session_info = 5;
    if (has_session_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto30100101::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto30100101* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto30100101*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto30100101::MergeFrom(const Proto30100101& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_uc_sid()) {
      set_uc_sid(from.uc_sid());
    }
    if (from.has_client_ip()) {
      set_client_ip(from.client_ip());
    }
    if (from.has_client_mac()) {
      set_client_mac(from.client_mac());
    }
    if (from.has_session_info()) {
      mutable_session_info()->::ProtoSession::MergeFrom(from.session_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto30100101::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto30100101::CopyFrom(const Proto30100101& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto30100101::IsInitialized() const {
  
  return true;
}

void Proto30100101::Swap(Proto30100101* other) {
  if (other != this) {
    std::swap(scene_id_, other->scene_id_);
    std::swap(uc_sid_, other->uc_sid_);
    std::swap(client_ip_, other->client_ip_);
    std::swap(client_mac_, other->client_mac_);
    std::swap(session_info_, other->session_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto30100101::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto30100101_descriptor_;
  metadata.reflection = Proto30100101_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto30400004::kSessionInfoFieldNumber;
#endif  // !_MSC_VER

Proto30400004::Proto30400004()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto30400004::InitAsDefaultInstance() {
  session_info_ = const_cast< ::ProtoSession*>(&::ProtoSession::default_instance());
}

Proto30400004::Proto30400004(const Proto30400004& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto30400004::SharedCtor() {
  _cached_size_ = 0;
  session_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto30400004::~Proto30400004() {
  SharedDtor();
}

void Proto30400004::SharedDtor() {
  if (this != default_instance_) {
    delete session_info_;
  }
}

void Proto30400004::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto30400004::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto30400004_descriptor_;
}

const Proto30400004& Proto30400004::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInner001_2eproto();  return *default_instance_;
}

Proto30400004* Proto30400004::default_instance_ = NULL;

Proto30400004* Proto30400004::New() const {
  return new Proto30400004;
}

void Proto30400004::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session_info()) {
      if (session_info_ != NULL) session_info_->::ProtoSession::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto30400004::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ProtoSession session_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto30400004::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ProtoSession session_info = 1;
  if (has_session_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto30400004::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ProtoSession session_info = 1;
  if (has_session_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto30400004::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ProtoSession session_info = 1;
    if (has_session_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto30400004::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto30400004* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto30400004*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto30400004::MergeFrom(const Proto30400004& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session_info()) {
      mutable_session_info()->::ProtoSession::MergeFrom(from.session_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto30400004::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto30400004::CopyFrom(const Proto30400004& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto30400004::IsInitialized() const {
  
  return true;
}

void Proto30400004::Swap(Proto30400004* other) {
  if (other != this) {
    std::swap(session_info_, other->session_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto30400004::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto30400004_descriptor_;
  metadata.reflection = Proto30400004_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto30400101::kRoleIdFieldNumber;
const int Proto30400101::kTeamIdFieldNumber;
const int Proto30400101::kLabelIdFieldNumber;
const int Proto30400101::kVipTypeFieldNumber;
const int Proto30400101::kLeagueIdFieldNumber;
const int Proto30400101::kFightForceFieldNumber;
const int Proto30400101::kAgentFieldNumber;
const int Proto30400101::kAgentCodeFieldNumber;
const int Proto30400101::kAccountFieldNumber;
const int Proto30400101::kSessionFieldNumber;
const int Proto30400101::kPermissionFieldNumber;
const int Proto30400101::kNameFieldNumber;
const int Proto30400101::kSexFieldNumber;
const int Proto30400101::kCareerFieldNumber;
const int Proto30400101::kLevelFieldNumber;
const int Proto30400101::kSceneIdFieldNumber;
const int Proto30400101::kIsNewScriptFieldNumber;
const int Proto30400101::kEnterErrorFieldNumber;
const int Proto30400101::kPlatformFieldNumber;
const int Proto30400101::kMarketCodeFieldNumber;
const int Proto30400101::kLeagueNameFieldNumber;
const int Proto30400101::kAlreadyLeagueFieldNumber;
const int Proto30400101::kKillSetFieldNumber;
const int Proto30400101::kScenePkStateFieldNumber;
const int Proto30400101::kWeddingGiftboxTickFieldNumber;
const int Proto30400101::kWeddingGiftboxTimesFieldNumber;
const int Proto30400101::kFreshFreeReliveTickFieldNumber;
const int Proto30400101::kUsedFreeReliveFieldNumber;
const int Proto30400101::kTranslateToEnemyTimesFieldNumber;
const int Proto30400101::kSaveBloodFieldNumber;
const int Proto30400101::kSaveMagicFieldNumber;
const int Proto30400101::kCollectChestAmountFieldNumber;
const int Proto30400101::kSacredstoneExpFieldNumber;
const int Proto30400101::kEscortTimesFieldNumber;
const int Proto30400101::kProtectTimesFieldNumber;
const int Proto30400101::kRobTimesFieldNumber;
const int Proto30400101::kLeaguePosFieldNumber;
const int Proto30400101::kServerFlagFieldNumber;
const int Proto30400101::kFbFlagFieldNumber;
const int Proto30400101::kSrcNameFieldNumber;
const int Proto30400101::kLoginDayFieldNumber;
const int Proto30400101::kLoginTickFieldNumber;
const int Proto30400101::kSignTrvlTeamFieldNumber;
const int Proto30400101::kClientTypeFieldNumber;
const int Proto30400101::kPartnerIdFieldNumber;
const int Proto30400101::kPartnerNameFieldNumber;
const int Proto30400101::kWeddingIdFieldNumber;
const int Proto30400101::kWeddingTypeFieldNumber;
const int Proto30400101::kTransferTickFieldNumber;
const int Proto30400101::kCurServerFlagFieldNumber;
#endif  // !_MSC_VER

Proto30400101::Proto30400101()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto30400101::InitAsDefaultInstance() {
}

Proto30400101::Proto30400101(const Proto30400101& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto30400101::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  team_id_ = 0;
  label_id_ = 0;
  vip_type_ = 0;
  league_id_ = GOOGLE_LONGLONG(0);
  fight_force_ = 0;
  agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  agent_code_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  session_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  permission_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  career_ = 0;
  level_ = 0;
  scene_id_ = 0;
  is_new_script_ = 0;
  enter_error_ = 0;
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  market_code_ = 0;
  league_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wedding_giftbox_tick_ = 0;
  wedding_giftbox_times_ = 0;
  fresh_free_relive_tick_ = 0;
  used_free_relive_ = 0;
  translate_to_enemy_times_ = 0;
  save_blood_ = 0;
  save_magic_ = 0;
  collect_chest_amount_ = 0;
  sacredstone_exp_ = 0;
  escort_times_ = 0;
  protect_times_ = 0;
  rob_times_ = 0;
  league_pos_ = 0;
  server_flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fb_flag_ = 0;
  src_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  login_day_ = GOOGLE_LONGLONG(0);
  login_tick_ = GOOGLE_LONGLONG(0);
  sign_trvl_team_ = 0;
  client_type_ = 0;
  partner_id_ = GOOGLE_LONGLONG(0);
  partner_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wedding_id_ = GOOGLE_LONGLONG(0);
  wedding_type_ = 0;
  transfer_tick_ = GOOGLE_LONGLONG(0);
  cur_server_flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto30400101::~Proto30400101() {
  SharedDtor();
}

void Proto30400101::SharedDtor() {
  if (agent_ != &::google::protobuf::internal::kEmptyString) {
    delete agent_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (session_ != &::google::protobuf::internal::kEmptyString) {
    delete session_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_;
  }
  if (league_name_ != &::google::protobuf::internal::kEmptyString) {
    delete league_name_;
  }
  if (server_flag_ != &::google::protobuf::internal::kEmptyString) {
    delete server_flag_;
  }
  if (src_name_ != &::google::protobuf::internal::kEmptyString) {
    delete src_name_;
  }
  if (partner_name_ != &::google::protobuf::internal::kEmptyString) {
    delete partner_name_;
  }
  if (cur_server_flag_ != &::google::protobuf::internal::kEmptyString) {
    delete cur_server_flag_;
  }
  if (this != default_instance_) {
  }
}

void Proto30400101::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto30400101::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto30400101_descriptor_;
}

const Proto30400101& Proto30400101::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInner001_2eproto();  return *default_instance_;
}

Proto30400101* Proto30400101::default_instance_ = NULL;

Proto30400101* Proto30400101::New() const {
  return new Proto30400101;
}

void Proto30400101::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_LONGLONG(0);
    team_id_ = 0;
    label_id_ = 0;
    vip_type_ = 0;
    league_id_ = GOOGLE_LONGLONG(0);
    fight_force_ = 0;
    if (has_agent()) {
      if (agent_ != &::google::protobuf::internal::kEmptyString) {
        agent_->clear();
      }
    }
    agent_code_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_session()) {
      if (session_ != &::google::protobuf::internal::kEmptyString) {
        session_->clear();
      }
    }
    permission_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    sex_ = 0;
    career_ = 0;
    level_ = 0;
    scene_id_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    is_new_script_ = 0;
    enter_error_ = 0;
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::kEmptyString) {
        platform_->clear();
      }
    }
    market_code_ = 0;
    if (has_league_name()) {
      if (league_name_ != &::google::protobuf::internal::kEmptyString) {
        league_name_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    wedding_giftbox_tick_ = 0;
    wedding_giftbox_times_ = 0;
    fresh_free_relive_tick_ = 0;
    used_free_relive_ = 0;
    translate_to_enemy_times_ = 0;
    save_blood_ = 0;
    save_magic_ = 0;
    collect_chest_amount_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    sacredstone_exp_ = 0;
    escort_times_ = 0;
    protect_times_ = 0;
    rob_times_ = 0;
    league_pos_ = 0;
    if (has_server_flag()) {
      if (server_flag_ != &::google::protobuf::internal::kEmptyString) {
        server_flag_->clear();
      }
    }
    fb_flag_ = 0;
    if (has_src_name()) {
      if (src_name_ != &::google::protobuf::internal::kEmptyString) {
        src_name_->clear();
      }
    }
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    login_day_ = GOOGLE_LONGLONG(0);
    login_tick_ = GOOGLE_LONGLONG(0);
    sign_trvl_team_ = 0;
    client_type_ = 0;
    partner_id_ = GOOGLE_LONGLONG(0);
    if (has_partner_name()) {
      if (partner_name_ != &::google::protobuf::internal::kEmptyString) {
        partner_name_->clear();
      }
    }
    wedding_id_ = GOOGLE_LONGLONG(0);
    wedding_type_ = 0;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    transfer_tick_ = GOOGLE_LONGLONG(0);
    if (has_cur_server_flag()) {
      if (cur_server_flag_ != &::google::protobuf::internal::kEmptyString) {
        cur_server_flag_->clear();
      }
    }
  }
  already_league_.Clear();
  kill_set_.Clear();
  scene_pk_state_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto30400101::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team_id;
        break;
      }
      
      // optional int32 team_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_label_id;
        break;
      }
      
      // optional int32 label_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_label_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &label_id_)));
          set_has_label_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_vip_type;
        break;
      }
      
      // optional int32 vip_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_type_)));
          set_has_vip_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_league_id;
        break;
      }
      
      // optional int64 league_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_league_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &league_id_)));
          set_has_league_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_fight_force;
        break;
      }
      
      // optional int32 fight_force = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_force_)));
          set_has_fight_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_agent;
        break;
      }
      
      // optional string agent = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_agent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_agent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->agent().data(), this->agent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_agent_code;
        break;
      }
      
      // optional int32 agent_code = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agent_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agent_code_)));
          set_has_agent_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_account;
        break;
      }
      
      // optional string account = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_session;
        break;
      }
      
      // optional string session = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session().data(), this->session().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_permission;
        break;
      }
      
      // optional int32 permission = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_permission:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &permission_)));
          set_has_permission();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_name;
        break;
      }
      
      // optional string name = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_sex;
        break;
      }
      
      // optional int32 sex = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_career;
        break;
      }
      
      // optional int32 career = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_career:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &career_)));
          set_has_career();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_level;
        break;
      }
      
      // optional int32 level = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_scene_id;
        break;
      }
      
      // optional int32 scene_id = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_is_new_script;
        break;
      }
      
      // optional int32 is_new_script = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_new_script:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_new_script_)));
          set_has_is_new_script();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_enter_error;
        break;
      }
      
      // optional int32 enter_error = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enter_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enter_error_)));
          set_has_enter_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_platform;
        break;
      }
      
      // optional string platform = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_market_code;
        break;
      }
      
      // optional int32 market_code = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_market_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &market_code_)));
          set_has_market_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_league_name;
        break;
      }
      
      // optional string league_name = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_league_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_league_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->league_name().data(), this->league_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_already_league;
        break;
      }
      
      // repeated int32 already_league = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_already_league:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 176, input, this->mutable_already_league())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_already_league())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_already_league;
        if (input->ExpectTag(184)) goto parse_kill_set;
        break;
      }
      
      // repeated int32 kill_set = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill_set:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 184, input, this->mutable_kill_set())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_kill_set())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_kill_set;
        if (input->ExpectTag(192)) goto parse_scene_pk_state;
        break;
      }
      
      // repeated int32 scene_pk_state = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_pk_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 192, input, this->mutable_scene_pk_state())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_scene_pk_state())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_scene_pk_state;
        if (input->ExpectTag(200)) goto parse_wedding_giftbox_tick;
        break;
      }
      
      // optional int32 wedding_giftbox_tick = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wedding_giftbox_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wedding_giftbox_tick_)));
          set_has_wedding_giftbox_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_wedding_giftbox_times;
        break;
      }
      
      // optional int32 wedding_giftbox_times = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wedding_giftbox_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wedding_giftbox_times_)));
          set_has_wedding_giftbox_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_fresh_free_relive_tick;
        break;
      }
      
      // optional int32 fresh_free_relive_tick = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fresh_free_relive_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fresh_free_relive_tick_)));
          set_has_fresh_free_relive_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_used_free_relive;
        break;
      }
      
      // optional int32 used_free_relive = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_used_free_relive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &used_free_relive_)));
          set_has_used_free_relive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_translate_to_enemy_times;
        break;
      }
      
      // optional int32 translate_to_enemy_times = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_translate_to_enemy_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &translate_to_enemy_times_)));
          set_has_translate_to_enemy_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_save_blood;
        break;
      }
      
      // optional int32 save_blood = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_save_blood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &save_blood_)));
          set_has_save_blood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_save_magic;
        break;
      }
      
      // optional int32 save_magic = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_save_magic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &save_magic_)));
          set_has_save_magic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_collect_chest_amount;
        break;
      }
      
      // optional int32 collect_chest_amount = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_collect_chest_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &collect_chest_amount_)));
          set_has_collect_chest_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_sacredstone_exp;
        break;
      }
      
      // optional int32 sacredstone_exp = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sacredstone_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sacredstone_exp_)));
          set_has_sacredstone_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_escort_times;
        break;
      }
      
      // optional int32 escort_times = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_escort_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &escort_times_)));
          set_has_escort_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_protect_times;
        break;
      }
      
      // optional int32 protect_times = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_protect_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &protect_times_)));
          set_has_protect_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_rob_times;
        break;
      }
      
      // optional int32 rob_times = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rob_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rob_times_)));
          set_has_rob_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_league_pos;
        break;
      }
      
      // optional int32 league_pos = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_league_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &league_pos_)));
          set_has_league_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_server_flag;
        break;
      }
      
      // optional string server_flag = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_flag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_flag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_flag().data(), this->server_flag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_fb_flag;
        break;
      }
      
      // optional int32 fb_flag = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fb_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fb_flag_)));
          set_has_fb_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_src_name;
        break;
      }
      
      // optional string src_name = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_src_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->src_name().data(), this->src_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_login_day;
        break;
      }
      
      // optional int64 login_day = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &login_day_)));
          set_has_login_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_login_tick;
        break;
      }
      
      // optional int64 login_tick = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &login_tick_)));
          set_has_login_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_sign_trvl_team;
        break;
      }
      
      // optional int32 sign_trvl_team = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sign_trvl_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sign_trvl_team_)));
          set_has_sign_trvl_team();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_client_type;
        break;
      }
      
      // optional int32 client_type = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_type_)));
          set_has_client_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_partner_id;
        break;
      }
      
      // optional int64 partner_id = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &partner_id_)));
          set_has_partner_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(370)) goto parse_partner_name;
        break;
      }
      
      // optional string partner_name = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partner_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partner_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->partner_name().data(), this->partner_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(376)) goto parse_wedding_id;
        break;
      }
      
      // optional int64 wedding_id = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wedding_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &wedding_id_)));
          set_has_wedding_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384)) goto parse_wedding_type;
        break;
      }
      
      // optional int32 wedding_type = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wedding_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wedding_type_)));
          set_has_wedding_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(392)) goto parse_transfer_tick;
        break;
      }
      
      // optional int64 transfer_tick = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transfer_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transfer_tick_)));
          set_has_transfer_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_cur_server_flag;
        break;
      }
      
      // optional string cur_server_flag = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cur_server_flag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cur_server_flag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cur_server_flag().data(), this->cur_server_flag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto30400101::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_id(), output);
  }
  
  // optional int32 team_id = 2;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->team_id(), output);
  }
  
  // optional int32 label_id = 3;
  if (has_label_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->label_id(), output);
  }
  
  // optional int32 vip_type = 4;
  if (has_vip_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->vip_type(), output);
  }
  
  // optional int64 league_id = 5;
  if (has_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->league_id(), output);
  }
  
  // optional int32 fight_force = 6;
  if (has_fight_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->fight_force(), output);
  }
  
  // optional string agent = 7;
  if (has_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agent().data(), this->agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->agent(), output);
  }
  
  // optional int32 agent_code = 8;
  if (has_agent_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->agent_code(), output);
  }
  
  // optional string account = 9;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->account(), output);
  }
  
  // optional string session = 10;
  if (has_session()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session().data(), this->session().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->session(), output);
  }
  
  // optional int32 permission = 11;
  if (has_permission()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->permission(), output);
  }
  
  // optional string name = 12;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->name(), output);
  }
  
  // optional int32 sex = 13;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->sex(), output);
  }
  
  // optional int32 career = 14;
  if (has_career()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->career(), output);
  }
  
  // optional int32 level = 15;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->level(), output);
  }
  
  // optional int32 scene_id = 16;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->scene_id(), output);
  }
  
  // optional int32 is_new_script = 17;
  if (has_is_new_script()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->is_new_script(), output);
  }
  
  // optional int32 enter_error = 18;
  if (has_enter_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->enter_error(), output);
  }
  
  // optional string platform = 19;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->platform(), output);
  }
  
  // optional int32 market_code = 20;
  if (has_market_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->market_code(), output);
  }
  
  // optional string league_name = 21;
  if (has_league_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->league_name().data(), this->league_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->league_name(), output);
  }
  
  // repeated int32 already_league = 22;
  for (int i = 0; i < this->already_league_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      22, this->already_league(i), output);
  }
  
  // repeated int32 kill_set = 23;
  for (int i = 0; i < this->kill_set_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      23, this->kill_set(i), output);
  }
  
  // repeated int32 scene_pk_state = 24;
  for (int i = 0; i < this->scene_pk_state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      24, this->scene_pk_state(i), output);
  }
  
  // optional int32 wedding_giftbox_tick = 25;
  if (has_wedding_giftbox_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->wedding_giftbox_tick(), output);
  }
  
  // optional int32 wedding_giftbox_times = 26;
  if (has_wedding_giftbox_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->wedding_giftbox_times(), output);
  }
  
  // optional int32 fresh_free_relive_tick = 27;
  if (has_fresh_free_relive_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->fresh_free_relive_tick(), output);
  }
  
  // optional int32 used_free_relive = 28;
  if (has_used_free_relive()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->used_free_relive(), output);
  }
  
  // optional int32 translate_to_enemy_times = 29;
  if (has_translate_to_enemy_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->translate_to_enemy_times(), output);
  }
  
  // optional int32 save_blood = 30;
  if (has_save_blood()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->save_blood(), output);
  }
  
  // optional int32 save_magic = 31;
  if (has_save_magic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->save_magic(), output);
  }
  
  // optional int32 collect_chest_amount = 32;
  if (has_collect_chest_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->collect_chest_amount(), output);
  }
  
  // optional int32 sacredstone_exp = 33;
  if (has_sacredstone_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->sacredstone_exp(), output);
  }
  
  // optional int32 escort_times = 34;
  if (has_escort_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->escort_times(), output);
  }
  
  // optional int32 protect_times = 35;
  if (has_protect_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->protect_times(), output);
  }
  
  // optional int32 rob_times = 36;
  if (has_rob_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->rob_times(), output);
  }
  
  // optional int32 league_pos = 37;
  if (has_league_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->league_pos(), output);
  }
  
  // optional string server_flag = 38;
  if (has_server_flag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_flag().data(), this->server_flag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      38, this->server_flag(), output);
  }
  
  // optional int32 fb_flag = 39;
  if (has_fb_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->fb_flag(), output);
  }
  
  // optional string src_name = 40;
  if (has_src_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src_name().data(), this->src_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      40, this->src_name(), output);
  }
  
  // optional int64 login_day = 41;
  if (has_login_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(41, this->login_day(), output);
  }
  
  // optional int64 login_tick = 42;
  if (has_login_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(42, this->login_tick(), output);
  }
  
  // optional int32 sign_trvl_team = 43;
  if (has_sign_trvl_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->sign_trvl_team(), output);
  }
  
  // optional int32 client_type = 44;
  if (has_client_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->client_type(), output);
  }
  
  // optional int64 partner_id = 45;
  if (has_partner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(45, this->partner_id(), output);
  }
  
  // optional string partner_name = 46;
  if (has_partner_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->partner_name().data(), this->partner_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      46, this->partner_name(), output);
  }
  
  // optional int64 wedding_id = 47;
  if (has_wedding_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(47, this->wedding_id(), output);
  }
  
  // optional int32 wedding_type = 48;
  if (has_wedding_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(48, this->wedding_type(), output);
  }
  
  // optional int64 transfer_tick = 49;
  if (has_transfer_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(49, this->transfer_tick(), output);
  }
  
  // optional string cur_server_flag = 50;
  if (has_cur_server_flag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cur_server_flag().data(), this->cur_server_flag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      50, this->cur_server_flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto30400101::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_id(), target);
  }
  
  // optional int32 team_id = 2;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->team_id(), target);
  }
  
  // optional int32 label_id = 3;
  if (has_label_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->label_id(), target);
  }
  
  // optional int32 vip_type = 4;
  if (has_vip_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->vip_type(), target);
  }
  
  // optional int64 league_id = 5;
  if (has_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->league_id(), target);
  }
  
  // optional int32 fight_force = 6;
  if (has_fight_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->fight_force(), target);
  }
  
  // optional string agent = 7;
  if (has_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agent().data(), this->agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->agent(), target);
  }
  
  // optional int32 agent_code = 8;
  if (has_agent_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->agent_code(), target);
  }
  
  // optional string account = 9;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->account(), target);
  }
  
  // optional string session = 10;
  if (has_session()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session().data(), this->session().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->session(), target);
  }
  
  // optional int32 permission = 11;
  if (has_permission()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->permission(), target);
  }
  
  // optional string name = 12;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->name(), target);
  }
  
  // optional int32 sex = 13;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->sex(), target);
  }
  
  // optional int32 career = 14;
  if (has_career()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->career(), target);
  }
  
  // optional int32 level = 15;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->level(), target);
  }
  
  // optional int32 scene_id = 16;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->scene_id(), target);
  }
  
  // optional int32 is_new_script = 17;
  if (has_is_new_script()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->is_new_script(), target);
  }
  
  // optional int32 enter_error = 18;
  if (has_enter_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->enter_error(), target);
  }
  
  // optional string platform = 19;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->platform(), target);
  }
  
  // optional int32 market_code = 20;
  if (has_market_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->market_code(), target);
  }
  
  // optional string league_name = 21;
  if (has_league_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->league_name().data(), this->league_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->league_name(), target);
  }
  
  // repeated int32 already_league = 22;
  for (int i = 0; i < this->already_league_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(22, this->already_league(i), target);
  }
  
  // repeated int32 kill_set = 23;
  for (int i = 0; i < this->kill_set_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(23, this->kill_set(i), target);
  }
  
  // repeated int32 scene_pk_state = 24;
  for (int i = 0; i < this->scene_pk_state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(24, this->scene_pk_state(i), target);
  }
  
  // optional int32 wedding_giftbox_tick = 25;
  if (has_wedding_giftbox_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->wedding_giftbox_tick(), target);
  }
  
  // optional int32 wedding_giftbox_times = 26;
  if (has_wedding_giftbox_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->wedding_giftbox_times(), target);
  }
  
  // optional int32 fresh_free_relive_tick = 27;
  if (has_fresh_free_relive_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->fresh_free_relive_tick(), target);
  }
  
  // optional int32 used_free_relive = 28;
  if (has_used_free_relive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->used_free_relive(), target);
  }
  
  // optional int32 translate_to_enemy_times = 29;
  if (has_translate_to_enemy_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->translate_to_enemy_times(), target);
  }
  
  // optional int32 save_blood = 30;
  if (has_save_blood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->save_blood(), target);
  }
  
  // optional int32 save_magic = 31;
  if (has_save_magic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->save_magic(), target);
  }
  
  // optional int32 collect_chest_amount = 32;
  if (has_collect_chest_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->collect_chest_amount(), target);
  }
  
  // optional int32 sacredstone_exp = 33;
  if (has_sacredstone_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->sacredstone_exp(), target);
  }
  
  // optional int32 escort_times = 34;
  if (has_escort_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->escort_times(), target);
  }
  
  // optional int32 protect_times = 35;
  if (has_protect_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->protect_times(), target);
  }
  
  // optional int32 rob_times = 36;
  if (has_rob_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->rob_times(), target);
  }
  
  // optional int32 league_pos = 37;
  if (has_league_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->league_pos(), target);
  }
  
  // optional string server_flag = 38;
  if (has_server_flag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_flag().data(), this->server_flag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        38, this->server_flag(), target);
  }
  
  // optional int32 fb_flag = 39;
  if (has_fb_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->fb_flag(), target);
  }
  
  // optional string src_name = 40;
  if (has_src_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src_name().data(), this->src_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->src_name(), target);
  }
  
  // optional int64 login_day = 41;
  if (has_login_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(41, this->login_day(), target);
  }
  
  // optional int64 login_tick = 42;
  if (has_login_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(42, this->login_tick(), target);
  }
  
  // optional int32 sign_trvl_team = 43;
  if (has_sign_trvl_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(43, this->sign_trvl_team(), target);
  }
  
  // optional int32 client_type = 44;
  if (has_client_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(44, this->client_type(), target);
  }
  
  // optional int64 partner_id = 45;
  if (has_partner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(45, this->partner_id(), target);
  }
  
  // optional string partner_name = 46;
  if (has_partner_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->partner_name().data(), this->partner_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        46, this->partner_name(), target);
  }
  
  // optional int64 wedding_id = 47;
  if (has_wedding_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(47, this->wedding_id(), target);
  }
  
  // optional int32 wedding_type = 48;
  if (has_wedding_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(48, this->wedding_type(), target);
  }
  
  // optional int64 transfer_tick = 49;
  if (has_transfer_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(49, this->transfer_tick(), target);
  }
  
  // optional string cur_server_flag = 50;
  if (has_cur_server_flag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cur_server_flag().data(), this->cur_server_flag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        50, this->cur_server_flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto30400101::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional int32 team_id = 2;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_id());
    }
    
    // optional int32 label_id = 3;
    if (has_label_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->label_id());
    }
    
    // optional int32 vip_type = 4;
    if (has_vip_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_type());
    }
    
    // optional int64 league_id = 5;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->league_id());
    }
    
    // optional int32 fight_force = 6;
    if (has_fight_force()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight_force());
    }
    
    // optional string agent = 7;
    if (has_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->agent());
    }
    
    // optional int32 agent_code = 8;
    if (has_agent_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->agent_code());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string account = 9;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }
    
    // optional string session = 10;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session());
    }
    
    // optional int32 permission = 11;
    if (has_permission()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->permission());
    }
    
    // optional string name = 12;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 sex = 13;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }
    
    // optional int32 career = 14;
    if (has_career()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->career());
    }
    
    // optional int32 level = 15;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 scene_id = 16;
    if (has_scene_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_id());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 is_new_script = 17;
    if (has_is_new_script()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_new_script());
    }
    
    // optional int32 enter_error = 18;
    if (has_enter_error()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enter_error());
    }
    
    // optional string platform = 19;
    if (has_platform()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }
    
    // optional int32 market_code = 20;
    if (has_market_code()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->market_code());
    }
    
    // optional string league_name = 21;
    if (has_league_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->league_name());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 wedding_giftbox_tick = 25;
    if (has_wedding_giftbox_tick()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wedding_giftbox_tick());
    }
    
    // optional int32 wedding_giftbox_times = 26;
    if (has_wedding_giftbox_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wedding_giftbox_times());
    }
    
    // optional int32 fresh_free_relive_tick = 27;
    if (has_fresh_free_relive_tick()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fresh_free_relive_tick());
    }
    
    // optional int32 used_free_relive = 28;
    if (has_used_free_relive()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->used_free_relive());
    }
    
    // optional int32 translate_to_enemy_times = 29;
    if (has_translate_to_enemy_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->translate_to_enemy_times());
    }
    
    // optional int32 save_blood = 30;
    if (has_save_blood()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->save_blood());
    }
    
    // optional int32 save_magic = 31;
    if (has_save_magic()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->save_magic());
    }
    
    // optional int32 collect_chest_amount = 32;
    if (has_collect_chest_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->collect_chest_amount());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 sacredstone_exp = 33;
    if (has_sacredstone_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sacredstone_exp());
    }
    
    // optional int32 escort_times = 34;
    if (has_escort_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->escort_times());
    }
    
    // optional int32 protect_times = 35;
    if (has_protect_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->protect_times());
    }
    
    // optional int32 rob_times = 36;
    if (has_rob_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rob_times());
    }
    
    // optional int32 league_pos = 37;
    if (has_league_pos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->league_pos());
    }
    
    // optional string server_flag = 38;
    if (has_server_flag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_flag());
    }
    
    // optional int32 fb_flag = 39;
    if (has_fb_flag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fb_flag());
    }
    
    // optional string src_name = 40;
    if (has_src_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src_name());
    }
    
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional int64 login_day = 41;
    if (has_login_day()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->login_day());
    }
    
    // optional int64 login_tick = 42;
    if (has_login_tick()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->login_tick());
    }
    
    // optional int32 sign_trvl_team = 43;
    if (has_sign_trvl_team()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sign_trvl_team());
    }
    
    // optional int32 client_type = 44;
    if (has_client_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_type());
    }
    
    // optional int64 partner_id = 45;
    if (has_partner_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->partner_id());
    }
    
    // optional string partner_name = 46;
    if (has_partner_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->partner_name());
    }
    
    // optional int64 wedding_id = 47;
    if (has_wedding_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->wedding_id());
    }
    
    // optional int32 wedding_type = 48;
    if (has_wedding_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wedding_type());
    }
    
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional int64 transfer_tick = 49;
    if (has_transfer_tick()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->transfer_tick());
    }
    
    // optional string cur_server_flag = 50;
    if (has_cur_server_flag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cur_server_flag());
    }
    
  }
  // repeated int32 already_league = 22;
  {
    int data_size = 0;
    for (int i = 0; i < this->already_league_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->already_league(i));
    }
    total_size += 2 * this->already_league_size() + data_size;
  }
  
  // repeated int32 kill_set = 23;
  {
    int data_size = 0;
    for (int i = 0; i < this->kill_set_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->kill_set(i));
    }
    total_size += 2 * this->kill_set_size() + data_size;
  }
  
  // repeated int32 scene_pk_state = 24;
  {
    int data_size = 0;
    for (int i = 0; i < this->scene_pk_state_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->scene_pk_state(i));
    }
    total_size += 2 * this->scene_pk_state_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto30400101::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto30400101* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto30400101*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto30400101::MergeFrom(const Proto30400101& from) {
  GOOGLE_CHECK_NE(&from, this);
  already_league_.MergeFrom(from.already_league_);
  kill_set_.MergeFrom(from.kill_set_);
  scene_pk_state_.MergeFrom(from.scene_pk_state_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_label_id()) {
      set_label_id(from.label_id());
    }
    if (from.has_vip_type()) {
      set_vip_type(from.vip_type());
    }
    if (from.has_league_id()) {
      set_league_id(from.league_id());
    }
    if (from.has_fight_force()) {
      set_fight_force(from.fight_force());
    }
    if (from.has_agent()) {
      set_agent(from.agent());
    }
    if (from.has_agent_code()) {
      set_agent_code(from.agent_code());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_session()) {
      set_session(from.session());
    }
    if (from.has_permission()) {
      set_permission(from.permission());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_career()) {
      set_career(from.career());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_is_new_script()) {
      set_is_new_script(from.is_new_script());
    }
    if (from.has_enter_error()) {
      set_enter_error(from.enter_error());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_market_code()) {
      set_market_code(from.market_code());
    }
    if (from.has_league_name()) {
      set_league_name(from.league_name());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_wedding_giftbox_tick()) {
      set_wedding_giftbox_tick(from.wedding_giftbox_tick());
    }
    if (from.has_wedding_giftbox_times()) {
      set_wedding_giftbox_times(from.wedding_giftbox_times());
    }
    if (from.has_fresh_free_relive_tick()) {
      set_fresh_free_relive_tick(from.fresh_free_relive_tick());
    }
    if (from.has_used_free_relive()) {
      set_used_free_relive(from.used_free_relive());
    }
    if (from.has_translate_to_enemy_times()) {
      set_translate_to_enemy_times(from.translate_to_enemy_times());
    }
    if (from.has_save_blood()) {
      set_save_blood(from.save_blood());
    }
    if (from.has_save_magic()) {
      set_save_magic(from.save_magic());
    }
    if (from.has_collect_chest_amount()) {
      set_collect_chest_amount(from.collect_chest_amount());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_sacredstone_exp()) {
      set_sacredstone_exp(from.sacredstone_exp());
    }
    if (from.has_escort_times()) {
      set_escort_times(from.escort_times());
    }
    if (from.has_protect_times()) {
      set_protect_times(from.protect_times());
    }
    if (from.has_rob_times()) {
      set_rob_times(from.rob_times());
    }
    if (from.has_league_pos()) {
      set_league_pos(from.league_pos());
    }
    if (from.has_server_flag()) {
      set_server_flag(from.server_flag());
    }
    if (from.has_fb_flag()) {
      set_fb_flag(from.fb_flag());
    }
    if (from.has_src_name()) {
      set_src_name(from.src_name());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_login_day()) {
      set_login_day(from.login_day());
    }
    if (from.has_login_tick()) {
      set_login_tick(from.login_tick());
    }
    if (from.has_sign_trvl_team()) {
      set_sign_trvl_team(from.sign_trvl_team());
    }
    if (from.has_client_type()) {
      set_client_type(from.client_type());
    }
    if (from.has_partner_id()) {
      set_partner_id(from.partner_id());
    }
    if (from.has_partner_name()) {
      set_partner_name(from.partner_name());
    }
    if (from.has_wedding_id()) {
      set_wedding_id(from.wedding_id());
    }
    if (from.has_wedding_type()) {
      set_wedding_type(from.wedding_type());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_transfer_tick()) {
      set_transfer_tick(from.transfer_tick());
    }
    if (from.has_cur_server_flag()) {
      set_cur_server_flag(from.cur_server_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto30400101::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto30400101::CopyFrom(const Proto30400101& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto30400101::IsInitialized() const {
  
  return true;
}

void Proto30400101::Swap(Proto30400101* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(team_id_, other->team_id_);
    std::swap(label_id_, other->label_id_);
    std::swap(vip_type_, other->vip_type_);
    std::swap(league_id_, other->league_id_);
    std::swap(fight_force_, other->fight_force_);
    std::swap(agent_, other->agent_);
    std::swap(agent_code_, other->agent_code_);
    std::swap(account_, other->account_);
    std::swap(session_, other->session_);
    std::swap(permission_, other->permission_);
    std::swap(name_, other->name_);
    std::swap(sex_, other->sex_);
    std::swap(career_, other->career_);
    std::swap(level_, other->level_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(is_new_script_, other->is_new_script_);
    std::swap(enter_error_, other->enter_error_);
    std::swap(platform_, other->platform_);
    std::swap(market_code_, other->market_code_);
    std::swap(league_name_, other->league_name_);
    already_league_.Swap(&other->already_league_);
    kill_set_.Swap(&other->kill_set_);
    scene_pk_state_.Swap(&other->scene_pk_state_);
    std::swap(wedding_giftbox_tick_, other->wedding_giftbox_tick_);
    std::swap(wedding_giftbox_times_, other->wedding_giftbox_times_);
    std::swap(fresh_free_relive_tick_, other->fresh_free_relive_tick_);
    std::swap(used_free_relive_, other->used_free_relive_);
    std::swap(translate_to_enemy_times_, other->translate_to_enemy_times_);
    std::swap(save_blood_, other->save_blood_);
    std::swap(save_magic_, other->save_magic_);
    std::swap(collect_chest_amount_, other->collect_chest_amount_);
    std::swap(sacredstone_exp_, other->sacredstone_exp_);
    std::swap(escort_times_, other->escort_times_);
    std::swap(protect_times_, other->protect_times_);
    std::swap(rob_times_, other->rob_times_);
    std::swap(league_pos_, other->league_pos_);
    std::swap(server_flag_, other->server_flag_);
    std::swap(fb_flag_, other->fb_flag_);
    std::swap(src_name_, other->src_name_);
    std::swap(login_day_, other->login_day_);
    std::swap(login_tick_, other->login_tick_);
    std::swap(sign_trvl_team_, other->sign_trvl_team_);
    std::swap(client_type_, other->client_type_);
    std::swap(partner_id_, other->partner_id_);
    std::swap(partner_name_, other->partner_name_);
    std::swap(wedding_id_, other->wedding_id_);
    std::swap(wedding_type_, other->wedding_type_);
    std::swap(transfer_tick_, other->transfer_tick_);
    std::swap(cur_server_flag_, other->cur_server_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto30400101::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto30400101_descriptor_;
  metadata.reflection = Proto30400101_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto30400102::kRoleIdFieldNumber;
const int Proto30400102::kPrevSceneFieldNumber;
const int Proto30400102::kTransferTickFieldNumber;
#endif  // !_MSC_VER

Proto30400102::Proto30400102()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto30400102::InitAsDefaultInstance() {
}

Proto30400102::Proto30400102(const Proto30400102& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto30400102::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  prev_scene_ = 0;
  transfer_tick_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto30400102::~Proto30400102() {
  SharedDtor();
}

void Proto30400102::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto30400102::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto30400102::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto30400102_descriptor_;
}

const Proto30400102& Proto30400102::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInner001_2eproto();  return *default_instance_;
}

Proto30400102* Proto30400102::default_instance_ = NULL;

Proto30400102* Proto30400102::New() const {
  return new Proto30400102;
}

void Proto30400102::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_LONGLONG(0);
    prev_scene_ = 0;
    transfer_tick_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto30400102::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_prev_scene;
        break;
      }
      
      // optional int32 prev_scene = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prev_scene:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prev_scene_)));
          set_has_prev_scene();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_transfer_tick;
        break;
      }
      
      // optional int64 transfer_tick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transfer_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transfer_tick_)));
          set_has_transfer_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto30400102::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_id(), output);
  }
  
  // optional int32 prev_scene = 2;
  if (has_prev_scene()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->prev_scene(), output);
  }
  
  // optional int64 transfer_tick = 3;
  if (has_transfer_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->transfer_tick(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto30400102::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_id(), target);
  }
  
  // optional int32 prev_scene = 2;
  if (has_prev_scene()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->prev_scene(), target);
  }
  
  // optional int64 transfer_tick = 3;
  if (has_transfer_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->transfer_tick(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto30400102::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional int32 prev_scene = 2;
    if (has_prev_scene()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prev_scene());
    }
    
    // optional int64 transfer_tick = 3;
    if (has_transfer_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->transfer_tick());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto30400102::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto30400102* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto30400102*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto30400102::MergeFrom(const Proto30400102& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_prev_scene()) {
      set_prev_scene(from.prev_scene());
    }
    if (from.has_transfer_tick()) {
      set_transfer_tick(from.transfer_tick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto30400102::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto30400102::CopyFrom(const Proto30400102& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto30400102::IsInitialized() const {
  
  return true;
}

void Proto30400102::Swap(Proto30400102* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(prev_scene_, other->prev_scene_);
    std::swap(transfer_tick_, other->transfer_tick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto30400102::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto30400102_descriptor_;
  metadata.reflection = Proto30400102_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto30400103::kRoleIdFieldNumber;
const int Proto30400103::kSceneIdFieldNumber;
const int Proto30400103::kTowardFieldNumber;
const int Proto30400103::kSceneModeFieldNumber;
const int Proto30400103::kSpaceIdFieldNumber;
const int Proto30400103::kPrevSceneIdFieldNumber;
const int Proto30400103::kPrevSceneModeFieldNumber;
const int Proto30400103::kPrevSpaceIdFieldNumber;
const int Proto30400103::kSpeedBasicFieldNumber;
const int Proto30400103::kSceneHistoryFieldNumber;
const int Proto30400103::kPrevTownCoordFieldNumber;
const int Proto30400103::kPrevSceneCoordFieldNumber;
const int Proto30400103::kCoordFieldNumber;
const int Proto30400103::kSSceneIdFieldNumber;
const int Proto30400103::kSCoordFieldNumber;
const int Proto30400103::kSBloodFieldNumber;
const int Proto30400103::kSMagicFieldNumber;
const int Proto30400103::kSPkFieldNumber;
const int Proto30400103::kServerTickFieldNumber;
const int Proto30400103::kDropActFieldNumber;
const int Proto30400103::kCombineTickFieldNumber;
const int Proto30400103::kPrevForceMapFieldNumber;
const int Proto30400103::kIsBigActTimeFieldNumber;
#endif  // !_MSC_VER

Proto30400103::Proto30400103()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto30400103::InitAsDefaultInstance() {
  prev_town_coord_ = const_cast< ::ProtoCoord*>(&::ProtoCoord::default_instance());
  prev_scene_coord_ = const_cast< ::ProtoCoord*>(&::ProtoCoord::default_instance());
  coord_ = const_cast< ::ProtoCoord*>(&::ProtoCoord::default_instance());
  s_coord_ = const_cast< ::ProtoCoord*>(&::ProtoCoord::default_instance());
  prev_force_map_ = const_cast< ::ProtoPairMap*>(&::ProtoPairMap::default_instance());
}

Proto30400103::Proto30400103(const Proto30400103& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto30400103::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  scene_id_ = 0;
  toward_ = 0;
  scene_mode_ = 0;
  space_id_ = 0;
  prev_scene_id_ = 0;
  prev_scene_mode_ = 0;
  prev_space_id_ = 0;
  speed_basic_ = 0;
  prev_town_coord_ = NULL;
  prev_scene_coord_ = NULL;
  coord_ = NULL;
  s_scene_id_ = 0;
  s_coord_ = NULL;
  s_blood_ = 0;
  s_magic_ = 0;
  s_pk_ = 0;
  server_tick_ = GOOGLE_LONGLONG(0);
  drop_act_ = 0;
  combine_tick_ = GOOGLE_LONGLONG(0);
  prev_force_map_ = NULL;
  is_big_act_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto30400103::~Proto30400103() {
  SharedDtor();
}

void Proto30400103::SharedDtor() {
  if (this != default_instance_) {
    delete prev_town_coord_;
    delete prev_scene_coord_;
    delete coord_;
    delete s_coord_;
    delete prev_force_map_;
  }
}

void Proto30400103::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto30400103::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto30400103_descriptor_;
}

const Proto30400103& Proto30400103::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInner001_2eproto();  return *default_instance_;
}

Proto30400103* Proto30400103::default_instance_ = NULL;

Proto30400103* Proto30400103::New() const {
  return new Proto30400103;
}

void Proto30400103::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_LONGLONG(0);
    scene_id_ = 0;
    toward_ = 0;
    scene_mode_ = 0;
    space_id_ = 0;
    prev_scene_id_ = 0;
    prev_scene_mode_ = 0;
    prev_space_id_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    speed_basic_ = 0;
    if (has_prev_town_coord()) {
      if (prev_town_coord_ != NULL) prev_town_coord_->::ProtoCoord::Clear();
    }
    if (has_prev_scene_coord()) {
      if (prev_scene_coord_ != NULL) prev_scene_coord_->::ProtoCoord::Clear();
    }
    if (has_coord()) {
      if (coord_ != NULL) coord_->::ProtoCoord::Clear();
    }
    s_scene_id_ = 0;
    if (has_s_coord()) {
      if (s_coord_ != NULL) s_coord_->::ProtoCoord::Clear();
    }
    s_blood_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    s_magic_ = 0;
    s_pk_ = 0;
    server_tick_ = GOOGLE_LONGLONG(0);
    drop_act_ = 0;
    combine_tick_ = GOOGLE_LONGLONG(0);
    if (has_prev_force_map()) {
      if (prev_force_map_ != NULL) prev_force_map_->::ProtoPairMap::Clear();
    }
    is_big_act_time_ = 0;
  }
  scene_history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto30400103::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scene_id;
        break;
      }
      
      // optional int32 scene_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_toward;
        break;
      }
      
      // optional int32 toward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_toward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &toward_)));
          set_has_toward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_scene_mode;
        break;
      }
      
      // optional int32 scene_mode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_mode_)));
          set_has_scene_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_space_id;
        break;
      }
      
      // optional int32 space_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_space_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &space_id_)));
          set_has_space_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_prev_scene_id;
        break;
      }
      
      // optional int32 prev_scene_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prev_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prev_scene_id_)));
          set_has_prev_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_prev_scene_mode;
        break;
      }
      
      // optional int32 prev_scene_mode = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prev_scene_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prev_scene_mode_)));
          set_has_prev_scene_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_prev_space_id;
        break;
      }
      
      // optional int32 prev_space_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prev_space_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prev_space_id_)));
          set_has_prev_space_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_speed_basic;
        break;
      }
      
      // optional float speed_basic = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_speed_basic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_basic_)));
          set_has_speed_basic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_scene_history;
        break;
      }
      
      // repeated int32 scene_history = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_history:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_scene_history())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_scene_history())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_scene_history;
        if (input->ExpectTag(90)) goto parse_prev_town_coord;
        break;
      }
      
      // optional .ProtoCoord prev_town_coord = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prev_town_coord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prev_town_coord()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_prev_scene_coord;
        break;
      }
      
      // optional .ProtoCoord prev_scene_coord = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prev_scene_coord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prev_scene_coord()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_coord;
        break;
      }
      
      // optional .ProtoCoord coord = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_coord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coord()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_s_scene_id;
        break;
      }
      
      // optional int32 s_scene_id = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_s_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &s_scene_id_)));
          set_has_s_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_s_coord;
        break;
      }
      
      // optional .ProtoCoord s_coord = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_s_coord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_s_coord()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_s_blood;
        break;
      }
      
      // optional int32 s_blood = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_s_blood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &s_blood_)));
          set_has_s_blood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_s_magic;
        break;
      }
      
      // optional int32 s_magic = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_s_magic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &s_magic_)));
          set_has_s_magic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_s_pk;
        break;
      }
      
      // optional int32 s_pk = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_s_pk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &s_pk_)));
          set_has_s_pk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_server_tick;
        break;
      }
      
      // optional int64 server_tick = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &server_tick_)));
          set_has_server_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_drop_act;
        break;
      }
      
      // optional int32 drop_act = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drop_act:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drop_act_)));
          set_has_drop_act();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_combine_tick;
        break;
      }
      
      // optional int64 combine_tick = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combine_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &combine_tick_)));
          set_has_combine_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_prev_force_map;
        break;
      }
      
      // optional .ProtoPairMap prev_force_map = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prev_force_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prev_force_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_is_big_act_time;
        break;
      }
      
      // optional int32 is_big_act_time = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_big_act_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_big_act_time_)));
          set_has_is_big_act_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto30400103::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_id(), output);
  }
  
  // optional int32 scene_id = 2;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->scene_id(), output);
  }
  
  // optional int32 toward = 3;
  if (has_toward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->toward(), output);
  }
  
  // optional int32 scene_mode = 4;
  if (has_scene_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->scene_mode(), output);
  }
  
  // optional int32 space_id = 5;
  if (has_space_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->space_id(), output);
  }
  
  // optional int32 prev_scene_id = 6;
  if (has_prev_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->prev_scene_id(), output);
  }
  
  // optional int32 prev_scene_mode = 7;
  if (has_prev_scene_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->prev_scene_mode(), output);
  }
  
  // optional int32 prev_space_id = 8;
  if (has_prev_space_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->prev_space_id(), output);
  }
  
  // optional float speed_basic = 9;
  if (has_speed_basic()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->speed_basic(), output);
  }
  
  // repeated int32 scene_history = 10;
  for (int i = 0; i < this->scene_history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->scene_history(i), output);
  }
  
  // optional .ProtoCoord prev_town_coord = 11;
  if (has_prev_town_coord()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->prev_town_coord(), output);
  }
  
  // optional .ProtoCoord prev_scene_coord = 12;
  if (has_prev_scene_coord()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->prev_scene_coord(), output);
  }
  
  // optional .ProtoCoord coord = 13;
  if (has_coord()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->coord(), output);
  }
  
  // optional int32 s_scene_id = 14;
  if (has_s_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->s_scene_id(), output);
  }
  
  // optional .ProtoCoord s_coord = 15;
  if (has_s_coord()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->s_coord(), output);
  }
  
  // optional int32 s_blood = 16;
  if (has_s_blood()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->s_blood(), output);
  }
  
  // optional int32 s_magic = 17;
  if (has_s_magic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->s_magic(), output);
  }
  
  // optional int32 s_pk = 18;
  if (has_s_pk()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->s_pk(), output);
  }
  
  // optional int64 server_tick = 19;
  if (has_server_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->server_tick(), output);
  }
  
  // optional int32 drop_act = 20;
  if (has_drop_act()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->drop_act(), output);
  }
  
  // optional int64 combine_tick = 21;
  if (has_combine_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->combine_tick(), output);
  }
  
  // optional .ProtoPairMap prev_force_map = 22;
  if (has_prev_force_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->prev_force_map(), output);
  }
  
  // optional int32 is_big_act_time = 23;
  if (has_is_big_act_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->is_big_act_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto30400103::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_id(), target);
  }
  
  // optional int32 scene_id = 2;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->scene_id(), target);
  }
  
  // optional int32 toward = 3;
  if (has_toward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->toward(), target);
  }
  
  // optional int32 scene_mode = 4;
  if (has_scene_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->scene_mode(), target);
  }
  
  // optional int32 space_id = 5;
  if (has_space_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->space_id(), target);
  }
  
  // optional int32 prev_scene_id = 6;
  if (has_prev_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->prev_scene_id(), target);
  }
  
  // optional int32 prev_scene_mode = 7;
  if (has_prev_scene_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->prev_scene_mode(), target);
  }
  
  // optional int32 prev_space_id = 8;
  if (has_prev_space_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->prev_space_id(), target);
  }
  
  // optional float speed_basic = 9;
  if (has_speed_basic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->speed_basic(), target);
  }
  
  // repeated int32 scene_history = 10;
  for (int i = 0; i < this->scene_history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->scene_history(i), target);
  }
  
  // optional .ProtoCoord prev_town_coord = 11;
  if (has_prev_town_coord()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->prev_town_coord(), target);
  }
  
  // optional .ProtoCoord prev_scene_coord = 12;
  if (has_prev_scene_coord()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->prev_scene_coord(), target);
  }
  
  // optional .ProtoCoord coord = 13;
  if (has_coord()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->coord(), target);
  }
  
  // optional int32 s_scene_id = 14;
  if (has_s_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->s_scene_id(), target);
  }
  
  // optional .ProtoCoord s_coord = 15;
  if (has_s_coord()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->s_coord(), target);
  }
  
  // optional int32 s_blood = 16;
  if (has_s_blood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->s_blood(), target);
  }
  
  // optional int32 s_magic = 17;
  if (has_s_magic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->s_magic(), target);
  }
  
  // optional int32 s_pk = 18;
  if (has_s_pk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->s_pk(), target);
  }
  
  // optional int64 server_tick = 19;
  if (has_server_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->server_tick(), target);
  }
  
  // optional int32 drop_act = 20;
  if (has_drop_act()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->drop_act(), target);
  }
  
  // optional int64 combine_tick = 21;
  if (has_combine_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->combine_tick(), target);
  }
  
  // optional .ProtoPairMap prev_force_map = 22;
  if (has_prev_force_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->prev_force_map(), target);
  }
  
  // optional int32 is_big_act_time = 23;
  if (has_is_big_act_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->is_big_act_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto30400103::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional int32 scene_id = 2;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_id());
    }
    
    // optional int32 toward = 3;
    if (has_toward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->toward());
    }
    
    // optional int32 scene_mode = 4;
    if (has_scene_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_mode());
    }
    
    // optional int32 space_id = 5;
    if (has_space_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->space_id());
    }
    
    // optional int32 prev_scene_id = 6;
    if (has_prev_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prev_scene_id());
    }
    
    // optional int32 prev_scene_mode = 7;
    if (has_prev_scene_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prev_scene_mode());
    }
    
    // optional int32 prev_space_id = 8;
    if (has_prev_space_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prev_space_id());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float speed_basic = 9;
    if (has_speed_basic()) {
      total_size += 1 + 4;
    }
    
    // optional .ProtoCoord prev_town_coord = 11;
    if (has_prev_town_coord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prev_town_coord());
    }
    
    // optional .ProtoCoord prev_scene_coord = 12;
    if (has_prev_scene_coord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prev_scene_coord());
    }
    
    // optional .ProtoCoord coord = 13;
    if (has_coord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->coord());
    }
    
    // optional int32 s_scene_id = 14;
    if (has_s_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->s_scene_id());
    }
    
    // optional .ProtoCoord s_coord = 15;
    if (has_s_coord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->s_coord());
    }
    
    // optional int32 s_blood = 16;
    if (has_s_blood()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->s_blood());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 s_magic = 17;
    if (has_s_magic()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->s_magic());
    }
    
    // optional int32 s_pk = 18;
    if (has_s_pk()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->s_pk());
    }
    
    // optional int64 server_tick = 19;
    if (has_server_tick()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->server_tick());
    }
    
    // optional int32 drop_act = 20;
    if (has_drop_act()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->drop_act());
    }
    
    // optional int64 combine_tick = 21;
    if (has_combine_tick()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->combine_tick());
    }
    
    // optional .ProtoPairMap prev_force_map = 22;
    if (has_prev_force_map()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prev_force_map());
    }
    
    // optional int32 is_big_act_time = 23;
    if (has_is_big_act_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_big_act_time());
    }
    
  }
  // repeated int32 scene_history = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->scene_history_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->scene_history(i));
    }
    total_size += 1 * this->scene_history_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto30400103::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto30400103* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto30400103*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto30400103::MergeFrom(const Proto30400103& from) {
  GOOGLE_CHECK_NE(&from, this);
  scene_history_.MergeFrom(from.scene_history_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_toward()) {
      set_toward(from.toward());
    }
    if (from.has_scene_mode()) {
      set_scene_mode(from.scene_mode());
    }
    if (from.has_space_id()) {
      set_space_id(from.space_id());
    }
    if (from.has_prev_scene_id()) {
      set_prev_scene_id(from.prev_scene_id());
    }
    if (from.has_prev_scene_mode()) {
      set_prev_scene_mode(from.prev_scene_mode());
    }
    if (from.has_prev_space_id()) {
      set_prev_space_id(from.prev_space_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_speed_basic()) {
      set_speed_basic(from.speed_basic());
    }
    if (from.has_prev_town_coord()) {
      mutable_prev_town_coord()->::ProtoCoord::MergeFrom(from.prev_town_coord());
    }
    if (from.has_prev_scene_coord()) {
      mutable_prev_scene_coord()->::ProtoCoord::MergeFrom(from.prev_scene_coord());
    }
    if (from.has_coord()) {
      mutable_coord()->::ProtoCoord::MergeFrom(from.coord());
    }
    if (from.has_s_scene_id()) {
      set_s_scene_id(from.s_scene_id());
    }
    if (from.has_s_coord()) {
      mutable_s_coord()->::ProtoCoord::MergeFrom(from.s_coord());
    }
    if (from.has_s_blood()) {
      set_s_blood(from.s_blood());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_s_magic()) {
      set_s_magic(from.s_magic());
    }
    if (from.has_s_pk()) {
      set_s_pk(from.s_pk());
    }
    if (from.has_server_tick()) {
      set_server_tick(from.server_tick());
    }
    if (from.has_drop_act()) {
      set_drop_act(from.drop_act());
    }
    if (from.has_combine_tick()) {
      set_combine_tick(from.combine_tick());
    }
    if (from.has_prev_force_map()) {
      mutable_prev_force_map()->::ProtoPairMap::MergeFrom(from.prev_force_map());
    }
    if (from.has_is_big_act_time()) {
      set_is_big_act_time(from.is_big_act_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto30400103::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto30400103::CopyFrom(const Proto30400103& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto30400103::IsInitialized() const {
  
  return true;
}

void Proto30400103::Swap(Proto30400103* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(toward_, other->toward_);
    std::swap(scene_mode_, other->scene_mode_);
    std::swap(space_id_, other->space_id_);
    std::swap(prev_scene_id_, other->prev_scene_id_);
    std::swap(prev_scene_mode_, other->prev_scene_mode_);
    std::swap(prev_space_id_, other->prev_space_id_);
    std::swap(speed_basic_, other->speed_basic_);
    scene_history_.Swap(&other->scene_history_);
    std::swap(prev_town_coord_, other->prev_town_coord_);
    std::swap(prev_scene_coord_, other->prev_scene_coord_);
    std::swap(coord_, other->coord_);
    std::swap(s_scene_id_, other->s_scene_id_);
    std::swap(s_coord_, other->s_coord_);
    std::swap(s_blood_, other->s_blood_);
    std::swap(s_magic_, other->s_magic_);
    std::swap(s_pk_, other->s_pk_);
    std::swap(server_tick_, other->server_tick_);
    std::swap(drop_act_, other->drop_act_);
    std::swap(combine_tick_, other->combine_tick_);
    std::swap(prev_force_map_, other->prev_force_map_);
    std::swap(is_big_act_time_, other->is_big_act_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto30400103::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto30400103_descriptor_;
  metadata.reflection = Proto30400103_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto30400104::kRoleIdFieldNumber;
const int Proto30400104::kPkStateFieldNumber;
const int Proto30400104::kSavePkStateFieldNumber;
const int Proto30400104::kCampIdFieldNumber;
const int Proto30400104::kFightStateFieldNumber;
const int Proto30400104::kFightTickSecFieldNumber;
const int Proto30400104::kFightTickUsecFieldNumber;
const int Proto30400104::kLevelFieldNumber;
const int Proto30400104::kExperienceFieldNumber;
const int Proto30400104::kBloodFieldNumber;
const int Proto30400104::kMagicFieldNumber;
const int Proto30400104::kSkillListFieldNumber;
const int Proto30400104::kStatusListFieldNumber;
const int Proto30400104::kPrevFightMountFieldNumber;
const int Proto30400104::kAngryFieldNumber;
const int Proto30400104::kJumpFieldNumber;
const int Proto30400104::kCurRamaFieldNumber;
const int Proto30400104::kRamaListFieldNumber;
const int Proto30400104::kGlamourFieldNumber;
#endif  // !_MSC_VER

Proto30400104::Proto30400104()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto30400104::InitAsDefaultInstance() {
}

Proto30400104::Proto30400104(const Proto30400104& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto30400104::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  pk_state_ = 0;
  save_pk_state_ = 0;
  camp_id_ = 0;
  fight_state_ = 0;
  fight_tick_sec_ = GOOGLE_LONGLONG(0);
  fight_tick_usec_ = GOOGLE_LONGLONG(0);
  level_ = 0;
  experience_ = GOOGLE_LONGLONG(0);
  blood_ = 0;
  magic_ = 0;
  prev_fight_mount_ = 0;
  angry_ = 0;
  jump_ = 0;
  cur_rama_ = 0;
  glamour_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto30400104::~Proto30400104() {
  SharedDtor();
}

void Proto30400104::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto30400104::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto30400104::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto30400104_descriptor_;
}

const Proto30400104& Proto30400104::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInner001_2eproto();  return *default_instance_;
}

Proto30400104* Proto30400104::default_instance_ = NULL;

Proto30400104* Proto30400104::New() const {
  return new Proto30400104;
}

void Proto30400104::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_LONGLONG(0);
    pk_state_ = 0;
    save_pk_state_ = 0;
    camp_id_ = 0;
    fight_state_ = 0;
    fight_tick_sec_ = GOOGLE_LONGLONG(0);
    fight_tick_usec_ = GOOGLE_LONGLONG(0);
    level_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    experience_ = GOOGLE_LONGLONG(0);
    blood_ = 0;
    magic_ = 0;
    prev_fight_mount_ = 0;
    angry_ = 0;
    jump_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    cur_rama_ = 0;
    glamour_ = 0;
  }
  skill_list_.Clear();
  status_list_.Clear();
  rama_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto30400104::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pk_state;
        break;
      }
      
      // optional int32 pk_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pk_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pk_state_)));
          set_has_pk_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_save_pk_state;
        break;
      }
      
      // optional int32 save_pk_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_save_pk_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &save_pk_state_)));
          set_has_save_pk_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_camp_id;
        break;
      }
      
      // optional int32 camp_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_camp_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_id_)));
          set_has_camp_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fight_state;
        break;
      }
      
      // optional int32 fight_state = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_state_)));
          set_has_fight_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_fight_tick_sec;
        break;
      }
      
      // optional int64 fight_tick_sec = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_tick_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fight_tick_sec_)));
          set_has_fight_tick_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_fight_tick_usec;
        break;
      }
      
      // optional int64 fight_tick_usec = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_tick_usec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fight_tick_usec_)));
          set_has_fight_tick_usec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_level;
        break;
      }
      
      // optional int32 level = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_experience;
        break;
      }
      
      // optional int64 experience = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_experience:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &experience_)));
          set_has_experience();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_blood;
        break;
      }
      
      // optional int32 blood = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blood_)));
          set_has_blood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_magic;
        break;
      }
      
      // optional int32 magic = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magic_)));
          set_has_magic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_skill_list;
        break;
      }
      
      // repeated .ProtoSkill skill_list = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_skill_list;
        if (input->ExpectTag(106)) goto parse_status_list;
        break;
      }
      
      // repeated .ProtoSyncStatus status_list = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_status_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_status_list;
        if (input->ExpectTag(112)) goto parse_prev_fight_mount;
        break;
      }
      
      // optional int32 prev_fight_mount = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prev_fight_mount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prev_fight_mount_)));
          set_has_prev_fight_mount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_angry;
        break;
      }
      
      // optional int32 angry = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_angry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &angry_)));
          set_has_angry();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_jump;
        break;
      }
      
      // optional int32 jump = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jump:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jump_)));
          set_has_jump();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_cur_rama;
        break;
      }
      
      // optional int32 cur_rama = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_rama:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_rama_)));
          set_has_cur_rama();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_rama_list;
        break;
      }
      
      // repeated .ProtoPairObj rama_list = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rama_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rama_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_rama_list;
        if (input->ExpectTag(152)) goto parse_glamour;
        break;
      }
      
      // optional int32 glamour = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_glamour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &glamour_)));
          set_has_glamour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto30400104::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_id(), output);
  }
  
  // optional int32 pk_state = 2;
  if (has_pk_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pk_state(), output);
  }
  
  // optional int32 save_pk_state = 3;
  if (has_save_pk_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->save_pk_state(), output);
  }
  
  // optional int32 camp_id = 4;
  if (has_camp_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->camp_id(), output);
  }
  
  // optional int32 fight_state = 5;
  if (has_fight_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->fight_state(), output);
  }
  
  // optional int64 fight_tick_sec = 6;
  if (has_fight_tick_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->fight_tick_sec(), output);
  }
  
  // optional int64 fight_tick_usec = 7;
  if (has_fight_tick_usec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->fight_tick_usec(), output);
  }
  
  // optional int32 level = 8;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->level(), output);
  }
  
  // optional int64 experience = 9;
  if (has_experience()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->experience(), output);
  }
  
  // optional int32 blood = 10;
  if (has_blood()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->blood(), output);
  }
  
  // optional int32 magic = 11;
  if (has_magic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->magic(), output);
  }
  
  // repeated .ProtoSkill skill_list = 12;
  for (int i = 0; i < this->skill_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->skill_list(i), output);
  }
  
  // repeated .ProtoSyncStatus status_list = 13;
  for (int i = 0; i < this->status_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->status_list(i), output);
  }
  
  // optional int32 prev_fight_mount = 14;
  if (has_prev_fight_mount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->prev_fight_mount(), output);
  }
  
  // optional int32 angry = 15;
  if (has_angry()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->angry(), output);
  }
  
  // optional int32 jump = 16;
  if (has_jump()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->jump(), output);
  }
  
  // optional int32 cur_rama = 17;
  if (has_cur_rama()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->cur_rama(), output);
  }
  
  // repeated .ProtoPairObj rama_list = 18;
  for (int i = 0; i < this->rama_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->rama_list(i), output);
  }
  
  // optional int32 glamour = 19;
  if (has_glamour()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->glamour(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto30400104::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_id(), target);
  }
  
  // optional int32 pk_state = 2;
  if (has_pk_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pk_state(), target);
  }
  
  // optional int32 save_pk_state = 3;
  if (has_save_pk_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->save_pk_state(), target);
  }
  
  // optional int32 camp_id = 4;
  if (has_camp_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->camp_id(), target);
  }
  
  // optional int32 fight_state = 5;
  if (has_fight_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->fight_state(), target);
  }
  
  // optional int64 fight_tick_sec = 6;
  if (has_fight_tick_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->fight_tick_sec(), target);
  }
  
  // optional int64 fight_tick_usec = 7;
  if (has_fight_tick_usec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->fight_tick_usec(), target);
  }
  
  // optional int32 level = 8;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->level(), target);
  }
  
  // optional int64 experience = 9;
  if (has_experience()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->experience(), target);
  }
  
  // optional int32 blood = 10;
  if (has_blood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->blood(), target);
  }
  
  // optional int32 magic = 11;
  if (has_magic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->magic(), target);
  }
  
  // repeated .ProtoSkill skill_list = 12;
  for (int i = 0; i < this->skill_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->skill_list(i), target);
  }
  
  // repeated .ProtoSyncStatus status_list = 13;
  for (int i = 0; i < this->status_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->status_list(i), target);
  }
  
  // optional int32 prev_fight_mount = 14;
  if (has_prev_fight_mount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->prev_fight_mount(), target);
  }
  
  // optional int32 angry = 15;
  if (has_angry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->angry(), target);
  }
  
  // optional int32 jump = 16;
  if (has_jump()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->jump(), target);
  }
  
  // optional int32 cur_rama = 17;
  if (has_cur_rama()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->cur_rama(), target);
  }
  
  // repeated .ProtoPairObj rama_list = 18;
  for (int i = 0; i < this->rama_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->rama_list(i), target);
  }
  
  // optional int32 glamour = 19;
  if (has_glamour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->glamour(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto30400104::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional int32 pk_state = 2;
    if (has_pk_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pk_state());
    }
    
    // optional int32 save_pk_state = 3;
    if (has_save_pk_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->save_pk_state());
    }
    
    // optional int32 camp_id = 4;
    if (has_camp_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp_id());
    }
    
    // optional int32 fight_state = 5;
    if (has_fight_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight_state());
    }
    
    // optional int64 fight_tick_sec = 6;
    if (has_fight_tick_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fight_tick_sec());
    }
    
    // optional int64 fight_tick_usec = 7;
    if (has_fight_tick_usec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fight_tick_usec());
    }
    
    // optional int32 level = 8;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 experience = 9;
    if (has_experience()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->experience());
    }
    
    // optional int32 blood = 10;
    if (has_blood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blood());
    }
    
    // optional int32 magic = 11;
    if (has_magic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magic());
    }
    
    // optional int32 prev_fight_mount = 14;
    if (has_prev_fight_mount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prev_fight_mount());
    }
    
    // optional int32 angry = 15;
    if (has_angry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->angry());
    }
    
    // optional int32 jump = 16;
    if (has_jump()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jump());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 cur_rama = 17;
    if (has_cur_rama()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_rama());
    }
    
    // optional int32 glamour = 19;
    if (has_glamour()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->glamour());
    }
    
  }
  // repeated .ProtoSkill skill_list = 12;
  total_size += 1 * this->skill_list_size();
  for (int i = 0; i < this->skill_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill_list(i));
  }
  
  // repeated .ProtoSyncStatus status_list = 13;
  total_size += 1 * this->status_list_size();
  for (int i = 0; i < this->status_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->status_list(i));
  }
  
  // repeated .ProtoPairObj rama_list = 18;
  total_size += 2 * this->rama_list_size();
  for (int i = 0; i < this->rama_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rama_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto30400104::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto30400104* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto30400104*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto30400104::MergeFrom(const Proto30400104& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_list_.MergeFrom(from.skill_list_);
  status_list_.MergeFrom(from.status_list_);
  rama_list_.MergeFrom(from.rama_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_pk_state()) {
      set_pk_state(from.pk_state());
    }
    if (from.has_save_pk_state()) {
      set_save_pk_state(from.save_pk_state());
    }
    if (from.has_camp_id()) {
      set_camp_id(from.camp_id());
    }
    if (from.has_fight_state()) {
      set_fight_state(from.fight_state());
    }
    if (from.has_fight_tick_sec()) {
      set_fight_tick_sec(from.fight_tick_sec());
    }
    if (from.has_fight_tick_usec()) {
      set_fight_tick_usec(from.fight_tick_usec());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_experience()) {
      set_experience(from.experience());
    }
    if (from.has_blood()) {
      set_blood(from.blood());
    }
    if (from.has_magic()) {
      set_magic(from.magic());
    }
    if (from.has_prev_fight_mount()) {
      set_prev_fight_mount(from.prev_fight_mount());
    }
    if (from.has_angry()) {
      set_angry(from.angry());
    }
    if (from.has_jump()) {
      set_jump(from.jump());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_cur_rama()) {
      set_cur_rama(from.cur_rama());
    }
    if (from.has_glamour()) {
      set_glamour(from.glamour());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto30400104::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto30400104::CopyFrom(const Proto30400104& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto30400104::IsInitialized() const {
  
  return true;
}

void Proto30400104::Swap(Proto30400104* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(pk_state_, other->pk_state_);
    std::swap(save_pk_state_, other->save_pk_state_);
    std::swap(camp_id_, other->camp_id_);
    std::swap(fight_state_, other->fight_state_);
    std::swap(fight_tick_sec_, other->fight_tick_sec_);
    std::swap(fight_tick_usec_, other->fight_tick_usec_);
    std::swap(level_, other->level_);
    std::swap(experience_, other->experience_);
    std::swap(blood_, other->blood_);
    std::swap(magic_, other->magic_);
    skill_list_.Swap(&other->skill_list_);
    status_list_.Swap(&other->status_list_);
    std::swap(prev_fight_mount_, other->prev_fight_mount_);
    std::swap(angry_, other->angry_);
    std::swap(jump_, other->jump_);
    std::swap(cur_rama_, other->cur_rama_);
    rama_list_.Swap(&other->rama_list_);
    std::swap(glamour_, other->glamour_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto30400104::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto30400104_descriptor_;
  metadata.reflection = Proto30400104_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto30400105::kRoleIdFieldNumber;
const int Proto30400105::kSignInTickFieldNumber;
const int Proto30400105::kSignOutTickFieldNumber;
const int Proto30400105::kTotalOnlineTickFieldNumber;
const int Proto30400105::kDayOnlineTickFieldNumber;
const int Proto30400105::kWeekOnlineTickFieldNumber;
const int Proto30400105::kMonthOnlineTickFieldNumber;
const int Proto30400105::kYearOnlineTickFieldNumber;
const int Proto30400105::kDayRefreshTickFieldNumber;
const int Proto30400105::kWeekRefreshTickFieldNumber;
const int Proto30400105::kMonthRefreshTickFieldNumber;
const int Proto30400105::kYearRefreshTickFieldNumber;
#endif  // !_MSC_VER

Proto30400105::Proto30400105()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto30400105::InitAsDefaultInstance() {
}

Proto30400105::Proto30400105(const Proto30400105& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto30400105::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  sign_in_tick_ = 0;
  sign_out_tick_ = 0;
  total_online_tick_ = GOOGLE_LONGLONG(0);
  day_online_tick_ = GOOGLE_LONGLONG(0);
  week_online_tick_ = GOOGLE_LONGLONG(0);
  month_online_tick_ = GOOGLE_LONGLONG(0);
  year_online_tick_ = GOOGLE_LONGLONG(0);
  day_refresh_tick_ = 0;
  week_refresh_tick_ = 0;
  month_refresh_tick_ = 0;
  year_refresh_tick_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto30400105::~Proto30400105() {
  SharedDtor();
}

void Proto30400105::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto30400105::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto30400105::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto30400105_descriptor_;
}

const Proto30400105& Proto30400105::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInner001_2eproto();  return *default_instance_;
}

Proto30400105* Proto30400105::default_instance_ = NULL;

Proto30400105* Proto30400105::New() const {
  return new Proto30400105;
}

void Proto30400105::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_LONGLONG(0);
    sign_in_tick_ = 0;
    sign_out_tick_ = 0;
    total_online_tick_ = GOOGLE_LONGLONG(0);
    day_online_tick_ = GOOGLE_LONGLONG(0);
    week_online_tick_ = GOOGLE_LONGLONG(0);
    month_online_tick_ = GOOGLE_LONGLONG(0);
    year_online_tick_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    day_refresh_tick_ = 0;
    week_refresh_tick_ = 0;
    month_refresh_tick_ = 0;
    year_refresh_tick_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto30400105::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sign_in_tick;
        break;
      }
      
      // optional int32 sign_in_tick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sign_in_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sign_in_tick_)));
          set_has_sign_in_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sign_out_tick;
        break;
      }
      
      // optional int32 sign_out_tick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sign_out_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sign_out_tick_)));
          set_has_sign_out_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total_online_tick;
        break;
      }
      
      // optional int64 total_online_tick = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_online_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_online_tick_)));
          set_has_total_online_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_day_online_tick;
        break;
      }
      
      // optional int64 day_online_tick = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_day_online_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &day_online_tick_)));
          set_has_day_online_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_week_online_tick;
        break;
      }
      
      // optional int64 week_online_tick = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week_online_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &week_online_tick_)));
          set_has_week_online_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_month_online_tick;
        break;
      }
      
      // optional int64 month_online_tick = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_month_online_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &month_online_tick_)));
          set_has_month_online_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_year_online_tick;
        break;
      }
      
      // optional int64 year_online_tick = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_year_online_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &year_online_tick_)));
          set_has_year_online_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_day_refresh_tick;
        break;
      }
      
      // optional int32 day_refresh_tick = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_day_refresh_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_refresh_tick_)));
          set_has_day_refresh_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_week_refresh_tick;
        break;
      }
      
      // optional int32 week_refresh_tick = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week_refresh_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &week_refresh_tick_)));
          set_has_week_refresh_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_month_refresh_tick;
        break;
      }
      
      // optional int32 month_refresh_tick = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_month_refresh_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &month_refresh_tick_)));
          set_has_month_refresh_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_year_refresh_tick;
        break;
      }
      
      // optional int32 year_refresh_tick = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_year_refresh_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &year_refresh_tick_)));
          set_has_year_refresh_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto30400105::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_id(), output);
  }
  
  // optional int32 sign_in_tick = 2;
  if (has_sign_in_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sign_in_tick(), output);
  }
  
  // optional int32 sign_out_tick = 3;
  if (has_sign_out_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sign_out_tick(), output);
  }
  
  // optional int64 total_online_tick = 4;
  if (has_total_online_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->total_online_tick(), output);
  }
  
  // optional int64 day_online_tick = 5;
  if (has_day_online_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->day_online_tick(), output);
  }
  
  // optional int64 week_online_tick = 6;
  if (has_week_online_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->week_online_tick(), output);
  }
  
  // optional int64 month_online_tick = 7;
  if (has_month_online_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->month_online_tick(), output);
  }
  
  // optional int64 year_online_tick = 8;
  if (has_year_online_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->year_online_tick(), output);
  }
  
  // optional int32 day_refresh_tick = 9;
  if (has_day_refresh_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->day_refresh_tick(), output);
  }
  
  // optional int32 week_refresh_tick = 10;
  if (has_week_refresh_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->week_refresh_tick(), output);
  }
  
  // optional int32 month_refresh_tick = 11;
  if (has_month_refresh_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->month_refresh_tick(), output);
  }
  
  // optional int32 year_refresh_tick = 12;
  if (has_year_refresh_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->year_refresh_tick(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto30400105::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_id(), target);
  }
  
  // optional int32 sign_in_tick = 2;
  if (has_sign_in_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sign_in_tick(), target);
  }
  
  // optional int32 sign_out_tick = 3;
  if (has_sign_out_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sign_out_tick(), target);
  }
  
  // optional int64 total_online_tick = 4;
  if (has_total_online_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->total_online_tick(), target);
  }
  
  // optional int64 day_online_tick = 5;
  if (has_day_online_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->day_online_tick(), target);
  }
  
  // optional int64 week_online_tick = 6;
  if (has_week_online_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->week_online_tick(), target);
  }
  
  // optional int64 month_online_tick = 7;
  if (has_month_online_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->month_online_tick(), target);
  }
  
  // optional int64 year_online_tick = 8;
  if (has_year_online_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->year_online_tick(), target);
  }
  
  // optional int32 day_refresh_tick = 9;
  if (has_day_refresh_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->day_refresh_tick(), target);
  }
  
  // optional int32 week_refresh_tick = 10;
  if (has_week_refresh_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->week_refresh_tick(), target);
  }
  
  // optional int32 month_refresh_tick = 11;
  if (has_month_refresh_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->month_refresh_tick(), target);
  }
  
  // optional int32 year_refresh_tick = 12;
  if (has_year_refresh_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->year_refresh_tick(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto30400105::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional int32 sign_in_tick = 2;
    if (has_sign_in_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sign_in_tick());
    }
    
    // optional int32 sign_out_tick = 3;
    if (has_sign_out_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sign_out_tick());
    }
    
    // optional int64 total_online_tick = 4;
    if (has_total_online_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_online_tick());
    }
    
    // optional int64 day_online_tick = 5;
    if (has_day_online_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->day_online_tick());
    }
    
    // optional int64 week_online_tick = 6;
    if (has_week_online_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->week_online_tick());
    }
    
    // optional int64 month_online_tick = 7;
    if (has_month_online_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->month_online_tick());
    }
    
    // optional int64 year_online_tick = 8;
    if (has_year_online_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->year_online_tick());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 day_refresh_tick = 9;
    if (has_day_refresh_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day_refresh_tick());
    }
    
    // optional int32 week_refresh_tick = 10;
    if (has_week_refresh_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->week_refresh_tick());
    }
    
    // optional int32 month_refresh_tick = 11;
    if (has_month_refresh_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->month_refresh_tick());
    }
    
    // optional int32 year_refresh_tick = 12;
    if (has_year_refresh_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->year_refresh_tick());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto30400105::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto30400105* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto30400105*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto30400105::MergeFrom(const Proto30400105& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_sign_in_tick()) {
      set_sign_in_tick(from.sign_in_tick());
    }
    if (from.has_sign_out_tick()) {
      set_sign_out_tick(from.sign_out_tick());
    }
    if (from.has_total_online_tick()) {
      set_total_online_tick(from.total_online_tick());
    }
    if (from.has_day_online_tick()) {
      set_day_online_tick(from.day_online_tick());
    }
    if (from.has_week_online_tick()) {
      set_week_online_tick(from.week_online_tick());
    }
    if (from.has_month_online_tick()) {
      set_month_online_tick(from.month_online_tick());
    }
    if (from.has_year_online_tick()) {
      set_year_online_tick(from.year_online_tick());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_day_refresh_tick()) {
      set_day_refresh_tick(from.day_refresh_tick());
    }
    if (from.has_week_refresh_tick()) {
      set_week_refresh_tick(from.week_refresh_tick());
    }
    if (from.has_month_refresh_tick()) {
      set_month_refresh_tick(from.month_refresh_tick());
    }
    if (from.has_year_refresh_tick()) {
      set_year_refresh_tick(from.year_refresh_tick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto30400105::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto30400105::CopyFrom(const Proto30400105& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto30400105::IsInitialized() const {
  
  return true;
}

void Proto30400105::Swap(Proto30400105* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(sign_in_tick_, other->sign_in_tick_);
    std::swap(sign_out_tick_, other->sign_out_tick_);
    std::swap(total_online_tick_, other->total_online_tick_);
    std::swap(day_online_tick_, other->day_online_tick_);
    std::swap(week_online_tick_, other->week_online_tick_);
    std::swap(month_online_tick_, other->month_online_tick_);
    std::swap(year_online_tick_, other->year_online_tick_);
    std::swap(day_refresh_tick_, other->day_refresh_tick_);
    std::swap(week_refresh_tick_, other->week_refresh_tick_);
    std::swap(month_refresh_tick_, other->month_refresh_tick_);
    std::swap(year_refresh_tick_, other->year_refresh_tick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto30400105::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto30400105_descriptor_;
  metadata.reflection = Proto30400105_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto30400201::kRoleIdFieldNumber;
const int Proto30400201::kCareerFieldNumber;
const int Proto30400201::kSceneIdFieldNumber;
const int Proto30400201::kCampIdFieldNumber;
const int Proto30400201::kPermissionFieldNumber;
const int Proto30400201::kLevelFieldNumber;
const int Proto30400201::kForceFieldNumber;
const int Proto30400201::kSceneModeFieldNumber;
const int Proto30400201::kSpaceIdFieldNumber;
const int Proto30400201::kPrevSceneFieldNumber;
#endif  // !_MSC_VER

Proto30400201::Proto30400201()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto30400201::InitAsDefaultInstance() {
}

Proto30400201::Proto30400201(const Proto30400201& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto30400201::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  career_ = 0;
  scene_id_ = 0;
  camp_id_ = 0;
  permission_ = 0;
  level_ = 0;
  force_ = 0;
  scene_mode_ = 0;
  space_id_ = 0;
  prev_scene_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto30400201::~Proto30400201() {
  SharedDtor();
}

void Proto30400201::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto30400201::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto30400201::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto30400201_descriptor_;
}

const Proto30400201& Proto30400201::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInner001_2eproto();  return *default_instance_;
}

Proto30400201* Proto30400201::default_instance_ = NULL;

Proto30400201* Proto30400201::New() const {
  return new Proto30400201;
}

void Proto30400201::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_LONGLONG(0);
    career_ = 0;
    scene_id_ = 0;
    camp_id_ = 0;
    permission_ = 0;
    level_ = 0;
    force_ = 0;
    scene_mode_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    space_id_ = 0;
    prev_scene_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto30400201::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_career;
        break;
      }
      
      // optional int32 career = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_career:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &career_)));
          set_has_career();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_scene_id;
        break;
      }
      
      // optional int32 scene_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_camp_id;
        break;
      }
      
      // optional int32 camp_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_camp_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_id_)));
          set_has_camp_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_permission;
        break;
      }
      
      // optional int32 permission = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_permission:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &permission_)));
          set_has_permission();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }
      
      // optional int32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_force;
        break;
      }
      
      // optional int32 force = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &force_)));
          set_has_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_scene_mode;
        break;
      }
      
      // optional int32 scene_mode = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_mode_)));
          set_has_scene_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_space_id;
        break;
      }
      
      // optional int32 space_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_space_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &space_id_)));
          set_has_space_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_prev_scene;
        break;
      }
      
      // optional int32 prev_scene = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prev_scene:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prev_scene_)));
          set_has_prev_scene();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto30400201::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_id(), output);
  }
  
  // optional int32 career = 2;
  if (has_career()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->career(), output);
  }
  
  // optional int32 scene_id = 3;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->scene_id(), output);
  }
  
  // optional int32 camp_id = 4;
  if (has_camp_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->camp_id(), output);
  }
  
  // optional int32 permission = 5;
  if (has_permission()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->permission(), output);
  }
  
  // optional int32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->level(), output);
  }
  
  // optional int32 force = 7;
  if (has_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->force(), output);
  }
  
  // optional int32 scene_mode = 8;
  if (has_scene_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->scene_mode(), output);
  }
  
  // optional int32 space_id = 9;
  if (has_space_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->space_id(), output);
  }
  
  // optional int32 prev_scene = 10;
  if (has_prev_scene()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->prev_scene(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto30400201::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_id(), target);
  }
  
  // optional int32 career = 2;
  if (has_career()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->career(), target);
  }
  
  // optional int32 scene_id = 3;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->scene_id(), target);
  }
  
  // optional int32 camp_id = 4;
  if (has_camp_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->camp_id(), target);
  }
  
  // optional int32 permission = 5;
  if (has_permission()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->permission(), target);
  }
  
  // optional int32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->level(), target);
  }
  
  // optional int32 force = 7;
  if (has_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->force(), target);
  }
  
  // optional int32 scene_mode = 8;
  if (has_scene_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->scene_mode(), target);
  }
  
  // optional int32 space_id = 9;
  if (has_space_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->space_id(), target);
  }
  
  // optional int32 prev_scene = 10;
  if (has_prev_scene()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->prev_scene(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto30400201::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional int32 career = 2;
    if (has_career()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->career());
    }
    
    // optional int32 scene_id = 3;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_id());
    }
    
    // optional int32 camp_id = 4;
    if (has_camp_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp_id());
    }
    
    // optional int32 permission = 5;
    if (has_permission()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->permission());
    }
    
    // optional int32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 force = 7;
    if (has_force()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->force());
    }
    
    // optional int32 scene_mode = 8;
    if (has_scene_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_mode());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 space_id = 9;
    if (has_space_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->space_id());
    }
    
    // optional int32 prev_scene = 10;
    if (has_prev_scene()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prev_scene());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto30400201::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto30400201* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto30400201*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto30400201::MergeFrom(const Proto30400201& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_career()) {
      set_career(from.career());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_camp_id()) {
      set_camp_id(from.camp_id());
    }
    if (from.has_permission()) {
      set_permission(from.permission());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_force()) {
      set_force(from.force());
    }
    if (from.has_scene_mode()) {
      set_scene_mode(from.scene_mode());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_space_id()) {
      set_space_id(from.space_id());
    }
    if (from.has_prev_scene()) {
      set_prev_scene(from.prev_scene());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto30400201::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto30400201::CopyFrom(const Proto30400201& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto30400201::IsInitialized() const {
  
  return true;
}

void Proto30400201::Swap(Proto30400201* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(career_, other->career_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(camp_id_, other->camp_id_);
    std::swap(permission_, other->permission_);
    std::swap(level_, other->level_);
    std::swap(force_, other->force_);
    std::swap(scene_mode_, other->scene_mode_);
    std::swap(space_id_, other->space_id_);
    std::swap(prev_scene_, other->prev_scene_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto30400201::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto30400201_descriptor_;
  metadata.reflection = Proto30400201_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto30310001::kLogTypeFieldNumber;
const int Proto30310001::kLogSubTypeFieldNumber;
const int Proto30310001::kPidFieldNumber;
const int Proto30310001::kNowtimeFieldNumber;
const int Proto30310001::kLogTextFieldNumber;
#endif  // !_MSC_VER

Proto30310001::Proto30310001()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto30310001::InitAsDefaultInstance() {
}

Proto30310001::Proto30310001(const Proto30310001& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto30310001::SharedCtor() {
  _cached_size_ = 0;
  log_type_ = 0;
  log_sub_type_ = 0;
  pid_ = 0;
  nowtime_ = 0;
  log_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto30310001::~Proto30310001() {
  SharedDtor();
}

void Proto30310001::SharedDtor() {
  if (log_text_ != &::google::protobuf::internal::kEmptyString) {
    delete log_text_;
  }
  if (this != default_instance_) {
  }
}

void Proto30310001::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto30310001::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto30310001_descriptor_;
}

const Proto30310001& Proto30310001::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInner001_2eproto();  return *default_instance_;
}

Proto30310001* Proto30310001::default_instance_ = NULL;

Proto30310001* Proto30310001::New() const {
  return new Proto30310001;
}

void Proto30310001::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    log_type_ = 0;
    log_sub_type_ = 0;
    pid_ = 0;
    nowtime_ = 0;
    if (has_log_text()) {
      if (log_text_ != &::google::protobuf::internal::kEmptyString) {
        log_text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto30310001::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 log_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &log_type_)));
          set_has_log_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_log_sub_type;
        break;
      }
      
      // optional int32 log_sub_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_sub_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &log_sub_type_)));
          set_has_log_sub_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pid;
        break;
      }
      
      // optional int32 pid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nowtime;
        break;
      }
      
      // optional int32 nowtime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nowtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nowtime_)));
          set_has_nowtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_log_text;
        break;
      }
      
      // optional string log_text = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->log_text().data(), this->log_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto30310001::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 log_type = 1;
  if (has_log_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->log_type(), output);
  }
  
  // optional int32 log_sub_type = 2;
  if (has_log_sub_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->log_sub_type(), output);
  }
  
  // optional int32 pid = 3;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pid(), output);
  }
  
  // optional int32 nowtime = 4;
  if (has_nowtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->nowtime(), output);
  }
  
  // optional string log_text = 5;
  if (has_log_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log_text().data(), this->log_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->log_text(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto30310001::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 log_type = 1;
  if (has_log_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->log_type(), target);
  }
  
  // optional int32 log_sub_type = 2;
  if (has_log_sub_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->log_sub_type(), target);
  }
  
  // optional int32 pid = 3;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pid(), target);
  }
  
  // optional int32 nowtime = 4;
  if (has_nowtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->nowtime(), target);
  }
  
  // optional string log_text = 5;
  if (has_log_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log_text().data(), this->log_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->log_text(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto30310001::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 log_type = 1;
    if (has_log_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->log_type());
    }
    
    // optional int32 log_sub_type = 2;
    if (has_log_sub_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->log_sub_type());
    }
    
    // optional int32 pid = 3;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pid());
    }
    
    // optional int32 nowtime = 4;
    if (has_nowtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nowtime());
    }
    
    // optional string log_text = 5;
    if (has_log_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->log_text());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto30310001::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto30310001* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto30310001*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto30310001::MergeFrom(const Proto30310001& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_log_type()) {
      set_log_type(from.log_type());
    }
    if (from.has_log_sub_type()) {
      set_log_sub_type(from.log_sub_type());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_nowtime()) {
      set_nowtime(from.nowtime());
    }
    if (from.has_log_text()) {
      set_log_text(from.log_text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto30310001::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto30310001::CopyFrom(const Proto30310001& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto30310001::IsInitialized() const {
  
  return true;
}

void Proto30310001::Swap(Proto30310001* other) {
  if (other != this) {
    std::swap(log_type_, other->log_type_);
    std::swap(log_sub_type_, other->log_sub_type_);
    std::swap(pid_, other->pid_);
    std::swap(nowtime_, other->nowtime_);
    std::swap(log_text_, other->log_text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto30310001::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto30310001_descriptor_;
  metadata.reflection = Proto30310001_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto30330001::kTableNameFieldNumber;
const int Proto30330001::kDataFieldNumber;
#endif  // !_MSC_VER

Proto30330001::Proto30330001()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto30330001::InitAsDefaultInstance() {
}

Proto30330001::Proto30330001(const Proto30330001& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto30330001::SharedCtor() {
  _cached_size_ = 0;
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto30330001::~Proto30330001() {
  SharedDtor();
}

void Proto30330001::SharedDtor() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void Proto30330001::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto30330001::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto30330001_descriptor_;
}

const Proto30330001& Proto30330001::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInner001_2eproto();  return *default_instance_;
}

Proto30330001* Proto30330001::default_instance_ = NULL;

Proto30330001* Proto30330001::New() const {
  return new Proto30330001;
}

void Proto30330001::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::kEmptyString) {
        table_name_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto30330001::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }
      
      // optional bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto30330001::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->table_name(), output);
  }
  
  // optional bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto30330001::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }
  
  // optional bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto30330001::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }
    
    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto30330001::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto30330001* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto30330001*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto30330001::MergeFrom(const Proto30330001& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto30330001::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto30330001::CopyFrom(const Proto30330001& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto30330001::IsInitialized() const {
  
  return true;
}

void Proto30330001::Swap(Proto30330001* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto30330001::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto30330001_descriptor_;
  metadata.reflection = Proto30330001_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto30800001::kRoleSizeFieldNumber;
const int Proto30800001::kRoleIdFieldNumber;
const int Proto30800001::kRecognFieldNumber;
const int Proto30800001::kArgsFieldNumber;
#endif  // !_MSC_VER

Proto30800001::Proto30800001()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto30800001::InitAsDefaultInstance() {
}

Proto30800001::Proto30800001(const Proto30800001& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto30800001::SharedCtor() {
  _cached_size_ = 0;
  role_size_ = 0;
  recogn_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto30800001::~Proto30800001() {
  SharedDtor();
}

void Proto30800001::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto30800001::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto30800001::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto30800001_descriptor_;
}

const Proto30800001& Proto30800001::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInner001_2eproto();  return *default_instance_;
}

Proto30800001* Proto30800001::default_instance_ = NULL;

Proto30800001* Proto30800001::New() const {
  return new Proto30800001;
}

void Proto30800001::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_size_ = 0;
    recogn_ = 0;
  }
  role_id_.Clear();
  args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto30800001::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 role_size = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_size_)));
          set_has_role_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }
      
      // repeated int64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_role_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_role_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        if (input->ExpectTag(24)) goto parse_recogn;
        break;
      }
      
      // optional int32 recogn = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recogn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recogn_)));
          set_has_recogn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_args;
        break;
      }
      
      // repeated int32 args = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_args:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_args())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_args())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_args;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto30800001::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 role_size = 1;
  if (has_role_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->role_size(), output);
  }
  
  // repeated int64 role_id = 2;
  for (int i = 0; i < this->role_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->role_id(i), output);
  }
  
  // optional int32 recogn = 3;
  if (has_recogn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->recogn(), output);
  }
  
  // repeated int32 args = 4;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->args(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto30800001::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 role_size = 1;
  if (has_role_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->role_size(), target);
  }
  
  // repeated int64 role_id = 2;
  for (int i = 0; i < this->role_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->role_id(i), target);
  }
  
  // optional int32 recogn = 3;
  if (has_recogn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->recogn(), target);
  }
  
  // repeated int32 args = 4;
  for (int i = 0; i < this->args_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->args(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto30800001::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 role_size = 1;
    if (has_role_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_size());
    }
    
    // optional int32 recogn = 3;
    if (has_recogn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recogn());
    }
    
  }
  // repeated int64 role_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->role_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->role_id(i));
    }
    total_size += 1 * this->role_id_size() + data_size;
  }
  
  // repeated int32 args = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->args_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->args(i));
    }
    total_size += 1 * this->args_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto30800001::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto30800001* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto30800001*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto30800001::MergeFrom(const Proto30800001& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_id_.MergeFrom(from.role_id_);
  args_.MergeFrom(from.args_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_size()) {
      set_role_size(from.role_size());
    }
    if (from.has_recogn()) {
      set_recogn(from.recogn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto30800001::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto30800001::CopyFrom(const Proto30800001& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto30800001::IsInitialized() const {
  
  return true;
}

void Proto30800001::Swap(Proto30800001* other) {
  if (other != this) {
    std::swap(role_size_, other->role_size_);
    role_id_.Swap(&other->role_id_);
    std::swap(recogn_, other->recogn_);
    args_.Swap(&other->args_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto30800001::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto30800001_descriptor_;
  metadata.reflection = Proto30800001_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto30200101::kRoleIdFieldNumber;
const int Proto30200101::kNameFieldNumber;
const int Proto30200101::kLevelFieldNumber;
const int Proto30200101::kSexFieldNumber;
const int Proto30200101::kPermissionFieldNumber;
const int Proto30200101::kCareerFieldNumber;
const int Proto30200101::kSceneIdFieldNumber;
const int Proto30200101::kVipFieldNumber;
const int Proto30200101::kLeagueIdFieldNumber;
const int Proto30200101::kLeagueNameFieldNumber;
const int Proto30200101::kLabelIdFieldNumber;
const int Proto30200101::kTeamIdFieldNumber;
const int Proto30200101::kLastSignOutFieldNumber;
const int Proto30200101::kAgentCodeFieldNumber;
const int Proto30200101::kServerFlagFieldNumber;
const int Proto30200101::kMarketCodeFieldNumber;
const int Proto30200101::kServerPrevFieldNumber;
const int Proto30200101::kServerNameFieldNumber;
const int Proto30200101::kAreaIdFieldNumber;
const int Proto30200101::kSessionInfoFieldNumber;
#endif  // !_MSC_VER

Proto30200101::Proto30200101()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto30200101::InitAsDefaultInstance() {
  session_info_ = const_cast< ::ProtoSession*>(&::ProtoSession::default_instance());
}

Proto30200101::Proto30200101(const Proto30200101& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto30200101::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  sex_ = 0;
  permission_ = 0;
  career_ = 0;
  scene_id_ = 0;
  vip_ = 0;
  league_id_ = GOOGLE_LONGLONG(0);
  league_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  label_id_ = 0;
  team_id_ = 0;
  last_sign_out_ = 0;
  agent_code_ = 0;
  server_flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  market_code_ = 0;
  server_prev_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  area_id_ = 0;
  session_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto30200101::~Proto30200101() {
  SharedDtor();
}

void Proto30200101::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (league_name_ != &::google::protobuf::internal::kEmptyString) {
    delete league_name_;
  }
  if (server_flag_ != &::google::protobuf::internal::kEmptyString) {
    delete server_flag_;
  }
  if (server_prev_ != &::google::protobuf::internal::kEmptyString) {
    delete server_prev_;
  }
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (this != default_instance_) {
    delete session_info_;
  }
}

void Proto30200101::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto30200101::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto30200101_descriptor_;
}

const Proto30200101& Proto30200101::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInner001_2eproto();  return *default_instance_;
}

Proto30200101* Proto30200101::default_instance_ = NULL;

Proto30200101* Proto30200101::New() const {
  return new Proto30200101;
}

void Proto30200101::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0;
    sex_ = 0;
    permission_ = 0;
    career_ = 0;
    scene_id_ = 0;
    vip_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    league_id_ = GOOGLE_LONGLONG(0);
    if (has_league_name()) {
      if (league_name_ != &::google::protobuf::internal::kEmptyString) {
        league_name_->clear();
      }
    }
    label_id_ = 0;
    team_id_ = 0;
    last_sign_out_ = 0;
    agent_code_ = 0;
    if (has_server_flag()) {
      if (server_flag_ != &::google::protobuf::internal::kEmptyString) {
        server_flag_->clear();
      }
    }
    market_code_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_server_prev()) {
      if (server_prev_ != &::google::protobuf::internal::kEmptyString) {
        server_prev_->clear();
      }
    }
    if (has_server_name()) {
      if (server_name_ != &::google::protobuf::internal::kEmptyString) {
        server_name_->clear();
      }
    }
    area_id_ = 0;
    if (has_session_info()) {
      if (session_info_ != NULL) session_info_->::ProtoSession::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto30200101::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }
      
      // optional int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sex;
        break;
      }
      
      // optional int32 sex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_permission;
        break;
      }
      
      // optional int32 permission = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_permission:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &permission_)));
          set_has_permission();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_career;
        break;
      }
      
      // optional int32 career = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_career:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &career_)));
          set_has_career();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_scene_id;
        break;
      }
      
      // optional int32 scene_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_vip;
        break;
      }
      
      // optional int32 vip = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_league_id;
        break;
      }
      
      // optional int64 league_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_league_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &league_id_)));
          set_has_league_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_league_name;
        break;
      }
      
      // optional string league_name = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_league_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_league_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->league_name().data(), this->league_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_label_id;
        break;
      }
      
      // optional int32 label_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_label_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &label_id_)));
          set_has_label_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_team_id;
        break;
      }
      
      // optional int32 team_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_last_sign_out;
        break;
      }
      
      // optional int32 last_sign_out = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_sign_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_sign_out_)));
          set_has_last_sign_out();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_agent_code;
        break;
      }
      
      // optional int32 agent_code = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agent_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agent_code_)));
          set_has_agent_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_server_flag;
        break;
      }
      
      // optional string server_flag = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_flag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_flag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_flag().data(), this->server_flag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_market_code;
        break;
      }
      
      // optional int32 market_code = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_market_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &market_code_)));
          set_has_market_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_server_prev;
        break;
      }
      
      // optional string server_prev = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_prev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_prev()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_prev().data(), this->server_prev().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_server_name;
        break;
      }
      
      // optional string server_name = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_name().data(), this->server_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_area_id;
        break;
      }
      
      // optional int32 area_id = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_session_info;
        break;
      }
      
      // optional .ProtoSession session_info = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto30200101::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_id(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }
  
  // optional int32 sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sex(), output);
  }
  
  // optional int32 permission = 5;
  if (has_permission()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->permission(), output);
  }
  
  // optional int32 career = 6;
  if (has_career()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->career(), output);
  }
  
  // optional int32 scene_id = 7;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->scene_id(), output);
  }
  
  // optional int32 vip = 8;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->vip(), output);
  }
  
  // optional int64 league_id = 9;
  if (has_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->league_id(), output);
  }
  
  // optional string league_name = 10;
  if (has_league_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->league_name().data(), this->league_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->league_name(), output);
  }
  
  // optional int32 label_id = 11;
  if (has_label_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->label_id(), output);
  }
  
  // optional int32 team_id = 12;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->team_id(), output);
  }
  
  // optional int32 last_sign_out = 13;
  if (has_last_sign_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->last_sign_out(), output);
  }
  
  // optional int32 agent_code = 14;
  if (has_agent_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->agent_code(), output);
  }
  
  // optional string server_flag = 15;
  if (has_server_flag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_flag().data(), this->server_flag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->server_flag(), output);
  }
  
  // optional int32 market_code = 16;
  if (has_market_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->market_code(), output);
  }
  
  // optional string server_prev = 17;
  if (has_server_prev()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_prev().data(), this->server_prev().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->server_prev(), output);
  }
  
  // optional string server_name = 18;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->server_name(), output);
  }
  
  // optional int32 area_id = 19;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->area_id(), output);
  }
  
  // optional .ProtoSession session_info = 20;
  if (has_session_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->session_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto30200101::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_id(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }
  
  // optional int32 sex = 4;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sex(), target);
  }
  
  // optional int32 permission = 5;
  if (has_permission()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->permission(), target);
  }
  
  // optional int32 career = 6;
  if (has_career()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->career(), target);
  }
  
  // optional int32 scene_id = 7;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->scene_id(), target);
  }
  
  // optional int32 vip = 8;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->vip(), target);
  }
  
  // optional int64 league_id = 9;
  if (has_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->league_id(), target);
  }
  
  // optional string league_name = 10;
  if (has_league_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->league_name().data(), this->league_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->league_name(), target);
  }
  
  // optional int32 label_id = 11;
  if (has_label_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->label_id(), target);
  }
  
  // optional int32 team_id = 12;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->team_id(), target);
  }
  
  // optional int32 last_sign_out = 13;
  if (has_last_sign_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->last_sign_out(), target);
  }
  
  // optional int32 agent_code = 14;
  if (has_agent_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->agent_code(), target);
  }
  
  // optional string server_flag = 15;
  if (has_server_flag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_flag().data(), this->server_flag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->server_flag(), target);
  }
  
  // optional int32 market_code = 16;
  if (has_market_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->market_code(), target);
  }
  
  // optional string server_prev = 17;
  if (has_server_prev()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_prev().data(), this->server_prev().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->server_prev(), target);
  }
  
  // optional string server_name = 18;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->server_name(), target);
  }
  
  // optional int32 area_id = 19;
  if (has_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->area_id(), target);
  }
  
  // optional .ProtoSession session_info = 20;
  if (has_session_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->session_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto30200101::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }
    
    // optional int32 permission = 5;
    if (has_permission()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->permission());
    }
    
    // optional int32 career = 6;
    if (has_career()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->career());
    }
    
    // optional int32 scene_id = 7;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_id());
    }
    
    // optional int32 vip = 8;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 league_id = 9;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->league_id());
    }
    
    // optional string league_name = 10;
    if (has_league_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->league_name());
    }
    
    // optional int32 label_id = 11;
    if (has_label_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->label_id());
    }
    
    // optional int32 team_id = 12;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_id());
    }
    
    // optional int32 last_sign_out = 13;
    if (has_last_sign_out()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_sign_out());
    }
    
    // optional int32 agent_code = 14;
    if (has_agent_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->agent_code());
    }
    
    // optional string server_flag = 15;
    if (has_server_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_flag());
    }
    
    // optional int32 market_code = 16;
    if (has_market_code()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->market_code());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string server_prev = 17;
    if (has_server_prev()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_prev());
    }
    
    // optional string server_name = 18;
    if (has_server_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_name());
    }
    
    // optional int32 area_id = 19;
    if (has_area_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->area_id());
    }
    
    // optional .ProtoSession session_info = 20;
    if (has_session_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto30200101::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto30200101* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto30200101*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto30200101::MergeFrom(const Proto30200101& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_permission()) {
      set_permission(from.permission());
    }
    if (from.has_career()) {
      set_career(from.career());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_league_id()) {
      set_league_id(from.league_id());
    }
    if (from.has_league_name()) {
      set_league_name(from.league_name());
    }
    if (from.has_label_id()) {
      set_label_id(from.label_id());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_last_sign_out()) {
      set_last_sign_out(from.last_sign_out());
    }
    if (from.has_agent_code()) {
      set_agent_code(from.agent_code());
    }
    if (from.has_server_flag()) {
      set_server_flag(from.server_flag());
    }
    if (from.has_market_code()) {
      set_market_code(from.market_code());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_server_prev()) {
      set_server_prev(from.server_prev());
    }
    if (from.has_server_name()) {
      set_server_name(from.server_name());
    }
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
    if (from.has_session_info()) {
      mutable_session_info()->::ProtoSession::MergeFrom(from.session_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto30200101::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto30200101::CopyFrom(const Proto30200101& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto30200101::IsInitialized() const {
  
  return true;
}

void Proto30200101::Swap(Proto30200101* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(sex_, other->sex_);
    std::swap(permission_, other->permission_);
    std::swap(career_, other->career_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(vip_, other->vip_);
    std::swap(league_id_, other->league_id_);
    std::swap(league_name_, other->league_name_);
    std::swap(label_id_, other->label_id_);
    std::swap(team_id_, other->team_id_);
    std::swap(last_sign_out_, other->last_sign_out_);
    std::swap(agent_code_, other->agent_code_);
    std::swap(server_flag_, other->server_flag_);
    std::swap(market_code_, other->market_code_);
    std::swap(server_prev_, other->server_prev_);
    std::swap(server_name_, other->server_name_);
    std::swap(area_id_, other->area_id_);
    std::swap(session_info_, other->session_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto30200101::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto30200101_descriptor_;
  metadata.reflection = Proto30200101_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto30200103::kRoleIdFieldNumber;
const int Proto30200103::kContentFieldNumber;
#endif  // !_MSC_VER

Proto30200103::Proto30200103()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto30200103::InitAsDefaultInstance() {
}

Proto30200103::Proto30200103(const Proto30200103& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto30200103::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto30200103::~Proto30200103() {
  SharedDtor();
}

void Proto30200103::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void Proto30200103::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto30200103::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto30200103_descriptor_;
}

const Proto30200103& Proto30200103::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInner001_2eproto();  return *default_instance_;
}

Proto30200103* Proto30200103::default_instance_ = NULL;

Proto30200103* Proto30200103::New() const {
  return new Proto30200103;
}

void Proto30200103::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_LONGLONG(0);
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto30200103::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }
      
      // optional string content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto30200103::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_id(), output);
  }
  
  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->content(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto30200103::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_id(), target);
  }
  
  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto30200103::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto30200103::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto30200103* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto30200103*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto30200103::MergeFrom(const Proto30200103& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto30200103::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto30200103::CopyFrom(const Proto30200103& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto30200103::IsInitialized() const {
  
  return true;
}

void Proto30200103::Swap(Proto30200103* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto30200103::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto30200103_descriptor_;
  metadata.reflection = Proto30200103_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto30200104::kMasterIdFieldNumber;
const int Proto30200104::kLeagueIdFieldNumber;
#endif  // !_MSC_VER

Proto30200104::Proto30200104()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto30200104::InitAsDefaultInstance() {
}

Proto30200104::Proto30200104(const Proto30200104& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto30200104::SharedCtor() {
  _cached_size_ = 0;
  master_id_ = GOOGLE_LONGLONG(0);
  league_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto30200104::~Proto30200104() {
  SharedDtor();
}

void Proto30200104::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto30200104::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto30200104::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto30200104_descriptor_;
}

const Proto30200104& Proto30200104::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInner001_2eproto();  return *default_instance_;
}

Proto30200104* Proto30200104::default_instance_ = NULL;

Proto30200104* Proto30200104::New() const {
  return new Proto30200104;
}

void Proto30200104::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    master_id_ = GOOGLE_LONGLONG(0);
    league_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto30200104::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 master_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &master_id_)));
          set_has_master_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_league_id;
        break;
      }
      
      // optional int64 league_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_league_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &league_id_)));
          set_has_league_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto30200104::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 master_id = 1;
  if (has_master_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->master_id(), output);
  }
  
  // optional int64 league_id = 2;
  if (has_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->league_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto30200104::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 master_id = 1;
  if (has_master_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->master_id(), target);
  }
  
  // optional int64 league_id = 2;
  if (has_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->league_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto30200104::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 master_id = 1;
    if (has_master_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->master_id());
    }
    
    // optional int64 league_id = 2;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->league_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto30200104::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto30200104* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto30200104*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto30200104::MergeFrom(const Proto30200104& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_master_id()) {
      set_master_id(from.master_id());
    }
    if (from.has_league_id()) {
      set_league_id(from.league_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto30200104::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto30200104::CopyFrom(const Proto30200104& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto30200104::IsInitialized() const {
  
  return true;
}

void Proto30200104::Swap(Proto30200104* other) {
  if (other != this) {
    std::swap(master_id_, other->master_id_);
    std::swap(league_id_, other->league_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto30200104::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto30200104_descriptor_;
  metadata.reflection = Proto30200104_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto30200105::kMasterIdFieldNumber;
const int Proto30200105::kLeagueIdFieldNumber;
#endif  // !_MSC_VER

Proto30200105::Proto30200105()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto30200105::InitAsDefaultInstance() {
}

Proto30200105::Proto30200105(const Proto30200105& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto30200105::SharedCtor() {
  _cached_size_ = 0;
  master_id_ = GOOGLE_LONGLONG(0);
  league_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto30200105::~Proto30200105() {
  SharedDtor();
}

void Proto30200105::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto30200105::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto30200105::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto30200105_descriptor_;
}

const Proto30200105& Proto30200105::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInner001_2eproto();  return *default_instance_;
}

Proto30200105* Proto30200105::default_instance_ = NULL;

Proto30200105* Proto30200105::New() const {
  return new Proto30200105;
}

void Proto30200105::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    master_id_ = GOOGLE_LONGLONG(0);
    league_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto30200105::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 master_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &master_id_)));
          set_has_master_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_league_id;
        break;
      }
      
      // optional int64 league_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_league_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &league_id_)));
          set_has_league_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto30200105::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 master_id = 1;
  if (has_master_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->master_id(), output);
  }
  
  // optional int64 league_id = 2;
  if (has_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->league_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto30200105::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 master_id = 1;
  if (has_master_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->master_id(), target);
  }
  
  // optional int64 league_id = 2;
  if (has_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->league_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto30200105::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 master_id = 1;
    if (has_master_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->master_id());
    }
    
    // optional int64 league_id = 2;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->league_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto30200105::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto30200105* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto30200105*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto30200105::MergeFrom(const Proto30200105& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_master_id()) {
      set_master_id(from.master_id());
    }
    if (from.has_league_id()) {
      set_league_id(from.league_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto30200105::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto30200105::CopyFrom(const Proto30200105& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto30200105::IsInitialized() const {
  
  return true;
}

void Proto30200105::Swap(Proto30200105* other) {
  if (other != this) {
    std::swap(master_id_, other->master_id_);
    std::swap(league_id_, other->league_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto30200105::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto30200105_descriptor_;
  metadata.reflection = Proto30200105_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto30200106::kMasterIdFieldNumber;
const int Proto30200106::kLeagueIdFieldNumber;
const int Proto30200106::kRoleIdFieldNumber;
const int Proto30200106::kLeagueNameFieldNumber;
#endif  // !_MSC_VER

Proto30200106::Proto30200106()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto30200106::InitAsDefaultInstance() {
}

Proto30200106::Proto30200106(const Proto30200106& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto30200106::SharedCtor() {
  _cached_size_ = 0;
  master_id_ = GOOGLE_LONGLONG(0);
  league_id_ = GOOGLE_LONGLONG(0);
  role_id_ = GOOGLE_LONGLONG(0);
  league_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto30200106::~Proto30200106() {
  SharedDtor();
}

void Proto30200106::SharedDtor() {
  if (league_name_ != &::google::protobuf::internal::kEmptyString) {
    delete league_name_;
  }
  if (this != default_instance_) {
  }
}

void Proto30200106::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto30200106::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto30200106_descriptor_;
}

const Proto30200106& Proto30200106::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInner001_2eproto();  return *default_instance_;
}

Proto30200106* Proto30200106::default_instance_ = NULL;

Proto30200106* Proto30200106::New() const {
  return new Proto30200106;
}

void Proto30200106::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    master_id_ = GOOGLE_LONGLONG(0);
    league_id_ = GOOGLE_LONGLONG(0);
    role_id_ = GOOGLE_LONGLONG(0);
    if (has_league_name()) {
      if (league_name_ != &::google::protobuf::internal::kEmptyString) {
        league_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto30200106::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 master_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &master_id_)));
          set_has_master_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_league_id;
        break;
      }
      
      // optional int64 league_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_league_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &league_id_)));
          set_has_league_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }
      
      // optional int64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_league_name;
        break;
      }
      
      // optional string league_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_league_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_league_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->league_name().data(), this->league_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto30200106::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 master_id = 1;
  if (has_master_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->master_id(), output);
  }
  
  // optional int64 league_id = 2;
  if (has_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->league_id(), output);
  }
  
  // optional int64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->role_id(), output);
  }
  
  // optional string league_name = 4;
  if (has_league_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->league_name().data(), this->league_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->league_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto30200106::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 master_id = 1;
  if (has_master_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->master_id(), target);
  }
  
  // optional int64 league_id = 2;
  if (has_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->league_id(), target);
  }
  
  // optional int64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->role_id(), target);
  }
  
  // optional string league_name = 4;
  if (has_league_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->league_name().data(), this->league_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->league_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto30200106::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 master_id = 1;
    if (has_master_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->master_id());
    }
    
    // optional int64 league_id = 2;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->league_id());
    }
    
    // optional int64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional string league_name = 4;
    if (has_league_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->league_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto30200106::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto30200106* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto30200106*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto30200106::MergeFrom(const Proto30200106& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_master_id()) {
      set_master_id(from.master_id());
    }
    if (from.has_league_id()) {
      set_league_id(from.league_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_league_name()) {
      set_league_name(from.league_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto30200106::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto30200106::CopyFrom(const Proto30200106& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto30200106::IsInitialized() const {
  
  return true;
}

void Proto30200106::Swap(Proto30200106* other) {
  if (other != this) {
    std::swap(master_id_, other->master_id_);
    std::swap(league_id_, other->league_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(league_name_, other->league_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto30200106::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto30200106_descriptor_;
  metadata.reflection = Proto30200106_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto30200107::kMasterIdFieldNumber;
const int Proto30200107::kLeagueIdFieldNumber;
const int Proto30200107::kRoleIdFieldNumber;
#endif  // !_MSC_VER

Proto30200107::Proto30200107()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto30200107::InitAsDefaultInstance() {
}

Proto30200107::Proto30200107(const Proto30200107& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto30200107::SharedCtor() {
  _cached_size_ = 0;
  master_id_ = GOOGLE_LONGLONG(0);
  league_id_ = GOOGLE_LONGLONG(0);
  role_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto30200107::~Proto30200107() {
  SharedDtor();
}

void Proto30200107::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto30200107::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto30200107::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto30200107_descriptor_;
}

const Proto30200107& Proto30200107::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInner001_2eproto();  return *default_instance_;
}

Proto30200107* Proto30200107::default_instance_ = NULL;

Proto30200107* Proto30200107::New() const {
  return new Proto30200107;
}

void Proto30200107::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    master_id_ = GOOGLE_LONGLONG(0);
    league_id_ = GOOGLE_LONGLONG(0);
    role_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto30200107::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 master_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &master_id_)));
          set_has_master_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_league_id;
        break;
      }
      
      // optional int64 league_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_league_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &league_id_)));
          set_has_league_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }
      
      // optional int64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto30200107::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 master_id = 1;
  if (has_master_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->master_id(), output);
  }
  
  // optional int64 league_id = 2;
  if (has_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->league_id(), output);
  }
  
  // optional int64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->role_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto30200107::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 master_id = 1;
  if (has_master_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->master_id(), target);
  }
  
  // optional int64 league_id = 2;
  if (has_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->league_id(), target);
  }
  
  // optional int64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->role_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto30200107::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 master_id = 1;
    if (has_master_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->master_id());
    }
    
    // optional int64 league_id = 2;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->league_id());
    }
    
    // optional int64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto30200107::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto30200107* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto30200107*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto30200107::MergeFrom(const Proto30200107& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_master_id()) {
      set_master_id(from.master_id());
    }
    if (from.has_league_id()) {
      set_league_id(from.league_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto30200107::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto30200107::CopyFrom(const Proto30200107& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto30200107::IsInitialized() const {
  
  return true;
}

void Proto30200107::Swap(Proto30200107* other) {
  if (other != this) {
    std::swap(master_id_, other->master_id_);
    std::swap(league_id_, other->league_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto30200107::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto30200107_descriptor_;
  metadata.reflection = Proto30200107_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto30200108::kLeaderIdFieldNumber;
const int Proto30200108::kTeamIdFieldNumber;
#endif  // !_MSC_VER

Proto30200108::Proto30200108()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto30200108::InitAsDefaultInstance() {
}

Proto30200108::Proto30200108(const Proto30200108& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto30200108::SharedCtor() {
  _cached_size_ = 0;
  leader_id_ = GOOGLE_LONGLONG(0);
  team_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto30200108::~Proto30200108() {
  SharedDtor();
}

void Proto30200108::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto30200108::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto30200108::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto30200108_descriptor_;
}

const Proto30200108& Proto30200108::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInner001_2eproto();  return *default_instance_;
}

Proto30200108* Proto30200108::default_instance_ = NULL;

Proto30200108* Proto30200108::New() const {
  return new Proto30200108;
}

void Proto30200108::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    leader_id_ = GOOGLE_LONGLONG(0);
    team_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto30200108::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 leader_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &leader_id_)));
          set_has_leader_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team_id;
        break;
      }
      
      // optional int32 team_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto30200108::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 leader_id = 1;
  if (has_leader_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->leader_id(), output);
  }
  
  // optional int32 team_id = 2;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->team_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto30200108::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 leader_id = 1;
  if (has_leader_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->leader_id(), target);
  }
  
  // optional int32 team_id = 2;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->team_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto30200108::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 leader_id = 1;
    if (has_leader_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->leader_id());
    }
    
    // optional int32 team_id = 2;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto30200108::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto30200108* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto30200108*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto30200108::MergeFrom(const Proto30200108& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_leader_id()) {
      set_leader_id(from.leader_id());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto30200108::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto30200108::CopyFrom(const Proto30200108& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto30200108::IsInitialized() const {
  
  return true;
}

void Proto30200108::Swap(Proto30200108* other) {
  if (other != this) {
    std::swap(leader_id_, other->leader_id_);
    std::swap(team_id_, other->team_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto30200108::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto30200108_descriptor_;
  metadata.reflection = Proto30200108_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto30200109::kLeaderIdFieldNumber;
const int Proto30200109::kTeamIdFieldNumber;
#endif  // !_MSC_VER

Proto30200109::Proto30200109()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto30200109::InitAsDefaultInstance() {
}

Proto30200109::Proto30200109(const Proto30200109& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto30200109::SharedCtor() {
  _cached_size_ = 0;
  leader_id_ = GOOGLE_LONGLONG(0);
  team_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto30200109::~Proto30200109() {
  SharedDtor();
}

void Proto30200109::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto30200109::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto30200109::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto30200109_descriptor_;
}

const Proto30200109& Proto30200109::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInner001_2eproto();  return *default_instance_;
}

Proto30200109* Proto30200109::default_instance_ = NULL;

Proto30200109* Proto30200109::New() const {
  return new Proto30200109;
}

void Proto30200109::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    leader_id_ = GOOGLE_LONGLONG(0);
    team_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto30200109::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 leader_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &leader_id_)));
          set_has_leader_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team_id;
        break;
      }
      
      // optional int32 team_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto30200109::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 leader_id = 1;
  if (has_leader_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->leader_id(), output);
  }
  
  // optional int32 team_id = 2;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->team_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto30200109::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 leader_id = 1;
  if (has_leader_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->leader_id(), target);
  }
  
  // optional int32 team_id = 2;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->team_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto30200109::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 leader_id = 1;
    if (has_leader_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->leader_id());
    }
    
    // optional int32 team_id = 2;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto30200109::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto30200109* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto30200109*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto30200109::MergeFrom(const Proto30200109& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_leader_id()) {
      set_leader_id(from.leader_id());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto30200109::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto30200109::CopyFrom(const Proto30200109& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto30200109::IsInitialized() const {
  
  return true;
}

void Proto30200109::Swap(Proto30200109* other) {
  if (other != this) {
    std::swap(leader_id_, other->leader_id_);
    std::swap(team_id_, other->team_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto30200109::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto30200109_descriptor_;
  metadata.reflection = Proto30200109_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto30200110::kLeaderIdFieldNumber;
const int Proto30200110::kTeamIdFieldNumber;
const int Proto30200110::kRoleIdFieldNumber;
#endif  // !_MSC_VER

Proto30200110::Proto30200110()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto30200110::InitAsDefaultInstance() {
}

Proto30200110::Proto30200110(const Proto30200110& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto30200110::SharedCtor() {
  _cached_size_ = 0;
  leader_id_ = GOOGLE_LONGLONG(0);
  team_id_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto30200110::~Proto30200110() {
  SharedDtor();
}

void Proto30200110::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto30200110::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto30200110::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto30200110_descriptor_;
}

const Proto30200110& Proto30200110::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInner001_2eproto();  return *default_instance_;
}

Proto30200110* Proto30200110::default_instance_ = NULL;

Proto30200110* Proto30200110::New() const {
  return new Proto30200110;
}

void Proto30200110::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    leader_id_ = GOOGLE_LONGLONG(0);
    team_id_ = 0;
    role_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto30200110::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 leader_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &leader_id_)));
          set_has_leader_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team_id;
        break;
      }
      
      // optional int32 team_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }
      
      // optional int64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto30200110::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 leader_id = 1;
  if (has_leader_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->leader_id(), output);
  }
  
  // optional int32 team_id = 2;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->team_id(), output);
  }
  
  // optional int64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->role_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto30200110::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 leader_id = 1;
  if (has_leader_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->leader_id(), target);
  }
  
  // optional int32 team_id = 2;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->team_id(), target);
  }
  
  // optional int64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->role_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto30200110::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 leader_id = 1;
    if (has_leader_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->leader_id());
    }
    
    // optional int32 team_id = 2;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_id());
    }
    
    // optional int64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto30200110::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto30200110* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto30200110*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto30200110::MergeFrom(const Proto30200110& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_leader_id()) {
      set_leader_id(from.leader_id());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto30200110::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto30200110::CopyFrom(const Proto30200110& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto30200110::IsInitialized() const {
  
  return true;
}

void Proto30200110::Swap(Proto30200110* other) {
  if (other != this) {
    std::swap(leader_id_, other->leader_id_);
    std::swap(team_id_, other->team_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto30200110::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto30200110_descriptor_;
  metadata.reflection = Proto30200110_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto30200111::kLeaderIdFieldNumber;
const int Proto30200111::kTeamIdFieldNumber;
const int Proto30200111::kRoleIdFieldNumber;
#endif  // !_MSC_VER

Proto30200111::Proto30200111()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto30200111::InitAsDefaultInstance() {
}

Proto30200111::Proto30200111(const Proto30200111& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto30200111::SharedCtor() {
  _cached_size_ = 0;
  leader_id_ = GOOGLE_LONGLONG(0);
  team_id_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto30200111::~Proto30200111() {
  SharedDtor();
}

void Proto30200111::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto30200111::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto30200111::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto30200111_descriptor_;
}

const Proto30200111& Proto30200111::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInner001_2eproto();  return *default_instance_;
}

Proto30200111* Proto30200111::default_instance_ = NULL;

Proto30200111* Proto30200111::New() const {
  return new Proto30200111;
}

void Proto30200111::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    leader_id_ = GOOGLE_LONGLONG(0);
    team_id_ = 0;
    role_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto30200111::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 leader_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &leader_id_)));
          set_has_leader_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team_id;
        break;
      }
      
      // optional int32 team_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }
      
      // optional int64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto30200111::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 leader_id = 1;
  if (has_leader_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->leader_id(), output);
  }
  
  // optional int32 team_id = 2;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->team_id(), output);
  }
  
  // optional int64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->role_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto30200111::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 leader_id = 1;
  if (has_leader_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->leader_id(), target);
  }
  
  // optional int32 team_id = 2;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->team_id(), target);
  }
  
  // optional int64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->role_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto30200111::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 leader_id = 1;
    if (has_leader_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->leader_id());
    }
    
    // optional int32 team_id = 2;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_id());
    }
    
    // optional int64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto30200111::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto30200111* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto30200111*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto30200111::MergeFrom(const Proto30200111& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_leader_id()) {
      set_leader_id(from.leader_id());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto30200111::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto30200111::CopyFrom(const Proto30200111& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto30200111::IsInitialized() const {
  
  return true;
}

void Proto30200111::Swap(Proto30200111* other) {
  if (other != this) {
    std::swap(leader_id_, other->leader_id_);
    std::swap(team_id_, other->team_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto30200111::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto30200111_descriptor_;
  metadata.reflection = Proto30200111_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto30200113::kRoleIdSetFieldNumber;
#endif  // !_MSC_VER

Proto30200113::Proto30200113()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto30200113::InitAsDefaultInstance() {
}

Proto30200113::Proto30200113(const Proto30200113& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto30200113::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto30200113::~Proto30200113() {
  SharedDtor();
}

void Proto30200113::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto30200113::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto30200113::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto30200113_descriptor_;
}

const Proto30200113& Proto30200113::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInner001_2eproto();  return *default_instance_;
}

Proto30200113* Proto30200113::default_instance_ = NULL;

Proto30200113* Proto30200113::New() const {
  return new Proto30200113;
}

void Proto30200113::Clear() {
  role_id_set_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto30200113::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 role_id_set = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id_set:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_role_id_set())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_role_id_set())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_role_id_set;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto30200113::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 role_id_set = 1;
  for (int i = 0; i < this->role_id_set_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->role_id_set(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto30200113::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 role_id_set = 1;
  for (int i = 0; i < this->role_id_set_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->role_id_set(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto30200113::ByteSize() const {
  int total_size = 0;
  
  // repeated int64 role_id_set = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->role_id_set_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->role_id_set(i));
    }
    total_size += 1 * this->role_id_set_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto30200113::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto30200113* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto30200113*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto30200113::MergeFrom(const Proto30200113& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_id_set_.MergeFrom(from.role_id_set_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto30200113::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto30200113::CopyFrom(const Proto30200113& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto30200113::IsInitialized() const {
  
  return true;
}

void Proto30200113::Swap(Proto30200113* other) {
  if (other != this) {
    role_id_set_.Swap(&other->role_id_set_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto30200113::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto30200113_descriptor_;
  metadata.reflection = Proto30200113_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto31400106::kLvlFieldNumber;
const int Proto31400106::kFightForceFieldNumber;
const int Proto31400106::kSceneIdFieldNumber;
const int Proto31400106::kSceneModeFieldNumber;
const int Proto31400106::kSpaceIdFieldNumber;
#endif  // !_MSC_VER

Proto31400106::Proto31400106()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto31400106::InitAsDefaultInstance() {
}

Proto31400106::Proto31400106(const Proto31400106& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto31400106::SharedCtor() {
  _cached_size_ = 0;
  lvl_ = 0;
  fight_force_ = 0;
  scene_id_ = 0;
  scene_mode_ = 0;
  space_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto31400106::~Proto31400106() {
  SharedDtor();
}

void Proto31400106::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto31400106::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto31400106::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto31400106_descriptor_;
}

const Proto31400106& Proto31400106::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInner001_2eproto();  return *default_instance_;
}

Proto31400106* Proto31400106::default_instance_ = NULL;

Proto31400106* Proto31400106::New() const {
  return new Proto31400106;
}

void Proto31400106::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lvl_ = 0;
    fight_force_ = 0;
    scene_id_ = 0;
    scene_mode_ = 0;
    space_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto31400106::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lvl = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lvl_)));
          set_has_lvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fight_force;
        break;
      }
      
      // optional int32 fight_force = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_force_)));
          set_has_fight_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_scene_id;
        break;
      }
      
      // optional int32 scene_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_scene_mode;
        break;
      }
      
      // optional int32 scene_mode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_mode_)));
          set_has_scene_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_space_id;
        break;
      }
      
      // optional int32 space_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_space_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &space_id_)));
          set_has_space_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto31400106::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lvl = 1;
  if (has_lvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lvl(), output);
  }
  
  // optional int32 fight_force = 2;
  if (has_fight_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fight_force(), output);
  }
  
  // optional int32 scene_id = 3;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->scene_id(), output);
  }
  
  // optional int32 scene_mode = 4;
  if (has_scene_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->scene_mode(), output);
  }
  
  // optional int32 space_id = 5;
  if (has_space_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->space_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto31400106::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lvl = 1;
  if (has_lvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lvl(), target);
  }
  
  // optional int32 fight_force = 2;
  if (has_fight_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fight_force(), target);
  }
  
  // optional int32 scene_id = 3;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->scene_id(), target);
  }
  
  // optional int32 scene_mode = 4;
  if (has_scene_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->scene_mode(), target);
  }
  
  // optional int32 space_id = 5;
  if (has_space_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->space_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto31400106::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lvl = 1;
    if (has_lvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lvl());
    }
    
    // optional int32 fight_force = 2;
    if (has_fight_force()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight_force());
    }
    
    // optional int32 scene_id = 3;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_id());
    }
    
    // optional int32 scene_mode = 4;
    if (has_scene_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_mode());
    }
    
    // optional int32 space_id = 5;
    if (has_space_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->space_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto31400106::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto31400106* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto31400106*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto31400106::MergeFrom(const Proto31400106& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lvl()) {
      set_lvl(from.lvl());
    }
    if (from.has_fight_force()) {
      set_fight_force(from.fight_force());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_scene_mode()) {
      set_scene_mode(from.scene_mode());
    }
    if (from.has_space_id()) {
      set_space_id(from.space_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto31400106::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto31400106::CopyFrom(const Proto31400106& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto31400106::IsInitialized() const {
  
  return true;
}

void Proto31400106::Swap(Proto31400106* other) {
  if (other != this) {
    std::swap(lvl_, other->lvl_);
    std::swap(fight_force_, other->fight_force_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(scene_mode_, other->scene_mode_);
    std::swap(space_id_, other->space_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto31400106::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto31400106_descriptor_;
  metadata.reflection = Proto31400106_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto31400107::kLvlFieldNumber;
#endif  // !_MSC_VER

Proto31400107::Proto31400107()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto31400107::InitAsDefaultInstance() {
}

Proto31400107::Proto31400107(const Proto31400107& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto31400107::SharedCtor() {
  _cached_size_ = 0;
  lvl_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto31400107::~Proto31400107() {
  SharedDtor();
}

void Proto31400107::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto31400107::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto31400107::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto31400107_descriptor_;
}

const Proto31400107& Proto31400107::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInner001_2eproto();  return *default_instance_;
}

Proto31400107* Proto31400107::default_instance_ = NULL;

Proto31400107* Proto31400107::New() const {
  return new Proto31400107;
}

void Proto31400107::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lvl_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto31400107::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lvl = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lvl_)));
          set_has_lvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto31400107::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lvl = 1;
  if (has_lvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lvl(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto31400107::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lvl = 1;
  if (has_lvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lvl(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto31400107::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lvl = 1;
    if (has_lvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lvl());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto31400107::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto31400107* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto31400107*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto31400107::MergeFrom(const Proto31400107& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lvl()) {
      set_lvl(from.lvl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto31400107::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto31400107::CopyFrom(const Proto31400107& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto31400107::IsInitialized() const {
  
  return true;
}

void Proto31400107::Swap(Proto31400107* other) {
  if (other != this) {
    std::swap(lvl_, other->lvl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto31400107::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto31400107_descriptor_;
  metadata.reflection = Proto31400107_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto31400101::kSceneIdFieldNumber;
const int Proto31400101::kPrevSceneFieldNumber;
#endif  // !_MSC_VER

Proto31400101::Proto31400101()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto31400101::InitAsDefaultInstance() {
}

Proto31400101::Proto31400101(const Proto31400101& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto31400101::SharedCtor() {
  _cached_size_ = 0;
  scene_id_ = 0;
  prev_scene_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto31400101::~Proto31400101() {
  SharedDtor();
}

void Proto31400101::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto31400101::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto31400101::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto31400101_descriptor_;
}

const Proto31400101& Proto31400101::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInner001_2eproto();  return *default_instance_;
}

Proto31400101* Proto31400101::default_instance_ = NULL;

Proto31400101* Proto31400101::New() const {
  return new Proto31400101;
}

void Proto31400101::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scene_id_ = 0;
    prev_scene_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto31400101::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 scene_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_prev_scene;
        break;
      }
      
      // optional int32 prev_scene = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prev_scene:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prev_scene_)));
          set_has_prev_scene();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto31400101::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 scene_id = 1;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->scene_id(), output);
  }
  
  // optional int32 prev_scene = 2;
  if (has_prev_scene()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->prev_scene(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto31400101::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 scene_id = 1;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->scene_id(), target);
  }
  
  // optional int32 prev_scene = 2;
  if (has_prev_scene()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->prev_scene(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto31400101::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 scene_id = 1;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_id());
    }
    
    // optional int32 prev_scene = 2;
    if (has_prev_scene()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prev_scene());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto31400101::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto31400101* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto31400101*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto31400101::MergeFrom(const Proto31400101& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_prev_scene()) {
      set_prev_scene(from.prev_scene());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto31400101::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto31400101::CopyFrom(const Proto31400101& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto31400101::IsInitialized() const {
  
  return true;
}

void Proto31400101::Swap(Proto31400101* other) {
  if (other != this) {
    std::swap(scene_id_, other->scene_id_);
    std::swap(prev_scene_, other->prev_scene_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto31400101::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto31400101_descriptor_;
  metadata.reflection = Proto31400101_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto31400102::kRoleIdFieldNumber;
const int Proto31400102::kPrevSceneFieldNumber;
const int Proto31400102::kTransferTickFieldNumber;
#endif  // !_MSC_VER

Proto31400102::Proto31400102()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto31400102::InitAsDefaultInstance() {
}

Proto31400102::Proto31400102(const Proto31400102& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto31400102::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  prev_scene_ = 0;
  transfer_tick_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto31400102::~Proto31400102() {
  SharedDtor();
}

void Proto31400102::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto31400102::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto31400102::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto31400102_descriptor_;
}

const Proto31400102& Proto31400102::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInner001_2eproto();  return *default_instance_;
}

Proto31400102* Proto31400102::default_instance_ = NULL;

Proto31400102* Proto31400102::New() const {
  return new Proto31400102;
}

void Proto31400102::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_LONGLONG(0);
    prev_scene_ = 0;
    transfer_tick_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto31400102::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_prev_scene;
        break;
      }
      
      // optional int32 prev_scene = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prev_scene:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prev_scene_)));
          set_has_prev_scene();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_transfer_tick;
        break;
      }
      
      // optional int64 transfer_tick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transfer_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transfer_tick_)));
          set_has_transfer_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto31400102::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_id(), output);
  }
  
  // optional int32 prev_scene = 2;
  if (has_prev_scene()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->prev_scene(), output);
  }
  
  // optional int64 transfer_tick = 3;
  if (has_transfer_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->transfer_tick(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto31400102::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_id(), target);
  }
  
  // optional int32 prev_scene = 2;
  if (has_prev_scene()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->prev_scene(), target);
  }
  
  // optional int64 transfer_tick = 3;
  if (has_transfer_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->transfer_tick(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto31400102::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional int32 prev_scene = 2;
    if (has_prev_scene()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prev_scene());
    }
    
    // optional int64 transfer_tick = 3;
    if (has_transfer_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->transfer_tick());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto31400102::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto31400102* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto31400102*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto31400102::MergeFrom(const Proto31400102& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_prev_scene()) {
      set_prev_scene(from.prev_scene());
    }
    if (from.has_transfer_tick()) {
      set_transfer_tick(from.transfer_tick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto31400102::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto31400102::CopyFrom(const Proto31400102& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto31400102::IsInitialized() const {
  
  return true;
}

void Proto31400102::Swap(Proto31400102* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(prev_scene_, other->prev_scene_);
    std::swap(transfer_tick_, other->transfer_tick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto31400102::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto31400102_descriptor_;
  metadata.reflection = Proto31400102_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto31400103::kRoleIdFieldNumber;
const int Proto31400103::kRoleNameFieldNumber;
const int Proto31400103::kAccountFieldNumber;
const int Proto31400103::kAgentFieldNumber;
const int Proto31400103::kAgentCodeFieldNumber;
const int Proto31400103::kSexFieldNumber;
const int Proto31400103::kCareerFieldNumber;
const int Proto31400103::kSceneIdFieldNumber;
const int Proto31400103::kCampIdFieldNumber;
const int Proto31400103::kLevelFieldNumber;
const int Proto31400103::kForceFieldNumber;
const int Proto31400103::kIsDeathFieldNumber;
const int Proto31400103::kDeathTickFieldNumber;
const int Proto31400103::kFightStateFieldNumber;
const int Proto31400103::kDrawDaysFieldNumber;
const int Proto31400103::kDrawGiftFieldNumber;
const int Proto31400103::kCreateTickFieldNumber;
const int Proto31400103::kSceneModeFieldNumber;
const int Proto31400103::kDayResetTickFieldNumber;
const int Proto31400103::kDrawVipsFieldNumber;
const int Proto31400103::kLeagueIdFieldNumber;
const int Proto31400103::kLoginDayFieldNumber;
const int Proto31400103::kOpenGiftCloseFieldNumber;
const int Proto31400103::kLoginTickFieldNumber;
const int Proto31400103::kPartnerIdFieldNumber;
const int Proto31400103::kPartnerNameFieldNumber;
const int Proto31400103::kWeddingIdFieldNumber;
const int Proto31400103::kWeddingTypeFieldNumber;
const int Proto31400103::kWeddingSelfFieldNumber;
const int Proto31400103::kWeddingSideFieldNumber;
const int Proto31400103::kCombineTickFieldNumber;
const int Proto31400103::kTransferTickFieldNumber;
const int Proto31400103::kDropActFieldNumber;
const int Proto31400103::kRandUseTimesFieldNumber;
const int Proto31400103::kIsBigActTimeFieldNumber;
#endif  // !_MSC_VER

Proto31400103::Proto31400103()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto31400103::InitAsDefaultInstance() {
  rand_use_times_ = const_cast< ::ProtoPairMap*>(&::ProtoPairMap::default_instance());
}

Proto31400103::Proto31400103(const Proto31400103& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto31400103::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  agent_code_ = 0;
  sex_ = 0;
  career_ = 0;
  scene_id_ = 0;
  camp_id_ = 0;
  level_ = 0;
  force_ = 0;
  is_death_ = false;
  death_tick_ = 0;
  fight_state_ = 0;
  create_tick_ = GOOGLE_LONGLONG(0);
  scene_mode_ = 0;
  day_reset_tick_ = 0;
  league_id_ = GOOGLE_LONGLONG(0);
  login_day_ = GOOGLE_LONGLONG(0);
  open_gift_close_ = 0;
  login_tick_ = GOOGLE_LONGLONG(0);
  partner_id_ = GOOGLE_LONGLONG(0);
  partner_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wedding_id_ = GOOGLE_LONGLONG(0);
  wedding_type_ = 0;
  combine_tick_ = GOOGLE_LONGLONG(0);
  transfer_tick_ = GOOGLE_LONGLONG(0);
  drop_act_ = 0;
  rand_use_times_ = NULL;
  is_big_act_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto31400103::~Proto31400103() {
  SharedDtor();
}

void Proto31400103::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (agent_ != &::google::protobuf::internal::kEmptyString) {
    delete agent_;
  }
  if (partner_name_ != &::google::protobuf::internal::kEmptyString) {
    delete partner_name_;
  }
  if (this != default_instance_) {
    delete rand_use_times_;
  }
}

void Proto31400103::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto31400103::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto31400103_descriptor_;
}

const Proto31400103& Proto31400103::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInner001_2eproto();  return *default_instance_;
}

Proto31400103* Proto31400103::default_instance_ = NULL;

Proto31400103* Proto31400103::New() const {
  return new Proto31400103;
}

void Proto31400103::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_LONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_agent()) {
      if (agent_ != &::google::protobuf::internal::kEmptyString) {
        agent_->clear();
      }
    }
    agent_code_ = 0;
    sex_ = 0;
    career_ = 0;
    scene_id_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    camp_id_ = 0;
    level_ = 0;
    force_ = 0;
    is_death_ = false;
    death_tick_ = 0;
    fight_state_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    create_tick_ = GOOGLE_LONGLONG(0);
    scene_mode_ = 0;
    day_reset_tick_ = 0;
    league_id_ = GOOGLE_LONGLONG(0);
    login_day_ = GOOGLE_LONGLONG(0);
    open_gift_close_ = 0;
    login_tick_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    partner_id_ = GOOGLE_LONGLONG(0);
    if (has_partner_name()) {
      if (partner_name_ != &::google::protobuf::internal::kEmptyString) {
        partner_name_->clear();
      }
    }
    wedding_id_ = GOOGLE_LONGLONG(0);
    wedding_type_ = 0;
    combine_tick_ = GOOGLE_LONGLONG(0);
    transfer_tick_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    drop_act_ = 0;
    if (has_rand_use_times()) {
      if (rand_use_times_ != NULL) rand_use_times_->::ProtoPairMap::Clear();
    }
    is_big_act_time_ = 0;
  }
  draw_days_.Clear();
  draw_gift_.Clear();
  draw_vips_.Clear();
  wedding_self_.Clear();
  wedding_side_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto31400103::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_name;
        break;
      }
      
      // optional string role_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_account;
        break;
      }
      
      // optional string account = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_agent;
        break;
      }
      
      // optional string agent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_agent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_agent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->agent().data(), this->agent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_agent_code;
        break;
      }
      
      // optional int32 agent_code = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agent_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agent_code_)));
          set_has_agent_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sex;
        break;
      }
      
      // optional int32 sex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_career;
        break;
      }
      
      // optional int32 career = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_career:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &career_)));
          set_has_career();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_scene_id;
        break;
      }
      
      // optional int32 scene_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_camp_id;
        break;
      }
      
      // optional int32 camp_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_camp_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_id_)));
          set_has_camp_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_level;
        break;
      }
      
      // optional int32 level = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_force;
        break;
      }
      
      // optional int32 force = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &force_)));
          set_has_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_is_death;
        break;
      }
      
      // optional bool is_death = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_death:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_death_)));
          set_has_is_death();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_death_tick;
        break;
      }
      
      // optional int32 death_tick = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_death_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &death_tick_)));
          set_has_death_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_fight_state;
        break;
      }
      
      // optional int32 fight_state = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_state_)));
          set_has_fight_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_draw_days;
        break;
      }
      
      // repeated int32 draw_days = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_draw_days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 120, input, this->mutable_draw_days())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_draw_days())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_draw_days;
        if (input->ExpectTag(128)) goto parse_draw_gift;
        break;
      }
      
      // repeated int32 draw_gift = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_draw_gift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 128, input, this->mutable_draw_gift())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_draw_gift())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_draw_gift;
        if (input->ExpectTag(136)) goto parse_create_tick;
        break;
      }
      
      // optional int64 create_tick = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &create_tick_)));
          set_has_create_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_scene_mode;
        break;
      }
      
      // optional int32 scene_mode = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_mode_)));
          set_has_scene_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_day_reset_tick;
        break;
      }
      
      // optional int32 day_reset_tick = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_day_reset_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_reset_tick_)));
          set_has_day_reset_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_draw_vips;
        break;
      }
      
      // repeated int32 draw_vips = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_draw_vips:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 160, input, this->mutable_draw_vips())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_draw_vips())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_draw_vips;
        if (input->ExpectTag(168)) goto parse_league_id;
        break;
      }
      
      // optional int64 league_id = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_league_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &league_id_)));
          set_has_league_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_login_day;
        break;
      }
      
      // optional int64 login_day = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &login_day_)));
          set_has_login_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_open_gift_close;
        break;
      }
      
      // optional int32 open_gift_close = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_gift_close:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_gift_close_)));
          set_has_open_gift_close();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_login_tick;
        break;
      }
      
      // optional int64 login_tick = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &login_tick_)));
          set_has_login_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_partner_id;
        break;
      }
      
      // optional int64 partner_id = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &partner_id_)));
          set_has_partner_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_partner_name;
        break;
      }
      
      // optional string partner_name = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partner_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partner_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->partner_name().data(), this->partner_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_wedding_id;
        break;
      }
      
      // optional int64 wedding_id = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wedding_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &wedding_id_)));
          set_has_wedding_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_wedding_type;
        break;
      }
      
      // optional int32 wedding_type = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wedding_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wedding_type_)));
          set_has_wedding_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_wedding_self;
        break;
      }
      
      // repeated int32 wedding_self = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wedding_self:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 232, input, this->mutable_wedding_self())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_wedding_self())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_wedding_self;
        if (input->ExpectTag(240)) goto parse_wedding_side;
        break;
      }
      
      // repeated int32 wedding_side = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wedding_side:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 240, input, this->mutable_wedding_side())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_wedding_side())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_wedding_side;
        if (input->ExpectTag(248)) goto parse_combine_tick;
        break;
      }
      
      // optional int64 combine_tick = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combine_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &combine_tick_)));
          set_has_combine_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_transfer_tick;
        break;
      }
      
      // optional int64 transfer_tick = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transfer_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transfer_tick_)));
          set_has_transfer_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_drop_act;
        break;
      }
      
      // optional int32 drop_act = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drop_act:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drop_act_)));
          set_has_drop_act();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_rand_use_times;
        break;
      }
      
      // optional .ProtoPairMap rand_use_times = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rand_use_times:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rand_use_times()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_is_big_act_time;
        break;
      }
      
      // optional int32 is_big_act_time = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_big_act_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_big_act_time_)));
          set_has_is_big_act_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto31400103::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_id(), output);
  }
  
  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->role_name(), output);
  }
  
  // optional string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->account(), output);
  }
  
  // optional string agent = 4;
  if (has_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agent().data(), this->agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->agent(), output);
  }
  
  // optional int32 agent_code = 5;
  if (has_agent_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->agent_code(), output);
  }
  
  // optional int32 sex = 6;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sex(), output);
  }
  
  // optional int32 career = 7;
  if (has_career()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->career(), output);
  }
  
  // optional int32 scene_id = 8;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->scene_id(), output);
  }
  
  // optional int32 camp_id = 9;
  if (has_camp_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->camp_id(), output);
  }
  
  // optional int32 level = 10;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->level(), output);
  }
  
  // optional int32 force = 11;
  if (has_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->force(), output);
  }
  
  // optional bool is_death = 12;
  if (has_is_death()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_death(), output);
  }
  
  // optional int32 death_tick = 13;
  if (has_death_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->death_tick(), output);
  }
  
  // optional int32 fight_state = 14;
  if (has_fight_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->fight_state(), output);
  }
  
  // repeated int32 draw_days = 15;
  for (int i = 0; i < this->draw_days_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      15, this->draw_days(i), output);
  }
  
  // repeated int32 draw_gift = 16;
  for (int i = 0; i < this->draw_gift_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      16, this->draw_gift(i), output);
  }
  
  // optional int64 create_tick = 17;
  if (has_create_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->create_tick(), output);
  }
  
  // optional int32 scene_mode = 18;
  if (has_scene_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->scene_mode(), output);
  }
  
  // optional int32 day_reset_tick = 19;
  if (has_day_reset_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->day_reset_tick(), output);
  }
  
  // repeated int32 draw_vips = 20;
  for (int i = 0; i < this->draw_vips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      20, this->draw_vips(i), output);
  }
  
  // optional int64 league_id = 21;
  if (has_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->league_id(), output);
  }
  
  // optional int64 login_day = 22;
  if (has_login_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->login_day(), output);
  }
  
  // optional int32 open_gift_close = 23;
  if (has_open_gift_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->open_gift_close(), output);
  }
  
  // optional int64 login_tick = 24;
  if (has_login_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(24, this->login_tick(), output);
  }
  
  // optional int64 partner_id = 25;
  if (has_partner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(25, this->partner_id(), output);
  }
  
  // optional string partner_name = 26;
  if (has_partner_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->partner_name().data(), this->partner_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->partner_name(), output);
  }
  
  // optional int64 wedding_id = 27;
  if (has_wedding_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(27, this->wedding_id(), output);
  }
  
  // optional int32 wedding_type = 28;
  if (has_wedding_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->wedding_type(), output);
  }
  
  // repeated int32 wedding_self = 29;
  for (int i = 0; i < this->wedding_self_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      29, this->wedding_self(i), output);
  }
  
  // repeated int32 wedding_side = 30;
  for (int i = 0; i < this->wedding_side_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      30, this->wedding_side(i), output);
  }
  
  // optional int64 combine_tick = 31;
  if (has_combine_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(31, this->combine_tick(), output);
  }
  
  // optional int64 transfer_tick = 32;
  if (has_transfer_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(32, this->transfer_tick(), output);
  }
  
  // optional int32 drop_act = 33;
  if (has_drop_act()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->drop_act(), output);
  }
  
  // optional .ProtoPairMap rand_use_times = 34;
  if (has_rand_use_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->rand_use_times(), output);
  }
  
  // optional int32 is_big_act_time = 35;
  if (has_is_big_act_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->is_big_act_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto31400103::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_id(), target);
  }
  
  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }
  
  // optional string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->account(), target);
  }
  
  // optional string agent = 4;
  if (has_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agent().data(), this->agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->agent(), target);
  }
  
  // optional int32 agent_code = 5;
  if (has_agent_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->agent_code(), target);
  }
  
  // optional int32 sex = 6;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sex(), target);
  }
  
  // optional int32 career = 7;
  if (has_career()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->career(), target);
  }
  
  // optional int32 scene_id = 8;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->scene_id(), target);
  }
  
  // optional int32 camp_id = 9;
  if (has_camp_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->camp_id(), target);
  }
  
  // optional int32 level = 10;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->level(), target);
  }
  
  // optional int32 force = 11;
  if (has_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->force(), target);
  }
  
  // optional bool is_death = 12;
  if (has_is_death()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_death(), target);
  }
  
  // optional int32 death_tick = 13;
  if (has_death_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->death_tick(), target);
  }
  
  // optional int32 fight_state = 14;
  if (has_fight_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->fight_state(), target);
  }
  
  // repeated int32 draw_days = 15;
  for (int i = 0; i < this->draw_days_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(15, this->draw_days(i), target);
  }
  
  // repeated int32 draw_gift = 16;
  for (int i = 0; i < this->draw_gift_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(16, this->draw_gift(i), target);
  }
  
  // optional int64 create_tick = 17;
  if (has_create_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->create_tick(), target);
  }
  
  // optional int32 scene_mode = 18;
  if (has_scene_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->scene_mode(), target);
  }
  
  // optional int32 day_reset_tick = 19;
  if (has_day_reset_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->day_reset_tick(), target);
  }
  
  // repeated int32 draw_vips = 20;
  for (int i = 0; i < this->draw_vips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(20, this->draw_vips(i), target);
  }
  
  // optional int64 league_id = 21;
  if (has_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->league_id(), target);
  }
  
  // optional int64 login_day = 22;
  if (has_login_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->login_day(), target);
  }
  
  // optional int32 open_gift_close = 23;
  if (has_open_gift_close()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->open_gift_close(), target);
  }
  
  // optional int64 login_tick = 24;
  if (has_login_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(24, this->login_tick(), target);
  }
  
  // optional int64 partner_id = 25;
  if (has_partner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(25, this->partner_id(), target);
  }
  
  // optional string partner_name = 26;
  if (has_partner_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->partner_name().data(), this->partner_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->partner_name(), target);
  }
  
  // optional int64 wedding_id = 27;
  if (has_wedding_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(27, this->wedding_id(), target);
  }
  
  // optional int32 wedding_type = 28;
  if (has_wedding_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->wedding_type(), target);
  }
  
  // repeated int32 wedding_self = 29;
  for (int i = 0; i < this->wedding_self_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(29, this->wedding_self(i), target);
  }
  
  // repeated int32 wedding_side = 30;
  for (int i = 0; i < this->wedding_side_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(30, this->wedding_side(i), target);
  }
  
  // optional int64 combine_tick = 31;
  if (has_combine_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(31, this->combine_tick(), target);
  }
  
  // optional int64 transfer_tick = 32;
  if (has_transfer_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(32, this->transfer_tick(), target);
  }
  
  // optional int32 drop_act = 33;
  if (has_drop_act()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->drop_act(), target);
  }
  
  // optional .ProtoPairMap rand_use_times = 34;
  if (has_rand_use_times()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->rand_use_times(), target);
  }
  
  // optional int32 is_big_act_time = 35;
  if (has_is_big_act_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->is_big_act_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto31400103::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional string role_name = 2;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }
    
    // optional string account = 3;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }
    
    // optional string agent = 4;
    if (has_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->agent());
    }
    
    // optional int32 agent_code = 5;
    if (has_agent_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->agent_code());
    }
    
    // optional int32 sex = 6;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }
    
    // optional int32 career = 7;
    if (has_career()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->career());
    }
    
    // optional int32 scene_id = 8;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_id());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 camp_id = 9;
    if (has_camp_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp_id());
    }
    
    // optional int32 level = 10;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 force = 11;
    if (has_force()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->force());
    }
    
    // optional bool is_death = 12;
    if (has_is_death()) {
      total_size += 1 + 1;
    }
    
    // optional int32 death_tick = 13;
    if (has_death_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->death_tick());
    }
    
    // optional int32 fight_state = 14;
    if (has_fight_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight_state());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int64 create_tick = 17;
    if (has_create_tick()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->create_tick());
    }
    
    // optional int32 scene_mode = 18;
    if (has_scene_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_mode());
    }
    
    // optional int32 day_reset_tick = 19;
    if (has_day_reset_tick()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day_reset_tick());
    }
    
    // optional int64 league_id = 21;
    if (has_league_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->league_id());
    }
    
    // optional int64 login_day = 22;
    if (has_login_day()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->login_day());
    }
    
    // optional int32 open_gift_close = 23;
    if (has_open_gift_close()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open_gift_close());
    }
    
    // optional int64 login_tick = 24;
    if (has_login_tick()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->login_tick());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int64 partner_id = 25;
    if (has_partner_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->partner_id());
    }
    
    // optional string partner_name = 26;
    if (has_partner_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->partner_name());
    }
    
    // optional int64 wedding_id = 27;
    if (has_wedding_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->wedding_id());
    }
    
    // optional int32 wedding_type = 28;
    if (has_wedding_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wedding_type());
    }
    
    // optional int64 combine_tick = 31;
    if (has_combine_tick()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->combine_tick());
    }
    
    // optional int64 transfer_tick = 32;
    if (has_transfer_tick()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->transfer_tick());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 drop_act = 33;
    if (has_drop_act()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->drop_act());
    }
    
    // optional .ProtoPairMap rand_use_times = 34;
    if (has_rand_use_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rand_use_times());
    }
    
    // optional int32 is_big_act_time = 35;
    if (has_is_big_act_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_big_act_time());
    }
    
  }
  // repeated int32 draw_days = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->draw_days_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->draw_days(i));
    }
    total_size += 1 * this->draw_days_size() + data_size;
  }
  
  // repeated int32 draw_gift = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->draw_gift_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->draw_gift(i));
    }
    total_size += 2 * this->draw_gift_size() + data_size;
  }
  
  // repeated int32 draw_vips = 20;
  {
    int data_size = 0;
    for (int i = 0; i < this->draw_vips_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->draw_vips(i));
    }
    total_size += 2 * this->draw_vips_size() + data_size;
  }
  
  // repeated int32 wedding_self = 29;
  {
    int data_size = 0;
    for (int i = 0; i < this->wedding_self_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->wedding_self(i));
    }
    total_size += 2 * this->wedding_self_size() + data_size;
  }
  
  // repeated int32 wedding_side = 30;
  {
    int data_size = 0;
    for (int i = 0; i < this->wedding_side_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->wedding_side(i));
    }
    total_size += 2 * this->wedding_side_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto31400103::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto31400103* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto31400103*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto31400103::MergeFrom(const Proto31400103& from) {
  GOOGLE_CHECK_NE(&from, this);
  draw_days_.MergeFrom(from.draw_days_);
  draw_gift_.MergeFrom(from.draw_gift_);
  draw_vips_.MergeFrom(from.draw_vips_);
  wedding_self_.MergeFrom(from.wedding_self_);
  wedding_side_.MergeFrom(from.wedding_side_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_agent()) {
      set_agent(from.agent());
    }
    if (from.has_agent_code()) {
      set_agent_code(from.agent_code());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_career()) {
      set_career(from.career());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_camp_id()) {
      set_camp_id(from.camp_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_force()) {
      set_force(from.force());
    }
    if (from.has_is_death()) {
      set_is_death(from.is_death());
    }
    if (from.has_death_tick()) {
      set_death_tick(from.death_tick());
    }
    if (from.has_fight_state()) {
      set_fight_state(from.fight_state());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_create_tick()) {
      set_create_tick(from.create_tick());
    }
    if (from.has_scene_mode()) {
      set_scene_mode(from.scene_mode());
    }
    if (from.has_day_reset_tick()) {
      set_day_reset_tick(from.day_reset_tick());
    }
    if (from.has_league_id()) {
      set_league_id(from.league_id());
    }
    if (from.has_login_day()) {
      set_login_day(from.login_day());
    }
    if (from.has_open_gift_close()) {
      set_open_gift_close(from.open_gift_close());
    }
    if (from.has_login_tick()) {
      set_login_tick(from.login_tick());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_partner_id()) {
      set_partner_id(from.partner_id());
    }
    if (from.has_partner_name()) {
      set_partner_name(from.partner_name());
    }
    if (from.has_wedding_id()) {
      set_wedding_id(from.wedding_id());
    }
    if (from.has_wedding_type()) {
      set_wedding_type(from.wedding_type());
    }
    if (from.has_combine_tick()) {
      set_combine_tick(from.combine_tick());
    }
    if (from.has_transfer_tick()) {
      set_transfer_tick(from.transfer_tick());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_drop_act()) {
      set_drop_act(from.drop_act());
    }
    if (from.has_rand_use_times()) {
      mutable_rand_use_times()->::ProtoPairMap::MergeFrom(from.rand_use_times());
    }
    if (from.has_is_big_act_time()) {
      set_is_big_act_time(from.is_big_act_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto31400103::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto31400103::CopyFrom(const Proto31400103& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto31400103::IsInitialized() const {
  
  return true;
}

void Proto31400103::Swap(Proto31400103* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(account_, other->account_);
    std::swap(agent_, other->agent_);
    std::swap(agent_code_, other->agent_code_);
    std::swap(sex_, other->sex_);
    std::swap(career_, other->career_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(camp_id_, other->camp_id_);
    std::swap(level_, other->level_);
    std::swap(force_, other->force_);
    std::swap(is_death_, other->is_death_);
    std::swap(death_tick_, other->death_tick_);
    std::swap(fight_state_, other->fight_state_);
    draw_days_.Swap(&other->draw_days_);
    draw_gift_.Swap(&other->draw_gift_);
    std::swap(create_tick_, other->create_tick_);
    std::swap(scene_mode_, other->scene_mode_);
    std::swap(day_reset_tick_, other->day_reset_tick_);
    draw_vips_.Swap(&other->draw_vips_);
    std::swap(league_id_, other->league_id_);
    std::swap(login_day_, other->login_day_);
    std::swap(open_gift_close_, other->open_gift_close_);
    std::swap(login_tick_, other->login_tick_);
    std::swap(partner_id_, other->partner_id_);
    std::swap(partner_name_, other->partner_name_);
    std::swap(wedding_id_, other->wedding_id_);
    std::swap(wedding_type_, other->wedding_type_);
    wedding_self_.Swap(&other->wedding_self_);
    wedding_side_.Swap(&other->wedding_side_);
    std::swap(combine_tick_, other->combine_tick_);
    std::swap(transfer_tick_, other->transfer_tick_);
    std::swap(drop_act_, other->drop_act_);
    std::swap(rand_use_times_, other->rand_use_times_);
    std::swap(is_big_act_time_, other->is_big_act_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto31400103::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto31400103_descriptor_;
  metadata.reflection = Proto31400103_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto31400104::kRoleIdFieldNumber;
const int Proto31400104::kPackageSetFieldNumber;
const int Proto31400104::kLotteryFieldNumber;
#endif  // !_MSC_VER

Proto31400104::Proto31400104()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto31400104::InitAsDefaultInstance() {
  package_set_ = const_cast< ::ProtoPackageSet*>(&::ProtoPackageSet::default_instance());
}

Proto31400104::Proto31400104(const Proto31400104& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto31400104::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  package_set_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto31400104::~Proto31400104() {
  SharedDtor();
}

void Proto31400104::SharedDtor() {
  if (this != default_instance_) {
    delete package_set_;
  }
}

void Proto31400104::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto31400104::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto31400104_descriptor_;
}

const Proto31400104& Proto31400104::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInner001_2eproto();  return *default_instance_;
}

Proto31400104* Proto31400104::default_instance_ = NULL;

Proto31400104* Proto31400104::New() const {
  return new Proto31400104;
}

void Proto31400104::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_LONGLONG(0);
    if (has_package_set()) {
      if (package_set_ != NULL) package_set_->::ProtoPackageSet::Clear();
    }
  }
  lottery_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto31400104::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_package_set;
        break;
      }
      
      // optional .ProtoPackageSet package_set = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_package_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_package_set()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_lottery;
        break;
      }
      
      // repeated .ProtoLottery lottery = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lottery:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lottery()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_lottery;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto31400104::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_id(), output);
  }
  
  // optional .ProtoPackageSet package_set = 2;
  if (has_package_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->package_set(), output);
  }
  
  // repeated .ProtoLottery lottery = 3;
  for (int i = 0; i < this->lottery_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->lottery(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto31400104::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_id(), target);
  }
  
  // optional .ProtoPackageSet package_set = 2;
  if (has_package_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->package_set(), target);
  }
  
  // repeated .ProtoLottery lottery = 3;
  for (int i = 0; i < this->lottery_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->lottery(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto31400104::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional .ProtoPackageSet package_set = 2;
    if (has_package_set()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->package_set());
    }
    
  }
  // repeated .ProtoLottery lottery = 3;
  total_size += 1 * this->lottery_size();
  for (int i = 0; i < this->lottery_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lottery(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto31400104::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto31400104* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto31400104*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto31400104::MergeFrom(const Proto31400104& from) {
  GOOGLE_CHECK_NE(&from, this);
  lottery_.MergeFrom(from.lottery_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_package_set()) {
      mutable_package_set()->::ProtoPackageSet::MergeFrom(from.package_set());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto31400104::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto31400104::CopyFrom(const Proto31400104& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto31400104::IsInitialized() const {
  
  return true;
}

void Proto31400104::Swap(Proto31400104* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(package_set_, other->package_set_);
    lottery_.Swap(&other->lottery_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto31400104::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto31400104_descriptor_;
  metadata.reflection = Proto31400104_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto31400105::kRoleIdFieldNumber;
const int Proto31400105::kSignInTickFieldNumber;
const int Proto31400105::kSignOutTickFieldNumber;
const int Proto31400105::kTotalOnlineTickFieldNumber;
const int Proto31400105::kDayOnlineTickFieldNumber;
const int Proto31400105::kWeekOnlineTickFieldNumber;
const int Proto31400105::kMonthOnlineTickFieldNumber;
const int Proto31400105::kYearOnlineTickFieldNumber;
const int Proto31400105::kDayRefreshTickFieldNumber;
const int Proto31400105::kWeekRefreshTickFieldNumber;
const int Proto31400105::kMonthRefreshTickFieldNumber;
const int Proto31400105::kYearRefreshTickFieldNumber;
#endif  // !_MSC_VER

Proto31400105::Proto31400105()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto31400105::InitAsDefaultInstance() {
}

Proto31400105::Proto31400105(const Proto31400105& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto31400105::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  sign_in_tick_ = GOOGLE_LONGLONG(0);
  sign_out_tick_ = GOOGLE_LONGLONG(0);
  total_online_tick_ = 0;
  day_online_tick_ = 0;
  week_online_tick_ = 0;
  month_online_tick_ = 0;
  year_online_tick_ = 0;
  day_refresh_tick_ = GOOGLE_LONGLONG(0);
  week_refresh_tick_ = GOOGLE_LONGLONG(0);
  month_refresh_tick_ = GOOGLE_LONGLONG(0);
  year_refresh_tick_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto31400105::~Proto31400105() {
  SharedDtor();
}

void Proto31400105::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto31400105::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto31400105::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto31400105_descriptor_;
}

const Proto31400105& Proto31400105::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInner001_2eproto();  return *default_instance_;
}

Proto31400105* Proto31400105::default_instance_ = NULL;

Proto31400105* Proto31400105::New() const {
  return new Proto31400105;
}

void Proto31400105::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_LONGLONG(0);
    sign_in_tick_ = GOOGLE_LONGLONG(0);
    sign_out_tick_ = GOOGLE_LONGLONG(0);
    total_online_tick_ = 0;
    day_online_tick_ = 0;
    week_online_tick_ = 0;
    month_online_tick_ = 0;
    year_online_tick_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    day_refresh_tick_ = GOOGLE_LONGLONG(0);
    week_refresh_tick_ = GOOGLE_LONGLONG(0);
    month_refresh_tick_ = GOOGLE_LONGLONG(0);
    year_refresh_tick_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto31400105::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sign_in_tick;
        break;
      }
      
      // optional int64 sign_in_tick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sign_in_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sign_in_tick_)));
          set_has_sign_in_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sign_out_tick;
        break;
      }
      
      // optional int64 sign_out_tick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sign_out_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sign_out_tick_)));
          set_has_sign_out_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total_online_tick;
        break;
      }
      
      // optional int32 total_online_tick = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_online_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_online_tick_)));
          set_has_total_online_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_day_online_tick;
        break;
      }
      
      // optional int32 day_online_tick = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_day_online_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_online_tick_)));
          set_has_day_online_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_week_online_tick;
        break;
      }
      
      // optional int32 week_online_tick = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week_online_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &week_online_tick_)));
          set_has_week_online_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_month_online_tick;
        break;
      }
      
      // optional int32 month_online_tick = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_month_online_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &month_online_tick_)));
          set_has_month_online_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_year_online_tick;
        break;
      }
      
      // optional int32 year_online_tick = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_year_online_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &year_online_tick_)));
          set_has_year_online_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_day_refresh_tick;
        break;
      }
      
      // optional int64 day_refresh_tick = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_day_refresh_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &day_refresh_tick_)));
          set_has_day_refresh_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_week_refresh_tick;
        break;
      }
      
      // optional int64 week_refresh_tick = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week_refresh_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &week_refresh_tick_)));
          set_has_week_refresh_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_month_refresh_tick;
        break;
      }
      
      // optional int64 month_refresh_tick = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_month_refresh_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &month_refresh_tick_)));
          set_has_month_refresh_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_year_refresh_tick;
        break;
      }
      
      // optional int64 year_refresh_tick = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_year_refresh_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &year_refresh_tick_)));
          set_has_year_refresh_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto31400105::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_id(), output);
  }
  
  // optional int64 sign_in_tick = 2;
  if (has_sign_in_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->sign_in_tick(), output);
  }
  
  // optional int64 sign_out_tick = 3;
  if (has_sign_out_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->sign_out_tick(), output);
  }
  
  // optional int32 total_online_tick = 4;
  if (has_total_online_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->total_online_tick(), output);
  }
  
  // optional int32 day_online_tick = 5;
  if (has_day_online_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->day_online_tick(), output);
  }
  
  // optional int32 week_online_tick = 6;
  if (has_week_online_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->week_online_tick(), output);
  }
  
  // optional int32 month_online_tick = 7;
  if (has_month_online_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->month_online_tick(), output);
  }
  
  // optional int32 year_online_tick = 8;
  if (has_year_online_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->year_online_tick(), output);
  }
  
  // optional int64 day_refresh_tick = 9;
  if (has_day_refresh_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->day_refresh_tick(), output);
  }
  
  // optional int64 week_refresh_tick = 10;
  if (has_week_refresh_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->week_refresh_tick(), output);
  }
  
  // optional int64 month_refresh_tick = 11;
  if (has_month_refresh_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->month_refresh_tick(), output);
  }
  
  // optional int64 year_refresh_tick = 12;
  if (has_year_refresh_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->year_refresh_tick(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto31400105::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_id(), target);
  }
  
  // optional int64 sign_in_tick = 2;
  if (has_sign_in_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->sign_in_tick(), target);
  }
  
  // optional int64 sign_out_tick = 3;
  if (has_sign_out_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->sign_out_tick(), target);
  }
  
  // optional int32 total_online_tick = 4;
  if (has_total_online_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->total_online_tick(), target);
  }
  
  // optional int32 day_online_tick = 5;
  if (has_day_online_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->day_online_tick(), target);
  }
  
  // optional int32 week_online_tick = 6;
  if (has_week_online_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->week_online_tick(), target);
  }
  
  // optional int32 month_online_tick = 7;
  if (has_month_online_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->month_online_tick(), target);
  }
  
  // optional int32 year_online_tick = 8;
  if (has_year_online_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->year_online_tick(), target);
  }
  
  // optional int64 day_refresh_tick = 9;
  if (has_day_refresh_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->day_refresh_tick(), target);
  }
  
  // optional int64 week_refresh_tick = 10;
  if (has_week_refresh_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->week_refresh_tick(), target);
  }
  
  // optional int64 month_refresh_tick = 11;
  if (has_month_refresh_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->month_refresh_tick(), target);
  }
  
  // optional int64 year_refresh_tick = 12;
  if (has_year_refresh_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->year_refresh_tick(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto31400105::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional int64 sign_in_tick = 2;
    if (has_sign_in_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sign_in_tick());
    }
    
    // optional int64 sign_out_tick = 3;
    if (has_sign_out_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sign_out_tick());
    }
    
    // optional int32 total_online_tick = 4;
    if (has_total_online_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_online_tick());
    }
    
    // optional int32 day_online_tick = 5;
    if (has_day_online_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day_online_tick());
    }
    
    // optional int32 week_online_tick = 6;
    if (has_week_online_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->week_online_tick());
    }
    
    // optional int32 month_online_tick = 7;
    if (has_month_online_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->month_online_tick());
    }
    
    // optional int32 year_online_tick = 8;
    if (has_year_online_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->year_online_tick());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 day_refresh_tick = 9;
    if (has_day_refresh_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->day_refresh_tick());
    }
    
    // optional int64 week_refresh_tick = 10;
    if (has_week_refresh_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->week_refresh_tick());
    }
    
    // optional int64 month_refresh_tick = 11;
    if (has_month_refresh_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->month_refresh_tick());
    }
    
    // optional int64 year_refresh_tick = 12;
    if (has_year_refresh_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->year_refresh_tick());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto31400105::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto31400105* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto31400105*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto31400105::MergeFrom(const Proto31400105& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_sign_in_tick()) {
      set_sign_in_tick(from.sign_in_tick());
    }
    if (from.has_sign_out_tick()) {
      set_sign_out_tick(from.sign_out_tick());
    }
    if (from.has_total_online_tick()) {
      set_total_online_tick(from.total_online_tick());
    }
    if (from.has_day_online_tick()) {
      set_day_online_tick(from.day_online_tick());
    }
    if (from.has_week_online_tick()) {
      set_week_online_tick(from.week_online_tick());
    }
    if (from.has_month_online_tick()) {
      set_month_online_tick(from.month_online_tick());
    }
    if (from.has_year_online_tick()) {
      set_year_online_tick(from.year_online_tick());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_day_refresh_tick()) {
      set_day_refresh_tick(from.day_refresh_tick());
    }
    if (from.has_week_refresh_tick()) {
      set_week_refresh_tick(from.week_refresh_tick());
    }
    if (from.has_month_refresh_tick()) {
      set_month_refresh_tick(from.month_refresh_tick());
    }
    if (from.has_year_refresh_tick()) {
      set_year_refresh_tick(from.year_refresh_tick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto31400105::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto31400105::CopyFrom(const Proto31400105& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto31400105::IsInitialized() const {
  
  return true;
}

void Proto31400105::Swap(Proto31400105* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(sign_in_tick_, other->sign_in_tick_);
    std::swap(sign_out_tick_, other->sign_out_tick_);
    std::swap(total_online_tick_, other->total_online_tick_);
    std::swap(day_online_tick_, other->day_online_tick_);
    std::swap(week_online_tick_, other->week_online_tick_);
    std::swap(month_online_tick_, other->month_online_tick_);
    std::swap(year_online_tick_, other->year_online_tick_);
    std::swap(day_refresh_tick_, other->day_refresh_tick_);
    std::swap(week_refresh_tick_, other->week_refresh_tick_);
    std::swap(month_refresh_tick_, other->month_refresh_tick_);
    std::swap(year_refresh_tick_, other->year_refresh_tick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto31400105::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto31400105_descriptor_;
  metadata.reflection = Proto31400105_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto31400001::kGateSidFieldNumber;
const int Proto31400001::kLoginTickFieldNumber;
#endif  // !_MSC_VER

Proto31400001::Proto31400001()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto31400001::InitAsDefaultInstance() {
}

Proto31400001::Proto31400001(const Proto31400001& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto31400001::SharedCtor() {
  _cached_size_ = 0;
  gate_sid_ = 0;
  login_tick_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto31400001::~Proto31400001() {
  SharedDtor();
}

void Proto31400001::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto31400001::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto31400001::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto31400001_descriptor_;
}

const Proto31400001& Proto31400001::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInner001_2eproto();  return *default_instance_;
}

Proto31400001* Proto31400001::default_instance_ = NULL;

Proto31400001* Proto31400001::New() const {
  return new Proto31400001;
}

void Proto31400001::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gate_sid_ = 0;
    login_tick_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto31400001::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gate_sid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gate_sid_)));
          set_has_gate_sid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_login_tick;
        break;
      }
      
      // optional int64 login_tick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &login_tick_)));
          set_has_login_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto31400001::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gate_sid = 1;
  if (has_gate_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gate_sid(), output);
  }
  
  // optional int64 login_tick = 2;
  if (has_login_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->login_tick(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto31400001::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 gate_sid = 1;
  if (has_gate_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gate_sid(), target);
  }
  
  // optional int64 login_tick = 2;
  if (has_login_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->login_tick(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto31400001::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gate_sid = 1;
    if (has_gate_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gate_sid());
    }
    
    // optional int64 login_tick = 2;
    if (has_login_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->login_tick());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto31400001::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto31400001* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto31400001*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto31400001::MergeFrom(const Proto31400001& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gate_sid()) {
      set_gate_sid(from.gate_sid());
    }
    if (from.has_login_tick()) {
      set_login_tick(from.login_tick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto31400001::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto31400001::CopyFrom(const Proto31400001& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto31400001::IsInitialized() const {
  
  return true;
}

void Proto31400001::Swap(Proto31400001* other) {
  if (other != this) {
    std::swap(gate_sid_, other->gate_sid_);
    std::swap(login_tick_, other->login_tick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto31400001::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto31400001_descriptor_;
  metadata.reflection = Proto31400001_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto31400011::kAddMoneyFieldNumber;
const int Proto31400011::kSerialObjFieldNumber;
const int Proto31400011::kIsNotifyFieldNumber;
#endif  // !_MSC_VER

Proto31400011::Proto31400011()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto31400011::InitAsDefaultInstance() {
  add_money_ = const_cast< ::ProtoMoney*>(&::ProtoMoney::default_instance());
  serial_obj_ = const_cast< ::ProtoSerialObj*>(&::ProtoSerialObj::default_instance());
}

Proto31400011::Proto31400011(const Proto31400011& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto31400011::SharedCtor() {
  _cached_size_ = 0;
  add_money_ = NULL;
  serial_obj_ = NULL;
  is_notify_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto31400011::~Proto31400011() {
  SharedDtor();
}

void Proto31400011::SharedDtor() {
  if (this != default_instance_) {
    delete add_money_;
    delete serial_obj_;
  }
}

void Proto31400011::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto31400011::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto31400011_descriptor_;
}

const Proto31400011& Proto31400011::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInner001_2eproto();  return *default_instance_;
}

Proto31400011* Proto31400011::default_instance_ = NULL;

Proto31400011* Proto31400011::New() const {
  return new Proto31400011;
}

void Proto31400011::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_add_money()) {
      if (add_money_ != NULL) add_money_->::ProtoMoney::Clear();
    }
    if (has_serial_obj()) {
      if (serial_obj_ != NULL) serial_obj_->::ProtoSerialObj::Clear();
    }
    is_notify_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto31400011::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ProtoMoney add_money = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_add_money()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_serial_obj;
        break;
      }
      
      // optional .ProtoSerialObj serial_obj = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serial_obj:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_serial_obj()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_notify;
        break;
      }
      
      // optional int32 is_notify = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_notify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_notify_)));
          set_has_is_notify();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto31400011::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ProtoMoney add_money = 1;
  if (has_add_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->add_money(), output);
  }
  
  // optional .ProtoSerialObj serial_obj = 2;
  if (has_serial_obj()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->serial_obj(), output);
  }
  
  // optional int32 is_notify = 3;
  if (has_is_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->is_notify(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto31400011::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ProtoMoney add_money = 1;
  if (has_add_money()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->add_money(), target);
  }
  
  // optional .ProtoSerialObj serial_obj = 2;
  if (has_serial_obj()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->serial_obj(), target);
  }
  
  // optional int32 is_notify = 3;
  if (has_is_notify()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->is_notify(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto31400011::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ProtoMoney add_money = 1;
    if (has_add_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->add_money());
    }
    
    // optional .ProtoSerialObj serial_obj = 2;
    if (has_serial_obj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->serial_obj());
    }
    
    // optional int32 is_notify = 3;
    if (has_is_notify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_notify());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto31400011::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto31400011* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto31400011*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto31400011::MergeFrom(const Proto31400011& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_add_money()) {
      mutable_add_money()->::ProtoMoney::MergeFrom(from.add_money());
    }
    if (from.has_serial_obj()) {
      mutable_serial_obj()->::ProtoSerialObj::MergeFrom(from.serial_obj());
    }
    if (from.has_is_notify()) {
      set_is_notify(from.is_notify());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto31400011::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto31400011::CopyFrom(const Proto31400011& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto31400011::IsInitialized() const {
  
  return true;
}

void Proto31400011::Swap(Proto31400011* other) {
  if (other != this) {
    std::swap(add_money_, other->add_money_);
    std::swap(serial_obj_, other->serial_obj_);
    std::swap(is_notify_, other->is_notify_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto31400011::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto31400011_descriptor_;
  metadata.reflection = Proto31400011_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto31400012::kItemSetFieldNumber;
const int Proto31400012::kSerialObjFieldNumber;
const int Proto31400012::kSourceTypeFieldNumber;
const int Proto31400012::kOperateResultFieldNumber;
#endif  // !_MSC_VER

Proto31400012::Proto31400012()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto31400012::InitAsDefaultInstance() {
  item_set_ = const_cast< ::ProtoItem*>(&::ProtoItem::default_instance());
  serial_obj_ = const_cast< ::ProtoSerialObj*>(&::ProtoSerialObj::default_instance());
}

Proto31400012::Proto31400012(const Proto31400012& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto31400012::SharedCtor() {
  _cached_size_ = 0;
  item_set_ = NULL;
  serial_obj_ = NULL;
  source_type_ = 0;
  operate_result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto31400012::~Proto31400012() {
  SharedDtor();
}

void Proto31400012::SharedDtor() {
  if (this != default_instance_) {
    delete item_set_;
    delete serial_obj_;
  }
}

void Proto31400012::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto31400012::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto31400012_descriptor_;
}

const Proto31400012& Proto31400012::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInner001_2eproto();  return *default_instance_;
}

Proto31400012* Proto31400012::default_instance_ = NULL;

Proto31400012* Proto31400012::New() const {
  return new Proto31400012;
}

void Proto31400012::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_item_set()) {
      if (item_set_ != NULL) item_set_->::ProtoItem::Clear();
    }
    if (has_serial_obj()) {
      if (serial_obj_ != NULL) serial_obj_->::ProtoSerialObj::Clear();
    }
    source_type_ = 0;
    operate_result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto31400012::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ProtoItem item_set = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_set()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_serial_obj;
        break;
      }
      
      // optional .ProtoSerialObj serial_obj = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serial_obj:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_serial_obj()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_source_type;
        break;
      }
      
      // optional int32 source_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_type_)));
          set_has_source_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_operate_result;
        break;
      }
      
      // optional int32 operate_result = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operate_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_result_)));
          set_has_operate_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto31400012::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ProtoItem item_set = 1;
  if (has_item_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item_set(), output);
  }
  
  // optional .ProtoSerialObj serial_obj = 2;
  if (has_serial_obj()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->serial_obj(), output);
  }
  
  // optional int32 source_type = 3;
  if (has_source_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->source_type(), output);
  }
  
  // optional int32 operate_result = 4;
  if (has_operate_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->operate_result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto31400012::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ProtoItem item_set = 1;
  if (has_item_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item_set(), target);
  }
  
  // optional .ProtoSerialObj serial_obj = 2;
  if (has_serial_obj()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->serial_obj(), target);
  }
  
  // optional int32 source_type = 3;
  if (has_source_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->source_type(), target);
  }
  
  // optional int32 operate_result = 4;
  if (has_operate_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->operate_result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto31400012::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ProtoItem item_set = 1;
    if (has_item_set()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_set());
    }
    
    // optional .ProtoSerialObj serial_obj = 2;
    if (has_serial_obj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->serial_obj());
    }
    
    // optional int32 source_type = 3;
    if (has_source_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->source_type());
    }
    
    // optional int32 operate_result = 4;
    if (has_operate_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate_result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto31400012::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto31400012* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto31400012*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto31400012::MergeFrom(const Proto31400012& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_set()) {
      mutable_item_set()->::ProtoItem::MergeFrom(from.item_set());
    }
    if (from.has_serial_obj()) {
      mutable_serial_obj()->::ProtoSerialObj::MergeFrom(from.serial_obj());
    }
    if (from.has_source_type()) {
      set_source_type(from.source_type());
    }
    if (from.has_operate_result()) {
      set_operate_result(from.operate_result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto31400012::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto31400012::CopyFrom(const Proto31400012& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto31400012::IsInitialized() const {
  
  return true;
}

void Proto31400012::Swap(Proto31400012* other) {
  if (other != this) {
    std::swap(item_set_, other->item_set_);
    std::swap(serial_obj_, other->serial_obj_);
    std::swap(source_type_, other->source_type_);
    std::swap(operate_result_, other->operate_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto31400012::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto31400012_descriptor_;
  metadata.reflection = Proto31400012_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto31400221::kMoneyTypeFieldNumber;
const int Proto31400221::kPriceFieldNumber;
const int Proto31400221::kIndexFieldNumber;
const int Proto31400221::kAmountFieldNumber;
const int Proto31400221::kItemObjFieldNumber;
#endif  // !_MSC_VER

Proto31400221::Proto31400221()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto31400221::InitAsDefaultInstance() {
  item_obj_ = const_cast< ::ProtoItem*>(&::ProtoItem::default_instance());
}

Proto31400221::Proto31400221(const Proto31400221& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto31400221::SharedCtor() {
  _cached_size_ = 0;
  money_type_ = 0;
  price_ = 0;
  index_ = 0;
  amount_ = 0;
  item_obj_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto31400221::~Proto31400221() {
  SharedDtor();
}

void Proto31400221::SharedDtor() {
  if (this != default_instance_) {
    delete item_obj_;
  }
}

void Proto31400221::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto31400221::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto31400221_descriptor_;
}

const Proto31400221& Proto31400221::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInner001_2eproto();  return *default_instance_;
}

Proto31400221* Proto31400221::default_instance_ = NULL;

Proto31400221* Proto31400221::New() const {
  return new Proto31400221;
}

void Proto31400221::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    money_type_ = 0;
    price_ = 0;
    index_ = 0;
    amount_ = 0;
    if (has_item_obj()) {
      if (item_obj_ != NULL) item_obj_->::ProtoItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto31400221::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 money_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_type_)));
          set_has_money_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_price;
        break;
      }
      
      // optional int32 price = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }
      
      // optional int32 index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_amount;
        break;
      }
      
      // optional int32 amount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_item_obj;
        break;
      }
      
      // optional .ProtoItem item_obj = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_obj:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_obj()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto31400221::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 money_type = 1;
  if (has_money_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->money_type(), output);
  }
  
  // optional int32 price = 2;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->price(), output);
  }
  
  // optional int32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index(), output);
  }
  
  // optional int32 amount = 4;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->amount(), output);
  }
  
  // optional .ProtoItem item_obj = 5;
  if (has_item_obj()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->item_obj(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto31400221::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 money_type = 1;
  if (has_money_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->money_type(), target);
  }
  
  // optional int32 price = 2;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->price(), target);
  }
  
  // optional int32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index(), target);
  }
  
  // optional int32 amount = 4;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->amount(), target);
  }
  
  // optional .ProtoItem item_obj = 5;
  if (has_item_obj()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->item_obj(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto31400221::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 money_type = 1;
    if (has_money_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money_type());
    }
    
    // optional int32 price = 2;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }
    
    // optional int32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional int32 amount = 4;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->amount());
    }
    
    // optional .ProtoItem item_obj = 5;
    if (has_item_obj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_obj());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto31400221::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto31400221* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto31400221*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto31400221::MergeFrom(const Proto31400221& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_money_type()) {
      set_money_type(from.money_type());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_item_obj()) {
      mutable_item_obj()->::ProtoItem::MergeFrom(from.item_obj());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto31400221::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto31400221::CopyFrom(const Proto31400221& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto31400221::IsInitialized() const {
  
  return true;
}

void Proto31400221::Swap(Proto31400221* other) {
  if (other != this) {
    std::swap(money_type_, other->money_type_);
    std::swap(price_, other->price_);
    std::swap(index_, other->index_);
    std::swap(amount_, other->amount_);
    std::swap(item_obj_, other->item_obj_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto31400221::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto31400221_descriptor_;
  metadata.reflection = Proto31400221_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto31400222::kMarketIndexFieldNumber;
const int Proto31400222::kRoleIdFieldNumber;
const int Proto31400222::kMoneyTypeFieldNumber;
const int Proto31400222::kPriceFieldNumber;
const int Proto31400222::kAmountFieldNumber;
const int Proto31400222::kOperateResultFieldNumber;
const int Proto31400222::kItemObjFieldNumber;
#endif  // !_MSC_VER

Proto31400222::Proto31400222()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto31400222::InitAsDefaultInstance() {
  item_obj_ = const_cast< ::ProtoItem*>(&::ProtoItem::default_instance());
}

Proto31400222::Proto31400222(const Proto31400222& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto31400222::SharedCtor() {
  _cached_size_ = 0;
  market_index_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  money_type_ = 0;
  price_ = 0;
  amount_ = 0;
  operate_result_ = 0;
  item_obj_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto31400222::~Proto31400222() {
  SharedDtor();
}

void Proto31400222::SharedDtor() {
  if (this != default_instance_) {
    delete item_obj_;
  }
}

void Proto31400222::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto31400222::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto31400222_descriptor_;
}

const Proto31400222& Proto31400222::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInner001_2eproto();  return *default_instance_;
}

Proto31400222* Proto31400222::default_instance_ = NULL;

Proto31400222* Proto31400222::New() const {
  return new Proto31400222;
}

void Proto31400222::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    market_index_ = 0;
    role_id_ = GOOGLE_LONGLONG(0);
    money_type_ = 0;
    price_ = 0;
    amount_ = 0;
    operate_result_ = 0;
    if (has_item_obj()) {
      if (item_obj_ != NULL) item_obj_->::ProtoItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto31400222::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 market_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &market_index_)));
          set_has_market_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }
      
      // optional int64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_money_type;
        break;
      }
      
      // optional int32 money_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_type_)));
          set_has_money_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_price;
        break;
      }
      
      // optional int32 price = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_amount;
        break;
      }
      
      // optional int32 amount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_operate_result;
        break;
      }
      
      // optional int32 operate_result = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operate_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_result_)));
          set_has_operate_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_item_obj;
        break;
      }
      
      // optional .ProtoItem item_obj = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_obj:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_obj()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto31400222::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 market_index = 1;
  if (has_market_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->market_index(), output);
  }
  
  // optional int64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->role_id(), output);
  }
  
  // optional int32 money_type = 3;
  if (has_money_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->money_type(), output);
  }
  
  // optional int32 price = 4;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->price(), output);
  }
  
  // optional int32 amount = 5;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->amount(), output);
  }
  
  // optional int32 operate_result = 6;
  if (has_operate_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->operate_result(), output);
  }
  
  // optional .ProtoItem item_obj = 7;
  if (has_item_obj()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->item_obj(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto31400222::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 market_index = 1;
  if (has_market_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->market_index(), target);
  }
  
  // optional int64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->role_id(), target);
  }
  
  // optional int32 money_type = 3;
  if (has_money_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->money_type(), target);
  }
  
  // optional int32 price = 4;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->price(), target);
  }
  
  // optional int32 amount = 5;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->amount(), target);
  }
  
  // optional int32 operate_result = 6;
  if (has_operate_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->operate_result(), target);
  }
  
  // optional .ProtoItem item_obj = 7;
  if (has_item_obj()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->item_obj(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto31400222::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 market_index = 1;
    if (has_market_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->market_index());
    }
    
    // optional int64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional int32 money_type = 3;
    if (has_money_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money_type());
    }
    
    // optional int32 price = 4;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }
    
    // optional int32 amount = 5;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->amount());
    }
    
    // optional int32 operate_result = 6;
    if (has_operate_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate_result());
    }
    
    // optional .ProtoItem item_obj = 7;
    if (has_item_obj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_obj());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto31400222::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto31400222* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto31400222*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto31400222::MergeFrom(const Proto31400222& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_market_index()) {
      set_market_index(from.market_index());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_money_type()) {
      set_money_type(from.money_type());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_operate_result()) {
      set_operate_result(from.operate_result());
    }
    if (from.has_item_obj()) {
      mutable_item_obj()->::ProtoItem::MergeFrom(from.item_obj());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto31400222::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto31400222::CopyFrom(const Proto31400222& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto31400222::IsInitialized() const {
  
  return true;
}

void Proto31400222::Swap(Proto31400222* other) {
  if (other != this) {
    std::swap(market_index_, other->market_index_);
    std::swap(role_id_, other->role_id_);
    std::swap(money_type_, other->money_type_);
    std::swap(price_, other->price_);
    std::swap(amount_, other->amount_);
    std::swap(operate_result_, other->operate_result_);
    std::swap(item_obj_, other->item_obj_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto31400222::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto31400222_descriptor_;
  metadata.reflection = Proto31400222_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto31400223::kMarketIndexFieldNumber;
const int Proto31400223::kMoneyTypeFieldNumber;
const int Proto31400223::kMoneyAmountFieldNumber;
const int Proto31400223::kSendBrocastFieldNumber;
#endif  // !_MSC_VER

Proto31400223::Proto31400223()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto31400223::InitAsDefaultInstance() {
}

Proto31400223::Proto31400223(const Proto31400223& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto31400223::SharedCtor() {
  _cached_size_ = 0;
  market_index_ = 0;
  money_type_ = 0;
  money_amount_ = 0;
  send_brocast_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto31400223::~Proto31400223() {
  SharedDtor();
}

void Proto31400223::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto31400223::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto31400223::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto31400223_descriptor_;
}

const Proto31400223& Proto31400223::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInner001_2eproto();  return *default_instance_;
}

Proto31400223* Proto31400223::default_instance_ = NULL;

Proto31400223* Proto31400223::New() const {
  return new Proto31400223;
}

void Proto31400223::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    market_index_ = 0;
    money_type_ = 0;
    money_amount_ = 0;
    send_brocast_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto31400223::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 market_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &market_index_)));
          set_has_market_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_money_type;
        break;
      }
      
      // optional int32 money_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_type_)));
          set_has_money_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_money_amount;
        break;
      }
      
      // optional int32 money_amount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_amount_)));
          set_has_money_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_send_brocast;
        break;
      }
      
      // optional int32 send_brocast = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_brocast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &send_brocast_)));
          set_has_send_brocast();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto31400223::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 market_index = 1;
  if (has_market_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->market_index(), output);
  }
  
  // optional int32 money_type = 2;
  if (has_money_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->money_type(), output);
  }
  
  // optional int32 money_amount = 3;
  if (has_money_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->money_amount(), output);
  }
  
  // optional int32 send_brocast = 4;
  if (has_send_brocast()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->send_brocast(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto31400223::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 market_index = 1;
  if (has_market_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->market_index(), target);
  }
  
  // optional int32 money_type = 2;
  if (has_money_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->money_type(), target);
  }
  
  // optional int32 money_amount = 3;
  if (has_money_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->money_amount(), target);
  }
  
  // optional int32 send_brocast = 4;
  if (has_send_brocast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->send_brocast(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto31400223::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 market_index = 1;
    if (has_market_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->market_index());
    }
    
    // optional int32 money_type = 2;
    if (has_money_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money_type());
    }
    
    // optional int32 money_amount = 3;
    if (has_money_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money_amount());
    }
    
    // optional int32 send_brocast = 4;
    if (has_send_brocast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->send_brocast());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto31400223::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto31400223* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto31400223*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto31400223::MergeFrom(const Proto31400223& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_market_index()) {
      set_market_index(from.market_index());
    }
    if (from.has_money_type()) {
      set_money_type(from.money_type());
    }
    if (from.has_money_amount()) {
      set_money_amount(from.money_amount());
    }
    if (from.has_send_brocast()) {
      set_send_brocast(from.send_brocast());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto31400223::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto31400223::CopyFrom(const Proto31400223& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto31400223::IsInitialized() const {
  
  return true;
}

void Proto31400223::Swap(Proto31400223* other) {
  if (other != this) {
    std::swap(market_index_, other->market_index_);
    std::swap(money_type_, other->money_type_);
    std::swap(money_amount_, other->money_amount_);
    std::swap(send_brocast_, other->send_brocast_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto31400223::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto31400223_descriptor_;
  metadata.reflection = Proto31400223_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto30400013::kAddExpFieldNumber;
const int Proto30400013::kSerialObjFieldNumber;
#endif  // !_MSC_VER

Proto30400013::Proto30400013()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto30400013::InitAsDefaultInstance() {
  serial_obj_ = const_cast< ::ProtoSerialObj*>(&::ProtoSerialObj::default_instance());
}

Proto30400013::Proto30400013(const Proto30400013& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto30400013::SharedCtor() {
  _cached_size_ = 0;
  add_exp_ = 0;
  serial_obj_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto30400013::~Proto30400013() {
  SharedDtor();
}

void Proto30400013::SharedDtor() {
  if (this != default_instance_) {
    delete serial_obj_;
  }
}

void Proto30400013::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto30400013::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto30400013_descriptor_;
}

const Proto30400013& Proto30400013::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInner001_2eproto();  return *default_instance_;
}

Proto30400013* Proto30400013::default_instance_ = NULL;

Proto30400013* Proto30400013::New() const {
  return new Proto30400013;
}

void Proto30400013::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    add_exp_ = 0;
    if (has_serial_obj()) {
      if (serial_obj_ != NULL) serial_obj_->::ProtoSerialObj::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto30400013::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 add_exp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_exp_)));
          set_has_add_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_serial_obj;
        break;
      }
      
      // optional .ProtoSerialObj serial_obj = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serial_obj:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_serial_obj()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto30400013::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 add_exp = 1;
  if (has_add_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->add_exp(), output);
  }
  
  // optional .ProtoSerialObj serial_obj = 2;
  if (has_serial_obj()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->serial_obj(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto30400013::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 add_exp = 1;
  if (has_add_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->add_exp(), target);
  }
  
  // optional .ProtoSerialObj serial_obj = 2;
  if (has_serial_obj()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->serial_obj(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto30400013::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 add_exp = 1;
    if (has_add_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->add_exp());
    }
    
    // optional .ProtoSerialObj serial_obj = 2;
    if (has_serial_obj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->serial_obj());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto30400013::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto30400013* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto30400013*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto30400013::MergeFrom(const Proto30400013& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_add_exp()) {
      set_add_exp(from.add_exp());
    }
    if (from.has_serial_obj()) {
      mutable_serial_obj()->::ProtoSerialObj::MergeFrom(from.serial_obj());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto30400013::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto30400013::CopyFrom(const Proto30400013& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto30400013::IsInitialized() const {
  
  return true;
}

void Proto30400013::Swap(Proto30400013* other) {
  if (other != this) {
    std::swap(add_exp_, other->add_exp_);
    std::swap(serial_obj_, other->serial_obj_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto30400013::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto30400013_descriptor_;
  metadata.reflection = Proto30400013_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto31400014::kSortFieldNumber;
const int Proto31400014::kNumFieldNumber;
const int Proto31400014::kMonsterSetFieldNumber;
#endif  // !_MSC_VER

Proto31400014::Proto31400014()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto31400014::InitAsDefaultInstance() {
}

Proto31400014::Proto31400014(const Proto31400014& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto31400014::SharedCtor() {
  _cached_size_ = 0;
  sort_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto31400014::~Proto31400014() {
  SharedDtor();
}

void Proto31400014::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto31400014::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto31400014::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto31400014_descriptor_;
}

const Proto31400014& Proto31400014::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInner001_2eproto();  return *default_instance_;
}

Proto31400014* Proto31400014::default_instance_ = NULL;

Proto31400014* Proto31400014::New() const {
  return new Proto31400014;
}

void Proto31400014::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sort_ = 0;
    num_ = 0;
  }
  monster_set_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto31400014::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sort = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sort_)));
          set_has_sort();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }
      
      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_monster_set;
        break;
      }
      
      // repeated .ProtoMonster monster_set = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monster_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monster_set()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_monster_set;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto31400014::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 sort = 1;
  if (has_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sort(), output);
  }
  
  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }
  
  // repeated .ProtoMonster monster_set = 3;
  for (int i = 0; i < this->monster_set_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->monster_set(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto31400014::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 sort = 1;
  if (has_sort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sort(), target);
  }
  
  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }
  
  // repeated .ProtoMonster monster_set = 3;
  for (int i = 0; i < this->monster_set_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->monster_set(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto31400014::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sort = 1;
    if (has_sort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sort());
    }
    
    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }
    
  }
  // repeated .ProtoMonster monster_set = 3;
  total_size += 1 * this->monster_set_size();
  for (int i = 0; i < this->monster_set_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monster_set(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto31400014::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto31400014* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto31400014*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto31400014::MergeFrom(const Proto31400014& from) {
  GOOGLE_CHECK_NE(&from, this);
  monster_set_.MergeFrom(from.monster_set_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sort()) {
      set_sort(from.sort());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto31400014::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto31400014::CopyFrom(const Proto31400014& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto31400014::IsInitialized() const {
  
  return true;
}

void Proto31400014::Swap(Proto31400014* other) {
  if (other != this) {
    std::swap(sort_, other->sort_);
    std::swap(num_, other->num_);
    monster_set_.Swap(&other->monster_set_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto31400014::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto31400014_descriptor_;
  metadata.reflection = Proto31400014_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto31400015::kItemIdFieldNumber;
const int Proto31400015::kNumFieldNumber;
const int Proto31400015::kBindFieldNumber;
#endif  // !_MSC_VER

Proto31400015::Proto31400015()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto31400015::InitAsDefaultInstance() {
}

Proto31400015::Proto31400015(const Proto31400015& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto31400015::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0;
  num_ = 0;
  bind_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto31400015::~Proto31400015() {
  SharedDtor();
}

void Proto31400015::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto31400015::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto31400015::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto31400015_descriptor_;
}

const Proto31400015& Proto31400015::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInner001_2eproto();  return *default_instance_;
}

Proto31400015* Proto31400015::default_instance_ = NULL;

Proto31400015* Proto31400015::New() const {
  return new Proto31400015;
}

void Proto31400015::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0;
    num_ = 0;
    bind_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto31400015::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }
      
      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bind;
        break;
      }
      
      // optional int32 bind = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bind_)));
          set_has_bind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto31400015::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_id(), output);
  }
  
  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }
  
  // optional int32 bind = 3;
  if (has_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bind(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto31400015::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_id(), target);
  }
  
  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }
  
  // optional int32 bind = 3;
  if (has_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bind(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto31400015::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }
    
    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }
    
    // optional int32 bind = 3;
    if (has_bind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bind());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto31400015::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto31400015* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto31400015*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto31400015::MergeFrom(const Proto31400015& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_bind()) {
      set_bind(from.bind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto31400015::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto31400015::CopyFrom(const Proto31400015& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto31400015::IsInitialized() const {
  
  return true;
}

void Proto31400015::Swap(Proto31400015* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(num_, other->num_);
    std::swap(bind_, other->bind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto31400015::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto31400015_descriptor_;
  metadata.reflection = Proto31400015_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto30400011::kOffsetFieldNumber;
const int Proto30400011::kPropSetFieldNumber;
const int Proto30400011::kEnterTypeFieldNumber;
const int Proto30400011::kUnnotifyFieldNumber;
#endif  // !_MSC_VER

Proto30400011::Proto30400011()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto30400011::InitAsDefaultInstance() {
}

Proto30400011::Proto30400011(const Proto30400011& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto30400011::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0;
  enter_type_ = 0;
  unnotify_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto30400011::~Proto30400011() {
  SharedDtor();
}

void Proto30400011::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto30400011::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto30400011::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto30400011_descriptor_;
}

const Proto30400011& Proto30400011::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInner001_2eproto();  return *default_instance_;
}

Proto30400011* Proto30400011::default_instance_ = NULL;

Proto30400011* Proto30400011::New() const {
  return new Proto30400011;
}

void Proto30400011::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    offset_ = 0;
    enter_type_ = 0;
    unnotify_ = 0;
  }
  prop_set_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto30400011::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 offset = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_prop_set;
        break;
      }
      
      // repeated .ProtoPairObj prop_set = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prop_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prop_set()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_prop_set;
        if (input->ExpectTag(24)) goto parse_enter_type;
        break;
      }
      
      // optional int32 enter_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enter_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enter_type_)));
          set_has_enter_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_unnotify;
        break;
      }
      
      // optional int32 unnotify = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unnotify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unnotify_)));
          set_has_unnotify();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto30400011::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->offset(), output);
  }
  
  // repeated .ProtoPairObj prop_set = 2;
  for (int i = 0; i < this->prop_set_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->prop_set(i), output);
  }
  
  // optional int32 enter_type = 3;
  if (has_enter_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->enter_type(), output);
  }
  
  // optional int32 unnotify = 4;
  if (has_unnotify()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->unnotify(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto30400011::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->offset(), target);
  }
  
  // repeated .ProtoPairObj prop_set = 2;
  for (int i = 0; i < this->prop_set_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->prop_set(i), target);
  }
  
  // optional int32 enter_type = 3;
  if (has_enter_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->enter_type(), target);
  }
  
  // optional int32 unnotify = 4;
  if (has_unnotify()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->unnotify(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto30400011::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }
    
    // optional int32 enter_type = 3;
    if (has_enter_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enter_type());
    }
    
    // optional int32 unnotify = 4;
    if (has_unnotify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unnotify());
    }
    
  }
  // repeated .ProtoPairObj prop_set = 2;
  total_size += 1 * this->prop_set_size();
  for (int i = 0; i < this->prop_set_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prop_set(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto30400011::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto30400011* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto30400011*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto30400011::MergeFrom(const Proto30400011& from) {
  GOOGLE_CHECK_NE(&from, this);
  prop_set_.MergeFrom(from.prop_set_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_enter_type()) {
      set_enter_type(from.enter_type());
    }
    if (from.has_unnotify()) {
      set_unnotify(from.unnotify());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto30400011::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto30400011::CopyFrom(const Proto30400011& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto30400011::IsInitialized() const {
  
  return true;
}

void Proto30400011::Swap(Proto30400011* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    prop_set_.Swap(&other->prop_set_);
    std::swap(enter_type_, other->enter_type_);
    std::swap(unnotify_, other->unnotify_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto30400011::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto30400011_descriptor_;
  metadata.reflection = Proto30400011_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto31400016::kDeathFlagFieldNumber;
const int Proto31400016::kIncValFieldNumber;
const int Proto31400016::kAttackorFieldNumber;
const int Proto31400016::kMountFlagFieldNumber;
#endif  // !_MSC_VER

Proto31400016::Proto31400016()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto31400016::InitAsDefaultInstance() {
}

Proto31400016::Proto31400016(const Proto31400016& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto31400016::SharedCtor() {
  _cached_size_ = 0;
  death_flag_ = 0;
  inc_val_ = GOOGLE_LONGLONG(0);
  attackor_ = GOOGLE_LONGLONG(0);
  mount_flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto31400016::~Proto31400016() {
  SharedDtor();
}

void Proto31400016::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto31400016::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto31400016::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto31400016_descriptor_;
}

const Proto31400016& Proto31400016::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInner001_2eproto();  return *default_instance_;
}

Proto31400016* Proto31400016::default_instance_ = NULL;

Proto31400016* Proto31400016::New() const {
  return new Proto31400016;
}

void Proto31400016::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    death_flag_ = 0;
    inc_val_ = GOOGLE_LONGLONG(0);
    attackor_ = GOOGLE_LONGLONG(0);
    mount_flag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto31400016::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 death_flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &death_flag_)));
          set_has_death_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_inc_val;
        break;
      }
      
      // optional int64 inc_val = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inc_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &inc_val_)));
          set_has_inc_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_attackor;
        break;
      }
      
      // optional int64 attackor = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attackor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &attackor_)));
          set_has_attackor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mount_flag;
        break;
      }
      
      // optional int32 mount_flag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mount_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mount_flag_)));
          set_has_mount_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto31400016::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 death_flag = 1;
  if (has_death_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->death_flag(), output);
  }
  
  // optional int64 inc_val = 2;
  if (has_inc_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->inc_val(), output);
  }
  
  // optional int64 attackor = 3;
  if (has_attackor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->attackor(), output);
  }
  
  // optional int32 mount_flag = 4;
  if (has_mount_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mount_flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto31400016::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 death_flag = 1;
  if (has_death_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->death_flag(), target);
  }
  
  // optional int64 inc_val = 2;
  if (has_inc_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->inc_val(), target);
  }
  
  // optional int64 attackor = 3;
  if (has_attackor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->attackor(), target);
  }
  
  // optional int32 mount_flag = 4;
  if (has_mount_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mount_flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto31400016::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 death_flag = 1;
    if (has_death_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->death_flag());
    }
    
    // optional int64 inc_val = 2;
    if (has_inc_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->inc_val());
    }
    
    // optional int64 attackor = 3;
    if (has_attackor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->attackor());
    }
    
    // optional int32 mount_flag = 4;
    if (has_mount_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mount_flag());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto31400016::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto31400016* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto31400016*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto31400016::MergeFrom(const Proto31400016& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_death_flag()) {
      set_death_flag(from.death_flag());
    }
    if (from.has_inc_val()) {
      set_inc_val(from.inc_val());
    }
    if (from.has_attackor()) {
      set_attackor(from.attackor());
    }
    if (from.has_mount_flag()) {
      set_mount_flag(from.mount_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto31400016::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto31400016::CopyFrom(const Proto31400016& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto31400016::IsInitialized() const {
  
  return true;
}

void Proto31400016::Swap(Proto31400016* other) {
  if (other != this) {
    std::swap(death_flag_, other->death_flag_);
    std::swap(inc_val_, other->inc_val_);
    std::swap(attackor_, other->attackor_);
    std::swap(mount_flag_, other->mount_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto31400016::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto31400016_descriptor_;
  metadata.reflection = Proto31400016_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto30400401::kBeastIdFieldNumber;
const int Proto30400401::kBeastSortFieldNumber;
const int Proto30400401::kBeastLevelFieldNumber;
const int Proto30400401::kBeastNameFieldNumber;
const int Proto30400401::kActionStateFieldNumber;
const int Proto30400401::kAbilityFieldNumber;
const int Proto30400401::kGrowthLvlFieldNumber;
const int Proto30400401::kNotifyFlagFieldNumber;
const int Proto30400401::kSkillSetFieldNumber;
const int Proto30400401::kBeastForceFieldNumber;
const int Proto30400401::kEnterFlagFieldNumber;
#endif  // !_MSC_VER

Proto30400401::Proto30400401()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto30400401::InitAsDefaultInstance() {
}

Proto30400401::Proto30400401(const Proto30400401& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto30400401::SharedCtor() {
  _cached_size_ = 0;
  beast_id_ = GOOGLE_LONGLONG(0);
  beast_sort_ = 0;
  beast_level_ = 0;
  beast_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  action_state_ = 0;
  ability_ = 0;
  growth_lvl_ = 0;
  notify_flag_ = 0;
  beast_force_ = 0;
  enter_flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto30400401::~Proto30400401() {
  SharedDtor();
}

void Proto30400401::SharedDtor() {
  if (beast_name_ != &::google::protobuf::internal::kEmptyString) {
    delete beast_name_;
  }
  if (this != default_instance_) {
  }
}

void Proto30400401::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto30400401::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto30400401_descriptor_;
}

const Proto30400401& Proto30400401::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInner001_2eproto();  return *default_instance_;
}

Proto30400401* Proto30400401::default_instance_ = NULL;

Proto30400401* Proto30400401::New() const {
  return new Proto30400401;
}

void Proto30400401::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    beast_id_ = GOOGLE_LONGLONG(0);
    beast_sort_ = 0;
    beast_level_ = 0;
    if (has_beast_name()) {
      if (beast_name_ != &::google::protobuf::internal::kEmptyString) {
        beast_name_->clear();
      }
    }
    action_state_ = 0;
    ability_ = 0;
    growth_lvl_ = 0;
    notify_flag_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    beast_force_ = 0;
    enter_flag_ = 0;
  }
  skill_set_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto30400401::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 beast_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &beast_id_)));
          set_has_beast_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_beast_sort;
        break;
      }
      
      // optional int32 beast_sort = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beast_sort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beast_sort_)));
          set_has_beast_sort();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_beast_level;
        break;
      }
      
      // optional int32 beast_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beast_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beast_level_)));
          set_has_beast_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_beast_name;
        break;
      }
      
      // optional string beast_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beast_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_beast_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->beast_name().data(), this->beast_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_action_state;
        break;
      }
      
      // optional int32 action_state = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_state_)));
          set_has_action_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ability;
        break;
      }
      
      // optional int32 ability = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ability_)));
          set_has_ability();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_growth_lvl;
        break;
      }
      
      // optional int32 growth_lvl = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_growth_lvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &growth_lvl_)));
          set_has_growth_lvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_notify_flag;
        break;
      }
      
      // optional int32 notify_flag = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_notify_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &notify_flag_)));
          set_has_notify_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_skill_set;
        break;
      }
      
      // repeated .ProtoPairObj skill_set = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill_set()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_skill_set;
        if (input->ExpectTag(80)) goto parse_beast_force;
        break;
      }
      
      // optional int32 beast_force = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beast_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beast_force_)));
          set_has_beast_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_enter_flag;
        break;
      }
      
      // optional int32 enter_flag = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enter_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enter_flag_)));
          set_has_enter_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto30400401::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 beast_id = 1;
  if (has_beast_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->beast_id(), output);
  }
  
  // optional int32 beast_sort = 2;
  if (has_beast_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->beast_sort(), output);
  }
  
  // optional int32 beast_level = 3;
  if (has_beast_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->beast_level(), output);
  }
  
  // optional string beast_name = 4;
  if (has_beast_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beast_name().data(), this->beast_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->beast_name(), output);
  }
  
  // optional int32 action_state = 5;
  if (has_action_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->action_state(), output);
  }
  
  // optional int32 ability = 6;
  if (has_ability()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ability(), output);
  }
  
  // optional int32 growth_lvl = 7;
  if (has_growth_lvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->growth_lvl(), output);
  }
  
  // optional int32 notify_flag = 8;
  if (has_notify_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->notify_flag(), output);
  }
  
  // repeated .ProtoPairObj skill_set = 9;
  for (int i = 0; i < this->skill_set_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->skill_set(i), output);
  }
  
  // optional int32 beast_force = 10;
  if (has_beast_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->beast_force(), output);
  }
  
  // optional int32 enter_flag = 11;
  if (has_enter_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->enter_flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto30400401::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 beast_id = 1;
  if (has_beast_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->beast_id(), target);
  }
  
  // optional int32 beast_sort = 2;
  if (has_beast_sort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->beast_sort(), target);
  }
  
  // optional int32 beast_level = 3;
  if (has_beast_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->beast_level(), target);
  }
  
  // optional string beast_name = 4;
  if (has_beast_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beast_name().data(), this->beast_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->beast_name(), target);
  }
  
  // optional int32 action_state = 5;
  if (has_action_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->action_state(), target);
  }
  
  // optional int32 ability = 6;
  if (has_ability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ability(), target);
  }
  
  // optional int32 growth_lvl = 7;
  if (has_growth_lvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->growth_lvl(), target);
  }
  
  // optional int32 notify_flag = 8;
  if (has_notify_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->notify_flag(), target);
  }
  
  // repeated .ProtoPairObj skill_set = 9;
  for (int i = 0; i < this->skill_set_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->skill_set(i), target);
  }
  
  // optional int32 beast_force = 10;
  if (has_beast_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->beast_force(), target);
  }
  
  // optional int32 enter_flag = 11;
  if (has_enter_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->enter_flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto30400401::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 beast_id = 1;
    if (has_beast_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->beast_id());
    }
    
    // optional int32 beast_sort = 2;
    if (has_beast_sort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->beast_sort());
    }
    
    // optional int32 beast_level = 3;
    if (has_beast_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->beast_level());
    }
    
    // optional string beast_name = 4;
    if (has_beast_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->beast_name());
    }
    
    // optional int32 action_state = 5;
    if (has_action_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action_state());
    }
    
    // optional int32 ability = 6;
    if (has_ability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ability());
    }
    
    // optional int32 growth_lvl = 7;
    if (has_growth_lvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->growth_lvl());
    }
    
    // optional int32 notify_flag = 8;
    if (has_notify_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->notify_flag());
    }
    
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int32 beast_force = 10;
    if (has_beast_force()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->beast_force());
    }
    
    // optional int32 enter_flag = 11;
    if (has_enter_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enter_flag());
    }
    
  }
  // repeated .ProtoPairObj skill_set = 9;
  total_size += 1 * this->skill_set_size();
  for (int i = 0; i < this->skill_set_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill_set(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto30400401::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto30400401* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto30400401*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto30400401::MergeFrom(const Proto30400401& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_set_.MergeFrom(from.skill_set_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_beast_id()) {
      set_beast_id(from.beast_id());
    }
    if (from.has_beast_sort()) {
      set_beast_sort(from.beast_sort());
    }
    if (from.has_beast_level()) {
      set_beast_level(from.beast_level());
    }
    if (from.has_beast_name()) {
      set_beast_name(from.beast_name());
    }
    if (from.has_action_state()) {
      set_action_state(from.action_state());
    }
    if (from.has_ability()) {
      set_ability(from.ability());
    }
    if (from.has_growth_lvl()) {
      set_growth_lvl(from.growth_lvl());
    }
    if (from.has_notify_flag()) {
      set_notify_flag(from.notify_flag());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_beast_force()) {
      set_beast_force(from.beast_force());
    }
    if (from.has_enter_flag()) {
      set_enter_flag(from.enter_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto30400401::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto30400401::CopyFrom(const Proto30400401& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto30400401::IsInitialized() const {
  
  return true;
}

void Proto30400401::Swap(Proto30400401* other) {
  if (other != this) {
    std::swap(beast_id_, other->beast_id_);
    std::swap(beast_sort_, other->beast_sort_);
    std::swap(beast_level_, other->beast_level_);
    std::swap(beast_name_, other->beast_name_);
    std::swap(action_state_, other->action_state_);
    std::swap(ability_, other->ability_);
    std::swap(growth_lvl_, other->growth_lvl_);
    std::swap(notify_flag_, other->notify_flag_);
    skill_set_.Swap(&other->skill_set_);
    std::swap(beast_force_, other->beast_force_);
    std::swap(enter_flag_, other->enter_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto30400401::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto30400401_descriptor_;
  metadata.reflection = Proto30400401_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto30400402::kBeastIdFieldNumber;
const int Proto30400402::kNotifyFlagFieldNumber;
#endif  // !_MSC_VER

Proto30400402::Proto30400402()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto30400402::InitAsDefaultInstance() {
}

Proto30400402::Proto30400402(const Proto30400402& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto30400402::SharedCtor() {
  _cached_size_ = 0;
  beast_id_ = GOOGLE_LONGLONG(0);
  notify_flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto30400402::~Proto30400402() {
  SharedDtor();
}

void Proto30400402::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto30400402::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto30400402::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto30400402_descriptor_;
}

const Proto30400402& Proto30400402::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInner001_2eproto();  return *default_instance_;
}

Proto30400402* Proto30400402::default_instance_ = NULL;

Proto30400402* Proto30400402::New() const {
  return new Proto30400402;
}

void Proto30400402::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    beast_id_ = GOOGLE_LONGLONG(0);
    notify_flag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto30400402::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 beast_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &beast_id_)));
          set_has_beast_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_notify_flag;
        break;
      }
      
      // optional int32 notify_flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_notify_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &notify_flag_)));
          set_has_notify_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto30400402::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 beast_id = 1;
  if (has_beast_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->beast_id(), output);
  }
  
  // optional int32 notify_flag = 2;
  if (has_notify_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->notify_flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto30400402::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 beast_id = 1;
  if (has_beast_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->beast_id(), target);
  }
  
  // optional int32 notify_flag = 2;
  if (has_notify_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->notify_flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto30400402::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 beast_id = 1;
    if (has_beast_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->beast_id());
    }
    
    // optional int32 notify_flag = 2;
    if (has_notify_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->notify_flag());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto30400402::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto30400402* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto30400402*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto30400402::MergeFrom(const Proto30400402& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_beast_id()) {
      set_beast_id(from.beast_id());
    }
    if (from.has_notify_flag()) {
      set_notify_flag(from.notify_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto30400402::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto30400402::CopyFrom(const Proto30400402& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto30400402::IsInitialized() const {
  
  return true;
}

void Proto30400402::Swap(Proto30400402* other) {
  if (other != this) {
    std::swap(beast_id_, other->beast_id_);
    std::swap(notify_flag_, other->notify_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto30400402::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto30400402_descriptor_;
  metadata.reflection = Proto30400402_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto30400405::kBeastIdFieldNumber;
const int Proto30400405::kOffsetFieldNumber;
const int Proto30400405::kPropSetFieldNumber;
#endif  // !_MSC_VER

Proto30400405::Proto30400405()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto30400405::InitAsDefaultInstance() {
}

Proto30400405::Proto30400405(const Proto30400405& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto30400405::SharedCtor() {
  _cached_size_ = 0;
  beast_id_ = GOOGLE_LONGLONG(0);
  offset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto30400405::~Proto30400405() {
  SharedDtor();
}

void Proto30400405::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto30400405::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto30400405::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto30400405_descriptor_;
}

const Proto30400405& Proto30400405::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInner001_2eproto();  return *default_instance_;
}

Proto30400405* Proto30400405::default_instance_ = NULL;

Proto30400405* Proto30400405::New() const {
  return new Proto30400405;
}

void Proto30400405::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    beast_id_ = GOOGLE_LONGLONG(0);
    offset_ = 0;
  }
  prop_set_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto30400405::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 beast_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &beast_id_)));
          set_has_beast_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_offset;
        break;
      }
      
      // optional int32 offset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_prop_set;
        break;
      }
      
      // repeated .ProtoPairObj prop_set = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prop_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prop_set()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_prop_set;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto30400405::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 beast_id = 1;
  if (has_beast_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->beast_id(), output);
  }
  
  // optional int32 offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->offset(), output);
  }
  
  // repeated .ProtoPairObj prop_set = 3;
  for (int i = 0; i < this->prop_set_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->prop_set(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto30400405::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 beast_id = 1;
  if (has_beast_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->beast_id(), target);
  }
  
  // optional int32 offset = 2;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->offset(), target);
  }
  
  // repeated .ProtoPairObj prop_set = 3;
  for (int i = 0; i < this->prop_set_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->prop_set(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto30400405::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 beast_id = 1;
    if (has_beast_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->beast_id());
    }
    
    // optional int32 offset = 2;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }
    
  }
  // repeated .ProtoPairObj prop_set = 3;
  total_size += 1 * this->prop_set_size();
  for (int i = 0; i < this->prop_set_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prop_set(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto30400405::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto30400405* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto30400405*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto30400405::MergeFrom(const Proto30400405& from) {
  GOOGLE_CHECK_NE(&from, this);
  prop_set_.MergeFrom(from.prop_set_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_beast_id()) {
      set_beast_id(from.beast_id());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto30400405::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto30400405::CopyFrom(const Proto30400405& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto30400405::IsInitialized() const {
  
  return true;
}

void Proto30400405::Swap(Proto30400405* other) {
  if (other != this) {
    std::swap(beast_id_, other->beast_id_);
    std::swap(offset_, other->offset_);
    prop_set_.Swap(&other->prop_set_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto30400405::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto30400405_descriptor_;
  metadata.reflection = Proto30400405_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto30400406::kMountGradeFieldNumber;
const int Proto30400406::kOnMountFieldNumber;
const int Proto30400406::kMountShapeFieldNumber;
const int Proto30400406::kNotifyFlagFieldNumber;
const int Proto30400406::kSkillSetFieldNumber;
const int Proto30400406::kTypeFieldNumber;
const int Proto30400406::kOperateFieldNumber;
const int Proto30400406::kOpenFieldNumber;
const int Proto30400406::kActShapeFieldNumber;
#endif  // !_MSC_VER

Proto30400406::Proto30400406()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto30400406::InitAsDefaultInstance() {
}

Proto30400406::Proto30400406(const Proto30400406& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto30400406::SharedCtor() {
  _cached_size_ = 0;
  mount_grade_ = 0;
  on_mount_ = 0;
  mount_shape_ = 0;
  notify_flag_ = 0;
  type_ = 0;
  operate_ = 0;
  open_ = 0;
  act_shape_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto30400406::~Proto30400406() {
  SharedDtor();
}

void Proto30400406::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto30400406::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto30400406::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto30400406_descriptor_;
}

const Proto30400406& Proto30400406::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInner001_2eproto();  return *default_instance_;
}

Proto30400406* Proto30400406::default_instance_ = NULL;

Proto30400406* Proto30400406::New() const {
  return new Proto30400406;
}

void Proto30400406::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mount_grade_ = 0;
    on_mount_ = 0;
    mount_shape_ = 0;
    notify_flag_ = 0;
    type_ = 0;
    operate_ = 0;
    open_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    act_shape_ = 0;
  }
  skill_set_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto30400406::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mount_grade = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mount_grade_)));
          set_has_mount_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_on_mount;
        break;
      }
      
      // optional int32 on_mount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_on_mount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &on_mount_)));
          set_has_on_mount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mount_shape;
        break;
      }
      
      // optional int32 mount_shape = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mount_shape:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mount_shape_)));
          set_has_mount_shape();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_notify_flag;
        break;
      }
      
      // optional int32 notify_flag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_notify_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &notify_flag_)));
          set_has_notify_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_skill_set;
        break;
      }
      
      // repeated .ProtoPairObj skill_set = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill_set()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_skill_set;
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }
      
      // optional int32 type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_operate;
        break;
      }
      
      // optional int32 operate = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_open;
        break;
      }
      
      // optional int32 open = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_act_shape;
        break;
      }
      
      // optional int32 act_shape = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_act_shape:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &act_shape_)));
          set_has_act_shape();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto30400406::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 mount_grade = 1;
  if (has_mount_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mount_grade(), output);
  }
  
  // optional int32 on_mount = 2;
  if (has_on_mount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->on_mount(), output);
  }
  
  // optional int32 mount_shape = 3;
  if (has_mount_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mount_shape(), output);
  }
  
  // optional int32 notify_flag = 4;
  if (has_notify_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->notify_flag(), output);
  }
  
  // repeated .ProtoPairObj skill_set = 5;
  for (int i = 0; i < this->skill_set_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->skill_set(i), output);
  }
  
  // optional int32 type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->type(), output);
  }
  
  // optional int32 operate = 7;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->operate(), output);
  }
  
  // optional int32 open = 8;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->open(), output);
  }
  
  // optional int32 act_shape = 9;
  if (has_act_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->act_shape(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto30400406::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 mount_grade = 1;
  if (has_mount_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mount_grade(), target);
  }
  
  // optional int32 on_mount = 2;
  if (has_on_mount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->on_mount(), target);
  }
  
  // optional int32 mount_shape = 3;
  if (has_mount_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mount_shape(), target);
  }
  
  // optional int32 notify_flag = 4;
  if (has_notify_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->notify_flag(), target);
  }
  
  // repeated .ProtoPairObj skill_set = 5;
  for (int i = 0; i < this->skill_set_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->skill_set(i), target);
  }
  
  // optional int32 type = 6;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->type(), target);
  }
  
  // optional int32 operate = 7;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->operate(), target);
  }
  
  // optional int32 open = 8;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->open(), target);
  }
  
  // optional int32 act_shape = 9;
  if (has_act_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->act_shape(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto30400406::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 mount_grade = 1;
    if (has_mount_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mount_grade());
    }
    
    // optional int32 on_mount = 2;
    if (has_on_mount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->on_mount());
    }
    
    // optional int32 mount_shape = 3;
    if (has_mount_shape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mount_shape());
    }
    
    // optional int32 notify_flag = 4;
    if (has_notify_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->notify_flag());
    }
    
    // optional int32 type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int32 operate = 7;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }
    
    // optional int32 open = 8;
    if (has_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 act_shape = 9;
    if (has_act_shape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->act_shape());
    }
    
  }
  // repeated .ProtoPairObj skill_set = 5;
  total_size += 1 * this->skill_set_size();
  for (int i = 0; i < this->skill_set_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill_set(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto30400406::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto30400406* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto30400406*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto30400406::MergeFrom(const Proto30400406& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_set_.MergeFrom(from.skill_set_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mount_grade()) {
      set_mount_grade(from.mount_grade());
    }
    if (from.has_on_mount()) {
      set_on_mount(from.on_mount());
    }
    if (from.has_mount_shape()) {
      set_mount_shape(from.mount_shape());
    }
    if (from.has_notify_flag()) {
      set_notify_flag(from.notify_flag());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_act_shape()) {
      set_act_shape(from.act_shape());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto30400406::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto30400406::CopyFrom(const Proto30400406& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto30400406::IsInitialized() const {
  
  return true;
}

void Proto30400406::Swap(Proto30400406* other) {
  if (other != this) {
    std::swap(mount_grade_, other->mount_grade_);
    std::swap(on_mount_, other->on_mount_);
    std::swap(mount_shape_, other->mount_shape_);
    std::swap(notify_flag_, other->notify_flag_);
    skill_set_.Swap(&other->skill_set_);
    std::swap(type_, other->type_);
    std::swap(operate_, other->operate_);
    std::swap(open_, other->open_);
    std::swap(act_shape_, other->act_shape_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto30400406::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto30400406_descriptor_;
  metadata.reflection = Proto30400406_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto31400108::kTaskListFieldNumber;
const int Proto31400108::kSubmitedTaskFieldNumber;
const int Proto31400108::kIsFirstRenameFieldNumber;
const int Proto31400108::kNoviceStepFieldNumber;
const int Proto31400108::kLatestMainTaskFieldNumber;
const int Proto31400108::kUiopenStepFieldNumber;
const int Proto31400108::kRoutineRefreshTickFieldNumber;
const int Proto31400108::kRoutineListFieldNumber;
const int Proto31400108::kRoutineIndexFieldNumber;
const int Proto31400108::kRoutineConsumeHistoryFieldNumber;
const int Proto31400108::kIsFinishAllRoutineFieldNumber;
const int Proto31400108::kIsRoutineTaskFieldNumber;
const int Proto31400108::kTotalNumFieldNumber;
const int Proto31400108::kIsSecondRoutineFieldNumber;
const int Proto31400108::kLcontriTickFieldNumber;
const int Proto31400108::kLcontriDayFieldNumber;
const int Proto31400108::kOpenUiListFieldNumber;
const int Proto31400108::kTrialFreshTckFieldNumber;
const int Proto31400108::kUsedTrialTimesFieldNumber;
const int Proto31400108::kTrialTaskSetFieldNumber;
const int Proto31400108::kUiVersionFieldNumber;
const int Proto31400108::kFinishTaskFieldNumber;
#endif  // !_MSC_VER

Proto31400108::Proto31400108()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto31400108::InitAsDefaultInstance() {
}

Proto31400108::Proto31400108(const Proto31400108& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto31400108::SharedCtor() {
  _cached_size_ = 0;
  is_first_rename_ = 0;
  novice_step_ = 0;
  latest_main_task_ = 0;
  routine_refresh_tick_ = 0;
  lcontri_tick_ = 0;
  lcontri_day_ = 0;
  trial_fresh_tck_ = 0;
  used_trial_times_ = 0;
  ui_version_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto31400108::~Proto31400108() {
  SharedDtor();
}

void Proto31400108::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto31400108::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto31400108::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto31400108_descriptor_;
}

const Proto31400108& Proto31400108::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInner001_2eproto();  return *default_instance_;
}

Proto31400108* Proto31400108::default_instance_ = NULL;

Proto31400108* Proto31400108::New() const {
  return new Proto31400108;
}

void Proto31400108::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    is_first_rename_ = 0;
    novice_step_ = 0;
    latest_main_task_ = 0;
    routine_refresh_tick_ = 0;
  }
  if (_has_bits_[14 / 32] & (0xffu << (14 % 32))) {
    lcontri_tick_ = 0;
    lcontri_day_ = 0;
  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    trial_fresh_tck_ = 0;
    used_trial_times_ = 0;
    ui_version_ = 0;
  }
  task_list_.Clear();
  submited_task_.Clear();
  uiopen_step_.Clear();
  routine_list_.Clear();
  routine_index_.Clear();
  routine_consume_history_.Clear();
  is_finish_all_routine_.Clear();
  is_routine_task_.Clear();
  total_num_.Clear();
  is_second_routine_.Clear();
  open_ui_list_.Clear();
  trial_task_set_.Clear();
  finish_task_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto31400108::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoInnerTaskInfo task_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_task_list;
        if (input->ExpectTag(16)) goto parse_submited_task;
        break;
      }
      
      // repeated int32 submited_task = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_submited_task:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_submited_task())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_submited_task())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_submited_task;
        if (input->ExpectTag(24)) goto parse_is_first_rename;
        break;
      }
      
      // optional int32 is_first_rename = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_first_rename:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_first_rename_)));
          set_has_is_first_rename();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_novice_step;
        break;
      }
      
      // optional int32 novice_step = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_novice_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &novice_step_)));
          set_has_novice_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_latest_main_task;
        break;
      }
      
      // optional int32 latest_main_task = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_latest_main_task:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &latest_main_task_)));
          set_has_latest_main_task();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_uiopen_step;
        break;
      }
      
      // repeated int32 uiopen_step = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiopen_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_uiopen_step())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_uiopen_step())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_uiopen_step;
        if (input->ExpectTag(56)) goto parse_routine_refresh_tick;
        break;
      }
      
      // optional int32 routine_refresh_tick = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_routine_refresh_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &routine_refresh_tick_)));
          set_has_routine_refresh_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_routine_list;
        break;
      }
      
      // repeated int32 routine_list = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_routine_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_routine_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_routine_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_routine_list;
        if (input->ExpectTag(72)) goto parse_routine_index;
        break;
      }
      
      // repeated int32 routine_index = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_routine_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_routine_index())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_routine_index())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_routine_index;
        if (input->ExpectTag(80)) goto parse_routine_consume_history;
        break;
      }
      
      // repeated int32 routine_consume_history = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_routine_consume_history:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_routine_consume_history())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_routine_consume_history())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_routine_consume_history;
        if (input->ExpectTag(88)) goto parse_is_finish_all_routine;
        break;
      }
      
      // repeated int32 is_finish_all_routine = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_finish_all_routine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_is_finish_all_routine())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_is_finish_all_routine())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_is_finish_all_routine;
        if (input->ExpectTag(96)) goto parse_is_routine_task;
        break;
      }
      
      // repeated int32 is_routine_task = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_routine_task:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_is_routine_task())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_is_routine_task())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_is_routine_task;
        if (input->ExpectTag(104)) goto parse_total_num;
        break;
      }
      
      // repeated int32 total_num = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 104, input, this->mutable_total_num())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_total_num())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_total_num;
        if (input->ExpectTag(112)) goto parse_is_second_routine;
        break;
      }
      
      // repeated int32 is_second_routine = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_second_routine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 112, input, this->mutable_is_second_routine())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_is_second_routine())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_is_second_routine;
        if (input->ExpectTag(120)) goto parse_lcontri_tick;
        break;
      }
      
      // optional int32 lcontri_tick = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lcontri_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lcontri_tick_)));
          set_has_lcontri_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_lcontri_day;
        break;
      }
      
      // optional int32 lcontri_day = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lcontri_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lcontri_day_)));
          set_has_lcontri_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_open_ui_list;
        break;
      }
      
      // repeated string open_ui_list = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_open_ui_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_open_ui_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->open_ui_list(0).data(), this->open_ui_list(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_open_ui_list;
        if (input->ExpectTag(144)) goto parse_trial_fresh_tck;
        break;
      }
      
      // optional int32 trial_fresh_tck = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trial_fresh_tck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trial_fresh_tck_)));
          set_has_trial_fresh_tck();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_used_trial_times;
        break;
      }
      
      // optional int32 used_trial_times = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_used_trial_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &used_trial_times_)));
          set_has_used_trial_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_trial_task_set;
        break;
      }
      
      // repeated int32 trial_task_set = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trial_task_set:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 160, input, this->mutable_trial_task_set())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_trial_task_set())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_trial_task_set;
        if (input->ExpectTag(168)) goto parse_ui_version;
        break;
      }
      
      // optional int32 ui_version = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ui_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ui_version_)));
          set_has_ui_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_finish_task;
        break;
      }
      
      // repeated int32 finish_task = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finish_task:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 176, input, this->mutable_finish_task())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_finish_task())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_finish_task;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto31400108::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoInnerTaskInfo task_list = 1;
  for (int i = 0; i < this->task_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->task_list(i), output);
  }
  
  // repeated int32 submited_task = 2;
  for (int i = 0; i < this->submited_task_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->submited_task(i), output);
  }
  
  // optional int32 is_first_rename = 3;
  if (has_is_first_rename()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->is_first_rename(), output);
  }
  
  // optional int32 novice_step = 4;
  if (has_novice_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->novice_step(), output);
  }
  
  // optional int32 latest_main_task = 5;
  if (has_latest_main_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->latest_main_task(), output);
  }
  
  // repeated int32 uiopen_step = 6;
  for (int i = 0; i < this->uiopen_step_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->uiopen_step(i), output);
  }
  
  // optional int32 routine_refresh_tick = 7;
  if (has_routine_refresh_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->routine_refresh_tick(), output);
  }
  
  // repeated int32 routine_list = 8;
  for (int i = 0; i < this->routine_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->routine_list(i), output);
  }
  
  // repeated int32 routine_index = 9;
  for (int i = 0; i < this->routine_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->routine_index(i), output);
  }
  
  // repeated int32 routine_consume_history = 10;
  for (int i = 0; i < this->routine_consume_history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->routine_consume_history(i), output);
  }
  
  // repeated int32 is_finish_all_routine = 11;
  for (int i = 0; i < this->is_finish_all_routine_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->is_finish_all_routine(i), output);
  }
  
  // repeated int32 is_routine_task = 12;
  for (int i = 0; i < this->is_routine_task_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->is_routine_task(i), output);
  }
  
  // repeated int32 total_num = 13;
  for (int i = 0; i < this->total_num_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      13, this->total_num(i), output);
  }
  
  // repeated int32 is_second_routine = 14;
  for (int i = 0; i < this->is_second_routine_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      14, this->is_second_routine(i), output);
  }
  
  // optional int32 lcontri_tick = 15;
  if (has_lcontri_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->lcontri_tick(), output);
  }
  
  // optional int32 lcontri_day = 16;
  if (has_lcontri_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->lcontri_day(), output);
  }
  
  // repeated string open_ui_list = 17;
  for (int i = 0; i < this->open_ui_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->open_ui_list(i).data(), this->open_ui_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->open_ui_list(i), output);
  }
  
  // optional int32 trial_fresh_tck = 18;
  if (has_trial_fresh_tck()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->trial_fresh_tck(), output);
  }
  
  // optional int32 used_trial_times = 19;
  if (has_used_trial_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->used_trial_times(), output);
  }
  
  // repeated int32 trial_task_set = 20;
  for (int i = 0; i < this->trial_task_set_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      20, this->trial_task_set(i), output);
  }
  
  // optional int32 ui_version = 21;
  if (has_ui_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->ui_version(), output);
  }
  
  // repeated int32 finish_task = 22;
  for (int i = 0; i < this->finish_task_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      22, this->finish_task(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto31400108::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoInnerTaskInfo task_list = 1;
  for (int i = 0; i < this->task_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->task_list(i), target);
  }
  
  // repeated int32 submited_task = 2;
  for (int i = 0; i < this->submited_task_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->submited_task(i), target);
  }
  
  // optional int32 is_first_rename = 3;
  if (has_is_first_rename()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->is_first_rename(), target);
  }
  
  // optional int32 novice_step = 4;
  if (has_novice_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->novice_step(), target);
  }
  
  // optional int32 latest_main_task = 5;
  if (has_latest_main_task()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->latest_main_task(), target);
  }
  
  // repeated int32 uiopen_step = 6;
  for (int i = 0; i < this->uiopen_step_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->uiopen_step(i), target);
  }
  
  // optional int32 routine_refresh_tick = 7;
  if (has_routine_refresh_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->routine_refresh_tick(), target);
  }
  
  // repeated int32 routine_list = 8;
  for (int i = 0; i < this->routine_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->routine_list(i), target);
  }
  
  // repeated int32 routine_index = 9;
  for (int i = 0; i < this->routine_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->routine_index(i), target);
  }
  
  // repeated int32 routine_consume_history = 10;
  for (int i = 0; i < this->routine_consume_history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->routine_consume_history(i), target);
  }
  
  // repeated int32 is_finish_all_routine = 11;
  for (int i = 0; i < this->is_finish_all_routine_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->is_finish_all_routine(i), target);
  }
  
  // repeated int32 is_routine_task = 12;
  for (int i = 0; i < this->is_routine_task_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->is_routine_task(i), target);
  }
  
  // repeated int32 total_num = 13;
  for (int i = 0; i < this->total_num_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(13, this->total_num(i), target);
  }
  
  // repeated int32 is_second_routine = 14;
  for (int i = 0; i < this->is_second_routine_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(14, this->is_second_routine(i), target);
  }
  
  // optional int32 lcontri_tick = 15;
  if (has_lcontri_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->lcontri_tick(), target);
  }
  
  // optional int32 lcontri_day = 16;
  if (has_lcontri_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->lcontri_day(), target);
  }
  
  // repeated string open_ui_list = 17;
  for (int i = 0; i < this->open_ui_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->open_ui_list(i).data(), this->open_ui_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(17, this->open_ui_list(i), target);
  }
  
  // optional int32 trial_fresh_tck = 18;
  if (has_trial_fresh_tck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->trial_fresh_tck(), target);
  }
  
  // optional int32 used_trial_times = 19;
  if (has_used_trial_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->used_trial_times(), target);
  }
  
  // repeated int32 trial_task_set = 20;
  for (int i = 0; i < this->trial_task_set_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(20, this->trial_task_set(i), target);
  }
  
  // optional int32 ui_version = 21;
  if (has_ui_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->ui_version(), target);
  }
  
  // repeated int32 finish_task = 22;
  for (int i = 0; i < this->finish_task_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(22, this->finish_task(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto31400108::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int32 is_first_rename = 3;
    if (has_is_first_rename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_first_rename());
    }
    
    // optional int32 novice_step = 4;
    if (has_novice_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->novice_step());
    }
    
    // optional int32 latest_main_task = 5;
    if (has_latest_main_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->latest_main_task());
    }
    
    // optional int32 routine_refresh_tick = 7;
    if (has_routine_refresh_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->routine_refresh_tick());
    }
    
  }
  if (_has_bits_[14 / 32] & (0xffu << (14 % 32))) {
    // optional int32 lcontri_tick = 15;
    if (has_lcontri_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lcontri_tick());
    }
    
    // optional int32 lcontri_day = 16;
    if (has_lcontri_day()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lcontri_day());
    }
    
  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional int32 trial_fresh_tck = 18;
    if (has_trial_fresh_tck()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trial_fresh_tck());
    }
    
    // optional int32 used_trial_times = 19;
    if (has_used_trial_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->used_trial_times());
    }
    
    // optional int32 ui_version = 21;
    if (has_ui_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ui_version());
    }
    
  }
  // repeated .ProtoInnerTaskInfo task_list = 1;
  total_size += 1 * this->task_list_size();
  for (int i = 0; i < this->task_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task_list(i));
  }
  
  // repeated int32 submited_task = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->submited_task_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->submited_task(i));
    }
    total_size += 1 * this->submited_task_size() + data_size;
  }
  
  // repeated int32 uiopen_step = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->uiopen_step_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->uiopen_step(i));
    }
    total_size += 1 * this->uiopen_step_size() + data_size;
  }
  
  // repeated int32 routine_list = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->routine_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->routine_list(i));
    }
    total_size += 1 * this->routine_list_size() + data_size;
  }
  
  // repeated int32 routine_index = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->routine_index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->routine_index(i));
    }
    total_size += 1 * this->routine_index_size() + data_size;
  }
  
  // repeated int32 routine_consume_history = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->routine_consume_history_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->routine_consume_history(i));
    }
    total_size += 1 * this->routine_consume_history_size() + data_size;
  }
  
  // repeated int32 is_finish_all_routine = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->is_finish_all_routine_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->is_finish_all_routine(i));
    }
    total_size += 1 * this->is_finish_all_routine_size() + data_size;
  }
  
  // repeated int32 is_routine_task = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->is_routine_task_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->is_routine_task(i));
    }
    total_size += 1 * this->is_routine_task_size() + data_size;
  }
  
  // repeated int32 total_num = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->total_num_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->total_num(i));
    }
    total_size += 1 * this->total_num_size() + data_size;
  }
  
  // repeated int32 is_second_routine = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->is_second_routine_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->is_second_routine(i));
    }
    total_size += 1 * this->is_second_routine_size() + data_size;
  }
  
  // repeated string open_ui_list = 17;
  total_size += 2 * this->open_ui_list_size();
  for (int i = 0; i < this->open_ui_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->open_ui_list(i));
  }
  
  // repeated int32 trial_task_set = 20;
  {
    int data_size = 0;
    for (int i = 0; i < this->trial_task_set_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->trial_task_set(i));
    }
    total_size += 2 * this->trial_task_set_size() + data_size;
  }
  
  // repeated int32 finish_task = 22;
  {
    int data_size = 0;
    for (int i = 0; i < this->finish_task_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->finish_task(i));
    }
    total_size += 2 * this->finish_task_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto31400108::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto31400108* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto31400108*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto31400108::MergeFrom(const Proto31400108& from) {
  GOOGLE_CHECK_NE(&from, this);
  task_list_.MergeFrom(from.task_list_);
  submited_task_.MergeFrom(from.submited_task_);
  uiopen_step_.MergeFrom(from.uiopen_step_);
  routine_list_.MergeFrom(from.routine_list_);
  routine_index_.MergeFrom(from.routine_index_);
  routine_consume_history_.MergeFrom(from.routine_consume_history_);
  is_finish_all_routine_.MergeFrom(from.is_finish_all_routine_);
  is_routine_task_.MergeFrom(from.is_routine_task_);
  total_num_.MergeFrom(from.total_num_);
  is_second_routine_.MergeFrom(from.is_second_routine_);
  open_ui_list_.MergeFrom(from.open_ui_list_);
  trial_task_set_.MergeFrom(from.trial_task_set_);
  finish_task_.MergeFrom(from.finish_task_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_is_first_rename()) {
      set_is_first_rename(from.is_first_rename());
    }
    if (from.has_novice_step()) {
      set_novice_step(from.novice_step());
    }
    if (from.has_latest_main_task()) {
      set_latest_main_task(from.latest_main_task());
    }
    if (from.has_routine_refresh_tick()) {
      set_routine_refresh_tick(from.routine_refresh_tick());
    }
  }
  if (from._has_bits_[14 / 32] & (0xffu << (14 % 32))) {
    if (from.has_lcontri_tick()) {
      set_lcontri_tick(from.lcontri_tick());
    }
    if (from.has_lcontri_day()) {
      set_lcontri_day(from.lcontri_day());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_trial_fresh_tck()) {
      set_trial_fresh_tck(from.trial_fresh_tck());
    }
    if (from.has_used_trial_times()) {
      set_used_trial_times(from.used_trial_times());
    }
    if (from.has_ui_version()) {
      set_ui_version(from.ui_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto31400108::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto31400108::CopyFrom(const Proto31400108& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto31400108::IsInitialized() const {
  
  return true;
}

void Proto31400108::Swap(Proto31400108* other) {
  if (other != this) {
    task_list_.Swap(&other->task_list_);
    submited_task_.Swap(&other->submited_task_);
    std::swap(is_first_rename_, other->is_first_rename_);
    std::swap(novice_step_, other->novice_step_);
    std::swap(latest_main_task_, other->latest_main_task_);
    uiopen_step_.Swap(&other->uiopen_step_);
    std::swap(routine_refresh_tick_, other->routine_refresh_tick_);
    routine_list_.Swap(&other->routine_list_);
    routine_index_.Swap(&other->routine_index_);
    routine_consume_history_.Swap(&other->routine_consume_history_);
    is_finish_all_routine_.Swap(&other->is_finish_all_routine_);
    is_routine_task_.Swap(&other->is_routine_task_);
    total_num_.Swap(&other->total_num_);
    is_second_routine_.Swap(&other->is_second_routine_);
    std::swap(lcontri_tick_, other->lcontri_tick_);
    std::swap(lcontri_day_, other->lcontri_day_);
    open_ui_list_.Swap(&other->open_ui_list_);
    std::swap(trial_fresh_tck_, other->trial_fresh_tck_);
    std::swap(used_trial_times_, other->used_trial_times_);
    trial_task_set_.Swap(&other->trial_task_set_);
    std::swap(ui_version_, other->ui_version_);
    finish_task_.Swap(&other->finish_task_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto31400108::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto31400108_descriptor_;
  metadata.reflection = Proto31400108_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto31400109::kMountSetFieldNumber;
#endif  // !_MSC_VER

Proto31400109::Proto31400109()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto31400109::InitAsDefaultInstance() {
}

Proto31400109::Proto31400109(const Proto31400109& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto31400109::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto31400109::~Proto31400109() {
  SharedDtor();
}

void Proto31400109::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto31400109::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto31400109::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto31400109_descriptor_;
}

const Proto31400109& Proto31400109::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInner001_2eproto();  return *default_instance_;
}

Proto31400109* Proto31400109::default_instance_ = NULL;

Proto31400109* Proto31400109::New() const {
  return new Proto31400109;
}

void Proto31400109::Clear() {
  mount_set_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto31400109::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoMount mount_set = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mount_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mount_set()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mount_set;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto31400109::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoMount mount_set = 1;
  for (int i = 0; i < this->mount_set_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mount_set(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto31400109::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoMount mount_set = 1;
  for (int i = 0; i < this->mount_set_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mount_set(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto31400109::ByteSize() const {
  int total_size = 0;
  
  // repeated .ProtoMount mount_set = 1;
  total_size += 1 * this->mount_set_size();
  for (int i = 0; i < this->mount_set_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mount_set(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto31400109::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto31400109* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto31400109*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto31400109::MergeFrom(const Proto31400109& from) {
  GOOGLE_CHECK_NE(&from, this);
  mount_set_.MergeFrom(from.mount_set_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto31400109::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto31400109::CopyFrom(const Proto31400109& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto31400109::IsInitialized() const {
  
  return true;
}

void Proto31400109::Swap(Proto31400109* other) {
  if (other != this) {
    mount_set_.Swap(&other->mount_set_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto31400109::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto31400109_descriptor_;
  metadata.reflection = Proto31400109_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto31400110::kPackSizeFieldNumber;
const int Proto31400110::kBeastSkillSetFieldNumber;
const int Proto31400110::kCurBeastFieldNumber;
const int Proto31400110::kLastBeastFieldNumber;
const int Proto31400110::kCurSortFieldNumber;
const int Proto31400110::kLastSortFieldNumber;
const int Proto31400110::kSaveBeastFieldNumber;
const int Proto31400110::kSkillBookIdFieldNumber;
const int Proto31400110::kSkillBookIndexFieldNumber;
const int Proto31400110::kLuckyFieldNumber;
const int Proto31400110::kIsOpenSkillFieldNumber;
#endif  // !_MSC_VER

Proto31400110::Proto31400110()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto31400110::InitAsDefaultInstance() {
}

Proto31400110::Proto31400110(const Proto31400110& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto31400110::SharedCtor() {
  _cached_size_ = 0;
  pack_size_ = 0;
  cur_beast_ = GOOGLE_LONGLONG(0);
  last_beast_ = GOOGLE_LONGLONG(0);
  cur_sort_ = 0;
  last_sort_ = 0;
  save_beast_ = GOOGLE_LONGLONG(0);
  lucky_ = 0;
  is_open_skill_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto31400110::~Proto31400110() {
  SharedDtor();
}

void Proto31400110::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto31400110::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto31400110::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto31400110_descriptor_;
}

const Proto31400110& Proto31400110::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInner001_2eproto();  return *default_instance_;
}

Proto31400110* Proto31400110::default_instance_ = NULL;

Proto31400110* Proto31400110::New() const {
  return new Proto31400110;
}

void Proto31400110::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pack_size_ = 0;
    cur_beast_ = GOOGLE_LONGLONG(0);
    last_beast_ = GOOGLE_LONGLONG(0);
    cur_sort_ = 0;
    last_sort_ = 0;
    save_beast_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    lucky_ = 0;
    is_open_skill_ = 0;
  }
  beast_skill_set_.Clear();
  skill_book_id_.Clear();
  skill_book_index_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto31400110::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pack_size = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pack_size_)));
          set_has_pack_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_beast_skill_set;
        break;
      }
      
      // repeated .ProtoBeastSkill beast_skill_set = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beast_skill_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_beast_skill_set()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_beast_skill_set;
        if (input->ExpectTag(24)) goto parse_cur_beast;
        break;
      }
      
      // optional int64 cur_beast = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_beast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cur_beast_)));
          set_has_cur_beast();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_beast;
        break;
      }
      
      // optional int64 last_beast = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_beast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_beast_)));
          set_has_last_beast();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cur_sort;
        break;
      }
      
      // optional int32 cur_sort = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_sort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_sort_)));
          set_has_cur_sort();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_last_sort;
        break;
      }
      
      // optional int32 last_sort = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_sort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_sort_)));
          set_has_last_sort();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_save_beast;
        break;
      }
      
      // optional int64 save_beast = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_save_beast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &save_beast_)));
          set_has_save_beast();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_skill_book_id;
        break;
      }
      
      // repeated int32 skill_book_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_book_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_skill_book_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_skill_book_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_skill_book_id;
        if (input->ExpectTag(72)) goto parse_skill_book_index;
        break;
      }
      
      // repeated int32 skill_book_index = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_book_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_skill_book_index())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_skill_book_index())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_skill_book_index;
        if (input->ExpectTag(80)) goto parse_lucky;
        break;
      }
      
      // optional int32 lucky = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lucky:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lucky_)));
          set_has_lucky();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_is_open_skill;
        break;
      }
      
      // optional int32 is_open_skill = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_open_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_open_skill_)));
          set_has_is_open_skill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto31400110::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pack_size = 1;
  if (has_pack_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pack_size(), output);
  }
  
  // repeated .ProtoBeastSkill beast_skill_set = 2;
  for (int i = 0; i < this->beast_skill_set_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->beast_skill_set(i), output);
  }
  
  // optional int64 cur_beast = 3;
  if (has_cur_beast()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->cur_beast(), output);
  }
  
  // optional int64 last_beast = 4;
  if (has_last_beast()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->last_beast(), output);
  }
  
  // optional int32 cur_sort = 5;
  if (has_cur_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cur_sort(), output);
  }
  
  // optional int32 last_sort = 6;
  if (has_last_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->last_sort(), output);
  }
  
  // optional int64 save_beast = 7;
  if (has_save_beast()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->save_beast(), output);
  }
  
  // repeated int32 skill_book_id = 8;
  for (int i = 0; i < this->skill_book_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->skill_book_id(i), output);
  }
  
  // repeated int32 skill_book_index = 9;
  for (int i = 0; i < this->skill_book_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->skill_book_index(i), output);
  }
  
  // optional int32 lucky = 10;
  if (has_lucky()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->lucky(), output);
  }
  
  // optional int32 is_open_skill = 11;
  if (has_is_open_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->is_open_skill(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto31400110::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pack_size = 1;
  if (has_pack_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pack_size(), target);
  }
  
  // repeated .ProtoBeastSkill beast_skill_set = 2;
  for (int i = 0; i < this->beast_skill_set_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->beast_skill_set(i), target);
  }
  
  // optional int64 cur_beast = 3;
  if (has_cur_beast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->cur_beast(), target);
  }
  
  // optional int64 last_beast = 4;
  if (has_last_beast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->last_beast(), target);
  }
  
  // optional int32 cur_sort = 5;
  if (has_cur_sort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cur_sort(), target);
  }
  
  // optional int32 last_sort = 6;
  if (has_last_sort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->last_sort(), target);
  }
  
  // optional int64 save_beast = 7;
  if (has_save_beast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->save_beast(), target);
  }
  
  // repeated int32 skill_book_id = 8;
  for (int i = 0; i < this->skill_book_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->skill_book_id(i), target);
  }
  
  // repeated int32 skill_book_index = 9;
  for (int i = 0; i < this->skill_book_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->skill_book_index(i), target);
  }
  
  // optional int32 lucky = 10;
  if (has_lucky()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->lucky(), target);
  }
  
  // optional int32 is_open_skill = 11;
  if (has_is_open_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->is_open_skill(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto31400110::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pack_size = 1;
    if (has_pack_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pack_size());
    }
    
    // optional int64 cur_beast = 3;
    if (has_cur_beast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cur_beast());
    }
    
    // optional int64 last_beast = 4;
    if (has_last_beast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_beast());
    }
    
    // optional int32 cur_sort = 5;
    if (has_cur_sort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_sort());
    }
    
    // optional int32 last_sort = 6;
    if (has_last_sort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_sort());
    }
    
    // optional int64 save_beast = 7;
    if (has_save_beast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->save_beast());
    }
    
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int32 lucky = 10;
    if (has_lucky()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lucky());
    }
    
    // optional int32 is_open_skill = 11;
    if (has_is_open_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_open_skill());
    }
    
  }
  // repeated .ProtoBeastSkill beast_skill_set = 2;
  total_size += 1 * this->beast_skill_set_size();
  for (int i = 0; i < this->beast_skill_set_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->beast_skill_set(i));
  }
  
  // repeated int32 skill_book_id = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->skill_book_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->skill_book_id(i));
    }
    total_size += 1 * this->skill_book_id_size() + data_size;
  }
  
  // repeated int32 skill_book_index = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->skill_book_index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->skill_book_index(i));
    }
    total_size += 1 * this->skill_book_index_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto31400110::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto31400110* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto31400110*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto31400110::MergeFrom(const Proto31400110& from) {
  GOOGLE_CHECK_NE(&from, this);
  beast_skill_set_.MergeFrom(from.beast_skill_set_);
  skill_book_id_.MergeFrom(from.skill_book_id_);
  skill_book_index_.MergeFrom(from.skill_book_index_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pack_size()) {
      set_pack_size(from.pack_size());
    }
    if (from.has_cur_beast()) {
      set_cur_beast(from.cur_beast());
    }
    if (from.has_last_beast()) {
      set_last_beast(from.last_beast());
    }
    if (from.has_cur_sort()) {
      set_cur_sort(from.cur_sort());
    }
    if (from.has_last_sort()) {
      set_last_sort(from.last_sort());
    }
    if (from.has_save_beast()) {
      set_save_beast(from.save_beast());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_lucky()) {
      set_lucky(from.lucky());
    }
    if (from.has_is_open_skill()) {
      set_is_open_skill(from.is_open_skill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto31400110::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto31400110::CopyFrom(const Proto31400110& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto31400110::IsInitialized() const {
  
  return true;
}

void Proto31400110::Swap(Proto31400110* other) {
  if (other != this) {
    std::swap(pack_size_, other->pack_size_);
    beast_skill_set_.Swap(&other->beast_skill_set_);
    std::swap(cur_beast_, other->cur_beast_);
    std::swap(last_beast_, other->last_beast_);
    std::swap(cur_sort_, other->cur_sort_);
    std::swap(last_sort_, other->last_sort_);
    std::swap(save_beast_, other->save_beast_);
    skill_book_id_.Swap(&other->skill_book_id_);
    skill_book_index_.Swap(&other->skill_book_index_);
    std::swap(lucky_, other->lucky_);
    std::swap(is_open_skill_, other->is_open_skill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto31400110::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto31400110_descriptor_;
  metadata.reflection = Proto31400110_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto31400111::kIsOpenFieldNumber;
const int Proto31400111::kPracticeLvlFieldNumber;
const int Proto31400111::kDragonLvlFieldNumber;
const int Proto31400111::kAddRateFieldNumber;
const int Proto31400111::kFinishTickFieldNumber;
const int Proto31400111::kCoolAllFieldNumber;
const int Proto31400111::kAnimaValueFieldNumber;
const int Proto31400111::kLightLvlFieldNumber;
const int Proto31400111::kLightDegreeFieldNumber;
const int Proto31400111::kOpenFlagFieldNumber;
const int Proto31400111::kNTimesFieldNumber;
const int Proto31400111::kSTimesFieldNumber;
const int Proto31400111::kSacrificeNotifyFieldNumber;
#endif  // !_MSC_VER

Proto31400111::Proto31400111()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto31400111::InitAsDefaultInstance() {
}

Proto31400111::Proto31400111(const Proto31400111& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto31400111::SharedCtor() {
  _cached_size_ = 0;
  is_open_ = 0;
  practice_lvl_ = 0;
  dragon_lvl_ = 0;
  add_rate_ = 0;
  finish_tick_ = GOOGLE_LONGLONG(0);
  cool_all_ = 0;
  anima_value_ = 0;
  light_lvl_ = 0;
  light_degree_ = 0;
  open_flag_ = 0;
  sacrifice_notify_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto31400111::~Proto31400111() {
  SharedDtor();
}

void Proto31400111::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto31400111::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto31400111::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto31400111_descriptor_;
}

const Proto31400111& Proto31400111::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInner001_2eproto();  return *default_instance_;
}

Proto31400111* Proto31400111::default_instance_ = NULL;

Proto31400111* Proto31400111::New() const {
  return new Proto31400111;
}

void Proto31400111::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_open_ = 0;
    practice_lvl_ = 0;
    dragon_lvl_ = 0;
    add_rate_ = 0;
    finish_tick_ = GOOGLE_LONGLONG(0);
    cool_all_ = 0;
    anima_value_ = 0;
    light_lvl_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    light_degree_ = 0;
    open_flag_ = 0;
    sacrifice_notify_ = 0;
  }
  n_times_.Clear();
  s_times_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto31400111::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 is_open = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_open_)));
          set_has_is_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_practice_lvl;
        break;
      }
      
      // optional int32 practice_lvl = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_practice_lvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &practice_lvl_)));
          set_has_practice_lvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dragon_lvl;
        break;
      }
      
      // optional int32 dragon_lvl = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dragon_lvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dragon_lvl_)));
          set_has_dragon_lvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_add_rate;
        break;
      }
      
      // optional int32 add_rate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_rate_)));
          set_has_add_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_finish_tick;
        break;
      }
      
      // optional int64 finish_tick = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finish_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &finish_tick_)));
          set_has_finish_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cool_all;
        break;
      }
      
      // optional int32 cool_all = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cool_all:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cool_all_)));
          set_has_cool_all();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_anima_value;
        break;
      }
      
      // optional int32 anima_value = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_anima_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &anima_value_)));
          set_has_anima_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_light_lvl;
        break;
      }
      
      // optional int32 light_lvl = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_light_lvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &light_lvl_)));
          set_has_light_lvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_light_degree;
        break;
      }
      
      // optional int32 light_degree = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_light_degree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &light_degree_)));
          set_has_light_degree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_open_flag;
        break;
      }
      
      // optional int32 open_flag = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_flag_)));
          set_has_open_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_n_times;
        break;
      }
      
      // repeated int32 n_times = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_n_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_n_times())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_n_times())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_n_times;
        if (input->ExpectTag(96)) goto parse_s_times;
        break;
      }
      
      // repeated int32 s_times = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_s_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_s_times())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_s_times())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_s_times;
        if (input->ExpectTag(104)) goto parse_sacrifice_notify;
        break;
      }
      
      // optional int32 sacrifice_notify = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sacrifice_notify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sacrifice_notify_)));
          set_has_sacrifice_notify();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto31400111::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 is_open = 1;
  if (has_is_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->is_open(), output);
  }
  
  // optional int32 practice_lvl = 2;
  if (has_practice_lvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->practice_lvl(), output);
  }
  
  // optional int32 dragon_lvl = 3;
  if (has_dragon_lvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dragon_lvl(), output);
  }
  
  // optional int32 add_rate = 4;
  if (has_add_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->add_rate(), output);
  }
  
  // optional int64 finish_tick = 5;
  if (has_finish_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->finish_tick(), output);
  }
  
  // optional int32 cool_all = 6;
  if (has_cool_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cool_all(), output);
  }
  
  // optional int32 anima_value = 7;
  if (has_anima_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->anima_value(), output);
  }
  
  // optional int32 light_lvl = 8;
  if (has_light_lvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->light_lvl(), output);
  }
  
  // optional int32 light_degree = 9;
  if (has_light_degree()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->light_degree(), output);
  }
  
  // optional int32 open_flag = 10;
  if (has_open_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->open_flag(), output);
  }
  
  // repeated int32 n_times = 11;
  for (int i = 0; i < this->n_times_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->n_times(i), output);
  }
  
  // repeated int32 s_times = 12;
  for (int i = 0; i < this->s_times_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->s_times(i), output);
  }
  
  // optional int32 sacrifice_notify = 13;
  if (has_sacrifice_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->sacrifice_notify(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto31400111::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 is_open = 1;
  if (has_is_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->is_open(), target);
  }
  
  // optional int32 practice_lvl = 2;
  if (has_practice_lvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->practice_lvl(), target);
  }
  
  // optional int32 dragon_lvl = 3;
  if (has_dragon_lvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dragon_lvl(), target);
  }
  
  // optional int32 add_rate = 4;
  if (has_add_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->add_rate(), target);
  }
  
  // optional int64 finish_tick = 5;
  if (has_finish_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->finish_tick(), target);
  }
  
  // optional int32 cool_all = 6;
  if (has_cool_all()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cool_all(), target);
  }
  
  // optional int32 anima_value = 7;
  if (has_anima_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->anima_value(), target);
  }
  
  // optional int32 light_lvl = 8;
  if (has_light_lvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->light_lvl(), target);
  }
  
  // optional int32 light_degree = 9;
  if (has_light_degree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->light_degree(), target);
  }
  
  // optional int32 open_flag = 10;
  if (has_open_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->open_flag(), target);
  }
  
  // repeated int32 n_times = 11;
  for (int i = 0; i < this->n_times_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->n_times(i), target);
  }
  
  // repeated int32 s_times = 12;
  for (int i = 0; i < this->s_times_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->s_times(i), target);
  }
  
  // optional int32 sacrifice_notify = 13;
  if (has_sacrifice_notify()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->sacrifice_notify(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto31400111::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 is_open = 1;
    if (has_is_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_open());
    }
    
    // optional int32 practice_lvl = 2;
    if (has_practice_lvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->practice_lvl());
    }
    
    // optional int32 dragon_lvl = 3;
    if (has_dragon_lvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dragon_lvl());
    }
    
    // optional int32 add_rate = 4;
    if (has_add_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->add_rate());
    }
    
    // optional int64 finish_tick = 5;
    if (has_finish_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->finish_tick());
    }
    
    // optional int32 cool_all = 6;
    if (has_cool_all()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cool_all());
    }
    
    // optional int32 anima_value = 7;
    if (has_anima_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->anima_value());
    }
    
    // optional int32 light_lvl = 8;
    if (has_light_lvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->light_lvl());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 light_degree = 9;
    if (has_light_degree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->light_degree());
    }
    
    // optional int32 open_flag = 10;
    if (has_open_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open_flag());
    }
    
    // optional int32 sacrifice_notify = 13;
    if (has_sacrifice_notify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sacrifice_notify());
    }
    
  }
  // repeated int32 n_times = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->n_times_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->n_times(i));
    }
    total_size += 1 * this->n_times_size() + data_size;
  }
  
  // repeated int32 s_times = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->s_times_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->s_times(i));
    }
    total_size += 1 * this->s_times_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto31400111::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto31400111* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto31400111*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto31400111::MergeFrom(const Proto31400111& from) {
  GOOGLE_CHECK_NE(&from, this);
  n_times_.MergeFrom(from.n_times_);
  s_times_.MergeFrom(from.s_times_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_open()) {
      set_is_open(from.is_open());
    }
    if (from.has_practice_lvl()) {
      set_practice_lvl(from.practice_lvl());
    }
    if (from.has_dragon_lvl()) {
      set_dragon_lvl(from.dragon_lvl());
    }
    if (from.has_add_rate()) {
      set_add_rate(from.add_rate());
    }
    if (from.has_finish_tick()) {
      set_finish_tick(from.finish_tick());
    }
    if (from.has_cool_all()) {
      set_cool_all(from.cool_all());
    }
    if (from.has_anima_value()) {
      set_anima_value(from.anima_value());
    }
    if (from.has_light_lvl()) {
      set_light_lvl(from.light_lvl());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_light_degree()) {
      set_light_degree(from.light_degree());
    }
    if (from.has_open_flag()) {
      set_open_flag(from.open_flag());
    }
    if (from.has_sacrifice_notify()) {
      set_sacrifice_notify(from.sacrifice_notify());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto31400111::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto31400111::CopyFrom(const Proto31400111& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto31400111::IsInitialized() const {
  
  return true;
}

void Proto31400111::Swap(Proto31400111* other) {
  if (other != this) {
    std::swap(is_open_, other->is_open_);
    std::swap(practice_lvl_, other->practice_lvl_);
    std::swap(dragon_lvl_, other->dragon_lvl_);
    std::swap(add_rate_, other->add_rate_);
    std::swap(finish_tick_, other->finish_tick_);
    std::swap(cool_all_, other->cool_all_);
    std::swap(anima_value_, other->anima_value_);
    std::swap(light_lvl_, other->light_lvl_);
    std::swap(light_degree_, other->light_degree_);
    std::swap(open_flag_, other->open_flag_);
    n_times_.Swap(&other->n_times_);
    s_times_.Swap(&other->s_times_);
    std::swap(sacrifice_notify_, other->sacrifice_notify_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto31400111::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto31400111_descriptor_;
  metadata.reflection = Proto31400111_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto30400017::kFighterIdFieldNumber;
const int Proto30400017::kSkillFieldNumber;
const int Proto30400017::kRemoveSkillFieldNumber;
#endif  // !_MSC_VER

Proto30400017::Proto30400017()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto30400017::InitAsDefaultInstance() {
  skill_ = const_cast< ::ProtoSkill*>(&::ProtoSkill::default_instance());
  remove_skill_ = const_cast< ::ProtoSkill*>(&::ProtoSkill::default_instance());
}

Proto30400017::Proto30400017(const Proto30400017& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto30400017::SharedCtor() {
  _cached_size_ = 0;
  fighter_id_ = GOOGLE_LONGLONG(0);
  skill_ = NULL;
  remove_skill_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto30400017::~Proto30400017() {
  SharedDtor();
}

void Proto30400017::SharedDtor() {
  if (this != default_instance_) {
    delete skill_;
    delete remove_skill_;
  }
}

void Proto30400017::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto30400017::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto30400017_descriptor_;
}

const Proto30400017& Proto30400017::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInner001_2eproto();  return *default_instance_;
}

Proto30400017* Proto30400017::default_instance_ = NULL;

Proto30400017* Proto30400017::New() const {
  return new Proto30400017;
}

void Proto30400017::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fighter_id_ = GOOGLE_LONGLONG(0);
    if (has_skill()) {
      if (skill_ != NULL) skill_->::ProtoSkill::Clear();
    }
    if (has_remove_skill()) {
      if (remove_skill_ != NULL) remove_skill_->::ProtoSkill::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto30400017::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 fighter_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fighter_id_)));
          set_has_fighter_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_skill;
        break;
      }
      
      // optional .ProtoSkill skill = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_remove_skill;
        break;
      }
      
      // optional .ProtoSkill remove_skill = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remove_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remove_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto30400017::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 fighter_id = 1;
  if (has_fighter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->fighter_id(), output);
  }
  
  // optional .ProtoSkill skill = 2;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->skill(), output);
  }
  
  // optional .ProtoSkill remove_skill = 3;
  if (has_remove_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->remove_skill(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto30400017::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 fighter_id = 1;
  if (has_fighter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->fighter_id(), target);
  }
  
  // optional .ProtoSkill skill = 2;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->skill(), target);
  }
  
  // optional .ProtoSkill remove_skill = 3;
  if (has_remove_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->remove_skill(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto30400017::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 fighter_id = 1;
    if (has_fighter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fighter_id());
    }
    
    // optional .ProtoSkill skill = 2;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill());
    }
    
    // optional .ProtoSkill remove_skill = 3;
    if (has_remove_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->remove_skill());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto30400017::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto30400017* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto30400017*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto30400017::MergeFrom(const Proto30400017& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fighter_id()) {
      set_fighter_id(from.fighter_id());
    }
    if (from.has_skill()) {
      mutable_skill()->::ProtoSkill::MergeFrom(from.skill());
    }
    if (from.has_remove_skill()) {
      mutable_remove_skill()->::ProtoSkill::MergeFrom(from.remove_skill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto30400017::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto30400017::CopyFrom(const Proto30400017& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto30400017::IsInitialized() const {
  
  return true;
}

void Proto30400017::Swap(Proto30400017* other) {
  if (other != this) {
    std::swap(fighter_id_, other->fighter_id_);
    std::swap(skill_, other->skill_);
    std::swap(remove_skill_, other->remove_skill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto30400017::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto30400017_descriptor_;
  metadata.reflection = Proto30400017_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto31400301::kDonateTypeFieldNumber;
const int Proto31400301::kDonateNumberFieldNumber;
const int Proto31400301::kSendFlagFieldNumber;
#endif  // !_MSC_VER

Proto31400301::Proto31400301()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto31400301::InitAsDefaultInstance() {
}

Proto31400301::Proto31400301(const Proto31400301& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto31400301::SharedCtor() {
  _cached_size_ = 0;
  donate_type_ = 0;
  donate_number_ = 0;
  send_flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto31400301::~Proto31400301() {
  SharedDtor();
}

void Proto31400301::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto31400301::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto31400301::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto31400301_descriptor_;
}

const Proto31400301& Proto31400301::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInner001_2eproto();  return *default_instance_;
}

Proto31400301* Proto31400301::default_instance_ = NULL;

Proto31400301* Proto31400301::New() const {
  return new Proto31400301;
}

void Proto31400301::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    donate_type_ = 0;
    donate_number_ = 0;
    send_flag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto31400301::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 donate_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &donate_type_)));
          set_has_donate_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_donate_number;
        break;
      }
      
      // optional int32 donate_number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_donate_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &donate_number_)));
          set_has_donate_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_send_flag;
        break;
      }
      
      // optional int32 send_flag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &send_flag_)));
          set_has_send_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto31400301::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 donate_type = 1;
  if (has_donate_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->donate_type(), output);
  }
  
  // optional int32 donate_number = 2;
  if (has_donate_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->donate_number(), output);
  }
  
  // optional int32 send_flag = 3;
  if (has_send_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->send_flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto31400301::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 donate_type = 1;
  if (has_donate_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->donate_type(), target);
  }
  
  // optional int32 donate_number = 2;
  if (has_donate_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->donate_number(), target);
  }
  
  // optional int32 send_flag = 3;
  if (has_send_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->send_flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto31400301::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 donate_type = 1;
    if (has_donate_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->donate_type());
    }
    
    // optional int32 donate_number = 2;
    if (has_donate_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->donate_number());
    }
    
    // optional int32 send_flag = 3;
    if (has_send_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->send_flag());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto31400301::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto31400301* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto31400301*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto31400301::MergeFrom(const Proto31400301& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_donate_type()) {
      set_donate_type(from.donate_type());
    }
    if (from.has_donate_number()) {
      set_donate_number(from.donate_number());
    }
    if (from.has_send_flag()) {
      set_send_flag(from.send_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto31400301::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto31400301::CopyFrom(const Proto31400301& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto31400301::IsInitialized() const {
  
  return true;
}

void Proto31400301::Swap(Proto31400301* other) {
  if (other != this) {
    std::swap(donate_type_, other->donate_type_);
    std::swap(donate_number_, other->donate_number_);
    std::swap(send_flag_, other->send_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto31400301::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto31400301_descriptor_;
  metadata.reflection = Proto31400301_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
