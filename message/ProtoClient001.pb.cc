// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoClient001.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Proto10700101_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto10700101_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto50700101_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto50700101_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto10600101_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto10600101_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto50600101_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto50600101_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto10600102_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto10600102_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto80400101_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto80400101_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto10400001_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto10400001_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto80400102_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto80400102_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto80400104_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto80400104_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto10400109_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto10400109_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto80400105_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto80400105_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto50600102_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto50600102_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto10400110_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto10400110_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto11499999_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto11499999_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto10200001_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto10200001_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto10200002_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto10200002_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto10200003_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto10200003_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto10200004_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto10200004_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto11400002_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto11400002_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto11400001_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto11400001_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto50200004_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto50200004_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto80200001_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto80200001_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto80200002_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto80200002_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto80200003_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto80200003_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto10200005_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto10200005_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto50200005_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto50200005_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto10200006_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto10200006_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto50200006_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto50200006_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto11400101_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto11400101_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto11400102_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto11400102_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto11400103_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto11400103_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto11400104_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto11400104_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto11400105_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto11400105_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto11400106_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto11400106_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto11400107_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto11400107_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto11400110_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto11400110_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto51400101_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto51400101_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto51400102_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto51400102_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto51400103_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto51400103_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto51400106_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto51400106_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto81400102_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto81400102_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto81400101_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto81400101_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto81400103_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto81400103_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto11400326_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto11400326_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto11400327_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto11400327_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto11400328_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto11400328_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto11400329_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto11400329_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto11400330_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto11400330_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto51400325_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto51400325_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto51400329_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto51400329_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoClient001_2eproto() {
  protobuf_AddDesc_ProtoClient001_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoClient001.proto");
  GOOGLE_CHECK(file != NULL);
  Proto10700101_descriptor_ = file->message_type(0);
  static const int Proto10700101_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10700101, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10700101, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10700101, tick_),
  };
  Proto10700101_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto10700101_descriptor_,
      Proto10700101::default_instance_,
      Proto10700101_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10700101, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10700101, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto10700101));
  Proto50700101_descriptor_ = file->message_type(1);
  static const int Proto50700101_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50700101, gate_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50700101, gate_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50700101, domain_),
  };
  Proto50700101_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto50700101_descriptor_,
      Proto50700101::default_instance_,
      Proto50700101_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50700101, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50700101, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto50700101));
  Proto10600101_descriptor_ = file->message_type(2);
  static const int Proto10600101_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10600101, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10600101, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10600101, tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10600101, agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10600101, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10600101, net_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10600101, sys_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10600101, sys_model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10600101, mac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10600101, c_sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10600101, server_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10600101, market_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10600101, imei_),
  };
  Proto10600101_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto10600101_descriptor_,
      Proto10600101::default_instance_,
      Proto10600101_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10600101, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10600101, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto10600101));
  Proto50600101_descriptor_ = file->message_type(3);
  static const int Proto50600101_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50600101, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50600101, scene_addrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50600101, ban_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50600101, expired_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50600101, left_ban_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50600101, role_list_),
  };
  Proto50600101_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto50600101_descriptor_,
      Proto50600101::default_instance_,
      Proto50600101_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50600101, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50600101, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto50600101));
  Proto10600102_descriptor_ = file->message_type(4);
  static const int Proto10600102_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10600102, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10600102, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10600102, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10600102, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10600102, agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10600102, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10600102, market_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10600102, career_),
  };
  Proto10600102_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto10600102_descriptor_,
      Proto10600102::default_instance_,
      Proto10600102_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10600102, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10600102, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto10600102));
  Proto80400101_descriptor_ = file->message_type(5);
  static const int Proto80400101_offsets_[41] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400101, chat_scene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400101, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400101, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400101, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400101, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400101, league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400101, league_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400101, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400101, pixel_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400101, pixel_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400101, toward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400101, blood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400101, max_blood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400101, magic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400101, max_magic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400101, pk_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400101, experience_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400101, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400101, vip_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400101, force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400101, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400101, camp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400101, permission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400101, space_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400101, server_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400101, name_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400101, league_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400101, mw_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400101, mw_rank_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400101, server_prev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400101, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400101, angry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400101, full_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400101, jump_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400101, shape_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400101, main_act_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400101, partner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400101, partner_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400101, wedding_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400101, wedding_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400101, open_days_),
  };
  Proto80400101_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto80400101_descriptor_,
      Proto80400101::default_instance_,
      Proto80400101_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400101, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400101, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto80400101));
  Proto10400001_descriptor_ = file->message_type(6);
  static const int Proto10400001_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10400001, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10400001, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10400001, session_),
  };
  Proto10400001_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto10400001_descriptor_,
      Proto10400001::default_instance_,
      Proto10400001_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10400001, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10400001, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto10400001));
  Proto80400102_descriptor_ = file->message_type(7);
  static const int Proto80400102_offsets_[39] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400102, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400102, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400102, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400102, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400102, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400102, pixel_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400102, pixel_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400102, toward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400102, blood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400102, max_blood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400102, magic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400102, max_magic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400102, pk_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400102, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400102, fight_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400102, mount_sort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400102, vip_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400102, force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400102, camp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400102, league_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400102, is_copy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400102, beast_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400102, league_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400102, space_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400102, name_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400102, gather_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400102, mount_lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400102, mw_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400102, mw_rank_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400102, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400102, server_prev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400102, league_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400102, full_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400102, shape_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400102, hotspring_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400102, partner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400102, partner_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400102, wedding_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400102, wedding_type_),
  };
  Proto80400102_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto80400102_descriptor_,
      Proto80400102::default_instance_,
      Proto80400102_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400102, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400102, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto80400102));
  Proto80400104_descriptor_ = file->message_type(8);
  static const int Proto80400104_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400104, mover_id_),
  };
  Proto80400104_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto80400104_descriptor_,
      Proto80400104::default_instance_,
      Proto80400104_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400104, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400104, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto80400104));
  Proto10400109_descriptor_ = file->message_type(9);
  static const int Proto10400109_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10400109, step_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10400109, toward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10400109, arrive_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10400109, scene_id_),
  };
  Proto10400109_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto10400109_descriptor_,
      Proto10400109::default_instance_,
      Proto10400109_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10400109, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10400109, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto10400109));
  Proto80400105_descriptor_ = file->message_type(10);
  static const int Proto80400105_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400105, mover_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400105, step_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400105, toward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400105, arrive_tick_),
  };
  Proto80400105_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto80400105_descriptor_,
      Proto80400105::default_instance_,
      Proto80400105_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400105, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80400105, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto80400105));
  Proto50600102_descriptor_ = file->message_type(11);
  static const int Proto50600102_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50600102, test_),
  };
  Proto50600102_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto50600102_descriptor_,
      Proto50600102::default_instance_,
      Proto50600102_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50600102, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50600102, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto50600102));
  Proto10400110_descriptor_ = file->message_type(12);
  static const int Proto10400110_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10400110, scene_id_),
  };
  Proto10400110_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto10400110_descriptor_,
      Proto10400110::default_instance_,
      Proto10400110_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10400110, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10400110, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto10400110));
  Proto11499999_descriptor_ = file->message_type(13);
  static const int Proto11499999_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11499999, cmd_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11499999, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11499999, param2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11499999, param3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11499999, param4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11499999, param5_),
  };
  Proto11499999_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto11499999_descriptor_,
      Proto11499999::default_instance_,
      Proto11499999_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11499999, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11499999, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto11499999));
  Proto10200001_descriptor_ = file->message_type(14);
  static const int Proto10200001_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10200001, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10200001, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10200001, session_),
  };
  Proto10200001_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto10200001_descriptor_,
      Proto10200001::default_instance_,
      Proto10200001_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10200001, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10200001, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto10200001));
  Proto10200002_descriptor_ = file->message_type(15);
  static const int Proto10200002_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10200002, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10200002, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10200002, voice_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10200002, wcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10200002, vcontent_),
  };
  Proto10200002_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto10200002_descriptor_,
      Proto10200002::default_instance_,
      Proto10200002_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10200002, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10200002, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto10200002));
  Proto10200003_descriptor_ = file->message_type(16);
  static const int Proto10200003_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10200003, dst_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10200003, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10200003, voice_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10200003, wcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10200003, vcontent_),
  };
  Proto10200003_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto10200003_descriptor_,
      Proto10200003::default_instance_,
      Proto10200003_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10200003, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10200003, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto10200003));
  Proto10200004_descriptor_ = file->message_type(17);
  static const int Proto10200004_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10200004, time_offset_),
  };
  Proto10200004_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto10200004_descriptor_,
      Proto10200004::default_instance_,
      Proto10200004_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10200004, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10200004, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto10200004));
  Proto11400002_descriptor_ = file->message_type(18);
  static const int Proto11400002_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400002, pack_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400002, goods_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400002, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400002, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400002, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400002, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400002, pet_id_),
  };
  Proto11400002_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto11400002_descriptor_,
      Proto11400002::default_instance_,
      Proto11400002_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400002, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400002, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto11400002));
  Proto11400001_descriptor_ = file->message_type(19);
  static const int Proto11400001_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400001, content_),
  };
  Proto11400001_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto11400001_descriptor_,
      Proto11400001::default_instance_,
      Proto11400001_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400001, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400001, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto11400001));
  Proto50200004_descriptor_ = file->message_type(20);
  static const int Proto50200004_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50200004, content_),
  };
  Proto50200004_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto50200004_descriptor_,
      Proto50200004::default_instance_,
      Proto50200004_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50200004, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50200004, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto50200004));
  Proto80200001_descriptor_ = file->message_type(21);
  static const int Proto80200001_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80200001, content_),
  };
  Proto80200001_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto80200001_descriptor_,
      Proto80200001::default_instance_,
      Proto80200001_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80200001, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80200001, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto80200001));
  Proto80200002_descriptor_ = file->message_type(22);
  static const int Proto80200002_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80200002, content_),
  };
  Proto80200002_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto80200002_descriptor_,
      Proto80200002::default_instance_,
      Proto80200002_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80200002, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80200002, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto80200002));
  Proto80200003_descriptor_ = file->message_type(23);
  static const int Proto80200003_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80200003, content_),
  };
  Proto80200003_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto80200003_descriptor_,
      Proto80200003::default_instance_,
      Proto80200003_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80200003, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80200003, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto80200003));
  Proto10200005_descriptor_ = file->message_type(24);
  static const int Proto10200005_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10200005, peer_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10200005, time_offset_),
  };
  Proto10200005_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto10200005_descriptor_,
      Proto10200005::default_instance_,
      Proto10200005_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10200005, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10200005, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto10200005));
  Proto50200005_descriptor_ = file->message_type(25);
  static const int Proto50200005_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50200005, content_),
  };
  Proto50200005_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto50200005_descriptor_,
      Proto50200005::default_instance_,
      Proto50200005_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50200005, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50200005, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto50200005));
  Proto10200006_descriptor_ = file->message_type(26);
  static const int Proto10200006_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10200006, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10200006, voice_id_),
  };
  Proto10200006_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto10200006_descriptor_,
      Proto10200006::default_instance_,
      Proto10200006_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10200006, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10200006, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto10200006));
  Proto50200006_descriptor_ = file->message_type(27);
  static const int Proto50200006_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50200006, voice_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50200006, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50200006, voice_length_),
  };
  Proto50200006_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto50200006_descriptor_,
      Proto50200006::default_instance_,
      Proto50200006_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50200006, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50200006, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto50200006));
  Proto11400101_descriptor_ = file->message_type(28);
  static const int Proto11400101_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400101, pack_type_),
  };
  Proto11400101_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto11400101_descriptor_,
      Proto11400101::default_instance_,
      Proto11400101_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400101, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400101, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto11400101));
  Proto11400102_descriptor_ = file->message_type(29);
  static const int Proto11400102_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400102, pack_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400102, index_),
  };
  Proto11400102_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto11400102_descriptor_,
      Proto11400102::default_instance_,
      Proto11400102_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400102, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400102, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto11400102));
  Proto11400103_descriptor_ = file->message_type(30);
  static const int Proto11400103_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400103, pack_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400103, index_),
  };
  Proto11400103_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto11400103_descriptor_,
      Proto11400103::default_instance_,
      Proto11400103_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400103, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400103, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto11400103));
  Proto11400104_descriptor_ = file->message_type(31);
  static const int Proto11400104_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400104, pack_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400104, remove_),
  };
  Proto11400104_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto11400104_descriptor_,
      Proto11400104::default_instance_,
      Proto11400104_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400104, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400104, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto11400104));
  Proto11400105_descriptor_ = file->message_type(32);
  static const int Proto11400105_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400105, pack_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400105, index_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400105, index_to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400105, ignore_bind_),
  };
  Proto11400105_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto11400105_descriptor_,
      Proto11400105::default_instance_,
      Proto11400105_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400105, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400105, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto11400105));
  Proto11400106_descriptor_ = file->message_type(33);
  static const int Proto11400106_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400106, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400106, amount_),
  };
  Proto11400106_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto11400106_descriptor_,
      Proto11400106::default_instance_,
      Proto11400106_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400106, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400106, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto11400106));
  Proto11400107_descriptor_ = file->message_type(34);
  static const int Proto11400107_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400107, pack_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400107, index_),
  };
  Proto11400107_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto11400107_descriptor_,
      Proto11400107::default_instance_,
      Proto11400107_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400107, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400107, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto11400107));
  Proto11400110_descriptor_ = file->message_type(35);
  static const int Proto11400110_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400110, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400110, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400110, pack_type_),
  };
  Proto11400110_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto11400110_descriptor_,
      Proto11400110::default_instance_,
      Proto11400110_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400110, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400110, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto11400110));
  Proto51400101_descriptor_ = file->message_type(36);
  static const int Proto51400101_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto51400101, pack_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto51400101, pack_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto51400101, item_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto51400101, suit_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto51400101, refine_suit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto51400101, strengthen_),
  };
  Proto51400101_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto51400101_descriptor_,
      Proto51400101::default_instance_,
      Proto51400101_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto51400101, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto51400101, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto51400101));
  Proto51400102_descriptor_ = file->message_type(37);
  static const int Proto51400102_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto51400102, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto51400102, gold_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto51400102, left_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto51400102, total_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto51400102, add_exp_),
  };
  Proto51400102_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto51400102_descriptor_,
      Proto51400102::default_instance_,
      Proto51400102_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto51400102, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto51400102, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto51400102));
  Proto51400103_descriptor_ = file->message_type(38);
  static const int Proto51400103_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto51400103, gold_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto51400103, pack_size_),
  };
  Proto51400103_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto51400103_descriptor_,
      Proto51400103::default_instance_,
      Proto51400103_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto51400103, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto51400103, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto51400103));
  Proto51400106_descriptor_ = file->message_type(39);
  static const int Proto51400106_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto51400106, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto51400106, tips_flag_),
  };
  Proto51400106_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto51400106_descriptor_,
      Proto51400106::default_instance_,
      Proto51400106_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto51400106, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto51400106, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto51400106));
  Proto81400102_descriptor_ = file->message_type(40);
  static const int Proto81400102_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto81400102, pack_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto81400102, del_item_list_),
  };
  Proto81400102_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto81400102_descriptor_,
      Proto81400102::default_instance_,
      Proto81400102_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto81400102, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto81400102, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto81400102));
  Proto81400101_descriptor_ = file->message_type(41);
  static const int Proto81400101_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto81400101, pack_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto81400101, pack_item_list_),
  };
  Proto81400101_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto81400101_descriptor_,
      Proto81400101::default_instance_,
      Proto81400101_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto81400101, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto81400101, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto81400101));
  Proto81400103_descriptor_ = file->message_type(42);
  static const int Proto81400103_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto81400103, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto81400103, bind_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto81400103, copper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto81400103, bind_copper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto81400103, activity_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto81400103, exploit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto81400103, reputation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto81400103, st_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto81400103, reiki_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto81400103, honour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto81400103, league_contri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto81400103, spirit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto81400103, practice_),
  };
  Proto81400103_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto81400103_descriptor_,
      Proto81400103::default_instance_,
      Proto81400103_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto81400103, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto81400103, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto81400103));
  Proto11400326_descriptor_ = file->message_type(43);
  static const int Proto11400326_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400326, task_id_),
  };
  Proto11400326_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto11400326_descriptor_,
      Proto11400326::default_instance_,
      Proto11400326_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400326, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400326, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto11400326));
  Proto11400327_descriptor_ = file->message_type(44);
  static const int Proto11400327_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400327, task_id_),
  };
  Proto11400327_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto11400327_descriptor_,
      Proto11400327::default_instance_,
      Proto11400327_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400327, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400327, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto11400327));
  Proto11400328_descriptor_ = file->message_type(45);
  static const int Proto11400328_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400328, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400328, is_double_),
  };
  Proto11400328_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto11400328_descriptor_,
      Proto11400328::default_instance_,
      Proto11400328_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400328, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400328, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto11400328));
  Proto11400329_descriptor_ = file->message_type(46);
  static const int Proto11400329_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400329, npc_id_),
  };
  Proto11400329_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto11400329_descriptor_,
      Proto11400329::default_instance_,
      Proto11400329_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400329, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400329, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto11400329));
  Proto11400330_descriptor_ = file->message_type(47);
  static const int Proto11400330_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400330, task_id_),
  };
  Proto11400330_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto11400330_descriptor_,
      Proto11400330::default_instance_,
      Proto11400330_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400330, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto11400330, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto11400330));
  Proto51400325_descriptor_ = file->message_type(48);
  static const int Proto51400325_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto51400325, task_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto51400325, task_finish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto51400325, is_finish_guide_),
  };
  Proto51400325_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto51400325_descriptor_,
      Proto51400325::default_instance_,
      Proto51400325_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto51400325, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto51400325, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto51400325));
  Proto51400329_descriptor_ = file->message_type(49);
  static const int Proto51400329_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto51400329, task_list_),
  };
  Proto51400329_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto51400329_descriptor_,
      Proto51400329::default_instance_,
      Proto51400329_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto51400329, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto51400329, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto51400329));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoClient001_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto10700101_descriptor_, &Proto10700101::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto50700101_descriptor_, &Proto50700101::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto10600101_descriptor_, &Proto10600101::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto50600101_descriptor_, &Proto50600101::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto10600102_descriptor_, &Proto10600102::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto80400101_descriptor_, &Proto80400101::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto10400001_descriptor_, &Proto10400001::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto80400102_descriptor_, &Proto80400102::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto80400104_descriptor_, &Proto80400104::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto10400109_descriptor_, &Proto10400109::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto80400105_descriptor_, &Proto80400105::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto50600102_descriptor_, &Proto50600102::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto10400110_descriptor_, &Proto10400110::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto11499999_descriptor_, &Proto11499999::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto10200001_descriptor_, &Proto10200001::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto10200002_descriptor_, &Proto10200002::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto10200003_descriptor_, &Proto10200003::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto10200004_descriptor_, &Proto10200004::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto11400002_descriptor_, &Proto11400002::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto11400001_descriptor_, &Proto11400001::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto50200004_descriptor_, &Proto50200004::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto80200001_descriptor_, &Proto80200001::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto80200002_descriptor_, &Proto80200002::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto80200003_descriptor_, &Proto80200003::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto10200005_descriptor_, &Proto10200005::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto50200005_descriptor_, &Proto50200005::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto10200006_descriptor_, &Proto10200006::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto50200006_descriptor_, &Proto50200006::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto11400101_descriptor_, &Proto11400101::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto11400102_descriptor_, &Proto11400102::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto11400103_descriptor_, &Proto11400103::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto11400104_descriptor_, &Proto11400104::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto11400105_descriptor_, &Proto11400105::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto11400106_descriptor_, &Proto11400106::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto11400107_descriptor_, &Proto11400107::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto11400110_descriptor_, &Proto11400110::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto51400101_descriptor_, &Proto51400101::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto51400102_descriptor_, &Proto51400102::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto51400103_descriptor_, &Proto51400103::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto51400106_descriptor_, &Proto51400106::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto81400102_descriptor_, &Proto81400102::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto81400101_descriptor_, &Proto81400101::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto81400103_descriptor_, &Proto81400103::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto11400326_descriptor_, &Proto11400326::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto11400327_descriptor_, &Proto11400327::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto11400328_descriptor_, &Proto11400328::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto11400329_descriptor_, &Proto11400329::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto11400330_descriptor_, &Proto11400330::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto51400325_descriptor_, &Proto51400325::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto51400329_descriptor_, &Proto51400329::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoClient001_2eproto() {
  delete Proto10700101::default_instance_;
  delete Proto10700101_reflection_;
  delete Proto50700101::default_instance_;
  delete Proto50700101_reflection_;
  delete Proto10600101::default_instance_;
  delete Proto10600101_reflection_;
  delete Proto50600101::default_instance_;
  delete Proto50600101_reflection_;
  delete Proto10600102::default_instance_;
  delete Proto10600102_reflection_;
  delete Proto80400101::default_instance_;
  delete Proto80400101_reflection_;
  delete Proto10400001::default_instance_;
  delete Proto10400001_reflection_;
  delete Proto80400102::default_instance_;
  delete Proto80400102_reflection_;
  delete Proto80400104::default_instance_;
  delete Proto80400104_reflection_;
  delete Proto10400109::default_instance_;
  delete Proto10400109_reflection_;
  delete Proto80400105::default_instance_;
  delete Proto80400105_reflection_;
  delete Proto50600102::default_instance_;
  delete Proto50600102_reflection_;
  delete Proto10400110::default_instance_;
  delete Proto10400110_reflection_;
  delete Proto11499999::default_instance_;
  delete Proto11499999_reflection_;
  delete Proto10200001::default_instance_;
  delete Proto10200001_reflection_;
  delete Proto10200002::default_instance_;
  delete Proto10200002_reflection_;
  delete Proto10200003::default_instance_;
  delete Proto10200003_reflection_;
  delete Proto10200004::default_instance_;
  delete Proto10200004_reflection_;
  delete Proto11400002::default_instance_;
  delete Proto11400002_reflection_;
  delete Proto11400001::default_instance_;
  delete Proto11400001_reflection_;
  delete Proto50200004::default_instance_;
  delete Proto50200004_reflection_;
  delete Proto80200001::default_instance_;
  delete Proto80200001_reflection_;
  delete Proto80200002::default_instance_;
  delete Proto80200002_reflection_;
  delete Proto80200003::default_instance_;
  delete Proto80200003_reflection_;
  delete Proto10200005::default_instance_;
  delete Proto10200005_reflection_;
  delete Proto50200005::default_instance_;
  delete Proto50200005_reflection_;
  delete Proto10200006::default_instance_;
  delete Proto10200006_reflection_;
  delete Proto50200006::default_instance_;
  delete Proto50200006_reflection_;
  delete Proto11400101::default_instance_;
  delete Proto11400101_reflection_;
  delete Proto11400102::default_instance_;
  delete Proto11400102_reflection_;
  delete Proto11400103::default_instance_;
  delete Proto11400103_reflection_;
  delete Proto11400104::default_instance_;
  delete Proto11400104_reflection_;
  delete Proto11400105::default_instance_;
  delete Proto11400105_reflection_;
  delete Proto11400106::default_instance_;
  delete Proto11400106_reflection_;
  delete Proto11400107::default_instance_;
  delete Proto11400107_reflection_;
  delete Proto11400110::default_instance_;
  delete Proto11400110_reflection_;
  delete Proto51400101::default_instance_;
  delete Proto51400101_reflection_;
  delete Proto51400102::default_instance_;
  delete Proto51400102_reflection_;
  delete Proto51400103::default_instance_;
  delete Proto51400103_reflection_;
  delete Proto51400106::default_instance_;
  delete Proto51400106_reflection_;
  delete Proto81400102::default_instance_;
  delete Proto81400102_reflection_;
  delete Proto81400101::default_instance_;
  delete Proto81400101_reflection_;
  delete Proto81400103::default_instance_;
  delete Proto81400103_reflection_;
  delete Proto11400326::default_instance_;
  delete Proto11400326_reflection_;
  delete Proto11400327::default_instance_;
  delete Proto11400327_reflection_;
  delete Proto11400328::default_instance_;
  delete Proto11400328_reflection_;
  delete Proto11400329::default_instance_;
  delete Proto11400329_reflection_;
  delete Proto11400330::default_instance_;
  delete Proto11400330_reflection_;
  delete Proto51400325::default_instance_;
  delete Proto51400325_reflection_;
  delete Proto51400329::default_instance_;
  delete Proto51400329_reflection_;
}

void protobuf_AddDesc_ProtoClient001_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_ProtoPublic_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024ProtoClient001.proto\032\021ProtoPublic.prot"
    "o\"\?\n\rProto10700101\022\017\n\007account\030\001 \001(\t\022\017\n\007s"
    "ession\030\002 \001(\t\022\014\n\004tick\030\003 \001(\t\"C\n\rProto50700"
    "101\022\017\n\007gate_ip\030\001 \001(\t\022\021\n\tgate_port\030\002 \001(\005\022"
    "\016\n\006domain\030\003 \001(\t\"\351\001\n\rProto10600101\022\017\n\007acc"
    "ount\030\001 \001(\t\022\017\n\007session\030\002 \001(\t\022\014\n\004tick\030\003 \001("
    "\t\022\r\n\005agent\030\004 \001(\t\022\020\n\010platform\030\005 \001(\t\022\020\n\010ne"
    "t_type\030\006 \001(\t\022\023\n\013sys_version\030\007 \001(\t\022\021\n\tsys"
    "_model\030\010 \001(\t\022\013\n\003mac\030\t \001(\t\022\r\n\005c_sid\030\n \001(\t"
    "\022\023\n\013server_flag\030\013 \001(\t\022\016\n\006market\030\014 \001(\005\022\014\n"
    "\004imei\030\r \001(\t\"\252\001\n\rProto50600101\022\017\n\007role_id"
    "\030\001 \001(\003\022\'\n\013scene_addrs\030\002 \003(\0132\022.ProtoScene"
    "Address\022\020\n\010ban_type\030\003 \001(\005\022\024\n\014expired_tim"
    "e\030\004 \001(\005\022\024\n\014left_ban_sec\030\005 \001(\005\022!\n\trole_li"
    "st\030\006 \003(\0132\016.ProtoGateRole\"\215\001\n\rProto106001"
    "02\022\014\n\004name\030\001 \001(\t\022\013\n\003sex\030\002 \001(\005\022\017\n\007account"
    "\030\003 \001(\t\022\017\n\007session\030\004 \001(\t\022\r\n\005agent\030\005 \001(\t\022\020"
    "\n\010platform\030\006 \001(\t\022\016\n\006market\030\007 \001(\005\022\016\n\006care"
    "er\030\010 \001(\005\"\213\006\n\rProto80400101\022\022\n\nchat_scene"
    "\030\001 \001(\005\022\017\n\007role_id\030\002 \001(\003\022\014\n\004name\030\003 \001(\t\022\r\n"
    "\005level\030\004 \001(\005\022\013\n\003sex\030\005 \001(\005\022\021\n\tleague_id\030\006"
    " \001(\003\022\023\n\013league_name\030\007 \001(\t\022\020\n\010scene_id\030\010 "
    "\001(\005\022\017\n\007pixel_x\030\t \001(\005\022\017\n\007pixel_y\030\n \001(\005\022\016\n"
    "\006toward\030\013 \001(\005\022\r\n\005blood\030\014 \001(\005\022\021\n\tmax_bloo"
    "d\030\r \001(\005\022\r\n\005magic\030\016 \001(\005\022\021\n\tmax_magic\030\017 \001("
    "\005\022\020\n\010pk_state\030\020 \001(\005\022\022\n\nexperience\030\021 \001(\003\022"
    "\r\n\005speed\030\022 \001(\005\022\020\n\010vip_type\030\023 \001(\005\022\r\n\005forc"
    "e\030\024 \001(\005\022\017\n\007team_id\030\025 \001(\005\022\017\n\007camp_id\030\026 \001("
    "\005\022\022\n\npermission\030\027 \001(\005\022\020\n\010space_id\030\030 \001(\005\022"
    "\023\n\013server_flag\030\031 \001(\t\022\022\n\nname_color\030\032 \001(\005"
    "\022\022\n\nleague_pos\030\033 \001(\005\022\r\n\005mw_id\030\034 \001(\005\022\025\n\rm"
    "w_rank_level\030\035 \001(\005\022\023\n\013server_prev\030\036 \001(\t\022"
    "\021\n\tserver_id\030\037 \001(\005\022\r\n\005angry\030  \001(\005\022\021\n\tful"
    "l_name\030! \001(\t\022\022\n\njump_value\030\" \001(\005\022#\n\nshap"
    "e_info\030# \001(\0132\017.ProtoRoleShape\022\020\n\010main_ac"
    "t\030$ \001(\005\022\022\n\npartner_id\030% \001(\003\022\024\n\014partner_n"
    "ame\030& \001(\t\022\022\n\nwedding_id\030\' \001(\003\022\024\n\014wedding"
    "_type\030( \001(\005\022\021\n\topen_days\030) \001(\005\"B\n\rProto1"
    "0400001\022\017\n\007role_id\030\001 \001(\003\022\017\n\007account\030\002 \001("
    "\t\022\017\n\007session\030\003 \001(\t\"\360\005\n\rProto80400102\022\017\n\007"
    "role_id\030\001 \001(\003\022\014\n\004name\030\002 \001(\t\022\r\n\005level\030\003 \001"
    "(\005\022\013\n\003sex\030\004 \001(\005\022\020\n\010scene_id\030\005 \001(\005\022\017\n\007pix"
    "el_x\030\006 \001(\005\022\017\n\007pixel_y\030\007 \001(\005\022\016\n\006toward\030\010 "
    "\001(\005\022\r\n\005blood\030\t \001(\005\022\021\n\tmax_blood\030\n \001(\005\022\r\n"
    "\005magic\030\013 \001(\005\022\021\n\tmax_magic\030\014 \001(\005\022\020\n\010pk_st"
    "ate\030\r \001(\005\022\r\n\005speed\030\016 \001(\005\022\023\n\013fight_state\030"
    "\017 \001(\005\022\022\n\nmount_sort\030\020 \001(\005\022\020\n\010vip_type\030\021 "
    "\001(\005\022\r\n\005force\030\022 \001(\005\022\017\n\007camp_id\030\023 \001(\005\022\021\n\tl"
    "eague_id\030\024 \001(\003\022\017\n\007is_copy\030\025 \001(\005\022\020\n\010beast"
    "_id\030\026 \001(\003\022\023\n\013league_name\030\027 \001(\t\022\020\n\010space_"
    "id\030\030 \001(\005\022\022\n\nname_color\030\031 \001(\005\022\024\n\014gather_s"
    "tate\030\032 \001(\005\022\021\n\tmount_lvl\030\033 \001(\005\022\r\n\005mw_id\030\034"
    " \001(\005\022\025\n\rmw_rank_level\030\035 \001(\005\022\021\n\tserver_id"
    "\030\036 \001(\005\022\023\n\013server_prev\030\037 \001(\t\022\022\n\nleague_po"
    "s\030  \001(\005\022\021\n\tfull_name\030! \001(\t\022#\n\nshape_info"
    "\030\" \001(\0132\017.ProtoRoleShape\022\030\n\020hotspring_sta"
    "tus\030# \001(\005\022\022\n\npartner_id\030$ \001(\003\022\024\n\014partner"
    "_name\030% \001(\t\022\022\n\nwedding_id\030& \001(\003\022\024\n\014weddi"
    "ng_type\030\' \001(\005\"!\n\rProto80400104\022\020\n\010mover_"
    "id\030\001 \001(\003\"f\n\rProto10400109\022\036\n\tstep_list\030\001"
    " \003(\0132\013.ProtoCoord\022\016\n\006toward\030\002 \001(\005\022\023\n\013arr"
    "ive_tick\030\003 \001(\005\022\020\n\010scene_id\030\004 \001(\005\"f\n\rProt"
    "o80400105\022\020\n\010mover_id\030\001 \001(\003\022\036\n\tstep_list"
    "\030\002 \003(\0132\013.ProtoCoord\022\016\n\006toward\030\003 \001(\005\022\023\n\013a"
    "rrive_tick\030\004 \001(\003\"\035\n\rProto50600102\022\014\n\004tes"
    "t\030\001 \001(\005\"!\n\rProto10400110\022\020\n\010scene_id\030\001 \001"
    "(\005\"q\n\rProto11499999\022\020\n\010cmd_name\030\001 \001(\t\022\016\n"
    "\006param1\030\002 \001(\005\022\016\n\006param2\030\003 \001(\005\022\016\n\006param3\030"
    "\004 \001(\005\022\016\n\006param4\030\005 \001(\005\022\016\n\006param5\030\006 \001(\005\"B\n"
    "\rProto10200001\022\017\n\007role_id\030\001 \001(\003\022\017\n\007accou"
    "nt\030\002 \001(\t\022\017\n\007session\030\003 \001(\t\"e\n\rProto102000"
    "02\022\017\n\007channel\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022\021\n\tvoi"
    "ce_len\030\003 \001(\005\022\020\n\010wcontent\030\004 \001(\t\022\020\n\010vconte"
    "nt\030\005 \001(\014\"i\n\rProto10200003\022\023\n\013dst_role_id"
    "\030\001 \001(\003\022\014\n\004type\030\002 \001(\005\022\021\n\tvoice_len\030\003 \001(\005\022"
    "\020\n\010wcontent\030\004 \001(\t\022\020\n\010vcontent\030\005 \001(\014\"$\n\rP"
    "roto10200004\022\023\n\013time_offset\030\001 \001(\005\"\202\001\n\rPr"
    "oto11400002\022\021\n\tpack_type\030\001 \001(\005\022\020\n\010goods_"
    "id\030\002 \001(\005\022\r\n\005index\030\003 \001(\005\022\017\n\007channel\030\004 \001(\005"
    "\022\014\n\004type\030\005 \001(\005\022\016\n\006roleID\030\006 \001(\003\022\016\n\006pet_id"
    "\030\007 \001(\003\" \n\rProto11400001\022\017\n\007content\030\001 \001(\t"
    "\"0\n\rProto50200004\022\037\n\007content\030\001 \003(\0132\016.Pro"
    "toChatInfo\"0\n\rProto80200001\022\037\n\007content\030\001"
    " \003(\0132\016.ProtoChatInfo\"0\n\rProto80200002\022\037\n"
    "\007content\030\001 \003(\0132\016.ProtoChatInfo\"0\n\rProto8"
    "0200003\022\037\n\007content\030\001 \003(\0132\016.ProtoChatInfo"
    "\":\n\rProto10200005\022\024\n\014peer_role_id\030\001 \001(\003\022"
    "\023\n\013time_offset\030\002 \001(\005\"0\n\rProto50200005\022\037\n"
    "\007content\030\001 \003(\0132\016.ProtoChatInfo\"2\n\rProto1"
    "0200006\022\017\n\007channel\030\001 \001(\005\022\020\n\010voice_id\030\002 \001"
    "(\003\"H\n\rProto50200006\022\020\n\010voice_id\030\001 \001(\003\022\017\n"
    "\007content\030\002 \001(\014\022\024\n\014voice_length\030\003 \001(\005\"\"\n\r"
    "Proto11400101\022\021\n\tpack_type\030\001 \001(\005\"1\n\rProt"
    "o11400102\022\021\n\tpack_type\030\001 \001(\005\022\r\n\005index\030\002 "
    "\001(\005\"1\n\rProto11400103\022\021\n\tpack_type\030\001 \001(\005\022"
    "\r\n\005index\030\002 \001(\005\"2\n\rProto11400104\022\021\n\tpack_"
    "type\030\001 \001(\005\022\016\n\006remove\030\002 \001(\005\"]\n\rProto11400"
    "105\022\021\n\tpack_type\030\001 \001(\005\022\022\n\nindex_from\030\002 \001"
    "(\005\022\020\n\010index_to\030\003 \001(\005\022\023\n\013ignore_bind\030\004 \001("
    "\005\".\n\rProto11400106\022\r\n\005index\030\001 \001(\005\022\016\n\006amo"
    "unt\030\002 \001(\005\"1\n\rProto11400107\022\021\n\tpack_type\030"
    "\001 \001(\005\022\r\n\005index\030\002 \001(\005\"A\n\rProto11400110\022\r\n"
    "\005index\030\001 \001(\005\022\016\n\006amount\030\002 \001(\005\022\021\n\tpack_typ"
    "e\030\003 \001(\005\"\256\001\n\rProto51400101\022\021\n\tpack_type\030\001"
    " \001(\005\022\021\n\tpack_size\030\002 \001(\005\022\035\n\titem_list\030\003 \003"
    "(\0132\n.ProtoItem\022\035\n\tsuit_info\030\004 \003(\0132\n.Prot"
    "oSuit\022%\n\013refine_suit\030\005 \001(\0132\020.ProtoRefine"
    "Suit\022\022\n\nstrengthen\030\006 \003(\005\"i\n\rProto5140010"
    "2\022\r\n\005index\030\001 \001(\005\022\021\n\tgold_cost\030\002 \001(\005\022\021\n\tl"
    "eft_time\030\003 \001(\005\022\022\n\ntotal_time\030\004 \001(\005\022\017\n\007ad"
    "d_exp\030\005 \001(\005\"5\n\rProto51400103\022\021\n\tgold_cos"
    "t\030\001 \001(\005\022\021\n\tpack_size\030\002 \001(\005\"3\n\rProto51400"
    "106\022\017\n\007item_id\030\001 \001(\005\022\021\n\ttips_flag\030\002 \001(\005\""
    "H\n\rProto81400102\022\021\n\tpack_type\030\001 \001(\005\022$\n\rd"
    "el_item_list\030\002 \003(\0132\r.ProtoDelItem\"F\n\rPro"
    "to81400101\022\021\n\tpack_type\030\001 \001(\005\022\"\n\016pack_it"
    "em_list\030\002 \003(\0132\n.ProtoItem\"\374\001\n\rProto81400"
    "103\022\014\n\004gold\030\001 \001(\005\022\021\n\tbind_gold\030\002 \001(\005\022\016\n\006"
    "copper\030\003 \001(\005\022\023\n\013bind_copper\030\004 \001(\005\022\026\n\016act"
    "ivity_score\030\005 \001(\005\022\017\n\007exploit\030\006 \001(\005\022\022\n\nre"
    "putation\030\007 \001(\005\022\020\n\010st_score\030\010 \001(\005\022\r\n\005reik"
    "i\030\t \001(\005\022\016\n\006honour\030\n \001(\005\022\025\n\rleague_contri"
    "\030\013 \001(\005\022\016\n\006spirit\030\014 \001(\005\022\020\n\010practice\030\r \001(\005"
    "\" \n\rProto11400326\022\017\n\007task_id\030\001 \001(\005\" \n\rPr"
    "oto11400327\022\017\n\007task_id\030\001 \001(\005\"3\n\rProto114"
    "00328\022\017\n\007task_id\030\001 \001(\005\022\021\n\tis_double\030\002 \001("
    "\005\"\037\n\rProto11400329\022\016\n\006npc_id\030\001 \001(\005\" \n\rPr"
    "oto11400330\022\017\n\007task_id\030\001 \001(\005\"`\n\rProto514"
    "00325\022!\n\ttask_list\030\001 \003(\0132\016.ProtoTaskInfo"
    "\022\023\n\013task_finish\030\002 \003(\005\022\027\n\017is_finish_guide"
    "\030\003 \001(\005\"2\n\rProto51400329\022!\n\ttask_list\030\001 \003"
    "(\0132\016.ProtoTaskInfo", 5258);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoClient001.proto", &protobuf_RegisterTypes);
  Proto10700101::default_instance_ = new Proto10700101();
  Proto50700101::default_instance_ = new Proto50700101();
  Proto10600101::default_instance_ = new Proto10600101();
  Proto50600101::default_instance_ = new Proto50600101();
  Proto10600102::default_instance_ = new Proto10600102();
  Proto80400101::default_instance_ = new Proto80400101();
  Proto10400001::default_instance_ = new Proto10400001();
  Proto80400102::default_instance_ = new Proto80400102();
  Proto80400104::default_instance_ = new Proto80400104();
  Proto10400109::default_instance_ = new Proto10400109();
  Proto80400105::default_instance_ = new Proto80400105();
  Proto50600102::default_instance_ = new Proto50600102();
  Proto10400110::default_instance_ = new Proto10400110();
  Proto11499999::default_instance_ = new Proto11499999();
  Proto10200001::default_instance_ = new Proto10200001();
  Proto10200002::default_instance_ = new Proto10200002();
  Proto10200003::default_instance_ = new Proto10200003();
  Proto10200004::default_instance_ = new Proto10200004();
  Proto11400002::default_instance_ = new Proto11400002();
  Proto11400001::default_instance_ = new Proto11400001();
  Proto50200004::default_instance_ = new Proto50200004();
  Proto80200001::default_instance_ = new Proto80200001();
  Proto80200002::default_instance_ = new Proto80200002();
  Proto80200003::default_instance_ = new Proto80200003();
  Proto10200005::default_instance_ = new Proto10200005();
  Proto50200005::default_instance_ = new Proto50200005();
  Proto10200006::default_instance_ = new Proto10200006();
  Proto50200006::default_instance_ = new Proto50200006();
  Proto11400101::default_instance_ = new Proto11400101();
  Proto11400102::default_instance_ = new Proto11400102();
  Proto11400103::default_instance_ = new Proto11400103();
  Proto11400104::default_instance_ = new Proto11400104();
  Proto11400105::default_instance_ = new Proto11400105();
  Proto11400106::default_instance_ = new Proto11400106();
  Proto11400107::default_instance_ = new Proto11400107();
  Proto11400110::default_instance_ = new Proto11400110();
  Proto51400101::default_instance_ = new Proto51400101();
  Proto51400102::default_instance_ = new Proto51400102();
  Proto51400103::default_instance_ = new Proto51400103();
  Proto51400106::default_instance_ = new Proto51400106();
  Proto81400102::default_instance_ = new Proto81400102();
  Proto81400101::default_instance_ = new Proto81400101();
  Proto81400103::default_instance_ = new Proto81400103();
  Proto11400326::default_instance_ = new Proto11400326();
  Proto11400327::default_instance_ = new Proto11400327();
  Proto11400328::default_instance_ = new Proto11400328();
  Proto11400329::default_instance_ = new Proto11400329();
  Proto11400330::default_instance_ = new Proto11400330();
  Proto51400325::default_instance_ = new Proto51400325();
  Proto51400329::default_instance_ = new Proto51400329();
  Proto10700101::default_instance_->InitAsDefaultInstance();
  Proto50700101::default_instance_->InitAsDefaultInstance();
  Proto10600101::default_instance_->InitAsDefaultInstance();
  Proto50600101::default_instance_->InitAsDefaultInstance();
  Proto10600102::default_instance_->InitAsDefaultInstance();
  Proto80400101::default_instance_->InitAsDefaultInstance();
  Proto10400001::default_instance_->InitAsDefaultInstance();
  Proto80400102::default_instance_->InitAsDefaultInstance();
  Proto80400104::default_instance_->InitAsDefaultInstance();
  Proto10400109::default_instance_->InitAsDefaultInstance();
  Proto80400105::default_instance_->InitAsDefaultInstance();
  Proto50600102::default_instance_->InitAsDefaultInstance();
  Proto10400110::default_instance_->InitAsDefaultInstance();
  Proto11499999::default_instance_->InitAsDefaultInstance();
  Proto10200001::default_instance_->InitAsDefaultInstance();
  Proto10200002::default_instance_->InitAsDefaultInstance();
  Proto10200003::default_instance_->InitAsDefaultInstance();
  Proto10200004::default_instance_->InitAsDefaultInstance();
  Proto11400002::default_instance_->InitAsDefaultInstance();
  Proto11400001::default_instance_->InitAsDefaultInstance();
  Proto50200004::default_instance_->InitAsDefaultInstance();
  Proto80200001::default_instance_->InitAsDefaultInstance();
  Proto80200002::default_instance_->InitAsDefaultInstance();
  Proto80200003::default_instance_->InitAsDefaultInstance();
  Proto10200005::default_instance_->InitAsDefaultInstance();
  Proto50200005::default_instance_->InitAsDefaultInstance();
  Proto10200006::default_instance_->InitAsDefaultInstance();
  Proto50200006::default_instance_->InitAsDefaultInstance();
  Proto11400101::default_instance_->InitAsDefaultInstance();
  Proto11400102::default_instance_->InitAsDefaultInstance();
  Proto11400103::default_instance_->InitAsDefaultInstance();
  Proto11400104::default_instance_->InitAsDefaultInstance();
  Proto11400105::default_instance_->InitAsDefaultInstance();
  Proto11400106::default_instance_->InitAsDefaultInstance();
  Proto11400107::default_instance_->InitAsDefaultInstance();
  Proto11400110::default_instance_->InitAsDefaultInstance();
  Proto51400101::default_instance_->InitAsDefaultInstance();
  Proto51400102::default_instance_->InitAsDefaultInstance();
  Proto51400103::default_instance_->InitAsDefaultInstance();
  Proto51400106::default_instance_->InitAsDefaultInstance();
  Proto81400102::default_instance_->InitAsDefaultInstance();
  Proto81400101::default_instance_->InitAsDefaultInstance();
  Proto81400103::default_instance_->InitAsDefaultInstance();
  Proto11400326::default_instance_->InitAsDefaultInstance();
  Proto11400327::default_instance_->InitAsDefaultInstance();
  Proto11400328::default_instance_->InitAsDefaultInstance();
  Proto11400329::default_instance_->InitAsDefaultInstance();
  Proto11400330::default_instance_->InitAsDefaultInstance();
  Proto51400325::default_instance_->InitAsDefaultInstance();
  Proto51400329::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoClient001_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoClient001_2eproto {
  StaticDescriptorInitializer_ProtoClient001_2eproto() {
    protobuf_AddDesc_ProtoClient001_2eproto();
  }
} static_descriptor_initializer_ProtoClient001_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Proto10700101::kAccountFieldNumber;
const int Proto10700101::kSessionFieldNumber;
const int Proto10700101::kTickFieldNumber;
#endif  // !_MSC_VER

Proto10700101::Proto10700101()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto10700101::InitAsDefaultInstance() {
}

Proto10700101::Proto10700101(const Proto10700101& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto10700101::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  session_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto10700101::~Proto10700101() {
  SharedDtor();
}

void Proto10700101::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (session_ != &::google::protobuf::internal::kEmptyString) {
    delete session_;
  }
  if (tick_ != &::google::protobuf::internal::kEmptyString) {
    delete tick_;
  }
  if (this != default_instance_) {
  }
}

void Proto10700101::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto10700101::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto10700101_descriptor_;
}

const Proto10700101& Proto10700101::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient001_2eproto();  return *default_instance_;
}

Proto10700101* Proto10700101::default_instance_ = NULL;

Proto10700101* Proto10700101::New() const {
  return new Proto10700101;
}

void Proto10700101::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_session()) {
      if (session_ != &::google::protobuf::internal::kEmptyString) {
        session_->clear();
      }
    }
    if (has_tick()) {
      if (tick_ != &::google::protobuf::internal::kEmptyString) {
        tick_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto10700101::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_session;
        break;
      }
      
      // optional string session = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session().data(), this->session().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tick;
        break;
      }
      
      // optional string tick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tick().data(), this->tick().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto10700101::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }
  
  // optional string session = 2;
  if (has_session()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session().data(), this->session().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->session(), output);
  }
  
  // optional string tick = 3;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tick().data(), this->tick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->tick(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto10700101::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }
  
  // optional string session = 2;
  if (has_session()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session().data(), this->session().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session(), target);
  }
  
  // optional string tick = 3;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tick().data(), this->tick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tick(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto10700101::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }
    
    // optional string session = 2;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session());
    }
    
    // optional string tick = 3;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tick());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto10700101::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto10700101* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto10700101*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto10700101::MergeFrom(const Proto10700101& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_session()) {
      set_session(from.session());
    }
    if (from.has_tick()) {
      set_tick(from.tick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto10700101::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto10700101::CopyFrom(const Proto10700101& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto10700101::IsInitialized() const {
  
  return true;
}

void Proto10700101::Swap(Proto10700101* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(session_, other->session_);
    std::swap(tick_, other->tick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto10700101::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto10700101_descriptor_;
  metadata.reflection = Proto10700101_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto50700101::kGateIpFieldNumber;
const int Proto50700101::kGatePortFieldNumber;
const int Proto50700101::kDomainFieldNumber;
#endif  // !_MSC_VER

Proto50700101::Proto50700101()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto50700101::InitAsDefaultInstance() {
}

Proto50700101::Proto50700101(const Proto50700101& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto50700101::SharedCtor() {
  _cached_size_ = 0;
  gate_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gate_port_ = 0;
  domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto50700101::~Proto50700101() {
  SharedDtor();
}

void Proto50700101::SharedDtor() {
  if (gate_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete gate_ip_;
  }
  if (domain_ != &::google::protobuf::internal::kEmptyString) {
    delete domain_;
  }
  if (this != default_instance_) {
  }
}

void Proto50700101::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto50700101::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto50700101_descriptor_;
}

const Proto50700101& Proto50700101::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient001_2eproto();  return *default_instance_;
}

Proto50700101* Proto50700101::default_instance_ = NULL;

Proto50700101* Proto50700101::New() const {
  return new Proto50700101;
}

void Proto50700101::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gate_ip()) {
      if (gate_ip_ != &::google::protobuf::internal::kEmptyString) {
        gate_ip_->clear();
      }
    }
    gate_port_ = 0;
    if (has_domain()) {
      if (domain_ != &::google::protobuf::internal::kEmptyString) {
        domain_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto50700101::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gate_ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gate_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gate_ip().data(), this->gate_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gate_port;
        break;
      }
      
      // optional int32 gate_port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gate_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gate_port_)));
          set_has_gate_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_domain;
        break;
      }
      
      // optional string domain = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto50700101::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string gate_ip = 1;
  if (has_gate_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gate_ip().data(), this->gate_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->gate_ip(), output);
  }
  
  // optional int32 gate_port = 2;
  if (has_gate_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gate_port(), output);
  }
  
  // optional string domain = 3;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->domain(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto50700101::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string gate_ip = 1;
  if (has_gate_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gate_ip().data(), this->gate_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gate_ip(), target);
  }
  
  // optional int32 gate_port = 2;
  if (has_gate_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gate_port(), target);
  }
  
  // optional string domain = 3;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->domain(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto50700101::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string gate_ip = 1;
    if (has_gate_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gate_ip());
    }
    
    // optional int32 gate_port = 2;
    if (has_gate_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gate_port());
    }
    
    // optional string domain = 3;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto50700101::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto50700101* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto50700101*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto50700101::MergeFrom(const Proto50700101& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gate_ip()) {
      set_gate_ip(from.gate_ip());
    }
    if (from.has_gate_port()) {
      set_gate_port(from.gate_port());
    }
    if (from.has_domain()) {
      set_domain(from.domain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto50700101::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto50700101::CopyFrom(const Proto50700101& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto50700101::IsInitialized() const {
  
  return true;
}

void Proto50700101::Swap(Proto50700101* other) {
  if (other != this) {
    std::swap(gate_ip_, other->gate_ip_);
    std::swap(gate_port_, other->gate_port_);
    std::swap(domain_, other->domain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto50700101::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto50700101_descriptor_;
  metadata.reflection = Proto50700101_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto10600101::kAccountFieldNumber;
const int Proto10600101::kSessionFieldNumber;
const int Proto10600101::kTickFieldNumber;
const int Proto10600101::kAgentFieldNumber;
const int Proto10600101::kPlatformFieldNumber;
const int Proto10600101::kNetTypeFieldNumber;
const int Proto10600101::kSysVersionFieldNumber;
const int Proto10600101::kSysModelFieldNumber;
const int Proto10600101::kMacFieldNumber;
const int Proto10600101::kCSidFieldNumber;
const int Proto10600101::kServerFlagFieldNumber;
const int Proto10600101::kMarketFieldNumber;
const int Proto10600101::kImeiFieldNumber;
#endif  // !_MSC_VER

Proto10600101::Proto10600101()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto10600101::InitAsDefaultInstance() {
}

Proto10600101::Proto10600101(const Proto10600101& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto10600101::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  session_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  net_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sys_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sys_model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  c_sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  market_ = 0;
  imei_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto10600101::~Proto10600101() {
  SharedDtor();
}

void Proto10600101::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (session_ != &::google::protobuf::internal::kEmptyString) {
    delete session_;
  }
  if (tick_ != &::google::protobuf::internal::kEmptyString) {
    delete tick_;
  }
  if (agent_ != &::google::protobuf::internal::kEmptyString) {
    delete agent_;
  }
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_;
  }
  if (net_type_ != &::google::protobuf::internal::kEmptyString) {
    delete net_type_;
  }
  if (sys_version_ != &::google::protobuf::internal::kEmptyString) {
    delete sys_version_;
  }
  if (sys_model_ != &::google::protobuf::internal::kEmptyString) {
    delete sys_model_;
  }
  if (mac_ != &::google::protobuf::internal::kEmptyString) {
    delete mac_;
  }
  if (c_sid_ != &::google::protobuf::internal::kEmptyString) {
    delete c_sid_;
  }
  if (server_flag_ != &::google::protobuf::internal::kEmptyString) {
    delete server_flag_;
  }
  if (imei_ != &::google::protobuf::internal::kEmptyString) {
    delete imei_;
  }
  if (this != default_instance_) {
  }
}

void Proto10600101::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto10600101::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto10600101_descriptor_;
}

const Proto10600101& Proto10600101::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient001_2eproto();  return *default_instance_;
}

Proto10600101* Proto10600101::default_instance_ = NULL;

Proto10600101* Proto10600101::New() const {
  return new Proto10600101;
}

void Proto10600101::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_session()) {
      if (session_ != &::google::protobuf::internal::kEmptyString) {
        session_->clear();
      }
    }
    if (has_tick()) {
      if (tick_ != &::google::protobuf::internal::kEmptyString) {
        tick_->clear();
      }
    }
    if (has_agent()) {
      if (agent_ != &::google::protobuf::internal::kEmptyString) {
        agent_->clear();
      }
    }
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::kEmptyString) {
        platform_->clear();
      }
    }
    if (has_net_type()) {
      if (net_type_ != &::google::protobuf::internal::kEmptyString) {
        net_type_->clear();
      }
    }
    if (has_sys_version()) {
      if (sys_version_ != &::google::protobuf::internal::kEmptyString) {
        sys_version_->clear();
      }
    }
    if (has_sys_model()) {
      if (sys_model_ != &::google::protobuf::internal::kEmptyString) {
        sys_model_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_mac()) {
      if (mac_ != &::google::protobuf::internal::kEmptyString) {
        mac_->clear();
      }
    }
    if (has_c_sid()) {
      if (c_sid_ != &::google::protobuf::internal::kEmptyString) {
        c_sid_->clear();
      }
    }
    if (has_server_flag()) {
      if (server_flag_ != &::google::protobuf::internal::kEmptyString) {
        server_flag_->clear();
      }
    }
    market_ = 0;
    if (has_imei()) {
      if (imei_ != &::google::protobuf::internal::kEmptyString) {
        imei_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto10600101::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_session;
        break;
      }
      
      // optional string session = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session().data(), this->session().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tick;
        break;
      }
      
      // optional string tick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tick().data(), this->tick().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_agent;
        break;
      }
      
      // optional string agent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_agent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_agent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->agent().data(), this->agent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_platform;
        break;
      }
      
      // optional string platform = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_net_type;
        break;
      }
      
      // optional string net_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_net_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_net_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->net_type().data(), this->net_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_sys_version;
        break;
      }
      
      // optional string sys_version = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sys_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sys_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sys_version().data(), this->sys_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_sys_model;
        break;
      }
      
      // optional string sys_model = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sys_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sys_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sys_model().data(), this->sys_model().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_mac;
        break;
      }
      
      // optional string mac = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mac().data(), this->mac().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_c_sid;
        break;
      }
      
      // optional string c_sid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_c_sid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_c_sid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->c_sid().data(), this->c_sid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_server_flag;
        break;
      }
      
      // optional string server_flag = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_flag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_flag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_flag().data(), this->server_flag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_market;
        break;
      }
      
      // optional int32 market = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_market:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &market_)));
          set_has_market();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_imei;
        break;
      }
      
      // optional string imei = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imei:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imei()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->imei().data(), this->imei().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto10600101::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }
  
  // optional string session = 2;
  if (has_session()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session().data(), this->session().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->session(), output);
  }
  
  // optional string tick = 3;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tick().data(), this->tick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->tick(), output);
  }
  
  // optional string agent = 4;
  if (has_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agent().data(), this->agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->agent(), output);
  }
  
  // optional string platform = 5;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->platform(), output);
  }
  
  // optional string net_type = 6;
  if (has_net_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->net_type().data(), this->net_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->net_type(), output);
  }
  
  // optional string sys_version = 7;
  if (has_sys_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sys_version().data(), this->sys_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->sys_version(), output);
  }
  
  // optional string sys_model = 8;
  if (has_sys_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sys_model().data(), this->sys_model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->sys_model(), output);
  }
  
  // optional string mac = 9;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->mac(), output);
  }
  
  // optional string c_sid = 10;
  if (has_c_sid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->c_sid().data(), this->c_sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->c_sid(), output);
  }
  
  // optional string server_flag = 11;
  if (has_server_flag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_flag().data(), this->server_flag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->server_flag(), output);
  }
  
  // optional int32 market = 12;
  if (has_market()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->market(), output);
  }
  
  // optional string imei = 13;
  if (has_imei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->imei(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto10600101::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }
  
  // optional string session = 2;
  if (has_session()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session().data(), this->session().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session(), target);
  }
  
  // optional string tick = 3;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tick().data(), this->tick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tick(), target);
  }
  
  // optional string agent = 4;
  if (has_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agent().data(), this->agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->agent(), target);
  }
  
  // optional string platform = 5;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->platform(), target);
  }
  
  // optional string net_type = 6;
  if (has_net_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->net_type().data(), this->net_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->net_type(), target);
  }
  
  // optional string sys_version = 7;
  if (has_sys_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sys_version().data(), this->sys_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->sys_version(), target);
  }
  
  // optional string sys_model = 8;
  if (has_sys_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sys_model().data(), this->sys_model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->sys_model(), target);
  }
  
  // optional string mac = 9;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->mac(), target);
  }
  
  // optional string c_sid = 10;
  if (has_c_sid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->c_sid().data(), this->c_sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->c_sid(), target);
  }
  
  // optional string server_flag = 11;
  if (has_server_flag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_flag().data(), this->server_flag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->server_flag(), target);
  }
  
  // optional int32 market = 12;
  if (has_market()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->market(), target);
  }
  
  // optional string imei = 13;
  if (has_imei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->imei(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto10600101::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }
    
    // optional string session = 2;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session());
    }
    
    // optional string tick = 3;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tick());
    }
    
    // optional string agent = 4;
    if (has_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->agent());
    }
    
    // optional string platform = 5;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }
    
    // optional string net_type = 6;
    if (has_net_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->net_type());
    }
    
    // optional string sys_version = 7;
    if (has_sys_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sys_version());
    }
    
    // optional string sys_model = 8;
    if (has_sys_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sys_model());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string mac = 9;
    if (has_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mac());
    }
    
    // optional string c_sid = 10;
    if (has_c_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->c_sid());
    }
    
    // optional string server_flag = 11;
    if (has_server_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_flag());
    }
    
    // optional int32 market = 12;
    if (has_market()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->market());
    }
    
    // optional string imei = 13;
    if (has_imei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imei());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto10600101::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto10600101* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto10600101*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto10600101::MergeFrom(const Proto10600101& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_session()) {
      set_session(from.session());
    }
    if (from.has_tick()) {
      set_tick(from.tick());
    }
    if (from.has_agent()) {
      set_agent(from.agent());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_net_type()) {
      set_net_type(from.net_type());
    }
    if (from.has_sys_version()) {
      set_sys_version(from.sys_version());
    }
    if (from.has_sys_model()) {
      set_sys_model(from.sys_model());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mac()) {
      set_mac(from.mac());
    }
    if (from.has_c_sid()) {
      set_c_sid(from.c_sid());
    }
    if (from.has_server_flag()) {
      set_server_flag(from.server_flag());
    }
    if (from.has_market()) {
      set_market(from.market());
    }
    if (from.has_imei()) {
      set_imei(from.imei());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto10600101::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto10600101::CopyFrom(const Proto10600101& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto10600101::IsInitialized() const {
  
  return true;
}

void Proto10600101::Swap(Proto10600101* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(session_, other->session_);
    std::swap(tick_, other->tick_);
    std::swap(agent_, other->agent_);
    std::swap(platform_, other->platform_);
    std::swap(net_type_, other->net_type_);
    std::swap(sys_version_, other->sys_version_);
    std::swap(sys_model_, other->sys_model_);
    std::swap(mac_, other->mac_);
    std::swap(c_sid_, other->c_sid_);
    std::swap(server_flag_, other->server_flag_);
    std::swap(market_, other->market_);
    std::swap(imei_, other->imei_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto10600101::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto10600101_descriptor_;
  metadata.reflection = Proto10600101_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto50600101::kRoleIdFieldNumber;
const int Proto50600101::kSceneAddrsFieldNumber;
const int Proto50600101::kBanTypeFieldNumber;
const int Proto50600101::kExpiredTimeFieldNumber;
const int Proto50600101::kLeftBanSecFieldNumber;
const int Proto50600101::kRoleListFieldNumber;
#endif  // !_MSC_VER

Proto50600101::Proto50600101()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto50600101::InitAsDefaultInstance() {
}

Proto50600101::Proto50600101(const Proto50600101& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto50600101::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  ban_type_ = 0;
  expired_time_ = 0;
  left_ban_sec_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto50600101::~Proto50600101() {
  SharedDtor();
}

void Proto50600101::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto50600101::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto50600101::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto50600101_descriptor_;
}

const Proto50600101& Proto50600101::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient001_2eproto();  return *default_instance_;
}

Proto50600101* Proto50600101::default_instance_ = NULL;

Proto50600101* Proto50600101::New() const {
  return new Proto50600101;
}

void Proto50600101::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_LONGLONG(0);
    ban_type_ = 0;
    expired_time_ = 0;
    left_ban_sec_ = 0;
  }
  scene_addrs_.Clear();
  role_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto50600101::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_scene_addrs;
        break;
      }
      
      // repeated .ProtoSceneAddress scene_addrs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scene_addrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_scene_addrs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_scene_addrs;
        if (input->ExpectTag(24)) goto parse_ban_type;
        break;
      }
      
      // optional int32 ban_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ban_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ban_type_)));
          set_has_ban_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_expired_time;
        break;
      }
      
      // optional int32 expired_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expired_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expired_time_)));
          set_has_expired_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_left_ban_sec;
        break;
      }
      
      // optional int32 left_ban_sec = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_ban_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_ban_sec_)));
          set_has_left_ban_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_role_list;
        break;
      }
      
      // repeated .ProtoGateRole role_list = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_role_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_role_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto50600101::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_id(), output);
  }
  
  // repeated .ProtoSceneAddress scene_addrs = 2;
  for (int i = 0; i < this->scene_addrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->scene_addrs(i), output);
  }
  
  // optional int32 ban_type = 3;
  if (has_ban_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ban_type(), output);
  }
  
  // optional int32 expired_time = 4;
  if (has_expired_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->expired_time(), output);
  }
  
  // optional int32 left_ban_sec = 5;
  if (has_left_ban_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->left_ban_sec(), output);
  }
  
  // repeated .ProtoGateRole role_list = 6;
  for (int i = 0; i < this->role_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->role_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto50600101::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_id(), target);
  }
  
  // repeated .ProtoSceneAddress scene_addrs = 2;
  for (int i = 0; i < this->scene_addrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->scene_addrs(i), target);
  }
  
  // optional int32 ban_type = 3;
  if (has_ban_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ban_type(), target);
  }
  
  // optional int32 expired_time = 4;
  if (has_expired_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->expired_time(), target);
  }
  
  // optional int32 left_ban_sec = 5;
  if (has_left_ban_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->left_ban_sec(), target);
  }
  
  // repeated .ProtoGateRole role_list = 6;
  for (int i = 0; i < this->role_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->role_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto50600101::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional int32 ban_type = 3;
    if (has_ban_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ban_type());
    }
    
    // optional int32 expired_time = 4;
    if (has_expired_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expired_time());
    }
    
    // optional int32 left_ban_sec = 5;
    if (has_left_ban_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_ban_sec());
    }
    
  }
  // repeated .ProtoSceneAddress scene_addrs = 2;
  total_size += 1 * this->scene_addrs_size();
  for (int i = 0; i < this->scene_addrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->scene_addrs(i));
  }
  
  // repeated .ProtoGateRole role_list = 6;
  total_size += 1 * this->role_list_size();
  for (int i = 0; i < this->role_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->role_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto50600101::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto50600101* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto50600101*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto50600101::MergeFrom(const Proto50600101& from) {
  GOOGLE_CHECK_NE(&from, this);
  scene_addrs_.MergeFrom(from.scene_addrs_);
  role_list_.MergeFrom(from.role_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_ban_type()) {
      set_ban_type(from.ban_type());
    }
    if (from.has_expired_time()) {
      set_expired_time(from.expired_time());
    }
    if (from.has_left_ban_sec()) {
      set_left_ban_sec(from.left_ban_sec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto50600101::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto50600101::CopyFrom(const Proto50600101& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto50600101::IsInitialized() const {
  
  return true;
}

void Proto50600101::Swap(Proto50600101* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    scene_addrs_.Swap(&other->scene_addrs_);
    std::swap(ban_type_, other->ban_type_);
    std::swap(expired_time_, other->expired_time_);
    std::swap(left_ban_sec_, other->left_ban_sec_);
    role_list_.Swap(&other->role_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto50600101::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto50600101_descriptor_;
  metadata.reflection = Proto50600101_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto10600102::kNameFieldNumber;
const int Proto10600102::kSexFieldNumber;
const int Proto10600102::kAccountFieldNumber;
const int Proto10600102::kSessionFieldNumber;
const int Proto10600102::kAgentFieldNumber;
const int Proto10600102::kPlatformFieldNumber;
const int Proto10600102::kMarketFieldNumber;
const int Proto10600102::kCareerFieldNumber;
#endif  // !_MSC_VER

Proto10600102::Proto10600102()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto10600102::InitAsDefaultInstance() {
}

Proto10600102::Proto10600102(const Proto10600102& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto10600102::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  session_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  market_ = 0;
  career_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto10600102::~Proto10600102() {
  SharedDtor();
}

void Proto10600102::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (session_ != &::google::protobuf::internal::kEmptyString) {
    delete session_;
  }
  if (agent_ != &::google::protobuf::internal::kEmptyString) {
    delete agent_;
  }
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_;
  }
  if (this != default_instance_) {
  }
}

void Proto10600102::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto10600102::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto10600102_descriptor_;
}

const Proto10600102& Proto10600102::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient001_2eproto();  return *default_instance_;
}

Proto10600102* Proto10600102::default_instance_ = NULL;

Proto10600102* Proto10600102::New() const {
  return new Proto10600102;
}

void Proto10600102::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    sex_ = 0;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_session()) {
      if (session_ != &::google::protobuf::internal::kEmptyString) {
        session_->clear();
      }
    }
    if (has_agent()) {
      if (agent_ != &::google::protobuf::internal::kEmptyString) {
        agent_->clear();
      }
    }
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::kEmptyString) {
        platform_->clear();
      }
    }
    market_ = 0;
    career_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto10600102::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sex;
        break;
      }
      
      // optional int32 sex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_account;
        break;
      }
      
      // optional string account = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_session;
        break;
      }
      
      // optional string session = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session().data(), this->session().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_agent;
        break;
      }
      
      // optional string agent = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_agent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_agent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->agent().data(), this->agent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_platform;
        break;
      }
      
      // optional string platform = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_market;
        break;
      }
      
      // optional int32 market = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_market:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &market_)));
          set_has_market();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_career;
        break;
      }
      
      // optional int32 career = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_career:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &career_)));
          set_has_career();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto10600102::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional int32 sex = 2;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sex(), output);
  }
  
  // optional string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->account(), output);
  }
  
  // optional string session = 4;
  if (has_session()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session().data(), this->session().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->session(), output);
  }
  
  // optional string agent = 5;
  if (has_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agent().data(), this->agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->agent(), output);
  }
  
  // optional string platform = 6;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->platform(), output);
  }
  
  // optional int32 market = 7;
  if (has_market()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->market(), output);
  }
  
  // optional int32 career = 8;
  if (has_career()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->career(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto10600102::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional int32 sex = 2;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sex(), target);
  }
  
  // optional string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->account(), target);
  }
  
  // optional string session = 4;
  if (has_session()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session().data(), this->session().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->session(), target);
  }
  
  // optional string agent = 5;
  if (has_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agent().data(), this->agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->agent(), target);
  }
  
  // optional string platform = 6;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->platform(), target);
  }
  
  // optional int32 market = 7;
  if (has_market()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->market(), target);
  }
  
  // optional int32 career = 8;
  if (has_career()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->career(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto10600102::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 sex = 2;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }
    
    // optional string account = 3;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }
    
    // optional string session = 4;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session());
    }
    
    // optional string agent = 5;
    if (has_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->agent());
    }
    
    // optional string platform = 6;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }
    
    // optional int32 market = 7;
    if (has_market()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->market());
    }
    
    // optional int32 career = 8;
    if (has_career()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->career());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto10600102::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto10600102* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto10600102*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto10600102::MergeFrom(const Proto10600102& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_session()) {
      set_session(from.session());
    }
    if (from.has_agent()) {
      set_agent(from.agent());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_market()) {
      set_market(from.market());
    }
    if (from.has_career()) {
      set_career(from.career());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto10600102::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto10600102::CopyFrom(const Proto10600102& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto10600102::IsInitialized() const {
  
  return true;
}

void Proto10600102::Swap(Proto10600102* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(sex_, other->sex_);
    std::swap(account_, other->account_);
    std::swap(session_, other->session_);
    std::swap(agent_, other->agent_);
    std::swap(platform_, other->platform_);
    std::swap(market_, other->market_);
    std::swap(career_, other->career_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto10600102::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto10600102_descriptor_;
  metadata.reflection = Proto10600102_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto80400101::kChatSceneFieldNumber;
const int Proto80400101::kRoleIdFieldNumber;
const int Proto80400101::kNameFieldNumber;
const int Proto80400101::kLevelFieldNumber;
const int Proto80400101::kSexFieldNumber;
const int Proto80400101::kLeagueIdFieldNumber;
const int Proto80400101::kLeagueNameFieldNumber;
const int Proto80400101::kSceneIdFieldNumber;
const int Proto80400101::kPixelXFieldNumber;
const int Proto80400101::kPixelYFieldNumber;
const int Proto80400101::kTowardFieldNumber;
const int Proto80400101::kBloodFieldNumber;
const int Proto80400101::kMaxBloodFieldNumber;
const int Proto80400101::kMagicFieldNumber;
const int Proto80400101::kMaxMagicFieldNumber;
const int Proto80400101::kPkStateFieldNumber;
const int Proto80400101::kExperienceFieldNumber;
const int Proto80400101::kSpeedFieldNumber;
const int Proto80400101::kVipTypeFieldNumber;
const int Proto80400101::kForceFieldNumber;
const int Proto80400101::kTeamIdFieldNumber;
const int Proto80400101::kCampIdFieldNumber;
const int Proto80400101::kPermissionFieldNumber;
const int Proto80400101::kSpaceIdFieldNumber;
const int Proto80400101::kServerFlagFieldNumber;
const int Proto80400101::kNameColorFieldNumber;
const int Proto80400101::kLeaguePosFieldNumber;
const int Proto80400101::kMwIdFieldNumber;
const int Proto80400101::kMwRankLevelFieldNumber;
const int Proto80400101::kServerPrevFieldNumber;
const int Proto80400101::kServerIdFieldNumber;
const int Proto80400101::kAngryFieldNumber;
const int Proto80400101::kFullNameFieldNumber;
const int Proto80400101::kJumpValueFieldNumber;
const int Proto80400101::kShapeInfoFieldNumber;
const int Proto80400101::kMainActFieldNumber;
const int Proto80400101::kPartnerIdFieldNumber;
const int Proto80400101::kPartnerNameFieldNumber;
const int Proto80400101::kWeddingIdFieldNumber;
const int Proto80400101::kWeddingTypeFieldNumber;
const int Proto80400101::kOpenDaysFieldNumber;
#endif  // !_MSC_VER

Proto80400101::Proto80400101()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto80400101::InitAsDefaultInstance() {
  shape_info_ = const_cast< ::ProtoRoleShape*>(&::ProtoRoleShape::default_instance());
}

Proto80400101::Proto80400101(const Proto80400101& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto80400101::SharedCtor() {
  _cached_size_ = 0;
  chat_scene_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  sex_ = 0;
  league_id_ = GOOGLE_LONGLONG(0);
  league_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  scene_id_ = 0;
  pixel_x_ = 0;
  pixel_y_ = 0;
  toward_ = 0;
  blood_ = 0;
  max_blood_ = 0;
  magic_ = 0;
  max_magic_ = 0;
  pk_state_ = 0;
  experience_ = GOOGLE_LONGLONG(0);
  speed_ = 0;
  vip_type_ = 0;
  force_ = 0;
  team_id_ = 0;
  camp_id_ = 0;
  permission_ = 0;
  space_id_ = 0;
  server_flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_color_ = 0;
  league_pos_ = 0;
  mw_id_ = 0;
  mw_rank_level_ = 0;
  server_prev_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_id_ = 0;
  angry_ = 0;
  full_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  jump_value_ = 0;
  shape_info_ = NULL;
  main_act_ = 0;
  partner_id_ = GOOGLE_LONGLONG(0);
  partner_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wedding_id_ = GOOGLE_LONGLONG(0);
  wedding_type_ = 0;
  open_days_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto80400101::~Proto80400101() {
  SharedDtor();
}

void Proto80400101::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (league_name_ != &::google::protobuf::internal::kEmptyString) {
    delete league_name_;
  }
  if (server_flag_ != &::google::protobuf::internal::kEmptyString) {
    delete server_flag_;
  }
  if (server_prev_ != &::google::protobuf::internal::kEmptyString) {
    delete server_prev_;
  }
  if (full_name_ != &::google::protobuf::internal::kEmptyString) {
    delete full_name_;
  }
  if (partner_name_ != &::google::protobuf::internal::kEmptyString) {
    delete partner_name_;
  }
  if (this != default_instance_) {
    delete shape_info_;
  }
}

void Proto80400101::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto80400101::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto80400101_descriptor_;
}

const Proto80400101& Proto80400101::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient001_2eproto();  return *default_instance_;
}

Proto80400101* Proto80400101::default_instance_ = NULL;

Proto80400101* Proto80400101::New() const {
  return new Proto80400101;
}

void Proto80400101::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chat_scene_ = 0;
    role_id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0;
    sex_ = 0;
    league_id_ = GOOGLE_LONGLONG(0);
    if (has_league_name()) {
      if (league_name_ != &::google::protobuf::internal::kEmptyString) {
        league_name_->clear();
      }
    }
    scene_id_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    pixel_x_ = 0;
    pixel_y_ = 0;
    toward_ = 0;
    blood_ = 0;
    max_blood_ = 0;
    magic_ = 0;
    max_magic_ = 0;
    pk_state_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    experience_ = GOOGLE_LONGLONG(0);
    speed_ = 0;
    vip_type_ = 0;
    force_ = 0;
    team_id_ = 0;
    camp_id_ = 0;
    permission_ = 0;
    space_id_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_server_flag()) {
      if (server_flag_ != &::google::protobuf::internal::kEmptyString) {
        server_flag_->clear();
      }
    }
    name_color_ = 0;
    league_pos_ = 0;
    mw_id_ = 0;
    mw_rank_level_ = 0;
    if (has_server_prev()) {
      if (server_prev_ != &::google::protobuf::internal::kEmptyString) {
        server_prev_->clear();
      }
    }
    server_id_ = 0;
    angry_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_full_name()) {
      if (full_name_ != &::google::protobuf::internal::kEmptyString) {
        full_name_->clear();
      }
    }
    jump_value_ = 0;
    if (has_shape_info()) {
      if (shape_info_ != NULL) shape_info_->::ProtoRoleShape::Clear();
    }
    main_act_ = 0;
    partner_id_ = GOOGLE_LONGLONG(0);
    if (has_partner_name()) {
      if (partner_name_ != &::google::protobuf::internal::kEmptyString) {
        partner_name_->clear();
      }
    }
    wedding_id_ = GOOGLE_LONGLONG(0);
    wedding_type_ = 0;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    open_days_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto80400101::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chat_scene = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chat_scene_)));
          set_has_chat_scene();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }
      
      // optional int64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }
      
      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }
      
      // optional int32 sex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_league_id;
        break;
      }
      
      // optional int64 league_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_league_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &league_id_)));
          set_has_league_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_league_name;
        break;
      }
      
      // optional string league_name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_league_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_league_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->league_name().data(), this->league_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_scene_id;
        break;
      }
      
      // optional int32 scene_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_pixel_x;
        break;
      }
      
      // optional int32 pixel_x = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pixel_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pixel_x_)));
          set_has_pixel_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_pixel_y;
        break;
      }
      
      // optional int32 pixel_y = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pixel_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pixel_y_)));
          set_has_pixel_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_toward;
        break;
      }
      
      // optional int32 toward = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_toward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &toward_)));
          set_has_toward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_blood;
        break;
      }
      
      // optional int32 blood = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blood_)));
          set_has_blood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_max_blood;
        break;
      }
      
      // optional int32 max_blood = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_blood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_blood_)));
          set_has_max_blood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_magic;
        break;
      }
      
      // optional int32 magic = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magic_)));
          set_has_magic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_max_magic;
        break;
      }
      
      // optional int32 max_magic = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_magic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_magic_)));
          set_has_max_magic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_pk_state;
        break;
      }
      
      // optional int32 pk_state = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pk_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pk_state_)));
          set_has_pk_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_experience;
        break;
      }
      
      // optional int64 experience = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_experience:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &experience_)));
          set_has_experience();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_speed;
        break;
      }
      
      // optional int32 speed = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_vip_type;
        break;
      }
      
      // optional int32 vip_type = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_type_)));
          set_has_vip_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_force;
        break;
      }
      
      // optional int32 force = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &force_)));
          set_has_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_team_id;
        break;
      }
      
      // optional int32 team_id = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_camp_id;
        break;
      }
      
      // optional int32 camp_id = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_camp_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_id_)));
          set_has_camp_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_permission;
        break;
      }
      
      // optional int32 permission = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_permission:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &permission_)));
          set_has_permission();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_space_id;
        break;
      }
      
      // optional int32 space_id = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_space_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &space_id_)));
          set_has_space_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_server_flag;
        break;
      }
      
      // optional string server_flag = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_flag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_flag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_flag().data(), this->server_flag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_name_color;
        break;
      }
      
      // optional int32 name_color = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_name_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &name_color_)));
          set_has_name_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_league_pos;
        break;
      }
      
      // optional int32 league_pos = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_league_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &league_pos_)));
          set_has_league_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_mw_id;
        break;
      }
      
      // optional int32 mw_id = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mw_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mw_id_)));
          set_has_mw_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_mw_rank_level;
        break;
      }
      
      // optional int32 mw_rank_level = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mw_rank_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mw_rank_level_)));
          set_has_mw_rank_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_server_prev;
        break;
      }
      
      // optional string server_prev = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_prev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_prev()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_prev().data(), this->server_prev().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_server_id;
        break;
      }
      
      // optional int32 server_id = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_angry;
        break;
      }
      
      // optional int32 angry = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_angry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &angry_)));
          set_has_angry();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_full_name;
        break;
      }
      
      // optional string full_name = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_full_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_full_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->full_name().data(), this->full_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_jump_value;
        break;
      }
      
      // optional int32 jump_value = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jump_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jump_value_)));
          set_has_jump_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_shape_info;
        break;
      }
      
      // optional .ProtoRoleShape shape_info = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shape_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_main_act;
        break;
      }
      
      // optional int32 main_act = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_main_act:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &main_act_)));
          set_has_main_act();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_partner_id;
        break;
      }
      
      // optional int64 partner_id = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &partner_id_)));
          set_has_partner_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_partner_name;
        break;
      }
      
      // optional string partner_name = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partner_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partner_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->partner_name().data(), this->partner_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_wedding_id;
        break;
      }
      
      // optional int64 wedding_id = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wedding_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &wedding_id_)));
          set_has_wedding_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_wedding_type;
        break;
      }
      
      // optional int32 wedding_type = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wedding_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wedding_type_)));
          set_has_wedding_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_open_days;
        break;
      }
      
      // optional int32 open_days = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_days_)));
          set_has_open_days();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto80400101::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chat_scene = 1;
  if (has_chat_scene()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chat_scene(), output);
  }
  
  // optional int64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->role_id(), output);
  }
  
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }
  
  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }
  
  // optional int32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sex(), output);
  }
  
  // optional int64 league_id = 6;
  if (has_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->league_id(), output);
  }
  
  // optional string league_name = 7;
  if (has_league_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->league_name().data(), this->league_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->league_name(), output);
  }
  
  // optional int32 scene_id = 8;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->scene_id(), output);
  }
  
  // optional int32 pixel_x = 9;
  if (has_pixel_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->pixel_x(), output);
  }
  
  // optional int32 pixel_y = 10;
  if (has_pixel_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->pixel_y(), output);
  }
  
  // optional int32 toward = 11;
  if (has_toward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->toward(), output);
  }
  
  // optional int32 blood = 12;
  if (has_blood()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->blood(), output);
  }
  
  // optional int32 max_blood = 13;
  if (has_max_blood()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->max_blood(), output);
  }
  
  // optional int32 magic = 14;
  if (has_magic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->magic(), output);
  }
  
  // optional int32 max_magic = 15;
  if (has_max_magic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->max_magic(), output);
  }
  
  // optional int32 pk_state = 16;
  if (has_pk_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->pk_state(), output);
  }
  
  // optional int64 experience = 17;
  if (has_experience()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->experience(), output);
  }
  
  // optional int32 speed = 18;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->speed(), output);
  }
  
  // optional int32 vip_type = 19;
  if (has_vip_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->vip_type(), output);
  }
  
  // optional int32 force = 20;
  if (has_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->force(), output);
  }
  
  // optional int32 team_id = 21;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->team_id(), output);
  }
  
  // optional int32 camp_id = 22;
  if (has_camp_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->camp_id(), output);
  }
  
  // optional int32 permission = 23;
  if (has_permission()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->permission(), output);
  }
  
  // optional int32 space_id = 24;
  if (has_space_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->space_id(), output);
  }
  
  // optional string server_flag = 25;
  if (has_server_flag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_flag().data(), this->server_flag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->server_flag(), output);
  }
  
  // optional int32 name_color = 26;
  if (has_name_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->name_color(), output);
  }
  
  // optional int32 league_pos = 27;
  if (has_league_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->league_pos(), output);
  }
  
  // optional int32 mw_id = 28;
  if (has_mw_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->mw_id(), output);
  }
  
  // optional int32 mw_rank_level = 29;
  if (has_mw_rank_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->mw_rank_level(), output);
  }
  
  // optional string server_prev = 30;
  if (has_server_prev()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_prev().data(), this->server_prev().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->server_prev(), output);
  }
  
  // optional int32 server_id = 31;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->server_id(), output);
  }
  
  // optional int32 angry = 32;
  if (has_angry()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->angry(), output);
  }
  
  // optional string full_name = 33;
  if (has_full_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->full_name().data(), this->full_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      33, this->full_name(), output);
  }
  
  // optional int32 jump_value = 34;
  if (has_jump_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->jump_value(), output);
  }
  
  // optional .ProtoRoleShape shape_info = 35;
  if (has_shape_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->shape_info(), output);
  }
  
  // optional int32 main_act = 36;
  if (has_main_act()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->main_act(), output);
  }
  
  // optional int64 partner_id = 37;
  if (has_partner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(37, this->partner_id(), output);
  }
  
  // optional string partner_name = 38;
  if (has_partner_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->partner_name().data(), this->partner_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      38, this->partner_name(), output);
  }
  
  // optional int64 wedding_id = 39;
  if (has_wedding_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(39, this->wedding_id(), output);
  }
  
  // optional int32 wedding_type = 40;
  if (has_wedding_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->wedding_type(), output);
  }
  
  // optional int32 open_days = 41;
  if (has_open_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->open_days(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto80400101::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 chat_scene = 1;
  if (has_chat_scene()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chat_scene(), target);
  }
  
  // optional int64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->role_id(), target);
  }
  
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }
  
  // optional int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }
  
  // optional int32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sex(), target);
  }
  
  // optional int64 league_id = 6;
  if (has_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->league_id(), target);
  }
  
  // optional string league_name = 7;
  if (has_league_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->league_name().data(), this->league_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->league_name(), target);
  }
  
  // optional int32 scene_id = 8;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->scene_id(), target);
  }
  
  // optional int32 pixel_x = 9;
  if (has_pixel_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->pixel_x(), target);
  }
  
  // optional int32 pixel_y = 10;
  if (has_pixel_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->pixel_y(), target);
  }
  
  // optional int32 toward = 11;
  if (has_toward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->toward(), target);
  }
  
  // optional int32 blood = 12;
  if (has_blood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->blood(), target);
  }
  
  // optional int32 max_blood = 13;
  if (has_max_blood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->max_blood(), target);
  }
  
  // optional int32 magic = 14;
  if (has_magic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->magic(), target);
  }
  
  // optional int32 max_magic = 15;
  if (has_max_magic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->max_magic(), target);
  }
  
  // optional int32 pk_state = 16;
  if (has_pk_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->pk_state(), target);
  }
  
  // optional int64 experience = 17;
  if (has_experience()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->experience(), target);
  }
  
  // optional int32 speed = 18;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->speed(), target);
  }
  
  // optional int32 vip_type = 19;
  if (has_vip_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->vip_type(), target);
  }
  
  // optional int32 force = 20;
  if (has_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->force(), target);
  }
  
  // optional int32 team_id = 21;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->team_id(), target);
  }
  
  // optional int32 camp_id = 22;
  if (has_camp_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->camp_id(), target);
  }
  
  // optional int32 permission = 23;
  if (has_permission()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->permission(), target);
  }
  
  // optional int32 space_id = 24;
  if (has_space_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->space_id(), target);
  }
  
  // optional string server_flag = 25;
  if (has_server_flag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_flag().data(), this->server_flag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->server_flag(), target);
  }
  
  // optional int32 name_color = 26;
  if (has_name_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->name_color(), target);
  }
  
  // optional int32 league_pos = 27;
  if (has_league_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->league_pos(), target);
  }
  
  // optional int32 mw_id = 28;
  if (has_mw_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->mw_id(), target);
  }
  
  // optional int32 mw_rank_level = 29;
  if (has_mw_rank_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->mw_rank_level(), target);
  }
  
  // optional string server_prev = 30;
  if (has_server_prev()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_prev().data(), this->server_prev().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->server_prev(), target);
  }
  
  // optional int32 server_id = 31;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->server_id(), target);
  }
  
  // optional int32 angry = 32;
  if (has_angry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->angry(), target);
  }
  
  // optional string full_name = 33;
  if (has_full_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->full_name().data(), this->full_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->full_name(), target);
  }
  
  // optional int32 jump_value = 34;
  if (has_jump_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->jump_value(), target);
  }
  
  // optional .ProtoRoleShape shape_info = 35;
  if (has_shape_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->shape_info(), target);
  }
  
  // optional int32 main_act = 36;
  if (has_main_act()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->main_act(), target);
  }
  
  // optional int64 partner_id = 37;
  if (has_partner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(37, this->partner_id(), target);
  }
  
  // optional string partner_name = 38;
  if (has_partner_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->partner_name().data(), this->partner_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        38, this->partner_name(), target);
  }
  
  // optional int64 wedding_id = 39;
  if (has_wedding_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(39, this->wedding_id(), target);
  }
  
  // optional int32 wedding_type = 40;
  if (has_wedding_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->wedding_type(), target);
  }
  
  // optional int32 open_days = 41;
  if (has_open_days()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->open_days(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto80400101::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chat_scene = 1;
    if (has_chat_scene()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chat_scene());
    }
    
    // optional int64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }
    
    // optional int64 league_id = 6;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->league_id());
    }
    
    // optional string league_name = 7;
    if (has_league_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->league_name());
    }
    
    // optional int32 scene_id = 8;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_id());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 pixel_x = 9;
    if (has_pixel_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pixel_x());
    }
    
    // optional int32 pixel_y = 10;
    if (has_pixel_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pixel_y());
    }
    
    // optional int32 toward = 11;
    if (has_toward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->toward());
    }
    
    // optional int32 blood = 12;
    if (has_blood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blood());
    }
    
    // optional int32 max_blood = 13;
    if (has_max_blood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_blood());
    }
    
    // optional int32 magic = 14;
    if (has_magic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magic());
    }
    
    // optional int32 max_magic = 15;
    if (has_max_magic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_magic());
    }
    
    // optional int32 pk_state = 16;
    if (has_pk_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pk_state());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int64 experience = 17;
    if (has_experience()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->experience());
    }
    
    // optional int32 speed = 18;
    if (has_speed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speed());
    }
    
    // optional int32 vip_type = 19;
    if (has_vip_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_type());
    }
    
    // optional int32 force = 20;
    if (has_force()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->force());
    }
    
    // optional int32 team_id = 21;
    if (has_team_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_id());
    }
    
    // optional int32 camp_id = 22;
    if (has_camp_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp_id());
    }
    
    // optional int32 permission = 23;
    if (has_permission()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->permission());
    }
    
    // optional int32 space_id = 24;
    if (has_space_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->space_id());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string server_flag = 25;
    if (has_server_flag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_flag());
    }
    
    // optional int32 name_color = 26;
    if (has_name_color()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->name_color());
    }
    
    // optional int32 league_pos = 27;
    if (has_league_pos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->league_pos());
    }
    
    // optional int32 mw_id = 28;
    if (has_mw_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mw_id());
    }
    
    // optional int32 mw_rank_level = 29;
    if (has_mw_rank_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mw_rank_level());
    }
    
    // optional string server_prev = 30;
    if (has_server_prev()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_prev());
    }
    
    // optional int32 server_id = 31;
    if (has_server_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }
    
    // optional int32 angry = 32;
    if (has_angry()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->angry());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional string full_name = 33;
    if (has_full_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->full_name());
    }
    
    // optional int32 jump_value = 34;
    if (has_jump_value()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jump_value());
    }
    
    // optional .ProtoRoleShape shape_info = 35;
    if (has_shape_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shape_info());
    }
    
    // optional int32 main_act = 36;
    if (has_main_act()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->main_act());
    }
    
    // optional int64 partner_id = 37;
    if (has_partner_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->partner_id());
    }
    
    // optional string partner_name = 38;
    if (has_partner_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->partner_name());
    }
    
    // optional int64 wedding_id = 39;
    if (has_wedding_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->wedding_id());
    }
    
    // optional int32 wedding_type = 40;
    if (has_wedding_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wedding_type());
    }
    
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional int32 open_days = 41;
    if (has_open_days()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open_days());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto80400101::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto80400101* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto80400101*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto80400101::MergeFrom(const Proto80400101& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chat_scene()) {
      set_chat_scene(from.chat_scene());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_league_id()) {
      set_league_id(from.league_id());
    }
    if (from.has_league_name()) {
      set_league_name(from.league_name());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pixel_x()) {
      set_pixel_x(from.pixel_x());
    }
    if (from.has_pixel_y()) {
      set_pixel_y(from.pixel_y());
    }
    if (from.has_toward()) {
      set_toward(from.toward());
    }
    if (from.has_blood()) {
      set_blood(from.blood());
    }
    if (from.has_max_blood()) {
      set_max_blood(from.max_blood());
    }
    if (from.has_magic()) {
      set_magic(from.magic());
    }
    if (from.has_max_magic()) {
      set_max_magic(from.max_magic());
    }
    if (from.has_pk_state()) {
      set_pk_state(from.pk_state());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_experience()) {
      set_experience(from.experience());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_vip_type()) {
      set_vip_type(from.vip_type());
    }
    if (from.has_force()) {
      set_force(from.force());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_camp_id()) {
      set_camp_id(from.camp_id());
    }
    if (from.has_permission()) {
      set_permission(from.permission());
    }
    if (from.has_space_id()) {
      set_space_id(from.space_id());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_server_flag()) {
      set_server_flag(from.server_flag());
    }
    if (from.has_name_color()) {
      set_name_color(from.name_color());
    }
    if (from.has_league_pos()) {
      set_league_pos(from.league_pos());
    }
    if (from.has_mw_id()) {
      set_mw_id(from.mw_id());
    }
    if (from.has_mw_rank_level()) {
      set_mw_rank_level(from.mw_rank_level());
    }
    if (from.has_server_prev()) {
      set_server_prev(from.server_prev());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_angry()) {
      set_angry(from.angry());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_full_name()) {
      set_full_name(from.full_name());
    }
    if (from.has_jump_value()) {
      set_jump_value(from.jump_value());
    }
    if (from.has_shape_info()) {
      mutable_shape_info()->::ProtoRoleShape::MergeFrom(from.shape_info());
    }
    if (from.has_main_act()) {
      set_main_act(from.main_act());
    }
    if (from.has_partner_id()) {
      set_partner_id(from.partner_id());
    }
    if (from.has_partner_name()) {
      set_partner_name(from.partner_name());
    }
    if (from.has_wedding_id()) {
      set_wedding_id(from.wedding_id());
    }
    if (from.has_wedding_type()) {
      set_wedding_type(from.wedding_type());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_open_days()) {
      set_open_days(from.open_days());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto80400101::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto80400101::CopyFrom(const Proto80400101& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto80400101::IsInitialized() const {
  
  return true;
}

void Proto80400101::Swap(Proto80400101* other) {
  if (other != this) {
    std::swap(chat_scene_, other->chat_scene_);
    std::swap(role_id_, other->role_id_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(sex_, other->sex_);
    std::swap(league_id_, other->league_id_);
    std::swap(league_name_, other->league_name_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(pixel_x_, other->pixel_x_);
    std::swap(pixel_y_, other->pixel_y_);
    std::swap(toward_, other->toward_);
    std::swap(blood_, other->blood_);
    std::swap(max_blood_, other->max_blood_);
    std::swap(magic_, other->magic_);
    std::swap(max_magic_, other->max_magic_);
    std::swap(pk_state_, other->pk_state_);
    std::swap(experience_, other->experience_);
    std::swap(speed_, other->speed_);
    std::swap(vip_type_, other->vip_type_);
    std::swap(force_, other->force_);
    std::swap(team_id_, other->team_id_);
    std::swap(camp_id_, other->camp_id_);
    std::swap(permission_, other->permission_);
    std::swap(space_id_, other->space_id_);
    std::swap(server_flag_, other->server_flag_);
    std::swap(name_color_, other->name_color_);
    std::swap(league_pos_, other->league_pos_);
    std::swap(mw_id_, other->mw_id_);
    std::swap(mw_rank_level_, other->mw_rank_level_);
    std::swap(server_prev_, other->server_prev_);
    std::swap(server_id_, other->server_id_);
    std::swap(angry_, other->angry_);
    std::swap(full_name_, other->full_name_);
    std::swap(jump_value_, other->jump_value_);
    std::swap(shape_info_, other->shape_info_);
    std::swap(main_act_, other->main_act_);
    std::swap(partner_id_, other->partner_id_);
    std::swap(partner_name_, other->partner_name_);
    std::swap(wedding_id_, other->wedding_id_);
    std::swap(wedding_type_, other->wedding_type_);
    std::swap(open_days_, other->open_days_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto80400101::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto80400101_descriptor_;
  metadata.reflection = Proto80400101_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto10400001::kRoleIdFieldNumber;
const int Proto10400001::kAccountFieldNumber;
const int Proto10400001::kSessionFieldNumber;
#endif  // !_MSC_VER

Proto10400001::Proto10400001()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto10400001::InitAsDefaultInstance() {
}

Proto10400001::Proto10400001(const Proto10400001& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto10400001::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  session_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto10400001::~Proto10400001() {
  SharedDtor();
}

void Proto10400001::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (session_ != &::google::protobuf::internal::kEmptyString) {
    delete session_;
  }
  if (this != default_instance_) {
  }
}

void Proto10400001::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto10400001::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto10400001_descriptor_;
}

const Proto10400001& Proto10400001::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient001_2eproto();  return *default_instance_;
}

Proto10400001* Proto10400001::default_instance_ = NULL;

Proto10400001* Proto10400001::New() const {
  return new Proto10400001;
}

void Proto10400001::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_LONGLONG(0);
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_session()) {
      if (session_ != &::google::protobuf::internal::kEmptyString) {
        session_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto10400001::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }
      
      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_session;
        break;
      }
      
      // optional string session = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session().data(), this->session().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto10400001::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_id(), output);
  }
  
  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }
  
  // optional string session = 3;
  if (has_session()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session().data(), this->session().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->session(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto10400001::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_id(), target);
  }
  
  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }
  
  // optional string session = 3;
  if (has_session()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session().data(), this->session().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->session(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto10400001::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }
    
    // optional string session = 3;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto10400001::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto10400001* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto10400001*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto10400001::MergeFrom(const Proto10400001& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_session()) {
      set_session(from.session());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto10400001::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto10400001::CopyFrom(const Proto10400001& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto10400001::IsInitialized() const {
  
  return true;
}

void Proto10400001::Swap(Proto10400001* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(account_, other->account_);
    std::swap(session_, other->session_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto10400001::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto10400001_descriptor_;
  metadata.reflection = Proto10400001_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto80400102::kRoleIdFieldNumber;
const int Proto80400102::kNameFieldNumber;
const int Proto80400102::kLevelFieldNumber;
const int Proto80400102::kSexFieldNumber;
const int Proto80400102::kSceneIdFieldNumber;
const int Proto80400102::kPixelXFieldNumber;
const int Proto80400102::kPixelYFieldNumber;
const int Proto80400102::kTowardFieldNumber;
const int Proto80400102::kBloodFieldNumber;
const int Proto80400102::kMaxBloodFieldNumber;
const int Proto80400102::kMagicFieldNumber;
const int Proto80400102::kMaxMagicFieldNumber;
const int Proto80400102::kPkStateFieldNumber;
const int Proto80400102::kSpeedFieldNumber;
const int Proto80400102::kFightStateFieldNumber;
const int Proto80400102::kMountSortFieldNumber;
const int Proto80400102::kVipTypeFieldNumber;
const int Proto80400102::kForceFieldNumber;
const int Proto80400102::kCampIdFieldNumber;
const int Proto80400102::kLeagueIdFieldNumber;
const int Proto80400102::kIsCopyFieldNumber;
const int Proto80400102::kBeastIdFieldNumber;
const int Proto80400102::kLeagueNameFieldNumber;
const int Proto80400102::kSpaceIdFieldNumber;
const int Proto80400102::kNameColorFieldNumber;
const int Proto80400102::kGatherStateFieldNumber;
const int Proto80400102::kMountLvlFieldNumber;
const int Proto80400102::kMwIdFieldNumber;
const int Proto80400102::kMwRankLevelFieldNumber;
const int Proto80400102::kServerIdFieldNumber;
const int Proto80400102::kServerPrevFieldNumber;
const int Proto80400102::kLeaguePosFieldNumber;
const int Proto80400102::kFullNameFieldNumber;
const int Proto80400102::kShapeInfoFieldNumber;
const int Proto80400102::kHotspringStatusFieldNumber;
const int Proto80400102::kPartnerIdFieldNumber;
const int Proto80400102::kPartnerNameFieldNumber;
const int Proto80400102::kWeddingIdFieldNumber;
const int Proto80400102::kWeddingTypeFieldNumber;
#endif  // !_MSC_VER

Proto80400102::Proto80400102()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto80400102::InitAsDefaultInstance() {
  shape_info_ = const_cast< ::ProtoRoleShape*>(&::ProtoRoleShape::default_instance());
}

Proto80400102::Proto80400102(const Proto80400102& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto80400102::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  sex_ = 0;
  scene_id_ = 0;
  pixel_x_ = 0;
  pixel_y_ = 0;
  toward_ = 0;
  blood_ = 0;
  max_blood_ = 0;
  magic_ = 0;
  max_magic_ = 0;
  pk_state_ = 0;
  speed_ = 0;
  fight_state_ = 0;
  mount_sort_ = 0;
  vip_type_ = 0;
  force_ = 0;
  camp_id_ = 0;
  league_id_ = GOOGLE_LONGLONG(0);
  is_copy_ = 0;
  beast_id_ = GOOGLE_LONGLONG(0);
  league_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  space_id_ = 0;
  name_color_ = 0;
  gather_state_ = 0;
  mount_lvl_ = 0;
  mw_id_ = 0;
  mw_rank_level_ = 0;
  server_id_ = 0;
  server_prev_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  league_pos_ = 0;
  full_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  shape_info_ = NULL;
  hotspring_status_ = 0;
  partner_id_ = GOOGLE_LONGLONG(0);
  partner_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wedding_id_ = GOOGLE_LONGLONG(0);
  wedding_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto80400102::~Proto80400102() {
  SharedDtor();
}

void Proto80400102::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (league_name_ != &::google::protobuf::internal::kEmptyString) {
    delete league_name_;
  }
  if (server_prev_ != &::google::protobuf::internal::kEmptyString) {
    delete server_prev_;
  }
  if (full_name_ != &::google::protobuf::internal::kEmptyString) {
    delete full_name_;
  }
  if (partner_name_ != &::google::protobuf::internal::kEmptyString) {
    delete partner_name_;
  }
  if (this != default_instance_) {
    delete shape_info_;
  }
}

void Proto80400102::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto80400102::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto80400102_descriptor_;
}

const Proto80400102& Proto80400102::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient001_2eproto();  return *default_instance_;
}

Proto80400102* Proto80400102::default_instance_ = NULL;

Proto80400102* Proto80400102::New() const {
  return new Proto80400102;
}

void Proto80400102::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0;
    sex_ = 0;
    scene_id_ = 0;
    pixel_x_ = 0;
    pixel_y_ = 0;
    toward_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    blood_ = 0;
    max_blood_ = 0;
    magic_ = 0;
    max_magic_ = 0;
    pk_state_ = 0;
    speed_ = 0;
    fight_state_ = 0;
    mount_sort_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    vip_type_ = 0;
    force_ = 0;
    camp_id_ = 0;
    league_id_ = GOOGLE_LONGLONG(0);
    is_copy_ = 0;
    beast_id_ = GOOGLE_LONGLONG(0);
    if (has_league_name()) {
      if (league_name_ != &::google::protobuf::internal::kEmptyString) {
        league_name_->clear();
      }
    }
    space_id_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    name_color_ = 0;
    gather_state_ = 0;
    mount_lvl_ = 0;
    mw_id_ = 0;
    mw_rank_level_ = 0;
    server_id_ = 0;
    if (has_server_prev()) {
      if (server_prev_ != &::google::protobuf::internal::kEmptyString) {
        server_prev_->clear();
      }
    }
    league_pos_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_full_name()) {
      if (full_name_ != &::google::protobuf::internal::kEmptyString) {
        full_name_->clear();
      }
    }
    if (has_shape_info()) {
      if (shape_info_ != NULL) shape_info_->::ProtoRoleShape::Clear();
    }
    hotspring_status_ = 0;
    partner_id_ = GOOGLE_LONGLONG(0);
    if (has_partner_name()) {
      if (partner_name_ != &::google::protobuf::internal::kEmptyString) {
        partner_name_->clear();
      }
    }
    wedding_id_ = GOOGLE_LONGLONG(0);
    wedding_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto80400102::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }
      
      // optional int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sex;
        break;
      }
      
      // optional int32 sex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_scene_id;
        break;
      }
      
      // optional int32 scene_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_pixel_x;
        break;
      }
      
      // optional int32 pixel_x = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pixel_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pixel_x_)));
          set_has_pixel_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_pixel_y;
        break;
      }
      
      // optional int32 pixel_y = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pixel_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pixel_y_)));
          set_has_pixel_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_toward;
        break;
      }
      
      // optional int32 toward = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_toward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &toward_)));
          set_has_toward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_blood;
        break;
      }
      
      // optional int32 blood = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blood_)));
          set_has_blood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_max_blood;
        break;
      }
      
      // optional int32 max_blood = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_blood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_blood_)));
          set_has_max_blood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_magic;
        break;
      }
      
      // optional int32 magic = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magic_)));
          set_has_magic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_max_magic;
        break;
      }
      
      // optional int32 max_magic = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_magic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_magic_)));
          set_has_max_magic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_pk_state;
        break;
      }
      
      // optional int32 pk_state = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pk_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pk_state_)));
          set_has_pk_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_speed;
        break;
      }
      
      // optional int32 speed = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_fight_state;
        break;
      }
      
      // optional int32 fight_state = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_state_)));
          set_has_fight_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_mount_sort;
        break;
      }
      
      // optional int32 mount_sort = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mount_sort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mount_sort_)));
          set_has_mount_sort();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_vip_type;
        break;
      }
      
      // optional int32 vip_type = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_type_)));
          set_has_vip_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_force;
        break;
      }
      
      // optional int32 force = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &force_)));
          set_has_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_camp_id;
        break;
      }
      
      // optional int32 camp_id = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_camp_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_id_)));
          set_has_camp_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_league_id;
        break;
      }
      
      // optional int64 league_id = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_league_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &league_id_)));
          set_has_league_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_is_copy;
        break;
      }
      
      // optional int32 is_copy = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_copy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_copy_)));
          set_has_is_copy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_beast_id;
        break;
      }
      
      // optional int64 beast_id = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beast_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &beast_id_)));
          set_has_beast_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_league_name;
        break;
      }
      
      // optional string league_name = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_league_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_league_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->league_name().data(), this->league_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_space_id;
        break;
      }
      
      // optional int32 space_id = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_space_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &space_id_)));
          set_has_space_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_name_color;
        break;
      }
      
      // optional int32 name_color = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_name_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &name_color_)));
          set_has_name_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_gather_state;
        break;
      }
      
      // optional int32 gather_state = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gather_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gather_state_)));
          set_has_gather_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_mount_lvl;
        break;
      }
      
      // optional int32 mount_lvl = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mount_lvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mount_lvl_)));
          set_has_mount_lvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_mw_id;
        break;
      }
      
      // optional int32 mw_id = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mw_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mw_id_)));
          set_has_mw_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_mw_rank_level;
        break;
      }
      
      // optional int32 mw_rank_level = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mw_rank_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mw_rank_level_)));
          set_has_mw_rank_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_server_id;
        break;
      }
      
      // optional int32 server_id = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_server_prev;
        break;
      }
      
      // optional string server_prev = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_prev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_prev()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_prev().data(), this->server_prev().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_league_pos;
        break;
      }
      
      // optional int32 league_pos = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_league_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &league_pos_)));
          set_has_league_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_full_name;
        break;
      }
      
      // optional string full_name = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_full_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_full_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->full_name().data(), this->full_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_shape_info;
        break;
      }
      
      // optional .ProtoRoleShape shape_info = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shape_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_hotspring_status;
        break;
      }
      
      // optional int32 hotspring_status = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hotspring_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hotspring_status_)));
          set_has_hotspring_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_partner_id;
        break;
      }
      
      // optional int64 partner_id = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &partner_id_)));
          set_has_partner_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_partner_name;
        break;
      }
      
      // optional string partner_name = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partner_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partner_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->partner_name().data(), this->partner_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_wedding_id;
        break;
      }
      
      // optional int64 wedding_id = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wedding_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &wedding_id_)));
          set_has_wedding_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_wedding_type;
        break;
      }
      
      // optional int32 wedding_type = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wedding_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wedding_type_)));
          set_has_wedding_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto80400102::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_id(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }
  
  // optional int32 sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sex(), output);
  }
  
  // optional int32 scene_id = 5;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->scene_id(), output);
  }
  
  // optional int32 pixel_x = 6;
  if (has_pixel_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->pixel_x(), output);
  }
  
  // optional int32 pixel_y = 7;
  if (has_pixel_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->pixel_y(), output);
  }
  
  // optional int32 toward = 8;
  if (has_toward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->toward(), output);
  }
  
  // optional int32 blood = 9;
  if (has_blood()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->blood(), output);
  }
  
  // optional int32 max_blood = 10;
  if (has_max_blood()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->max_blood(), output);
  }
  
  // optional int32 magic = 11;
  if (has_magic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->magic(), output);
  }
  
  // optional int32 max_magic = 12;
  if (has_max_magic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->max_magic(), output);
  }
  
  // optional int32 pk_state = 13;
  if (has_pk_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->pk_state(), output);
  }
  
  // optional int32 speed = 14;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->speed(), output);
  }
  
  // optional int32 fight_state = 15;
  if (has_fight_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->fight_state(), output);
  }
  
  // optional int32 mount_sort = 16;
  if (has_mount_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->mount_sort(), output);
  }
  
  // optional int32 vip_type = 17;
  if (has_vip_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->vip_type(), output);
  }
  
  // optional int32 force = 18;
  if (has_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->force(), output);
  }
  
  // optional int32 camp_id = 19;
  if (has_camp_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->camp_id(), output);
  }
  
  // optional int64 league_id = 20;
  if (has_league_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->league_id(), output);
  }
  
  // optional int32 is_copy = 21;
  if (has_is_copy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->is_copy(), output);
  }
  
  // optional int64 beast_id = 22;
  if (has_beast_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->beast_id(), output);
  }
  
  // optional string league_name = 23;
  if (has_league_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->league_name().data(), this->league_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->league_name(), output);
  }
  
  // optional int32 space_id = 24;
  if (has_space_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->space_id(), output);
  }
  
  // optional int32 name_color = 25;
  if (has_name_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->name_color(), output);
  }
  
  // optional int32 gather_state = 26;
  if (has_gather_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->gather_state(), output);
  }
  
  // optional int32 mount_lvl = 27;
  if (has_mount_lvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->mount_lvl(), output);
  }
  
  // optional int32 mw_id = 28;
  if (has_mw_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->mw_id(), output);
  }
  
  // optional int32 mw_rank_level = 29;
  if (has_mw_rank_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->mw_rank_level(), output);
  }
  
  // optional int32 server_id = 30;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->server_id(), output);
  }
  
  // optional string server_prev = 31;
  if (has_server_prev()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_prev().data(), this->server_prev().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      31, this->server_prev(), output);
  }
  
  // optional int32 league_pos = 32;
  if (has_league_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->league_pos(), output);
  }
  
  // optional string full_name = 33;
  if (has_full_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->full_name().data(), this->full_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      33, this->full_name(), output);
  }
  
  // optional .ProtoRoleShape shape_info = 34;
  if (has_shape_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->shape_info(), output);
  }
  
  // optional int32 hotspring_status = 35;
  if (has_hotspring_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->hotspring_status(), output);
  }
  
  // optional int64 partner_id = 36;
  if (has_partner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(36, this->partner_id(), output);
  }
  
  // optional string partner_name = 37;
  if (has_partner_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->partner_name().data(), this->partner_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      37, this->partner_name(), output);
  }
  
  // optional int64 wedding_id = 38;
  if (has_wedding_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(38, this->wedding_id(), output);
  }
  
  // optional int32 wedding_type = 39;
  if (has_wedding_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->wedding_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto80400102::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_id(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }
  
  // optional int32 sex = 4;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sex(), target);
  }
  
  // optional int32 scene_id = 5;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->scene_id(), target);
  }
  
  // optional int32 pixel_x = 6;
  if (has_pixel_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->pixel_x(), target);
  }
  
  // optional int32 pixel_y = 7;
  if (has_pixel_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->pixel_y(), target);
  }
  
  // optional int32 toward = 8;
  if (has_toward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->toward(), target);
  }
  
  // optional int32 blood = 9;
  if (has_blood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->blood(), target);
  }
  
  // optional int32 max_blood = 10;
  if (has_max_blood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->max_blood(), target);
  }
  
  // optional int32 magic = 11;
  if (has_magic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->magic(), target);
  }
  
  // optional int32 max_magic = 12;
  if (has_max_magic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->max_magic(), target);
  }
  
  // optional int32 pk_state = 13;
  if (has_pk_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->pk_state(), target);
  }
  
  // optional int32 speed = 14;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->speed(), target);
  }
  
  // optional int32 fight_state = 15;
  if (has_fight_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->fight_state(), target);
  }
  
  // optional int32 mount_sort = 16;
  if (has_mount_sort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->mount_sort(), target);
  }
  
  // optional int32 vip_type = 17;
  if (has_vip_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->vip_type(), target);
  }
  
  // optional int32 force = 18;
  if (has_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->force(), target);
  }
  
  // optional int32 camp_id = 19;
  if (has_camp_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->camp_id(), target);
  }
  
  // optional int64 league_id = 20;
  if (has_league_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->league_id(), target);
  }
  
  // optional int32 is_copy = 21;
  if (has_is_copy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->is_copy(), target);
  }
  
  // optional int64 beast_id = 22;
  if (has_beast_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->beast_id(), target);
  }
  
  // optional string league_name = 23;
  if (has_league_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->league_name().data(), this->league_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->league_name(), target);
  }
  
  // optional int32 space_id = 24;
  if (has_space_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->space_id(), target);
  }
  
  // optional int32 name_color = 25;
  if (has_name_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->name_color(), target);
  }
  
  // optional int32 gather_state = 26;
  if (has_gather_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->gather_state(), target);
  }
  
  // optional int32 mount_lvl = 27;
  if (has_mount_lvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->mount_lvl(), target);
  }
  
  // optional int32 mw_id = 28;
  if (has_mw_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->mw_id(), target);
  }
  
  // optional int32 mw_rank_level = 29;
  if (has_mw_rank_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->mw_rank_level(), target);
  }
  
  // optional int32 server_id = 30;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->server_id(), target);
  }
  
  // optional string server_prev = 31;
  if (has_server_prev()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_prev().data(), this->server_prev().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->server_prev(), target);
  }
  
  // optional int32 league_pos = 32;
  if (has_league_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->league_pos(), target);
  }
  
  // optional string full_name = 33;
  if (has_full_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->full_name().data(), this->full_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->full_name(), target);
  }
  
  // optional .ProtoRoleShape shape_info = 34;
  if (has_shape_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->shape_info(), target);
  }
  
  // optional int32 hotspring_status = 35;
  if (has_hotspring_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->hotspring_status(), target);
  }
  
  // optional int64 partner_id = 36;
  if (has_partner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(36, this->partner_id(), target);
  }
  
  // optional string partner_name = 37;
  if (has_partner_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->partner_name().data(), this->partner_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        37, this->partner_name(), target);
  }
  
  // optional int64 wedding_id = 38;
  if (has_wedding_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(38, this->wedding_id(), target);
  }
  
  // optional int32 wedding_type = 39;
  if (has_wedding_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->wedding_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto80400102::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }
    
    // optional int32 scene_id = 5;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_id());
    }
    
    // optional int32 pixel_x = 6;
    if (has_pixel_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pixel_x());
    }
    
    // optional int32 pixel_y = 7;
    if (has_pixel_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pixel_y());
    }
    
    // optional int32 toward = 8;
    if (has_toward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->toward());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 blood = 9;
    if (has_blood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blood());
    }
    
    // optional int32 max_blood = 10;
    if (has_max_blood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_blood());
    }
    
    // optional int32 magic = 11;
    if (has_magic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magic());
    }
    
    // optional int32 max_magic = 12;
    if (has_max_magic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_magic());
    }
    
    // optional int32 pk_state = 13;
    if (has_pk_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pk_state());
    }
    
    // optional int32 speed = 14;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speed());
    }
    
    // optional int32 fight_state = 15;
    if (has_fight_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight_state());
    }
    
    // optional int32 mount_sort = 16;
    if (has_mount_sort()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mount_sort());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 vip_type = 17;
    if (has_vip_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_type());
    }
    
    // optional int32 force = 18;
    if (has_force()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->force());
    }
    
    // optional int32 camp_id = 19;
    if (has_camp_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp_id());
    }
    
    // optional int64 league_id = 20;
    if (has_league_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->league_id());
    }
    
    // optional int32 is_copy = 21;
    if (has_is_copy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_copy());
    }
    
    // optional int64 beast_id = 22;
    if (has_beast_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->beast_id());
    }
    
    // optional string league_name = 23;
    if (has_league_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->league_name());
    }
    
    // optional int32 space_id = 24;
    if (has_space_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->space_id());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 name_color = 25;
    if (has_name_color()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->name_color());
    }
    
    // optional int32 gather_state = 26;
    if (has_gather_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gather_state());
    }
    
    // optional int32 mount_lvl = 27;
    if (has_mount_lvl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mount_lvl());
    }
    
    // optional int32 mw_id = 28;
    if (has_mw_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mw_id());
    }
    
    // optional int32 mw_rank_level = 29;
    if (has_mw_rank_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mw_rank_level());
    }
    
    // optional int32 server_id = 30;
    if (has_server_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }
    
    // optional string server_prev = 31;
    if (has_server_prev()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_prev());
    }
    
    // optional int32 league_pos = 32;
    if (has_league_pos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->league_pos());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional string full_name = 33;
    if (has_full_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->full_name());
    }
    
    // optional .ProtoRoleShape shape_info = 34;
    if (has_shape_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shape_info());
    }
    
    // optional int32 hotspring_status = 35;
    if (has_hotspring_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hotspring_status());
    }
    
    // optional int64 partner_id = 36;
    if (has_partner_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->partner_id());
    }
    
    // optional string partner_name = 37;
    if (has_partner_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->partner_name());
    }
    
    // optional int64 wedding_id = 38;
    if (has_wedding_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->wedding_id());
    }
    
    // optional int32 wedding_type = 39;
    if (has_wedding_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wedding_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto80400102::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto80400102* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto80400102*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto80400102::MergeFrom(const Proto80400102& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_pixel_x()) {
      set_pixel_x(from.pixel_x());
    }
    if (from.has_pixel_y()) {
      set_pixel_y(from.pixel_y());
    }
    if (from.has_toward()) {
      set_toward(from.toward());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_blood()) {
      set_blood(from.blood());
    }
    if (from.has_max_blood()) {
      set_max_blood(from.max_blood());
    }
    if (from.has_magic()) {
      set_magic(from.magic());
    }
    if (from.has_max_magic()) {
      set_max_magic(from.max_magic());
    }
    if (from.has_pk_state()) {
      set_pk_state(from.pk_state());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_fight_state()) {
      set_fight_state(from.fight_state());
    }
    if (from.has_mount_sort()) {
      set_mount_sort(from.mount_sort());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_vip_type()) {
      set_vip_type(from.vip_type());
    }
    if (from.has_force()) {
      set_force(from.force());
    }
    if (from.has_camp_id()) {
      set_camp_id(from.camp_id());
    }
    if (from.has_league_id()) {
      set_league_id(from.league_id());
    }
    if (from.has_is_copy()) {
      set_is_copy(from.is_copy());
    }
    if (from.has_beast_id()) {
      set_beast_id(from.beast_id());
    }
    if (from.has_league_name()) {
      set_league_name(from.league_name());
    }
    if (from.has_space_id()) {
      set_space_id(from.space_id());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_name_color()) {
      set_name_color(from.name_color());
    }
    if (from.has_gather_state()) {
      set_gather_state(from.gather_state());
    }
    if (from.has_mount_lvl()) {
      set_mount_lvl(from.mount_lvl());
    }
    if (from.has_mw_id()) {
      set_mw_id(from.mw_id());
    }
    if (from.has_mw_rank_level()) {
      set_mw_rank_level(from.mw_rank_level());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_server_prev()) {
      set_server_prev(from.server_prev());
    }
    if (from.has_league_pos()) {
      set_league_pos(from.league_pos());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_full_name()) {
      set_full_name(from.full_name());
    }
    if (from.has_shape_info()) {
      mutable_shape_info()->::ProtoRoleShape::MergeFrom(from.shape_info());
    }
    if (from.has_hotspring_status()) {
      set_hotspring_status(from.hotspring_status());
    }
    if (from.has_partner_id()) {
      set_partner_id(from.partner_id());
    }
    if (from.has_partner_name()) {
      set_partner_name(from.partner_name());
    }
    if (from.has_wedding_id()) {
      set_wedding_id(from.wedding_id());
    }
    if (from.has_wedding_type()) {
      set_wedding_type(from.wedding_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto80400102::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto80400102::CopyFrom(const Proto80400102& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto80400102::IsInitialized() const {
  
  return true;
}

void Proto80400102::Swap(Proto80400102* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(sex_, other->sex_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(pixel_x_, other->pixel_x_);
    std::swap(pixel_y_, other->pixel_y_);
    std::swap(toward_, other->toward_);
    std::swap(blood_, other->blood_);
    std::swap(max_blood_, other->max_blood_);
    std::swap(magic_, other->magic_);
    std::swap(max_magic_, other->max_magic_);
    std::swap(pk_state_, other->pk_state_);
    std::swap(speed_, other->speed_);
    std::swap(fight_state_, other->fight_state_);
    std::swap(mount_sort_, other->mount_sort_);
    std::swap(vip_type_, other->vip_type_);
    std::swap(force_, other->force_);
    std::swap(camp_id_, other->camp_id_);
    std::swap(league_id_, other->league_id_);
    std::swap(is_copy_, other->is_copy_);
    std::swap(beast_id_, other->beast_id_);
    std::swap(league_name_, other->league_name_);
    std::swap(space_id_, other->space_id_);
    std::swap(name_color_, other->name_color_);
    std::swap(gather_state_, other->gather_state_);
    std::swap(mount_lvl_, other->mount_lvl_);
    std::swap(mw_id_, other->mw_id_);
    std::swap(mw_rank_level_, other->mw_rank_level_);
    std::swap(server_id_, other->server_id_);
    std::swap(server_prev_, other->server_prev_);
    std::swap(league_pos_, other->league_pos_);
    std::swap(full_name_, other->full_name_);
    std::swap(shape_info_, other->shape_info_);
    std::swap(hotspring_status_, other->hotspring_status_);
    std::swap(partner_id_, other->partner_id_);
    std::swap(partner_name_, other->partner_name_);
    std::swap(wedding_id_, other->wedding_id_);
    std::swap(wedding_type_, other->wedding_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto80400102::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto80400102_descriptor_;
  metadata.reflection = Proto80400102_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto80400104::kMoverIdFieldNumber;
#endif  // !_MSC_VER

Proto80400104::Proto80400104()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto80400104::InitAsDefaultInstance() {
}

Proto80400104::Proto80400104(const Proto80400104& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto80400104::SharedCtor() {
  _cached_size_ = 0;
  mover_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto80400104::~Proto80400104() {
  SharedDtor();
}

void Proto80400104::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto80400104::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto80400104::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto80400104_descriptor_;
}

const Proto80400104& Proto80400104::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient001_2eproto();  return *default_instance_;
}

Proto80400104* Proto80400104::default_instance_ = NULL;

Proto80400104* Proto80400104::New() const {
  return new Proto80400104;
}

void Proto80400104::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mover_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto80400104::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 mover_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mover_id_)));
          set_has_mover_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto80400104::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 mover_id = 1;
  if (has_mover_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->mover_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto80400104::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 mover_id = 1;
  if (has_mover_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->mover_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto80400104::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 mover_id = 1;
    if (has_mover_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mover_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto80400104::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto80400104* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto80400104*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto80400104::MergeFrom(const Proto80400104& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mover_id()) {
      set_mover_id(from.mover_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto80400104::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto80400104::CopyFrom(const Proto80400104& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto80400104::IsInitialized() const {
  
  return true;
}

void Proto80400104::Swap(Proto80400104* other) {
  if (other != this) {
    std::swap(mover_id_, other->mover_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto80400104::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto80400104_descriptor_;
  metadata.reflection = Proto80400104_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto10400109::kStepListFieldNumber;
const int Proto10400109::kTowardFieldNumber;
const int Proto10400109::kArriveTickFieldNumber;
const int Proto10400109::kSceneIdFieldNumber;
#endif  // !_MSC_VER

Proto10400109::Proto10400109()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto10400109::InitAsDefaultInstance() {
}

Proto10400109::Proto10400109(const Proto10400109& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto10400109::SharedCtor() {
  _cached_size_ = 0;
  toward_ = 0;
  arrive_tick_ = 0;
  scene_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto10400109::~Proto10400109() {
  SharedDtor();
}

void Proto10400109::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto10400109::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto10400109::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto10400109_descriptor_;
}

const Proto10400109& Proto10400109::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient001_2eproto();  return *default_instance_;
}

Proto10400109* Proto10400109::default_instance_ = NULL;

Proto10400109* Proto10400109::New() const {
  return new Proto10400109;
}

void Proto10400109::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    toward_ = 0;
    arrive_tick_ = 0;
    scene_id_ = 0;
  }
  step_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto10400109::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoCoord step_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_step_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_step_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_step_list;
        if (input->ExpectTag(16)) goto parse_toward;
        break;
      }
      
      // optional int32 toward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_toward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &toward_)));
          set_has_toward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_arrive_tick;
        break;
      }
      
      // optional int32 arrive_tick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arrive_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arrive_tick_)));
          set_has_arrive_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_scene_id;
        break;
      }
      
      // optional int32 scene_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto10400109::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoCoord step_list = 1;
  for (int i = 0; i < this->step_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->step_list(i), output);
  }
  
  // optional int32 toward = 2;
  if (has_toward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->toward(), output);
  }
  
  // optional int32 arrive_tick = 3;
  if (has_arrive_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->arrive_tick(), output);
  }
  
  // optional int32 scene_id = 4;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->scene_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto10400109::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoCoord step_list = 1;
  for (int i = 0; i < this->step_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->step_list(i), target);
  }
  
  // optional int32 toward = 2;
  if (has_toward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->toward(), target);
  }
  
  // optional int32 arrive_tick = 3;
  if (has_arrive_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->arrive_tick(), target);
  }
  
  // optional int32 scene_id = 4;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->scene_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto10400109::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 toward = 2;
    if (has_toward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->toward());
    }
    
    // optional int32 arrive_tick = 3;
    if (has_arrive_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arrive_tick());
    }
    
    // optional int32 scene_id = 4;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_id());
    }
    
  }
  // repeated .ProtoCoord step_list = 1;
  total_size += 1 * this->step_list_size();
  for (int i = 0; i < this->step_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->step_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto10400109::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto10400109* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto10400109*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto10400109::MergeFrom(const Proto10400109& from) {
  GOOGLE_CHECK_NE(&from, this);
  step_list_.MergeFrom(from.step_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_toward()) {
      set_toward(from.toward());
    }
    if (from.has_arrive_tick()) {
      set_arrive_tick(from.arrive_tick());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto10400109::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto10400109::CopyFrom(const Proto10400109& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto10400109::IsInitialized() const {
  
  return true;
}

void Proto10400109::Swap(Proto10400109* other) {
  if (other != this) {
    step_list_.Swap(&other->step_list_);
    std::swap(toward_, other->toward_);
    std::swap(arrive_tick_, other->arrive_tick_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto10400109::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto10400109_descriptor_;
  metadata.reflection = Proto10400109_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto80400105::kMoverIdFieldNumber;
const int Proto80400105::kStepListFieldNumber;
const int Proto80400105::kTowardFieldNumber;
const int Proto80400105::kArriveTickFieldNumber;
#endif  // !_MSC_VER

Proto80400105::Proto80400105()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto80400105::InitAsDefaultInstance() {
}

Proto80400105::Proto80400105(const Proto80400105& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto80400105::SharedCtor() {
  _cached_size_ = 0;
  mover_id_ = GOOGLE_LONGLONG(0);
  toward_ = 0;
  arrive_tick_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto80400105::~Proto80400105() {
  SharedDtor();
}

void Proto80400105::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto80400105::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto80400105::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto80400105_descriptor_;
}

const Proto80400105& Proto80400105::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient001_2eproto();  return *default_instance_;
}

Proto80400105* Proto80400105::default_instance_ = NULL;

Proto80400105* Proto80400105::New() const {
  return new Proto80400105;
}

void Proto80400105::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mover_id_ = GOOGLE_LONGLONG(0);
    toward_ = 0;
    arrive_tick_ = GOOGLE_LONGLONG(0);
  }
  step_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto80400105::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 mover_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mover_id_)));
          set_has_mover_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_step_list;
        break;
      }
      
      // repeated .ProtoCoord step_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_step_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_step_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_step_list;
        if (input->ExpectTag(24)) goto parse_toward;
        break;
      }
      
      // optional int32 toward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_toward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &toward_)));
          set_has_toward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_arrive_tick;
        break;
      }
      
      // optional int64 arrive_tick = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arrive_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &arrive_tick_)));
          set_has_arrive_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto80400105::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 mover_id = 1;
  if (has_mover_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->mover_id(), output);
  }
  
  // repeated .ProtoCoord step_list = 2;
  for (int i = 0; i < this->step_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->step_list(i), output);
  }
  
  // optional int32 toward = 3;
  if (has_toward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->toward(), output);
  }
  
  // optional int64 arrive_tick = 4;
  if (has_arrive_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->arrive_tick(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto80400105::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 mover_id = 1;
  if (has_mover_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->mover_id(), target);
  }
  
  // repeated .ProtoCoord step_list = 2;
  for (int i = 0; i < this->step_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->step_list(i), target);
  }
  
  // optional int32 toward = 3;
  if (has_toward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->toward(), target);
  }
  
  // optional int64 arrive_tick = 4;
  if (has_arrive_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->arrive_tick(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto80400105::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 mover_id = 1;
    if (has_mover_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mover_id());
    }
    
    // optional int32 toward = 3;
    if (has_toward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->toward());
    }
    
    // optional int64 arrive_tick = 4;
    if (has_arrive_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->arrive_tick());
    }
    
  }
  // repeated .ProtoCoord step_list = 2;
  total_size += 1 * this->step_list_size();
  for (int i = 0; i < this->step_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->step_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto80400105::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto80400105* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto80400105*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto80400105::MergeFrom(const Proto80400105& from) {
  GOOGLE_CHECK_NE(&from, this);
  step_list_.MergeFrom(from.step_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mover_id()) {
      set_mover_id(from.mover_id());
    }
    if (from.has_toward()) {
      set_toward(from.toward());
    }
    if (from.has_arrive_tick()) {
      set_arrive_tick(from.arrive_tick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto80400105::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto80400105::CopyFrom(const Proto80400105& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto80400105::IsInitialized() const {
  
  return true;
}

void Proto80400105::Swap(Proto80400105* other) {
  if (other != this) {
    std::swap(mover_id_, other->mover_id_);
    step_list_.Swap(&other->step_list_);
    std::swap(toward_, other->toward_);
    std::swap(arrive_tick_, other->arrive_tick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto80400105::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto80400105_descriptor_;
  metadata.reflection = Proto80400105_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto50600102::kTestFieldNumber;
#endif  // !_MSC_VER

Proto50600102::Proto50600102()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto50600102::InitAsDefaultInstance() {
}

Proto50600102::Proto50600102(const Proto50600102& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto50600102::SharedCtor() {
  _cached_size_ = 0;
  test_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto50600102::~Proto50600102() {
  SharedDtor();
}

void Proto50600102::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto50600102::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto50600102::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto50600102_descriptor_;
}

const Proto50600102& Proto50600102::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient001_2eproto();  return *default_instance_;
}

Proto50600102* Proto50600102::default_instance_ = NULL;

Proto50600102* Proto50600102::New() const {
  return new Proto50600102;
}

void Proto50600102::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    test_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto50600102::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 test = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &test_)));
          set_has_test();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto50600102::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 test = 1;
  if (has_test()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->test(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto50600102::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 test = 1;
  if (has_test()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->test(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto50600102::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 test = 1;
    if (has_test()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->test());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto50600102::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto50600102* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto50600102*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto50600102::MergeFrom(const Proto50600102& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test()) {
      set_test(from.test());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto50600102::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto50600102::CopyFrom(const Proto50600102& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto50600102::IsInitialized() const {
  
  return true;
}

void Proto50600102::Swap(Proto50600102* other) {
  if (other != this) {
    std::swap(test_, other->test_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto50600102::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto50600102_descriptor_;
  metadata.reflection = Proto50600102_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto10400110::kSceneIdFieldNumber;
#endif  // !_MSC_VER

Proto10400110::Proto10400110()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto10400110::InitAsDefaultInstance() {
}

Proto10400110::Proto10400110(const Proto10400110& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto10400110::SharedCtor() {
  _cached_size_ = 0;
  scene_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto10400110::~Proto10400110() {
  SharedDtor();
}

void Proto10400110::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto10400110::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto10400110::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto10400110_descriptor_;
}

const Proto10400110& Proto10400110::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient001_2eproto();  return *default_instance_;
}

Proto10400110* Proto10400110::default_instance_ = NULL;

Proto10400110* Proto10400110::New() const {
  return new Proto10400110;
}

void Proto10400110::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scene_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto10400110::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 scene_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto10400110::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 scene_id = 1;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->scene_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto10400110::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 scene_id = 1;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->scene_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto10400110::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 scene_id = 1;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto10400110::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto10400110* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto10400110*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto10400110::MergeFrom(const Proto10400110& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto10400110::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto10400110::CopyFrom(const Proto10400110& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto10400110::IsInitialized() const {
  
  return true;
}

void Proto10400110::Swap(Proto10400110* other) {
  if (other != this) {
    std::swap(scene_id_, other->scene_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto10400110::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto10400110_descriptor_;
  metadata.reflection = Proto10400110_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto11499999::kCmdNameFieldNumber;
const int Proto11499999::kParam1FieldNumber;
const int Proto11499999::kParam2FieldNumber;
const int Proto11499999::kParam3FieldNumber;
const int Proto11499999::kParam4FieldNumber;
const int Proto11499999::kParam5FieldNumber;
#endif  // !_MSC_VER

Proto11499999::Proto11499999()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto11499999::InitAsDefaultInstance() {
}

Proto11499999::Proto11499999(const Proto11499999& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto11499999::SharedCtor() {
  _cached_size_ = 0;
  cmd_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  param1_ = 0;
  param2_ = 0;
  param3_ = 0;
  param4_ = 0;
  param5_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto11499999::~Proto11499999() {
  SharedDtor();
}

void Proto11499999::SharedDtor() {
  if (cmd_name_ != &::google::protobuf::internal::kEmptyString) {
    delete cmd_name_;
  }
  if (this != default_instance_) {
  }
}

void Proto11499999::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto11499999::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto11499999_descriptor_;
}

const Proto11499999& Proto11499999::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient001_2eproto();  return *default_instance_;
}

Proto11499999* Proto11499999::default_instance_ = NULL;

Proto11499999* Proto11499999::New() const {
  return new Proto11499999;
}

void Proto11499999::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cmd_name()) {
      if (cmd_name_ != &::google::protobuf::internal::kEmptyString) {
        cmd_name_->clear();
      }
    }
    param1_ = 0;
    param2_ = 0;
    param3_ = 0;
    param4_ = 0;
    param5_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto11499999::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cmd_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cmd_name().data(), this->cmd_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_param1;
        break;
      }
      
      // optional int32 param1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param1_)));
          set_has_param1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_param2;
        break;
      }
      
      // optional int32 param2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param2_)));
          set_has_param2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_param3;
        break;
      }
      
      // optional int32 param3 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param3_)));
          set_has_param3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_param4;
        break;
      }
      
      // optional int32 param4 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param4_)));
          set_has_param4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_param5;
        break;
      }
      
      // optional int32 param5 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param5_)));
          set_has_param5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto11499999::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string cmd_name = 1;
  if (has_cmd_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmd_name().data(), this->cmd_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cmd_name(), output);
  }
  
  // optional int32 param1 = 2;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->param1(), output);
  }
  
  // optional int32 param2 = 3;
  if (has_param2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->param2(), output);
  }
  
  // optional int32 param3 = 4;
  if (has_param3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->param3(), output);
  }
  
  // optional int32 param4 = 5;
  if (has_param4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->param4(), output);
  }
  
  // optional int32 param5 = 6;
  if (has_param5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->param5(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto11499999::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string cmd_name = 1;
  if (has_cmd_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmd_name().data(), this->cmd_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cmd_name(), target);
  }
  
  // optional int32 param1 = 2;
  if (has_param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->param1(), target);
  }
  
  // optional int32 param2 = 3;
  if (has_param2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->param2(), target);
  }
  
  // optional int32 param3 = 4;
  if (has_param3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->param3(), target);
  }
  
  // optional int32 param4 = 5;
  if (has_param4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->param4(), target);
  }
  
  // optional int32 param5 = 6;
  if (has_param5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->param5(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto11499999::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string cmd_name = 1;
    if (has_cmd_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cmd_name());
    }
    
    // optional int32 param1 = 2;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param1());
    }
    
    // optional int32 param2 = 3;
    if (has_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param2());
    }
    
    // optional int32 param3 = 4;
    if (has_param3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param3());
    }
    
    // optional int32 param4 = 5;
    if (has_param4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param4());
    }
    
    // optional int32 param5 = 6;
    if (has_param5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param5());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto11499999::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto11499999* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto11499999*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto11499999::MergeFrom(const Proto11499999& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd_name()) {
      set_cmd_name(from.cmd_name());
    }
    if (from.has_param1()) {
      set_param1(from.param1());
    }
    if (from.has_param2()) {
      set_param2(from.param2());
    }
    if (from.has_param3()) {
      set_param3(from.param3());
    }
    if (from.has_param4()) {
      set_param4(from.param4());
    }
    if (from.has_param5()) {
      set_param5(from.param5());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto11499999::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto11499999::CopyFrom(const Proto11499999& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto11499999::IsInitialized() const {
  
  return true;
}

void Proto11499999::Swap(Proto11499999* other) {
  if (other != this) {
    std::swap(cmd_name_, other->cmd_name_);
    std::swap(param1_, other->param1_);
    std::swap(param2_, other->param2_);
    std::swap(param3_, other->param3_);
    std::swap(param4_, other->param4_);
    std::swap(param5_, other->param5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto11499999::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto11499999_descriptor_;
  metadata.reflection = Proto11499999_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto10200001::kRoleIdFieldNumber;
const int Proto10200001::kAccountFieldNumber;
const int Proto10200001::kSessionFieldNumber;
#endif  // !_MSC_VER

Proto10200001::Proto10200001()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto10200001::InitAsDefaultInstance() {
}

Proto10200001::Proto10200001(const Proto10200001& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto10200001::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  session_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto10200001::~Proto10200001() {
  SharedDtor();
}

void Proto10200001::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (session_ != &::google::protobuf::internal::kEmptyString) {
    delete session_;
  }
  if (this != default_instance_) {
  }
}

void Proto10200001::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto10200001::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto10200001_descriptor_;
}

const Proto10200001& Proto10200001::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient001_2eproto();  return *default_instance_;
}

Proto10200001* Proto10200001::default_instance_ = NULL;

Proto10200001* Proto10200001::New() const {
  return new Proto10200001;
}

void Proto10200001::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_LONGLONG(0);
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_session()) {
      if (session_ != &::google::protobuf::internal::kEmptyString) {
        session_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto10200001::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }
      
      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_session;
        break;
      }
      
      // optional string session = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session().data(), this->session().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto10200001::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_id(), output);
  }
  
  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }
  
  // optional string session = 3;
  if (has_session()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session().data(), this->session().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->session(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto10200001::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_id(), target);
  }
  
  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }
  
  // optional string session = 3;
  if (has_session()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session().data(), this->session().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->session(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto10200001::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }
    
    // optional string session = 3;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto10200001::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto10200001* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto10200001*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto10200001::MergeFrom(const Proto10200001& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_session()) {
      set_session(from.session());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto10200001::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto10200001::CopyFrom(const Proto10200001& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto10200001::IsInitialized() const {
  
  return true;
}

void Proto10200001::Swap(Proto10200001* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(account_, other->account_);
    std::swap(session_, other->session_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto10200001::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto10200001_descriptor_;
  metadata.reflection = Proto10200001_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto10200002::kChannelFieldNumber;
const int Proto10200002::kTypeFieldNumber;
const int Proto10200002::kVoiceLenFieldNumber;
const int Proto10200002::kWcontentFieldNumber;
const int Proto10200002::kVcontentFieldNumber;
#endif  // !_MSC_VER

Proto10200002::Proto10200002()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto10200002::InitAsDefaultInstance() {
}

Proto10200002::Proto10200002(const Proto10200002& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto10200002::SharedCtor() {
  _cached_size_ = 0;
  channel_ = 0;
  type_ = 0;
  voice_len_ = 0;
  wcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto10200002::~Proto10200002() {
  SharedDtor();
}

void Proto10200002::SharedDtor() {
  if (wcontent_ != &::google::protobuf::internal::kEmptyString) {
    delete wcontent_;
  }
  if (vcontent_ != &::google::protobuf::internal::kEmptyString) {
    delete vcontent_;
  }
  if (this != default_instance_) {
  }
}

void Proto10200002::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto10200002::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto10200002_descriptor_;
}

const Proto10200002& Proto10200002::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient001_2eproto();  return *default_instance_;
}

Proto10200002* Proto10200002::default_instance_ = NULL;

Proto10200002* Proto10200002::New() const {
  return new Proto10200002;
}

void Proto10200002::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channel_ = 0;
    type_ = 0;
    voice_len_ = 0;
    if (has_wcontent()) {
      if (wcontent_ != &::google::protobuf::internal::kEmptyString) {
        wcontent_->clear();
      }
    }
    if (has_vcontent()) {
      if (vcontent_ != &::google::protobuf::internal::kEmptyString) {
        vcontent_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto10200002::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 channel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_voice_len;
        break;
      }
      
      // optional int32 voice_len = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_voice_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &voice_len_)));
          set_has_voice_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_wcontent;
        break;
      }
      
      // optional string wcontent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wcontent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wcontent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->wcontent().data(), this->wcontent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_vcontent;
        break;
      }
      
      // optional bytes vcontent = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vcontent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vcontent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto10200002::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->channel(), output);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  // optional int32 voice_len = 3;
  if (has_voice_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->voice_len(), output);
  }
  
  // optional string wcontent = 4;
  if (has_wcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wcontent().data(), this->wcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->wcontent(), output);
  }
  
  // optional bytes vcontent = 5;
  if (has_vcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->vcontent(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto10200002::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 channel = 1;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->channel(), target);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  // optional int32 voice_len = 3;
  if (has_voice_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->voice_len(), target);
  }
  
  // optional string wcontent = 4;
  if (has_wcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wcontent().data(), this->wcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->wcontent(), target);
  }
  
  // optional bytes vcontent = 5;
  if (has_vcontent()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->vcontent(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto10200002::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }
    
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int32 voice_len = 3;
    if (has_voice_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->voice_len());
    }
    
    // optional string wcontent = 4;
    if (has_wcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wcontent());
    }
    
    // optional bytes vcontent = 5;
    if (has_vcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->vcontent());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto10200002::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto10200002* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto10200002*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto10200002::MergeFrom(const Proto10200002& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_voice_len()) {
      set_voice_len(from.voice_len());
    }
    if (from.has_wcontent()) {
      set_wcontent(from.wcontent());
    }
    if (from.has_vcontent()) {
      set_vcontent(from.vcontent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto10200002::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto10200002::CopyFrom(const Proto10200002& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto10200002::IsInitialized() const {
  
  return true;
}

void Proto10200002::Swap(Proto10200002* other) {
  if (other != this) {
    std::swap(channel_, other->channel_);
    std::swap(type_, other->type_);
    std::swap(voice_len_, other->voice_len_);
    std::swap(wcontent_, other->wcontent_);
    std::swap(vcontent_, other->vcontent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto10200002::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto10200002_descriptor_;
  metadata.reflection = Proto10200002_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto10200003::kDstRoleIdFieldNumber;
const int Proto10200003::kTypeFieldNumber;
const int Proto10200003::kVoiceLenFieldNumber;
const int Proto10200003::kWcontentFieldNumber;
const int Proto10200003::kVcontentFieldNumber;
#endif  // !_MSC_VER

Proto10200003::Proto10200003()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto10200003::InitAsDefaultInstance() {
}

Proto10200003::Proto10200003(const Proto10200003& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto10200003::SharedCtor() {
  _cached_size_ = 0;
  dst_role_id_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  voice_len_ = 0;
  wcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto10200003::~Proto10200003() {
  SharedDtor();
}

void Proto10200003::SharedDtor() {
  if (wcontent_ != &::google::protobuf::internal::kEmptyString) {
    delete wcontent_;
  }
  if (vcontent_ != &::google::protobuf::internal::kEmptyString) {
    delete vcontent_;
  }
  if (this != default_instance_) {
  }
}

void Proto10200003::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto10200003::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto10200003_descriptor_;
}

const Proto10200003& Proto10200003::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient001_2eproto();  return *default_instance_;
}

Proto10200003* Proto10200003::default_instance_ = NULL;

Proto10200003* Proto10200003::New() const {
  return new Proto10200003;
}

void Proto10200003::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dst_role_id_ = GOOGLE_LONGLONG(0);
    type_ = 0;
    voice_len_ = 0;
    if (has_wcontent()) {
      if (wcontent_ != &::google::protobuf::internal::kEmptyString) {
        wcontent_->clear();
      }
    }
    if (has_vcontent()) {
      if (vcontent_ != &::google::protobuf::internal::kEmptyString) {
        vcontent_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto10200003::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 dst_role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dst_role_id_)));
          set_has_dst_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_voice_len;
        break;
      }
      
      // optional int32 voice_len = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_voice_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &voice_len_)));
          set_has_voice_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_wcontent;
        break;
      }
      
      // optional string wcontent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wcontent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wcontent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->wcontent().data(), this->wcontent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_vcontent;
        break;
      }
      
      // optional bytes vcontent = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vcontent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vcontent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto10200003::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 dst_role_id = 1;
  if (has_dst_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->dst_role_id(), output);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  // optional int32 voice_len = 3;
  if (has_voice_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->voice_len(), output);
  }
  
  // optional string wcontent = 4;
  if (has_wcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wcontent().data(), this->wcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->wcontent(), output);
  }
  
  // optional bytes vcontent = 5;
  if (has_vcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->vcontent(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto10200003::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 dst_role_id = 1;
  if (has_dst_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->dst_role_id(), target);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  // optional int32 voice_len = 3;
  if (has_voice_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->voice_len(), target);
  }
  
  // optional string wcontent = 4;
  if (has_wcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wcontent().data(), this->wcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->wcontent(), target);
  }
  
  // optional bytes vcontent = 5;
  if (has_vcontent()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->vcontent(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto10200003::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 dst_role_id = 1;
    if (has_dst_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dst_role_id());
    }
    
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int32 voice_len = 3;
    if (has_voice_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->voice_len());
    }
    
    // optional string wcontent = 4;
    if (has_wcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wcontent());
    }
    
    // optional bytes vcontent = 5;
    if (has_vcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->vcontent());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto10200003::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto10200003* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto10200003*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto10200003::MergeFrom(const Proto10200003& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dst_role_id()) {
      set_dst_role_id(from.dst_role_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_voice_len()) {
      set_voice_len(from.voice_len());
    }
    if (from.has_wcontent()) {
      set_wcontent(from.wcontent());
    }
    if (from.has_vcontent()) {
      set_vcontent(from.vcontent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto10200003::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto10200003::CopyFrom(const Proto10200003& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto10200003::IsInitialized() const {
  
  return true;
}

void Proto10200003::Swap(Proto10200003* other) {
  if (other != this) {
    std::swap(dst_role_id_, other->dst_role_id_);
    std::swap(type_, other->type_);
    std::swap(voice_len_, other->voice_len_);
    std::swap(wcontent_, other->wcontent_);
    std::swap(vcontent_, other->vcontent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto10200003::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto10200003_descriptor_;
  metadata.reflection = Proto10200003_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto10200004::kTimeOffsetFieldNumber;
#endif  // !_MSC_VER

Proto10200004::Proto10200004()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto10200004::InitAsDefaultInstance() {
}

Proto10200004::Proto10200004(const Proto10200004& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto10200004::SharedCtor() {
  _cached_size_ = 0;
  time_offset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto10200004::~Proto10200004() {
  SharedDtor();
}

void Proto10200004::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto10200004::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto10200004::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto10200004_descriptor_;
}

const Proto10200004& Proto10200004::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient001_2eproto();  return *default_instance_;
}

Proto10200004* Proto10200004::default_instance_ = NULL;

Proto10200004* Proto10200004::New() const {
  return new Proto10200004;
}

void Proto10200004::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_offset_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto10200004::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 time_offset = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_offset_)));
          set_has_time_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto10200004::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 time_offset = 1;
  if (has_time_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->time_offset(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto10200004::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 time_offset = 1;
  if (has_time_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->time_offset(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto10200004::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 time_offset = 1;
    if (has_time_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_offset());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto10200004::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto10200004* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto10200004*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto10200004::MergeFrom(const Proto10200004& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_offset()) {
      set_time_offset(from.time_offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto10200004::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto10200004::CopyFrom(const Proto10200004& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto10200004::IsInitialized() const {
  
  return true;
}

void Proto10200004::Swap(Proto10200004* other) {
  if (other != this) {
    std::swap(time_offset_, other->time_offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto10200004::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto10200004_descriptor_;
  metadata.reflection = Proto10200004_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto11400002::kPackTypeFieldNumber;
const int Proto11400002::kGoodsIdFieldNumber;
const int Proto11400002::kIndexFieldNumber;
const int Proto11400002::kChannelFieldNumber;
const int Proto11400002::kTypeFieldNumber;
const int Proto11400002::kRoleIDFieldNumber;
const int Proto11400002::kPetIdFieldNumber;
#endif  // !_MSC_VER

Proto11400002::Proto11400002()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto11400002::InitAsDefaultInstance() {
}

Proto11400002::Proto11400002(const Proto11400002& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto11400002::SharedCtor() {
  _cached_size_ = 0;
  pack_type_ = 0;
  goods_id_ = 0;
  index_ = 0;
  channel_ = 0;
  type_ = 0;
  roleid_ = GOOGLE_LONGLONG(0);
  pet_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto11400002::~Proto11400002() {
  SharedDtor();
}

void Proto11400002::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto11400002::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto11400002::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto11400002_descriptor_;
}

const Proto11400002& Proto11400002::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient001_2eproto();  return *default_instance_;
}

Proto11400002* Proto11400002::default_instance_ = NULL;

Proto11400002* Proto11400002::New() const {
  return new Proto11400002;
}

void Proto11400002::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pack_type_ = 0;
    goods_id_ = 0;
    index_ = 0;
    channel_ = 0;
    type_ = 0;
    roleid_ = GOOGLE_LONGLONG(0);
    pet_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto11400002::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pack_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pack_type_)));
          set_has_pack_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_goods_id;
        break;
      }
      
      // optional int32 goods_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goods_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goods_id_)));
          set_has_goods_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }
      
      // optional int32 index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_channel;
        break;
      }
      
      // optional int32 channel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }
      
      // optional int32 type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_roleID;
        break;
      }
      
      // optional int64 roleID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_pet_id;
        break;
      }
      
      // optional int64 pet_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pet_id_)));
          set_has_pet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto11400002::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pack_type = 1;
  if (has_pack_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pack_type(), output);
  }
  
  // optional int32 goods_id = 2;
  if (has_goods_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->goods_id(), output);
  }
  
  // optional int32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index(), output);
  }
  
  // optional int32 channel = 4;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->channel(), output);
  }
  
  // optional int32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }
  
  // optional int64 roleID = 6;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->roleid(), output);
  }
  
  // optional int64 pet_id = 7;
  if (has_pet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->pet_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto11400002::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pack_type = 1;
  if (has_pack_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pack_type(), target);
  }
  
  // optional int32 goods_id = 2;
  if (has_goods_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->goods_id(), target);
  }
  
  // optional int32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index(), target);
  }
  
  // optional int32 channel = 4;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->channel(), target);
  }
  
  // optional int32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }
  
  // optional int64 roleID = 6;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->roleid(), target);
  }
  
  // optional int64 pet_id = 7;
  if (has_pet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->pet_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto11400002::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pack_type = 1;
    if (has_pack_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pack_type());
    }
    
    // optional int32 goods_id = 2;
    if (has_goods_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goods_id());
    }
    
    // optional int32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional int32 channel = 4;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }
    
    // optional int32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int64 roleID = 6;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleid());
    }
    
    // optional int64 pet_id = 7;
    if (has_pet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pet_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto11400002::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto11400002* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto11400002*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto11400002::MergeFrom(const Proto11400002& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pack_type()) {
      set_pack_type(from.pack_type());
    }
    if (from.has_goods_id()) {
      set_goods_id(from.goods_id());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_pet_id()) {
      set_pet_id(from.pet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto11400002::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto11400002::CopyFrom(const Proto11400002& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto11400002::IsInitialized() const {
  
  return true;
}

void Proto11400002::Swap(Proto11400002* other) {
  if (other != this) {
    std::swap(pack_type_, other->pack_type_);
    std::swap(goods_id_, other->goods_id_);
    std::swap(index_, other->index_);
    std::swap(channel_, other->channel_);
    std::swap(type_, other->type_);
    std::swap(roleid_, other->roleid_);
    std::swap(pet_id_, other->pet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto11400002::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto11400002_descriptor_;
  metadata.reflection = Proto11400002_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto11400001::kContentFieldNumber;
#endif  // !_MSC_VER

Proto11400001::Proto11400001()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto11400001::InitAsDefaultInstance() {
}

Proto11400001::Proto11400001(const Proto11400001& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto11400001::SharedCtor() {
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto11400001::~Proto11400001() {
  SharedDtor();
}

void Proto11400001::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void Proto11400001::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto11400001::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto11400001_descriptor_;
}

const Proto11400001& Proto11400001::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient001_2eproto();  return *default_instance_;
}

Proto11400001* Proto11400001::default_instance_ = NULL;

Proto11400001* Proto11400001::New() const {
  return new Proto11400001;
}

void Proto11400001::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto11400001::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto11400001::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->content(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto11400001::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto11400001::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto11400001::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto11400001* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto11400001*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto11400001::MergeFrom(const Proto11400001& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto11400001::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto11400001::CopyFrom(const Proto11400001& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto11400001::IsInitialized() const {
  
  return true;
}

void Proto11400001::Swap(Proto11400001* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto11400001::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto11400001_descriptor_;
  metadata.reflection = Proto11400001_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto50200004::kContentFieldNumber;
#endif  // !_MSC_VER

Proto50200004::Proto50200004()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto50200004::InitAsDefaultInstance() {
}

Proto50200004::Proto50200004(const Proto50200004& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto50200004::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto50200004::~Proto50200004() {
  SharedDtor();
}

void Proto50200004::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto50200004::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto50200004::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto50200004_descriptor_;
}

const Proto50200004& Proto50200004::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient001_2eproto();  return *default_instance_;
}

Proto50200004* Proto50200004::default_instance_ = NULL;

Proto50200004* Proto50200004::New() const {
  return new Proto50200004;
}

void Proto50200004::Clear() {
  content_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto50200004::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoChatInfo content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_content;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto50200004::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoChatInfo content = 1;
  for (int i = 0; i < this->content_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->content(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto50200004::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoChatInfo content = 1;
  for (int i = 0; i < this->content_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->content(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto50200004::ByteSize() const {
  int total_size = 0;
  
  // repeated .ProtoChatInfo content = 1;
  total_size += 1 * this->content_size();
  for (int i = 0; i < this->content_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->content(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto50200004::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto50200004* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto50200004*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto50200004::MergeFrom(const Proto50200004& from) {
  GOOGLE_CHECK_NE(&from, this);
  content_.MergeFrom(from.content_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto50200004::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto50200004::CopyFrom(const Proto50200004& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto50200004::IsInitialized() const {
  
  return true;
}

void Proto50200004::Swap(Proto50200004* other) {
  if (other != this) {
    content_.Swap(&other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto50200004::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto50200004_descriptor_;
  metadata.reflection = Proto50200004_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto80200001::kContentFieldNumber;
#endif  // !_MSC_VER

Proto80200001::Proto80200001()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto80200001::InitAsDefaultInstance() {
}

Proto80200001::Proto80200001(const Proto80200001& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto80200001::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto80200001::~Proto80200001() {
  SharedDtor();
}

void Proto80200001::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto80200001::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto80200001::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto80200001_descriptor_;
}

const Proto80200001& Proto80200001::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient001_2eproto();  return *default_instance_;
}

Proto80200001* Proto80200001::default_instance_ = NULL;

Proto80200001* Proto80200001::New() const {
  return new Proto80200001;
}

void Proto80200001::Clear() {
  content_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto80200001::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoChatInfo content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_content;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto80200001::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoChatInfo content = 1;
  for (int i = 0; i < this->content_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->content(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto80200001::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoChatInfo content = 1;
  for (int i = 0; i < this->content_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->content(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto80200001::ByteSize() const {
  int total_size = 0;
  
  // repeated .ProtoChatInfo content = 1;
  total_size += 1 * this->content_size();
  for (int i = 0; i < this->content_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->content(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto80200001::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto80200001* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto80200001*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto80200001::MergeFrom(const Proto80200001& from) {
  GOOGLE_CHECK_NE(&from, this);
  content_.MergeFrom(from.content_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto80200001::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto80200001::CopyFrom(const Proto80200001& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto80200001::IsInitialized() const {
  
  return true;
}

void Proto80200001::Swap(Proto80200001* other) {
  if (other != this) {
    content_.Swap(&other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto80200001::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto80200001_descriptor_;
  metadata.reflection = Proto80200001_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto80200002::kContentFieldNumber;
#endif  // !_MSC_VER

Proto80200002::Proto80200002()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto80200002::InitAsDefaultInstance() {
}

Proto80200002::Proto80200002(const Proto80200002& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto80200002::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto80200002::~Proto80200002() {
  SharedDtor();
}

void Proto80200002::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto80200002::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto80200002::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto80200002_descriptor_;
}

const Proto80200002& Proto80200002::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient001_2eproto();  return *default_instance_;
}

Proto80200002* Proto80200002::default_instance_ = NULL;

Proto80200002* Proto80200002::New() const {
  return new Proto80200002;
}

void Proto80200002::Clear() {
  content_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto80200002::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoChatInfo content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_content;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto80200002::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoChatInfo content = 1;
  for (int i = 0; i < this->content_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->content(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto80200002::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoChatInfo content = 1;
  for (int i = 0; i < this->content_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->content(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto80200002::ByteSize() const {
  int total_size = 0;
  
  // repeated .ProtoChatInfo content = 1;
  total_size += 1 * this->content_size();
  for (int i = 0; i < this->content_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->content(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto80200002::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto80200002* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto80200002*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto80200002::MergeFrom(const Proto80200002& from) {
  GOOGLE_CHECK_NE(&from, this);
  content_.MergeFrom(from.content_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto80200002::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto80200002::CopyFrom(const Proto80200002& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto80200002::IsInitialized() const {
  
  return true;
}

void Proto80200002::Swap(Proto80200002* other) {
  if (other != this) {
    content_.Swap(&other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto80200002::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto80200002_descriptor_;
  metadata.reflection = Proto80200002_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto80200003::kContentFieldNumber;
#endif  // !_MSC_VER

Proto80200003::Proto80200003()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto80200003::InitAsDefaultInstance() {
}

Proto80200003::Proto80200003(const Proto80200003& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto80200003::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto80200003::~Proto80200003() {
  SharedDtor();
}

void Proto80200003::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto80200003::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto80200003::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto80200003_descriptor_;
}

const Proto80200003& Proto80200003::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient001_2eproto();  return *default_instance_;
}

Proto80200003* Proto80200003::default_instance_ = NULL;

Proto80200003* Proto80200003::New() const {
  return new Proto80200003;
}

void Proto80200003::Clear() {
  content_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto80200003::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoChatInfo content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_content;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto80200003::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoChatInfo content = 1;
  for (int i = 0; i < this->content_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->content(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto80200003::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoChatInfo content = 1;
  for (int i = 0; i < this->content_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->content(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto80200003::ByteSize() const {
  int total_size = 0;
  
  // repeated .ProtoChatInfo content = 1;
  total_size += 1 * this->content_size();
  for (int i = 0; i < this->content_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->content(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto80200003::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto80200003* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto80200003*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto80200003::MergeFrom(const Proto80200003& from) {
  GOOGLE_CHECK_NE(&from, this);
  content_.MergeFrom(from.content_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto80200003::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto80200003::CopyFrom(const Proto80200003& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto80200003::IsInitialized() const {
  
  return true;
}

void Proto80200003::Swap(Proto80200003* other) {
  if (other != this) {
    content_.Swap(&other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto80200003::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto80200003_descriptor_;
  metadata.reflection = Proto80200003_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto10200005::kPeerRoleIdFieldNumber;
const int Proto10200005::kTimeOffsetFieldNumber;
#endif  // !_MSC_VER

Proto10200005::Proto10200005()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto10200005::InitAsDefaultInstance() {
}

Proto10200005::Proto10200005(const Proto10200005& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto10200005::SharedCtor() {
  _cached_size_ = 0;
  peer_role_id_ = GOOGLE_LONGLONG(0);
  time_offset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto10200005::~Proto10200005() {
  SharedDtor();
}

void Proto10200005::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto10200005::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto10200005::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto10200005_descriptor_;
}

const Proto10200005& Proto10200005::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient001_2eproto();  return *default_instance_;
}

Proto10200005* Proto10200005::default_instance_ = NULL;

Proto10200005* Proto10200005::New() const {
  return new Proto10200005;
}

void Proto10200005::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    peer_role_id_ = GOOGLE_LONGLONG(0);
    time_offset_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto10200005::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 peer_role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &peer_role_id_)));
          set_has_peer_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time_offset;
        break;
      }
      
      // optional int32 time_offset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_offset_)));
          set_has_time_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto10200005::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 peer_role_id = 1;
  if (has_peer_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->peer_role_id(), output);
  }
  
  // optional int32 time_offset = 2;
  if (has_time_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time_offset(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto10200005::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 peer_role_id = 1;
  if (has_peer_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->peer_role_id(), target);
  }
  
  // optional int32 time_offset = 2;
  if (has_time_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time_offset(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto10200005::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 peer_role_id = 1;
    if (has_peer_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->peer_role_id());
    }
    
    // optional int32 time_offset = 2;
    if (has_time_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_offset());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto10200005::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto10200005* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto10200005*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto10200005::MergeFrom(const Proto10200005& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_peer_role_id()) {
      set_peer_role_id(from.peer_role_id());
    }
    if (from.has_time_offset()) {
      set_time_offset(from.time_offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto10200005::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto10200005::CopyFrom(const Proto10200005& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto10200005::IsInitialized() const {
  
  return true;
}

void Proto10200005::Swap(Proto10200005* other) {
  if (other != this) {
    std::swap(peer_role_id_, other->peer_role_id_);
    std::swap(time_offset_, other->time_offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto10200005::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto10200005_descriptor_;
  metadata.reflection = Proto10200005_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto50200005::kContentFieldNumber;
#endif  // !_MSC_VER

Proto50200005::Proto50200005()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto50200005::InitAsDefaultInstance() {
}

Proto50200005::Proto50200005(const Proto50200005& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto50200005::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto50200005::~Proto50200005() {
  SharedDtor();
}

void Proto50200005::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto50200005::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto50200005::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto50200005_descriptor_;
}

const Proto50200005& Proto50200005::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient001_2eproto();  return *default_instance_;
}

Proto50200005* Proto50200005::default_instance_ = NULL;

Proto50200005* Proto50200005::New() const {
  return new Proto50200005;
}

void Proto50200005::Clear() {
  content_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto50200005::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoChatInfo content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_content;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto50200005::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoChatInfo content = 1;
  for (int i = 0; i < this->content_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->content(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto50200005::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoChatInfo content = 1;
  for (int i = 0; i < this->content_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->content(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto50200005::ByteSize() const {
  int total_size = 0;
  
  // repeated .ProtoChatInfo content = 1;
  total_size += 1 * this->content_size();
  for (int i = 0; i < this->content_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->content(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto50200005::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto50200005* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto50200005*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto50200005::MergeFrom(const Proto50200005& from) {
  GOOGLE_CHECK_NE(&from, this);
  content_.MergeFrom(from.content_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto50200005::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto50200005::CopyFrom(const Proto50200005& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto50200005::IsInitialized() const {
  
  return true;
}

void Proto50200005::Swap(Proto50200005* other) {
  if (other != this) {
    content_.Swap(&other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto50200005::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto50200005_descriptor_;
  metadata.reflection = Proto50200005_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto10200006::kChannelFieldNumber;
const int Proto10200006::kVoiceIdFieldNumber;
#endif  // !_MSC_VER

Proto10200006::Proto10200006()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto10200006::InitAsDefaultInstance() {
}

Proto10200006::Proto10200006(const Proto10200006& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto10200006::SharedCtor() {
  _cached_size_ = 0;
  channel_ = 0;
  voice_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto10200006::~Proto10200006() {
  SharedDtor();
}

void Proto10200006::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto10200006::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto10200006::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto10200006_descriptor_;
}

const Proto10200006& Proto10200006::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient001_2eproto();  return *default_instance_;
}

Proto10200006* Proto10200006::default_instance_ = NULL;

Proto10200006* Proto10200006::New() const {
  return new Proto10200006;
}

void Proto10200006::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channel_ = 0;
    voice_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto10200006::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 channel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_voice_id;
        break;
      }
      
      // optional int64 voice_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_voice_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &voice_id_)));
          set_has_voice_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto10200006::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->channel(), output);
  }
  
  // optional int64 voice_id = 2;
  if (has_voice_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->voice_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto10200006::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 channel = 1;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->channel(), target);
  }
  
  // optional int64 voice_id = 2;
  if (has_voice_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->voice_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto10200006::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }
    
    // optional int64 voice_id = 2;
    if (has_voice_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->voice_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto10200006::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto10200006* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto10200006*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto10200006::MergeFrom(const Proto10200006& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_voice_id()) {
      set_voice_id(from.voice_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto10200006::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto10200006::CopyFrom(const Proto10200006& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto10200006::IsInitialized() const {
  
  return true;
}

void Proto10200006::Swap(Proto10200006* other) {
  if (other != this) {
    std::swap(channel_, other->channel_);
    std::swap(voice_id_, other->voice_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto10200006::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto10200006_descriptor_;
  metadata.reflection = Proto10200006_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto50200006::kVoiceIdFieldNumber;
const int Proto50200006::kContentFieldNumber;
const int Proto50200006::kVoiceLengthFieldNumber;
#endif  // !_MSC_VER

Proto50200006::Proto50200006()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto50200006::InitAsDefaultInstance() {
}

Proto50200006::Proto50200006(const Proto50200006& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto50200006::SharedCtor() {
  _cached_size_ = 0;
  voice_id_ = GOOGLE_LONGLONG(0);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  voice_length_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto50200006::~Proto50200006() {
  SharedDtor();
}

void Proto50200006::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void Proto50200006::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto50200006::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto50200006_descriptor_;
}

const Proto50200006& Proto50200006::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient001_2eproto();  return *default_instance_;
}

Proto50200006* Proto50200006::default_instance_ = NULL;

Proto50200006* Proto50200006::New() const {
  return new Proto50200006;
}

void Proto50200006::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    voice_id_ = GOOGLE_LONGLONG(0);
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    voice_length_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto50200006::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 voice_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &voice_id_)));
          set_has_voice_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }
      
      // optional bytes content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_voice_length;
        break;
      }
      
      // optional int32 voice_length = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_voice_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &voice_length_)));
          set_has_voice_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto50200006::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 voice_id = 1;
  if (has_voice_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->voice_id(), output);
  }
  
  // optional bytes content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->content(), output);
  }
  
  // optional int32 voice_length = 3;
  if (has_voice_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->voice_length(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto50200006::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 voice_id = 1;
  if (has_voice_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->voice_id(), target);
  }
  
  // optional bytes content = 2;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->content(), target);
  }
  
  // optional int32 voice_length = 3;
  if (has_voice_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->voice_length(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto50200006::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 voice_id = 1;
    if (has_voice_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->voice_id());
    }
    
    // optional bytes content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }
    
    // optional int32 voice_length = 3;
    if (has_voice_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->voice_length());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto50200006::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto50200006* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto50200006*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto50200006::MergeFrom(const Proto50200006& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_voice_id()) {
      set_voice_id(from.voice_id());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_voice_length()) {
      set_voice_length(from.voice_length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto50200006::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto50200006::CopyFrom(const Proto50200006& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto50200006::IsInitialized() const {
  
  return true;
}

void Proto50200006::Swap(Proto50200006* other) {
  if (other != this) {
    std::swap(voice_id_, other->voice_id_);
    std::swap(content_, other->content_);
    std::swap(voice_length_, other->voice_length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto50200006::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto50200006_descriptor_;
  metadata.reflection = Proto50200006_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto11400101::kPackTypeFieldNumber;
#endif  // !_MSC_VER

Proto11400101::Proto11400101()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto11400101::InitAsDefaultInstance() {
}

Proto11400101::Proto11400101(const Proto11400101& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto11400101::SharedCtor() {
  _cached_size_ = 0;
  pack_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto11400101::~Proto11400101() {
  SharedDtor();
}

void Proto11400101::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto11400101::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto11400101::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto11400101_descriptor_;
}

const Proto11400101& Proto11400101::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient001_2eproto();  return *default_instance_;
}

Proto11400101* Proto11400101::default_instance_ = NULL;

Proto11400101* Proto11400101::New() const {
  return new Proto11400101;
}

void Proto11400101::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pack_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto11400101::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pack_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pack_type_)));
          set_has_pack_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto11400101::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pack_type = 1;
  if (has_pack_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pack_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto11400101::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pack_type = 1;
  if (has_pack_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pack_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto11400101::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pack_type = 1;
    if (has_pack_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pack_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto11400101::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto11400101* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto11400101*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto11400101::MergeFrom(const Proto11400101& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pack_type()) {
      set_pack_type(from.pack_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto11400101::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto11400101::CopyFrom(const Proto11400101& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto11400101::IsInitialized() const {
  
  return true;
}

void Proto11400101::Swap(Proto11400101* other) {
  if (other != this) {
    std::swap(pack_type_, other->pack_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto11400101::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto11400101_descriptor_;
  metadata.reflection = Proto11400101_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto11400102::kPackTypeFieldNumber;
const int Proto11400102::kIndexFieldNumber;
#endif  // !_MSC_VER

Proto11400102::Proto11400102()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto11400102::InitAsDefaultInstance() {
}

Proto11400102::Proto11400102(const Proto11400102& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto11400102::SharedCtor() {
  _cached_size_ = 0;
  pack_type_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto11400102::~Proto11400102() {
  SharedDtor();
}

void Proto11400102::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto11400102::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto11400102::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto11400102_descriptor_;
}

const Proto11400102& Proto11400102::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient001_2eproto();  return *default_instance_;
}

Proto11400102* Proto11400102::default_instance_ = NULL;

Proto11400102* Proto11400102::New() const {
  return new Proto11400102;
}

void Proto11400102::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pack_type_ = 0;
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto11400102::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pack_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pack_type_)));
          set_has_pack_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }
      
      // optional int32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto11400102::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pack_type = 1;
  if (has_pack_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pack_type(), output);
  }
  
  // optional int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto11400102::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pack_type = 1;
  if (has_pack_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pack_type(), target);
  }
  
  // optional int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto11400102::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pack_type = 1;
    if (has_pack_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pack_type());
    }
    
    // optional int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto11400102::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto11400102* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto11400102*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto11400102::MergeFrom(const Proto11400102& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pack_type()) {
      set_pack_type(from.pack_type());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto11400102::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto11400102::CopyFrom(const Proto11400102& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto11400102::IsInitialized() const {
  
  return true;
}

void Proto11400102::Swap(Proto11400102* other) {
  if (other != this) {
    std::swap(pack_type_, other->pack_type_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto11400102::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto11400102_descriptor_;
  metadata.reflection = Proto11400102_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto11400103::kPackTypeFieldNumber;
const int Proto11400103::kIndexFieldNumber;
#endif  // !_MSC_VER

Proto11400103::Proto11400103()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto11400103::InitAsDefaultInstance() {
}

Proto11400103::Proto11400103(const Proto11400103& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto11400103::SharedCtor() {
  _cached_size_ = 0;
  pack_type_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto11400103::~Proto11400103() {
  SharedDtor();
}

void Proto11400103::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto11400103::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto11400103::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto11400103_descriptor_;
}

const Proto11400103& Proto11400103::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient001_2eproto();  return *default_instance_;
}

Proto11400103* Proto11400103::default_instance_ = NULL;

Proto11400103* Proto11400103::New() const {
  return new Proto11400103;
}

void Proto11400103::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pack_type_ = 0;
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto11400103::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pack_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pack_type_)));
          set_has_pack_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }
      
      // optional int32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto11400103::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pack_type = 1;
  if (has_pack_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pack_type(), output);
  }
  
  // optional int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto11400103::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pack_type = 1;
  if (has_pack_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pack_type(), target);
  }
  
  // optional int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto11400103::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pack_type = 1;
    if (has_pack_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pack_type());
    }
    
    // optional int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto11400103::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto11400103* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto11400103*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto11400103::MergeFrom(const Proto11400103& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pack_type()) {
      set_pack_type(from.pack_type());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto11400103::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto11400103::CopyFrom(const Proto11400103& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto11400103::IsInitialized() const {
  
  return true;
}

void Proto11400103::Swap(Proto11400103* other) {
  if (other != this) {
    std::swap(pack_type_, other->pack_type_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto11400103::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto11400103_descriptor_;
  metadata.reflection = Proto11400103_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto11400104::kPackTypeFieldNumber;
const int Proto11400104::kRemoveFieldNumber;
#endif  // !_MSC_VER

Proto11400104::Proto11400104()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto11400104::InitAsDefaultInstance() {
}

Proto11400104::Proto11400104(const Proto11400104& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto11400104::SharedCtor() {
  _cached_size_ = 0;
  pack_type_ = 0;
  remove_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto11400104::~Proto11400104() {
  SharedDtor();
}

void Proto11400104::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto11400104::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto11400104::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto11400104_descriptor_;
}

const Proto11400104& Proto11400104::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient001_2eproto();  return *default_instance_;
}

Proto11400104* Proto11400104::default_instance_ = NULL;

Proto11400104* Proto11400104::New() const {
  return new Proto11400104;
}

void Proto11400104::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pack_type_ = 0;
    remove_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto11400104::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pack_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pack_type_)));
          set_has_pack_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_remove;
        break;
      }
      
      // optional int32 remove = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remove:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remove_)));
          set_has_remove();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto11400104::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pack_type = 1;
  if (has_pack_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pack_type(), output);
  }
  
  // optional int32 remove = 2;
  if (has_remove()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->remove(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto11400104::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pack_type = 1;
  if (has_pack_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pack_type(), target);
  }
  
  // optional int32 remove = 2;
  if (has_remove()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->remove(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto11400104::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pack_type = 1;
    if (has_pack_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pack_type());
    }
    
    // optional int32 remove = 2;
    if (has_remove()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remove());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto11400104::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto11400104* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto11400104*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto11400104::MergeFrom(const Proto11400104& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pack_type()) {
      set_pack_type(from.pack_type());
    }
    if (from.has_remove()) {
      set_remove(from.remove());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto11400104::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto11400104::CopyFrom(const Proto11400104& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto11400104::IsInitialized() const {
  
  return true;
}

void Proto11400104::Swap(Proto11400104* other) {
  if (other != this) {
    std::swap(pack_type_, other->pack_type_);
    std::swap(remove_, other->remove_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto11400104::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto11400104_descriptor_;
  metadata.reflection = Proto11400104_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto11400105::kPackTypeFieldNumber;
const int Proto11400105::kIndexFromFieldNumber;
const int Proto11400105::kIndexToFieldNumber;
const int Proto11400105::kIgnoreBindFieldNumber;
#endif  // !_MSC_VER

Proto11400105::Proto11400105()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto11400105::InitAsDefaultInstance() {
}

Proto11400105::Proto11400105(const Proto11400105& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto11400105::SharedCtor() {
  _cached_size_ = 0;
  pack_type_ = 0;
  index_from_ = 0;
  index_to_ = 0;
  ignore_bind_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto11400105::~Proto11400105() {
  SharedDtor();
}

void Proto11400105::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto11400105::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto11400105::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto11400105_descriptor_;
}

const Proto11400105& Proto11400105::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient001_2eproto();  return *default_instance_;
}

Proto11400105* Proto11400105::default_instance_ = NULL;

Proto11400105* Proto11400105::New() const {
  return new Proto11400105;
}

void Proto11400105::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pack_type_ = 0;
    index_from_ = 0;
    index_to_ = 0;
    ignore_bind_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto11400105::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pack_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pack_type_)));
          set_has_pack_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index_from;
        break;
      }
      
      // optional int32 index_from = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_from_)));
          set_has_index_from();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_index_to;
        break;
      }
      
      // optional int32 index_to = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_to_)));
          set_has_index_to();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ignore_bind;
        break;
      }
      
      // optional int32 ignore_bind = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ignore_bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ignore_bind_)));
          set_has_ignore_bind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto11400105::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pack_type = 1;
  if (has_pack_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pack_type(), output);
  }
  
  // optional int32 index_from = 2;
  if (has_index_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index_from(), output);
  }
  
  // optional int32 index_to = 3;
  if (has_index_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index_to(), output);
  }
  
  // optional int32 ignore_bind = 4;
  if (has_ignore_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ignore_bind(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto11400105::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pack_type = 1;
  if (has_pack_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pack_type(), target);
  }
  
  // optional int32 index_from = 2;
  if (has_index_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index_from(), target);
  }
  
  // optional int32 index_to = 3;
  if (has_index_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index_to(), target);
  }
  
  // optional int32 ignore_bind = 4;
  if (has_ignore_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ignore_bind(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto11400105::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pack_type = 1;
    if (has_pack_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pack_type());
    }
    
    // optional int32 index_from = 2;
    if (has_index_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index_from());
    }
    
    // optional int32 index_to = 3;
    if (has_index_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index_to());
    }
    
    // optional int32 ignore_bind = 4;
    if (has_ignore_bind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ignore_bind());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto11400105::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto11400105* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto11400105*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto11400105::MergeFrom(const Proto11400105& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pack_type()) {
      set_pack_type(from.pack_type());
    }
    if (from.has_index_from()) {
      set_index_from(from.index_from());
    }
    if (from.has_index_to()) {
      set_index_to(from.index_to());
    }
    if (from.has_ignore_bind()) {
      set_ignore_bind(from.ignore_bind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto11400105::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto11400105::CopyFrom(const Proto11400105& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto11400105::IsInitialized() const {
  
  return true;
}

void Proto11400105::Swap(Proto11400105* other) {
  if (other != this) {
    std::swap(pack_type_, other->pack_type_);
    std::swap(index_from_, other->index_from_);
    std::swap(index_to_, other->index_to_);
    std::swap(ignore_bind_, other->ignore_bind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto11400105::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto11400105_descriptor_;
  metadata.reflection = Proto11400105_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto11400106::kIndexFieldNumber;
const int Proto11400106::kAmountFieldNumber;
#endif  // !_MSC_VER

Proto11400106::Proto11400106()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto11400106::InitAsDefaultInstance() {
}

Proto11400106::Proto11400106(const Proto11400106& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto11400106::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  amount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto11400106::~Proto11400106() {
  SharedDtor();
}

void Proto11400106::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto11400106::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto11400106::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto11400106_descriptor_;
}

const Proto11400106& Proto11400106::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient001_2eproto();  return *default_instance_;
}

Proto11400106* Proto11400106::default_instance_ = NULL;

Proto11400106* Proto11400106::New() const {
  return new Proto11400106;
}

void Proto11400106::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    amount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto11400106::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_amount;
        break;
      }
      
      // optional int32 amount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto11400106::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }
  
  // optional int32 amount = 2;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->amount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto11400106::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }
  
  // optional int32 amount = 2;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->amount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto11400106::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional int32 amount = 2;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->amount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto11400106::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto11400106* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto11400106*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto11400106::MergeFrom(const Proto11400106& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto11400106::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto11400106::CopyFrom(const Proto11400106& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto11400106::IsInitialized() const {
  
  return true;
}

void Proto11400106::Swap(Proto11400106* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(amount_, other->amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto11400106::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto11400106_descriptor_;
  metadata.reflection = Proto11400106_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto11400107::kPackTypeFieldNumber;
const int Proto11400107::kIndexFieldNumber;
#endif  // !_MSC_VER

Proto11400107::Proto11400107()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto11400107::InitAsDefaultInstance() {
}

Proto11400107::Proto11400107(const Proto11400107& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto11400107::SharedCtor() {
  _cached_size_ = 0;
  pack_type_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto11400107::~Proto11400107() {
  SharedDtor();
}

void Proto11400107::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto11400107::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto11400107::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto11400107_descriptor_;
}

const Proto11400107& Proto11400107::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient001_2eproto();  return *default_instance_;
}

Proto11400107* Proto11400107::default_instance_ = NULL;

Proto11400107* Proto11400107::New() const {
  return new Proto11400107;
}

void Proto11400107::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pack_type_ = 0;
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto11400107::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pack_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pack_type_)));
          set_has_pack_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }
      
      // optional int32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto11400107::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pack_type = 1;
  if (has_pack_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pack_type(), output);
  }
  
  // optional int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto11400107::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pack_type = 1;
  if (has_pack_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pack_type(), target);
  }
  
  // optional int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto11400107::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pack_type = 1;
    if (has_pack_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pack_type());
    }
    
    // optional int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto11400107::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto11400107* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto11400107*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto11400107::MergeFrom(const Proto11400107& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pack_type()) {
      set_pack_type(from.pack_type());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto11400107::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto11400107::CopyFrom(const Proto11400107& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto11400107::IsInitialized() const {
  
  return true;
}

void Proto11400107::Swap(Proto11400107* other) {
  if (other != this) {
    std::swap(pack_type_, other->pack_type_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto11400107::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto11400107_descriptor_;
  metadata.reflection = Proto11400107_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto11400110::kIndexFieldNumber;
const int Proto11400110::kAmountFieldNumber;
const int Proto11400110::kPackTypeFieldNumber;
#endif  // !_MSC_VER

Proto11400110::Proto11400110()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto11400110::InitAsDefaultInstance() {
}

Proto11400110::Proto11400110(const Proto11400110& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto11400110::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  amount_ = 0;
  pack_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto11400110::~Proto11400110() {
  SharedDtor();
}

void Proto11400110::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto11400110::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto11400110::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto11400110_descriptor_;
}

const Proto11400110& Proto11400110::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient001_2eproto();  return *default_instance_;
}

Proto11400110* Proto11400110::default_instance_ = NULL;

Proto11400110* Proto11400110::New() const {
  return new Proto11400110;
}

void Proto11400110::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    amount_ = 0;
    pack_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto11400110::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_amount;
        break;
      }
      
      // optional int32 amount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pack_type;
        break;
      }
      
      // optional int32 pack_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pack_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pack_type_)));
          set_has_pack_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto11400110::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }
  
  // optional int32 amount = 2;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->amount(), output);
  }
  
  // optional int32 pack_type = 3;
  if (has_pack_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pack_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto11400110::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }
  
  // optional int32 amount = 2;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->amount(), target);
  }
  
  // optional int32 pack_type = 3;
  if (has_pack_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pack_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto11400110::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional int32 amount = 2;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->amount());
    }
    
    // optional int32 pack_type = 3;
    if (has_pack_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pack_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto11400110::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto11400110* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto11400110*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto11400110::MergeFrom(const Proto11400110& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_pack_type()) {
      set_pack_type(from.pack_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto11400110::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto11400110::CopyFrom(const Proto11400110& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto11400110::IsInitialized() const {
  
  return true;
}

void Proto11400110::Swap(Proto11400110* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(amount_, other->amount_);
    std::swap(pack_type_, other->pack_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto11400110::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto11400110_descriptor_;
  metadata.reflection = Proto11400110_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto51400101::kPackTypeFieldNumber;
const int Proto51400101::kPackSizeFieldNumber;
const int Proto51400101::kItemListFieldNumber;
const int Proto51400101::kSuitInfoFieldNumber;
const int Proto51400101::kRefineSuitFieldNumber;
const int Proto51400101::kStrengthenFieldNumber;
#endif  // !_MSC_VER

Proto51400101::Proto51400101()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto51400101::InitAsDefaultInstance() {
  refine_suit_ = const_cast< ::ProtoRefineSuit*>(&::ProtoRefineSuit::default_instance());
}

Proto51400101::Proto51400101(const Proto51400101& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto51400101::SharedCtor() {
  _cached_size_ = 0;
  pack_type_ = 0;
  pack_size_ = 0;
  refine_suit_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto51400101::~Proto51400101() {
  SharedDtor();
}

void Proto51400101::SharedDtor() {
  if (this != default_instance_) {
    delete refine_suit_;
  }
}

void Proto51400101::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto51400101::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto51400101_descriptor_;
}

const Proto51400101& Proto51400101::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient001_2eproto();  return *default_instance_;
}

Proto51400101* Proto51400101::default_instance_ = NULL;

Proto51400101* Proto51400101::New() const {
  return new Proto51400101;
}

void Proto51400101::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pack_type_ = 0;
    pack_size_ = 0;
    if (has_refine_suit()) {
      if (refine_suit_ != NULL) refine_suit_->::ProtoRefineSuit::Clear();
    }
  }
  item_list_.Clear();
  suit_info_.Clear();
  strengthen_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto51400101::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pack_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pack_type_)));
          set_has_pack_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pack_size;
        break;
      }
      
      // optional int32 pack_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pack_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pack_size_)));
          set_has_pack_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item_list;
        break;
      }
      
      // repeated .ProtoItem item_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item_list;
        if (input->ExpectTag(34)) goto parse_suit_info;
        break;
      }
      
      // repeated .ProtoSuit suit_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_suit_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_suit_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_suit_info;
        if (input->ExpectTag(42)) goto parse_refine_suit;
        break;
      }
      
      // optional .ProtoRefineSuit refine_suit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_refine_suit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_refine_suit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_strengthen;
        break;
      }
      
      // repeated int32 strengthen = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strengthen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_strengthen())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_strengthen())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_strengthen;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto51400101::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pack_type = 1;
  if (has_pack_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pack_type(), output);
  }
  
  // optional int32 pack_size = 2;
  if (has_pack_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pack_size(), output);
  }
  
  // repeated .ProtoItem item_list = 3;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item_list(i), output);
  }
  
  // repeated .ProtoSuit suit_info = 4;
  for (int i = 0; i < this->suit_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->suit_info(i), output);
  }
  
  // optional .ProtoRefineSuit refine_suit = 5;
  if (has_refine_suit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->refine_suit(), output);
  }
  
  // repeated int32 strengthen = 6;
  for (int i = 0; i < this->strengthen_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->strengthen(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto51400101::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pack_type = 1;
  if (has_pack_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pack_type(), target);
  }
  
  // optional int32 pack_size = 2;
  if (has_pack_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pack_size(), target);
  }
  
  // repeated .ProtoItem item_list = 3;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item_list(i), target);
  }
  
  // repeated .ProtoSuit suit_info = 4;
  for (int i = 0; i < this->suit_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->suit_info(i), target);
  }
  
  // optional .ProtoRefineSuit refine_suit = 5;
  if (has_refine_suit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->refine_suit(), target);
  }
  
  // repeated int32 strengthen = 6;
  for (int i = 0; i < this->strengthen_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->strengthen(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto51400101::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pack_type = 1;
    if (has_pack_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pack_type());
    }
    
    // optional int32 pack_size = 2;
    if (has_pack_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pack_size());
    }
    
    // optional .ProtoRefineSuit refine_suit = 5;
    if (has_refine_suit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->refine_suit());
    }
    
  }
  // repeated .ProtoItem item_list = 3;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }
  
  // repeated .ProtoSuit suit_info = 4;
  total_size += 1 * this->suit_info_size();
  for (int i = 0; i < this->suit_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->suit_info(i));
  }
  
  // repeated int32 strengthen = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->strengthen_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->strengthen(i));
    }
    total_size += 1 * this->strengthen_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto51400101::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto51400101* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto51400101*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto51400101::MergeFrom(const Proto51400101& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  suit_info_.MergeFrom(from.suit_info_);
  strengthen_.MergeFrom(from.strengthen_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pack_type()) {
      set_pack_type(from.pack_type());
    }
    if (from.has_pack_size()) {
      set_pack_size(from.pack_size());
    }
    if (from.has_refine_suit()) {
      mutable_refine_suit()->::ProtoRefineSuit::MergeFrom(from.refine_suit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto51400101::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto51400101::CopyFrom(const Proto51400101& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto51400101::IsInitialized() const {
  
  return true;
}

void Proto51400101::Swap(Proto51400101* other) {
  if (other != this) {
    std::swap(pack_type_, other->pack_type_);
    std::swap(pack_size_, other->pack_size_);
    item_list_.Swap(&other->item_list_);
    suit_info_.Swap(&other->suit_info_);
    std::swap(refine_suit_, other->refine_suit_);
    strengthen_.Swap(&other->strengthen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto51400101::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto51400101_descriptor_;
  metadata.reflection = Proto51400101_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto51400102::kIndexFieldNumber;
const int Proto51400102::kGoldCostFieldNumber;
const int Proto51400102::kLeftTimeFieldNumber;
const int Proto51400102::kTotalTimeFieldNumber;
const int Proto51400102::kAddExpFieldNumber;
#endif  // !_MSC_VER

Proto51400102::Proto51400102()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto51400102::InitAsDefaultInstance() {
}

Proto51400102::Proto51400102(const Proto51400102& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto51400102::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  gold_cost_ = 0;
  left_time_ = 0;
  total_time_ = 0;
  add_exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto51400102::~Proto51400102() {
  SharedDtor();
}

void Proto51400102::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto51400102::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto51400102::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto51400102_descriptor_;
}

const Proto51400102& Proto51400102::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient001_2eproto();  return *default_instance_;
}

Proto51400102* Proto51400102::default_instance_ = NULL;

Proto51400102* Proto51400102::New() const {
  return new Proto51400102;
}

void Proto51400102::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    gold_cost_ = 0;
    left_time_ = 0;
    total_time_ = 0;
    add_exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto51400102::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gold_cost;
        break;
      }
      
      // optional int32 gold_cost = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_cost_)));
          set_has_gold_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_left_time;
        break;
      }
      
      // optional int32 left_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_time_)));
          set_has_left_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total_time;
        break;
      }
      
      // optional int32 total_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_time_)));
          set_has_total_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_add_exp;
        break;
      }
      
      // optional int32 add_exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_exp_)));
          set_has_add_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto51400102::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }
  
  // optional int32 gold_cost = 2;
  if (has_gold_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gold_cost(), output);
  }
  
  // optional int32 left_time = 3;
  if (has_left_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->left_time(), output);
  }
  
  // optional int32 total_time = 4;
  if (has_total_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->total_time(), output);
  }
  
  // optional int32 add_exp = 5;
  if (has_add_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->add_exp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto51400102::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }
  
  // optional int32 gold_cost = 2;
  if (has_gold_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gold_cost(), target);
  }
  
  // optional int32 left_time = 3;
  if (has_left_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->left_time(), target);
  }
  
  // optional int32 total_time = 4;
  if (has_total_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->total_time(), target);
  }
  
  // optional int32 add_exp = 5;
  if (has_add_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->add_exp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto51400102::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional int32 gold_cost = 2;
    if (has_gold_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold_cost());
    }
    
    // optional int32 left_time = 3;
    if (has_left_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_time());
    }
    
    // optional int32 total_time = 4;
    if (has_total_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_time());
    }
    
    // optional int32 add_exp = 5;
    if (has_add_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->add_exp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto51400102::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto51400102* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto51400102*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto51400102::MergeFrom(const Proto51400102& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_gold_cost()) {
      set_gold_cost(from.gold_cost());
    }
    if (from.has_left_time()) {
      set_left_time(from.left_time());
    }
    if (from.has_total_time()) {
      set_total_time(from.total_time());
    }
    if (from.has_add_exp()) {
      set_add_exp(from.add_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto51400102::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto51400102::CopyFrom(const Proto51400102& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto51400102::IsInitialized() const {
  
  return true;
}

void Proto51400102::Swap(Proto51400102* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(gold_cost_, other->gold_cost_);
    std::swap(left_time_, other->left_time_);
    std::swap(total_time_, other->total_time_);
    std::swap(add_exp_, other->add_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto51400102::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto51400102_descriptor_;
  metadata.reflection = Proto51400102_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto51400103::kGoldCostFieldNumber;
const int Proto51400103::kPackSizeFieldNumber;
#endif  // !_MSC_VER

Proto51400103::Proto51400103()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto51400103::InitAsDefaultInstance() {
}

Proto51400103::Proto51400103(const Proto51400103& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto51400103::SharedCtor() {
  _cached_size_ = 0;
  gold_cost_ = 0;
  pack_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto51400103::~Proto51400103() {
  SharedDtor();
}

void Proto51400103::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto51400103::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto51400103::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto51400103_descriptor_;
}

const Proto51400103& Proto51400103::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient001_2eproto();  return *default_instance_;
}

Proto51400103* Proto51400103::default_instance_ = NULL;

Proto51400103* Proto51400103::New() const {
  return new Proto51400103;
}

void Proto51400103::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gold_cost_ = 0;
    pack_size_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto51400103::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gold_cost = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_cost_)));
          set_has_gold_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pack_size;
        break;
      }
      
      // optional int32 pack_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pack_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pack_size_)));
          set_has_pack_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto51400103::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gold_cost = 1;
  if (has_gold_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gold_cost(), output);
  }
  
  // optional int32 pack_size = 2;
  if (has_pack_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pack_size(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto51400103::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 gold_cost = 1;
  if (has_gold_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gold_cost(), target);
  }
  
  // optional int32 pack_size = 2;
  if (has_pack_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pack_size(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto51400103::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gold_cost = 1;
    if (has_gold_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold_cost());
    }
    
    // optional int32 pack_size = 2;
    if (has_pack_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pack_size());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto51400103::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto51400103* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto51400103*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto51400103::MergeFrom(const Proto51400103& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gold_cost()) {
      set_gold_cost(from.gold_cost());
    }
    if (from.has_pack_size()) {
      set_pack_size(from.pack_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto51400103::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto51400103::CopyFrom(const Proto51400103& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto51400103::IsInitialized() const {
  
  return true;
}

void Proto51400103::Swap(Proto51400103* other) {
  if (other != this) {
    std::swap(gold_cost_, other->gold_cost_);
    std::swap(pack_size_, other->pack_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto51400103::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto51400103_descriptor_;
  metadata.reflection = Proto51400103_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto51400106::kItemIdFieldNumber;
const int Proto51400106::kTipsFlagFieldNumber;
#endif  // !_MSC_VER

Proto51400106::Proto51400106()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto51400106::InitAsDefaultInstance() {
}

Proto51400106::Proto51400106(const Proto51400106& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto51400106::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0;
  tips_flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto51400106::~Proto51400106() {
  SharedDtor();
}

void Proto51400106::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto51400106::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto51400106::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto51400106_descriptor_;
}

const Proto51400106& Proto51400106::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient001_2eproto();  return *default_instance_;
}

Proto51400106* Proto51400106::default_instance_ = NULL;

Proto51400106* Proto51400106::New() const {
  return new Proto51400106;
}

void Proto51400106::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0;
    tips_flag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto51400106::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tips_flag;
        break;
      }
      
      // optional int32 tips_flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tips_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tips_flag_)));
          set_has_tips_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto51400106::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_id(), output);
  }
  
  // optional int32 tips_flag = 2;
  if (has_tips_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tips_flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto51400106::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_id(), target);
  }
  
  // optional int32 tips_flag = 2;
  if (has_tips_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tips_flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto51400106::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }
    
    // optional int32 tips_flag = 2;
    if (has_tips_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tips_flag());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto51400106::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto51400106* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto51400106*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto51400106::MergeFrom(const Proto51400106& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_tips_flag()) {
      set_tips_flag(from.tips_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto51400106::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto51400106::CopyFrom(const Proto51400106& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto51400106::IsInitialized() const {
  
  return true;
}

void Proto51400106::Swap(Proto51400106* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(tips_flag_, other->tips_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto51400106::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto51400106_descriptor_;
  metadata.reflection = Proto51400106_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto81400102::kPackTypeFieldNumber;
const int Proto81400102::kDelItemListFieldNumber;
#endif  // !_MSC_VER

Proto81400102::Proto81400102()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto81400102::InitAsDefaultInstance() {
}

Proto81400102::Proto81400102(const Proto81400102& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto81400102::SharedCtor() {
  _cached_size_ = 0;
  pack_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto81400102::~Proto81400102() {
  SharedDtor();
}

void Proto81400102::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto81400102::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto81400102::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto81400102_descriptor_;
}

const Proto81400102& Proto81400102::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient001_2eproto();  return *default_instance_;
}

Proto81400102* Proto81400102::default_instance_ = NULL;

Proto81400102* Proto81400102::New() const {
  return new Proto81400102;
}

void Proto81400102::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pack_type_ = 0;
  }
  del_item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto81400102::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pack_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pack_type_)));
          set_has_pack_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_del_item_list;
        break;
      }
      
      // repeated .ProtoDelItem del_item_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_del_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_del_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_del_item_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto81400102::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pack_type = 1;
  if (has_pack_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pack_type(), output);
  }
  
  // repeated .ProtoDelItem del_item_list = 2;
  for (int i = 0; i < this->del_item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->del_item_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto81400102::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pack_type = 1;
  if (has_pack_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pack_type(), target);
  }
  
  // repeated .ProtoDelItem del_item_list = 2;
  for (int i = 0; i < this->del_item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->del_item_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto81400102::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pack_type = 1;
    if (has_pack_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pack_type());
    }
    
  }
  // repeated .ProtoDelItem del_item_list = 2;
  total_size += 1 * this->del_item_list_size();
  for (int i = 0; i < this->del_item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->del_item_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto81400102::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto81400102* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto81400102*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto81400102::MergeFrom(const Proto81400102& from) {
  GOOGLE_CHECK_NE(&from, this);
  del_item_list_.MergeFrom(from.del_item_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pack_type()) {
      set_pack_type(from.pack_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto81400102::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto81400102::CopyFrom(const Proto81400102& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto81400102::IsInitialized() const {
  
  return true;
}

void Proto81400102::Swap(Proto81400102* other) {
  if (other != this) {
    std::swap(pack_type_, other->pack_type_);
    del_item_list_.Swap(&other->del_item_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto81400102::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto81400102_descriptor_;
  metadata.reflection = Proto81400102_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto81400101::kPackTypeFieldNumber;
const int Proto81400101::kPackItemListFieldNumber;
#endif  // !_MSC_VER

Proto81400101::Proto81400101()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto81400101::InitAsDefaultInstance() {
}

Proto81400101::Proto81400101(const Proto81400101& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto81400101::SharedCtor() {
  _cached_size_ = 0;
  pack_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto81400101::~Proto81400101() {
  SharedDtor();
}

void Proto81400101::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto81400101::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto81400101::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto81400101_descriptor_;
}

const Proto81400101& Proto81400101::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient001_2eproto();  return *default_instance_;
}

Proto81400101* Proto81400101::default_instance_ = NULL;

Proto81400101* Proto81400101::New() const {
  return new Proto81400101;
}

void Proto81400101::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pack_type_ = 0;
  }
  pack_item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto81400101::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pack_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pack_type_)));
          set_has_pack_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pack_item_list;
        break;
      }
      
      // repeated .ProtoItem pack_item_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pack_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pack_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pack_item_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto81400101::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pack_type = 1;
  if (has_pack_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pack_type(), output);
  }
  
  // repeated .ProtoItem pack_item_list = 2;
  for (int i = 0; i < this->pack_item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pack_item_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto81400101::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pack_type = 1;
  if (has_pack_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pack_type(), target);
  }
  
  // repeated .ProtoItem pack_item_list = 2;
  for (int i = 0; i < this->pack_item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pack_item_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto81400101::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pack_type = 1;
    if (has_pack_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pack_type());
    }
    
  }
  // repeated .ProtoItem pack_item_list = 2;
  total_size += 1 * this->pack_item_list_size();
  for (int i = 0; i < this->pack_item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pack_item_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto81400101::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto81400101* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto81400101*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto81400101::MergeFrom(const Proto81400101& from) {
  GOOGLE_CHECK_NE(&from, this);
  pack_item_list_.MergeFrom(from.pack_item_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pack_type()) {
      set_pack_type(from.pack_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto81400101::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto81400101::CopyFrom(const Proto81400101& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto81400101::IsInitialized() const {
  
  return true;
}

void Proto81400101::Swap(Proto81400101* other) {
  if (other != this) {
    std::swap(pack_type_, other->pack_type_);
    pack_item_list_.Swap(&other->pack_item_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto81400101::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto81400101_descriptor_;
  metadata.reflection = Proto81400101_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto81400103::kGoldFieldNumber;
const int Proto81400103::kBindGoldFieldNumber;
const int Proto81400103::kCopperFieldNumber;
const int Proto81400103::kBindCopperFieldNumber;
const int Proto81400103::kActivityScoreFieldNumber;
const int Proto81400103::kExploitFieldNumber;
const int Proto81400103::kReputationFieldNumber;
const int Proto81400103::kStScoreFieldNumber;
const int Proto81400103::kReikiFieldNumber;
const int Proto81400103::kHonourFieldNumber;
const int Proto81400103::kLeagueContriFieldNumber;
const int Proto81400103::kSpiritFieldNumber;
const int Proto81400103::kPracticeFieldNumber;
#endif  // !_MSC_VER

Proto81400103::Proto81400103()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto81400103::InitAsDefaultInstance() {
}

Proto81400103::Proto81400103(const Proto81400103& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto81400103::SharedCtor() {
  _cached_size_ = 0;
  gold_ = 0;
  bind_gold_ = 0;
  copper_ = 0;
  bind_copper_ = 0;
  activity_score_ = 0;
  exploit_ = 0;
  reputation_ = 0;
  st_score_ = 0;
  reiki_ = 0;
  honour_ = 0;
  league_contri_ = 0;
  spirit_ = 0;
  practice_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto81400103::~Proto81400103() {
  SharedDtor();
}

void Proto81400103::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto81400103::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto81400103::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto81400103_descriptor_;
}

const Proto81400103& Proto81400103::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient001_2eproto();  return *default_instance_;
}

Proto81400103* Proto81400103::default_instance_ = NULL;

Proto81400103* Proto81400103::New() const {
  return new Proto81400103;
}

void Proto81400103::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gold_ = 0;
    bind_gold_ = 0;
    copper_ = 0;
    bind_copper_ = 0;
    activity_score_ = 0;
    exploit_ = 0;
    reputation_ = 0;
    st_score_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    reiki_ = 0;
    honour_ = 0;
    league_contri_ = 0;
    spirit_ = 0;
    practice_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto81400103::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gold = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bind_gold;
        break;
      }
      
      // optional int32 bind_gold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bind_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bind_gold_)));
          set_has_bind_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_copper;
        break;
      }
      
      // optional int32 copper = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_copper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &copper_)));
          set_has_copper();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bind_copper;
        break;
      }
      
      // optional int32 bind_copper = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bind_copper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bind_copper_)));
          set_has_bind_copper();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_activity_score;
        break;
      }
      
      // optional int32 activity_score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activity_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activity_score_)));
          set_has_activity_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_exploit;
        break;
      }
      
      // optional int32 exploit = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exploit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exploit_)));
          set_has_exploit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_reputation;
        break;
      }
      
      // optional int32 reputation = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reputation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reputation_)));
          set_has_reputation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_st_score;
        break;
      }
      
      // optional int32 st_score = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_st_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &st_score_)));
          set_has_st_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_reiki;
        break;
      }
      
      // optional int32 reiki = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reiki:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reiki_)));
          set_has_reiki();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_honour;
        break;
      }
      
      // optional int32 honour = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_honour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &honour_)));
          set_has_honour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_league_contri;
        break;
      }
      
      // optional int32 league_contri = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_league_contri:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &league_contri_)));
          set_has_league_contri();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_spirit;
        break;
      }
      
      // optional int32 spirit = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spirit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spirit_)));
          set_has_spirit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_practice;
        break;
      }
      
      // optional int32 practice = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_practice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &practice_)));
          set_has_practice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto81400103::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gold = 1;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gold(), output);
  }
  
  // optional int32 bind_gold = 2;
  if (has_bind_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bind_gold(), output);
  }
  
  // optional int32 copper = 3;
  if (has_copper()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->copper(), output);
  }
  
  // optional int32 bind_copper = 4;
  if (has_bind_copper()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bind_copper(), output);
  }
  
  // optional int32 activity_score = 5;
  if (has_activity_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->activity_score(), output);
  }
  
  // optional int32 exploit = 6;
  if (has_exploit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->exploit(), output);
  }
  
  // optional int32 reputation = 7;
  if (has_reputation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->reputation(), output);
  }
  
  // optional int32 st_score = 8;
  if (has_st_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->st_score(), output);
  }
  
  // optional int32 reiki = 9;
  if (has_reiki()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->reiki(), output);
  }
  
  // optional int32 honour = 10;
  if (has_honour()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->honour(), output);
  }
  
  // optional int32 league_contri = 11;
  if (has_league_contri()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->league_contri(), output);
  }
  
  // optional int32 spirit = 12;
  if (has_spirit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->spirit(), output);
  }
  
  // optional int32 practice = 13;
  if (has_practice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->practice(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto81400103::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 gold = 1;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gold(), target);
  }
  
  // optional int32 bind_gold = 2;
  if (has_bind_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bind_gold(), target);
  }
  
  // optional int32 copper = 3;
  if (has_copper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->copper(), target);
  }
  
  // optional int32 bind_copper = 4;
  if (has_bind_copper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bind_copper(), target);
  }
  
  // optional int32 activity_score = 5;
  if (has_activity_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->activity_score(), target);
  }
  
  // optional int32 exploit = 6;
  if (has_exploit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->exploit(), target);
  }
  
  // optional int32 reputation = 7;
  if (has_reputation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->reputation(), target);
  }
  
  // optional int32 st_score = 8;
  if (has_st_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->st_score(), target);
  }
  
  // optional int32 reiki = 9;
  if (has_reiki()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->reiki(), target);
  }
  
  // optional int32 honour = 10;
  if (has_honour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->honour(), target);
  }
  
  // optional int32 league_contri = 11;
  if (has_league_contri()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->league_contri(), target);
  }
  
  // optional int32 spirit = 12;
  if (has_spirit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->spirit(), target);
  }
  
  // optional int32 practice = 13;
  if (has_practice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->practice(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto81400103::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gold = 1;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }
    
    // optional int32 bind_gold = 2;
    if (has_bind_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bind_gold());
    }
    
    // optional int32 copper = 3;
    if (has_copper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->copper());
    }
    
    // optional int32 bind_copper = 4;
    if (has_bind_copper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bind_copper());
    }
    
    // optional int32 activity_score = 5;
    if (has_activity_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activity_score());
    }
    
    // optional int32 exploit = 6;
    if (has_exploit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exploit());
    }
    
    // optional int32 reputation = 7;
    if (has_reputation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reputation());
    }
    
    // optional int32 st_score = 8;
    if (has_st_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->st_score());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 reiki = 9;
    if (has_reiki()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reiki());
    }
    
    // optional int32 honour = 10;
    if (has_honour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->honour());
    }
    
    // optional int32 league_contri = 11;
    if (has_league_contri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->league_contri());
    }
    
    // optional int32 spirit = 12;
    if (has_spirit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spirit());
    }
    
    // optional int32 practice = 13;
    if (has_practice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->practice());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto81400103::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto81400103* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto81400103*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto81400103::MergeFrom(const Proto81400103& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_bind_gold()) {
      set_bind_gold(from.bind_gold());
    }
    if (from.has_copper()) {
      set_copper(from.copper());
    }
    if (from.has_bind_copper()) {
      set_bind_copper(from.bind_copper());
    }
    if (from.has_activity_score()) {
      set_activity_score(from.activity_score());
    }
    if (from.has_exploit()) {
      set_exploit(from.exploit());
    }
    if (from.has_reputation()) {
      set_reputation(from.reputation());
    }
    if (from.has_st_score()) {
      set_st_score(from.st_score());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_reiki()) {
      set_reiki(from.reiki());
    }
    if (from.has_honour()) {
      set_honour(from.honour());
    }
    if (from.has_league_contri()) {
      set_league_contri(from.league_contri());
    }
    if (from.has_spirit()) {
      set_spirit(from.spirit());
    }
    if (from.has_practice()) {
      set_practice(from.practice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto81400103::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto81400103::CopyFrom(const Proto81400103& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto81400103::IsInitialized() const {
  
  return true;
}

void Proto81400103::Swap(Proto81400103* other) {
  if (other != this) {
    std::swap(gold_, other->gold_);
    std::swap(bind_gold_, other->bind_gold_);
    std::swap(copper_, other->copper_);
    std::swap(bind_copper_, other->bind_copper_);
    std::swap(activity_score_, other->activity_score_);
    std::swap(exploit_, other->exploit_);
    std::swap(reputation_, other->reputation_);
    std::swap(st_score_, other->st_score_);
    std::swap(reiki_, other->reiki_);
    std::swap(honour_, other->honour_);
    std::swap(league_contri_, other->league_contri_);
    std::swap(spirit_, other->spirit_);
    std::swap(practice_, other->practice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto81400103::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto81400103_descriptor_;
  metadata.reflection = Proto81400103_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto11400326::kTaskIdFieldNumber;
#endif  // !_MSC_VER

Proto11400326::Proto11400326()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto11400326::InitAsDefaultInstance() {
}

Proto11400326::Proto11400326(const Proto11400326& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto11400326::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto11400326::~Proto11400326() {
  SharedDtor();
}

void Proto11400326::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto11400326::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto11400326::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto11400326_descriptor_;
}

const Proto11400326& Proto11400326::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient001_2eproto();  return *default_instance_;
}

Proto11400326* Proto11400326::default_instance_ = NULL;

Proto11400326* Proto11400326::New() const {
  return new Proto11400326;
}

void Proto11400326::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto11400326::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto11400326::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->task_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto11400326::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->task_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto11400326::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto11400326::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto11400326* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto11400326*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto11400326::MergeFrom(const Proto11400326& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto11400326::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto11400326::CopyFrom(const Proto11400326& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto11400326::IsInitialized() const {
  
  return true;
}

void Proto11400326::Swap(Proto11400326* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto11400326::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto11400326_descriptor_;
  metadata.reflection = Proto11400326_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto11400327::kTaskIdFieldNumber;
#endif  // !_MSC_VER

Proto11400327::Proto11400327()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto11400327::InitAsDefaultInstance() {
}

Proto11400327::Proto11400327(const Proto11400327& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto11400327::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto11400327::~Proto11400327() {
  SharedDtor();
}

void Proto11400327::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto11400327::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto11400327::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto11400327_descriptor_;
}

const Proto11400327& Proto11400327::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient001_2eproto();  return *default_instance_;
}

Proto11400327* Proto11400327::default_instance_ = NULL;

Proto11400327* Proto11400327::New() const {
  return new Proto11400327;
}

void Proto11400327::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto11400327::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto11400327::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->task_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto11400327::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->task_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto11400327::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto11400327::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto11400327* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto11400327*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto11400327::MergeFrom(const Proto11400327& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto11400327::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto11400327::CopyFrom(const Proto11400327& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto11400327::IsInitialized() const {
  
  return true;
}

void Proto11400327::Swap(Proto11400327* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto11400327::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto11400327_descriptor_;
  metadata.reflection = Proto11400327_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto11400328::kTaskIdFieldNumber;
const int Proto11400328::kIsDoubleFieldNumber;
#endif  // !_MSC_VER

Proto11400328::Proto11400328()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto11400328::InitAsDefaultInstance() {
}

Proto11400328::Proto11400328(const Proto11400328& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto11400328::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0;
  is_double_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto11400328::~Proto11400328() {
  SharedDtor();
}

void Proto11400328::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto11400328::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto11400328::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto11400328_descriptor_;
}

const Proto11400328& Proto11400328::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient001_2eproto();  return *default_instance_;
}

Proto11400328* Proto11400328::default_instance_ = NULL;

Proto11400328* Proto11400328::New() const {
  return new Proto11400328;
}

void Proto11400328::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0;
    is_double_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto11400328::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_double;
        break;
      }
      
      // optional int32 is_double = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_double:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_double_)));
          set_has_is_double();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto11400328::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->task_id(), output);
  }
  
  // optional int32 is_double = 2;
  if (has_is_double()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->is_double(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto11400328::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->task_id(), target);
  }
  
  // optional int32 is_double = 2;
  if (has_is_double()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->is_double(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto11400328::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_id());
    }
    
    // optional int32 is_double = 2;
    if (has_is_double()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_double());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto11400328::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto11400328* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto11400328*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto11400328::MergeFrom(const Proto11400328& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_is_double()) {
      set_is_double(from.is_double());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto11400328::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto11400328::CopyFrom(const Proto11400328& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto11400328::IsInitialized() const {
  
  return true;
}

void Proto11400328::Swap(Proto11400328* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(is_double_, other->is_double_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto11400328::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto11400328_descriptor_;
  metadata.reflection = Proto11400328_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto11400329::kNpcIdFieldNumber;
#endif  // !_MSC_VER

Proto11400329::Proto11400329()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto11400329::InitAsDefaultInstance() {
}

Proto11400329::Proto11400329(const Proto11400329& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto11400329::SharedCtor() {
  _cached_size_ = 0;
  npc_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto11400329::~Proto11400329() {
  SharedDtor();
}

void Proto11400329::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto11400329::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto11400329::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto11400329_descriptor_;
}

const Proto11400329& Proto11400329::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient001_2eproto();  return *default_instance_;
}

Proto11400329* Proto11400329::default_instance_ = NULL;

Proto11400329* Proto11400329::New() const {
  return new Proto11400329;
}

void Proto11400329::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npc_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto11400329::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 npc_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npc_id_)));
          set_has_npc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto11400329::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 npc_id = 1;
  if (has_npc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->npc_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto11400329::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 npc_id = 1;
  if (has_npc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->npc_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto11400329::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 npc_id = 1;
    if (has_npc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npc_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto11400329::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto11400329* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto11400329*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto11400329::MergeFrom(const Proto11400329& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npc_id()) {
      set_npc_id(from.npc_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto11400329::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto11400329::CopyFrom(const Proto11400329& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto11400329::IsInitialized() const {
  
  return true;
}

void Proto11400329::Swap(Proto11400329* other) {
  if (other != this) {
    std::swap(npc_id_, other->npc_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto11400329::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto11400329_descriptor_;
  metadata.reflection = Proto11400329_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto11400330::kTaskIdFieldNumber;
#endif  // !_MSC_VER

Proto11400330::Proto11400330()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto11400330::InitAsDefaultInstance() {
}

Proto11400330::Proto11400330(const Proto11400330& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto11400330::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto11400330::~Proto11400330() {
  SharedDtor();
}

void Proto11400330::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto11400330::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto11400330::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto11400330_descriptor_;
}

const Proto11400330& Proto11400330::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient001_2eproto();  return *default_instance_;
}

Proto11400330* Proto11400330::default_instance_ = NULL;

Proto11400330* Proto11400330::New() const {
  return new Proto11400330;
}

void Proto11400330::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto11400330::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto11400330::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->task_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto11400330::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->task_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto11400330::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto11400330::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto11400330* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto11400330*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto11400330::MergeFrom(const Proto11400330& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto11400330::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto11400330::CopyFrom(const Proto11400330& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto11400330::IsInitialized() const {
  
  return true;
}

void Proto11400330::Swap(Proto11400330* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto11400330::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto11400330_descriptor_;
  metadata.reflection = Proto11400330_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto51400325::kTaskListFieldNumber;
const int Proto51400325::kTaskFinishFieldNumber;
const int Proto51400325::kIsFinishGuideFieldNumber;
#endif  // !_MSC_VER

Proto51400325::Proto51400325()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto51400325::InitAsDefaultInstance() {
}

Proto51400325::Proto51400325(const Proto51400325& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto51400325::SharedCtor() {
  _cached_size_ = 0;
  is_finish_guide_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto51400325::~Proto51400325() {
  SharedDtor();
}

void Proto51400325::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto51400325::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto51400325::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto51400325_descriptor_;
}

const Proto51400325& Proto51400325::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient001_2eproto();  return *default_instance_;
}

Proto51400325* Proto51400325::default_instance_ = NULL;

Proto51400325* Proto51400325::New() const {
  return new Proto51400325;
}

void Proto51400325::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    is_finish_guide_ = 0;
  }
  task_list_.Clear();
  task_finish_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto51400325::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoTaskInfo task_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_task_list;
        if (input->ExpectTag(16)) goto parse_task_finish;
        break;
      }
      
      // repeated int32 task_finish = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_finish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_task_finish())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_task_finish())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_task_finish;
        if (input->ExpectTag(24)) goto parse_is_finish_guide;
        break;
      }
      
      // optional int32 is_finish_guide = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_finish_guide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_finish_guide_)));
          set_has_is_finish_guide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto51400325::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoTaskInfo task_list = 1;
  for (int i = 0; i < this->task_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->task_list(i), output);
  }
  
  // repeated int32 task_finish = 2;
  for (int i = 0; i < this->task_finish_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->task_finish(i), output);
  }
  
  // optional int32 is_finish_guide = 3;
  if (has_is_finish_guide()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->is_finish_guide(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto51400325::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoTaskInfo task_list = 1;
  for (int i = 0; i < this->task_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->task_list(i), target);
  }
  
  // repeated int32 task_finish = 2;
  for (int i = 0; i < this->task_finish_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->task_finish(i), target);
  }
  
  // optional int32 is_finish_guide = 3;
  if (has_is_finish_guide()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->is_finish_guide(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto51400325::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int32 is_finish_guide = 3;
    if (has_is_finish_guide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_finish_guide());
    }
    
  }
  // repeated .ProtoTaskInfo task_list = 1;
  total_size += 1 * this->task_list_size();
  for (int i = 0; i < this->task_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task_list(i));
  }
  
  // repeated int32 task_finish = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->task_finish_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->task_finish(i));
    }
    total_size += 1 * this->task_finish_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto51400325::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto51400325* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto51400325*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto51400325::MergeFrom(const Proto51400325& from) {
  GOOGLE_CHECK_NE(&from, this);
  task_list_.MergeFrom(from.task_list_);
  task_finish_.MergeFrom(from.task_finish_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_is_finish_guide()) {
      set_is_finish_guide(from.is_finish_guide());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto51400325::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto51400325::CopyFrom(const Proto51400325& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto51400325::IsInitialized() const {
  
  return true;
}

void Proto51400325::Swap(Proto51400325* other) {
  if (other != this) {
    task_list_.Swap(&other->task_list_);
    task_finish_.Swap(&other->task_finish_);
    std::swap(is_finish_guide_, other->is_finish_guide_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto51400325::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto51400325_descriptor_;
  metadata.reflection = Proto51400325_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto51400329::kTaskListFieldNumber;
#endif  // !_MSC_VER

Proto51400329::Proto51400329()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto51400329::InitAsDefaultInstance() {
}

Proto51400329::Proto51400329(const Proto51400329& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto51400329::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto51400329::~Proto51400329() {
  SharedDtor();
}

void Proto51400329::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto51400329::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto51400329::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto51400329_descriptor_;
}

const Proto51400329& Proto51400329::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient001_2eproto();  return *default_instance_;
}

Proto51400329* Proto51400329::default_instance_ = NULL;

Proto51400329* Proto51400329::New() const {
  return new Proto51400329;
}

void Proto51400329::Clear() {
  task_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto51400329::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoTaskInfo task_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_task_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto51400329::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoTaskInfo task_list = 1;
  for (int i = 0; i < this->task_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->task_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto51400329::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoTaskInfo task_list = 1;
  for (int i = 0; i < this->task_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->task_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto51400329::ByteSize() const {
  int total_size = 0;
  
  // repeated .ProtoTaskInfo task_list = 1;
  total_size += 1 * this->task_list_size();
  for (int i = 0; i < this->task_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto51400329::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto51400329* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto51400329*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto51400329::MergeFrom(const Proto51400329& from) {
  GOOGLE_CHECK_NE(&from, this);
  task_list_.MergeFrom(from.task_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto51400329::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto51400329::CopyFrom(const Proto51400329& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto51400329::IsInitialized() const {
  
  return true;
}

void Proto51400329::Swap(Proto51400329* other) {
  if (other != this) {
    task_list_.Swap(&other->task_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto51400329::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto51400329_descriptor_;
  metadata.reflection = Proto51400329_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
