// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoPublic.proto

#ifndef PROTOBUF_ProtoPublic_2eproto__INCLUDED
#define PROTOBUF_ProtoPublic_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ProtoPublic_2eproto();
void protobuf_AssignDesc_ProtoPublic_2eproto();
void protobuf_ShutdownFile_ProtoPublic_2eproto();

class ProtoSceneAddress;
class ProtoCoord;
class ProtoSkill;
class ProtoMoney;
class ProtoItem;
class ProtoEquip;
class ProtoChatInfo;
class ProtoDelItem;
class ProtoTaskCond;
class ProtoTaskInfo;
class ProtoFriendInfo;
class ProtoSkillTarget;
class ProtoFightInfo;
class ProtoStatus;
class ProtoMarketItem;
class ProtoSellOut;
class ProtoMailInfo;
class MailAttach;
class ProtoShopItem;
class ProtoPairObj;
class ProtoBaseBeastInfo;
class ProtoBeastSkill;
class ProtoMagicalRecord;
class ProtoMagicalInfo;
class ProtoSkillCombine;
class ProtoFashion;
class ProtoFashionInfo;
class ProtoLeagueItem;
class ProtoLeagueMember;
class ProtoLeagueApply;
class ProtoLeagueLog;
class ProtoLeagueShop;
class ProtoMallItem;
class ProtoMallList;
class ProtoTeamer;
class ProtoLimitTimeLabel;
class ProtoDivineRecord;
class ProtoAchieveDetail;
class ProtoBrocastRole;
class ProtoMonster;
class ProtoActivityInfo;
class ProtoBeast;
class ProtoFlaunt;
class ProtoSyncLeague;
class ProtoLeagueFighter;
class ProtoExpRestore;
class ProtoLMRole;
class ProtoMarLeague;
class ProtoRoleInfo;
class ProtoRankRecord;
class ProtoFBReadyInfo;
class ProtoFightPro;
class ProtoWarItem;
class ProtoSMBattleRankRec;
class ProtoLWarItem;
class WorldBossRank;
class ProtoWorldBossRank;
class ProtoShoutDetail;
class ProtoTreasure;
class ProtoScriptClean;
class ProtoHookDetail;
class ProtoHookSkill;
class ProtoFashionTipInfo;
class ProtoVipTimeTipInfo;
class ProtoScriptChapter;
class ProtoSysSetting;
class ProtoRpmRoleInfo;
class TipsItem;
class ProtoFBUseTimes;
class ProtoMoverPos;
class ProtoCustomerSVCRecord;
class ProtoMediaGiftDef;
class ProtoAreaRole;
class ProtoScriptInfo;
class ProtoAreaRecord;
class ProtoBuffStatus;
class ProtoShusanBoss;
class ProtoSuit;
class ProtoLvlReward;
class ProtoDailyRecord;
class ProtoRoleShape;
class ProtoCQAttackerInfo;
class ProtoWing;
class ProtoCQRank;
class ProtoThreeObj;
class ProtoEscortMapItem;
class ProtoRefineSuit;
class ProtoPanicItem;
class ProtoKiller;
class ProtoPeakWarRank;
class PActTypeItem;
class PRewardItem;
class ProtoGateRole;
class ProtoPackageItem;
class ProtoEquipPolishAttrInfo;
class ProtoEquipPolishStruct;
class ProtoEquipPolish;
class ProtoVipGift;
class ProtoTrialTask;
class ProtoWeddingIcon;
class ProtoShoutItem;
class PActPanelInfo;
class ProtoLeagueStoreApply;
class ProtoLeagueStoreApplyHis;
class ProtoActRewardItem;
class ProtoActRoleReward;
class ProtoPairLongString;
class ProtoPairLong;
class ProtoActRewardNotify;
class ProtoNearRole;
class ProtoTravelTeam;
class ProtoBrotherInfo;
class ProtoBrotherTask;
class ProtoMagicWeapon;
class ProtoAIllusion;
class ProtoTravelTeamer;
class ProtoPromotTeam;
class ProtoTravelPeakBet;
class ProtoMilitaryExploits;
class ProtoTravPeakWorth;
class ProtoMagicActBase;
class SecretTShopItem;
class StRankUnit;
class STHistoryRankUnit;
class PTLeagueItem;
class ProtoSession;
class Illustrations;
class Illus_group;
class Illus_class;
class ProtoFloorInfo;
class ProtoLScoreInfo;
class ProtoScriptAdvance;
class ProtoScriptExpInfo;
class ProtoSpecialAwardInfo;
class ProtoServer;
class ProtoWorldBossInfo;
class ProtoLeagueRankInfo;
class ProtoLWarInfo;
class ProtoItemId;
class ProtoSwordPoolTask;
class ProtoSvenDayItem;
class ProtoSevenDayItem;
class ProtoLegendTopRank;
class ProtoApplyInfo;
class ProtoPairMap;
class ProtoDonateRank;
class ProtoMAttackLabel;
class ProtoActivityLWarRank;
class ProtoChildAchieve;
class ProtoAchieveInfo;
class ProtoServerRecord;
class ProtoSlotInfo;
class ProtoPersonRecord;
class ProtoTimeLimitInfo;
class ProtoShopInfo;
class ProtoFashionDetail;
class ProtoWeddingDetail;
class ProtoWedTreasures;
class ProtoWeddingRole;
class ProtoWeddingRank;
class ProtoWedLabel;
class ProtoActRankInfo;
class ProtoWaveReward;
class ProtoPlayerCheer;
class ProtoCheerRecord;
class ProtoRechargeRank;
class ProtoMountInfo;
class ProtoEquipList;
class PActCumulativeLogin;
class ProtoLegendTop;
class ProtoWavePlayer;
class ProtoTransferInfo;
class ProtoScriptReset;
class ProtoBackActName;
class ProtoBackActInfo;
class ProtoBackActReward;
class ProtoTransferClient;
class ProtoBackActRewardIndex;
class PActTastList;
class MayRewardInfo;
class ProtoLimitValue;
class ActOpenLimitTime;
class ProtoRedPacketInfo;
class ProtoRunRole;
class ProtoAllRedActInfo;
class ProtoTrvlBaseRole;
class ProtoMayFashionInfo;
class ProtoTrvlBattleRank;
class ProtoGemInfo;
class ProtoTrvlWbossMail;
class MoldingNature;
class ProtoCleanInfo;
class FishDetail;
class ProtoTeamForceInfo;
class ProtoItemExchangeTimes;
class ProtoPeakQualityInfo;
class ProtoPeakKnockoutInfo;
class SpecialBoxChange;
class ProtoQualityRank;

// ===================================================================

class ProtoSceneAddress : public ::google::protobuf::Message {
 public:
  ProtoSceneAddress();
  virtual ~ProtoSceneAddress();
  
  ProtoSceneAddress(const ProtoSceneAddress& from);
  
  inline ProtoSceneAddress& operator=(const ProtoSceneAddress& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoSceneAddress& default_instance();
  
  void Swap(ProtoSceneAddress* other);
  
  // implements Message ----------------------------------------------
  
  ProtoSceneAddress* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoSceneAddress& from);
  void MergeFrom(const ProtoSceneAddress& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 scene_id = 1;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 1;
  inline ::google::protobuf::int32 scene_id() const;
  inline void set_scene_id(::google::protobuf::int32 value);
  
  // optional string address = 2;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 2;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const char* value, size_t size);
  inline ::std::string* mutable_address();
  inline ::std::string* release_address();
  
  // optional int32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);
  
  // optional string domain = 4;
  inline bool has_domain() const;
  inline void clear_domain();
  static const int kDomainFieldNumber = 4;
  inline const ::std::string& domain() const;
  inline void set_domain(const ::std::string& value);
  inline void set_domain(const char* value);
  inline void set_domain(const char* value, size_t size);
  inline ::std::string* mutable_domain();
  inline ::std::string* release_domain();
  
  // @@protoc_insertion_point(class_scope:ProtoSceneAddress)
 private:
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_domain();
  inline void clear_has_domain();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* address_;
  ::google::protobuf::int32 scene_id_;
  ::google::protobuf::int32 port_;
  ::std::string* domain_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoSceneAddress* default_instance_;
};
// -------------------------------------------------------------------

class ProtoCoord : public ::google::protobuf::Message {
 public:
  ProtoCoord();
  virtual ~ProtoCoord();
  
  ProtoCoord(const ProtoCoord& from);
  
  inline ProtoCoord& operator=(const ProtoCoord& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoCoord& default_instance();
  
  void Swap(ProtoCoord* other);
  
  // implements Message ----------------------------------------------
  
  ProtoCoord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoCoord& from);
  void MergeFrom(const ProtoCoord& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 pixel_x = 1;
  inline bool has_pixel_x() const;
  inline void clear_pixel_x();
  static const int kPixelXFieldNumber = 1;
  inline ::google::protobuf::int32 pixel_x() const;
  inline void set_pixel_x(::google::protobuf::int32 value);
  
  // optional int32 pixel_y = 2;
  inline bool has_pixel_y() const;
  inline void clear_pixel_y();
  static const int kPixelYFieldNumber = 2;
  inline ::google::protobuf::int32 pixel_y() const;
  inline void set_pixel_y(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoCoord)
 private:
  inline void set_has_pixel_x();
  inline void clear_has_pixel_x();
  inline void set_has_pixel_y();
  inline void clear_has_pixel_y();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 pixel_x_;
  ::google::protobuf::int32 pixel_y_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoCoord* default_instance_;
};
// -------------------------------------------------------------------

class ProtoSkill : public ::google::protobuf::Message {
 public:
  ProtoSkill();
  virtual ~ProtoSkill();
  
  ProtoSkill(const ProtoSkill& from);
  
  inline ProtoSkill& operator=(const ProtoSkill& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoSkill& default_instance();
  
  void Swap(ProtoSkill* other);
  
  // implements Message ----------------------------------------------
  
  ProtoSkill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoSkill& from);
  void MergeFrom(const ProtoSkill& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 skill_id = 1;
  inline bool has_skill_id() const;
  inline void clear_skill_id();
  static const int kSkillIdFieldNumber = 1;
  inline ::google::protobuf::int32 skill_id() const;
  inline void set_skill_id(::google::protobuf::int32 value);
  
  // optional int32 skill_level = 2;
  inline bool has_skill_level() const;
  inline void clear_skill_level();
  static const int kSkillLevelFieldNumber = 2;
  inline ::google::protobuf::int32 skill_level() const;
  inline void set_skill_level(::google::protobuf::int32 value);
  
  // optional int32 use_sec = 3;
  inline bool has_use_sec() const;
  inline void clear_use_sec();
  static const int kUseSecFieldNumber = 3;
  inline ::google::protobuf::int32 use_sec() const;
  inline void set_use_sec(::google::protobuf::int32 value);
  
  // optional int32 use_usec = 4;
  inline bool has_use_usec() const;
  inline void clear_use_usec();
  static const int kUseUsecFieldNumber = 4;
  inline ::google::protobuf::int32 use_usec() const;
  inline void set_use_usec(::google::protobuf::int32 value);
  
  // optional int32 use_times = 5;
  inline bool has_use_times() const;
  inline void clear_use_times();
  static const int kUseTimesFieldNumber = 5;
  inline ::google::protobuf::int32 use_times() const;
  inline void set_use_times(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoSkill)
 private:
  inline void set_has_skill_id();
  inline void clear_has_skill_id();
  inline void set_has_skill_level();
  inline void clear_has_skill_level();
  inline void set_has_use_sec();
  inline void clear_has_use_sec();
  inline void set_has_use_usec();
  inline void clear_has_use_usec();
  inline void set_has_use_times();
  inline void clear_has_use_times();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 skill_id_;
  ::google::protobuf::int32 skill_level_;
  ::google::protobuf::int32 use_sec_;
  ::google::protobuf::int32 use_usec_;
  ::google::protobuf::int32 use_times_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoSkill* default_instance_;
};
// -------------------------------------------------------------------

class ProtoMoney : public ::google::protobuf::Message {
 public:
  ProtoMoney();
  virtual ~ProtoMoney();
  
  ProtoMoney(const ProtoMoney& from);
  
  inline ProtoMoney& operator=(const ProtoMoney& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoMoney& default_instance();
  
  void Swap(ProtoMoney* other);
  
  // implements Message ----------------------------------------------
  
  ProtoMoney* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoMoney& from);
  void MergeFrom(const ProtoMoney& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 copper = 1;
  inline bool has_copper() const;
  inline void clear_copper();
  static const int kCopperFieldNumber = 1;
  inline ::google::protobuf::int32 copper() const;
  inline void set_copper(::google::protobuf::int32 value);
  
  // optional int32 gold = 2;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 2;
  inline ::google::protobuf::int32 gold() const;
  inline void set_gold(::google::protobuf::int32 value);
  
  // optional int32 bind_gold = 3;
  inline bool has_bind_gold() const;
  inline void clear_bind_gold();
  static const int kBindGoldFieldNumber = 3;
  inline ::google::protobuf::int32 bind_gold() const;
  inline void set_bind_gold(::google::protobuf::int32 value);
  
  // optional int32 bind_copper = 4;
  inline bool has_bind_copper() const;
  inline void clear_bind_copper();
  static const int kBindCopperFieldNumber = 4;
  inline ::google::protobuf::int32 bind_copper() const;
  inline void set_bind_copper(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoMoney)
 private:
  inline void set_has_copper();
  inline void clear_has_copper();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_bind_gold();
  inline void clear_has_bind_gold();
  inline void set_has_bind_copper();
  inline void clear_has_bind_copper();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 copper_;
  ::google::protobuf::int32 gold_;
  ::google::protobuf::int32 bind_gold_;
  ::google::protobuf::int32 bind_copper_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoMoney* default_instance_;
};
// -------------------------------------------------------------------

class ProtoItem : public ::google::protobuf::Message {
 public:
  ProtoItem();
  virtual ~ProtoItem();
  
  ProtoItem(const ProtoItem& from);
  
  inline ProtoItem& operator=(const ProtoItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoItem& default_instance();
  
  void Swap(ProtoItem* other);
  
  // implements Message ----------------------------------------------
  
  ProtoItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoItem& from);
  void MergeFrom(const ProtoItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 amount = 3;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 3;
  inline ::google::protobuf::int32 amount() const;
  inline void set_amount(::google::protobuf::int32 value);
  
  // optional int32 bind = 4;
  inline bool has_bind() const;
  inline void clear_bind();
  static const int kBindFieldNumber = 4;
  inline ::google::protobuf::int32 bind() const;
  inline void set_bind(::google::protobuf::int32 value);
  
  // optional .ProtoEquip equipment = 5;
  inline bool has_equipment() const;
  inline void clear_equipment();
  static const int kEquipmentFieldNumber = 5;
  inline const ::ProtoEquip& equipment() const;
  inline ::ProtoEquip* mutable_equipment();
  inline ::ProtoEquip* release_equipment();
  
  // optional .ProtoTreasure treausure = 6;
  inline bool has_treausure() const;
  inline void clear_treausure();
  static const int kTreausureFieldNumber = 6;
  inline const ::ProtoTreasure& treausure() const;
  inline ::ProtoTreasure* mutable_treausure();
  inline ::ProtoTreasure* release_treausure();
  
  // optional int32 use_times = 7;
  inline bool has_use_times() const;
  inline void clear_use_times();
  static const int kUseTimesFieldNumber = 7;
  inline ::google::protobuf::int32 use_times() const;
  inline void set_use_times(::google::protobuf::int32 value);
  
  // optional int64 use_tick = 8;
  inline bool has_use_tick() const;
  inline void clear_use_tick();
  static const int kUseTickFieldNumber = 8;
  inline ::google::protobuf::int64 use_tick() const;
  inline void set_use_tick(::google::protobuf::int64 value);
  
  // optional int32 new_tag = 9;
  inline bool has_new_tag() const;
  inline void clear_new_tag();
  static const int kNewTagFieldNumber = 9;
  inline ::google::protobuf::int32 new_tag() const;
  inline void set_new_tag(::google::protobuf::int32 value);
  
  // optional int64 unique_id = 10;
  inline bool has_unique_id() const;
  inline void clear_unique_id();
  static const int kUniqueIdFieldNumber = 10;
  inline ::google::protobuf::int64 unique_id() const;
  inline void set_unique_id(::google::protobuf::int64 value);
  
  // optional int32 force = 11;
  inline bool has_force() const;
  inline void clear_force();
  static const int kForceFieldNumber = 11;
  inline ::google::protobuf::int32 force() const;
  inline void set_force(::google::protobuf::int32 value);
  
  // optional uint64 timeout = 12;
  inline bool has_timeout() const;
  inline void clear_timeout();
  static const int kTimeoutFieldNumber = 12;
  inline ::google::protobuf::uint64 timeout() const;
  inline void set_timeout(::google::protobuf::uint64 value);
  
  // optional int32 out_time_item_id = 13;
  inline bool has_out_time_item_id() const;
  inline void clear_out_time_item_id();
  static const int kOutTimeItemIdFieldNumber = 13;
  inline ::google::protobuf::int32 out_time_item_id() const;
  inline void set_out_time_item_id(::google::protobuf::int32 value);
  
  // optional int32 out_time_item_amount = 14;
  inline bool has_out_time_item_amount() const;
  inline void clear_out_time_item_amount();
  static const int kOutTimeItemAmountFieldNumber = 14;
  inline ::google::protobuf::int32 out_time_item_amount() const;
  inline void set_out_time_item_amount(::google::protobuf::int32 value);
  
  // optional int32 out_time_item_bind = 15;
  inline bool has_out_time_item_bind() const;
  inline void clear_out_time_item_bind();
  static const int kOutTimeItemBindFieldNumber = 15;
  inline ::google::protobuf::int32 out_time_item_bind() const;
  inline void set_out_time_item_bind(::google::protobuf::int32 value);
  
  // optional int32 tips_level = 16;
  inline bool has_tips_level() const;
  inline void clear_tips_level();
  static const int kTipsLevelFieldNumber = 16;
  inline ::google::protobuf::int32 tips_level() const;
  inline void set_tips_level(::google::protobuf::int32 value);
  
  // repeated int32 tips_time_map = 17;
  inline int tips_time_map_size() const;
  inline void clear_tips_time_map();
  static const int kTipsTimeMapFieldNumber = 17;
  inline ::google::protobuf::int32 tips_time_map(int index) const;
  inline void set_tips_time_map(int index, ::google::protobuf::int32 value);
  inline void add_tips_time_map(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      tips_time_map() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_tips_time_map();
  
  // repeated int32 tips_status_map = 18;
  inline int tips_status_map_size() const;
  inline void clear_tips_status_map();
  static const int kTipsStatusMapFieldNumber = 18;
  inline ::google::protobuf::int32 tips_status_map(int index) const;
  inline void set_tips_status_map(int index, ::google::protobuf::int32 value);
  inline void add_tips_status_map(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      tips_status_map() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_tips_status_map();
  
  // @@protoc_insertion_point(class_scope:ProtoItem)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_amount();
  inline void clear_has_amount();
  inline void set_has_bind();
  inline void clear_has_bind();
  inline void set_has_equipment();
  inline void clear_has_equipment();
  inline void set_has_treausure();
  inline void clear_has_treausure();
  inline void set_has_use_times();
  inline void clear_has_use_times();
  inline void set_has_use_tick();
  inline void clear_has_use_tick();
  inline void set_has_new_tag();
  inline void clear_has_new_tag();
  inline void set_has_unique_id();
  inline void clear_has_unique_id();
  inline void set_has_force();
  inline void clear_has_force();
  inline void set_has_timeout();
  inline void clear_has_timeout();
  inline void set_has_out_time_item_id();
  inline void clear_has_out_time_item_id();
  inline void set_has_out_time_item_amount();
  inline void clear_has_out_time_item_amount();
  inline void set_has_out_time_item_bind();
  inline void clear_has_out_time_item_bind();
  inline void set_has_tips_level();
  inline void clear_has_tips_level();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 amount_;
  ::google::protobuf::int32 bind_;
  ::ProtoEquip* equipment_;
  ::ProtoTreasure* treausure_;
  ::google::protobuf::int64 use_tick_;
  ::google::protobuf::int32 use_times_;
  ::google::protobuf::int32 new_tag_;
  ::google::protobuf::int64 unique_id_;
  ::google::protobuf::uint64 timeout_;
  ::google::protobuf::int32 force_;
  ::google::protobuf::int32 out_time_item_id_;
  ::google::protobuf::int32 out_time_item_amount_;
  ::google::protobuf::int32 out_time_item_bind_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > tips_time_map_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > tips_status_map_;
  ::google::protobuf::int32 tips_level_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoItem* default_instance_;
};
// -------------------------------------------------------------------

class ProtoEquip : public ::google::protobuf::Message {
 public:
  ProtoEquip();
  virtual ~ProtoEquip();
  
  ProtoEquip(const ProtoEquip& from);
  
  inline ProtoEquip& operator=(const ProtoEquip& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoEquip& default_instance();
  
  void Swap(ProtoEquip* other);
  
  // implements Message ----------------------------------------------
  
  ProtoEquip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoEquip& from);
  void MergeFrom(const ProtoEquip& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 refine_level = 1;
  inline bool has_refine_level() const;
  inline void clear_refine_level();
  static const int kRefineLevelFieldNumber = 1;
  inline ::google::protobuf::int32 refine_level() const;
  inline void set_refine_level(::google::protobuf::int32 value);
  
  // optional .ProtoFashionInfo fashion_info = 2;
  inline bool has_fashion_info() const;
  inline void clear_fashion_info();
  static const int kFashionInfoFieldNumber = 2;
  inline const ::ProtoFashionInfo& fashion_info() const;
  inline ::ProtoFashionInfo* mutable_fashion_info();
  inline ::ProtoFashionInfo* release_fashion_info();
  
  // optional int32 refine_degree = 3;
  inline bool has_refine_degree() const;
  inline void clear_refine_degree();
  static const int kRefineDegreeFieldNumber = 3;
  inline ::google::protobuf::int32 refine_degree() const;
  inline void set_refine_degree(::google::protobuf::int32 value);
  
  // repeated .ProtoPairObj jewel_lists = 4;
  inline int jewel_lists_size() const;
  inline void clear_jewel_lists();
  static const int kJewelListsFieldNumber = 4;
  inline const ::ProtoPairObj& jewel_lists(int index) const;
  inline ::ProtoPairObj* mutable_jewel_lists(int index);
  inline ::ProtoPairObj* add_jewel_lists();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >&
      jewel_lists() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >*
      mutable_jewel_lists();
  
  // repeated .ProtoPairObj refine_lists = 5;
  inline int refine_lists_size() const;
  inline void clear_refine_lists();
  static const int kRefineListsFieldNumber = 5;
  inline const ::ProtoPairObj& refine_lists(int index) const;
  inline ::ProtoPairObj* mutable_refine_lists(int index);
  inline ::ProtoPairObj* add_refine_lists();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >&
      refine_lists() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >*
      mutable_refine_lists();
  
  // repeated .MoldingNature molding_nature = 6;
  inline int molding_nature_size() const;
  inline void clear_molding_nature();
  static const int kMoldingNatureFieldNumber = 6;
  inline const ::MoldingNature& molding_nature(int index) const;
  inline ::MoldingNature* mutable_molding_nature(int index);
  inline ::MoldingNature* add_molding_nature();
  inline const ::google::protobuf::RepeatedPtrField< ::MoldingNature >&
      molding_nature() const;
  inline ::google::protobuf::RepeatedPtrField< ::MoldingNature >*
      mutable_molding_nature();
  
  // @@protoc_insertion_point(class_scope:ProtoEquip)
 private:
  inline void set_has_refine_level();
  inline void clear_has_refine_level();
  inline void set_has_fashion_info();
  inline void clear_has_fashion_info();
  inline void set_has_refine_degree();
  inline void clear_has_refine_degree();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::ProtoFashionInfo* fashion_info_;
  ::google::protobuf::int32 refine_level_;
  ::google::protobuf::int32 refine_degree_;
  ::google::protobuf::RepeatedPtrField< ::ProtoPairObj > jewel_lists_;
  ::google::protobuf::RepeatedPtrField< ::ProtoPairObj > refine_lists_;
  ::google::protobuf::RepeatedPtrField< ::MoldingNature > molding_nature_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoEquip* default_instance_;
};
// -------------------------------------------------------------------

class ProtoChatInfo : public ::google::protobuf::Message {
 public:
  ProtoChatInfo();
  virtual ~ProtoChatInfo();
  
  ProtoChatInfo(const ProtoChatInfo& from);
  
  inline ProtoChatInfo& operator=(const ProtoChatInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoChatInfo& default_instance();
  
  void Swap(ProtoChatInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProtoChatInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoChatInfo& from);
  void MergeFrom(const ProtoChatInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 channel = 1;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 1;
  inline ::google::protobuf::int32 channel() const;
  inline void set_channel(::google::protobuf::int32 value);
  
  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional int64 voice_id = 3;
  inline bool has_voice_id() const;
  inline void clear_voice_id();
  static const int kVoiceIdFieldNumber = 3;
  inline ::google::protobuf::int64 voice_id() const;
  inline void set_voice_id(::google::protobuf::int64 value);
  
  // optional int32 voice_len = 4;
  inline bool has_voice_len() const;
  inline void clear_voice_len();
  static const int kVoiceLenFieldNumber = 4;
  inline ::google::protobuf::int32 voice_len() const;
  inline void set_voice_len(::google::protobuf::int32 value);
  
  // optional int64 role_id = 5;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 5;
  inline ::google::protobuf::int64 role_id() const;
  inline void set_role_id(::google::protobuf::int64 value);
  
  // optional string name = 6;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 6;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional int32 sex = 7;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 7;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);
  
  // optional int32 level = 8;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 8;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int32 vip = 9;
  inline bool has_vip() const;
  inline void clear_vip();
  static const int kVipFieldNumber = 9;
  inline ::google::protobuf::int32 vip() const;
  inline void set_vip(::google::protobuf::int32 value);
  
  // optional int32 team = 10;
  inline bool has_team() const;
  inline void clear_team();
  static const int kTeamFieldNumber = 10;
  inline ::google::protobuf::int32 team() const;
  inline void set_team(::google::protobuf::int32 value);
  
  // optional int32 label = 11;
  inline bool has_label() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 11;
  inline ::google::protobuf::int32 label() const;
  inline void set_label(::google::protobuf::int32 value);
  
  // optional int32 time = 12;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 12;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);
  
  // optional string content = 13;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 13;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  
  // optional int64 target_id = 14;
  inline bool has_target_id() const;
  inline void clear_target_id();
  static const int kTargetIdFieldNumber = 14;
  inline ::google::protobuf::int64 target_id() const;
  inline void set_target_id(::google::protobuf::int64 value);
  
  // optional string target_name = 15;
  inline bool has_target_name() const;
  inline void clear_target_name();
  static const int kTargetNameFieldNumber = 15;
  inline const ::std::string& target_name() const;
  inline void set_target_name(const ::std::string& value);
  inline void set_target_name(const char* value);
  inline void set_target_name(const char* value, size_t size);
  inline ::std::string* mutable_target_name();
  inline ::std::string* release_target_name();
  
  // optional int32 target_sex = 16;
  inline bool has_target_sex() const;
  inline void clear_target_sex();
  static const int kTargetSexFieldNumber = 16;
  inline ::google::protobuf::int32 target_sex() const;
  inline void set_target_sex(::google::protobuf::int32 value);
  
  // optional int32 target_level = 17;
  inline bool has_target_level() const;
  inline void clear_target_level();
  static const int kTargetLevelFieldNumber = 17;
  inline ::google::protobuf::int32 target_level() const;
  inline void set_target_level(::google::protobuf::int32 value);
  
  // optional int32 target_vip = 18;
  inline bool has_target_vip() const;
  inline void clear_target_vip();
  static const int kTargetVipFieldNumber = 18;
  inline ::google::protobuf::int32 target_vip() const;
  inline void set_target_vip(::google::protobuf::int32 value);
  
  // optional int32 target_team = 19;
  inline bool has_target_team() const;
  inline void clear_target_team();
  static const int kTargetTeamFieldNumber = 19;
  inline ::google::protobuf::int32 target_team() const;
  inline void set_target_team(::google::protobuf::int32 value);
  
  // optional int32 target_label = 20;
  inline bool has_target_label() const;
  inline void clear_target_label();
  static const int kTargetLabelFieldNumber = 20;
  inline ::google::protobuf::int32 target_label() const;
  inline void set_target_label(::google::protobuf::int32 value);
  
  // optional .ProtoFlaunt flaunt_detail = 21;
  inline bool has_flaunt_detail() const;
  inline void clear_flaunt_detail();
  static const int kFlauntDetailFieldNumber = 21;
  inline const ::ProtoFlaunt& flaunt_detail() const;
  inline ::ProtoFlaunt* mutable_flaunt_detail();
  inline ::ProtoFlaunt* release_flaunt_detail();
  
  // optional int32 career = 22;
  inline bool has_career() const;
  inline void clear_career();
  static const int kCareerFieldNumber = 22;
  inline ::google::protobuf::int32 career() const;
  inline void set_career(::google::protobuf::int32 value);
  
  // optional int32 permission = 23;
  inline bool has_permission() const;
  inline void clear_permission();
  static const int kPermissionFieldNumber = 23;
  inline ::google::protobuf::int32 permission() const;
  inline void set_permission(::google::protobuf::int32 value);
  
  // optional string server_prev = 24;
  inline bool has_server_prev() const;
  inline void clear_server_prev();
  static const int kServerPrevFieldNumber = 24;
  inline const ::std::string& server_prev() const;
  inline void set_server_prev(const ::std::string& value);
  inline void set_server_prev(const char* value);
  inline void set_server_prev(const char* value, size_t size);
  inline ::std::string* mutable_server_prev();
  inline ::std::string* release_server_prev();
  
  // optional int32 server_id = 25;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 25;
  inline ::google::protobuf::int32 server_id() const;
  inline void set_server_id(::google::protobuf::int32 value);
  
  // optional int32 scene_id = 26;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 26;
  inline ::google::protobuf::int32 scene_id() const;
  inline void set_scene_id(::google::protobuf::int32 value);
  
  // optional string league_name = 27;
  inline bool has_league_name() const;
  inline void clear_league_name();
  static const int kLeagueNameFieldNumber = 27;
  inline const ::std::string& league_name() const;
  inline void set_league_name(const ::std::string& value);
  inline void set_league_name(const char* value);
  inline void set_league_name(const char* value, size_t size);
  inline ::std::string* mutable_league_name();
  inline ::std::string* release_league_name();
  
  // optional string target_league_name = 28;
  inline bool has_target_league_name() const;
  inline void clear_target_league_name();
  static const int kTargetLeagueNameFieldNumber = 28;
  inline const ::std::string& target_league_name() const;
  inline void set_target_league_name(const ::std::string& value);
  inline void set_target_league_name(const char* value);
  inline void set_target_league_name(const char* value, size_t size);
  inline ::std::string* mutable_target_league_name();
  inline ::std::string* release_target_league_name();
  
  // @@protoc_insertion_point(class_scope:ProtoChatInfo)
 private:
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_voice_id();
  inline void clear_has_voice_id();
  inline void set_has_voice_len();
  inline void clear_has_voice_len();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_vip();
  inline void clear_has_vip();
  inline void set_has_team();
  inline void clear_has_team();
  inline void set_has_label();
  inline void clear_has_label();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_target_id();
  inline void clear_has_target_id();
  inline void set_has_target_name();
  inline void clear_has_target_name();
  inline void set_has_target_sex();
  inline void clear_has_target_sex();
  inline void set_has_target_level();
  inline void clear_has_target_level();
  inline void set_has_target_vip();
  inline void clear_has_target_vip();
  inline void set_has_target_team();
  inline void clear_has_target_team();
  inline void set_has_target_label();
  inline void clear_has_target_label();
  inline void set_has_flaunt_detail();
  inline void clear_has_flaunt_detail();
  inline void set_has_career();
  inline void clear_has_career();
  inline void set_has_permission();
  inline void clear_has_permission();
  inline void set_has_server_prev();
  inline void clear_has_server_prev();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_league_name();
  inline void clear_has_league_name();
  inline void set_has_target_league_name();
  inline void clear_has_target_league_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 channel_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int64 voice_id_;
  ::google::protobuf::int64 role_id_;
  ::google::protobuf::int32 voice_len_;
  ::google::protobuf::int32 sex_;
  ::std::string* name_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 vip_;
  ::google::protobuf::int32 team_;
  ::google::protobuf::int32 label_;
  ::std::string* content_;
  ::google::protobuf::int64 target_id_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 target_sex_;
  ::std::string* target_name_;
  ::google::protobuf::int32 target_level_;
  ::google::protobuf::int32 target_vip_;
  ::google::protobuf::int32 target_team_;
  ::google::protobuf::int32 target_label_;
  ::ProtoFlaunt* flaunt_detail_;
  ::google::protobuf::int32 career_;
  ::google::protobuf::int32 permission_;
  ::std::string* server_prev_;
  ::google::protobuf::int32 server_id_;
  ::google::protobuf::int32 scene_id_;
  ::std::string* league_name_;
  ::std::string* target_league_name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(28 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoChatInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProtoDelItem : public ::google::protobuf::Message {
 public:
  ProtoDelItem();
  virtual ~ProtoDelItem();
  
  ProtoDelItem(const ProtoDelItem& from);
  
  inline ProtoDelItem& operator=(const ProtoDelItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoDelItem& default_instance();
  
  void Swap(ProtoDelItem* other);
  
  // implements Message ----------------------------------------------
  
  ProtoDelItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoDelItem& from);
  void MergeFrom(const ProtoDelItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 del_index = 1;
  inline bool has_del_index() const;
  inline void clear_del_index();
  static const int kDelIndexFieldNumber = 1;
  inline ::google::protobuf::int32 del_index() const;
  inline void set_del_index(::google::protobuf::int32 value);
  
  // optional int32 del_amount = 2;
  inline bool has_del_amount() const;
  inline void clear_del_amount();
  static const int kDelAmountFieldNumber = 2;
  inline ::google::protobuf::int32 del_amount() const;
  inline void set_del_amount(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoDelItem)
 private:
  inline void set_has_del_index();
  inline void clear_has_del_index();
  inline void set_has_del_amount();
  inline void clear_has_del_amount();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 del_index_;
  ::google::protobuf::int32 del_amount_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoDelItem* default_instance_;
};
// -------------------------------------------------------------------

class ProtoTaskCond : public ::google::protobuf::Message {
 public:
  ProtoTaskCond();
  virtual ~ProtoTaskCond();
  
  ProtoTaskCond(const ProtoTaskCond& from);
  
  inline ProtoTaskCond& operator=(const ProtoTaskCond& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoTaskCond& default_instance();
  
  void Swap(ProtoTaskCond* other);
  
  // implements Message ----------------------------------------------
  
  ProtoTaskCond* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoTaskCond& from);
  void MergeFrom(const ProtoTaskCond& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // optional int32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);
  
  // optional int32 final_value = 3;
  inline bool has_final_value() const;
  inline void clear_final_value();
  static const int kFinalValueFieldNumber = 3;
  inline ::google::protobuf::int32 final_value() const;
  inline void set_final_value(::google::protobuf::int32 value);
  
  // optional int32 cond_id = 4;
  inline bool has_cond_id() const;
  inline void clear_cond_id();
  static const int kCondIdFieldNumber = 4;
  inline ::google::protobuf::int32 cond_id() const;
  inline void set_cond_id(::google::protobuf::int32 value);
  
  // optional int32 cond_type = 5;
  inline bool has_cond_type() const;
  inline void clear_cond_type();
  static const int kCondTypeFieldNumber = 5;
  inline ::google::protobuf::int32 cond_type() const;
  inline void set_cond_type(::google::protobuf::int32 value);
  
  // optional int32 kill_type = 6;
  inline bool has_kill_type() const;
  inline void clear_kill_type();
  static const int kKillTypeFieldNumber = 6;
  inline ::google::protobuf::int32 kill_type() const;
  inline void set_kill_type(::google::protobuf::int32 value);
  
  // optional int32 range_level = 7;
  inline bool has_range_level() const;
  inline void clear_range_level();
  static const int kRangeLevelFieldNumber = 7;
  inline ::google::protobuf::int32 range_level() const;
  inline void set_range_level(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoTaskCond)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_final_value();
  inline void clear_has_final_value();
  inline void set_has_cond_id();
  inline void clear_has_cond_id();
  inline void set_has_cond_type();
  inline void clear_has_cond_type();
  inline void set_has_kill_type();
  inline void clear_has_kill_type();
  inline void set_has_range_level();
  inline void clear_has_range_level();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 value_;
  ::google::protobuf::int32 final_value_;
  ::google::protobuf::int32 cond_id_;
  ::google::protobuf::int32 cond_type_;
  ::google::protobuf::int32 kill_type_;
  ::google::protobuf::int32 range_level_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoTaskCond* default_instance_;
};
// -------------------------------------------------------------------

class ProtoTaskInfo : public ::google::protobuf::Message {
 public:
  ProtoTaskInfo();
  virtual ~ProtoTaskInfo();
  
  ProtoTaskInfo(const ProtoTaskInfo& from);
  
  inline ProtoTaskInfo& operator=(const ProtoTaskInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoTaskInfo& default_instance();
  
  void Swap(ProtoTaskInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProtoTaskInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoTaskInfo& from);
  void MergeFrom(const ProtoTaskInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 task_id = 1;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  inline ::google::protobuf::int32 task_id() const;
  inline void set_task_id(::google::protobuf::int32 value);
  
  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional int32 status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);
  
  // repeated .ProtoTaskCond cond_list = 4;
  inline int cond_list_size() const;
  inline void clear_cond_list();
  static const int kCondListFieldNumber = 4;
  inline const ::ProtoTaskCond& cond_list(int index) const;
  inline ::ProtoTaskCond* mutable_cond_list(int index);
  inline ::ProtoTaskCond* add_cond_list();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoTaskCond >&
      cond_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoTaskCond >*
      mutable_cond_list();
  
  // optional int32 routine_dice = 5;
  inline bool has_routine_dice() const;
  inline void clear_routine_dice();
  static const int kRoutineDiceFieldNumber = 5;
  inline ::google::protobuf::int32 routine_dice() const;
  inline void set_routine_dice(::google::protobuf::int32 value);
  
  // optional int32 is_first_routine = 6;
  inline bool has_is_first_routine() const;
  inline void clear_is_first_routine();
  static const int kIsFirstRoutineFieldNumber = 6;
  inline ::google::protobuf::int32 is_first_routine() const;
  inline void set_is_first_routine(::google::protobuf::int32 value);
  
  // optional int32 task_star = 7;
  inline bool has_task_star() const;
  inline void clear_task_star();
  static const int kTaskStarFieldNumber = 7;
  inline ::google::protobuf::int32 task_star() const;
  inline void set_task_star(::google::protobuf::int32 value);
  
  // optional int32 fast_finish_rate = 8;
  inline bool has_fast_finish_rate() const;
  inline void clear_fast_finish_rate();
  static const int kFastFinishRateFieldNumber = 8;
  inline ::google::protobuf::int32 fast_finish_rate() const;
  inline void set_fast_finish_rate(::google::protobuf::int32 value);
  
  // optional int32 routine_index = 9;
  inline bool has_routine_index() const;
  inline void clear_routine_index();
  static const int kRoutineIndexFieldNumber = 9;
  inline ::google::protobuf::int32 routine_index() const;
  inline void set_routine_index(::google::protobuf::int32 value);
  
  // optional int32 routine_total = 10;
  inline bool has_routine_total() const;
  inline void clear_routine_total();
  static const int kRoutineTotalFieldNumber = 10;
  inline ::google::protobuf::int32 routine_total() const;
  inline void set_routine_total(::google::protobuf::int32 value);
  
  // optional int32 is_routine = 11;
  inline bool has_is_routine() const;
  inline void clear_is_routine();
  static const int kIsRoutineFieldNumber = 11;
  inline ::google::protobuf::int32 is_routine() const;
  inline void set_is_routine(::google::protobuf::int32 value);
  
  // optional .ProtoThreeObj offer_routine_info = 12;
  inline bool has_offer_routine_info() const;
  inline void clear_offer_routine_info();
  static const int kOfferRoutineInfoFieldNumber = 12;
  inline const ::ProtoThreeObj& offer_routine_info() const;
  inline ::ProtoThreeObj* mutable_offer_routine_info();
  inline ::ProtoThreeObj* release_offer_routine_info();
  
  // @@protoc_insertion_point(class_scope:ProtoTaskInfo)
 private:
  inline void set_has_task_id();
  inline void clear_has_task_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_routine_dice();
  inline void clear_has_routine_dice();
  inline void set_has_is_first_routine();
  inline void clear_has_is_first_routine();
  inline void set_has_task_star();
  inline void clear_has_task_star();
  inline void set_has_fast_finish_rate();
  inline void clear_has_fast_finish_rate();
  inline void set_has_routine_index();
  inline void clear_has_routine_index();
  inline void set_has_routine_total();
  inline void clear_has_routine_total();
  inline void set_has_is_routine();
  inline void clear_has_is_routine();
  inline void set_has_offer_routine_info();
  inline void clear_has_offer_routine_info();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 task_id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::RepeatedPtrField< ::ProtoTaskCond > cond_list_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 routine_dice_;
  ::google::protobuf::int32 is_first_routine_;
  ::google::protobuf::int32 task_star_;
  ::google::protobuf::int32 fast_finish_rate_;
  ::google::protobuf::int32 routine_index_;
  ::google::protobuf::int32 routine_total_;
  ::google::protobuf::int32 is_routine_;
  ::ProtoThreeObj* offer_routine_info_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoTaskInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProtoFriendInfo : public ::google::protobuf::Message {
 public:
  ProtoFriendInfo();
  virtual ~ProtoFriendInfo();
  
  ProtoFriendInfo(const ProtoFriendInfo& from);
  
  inline ProtoFriendInfo& operator=(const ProtoFriendInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoFriendInfo& default_instance();
  
  void Swap(ProtoFriendInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProtoFriendInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoFriendInfo& from);
  void MergeFrom(const ProtoFriendInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int64 role_id() const;
  inline void set_role_id(::google::protobuf::int64 value);
  
  // optional int64 icon_id = 2;
  inline bool has_icon_id() const;
  inline void clear_icon_id();
  static const int kIconIdFieldNumber = 2;
  inline ::google::protobuf::int64 icon_id() const;
  inline void set_icon_id(::google::protobuf::int64 value);
  
  // optional int64 league_id = 3;
  inline bool has_league_id() const;
  inline void clear_league_id();
  static const int kLeagueIdFieldNumber = 3;
  inline ::google::protobuf::int64 league_id() const;
  inline void set_league_id(::google::protobuf::int64 value);
  
  // optional string league_name = 4;
  inline bool has_league_name() const;
  inline void clear_league_name();
  static const int kLeagueNameFieldNumber = 4;
  inline const ::std::string& league_name() const;
  inline void set_league_name(const ::std::string& value);
  inline void set_league_name(const char* value);
  inline void set_league_name(const char* value, size_t size);
  inline ::std::string* mutable_league_name();
  inline ::std::string* release_league_name();
  
  // optional int32 friend_type = 5;
  inline bool has_friend_type() const;
  inline void clear_friend_type();
  static const int kFriendTypeFieldNumber = 5;
  inline ::google::protobuf::int32 friend_type() const;
  inline void set_friend_type(::google::protobuf::int32 value);
  
  // optional int32 vip_status = 6;
  inline bool has_vip_status() const;
  inline void clear_vip_status();
  static const int kVipStatusFieldNumber = 6;
  inline ::google::protobuf::int32 vip_status() const;
  inline void set_vip_status(::google::protobuf::int32 value);
  
  // optional int32 is_online = 7;
  inline bool has_is_online() const;
  inline void clear_is_online();
  static const int kIsOnlineFieldNumber = 7;
  inline ::google::protobuf::int32 is_online() const;
  inline void set_is_online(::google::protobuf::int32 value);
  
  // optional int32 sex = 8;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 8;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);
  
  // optional int32 career = 9;
  inline bool has_career() const;
  inline void clear_career();
  static const int kCareerFieldNumber = 9;
  inline ::google::protobuf::int32 career() const;
  inline void set_career(::google::protobuf::int32 value);
  
  // optional int32 level = 10;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 10;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int32 team_status = 11;
  inline bool has_team_status() const;
  inline void clear_team_status();
  static const int kTeamStatusFieldNumber = 11;
  inline ::google::protobuf::int32 team_status() const;
  inline void set_team_status(::google::protobuf::int32 value);
  
  // optional string name = 12;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 12;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional int32 intimacy = 13;
  inline bool has_intimacy() const;
  inline void clear_intimacy();
  static const int kIntimacyFieldNumber = 13;
  inline ::google::protobuf::int32 intimacy() const;
  inline void set_intimacy(::google::protobuf::int32 value);
  
  // optional int32 force = 14;
  inline bool has_force() const;
  inline void clear_force();
  static const int kForceFieldNumber = 14;
  inline ::google::protobuf::int32 force() const;
  inline void set_force(::google::protobuf::int32 value);
  
  // optional int32 scene_id = 15;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 15;
  inline ::google::protobuf::int32 scene_id() const;
  inline void set_scene_id(::google::protobuf::int32 value);
  
  // optional int32 distance = 16;
  inline bool has_distance() const;
  inline void clear_distance();
  static const int kDistanceFieldNumber = 16;
  inline ::google::protobuf::int32 distance() const;
  inline void set_distance(::google::protobuf::int32 value);
  
  // optional int32 pixel_x = 17;
  inline bool has_pixel_x() const;
  inline void clear_pixel_x();
  static const int kPixelXFieldNumber = 17;
  inline ::google::protobuf::int32 pixel_x() const;
  inline void set_pixel_x(::google::protobuf::int32 value);
  
  // optional int32 pixel_y = 18;
  inline bool has_pixel_y() const;
  inline void clear_pixel_y();
  static const int kPixelYFieldNumber = 18;
  inline ::google::protobuf::int32 pixel_y() const;
  inline void set_pixel_y(::google::protobuf::int32 value);
  
  // optional int32 name_color = 19;
  inline bool has_name_color() const;
  inline void clear_name_color();
  static const int kNameColorFieldNumber = 19;
  inline ::google::protobuf::int32 name_color() const;
  inline void set_name_color(::google::protobuf::int32 value);
  
  // optional int32 is_give_strength = 20;
  inline bool has_is_give_strength() const;
  inline void clear_is_give_strength();
  static const int kIsGiveStrengthFieldNumber = 20;
  inline ::google::protobuf::int32 is_give_strength() const;
  inline void set_is_give_strength(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoFriendInfo)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_icon_id();
  inline void clear_has_icon_id();
  inline void set_has_league_id();
  inline void clear_has_league_id();
  inline void set_has_league_name();
  inline void clear_has_league_name();
  inline void set_has_friend_type();
  inline void clear_has_friend_type();
  inline void set_has_vip_status();
  inline void clear_has_vip_status();
  inline void set_has_is_online();
  inline void clear_has_is_online();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_career();
  inline void clear_has_career();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_team_status();
  inline void clear_has_team_status();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_intimacy();
  inline void clear_has_intimacy();
  inline void set_has_force();
  inline void clear_has_force();
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_distance();
  inline void clear_has_distance();
  inline void set_has_pixel_x();
  inline void clear_has_pixel_x();
  inline void set_has_pixel_y();
  inline void clear_has_pixel_y();
  inline void set_has_name_color();
  inline void clear_has_name_color();
  inline void set_has_is_give_strength();
  inline void clear_has_is_give_strength();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 role_id_;
  ::google::protobuf::int64 icon_id_;
  ::google::protobuf::int64 league_id_;
  ::std::string* league_name_;
  ::google::protobuf::int32 friend_type_;
  ::google::protobuf::int32 vip_status_;
  ::google::protobuf::int32 is_online_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 career_;
  ::google::protobuf::int32 level_;
  ::std::string* name_;
  ::google::protobuf::int32 team_status_;
  ::google::protobuf::int32 intimacy_;
  ::google::protobuf::int32 force_;
  ::google::protobuf::int32 scene_id_;
  ::google::protobuf::int32 distance_;
  ::google::protobuf::int32 pixel_x_;
  ::google::protobuf::int32 pixel_y_;
  ::google::protobuf::int32 name_color_;
  ::google::protobuf::int32 is_give_strength_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(20 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoFriendInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProtoSkillTarget : public ::google::protobuf::Message {
 public:
  ProtoSkillTarget();
  virtual ~ProtoSkillTarget();
  
  ProtoSkillTarget(const ProtoSkillTarget& from);
  
  inline ProtoSkillTarget& operator=(const ProtoSkillTarget& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoSkillTarget& default_instance();
  
  void Swap(ProtoSkillTarget* other);
  
  // implements Message ----------------------------------------------
  
  ProtoSkillTarget* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoSkillTarget& from);
  void MergeFrom(const ProtoSkillTarget& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 target_id = 1;
  inline bool has_target_id() const;
  inline void clear_target_id();
  static const int kTargetIdFieldNumber = 1;
  inline ::google::protobuf::int64 target_id() const;
  inline void set_target_id(::google::protobuf::int64 value);
  
  // optional int32 is_death = 2;
  inline bool has_is_death() const;
  inline void clear_is_death();
  static const int kIsDeathFieldNumber = 2;
  inline ::google::protobuf::int32 is_death() const;
  inline void set_is_death(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoSkillTarget)
 private:
  inline void set_has_target_id();
  inline void clear_has_target_id();
  inline void set_has_is_death();
  inline void clear_has_is_death();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 target_id_;
  ::google::protobuf::int32 is_death_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoSkillTarget* default_instance_;
};
// -------------------------------------------------------------------

class ProtoFightInfo : public ::google::protobuf::Message {
 public:
  ProtoFightInfo();
  virtual ~ProtoFightInfo();
  
  ProtoFightInfo(const ProtoFightInfo& from);
  
  inline ProtoFightInfo& operator=(const ProtoFightInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoFightInfo& default_instance();
  
  void Swap(ProtoFightInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProtoFightInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoFightInfo& from);
  void MergeFrom(const ProtoFightInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional int32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);
  
  // optional int64 attackor_id = 3;
  inline bool has_attackor_id() const;
  inline void clear_attackor_id();
  static const int kAttackorIdFieldNumber = 3;
  inline ::google::protobuf::int64 attackor_id() const;
  inline void set_attackor_id(::google::protobuf::int64 value);
  
  // optional int32 skill_id = 4;
  inline bool has_skill_id() const;
  inline void clear_skill_id();
  static const int kSkillIdFieldNumber = 4;
  inline ::google::protobuf::int32 skill_id() const;
  inline void set_skill_id(::google::protobuf::int32 value);
  
  // optional int32 tips1 = 5;
  inline bool has_tips1() const;
  inline void clear_tips1();
  static const int kTips1FieldNumber = 5;
  inline ::google::protobuf::int32 tips1() const;
  inline void set_tips1(::google::protobuf::int32 value);
  
  // optional int32 tips2 = 6;
  inline bool has_tips2() const;
  inline void clear_tips2();
  static const int kTips2FieldNumber = 6;
  inline ::google::protobuf::int32 tips2() const;
  inline void set_tips2(::google::protobuf::int32 value);
  
  // optional int32 tips3 = 7;
  inline bool has_tips3() const;
  inline void clear_tips3();
  static const int kTips3FieldNumber = 7;
  inline ::google::protobuf::int32 tips3() const;
  inline void set_tips3(::google::protobuf::int32 value);
  
  // optional int32 tips4 = 8;
  inline bool has_tips4() const;
  inline void clear_tips4();
  static const int kTips4FieldNumber = 8;
  inline ::google::protobuf::int32 tips4() const;
  inline void set_tips4(::google::protobuf::int32 value);
  
  // optional int64 experience = 9;
  inline bool has_experience() const;
  inline void clear_experience();
  static const int kExperienceFieldNumber = 9;
  inline ::google::protobuf::int64 experience() const;
  inline void set_experience(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:ProtoFightInfo)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_attackor_id();
  inline void clear_has_attackor_id();
  inline void set_has_skill_id();
  inline void clear_has_skill_id();
  inline void set_has_tips1();
  inline void clear_has_tips1();
  inline void set_has_tips2();
  inline void clear_has_tips2();
  inline void set_has_tips3();
  inline void clear_has_tips3();
  inline void set_has_tips4();
  inline void clear_has_tips4();
  inline void set_has_experience();
  inline void clear_has_experience();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 value_;
  ::google::protobuf::int64 attackor_id_;
  ::google::protobuf::int32 skill_id_;
  ::google::protobuf::int32 tips1_;
  ::google::protobuf::int32 tips2_;
  ::google::protobuf::int32 tips3_;
  ::google::protobuf::int64 experience_;
  ::google::protobuf::int32 tips4_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoFightInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProtoStatus : public ::google::protobuf::Message {
 public:
  ProtoStatus();
  virtual ~ProtoStatus();
  
  ProtoStatus(const ProtoStatus& from);
  
  inline ProtoStatus& operator=(const ProtoStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoStatus& default_instance();
  
  void Swap(ProtoStatus* other);
  
  // implements Message ----------------------------------------------
  
  ProtoStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoStatus& from);
  void MergeFrom(const ProtoStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);
  
  // optional int32 view_status = 2;
  inline bool has_view_status() const;
  inline void clear_view_status();
  static const int kViewStatusFieldNumber = 2;
  inline ::google::protobuf::int32 view_status() const;
  inline void set_view_status(::google::protobuf::int32 value);
  
  // optional int32 value1 = 3;
  inline bool has_value1() const;
  inline void clear_value1();
  static const int kValue1FieldNumber = 3;
  inline ::google::protobuf::int32 value1() const;
  inline void set_value1(::google::protobuf::int32 value);
  
  // optional int32 value2 = 4;
  inline bool has_value2() const;
  inline void clear_value2();
  static const int kValue2FieldNumber = 4;
  inline ::google::protobuf::int32 value2() const;
  inline void set_value2(::google::protobuf::int32 value);
  
  // optional int32 value3 = 5;
  inline bool has_value3() const;
  inline void clear_value3();
  static const int kValue3FieldNumber = 5;
  inline ::google::protobuf::int32 value3() const;
  inline void set_value3(::google::protobuf::int32 value);
  
  // optional int32 last_tick = 6;
  inline bool has_last_tick() const;
  inline void clear_last_tick();
  static const int kLastTickFieldNumber = 6;
  inline ::google::protobuf::int32 last_tick() const;
  inline void set_last_tick(::google::protobuf::int32 value);
  
  // optional int32 cool_tick = 7;
  inline bool has_cool_tick() const;
  inline void clear_cool_tick();
  static const int kCoolTickFieldNumber = 7;
  inline ::google::protobuf::int32 cool_tick() const;
  inline void set_cool_tick(::google::protobuf::int32 value);
  
  // optional int64 attackor = 8;
  inline bool has_attackor() const;
  inline void clear_attackor();
  static const int kAttackorFieldNumber = 8;
  inline ::google::protobuf::int64 attackor() const;
  inline void set_attackor(::google::protobuf::int64 value);
  
  // repeated int32 value6 = 9;
  inline int value6_size() const;
  inline void clear_value6();
  static const int kValue6FieldNumber = 9;
  inline ::google::protobuf::int32 value6(int index) const;
  inline void set_value6(int index, ::google::protobuf::int32 value);
  inline void add_value6(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      value6() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_value6();
  
  // @@protoc_insertion_point(class_scope:ProtoStatus)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_view_status();
  inline void clear_has_view_status();
  inline void set_has_value1();
  inline void clear_has_value1();
  inline void set_has_value2();
  inline void clear_has_value2();
  inline void set_has_value3();
  inline void clear_has_value3();
  inline void set_has_last_tick();
  inline void clear_has_last_tick();
  inline void set_has_cool_tick();
  inline void clear_has_cool_tick();
  inline void set_has_attackor();
  inline void clear_has_attackor();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 view_status_;
  ::google::protobuf::int32 value1_;
  ::google::protobuf::int32 value2_;
  ::google::protobuf::int32 value3_;
  ::google::protobuf::int32 last_tick_;
  ::google::protobuf::int64 attackor_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > value6_;
  ::google::protobuf::int32 cool_tick_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoStatus* default_instance_;
};
// -------------------------------------------------------------------

class ProtoMarketItem : public ::google::protobuf::Message {
 public:
  ProtoMarketItem();
  virtual ~ProtoMarketItem();
  
  ProtoMarketItem(const ProtoMarketItem& from);
  
  inline ProtoMarketItem& operator=(const ProtoMarketItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoMarketItem& default_instance();
  
  void Swap(ProtoMarketItem* other);
  
  // implements Message ----------------------------------------------
  
  ProtoMarketItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoMarketItem& from);
  void MergeFrom(const ProtoMarketItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 market_index = 1;
  inline bool has_market_index() const;
  inline void clear_market_index();
  static const int kMarketIndexFieldNumber = 1;
  inline ::google::protobuf::int32 market_index() const;
  inline void set_market_index(::google::protobuf::int32 value);
  
  // optional int32 item_id = 2;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::int32 item_id() const;
  inline void set_item_id(::google::protobuf::int32 value);
  
  // optional int32 item_amount = 3;
  inline bool has_item_amount() const;
  inline void clear_item_amount();
  static const int kItemAmountFieldNumber = 3;
  inline ::google::protobuf::int32 item_amount() const;
  inline void set_item_amount(::google::protobuf::int32 value);
  
  // optional int32 money_type = 4;
  inline bool has_money_type() const;
  inline void clear_money_type();
  static const int kMoneyTypeFieldNumber = 4;
  inline ::google::protobuf::int32 money_type() const;
  inline void set_money_type(::google::protobuf::int32 value);
  
  // optional int32 price = 5;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 5;
  inline ::google::protobuf::int32 price() const;
  inline void set_price(::google::protobuf::int32 value);
  
  // optional int32 left_time = 6;
  inline bool has_left_time() const;
  inline void clear_left_time();
  static const int kLeftTimeFieldNumber = 6;
  inline ::google::protobuf::int32 left_time() const;
  inline void set_left_time(::google::protobuf::int32 value);
  
  // optional .ProtoEquip equip = 7;
  inline bool has_equip() const;
  inline void clear_equip();
  static const int kEquipFieldNumber = 7;
  inline const ::ProtoEquip& equip() const;
  inline ::ProtoEquip* mutable_equip();
  inline ::ProtoEquip* release_equip();
  
  // @@protoc_insertion_point(class_scope:ProtoMarketItem)
 private:
  inline void set_has_market_index();
  inline void clear_has_market_index();
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_item_amount();
  inline void clear_has_item_amount();
  inline void set_has_money_type();
  inline void clear_has_money_type();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_left_time();
  inline void clear_has_left_time();
  inline void set_has_equip();
  inline void clear_has_equip();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 market_index_;
  ::google::protobuf::int32 item_id_;
  ::google::protobuf::int32 item_amount_;
  ::google::protobuf::int32 money_type_;
  ::google::protobuf::int32 price_;
  ::google::protobuf::int32 left_time_;
  ::ProtoEquip* equip_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoMarketItem* default_instance_;
};
// -------------------------------------------------------------------

class ProtoSellOut : public ::google::protobuf::Message {
 public:
  ProtoSellOut();
  virtual ~ProtoSellOut();
  
  ProtoSellOut(const ProtoSellOut& from);
  
  inline ProtoSellOut& operator=(const ProtoSellOut& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoSellOut& default_instance();
  
  void Swap(ProtoSellOut* other);
  
  // implements Message ----------------------------------------------
  
  ProtoSellOut* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoSellOut& from);
  void MergeFrom(const ProtoSellOut& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // optional int32 item_id = 2;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::int32 item_id() const;
  inline void set_item_id(::google::protobuf::int32 value);
  
  // optional int32 item_bind = 3;
  inline bool has_item_bind() const;
  inline void clear_item_bind();
  static const int kItemBindFieldNumber = 3;
  inline ::google::protobuf::int32 item_bind() const;
  inline void set_item_bind(::google::protobuf::int32 value);
  
  // optional int32 item_amount = 4;
  inline bool has_item_amount() const;
  inline void clear_item_amount();
  static const int kItemAmountFieldNumber = 4;
  inline ::google::protobuf::int32 item_amount() const;
  inline void set_item_amount(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoSellOut)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_item_bind();
  inline void clear_has_item_bind();
  inline void set_has_item_amount();
  inline void clear_has_item_amount();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 item_id_;
  ::google::protobuf::int32 item_bind_;
  ::google::protobuf::int32 item_amount_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoSellOut* default_instance_;
};
// -------------------------------------------------------------------

class ProtoMailInfo : public ::google::protobuf::Message {
 public:
  ProtoMailInfo();
  virtual ~ProtoMailInfo();
  
  ProtoMailInfo(const ProtoMailInfo& from);
  
  inline ProtoMailInfo& operator=(const ProtoMailInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoMailInfo& default_instance();
  
  void Swap(ProtoMailInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProtoMailInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoMailInfo& from);
  void MergeFrom(const ProtoMailInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 mail_id = 1;
  inline bool has_mail_id() const;
  inline void clear_mail_id();
  static const int kMailIdFieldNumber = 1;
  inline ::google::protobuf::int64 mail_id() const;
  inline void set_mail_id(::google::protobuf::int64 value);
  
  // optional int32 mail_type = 2;
  inline bool has_mail_type() const;
  inline void clear_mail_type();
  static const int kMailTypeFieldNumber = 2;
  inline ::google::protobuf::int32 mail_type() const;
  inline void set_mail_type(::google::protobuf::int32 value);
  
  // optional int64 mail_time = 3;
  inline bool has_mail_time() const;
  inline void clear_mail_time();
  static const int kMailTimeFieldNumber = 3;
  inline ::google::protobuf::int64 mail_time() const;
  inline void set_mail_time(::google::protobuf::int64 value);
  
  // optional int32 has_read = 4;
  inline bool has_has_read() const;
  inline void clear_has_read();
  static const int kHasReadFieldNumber = 4;
  inline ::google::protobuf::int32 has_read() const;
  inline void set_has_read(::google::protobuf::int32 value);
  
  // optional string role_name = 5;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 5;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  
  // optional string mail_title = 6;
  inline bool has_mail_title() const;
  inline void clear_mail_title();
  static const int kMailTitleFieldNumber = 6;
  inline const ::std::string& mail_title() const;
  inline void set_mail_title(const ::std::string& value);
  inline void set_mail_title(const char* value);
  inline void set_mail_title(const char* value, size_t size);
  inline ::std::string* mutable_mail_title();
  inline ::std::string* release_mail_title();
  
  // optional int32 has_attach = 7;
  inline bool has_has_attach() const;
  inline void clear_has_attach();
  static const int kHasAttachFieldNumber = 7;
  inline ::google::protobuf::int32 has_attach() const;
  inline void set_has_attach(::google::protobuf::int32 value);
  
  // optional int32 left_minute = 8;
  inline bool has_left_minute() const;
  inline void clear_left_minute();
  static const int kLeftMinuteFieldNumber = 8;
  inline ::google::protobuf::int32 left_minute() const;
  inline void set_left_minute(::google::protobuf::int32 value);
  
  // optional int64 mail_read_tick = 9;
  inline bool has_mail_read_tick() const;
  inline void clear_mail_read_tick();
  static const int kMailReadTickFieldNumber = 9;
  inline ::google::protobuf::int64 mail_read_tick() const;
  inline void set_mail_read_tick(::google::protobuf::int64 value);
  
  // optional int64 sender_id = 10;
  inline bool has_sender_id() const;
  inline void clear_sender_id();
  static const int kSenderIdFieldNumber = 10;
  inline ::google::protobuf::int64 sender_id() const;
  inline void set_sender_id(::google::protobuf::int64 value);
  
  // optional string sender_name = 11;
  inline bool has_sender_name() const;
  inline void clear_sender_name();
  static const int kSenderNameFieldNumber = 11;
  inline const ::std::string& sender_name() const;
  inline void set_sender_name(const ::std::string& value);
  inline void set_sender_name(const char* value);
  inline void set_sender_name(const char* value, size_t size);
  inline ::std::string* mutable_sender_name();
  inline ::std::string* release_sender_name();
  
  // optional int64 receiver_id = 12;
  inline bool has_receiver_id() const;
  inline void clear_receiver_id();
  static const int kReceiverIdFieldNumber = 12;
  inline ::google::protobuf::int64 receiver_id() const;
  inline void set_receiver_id(::google::protobuf::int64 value);
  
  // optional string receiver_name = 13;
  inline bool has_receiver_name() const;
  inline void clear_receiver_name();
  static const int kReceiverNameFieldNumber = 13;
  inline const ::std::string& receiver_name() const;
  inline void set_receiver_name(const ::std::string& value);
  inline void set_receiver_name(const char* value);
  inline void set_receiver_name(const char* value, size_t size);
  inline ::std::string* mutable_receiver_name();
  inline ::std::string* release_receiver_name();
  
  // optional string mail_content = 14;
  inline bool has_mail_content() const;
  inline void clear_mail_content();
  static const int kMailContentFieldNumber = 14;
  inline const ::std::string& mail_content() const;
  inline void set_mail_content(const ::std::string& value);
  inline void set_mail_content(const char* value);
  inline void set_mail_content(const char* value, size_t size);
  inline ::std::string* mutable_mail_content();
  inline ::std::string* release_mail_content();
  
  // repeated .ProtoItem attach_list = 15;
  inline int attach_list_size() const;
  inline void clear_attach_list();
  static const int kAttachListFieldNumber = 15;
  inline const ::ProtoItem& attach_list(int index) const;
  inline ::ProtoItem* mutable_attach_list(int index);
  inline ::ProtoItem* add_attach_list();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoItem >&
      attach_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoItem >*
      mutable_attach_list();
  
  // optional .ProtoMoney attach_money = 16;
  inline bool has_attach_money() const;
  inline void clear_attach_money();
  static const int kAttachMoneyFieldNumber = 16;
  inline const ::ProtoMoney& attach_money() const;
  inline ::ProtoMoney* mutable_attach_money();
  inline ::ProtoMoney* release_attach_money();
  
  // optional int32 label = 17;
  inline bool has_label() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 17;
  inline ::google::protobuf::int32 label() const;
  inline void set_label(::google::protobuf::int32 value);
  
  // optional int32 exploit = 18;
  inline bool has_exploit() const;
  inline void clear_exploit();
  static const int kExploitFieldNumber = 18;
  inline ::google::protobuf::int32 exploit() const;
  inline void set_exploit(::google::protobuf::int32 value);
  
  // optional int32 format = 19;
  inline bool has_format() const;
  inline void clear_format();
  static const int kFormatFieldNumber = 19;
  inline ::google::protobuf::int32 format() const;
  inline void set_format(::google::protobuf::int32 value);
  
  // optional int32 sender_vip = 20;
  inline bool has_sender_vip() const;
  inline void clear_sender_vip();
  static const int kSenderVipFieldNumber = 20;
  inline ::google::protobuf::int32 sender_vip() const;
  inline void set_sender_vip(::google::protobuf::int32 value);
  
  // optional int32 st_score = 21;
  inline bool has_st_score() const;
  inline void clear_st_score();
  static const int kStScoreFieldNumber = 21;
  inline ::google::protobuf::int32 st_score() const;
  inline void set_st_score(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoMailInfo)
 private:
  inline void set_has_mail_id();
  inline void clear_has_mail_id();
  inline void set_has_mail_type();
  inline void clear_has_mail_type();
  inline void set_has_mail_time();
  inline void clear_has_mail_time();
  inline void set_has_has_read();
  inline void clear_has_has_read();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_mail_title();
  inline void clear_has_mail_title();
  inline void set_has_has_attach();
  inline void clear_has_has_attach();
  inline void set_has_left_minute();
  inline void clear_has_left_minute();
  inline void set_has_mail_read_tick();
  inline void clear_has_mail_read_tick();
  inline void set_has_sender_id();
  inline void clear_has_sender_id();
  inline void set_has_sender_name();
  inline void clear_has_sender_name();
  inline void set_has_receiver_id();
  inline void clear_has_receiver_id();
  inline void set_has_receiver_name();
  inline void clear_has_receiver_name();
  inline void set_has_mail_content();
  inline void clear_has_mail_content();
  inline void set_has_attach_money();
  inline void clear_has_attach_money();
  inline void set_has_label();
  inline void clear_has_label();
  inline void set_has_exploit();
  inline void clear_has_exploit();
  inline void set_has_format();
  inline void clear_has_format();
  inline void set_has_sender_vip();
  inline void clear_has_sender_vip();
  inline void set_has_st_score();
  inline void clear_has_st_score();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 mail_id_;
  ::google::protobuf::int64 mail_time_;
  ::google::protobuf::int32 mail_type_;
  ::google::protobuf::int32 has_read_;
  ::std::string* role_name_;
  ::std::string* mail_title_;
  ::google::protobuf::int32 has_attach_;
  ::google::protobuf::int32 left_minute_;
  ::google::protobuf::int64 mail_read_tick_;
  ::google::protobuf::int64 sender_id_;
  ::std::string* sender_name_;
  ::google::protobuf::int64 receiver_id_;
  ::std::string* receiver_name_;
  ::std::string* mail_content_;
  ::google::protobuf::RepeatedPtrField< ::ProtoItem > attach_list_;
  ::ProtoMoney* attach_money_;
  ::google::protobuf::int32 label_;
  ::google::protobuf::int32 exploit_;
  ::google::protobuf::int32 format_;
  ::google::protobuf::int32 sender_vip_;
  ::google::protobuf::int32 st_score_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(21 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoMailInfo* default_instance_;
};
// -------------------------------------------------------------------

class MailAttach : public ::google::protobuf::Message {
 public:
  MailAttach();
  virtual ~MailAttach();
  
  MailAttach(const MailAttach& from);
  
  inline MailAttach& operator=(const MailAttach& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MailAttach& default_instance();
  
  void Swap(MailAttach* other);
  
  // implements Message ----------------------------------------------
  
  MailAttach* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MailAttach& from);
  void MergeFrom(const MailAttach& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 mail_index = 1;
  inline bool has_mail_index() const;
  inline void clear_mail_index();
  static const int kMailIndexFieldNumber = 1;
  inline ::google::protobuf::int32 mail_index() const;
  inline void set_mail_index(::google::protobuf::int32 value);
  
  // optional int32 pack_index = 2;
  inline bool has_pack_index() const;
  inline void clear_pack_index();
  static const int kPackIndexFieldNumber = 2;
  inline ::google::protobuf::int32 pack_index() const;
  inline void set_pack_index(::google::protobuf::int32 value);
  
  // optional int32 pack_amount = 3;
  inline bool has_pack_amount() const;
  inline void clear_pack_amount();
  static const int kPackAmountFieldNumber = 3;
  inline ::google::protobuf::int32 pack_amount() const;
  inline void set_pack_amount(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:MailAttach)
 private:
  inline void set_has_mail_index();
  inline void clear_has_mail_index();
  inline void set_has_pack_index();
  inline void clear_has_pack_index();
  inline void set_has_pack_amount();
  inline void clear_has_pack_amount();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 mail_index_;
  ::google::protobuf::int32 pack_index_;
  ::google::protobuf::int32 pack_amount_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static MailAttach* default_instance_;
};
// -------------------------------------------------------------------

class ProtoShopItem : public ::google::protobuf::Message {
 public:
  ProtoShopItem();
  virtual ~ProtoShopItem();
  
  ProtoShopItem(const ProtoShopItem& from);
  
  inline ProtoShopItem& operator=(const ProtoShopItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoShopItem& default_instance();
  
  void Swap(ProtoShopItem* other);
  
  // implements Message ----------------------------------------------
  
  ProtoShopItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoShopItem& from);
  void MergeFrom(const ProtoShopItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 item_pos = 1;
  inline bool has_item_pos() const;
  inline void clear_item_pos();
  static const int kItemPosFieldNumber = 1;
  inline ::google::protobuf::int32 item_pos() const;
  inline void set_item_pos(::google::protobuf::int32 value);
  
  // optional int32 item_id = 2;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::int32 item_id() const;
  inline void set_item_id(::google::protobuf::int32 value);
  
  // optional int32 item_type = 3;
  inline bool has_item_type() const;
  inline void clear_item_type();
  static const int kItemTypeFieldNumber = 3;
  inline ::google::protobuf::int32 item_type() const;
  inline void set_item_type(::google::protobuf::int32 value);
  
  // optional int32 bind_status = 4;
  inline bool has_bind_status() const;
  inline void clear_bind_status();
  static const int kBindStatusFieldNumber = 4;
  inline ::google::protobuf::int32 bind_status() const;
  inline void set_bind_status(::google::protobuf::int32 value);
  
  // optional int32 money_type = 5;
  inline bool has_money_type() const;
  inline void clear_money_type();
  static const int kMoneyTypeFieldNumber = 5;
  inline ::google::protobuf::int32 money_type() const;
  inline void set_money_type(::google::protobuf::int32 value);
  
  // optional int32 cur_money = 6;
  inline bool has_cur_money() const;
  inline void clear_cur_money();
  static const int kCurMoneyFieldNumber = 6;
  inline ::google::protobuf::int32 cur_money() const;
  inline void set_cur_money(::google::protobuf::int32 value);
  
  // repeated .ProtoPairObj need_item = 7;
  inline int need_item_size() const;
  inline void clear_need_item();
  static const int kNeedItemFieldNumber = 7;
  inline const ::ProtoPairObj& need_item(int index) const;
  inline ::ProtoPairObj* mutable_need_item(int index);
  inline ::ProtoPairObj* add_need_item();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >&
      need_item() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >*
      mutable_need_item();
  
  // optional int32 ai_script_score = 8;
  inline bool has_ai_script_score() const;
  inline void clear_ai_script_score();
  static const int kAiScriptScoreFieldNumber = 8;
  inline ::google::protobuf::int32 ai_script_score() const;
  inline void set_ai_script_score(::google::protobuf::int32 value);
  
  // optional int32 exploit = 9;
  inline bool has_exploit() const;
  inline void clear_exploit();
  static const int kExploitFieldNumber = 9;
  inline ::google::protobuf::int32 exploit() const;
  inline void set_exploit(::google::protobuf::int32 value);
  
  // optional int32 buyed_amount = 10;
  inline bool has_buyed_amount() const;
  inline void clear_buyed_amount();
  static const int kBuyedAmountFieldNumber = 10;
  inline ::google::protobuf::int32 buyed_amount() const;
  inline void set_buyed_amount(::google::protobuf::int32 value);
  
  // optional int32 total_amount = 11;
  inline bool has_total_amount() const;
  inline void clear_total_amount();
  static const int kTotalAmountFieldNumber = 11;
  inline ::google::protobuf::int32 total_amount() const;
  inline void set_total_amount(::google::protobuf::int32 value);
  
  // optional int32 reputation = 12;
  inline bool has_reputation() const;
  inline void clear_reputation();
  static const int kReputationFieldNumber = 12;
  inline ::google::protobuf::int32 reputation() const;
  inline void set_reputation(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoShopItem)
 private:
  inline void set_has_item_pos();
  inline void clear_has_item_pos();
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_item_type();
  inline void clear_has_item_type();
  inline void set_has_bind_status();
  inline void clear_has_bind_status();
  inline void set_has_money_type();
  inline void clear_has_money_type();
  inline void set_has_cur_money();
  inline void clear_has_cur_money();
  inline void set_has_ai_script_score();
  inline void clear_has_ai_script_score();
  inline void set_has_exploit();
  inline void clear_has_exploit();
  inline void set_has_buyed_amount();
  inline void clear_has_buyed_amount();
  inline void set_has_total_amount();
  inline void clear_has_total_amount();
  inline void set_has_reputation();
  inline void clear_has_reputation();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 item_pos_;
  ::google::protobuf::int32 item_id_;
  ::google::protobuf::int32 item_type_;
  ::google::protobuf::int32 bind_status_;
  ::google::protobuf::int32 money_type_;
  ::google::protobuf::int32 cur_money_;
  ::google::protobuf::RepeatedPtrField< ::ProtoPairObj > need_item_;
  ::google::protobuf::int32 ai_script_score_;
  ::google::protobuf::int32 exploit_;
  ::google::protobuf::int32 buyed_amount_;
  ::google::protobuf::int32 total_amount_;
  ::google::protobuf::int32 reputation_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoShopItem* default_instance_;
};
// -------------------------------------------------------------------

class ProtoPairObj : public ::google::protobuf::Message {
 public:
  ProtoPairObj();
  virtual ~ProtoPairObj();
  
  ProtoPairObj(const ProtoPairObj& from);
  
  inline ProtoPairObj& operator=(const ProtoPairObj& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoPairObj& default_instance();
  
  void Swap(ProtoPairObj* other);
  
  // implements Message ----------------------------------------------
  
  ProtoPairObj* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoPairObj& from);
  void MergeFrom(const ProtoPairObj& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 obj_id = 1;
  inline bool has_obj_id() const;
  inline void clear_obj_id();
  static const int kObjIdFieldNumber = 1;
  inline ::google::protobuf::int32 obj_id() const;
  inline void set_obj_id(::google::protobuf::int32 value);
  
  // optional int32 obj_value = 2;
  inline bool has_obj_value() const;
  inline void clear_obj_value();
  static const int kObjValueFieldNumber = 2;
  inline ::google::protobuf::int32 obj_value() const;
  inline void set_obj_value(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoPairObj)
 private:
  inline void set_has_obj_id();
  inline void clear_has_obj_id();
  inline void set_has_obj_value();
  inline void clear_has_obj_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 obj_id_;
  ::google::protobuf::int32 obj_value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoPairObj* default_instance_;
};
// -------------------------------------------------------------------

class ProtoBaseBeastInfo : public ::google::protobuf::Message {
 public:
  ProtoBaseBeastInfo();
  virtual ~ProtoBaseBeastInfo();
  
  ProtoBaseBeastInfo(const ProtoBaseBeastInfo& from);
  
  inline ProtoBaseBeastInfo& operator=(const ProtoBaseBeastInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoBaseBeastInfo& default_instance();
  
  void Swap(ProtoBaseBeastInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProtoBaseBeastInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoBaseBeastInfo& from);
  void MergeFrom(const ProtoBaseBeastInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 beast_id = 1;
  inline bool has_beast_id() const;
  inline void clear_beast_id();
  static const int kBeastIdFieldNumber = 1;
  inline ::google::protobuf::int64 beast_id() const;
  inline void set_beast_id(::google::protobuf::int64 value);
  
  // optional int32 beast_sort = 2;
  inline bool has_beast_sort() const;
  inline void clear_beast_sort();
  static const int kBeastSortFieldNumber = 2;
  inline ::google::protobuf::int32 beast_sort() const;
  inline void set_beast_sort(::google::protobuf::int32 value);
  
  // optional int32 beast_growth = 3;
  inline bool has_beast_growth() const;
  inline void clear_beast_growth();
  static const int kBeastGrowthFieldNumber = 3;
  inline ::google::protobuf::int32 beast_growth() const;
  inline void set_beast_growth(::google::protobuf::int32 value);
  
  // optional string beast_name = 4;
  inline bool has_beast_name() const;
  inline void clear_beast_name();
  static const int kBeastNameFieldNumber = 4;
  inline const ::std::string& beast_name() const;
  inline void set_beast_name(const ::std::string& value);
  inline void set_beast_name(const char* value);
  inline void set_beast_name(const char* value, size_t size);
  inline ::std::string* mutable_beast_name();
  inline ::std::string* release_beast_name();
  
  // optional int32 action_state = 5;
  inline bool has_action_state() const;
  inline void clear_action_state();
  static const int kActionStateFieldNumber = 5;
  inline ::google::protobuf::int32 action_state() const;
  inline void set_action_state(::google::protobuf::int32 value);
  
  // optional int32 beast_force = 6;
  inline bool has_beast_force() const;
  inline void clear_beast_force();
  static const int kBeastForceFieldNumber = 6;
  inline ::google::protobuf::int32 beast_force() const;
  inline void set_beast_force(::google::protobuf::int32 value);
  
  // optional int32 ability = 7;
  inline bool has_ability() const;
  inline void clear_ability();
  static const int kAbilityFieldNumber = 7;
  inline ::google::protobuf::int32 ability() const;
  inline void set_ability(::google::protobuf::int32 value);
  
  // optional int32 guard = 8;
  inline bool has_guard() const;
  inline void clear_guard();
  static const int kGuardFieldNumber = 8;
  inline ::google::protobuf::int32 guard() const;
  inline void set_guard(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoBaseBeastInfo)
 private:
  inline void set_has_beast_id();
  inline void clear_has_beast_id();
  inline void set_has_beast_sort();
  inline void clear_has_beast_sort();
  inline void set_has_beast_growth();
  inline void clear_has_beast_growth();
  inline void set_has_beast_name();
  inline void clear_has_beast_name();
  inline void set_has_action_state();
  inline void clear_has_action_state();
  inline void set_has_beast_force();
  inline void clear_has_beast_force();
  inline void set_has_ability();
  inline void clear_has_ability();
  inline void set_has_guard();
  inline void clear_has_guard();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 beast_id_;
  ::google::protobuf::int32 beast_sort_;
  ::google::protobuf::int32 beast_growth_;
  ::std::string* beast_name_;
  ::google::protobuf::int32 action_state_;
  ::google::protobuf::int32 beast_force_;
  ::google::protobuf::int32 ability_;
  ::google::protobuf::int32 guard_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoBaseBeastInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProtoBeastSkill : public ::google::protobuf::Message {
 public:
  ProtoBeastSkill();
  virtual ~ProtoBeastSkill();
  
  ProtoBeastSkill(const ProtoBeastSkill& from);
  
  inline ProtoBeastSkill& operator=(const ProtoBeastSkill& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoBeastSkill& default_instance();
  
  void Swap(ProtoBeastSkill* other);
  
  // implements Message ----------------------------------------------
  
  ProtoBeastSkill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoBeastSkill& from);
  void MergeFrom(const ProtoBeastSkill& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 skill_id = 1;
  inline bool has_skill_id() const;
  inline void clear_skill_id();
  static const int kSkillIdFieldNumber = 1;
  inline ::google::protobuf::int32 skill_id() const;
  inline void set_skill_id(::google::protobuf::int32 value);
  
  // optional int32 skill_level = 2;
  inline bool has_skill_level() const;
  inline void clear_skill_level();
  static const int kSkillLevelFieldNumber = 2;
  inline ::google::protobuf::int32 skill_level() const;
  inline void set_skill_level(::google::protobuf::int32 value);
  
  // optional int32 cur_exp = 3;
  inline bool has_cur_exp() const;
  inline void clear_cur_exp();
  static const int kCurExpFieldNumber = 3;
  inline ::google::protobuf::int32 cur_exp() const;
  inline void set_cur_exp(::google::protobuf::int32 value);
  
  // optional int32 cool_time = 4;
  inline bool has_cool_time() const;
  inline void clear_cool_time();
  static const int kCoolTimeFieldNumber = 4;
  inline ::google::protobuf::int32 cool_time() const;
  inline void set_cool_time(::google::protobuf::int32 value);
  
  // optional int32 skill_index = 5;
  inline bool has_skill_index() const;
  inline void clear_skill_index();
  static const int kSkillIndexFieldNumber = 5;
  inline ::google::protobuf::int32 skill_index() const;
  inline void set_skill_index(::google::protobuf::int32 value);
  
  // optional int32 lock_state = 6;
  inline bool has_lock_state() const;
  inline void clear_lock_state();
  static const int kLockStateFieldNumber = 6;
  inline ::google::protobuf::int32 lock_state() const;
  inline void set_lock_state(::google::protobuf::int32 value);
  
  // optional int32 quality = 7;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 7;
  inline ::google::protobuf::int32 quality() const;
  inline void set_quality(::google::protobuf::int32 value);
  
  // optional int32 transform = 8;
  inline bool has_transform() const;
  inline void clear_transform();
  static const int kTransformFieldNumber = 8;
  inline ::google::protobuf::int32 transform() const;
  inline void set_transform(::google::protobuf::int32 value);
  
  // optional int32 type = 9;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 9;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoBeastSkill)
 private:
  inline void set_has_skill_id();
  inline void clear_has_skill_id();
  inline void set_has_skill_level();
  inline void clear_has_skill_level();
  inline void set_has_cur_exp();
  inline void clear_has_cur_exp();
  inline void set_has_cool_time();
  inline void clear_has_cool_time();
  inline void set_has_skill_index();
  inline void clear_has_skill_index();
  inline void set_has_lock_state();
  inline void clear_has_lock_state();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_transform();
  inline void clear_has_transform();
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 skill_id_;
  ::google::protobuf::int32 skill_level_;
  ::google::protobuf::int32 cur_exp_;
  ::google::protobuf::int32 cool_time_;
  ::google::protobuf::int32 skill_index_;
  ::google::protobuf::int32 lock_state_;
  ::google::protobuf::int32 quality_;
  ::google::protobuf::int32 transform_;
  ::google::protobuf::int32 type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoBeastSkill* default_instance_;
};
// -------------------------------------------------------------------

class ProtoMagicalRecord : public ::google::protobuf::Message {
 public:
  ProtoMagicalRecord();
  virtual ~ProtoMagicalRecord();
  
  ProtoMagicalRecord(const ProtoMagicalRecord& from);
  
  inline ProtoMagicalRecord& operator=(const ProtoMagicalRecord& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoMagicalRecord& default_instance();
  
  void Swap(ProtoMagicalRecord* other);
  
  // implements Message ----------------------------------------------
  
  ProtoMagicalRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoMagicalRecord& from);
  void MergeFrom(const ProtoMagicalRecord& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 attr_type = 1;
  inline bool has_attr_type() const;
  inline void clear_attr_type();
  static const int kAttrTypeFieldNumber = 1;
  inline ::google::protobuf::int32 attr_type() const;
  inline void set_attr_type(::google::protobuf::int32 value);
  
  // optional int32 is_locked = 2;
  inline bool has_is_locked() const;
  inline void clear_is_locked();
  static const int kIsLockedFieldNumber = 2;
  inline ::google::protobuf::int32 is_locked() const;
  inline void set_is_locked(::google::protobuf::int32 value);
  
  // optional int32 index = 3;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 3;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // optional int32 color = 4;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 4;
  inline ::google::protobuf::int32 color() const;
  inline void set_color(::google::protobuf::int32 value);
  
  // optional int32 value = 5;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 5;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);
  
  // optional int32 max_value = 6;
  inline bool has_max_value() const;
  inline void clear_max_value();
  static const int kMaxValueFieldNumber = 6;
  inline ::google::protobuf::int32 max_value() const;
  inline void set_max_value(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoMagicalRecord)
 private:
  inline void set_has_attr_type();
  inline void clear_has_attr_type();
  inline void set_has_is_locked();
  inline void clear_has_is_locked();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_max_value();
  inline void clear_has_max_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 attr_type_;
  ::google::protobuf::int32 is_locked_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 color_;
  ::google::protobuf::int32 value_;
  ::google::protobuf::int32 max_value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoMagicalRecord* default_instance_;
};
// -------------------------------------------------------------------

class ProtoMagicalInfo : public ::google::protobuf::Message {
 public:
  ProtoMagicalInfo();
  virtual ~ProtoMagicalInfo();
  
  ProtoMagicalInfo(const ProtoMagicalInfo& from);
  
  inline ProtoMagicalInfo& operator=(const ProtoMagicalInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoMagicalInfo& default_instance();
  
  void Swap(ProtoMagicalInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProtoMagicalInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoMagicalInfo& from);
  void MergeFrom(const ProtoMagicalInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .ProtoMagicalRecord magical_list = 1;
  inline int magical_list_size() const;
  inline void clear_magical_list();
  static const int kMagicalListFieldNumber = 1;
  inline const ::ProtoMagicalRecord& magical_list(int index) const;
  inline ::ProtoMagicalRecord* mutable_magical_list(int index);
  inline ::ProtoMagicalRecord* add_magical_list();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoMagicalRecord >&
      magical_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoMagicalRecord >*
      mutable_magical_list();
  
  // @@protoc_insertion_point(class_scope:ProtoMagicalInfo)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::ProtoMagicalRecord > magical_list_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoMagicalInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProtoSkillCombine : public ::google::protobuf::Message {
 public:
  ProtoSkillCombine();
  virtual ~ProtoSkillCombine();
  
  ProtoSkillCombine(const ProtoSkillCombine& from);
  
  inline ProtoSkillCombine& operator=(const ProtoSkillCombine& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoSkillCombine& default_instance();
  
  void Swap(ProtoSkillCombine* other);
  
  // implements Message ----------------------------------------------
  
  ProtoSkillCombine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoSkillCombine& from);
  void MergeFrom(const ProtoSkillCombine& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 combine_flag = 1;
  inline bool has_combine_flag() const;
  inline void clear_combine_flag();
  static const int kCombineFlagFieldNumber = 1;
  inline ::google::protobuf::int32 combine_flag() const;
  inline void set_combine_flag(::google::protobuf::int32 value);
  
  // optional int32 from_index = 2;
  inline bool has_from_index() const;
  inline void clear_from_index();
  static const int kFromIndexFieldNumber = 2;
  inline ::google::protobuf::int32 from_index() const;
  inline void set_from_index(::google::protobuf::int32 value);
  
  // optional int32 to_index = 3;
  inline bool has_to_index() const;
  inline void clear_to_index();
  static const int kToIndexFieldNumber = 3;
  inline ::google::protobuf::int32 to_index() const;
  inline void set_to_index(::google::protobuf::int32 value);
  
  // optional int32 combine_skill = 4;
  inline bool has_combine_skill() const;
  inline void clear_combine_skill();
  static const int kCombineSkillFieldNumber = 4;
  inline ::google::protobuf::int32 combine_skill() const;
  inline void set_combine_skill(::google::protobuf::int32 value);
  
  // optional int32 combined_skill = 5;
  inline bool has_combined_skill() const;
  inline void clear_combined_skill();
  static const int kCombinedSkillFieldNumber = 5;
  inline ::google::protobuf::int32 combined_skill() const;
  inline void set_combined_skill(::google::protobuf::int32 value);
  
  // optional int32 combined_exp = 6;
  inline bool has_combined_exp() const;
  inline void clear_combined_exp();
  static const int kCombinedExpFieldNumber = 6;
  inline ::google::protobuf::int32 combined_exp() const;
  inline void set_combined_exp(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoSkillCombine)
 private:
  inline void set_has_combine_flag();
  inline void clear_has_combine_flag();
  inline void set_has_from_index();
  inline void clear_has_from_index();
  inline void set_has_to_index();
  inline void clear_has_to_index();
  inline void set_has_combine_skill();
  inline void clear_has_combine_skill();
  inline void set_has_combined_skill();
  inline void clear_has_combined_skill();
  inline void set_has_combined_exp();
  inline void clear_has_combined_exp();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 combine_flag_;
  ::google::protobuf::int32 from_index_;
  ::google::protobuf::int32 to_index_;
  ::google::protobuf::int32 combine_skill_;
  ::google::protobuf::int32 combined_skill_;
  ::google::protobuf::int32 combined_exp_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoSkillCombine* default_instance_;
};
// -------------------------------------------------------------------

class ProtoFashion : public ::google::protobuf::Message {
 public:
  ProtoFashion();
  virtual ~ProtoFashion();
  
  ProtoFashion(const ProtoFashion& from);
  
  inline ProtoFashion& operator=(const ProtoFashion& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoFashion& default_instance();
  
  void Swap(ProtoFashion* other);
  
  // implements Message ----------------------------------------------
  
  ProtoFashion* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoFashion& from);
  void MergeFrom(const ProtoFashion& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 use_type = 1;
  inline bool has_use_type() const;
  inline void clear_use_type();
  static const int kUseTypeFieldNumber = 1;
  inline ::google::protobuf::int32 use_type() const;
  inline void set_use_type(::google::protobuf::int32 value);
  
  // optional int32 use_tick = 2;
  inline bool has_use_tick() const;
  inline void clear_use_tick();
  static const int kUseTickFieldNumber = 2;
  inline ::google::protobuf::int32 use_tick() const;
  inline void set_use_tick(::google::protobuf::int32 value);
  
  // optional int32 expire_tick = 3;
  inline bool has_expire_tick() const;
  inline void clear_expire_tick();
  static const int kExpireTickFieldNumber = 3;
  inline ::google::protobuf::int32 expire_tick() const;
  inline void set_expire_tick(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoFashion)
 private:
  inline void set_has_use_type();
  inline void clear_has_use_type();
  inline void set_has_use_tick();
  inline void clear_has_use_tick();
  inline void set_has_expire_tick();
  inline void clear_has_expire_tick();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 use_type_;
  ::google::protobuf::int32 use_tick_;
  ::google::protobuf::int32 expire_tick_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoFashion* default_instance_;
};
// -------------------------------------------------------------------

class ProtoFashionInfo : public ::google::protobuf::Message {
 public:
  ProtoFashionInfo();
  virtual ~ProtoFashionInfo();
  
  ProtoFashionInfo(const ProtoFashionInfo& from);
  
  inline ProtoFashionInfo& operator=(const ProtoFashionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoFashionInfo& default_instance();
  
  void Swap(ProtoFashionInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProtoFashionInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoFashionInfo& from);
  void MergeFrom(const ProtoFashionInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 use_type = 1;
  inline bool has_use_type() const;
  inline void clear_use_type();
  static const int kUseTypeFieldNumber = 1;
  inline ::google::protobuf::int32 use_type() const;
  inline void set_use_type(::google::protobuf::int32 value);
  
  // optional int32 left_sec = 2;
  inline bool has_left_sec() const;
  inline void clear_left_sec();
  static const int kLeftSecFieldNumber = 2;
  inline ::google::protobuf::int32 left_sec() const;
  inline void set_left_sec(::google::protobuf::int32 value);
  
  // optional int64 use_tick = 3;
  inline bool has_use_tick() const;
  inline void clear_use_tick();
  static const int kUseTickFieldNumber = 3;
  inline ::google::protobuf::int64 use_tick() const;
  inline void set_use_tick(::google::protobuf::int64 value);
  
  // optional int64 expire_tick = 4;
  inline bool has_expire_tick() const;
  inline void clear_expire_tick();
  static const int kExpireTickFieldNumber = 4;
  inline ::google::protobuf::int64 expire_tick() const;
  inline void set_expire_tick(::google::protobuf::int64 value);
  
  // repeated .ProtoPairObj notify_map = 5;
  inline int notify_map_size() const;
  inline void clear_notify_map();
  static const int kNotifyMapFieldNumber = 5;
  inline const ::ProtoPairObj& notify_map(int index) const;
  inline ::ProtoPairObj* mutable_notify_map(int index);
  inline ::ProtoPairObj* add_notify_map();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >&
      notify_map() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >*
      mutable_notify_map();
  
  // optional int32 is_in_use = 6;
  inline bool has_is_in_use() const;
  inline void clear_is_in_use();
  static const int kIsInUseFieldNumber = 6;
  inline ::google::protobuf::int32 is_in_use() const;
  inline void set_is_in_use(::google::protobuf::int32 value);
  
  // optional int32 vip_type = 7;
  inline bool has_vip_type() const;
  inline void clear_vip_type();
  static const int kVipTypeFieldNumber = 7;
  inline ::google::protobuf::int32 vip_type() const;
  inline void set_vip_type(::google::protobuf::int32 value);
  
  // optional int32 fashion_id = 8;
  inline bool has_fashion_id() const;
  inline void clear_fashion_id();
  static const int kFashionIdFieldNumber = 8;
  inline ::google::protobuf::int32 fashion_id() const;
  inline void set_fashion_id(::google::protobuf::int32 value);
  
  // optional int32 color_id = 9;
  inline bool has_color_id() const;
  inline void clear_color_id();
  static const int kColorIdFieldNumber = 9;
  inline ::google::protobuf::int32 color_id() const;
  inline void set_color_id(::google::protobuf::int32 value);
  
  // optional int32 active_type = 10;
  inline bool has_active_type() const;
  inline void clear_active_type();
  static const int kActiveTypeFieldNumber = 10;
  inline ::google::protobuf::int32 active_type() const;
  inline void set_active_type(::google::protobuf::int32 value);
  
  // optional int32 is_permanent = 11;
  inline bool has_is_permanent() const;
  inline void clear_is_permanent();
  static const int kIsPermanentFieldNumber = 11;
  inline ::google::protobuf::int32 is_permanent() const;
  inline void set_is_permanent(::google::protobuf::int32 value);
  
  // optional int64 active_tick = 12;
  inline bool has_active_tick() const;
  inline void clear_active_tick();
  static const int kActiveTickFieldNumber = 12;
  inline ::google::protobuf::int64 active_tick() const;
  inline void set_active_tick(::google::protobuf::int64 value);
  
  // optional int64 end_tick = 13;
  inline bool has_end_tick() const;
  inline void clear_end_tick();
  static const int kEndTickFieldNumber = 13;
  inline ::google::protobuf::int64 end_tick() const;
  inline void set_end_tick(::google::protobuf::int64 value);
  
  // repeated int32 color_set_ = 14;
  inline int color_set__size() const;
  inline void clear_color_set_();
  static const int kColorSetFieldNumber = 14;
  inline ::google::protobuf::int32 color_set_(int index) const;
  inline void set_color_set_(int index, ::google::protobuf::int32 value);
  inline void add_color_set_(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      color_set_() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_color_set_();
  
  // @@protoc_insertion_point(class_scope:ProtoFashionInfo)
 private:
  inline void set_has_use_type();
  inline void clear_has_use_type();
  inline void set_has_left_sec();
  inline void clear_has_left_sec();
  inline void set_has_use_tick();
  inline void clear_has_use_tick();
  inline void set_has_expire_tick();
  inline void clear_has_expire_tick();
  inline void set_has_is_in_use();
  inline void clear_has_is_in_use();
  inline void set_has_vip_type();
  inline void clear_has_vip_type();
  inline void set_has_fashion_id();
  inline void clear_has_fashion_id();
  inline void set_has_color_id();
  inline void clear_has_color_id();
  inline void set_has_active_type();
  inline void clear_has_active_type();
  inline void set_has_is_permanent();
  inline void clear_has_is_permanent();
  inline void set_has_active_tick();
  inline void clear_has_active_tick();
  inline void set_has_end_tick();
  inline void clear_has_end_tick();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 use_type_;
  ::google::protobuf::int32 left_sec_;
  ::google::protobuf::int64 use_tick_;
  ::google::protobuf::int64 expire_tick_;
  ::google::protobuf::RepeatedPtrField< ::ProtoPairObj > notify_map_;
  ::google::protobuf::int32 is_in_use_;
  ::google::protobuf::int32 vip_type_;
  ::google::protobuf::int32 fashion_id_;
  ::google::protobuf::int32 color_id_;
  ::google::protobuf::int32 active_type_;
  ::google::protobuf::int32 is_permanent_;
  ::google::protobuf::int64 active_tick_;
  ::google::protobuf::int64 end_tick_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > color_set__;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoFashionInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProtoLeagueItem : public ::google::protobuf::Message {
 public:
  ProtoLeagueItem();
  virtual ~ProtoLeagueItem();
  
  ProtoLeagueItem(const ProtoLeagueItem& from);
  
  inline ProtoLeagueItem& operator=(const ProtoLeagueItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoLeagueItem& default_instance();
  
  void Swap(ProtoLeagueItem* other);
  
  // implements Message ----------------------------------------------
  
  ProtoLeagueItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoLeagueItem& from);
  void MergeFrom(const ProtoLeagueItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 rank_index = 1;
  inline bool has_rank_index() const;
  inline void clear_rank_index();
  static const int kRankIndexFieldNumber = 1;
  inline ::google::protobuf::int32 rank_index() const;
  inline void set_rank_index(::google::protobuf::int32 value);
  
  // optional int64 league_index = 2;
  inline bool has_league_index() const;
  inline void clear_league_index();
  static const int kLeagueIndexFieldNumber = 2;
  inline ::google::protobuf::int64 league_index() const;
  inline void set_league_index(::google::protobuf::int64 value);
  
  // optional string league_name = 3;
  inline bool has_league_name() const;
  inline void clear_league_name();
  static const int kLeagueNameFieldNumber = 3;
  inline const ::std::string& league_name() const;
  inline void set_league_name(const ::std::string& value);
  inline void set_league_name(const char* value);
  inline void set_league_name(const char* value, size_t size);
  inline ::std::string* mutable_league_name();
  inline ::std::string* release_league_name();
  
  // optional int32 league_lvl = 4;
  inline bool has_league_lvl() const;
  inline void clear_league_lvl();
  static const int kLeagueLvlFieldNumber = 4;
  inline ::google::protobuf::int32 league_lvl() const;
  inline void set_league_lvl(::google::protobuf::int32 value);
  
  // optional int32 current_count = 5;
  inline bool has_current_count() const;
  inline void clear_current_count();
  static const int kCurrentCountFieldNumber = 5;
  inline ::google::protobuf::int32 current_count() const;
  inline void set_current_count(::google::protobuf::int32 value);
  
  // optional int32 league_force = 6;
  inline bool has_league_force() const;
  inline void clear_league_force();
  static const int kLeagueForceFieldNumber = 6;
  inline ::google::protobuf::int32 league_force() const;
  inline void set_league_force(::google::protobuf::int32 value);
  
  // optional string league_leader = 7;
  inline bool has_league_leader() const;
  inline void clear_league_leader();
  static const int kLeagueLeaderFieldNumber = 7;
  inline const ::std::string& league_leader() const;
  inline void set_league_leader(const ::std::string& value);
  inline void set_league_leader(const char* value);
  inline void set_league_leader(const char* value, size_t size);
  inline ::std::string* mutable_league_leader();
  inline ::std::string* release_league_leader();
  
  // optional int32 apply_flag = 8;
  inline bool has_apply_flag() const;
  inline void clear_apply_flag();
  static const int kApplyFlagFieldNumber = 8;
  inline ::google::protobuf::int32 apply_flag() const;
  inline void set_apply_flag(::google::protobuf::int32 value);
  
  // optional int64 leader_id = 9;
  inline bool has_leader_id() const;
  inline void clear_leader_id();
  static const int kLeaderIdFieldNumber = 9;
  inline ::google::protobuf::int64 leader_id() const;
  inline void set_leader_id(::google::protobuf::int64 value);
  
  // optional int32 max_role = 10;
  inline bool has_max_role() const;
  inline void clear_max_role();
  static const int kMaxRoleFieldNumber = 10;
  inline ::google::protobuf::int32 max_role() const;
  inline void set_max_role(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoLeagueItem)
 private:
  inline void set_has_rank_index();
  inline void clear_has_rank_index();
  inline void set_has_league_index();
  inline void clear_has_league_index();
  inline void set_has_league_name();
  inline void clear_has_league_name();
  inline void set_has_league_lvl();
  inline void clear_has_league_lvl();
  inline void set_has_current_count();
  inline void clear_has_current_count();
  inline void set_has_league_force();
  inline void clear_has_league_force();
  inline void set_has_league_leader();
  inline void clear_has_league_leader();
  inline void set_has_apply_flag();
  inline void clear_has_apply_flag();
  inline void set_has_leader_id();
  inline void clear_has_leader_id();
  inline void set_has_max_role();
  inline void clear_has_max_role();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 league_index_;
  ::google::protobuf::int32 rank_index_;
  ::google::protobuf::int32 league_lvl_;
  ::std::string* league_name_;
  ::google::protobuf::int32 current_count_;
  ::google::protobuf::int32 league_force_;
  ::std::string* league_leader_;
  ::google::protobuf::int64 leader_id_;
  ::google::protobuf::int32 apply_flag_;
  ::google::protobuf::int32 max_role_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoLeagueItem* default_instance_;
};
// -------------------------------------------------------------------

class ProtoLeagueMember : public ::google::protobuf::Message {
 public:
  ProtoLeagueMember();
  virtual ~ProtoLeagueMember();
  
  ProtoLeagueMember(const ProtoLeagueMember& from);
  
  inline ProtoLeagueMember& operator=(const ProtoLeagueMember& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoLeagueMember& default_instance();
  
  void Swap(ProtoLeagueMember* other);
  
  // implements Message ----------------------------------------------
  
  ProtoLeagueMember* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoLeagueMember& from);
  void MergeFrom(const ProtoLeagueMember& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 role_index = 1;
  inline bool has_role_index() const;
  inline void clear_role_index();
  static const int kRoleIndexFieldNumber = 1;
  inline ::google::protobuf::int64 role_index() const;
  inline void set_role_index(::google::protobuf::int64 value);
  
  // optional string role_name = 2;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 2;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  
  // optional int32 sex = 3;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 3;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);
  
  // optional int32 vip = 4;
  inline bool has_vip() const;
  inline void clear_vip();
  static const int kVipFieldNumber = 4;
  inline ::google::protobuf::int32 vip() const;
  inline void set_vip(::google::protobuf::int32 value);
  
  // optional int32 league_pos = 5;
  inline bool has_league_pos() const;
  inline void clear_league_pos();
  static const int kLeaguePosFieldNumber = 5;
  inline ::google::protobuf::int32 league_pos() const;
  inline void set_league_pos(::google::protobuf::int32 value);
  
  // optional int32 role_lvl = 6;
  inline bool has_role_lvl() const;
  inline void clear_role_lvl();
  static const int kRoleLvlFieldNumber = 6;
  inline ::google::protobuf::int32 role_lvl() const;
  inline void set_role_lvl(::google::protobuf::int32 value);
  
  // optional int32 role_force = 7;
  inline bool has_role_force() const;
  inline void clear_role_force();
  static const int kRoleForceFieldNumber = 7;
  inline ::google::protobuf::int32 role_force() const;
  inline void set_role_force(::google::protobuf::int32 value);
  
  // optional int32 cur_contri = 8;
  inline bool has_cur_contri() const;
  inline void clear_cur_contri();
  static const int kCurContriFieldNumber = 8;
  inline ::google::protobuf::int32 cur_contri() const;
  inline void set_cur_contri(::google::protobuf::int32 value);
  
  // optional int32 total_contri = 9;
  inline bool has_total_contri() const;
  inline void clear_total_contri();
  static const int kTotalContriFieldNumber = 9;
  inline ::google::protobuf::int32 total_contri() const;
  inline void set_total_contri(::google::protobuf::int32 value);
  
  // optional int32 left_time = 10;
  inline bool has_left_time() const;
  inline void clear_left_time();
  static const int kLeftTimeFieldNumber = 10;
  inline ::google::protobuf::int32 left_time() const;
  inline void set_left_time(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoLeagueMember)
 private:
  inline void set_has_role_index();
  inline void clear_has_role_index();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_vip();
  inline void clear_has_vip();
  inline void set_has_league_pos();
  inline void clear_has_league_pos();
  inline void set_has_role_lvl();
  inline void clear_has_role_lvl();
  inline void set_has_role_force();
  inline void clear_has_role_force();
  inline void set_has_cur_contri();
  inline void clear_has_cur_contri();
  inline void set_has_total_contri();
  inline void clear_has_total_contri();
  inline void set_has_left_time();
  inline void clear_has_left_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 role_index_;
  ::std::string* role_name_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 vip_;
  ::google::protobuf::int32 league_pos_;
  ::google::protobuf::int32 role_lvl_;
  ::google::protobuf::int32 role_force_;
  ::google::protobuf::int32 cur_contri_;
  ::google::protobuf::int32 total_contri_;
  ::google::protobuf::int32 left_time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoLeagueMember* default_instance_;
};
// -------------------------------------------------------------------

class ProtoLeagueApply : public ::google::protobuf::Message {
 public:
  ProtoLeagueApply();
  virtual ~ProtoLeagueApply();
  
  ProtoLeagueApply(const ProtoLeagueApply& from);
  
  inline ProtoLeagueApply& operator=(const ProtoLeagueApply& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoLeagueApply& default_instance();
  
  void Swap(ProtoLeagueApply* other);
  
  // implements Message ----------------------------------------------
  
  ProtoLeagueApply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoLeagueApply& from);
  void MergeFrom(const ProtoLeagueApply& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 role_index = 1;
  inline bool has_role_index() const;
  inline void clear_role_index();
  static const int kRoleIndexFieldNumber = 1;
  inline ::google::protobuf::int64 role_index() const;
  inline void set_role_index(::google::protobuf::int64 value);
  
  // optional int32 vip_type = 2;
  inline bool has_vip_type() const;
  inline void clear_vip_type();
  static const int kVipTypeFieldNumber = 2;
  inline ::google::protobuf::int32 vip_type() const;
  inline void set_vip_type(::google::protobuf::int32 value);
  
  // optional int32 role_sex = 3;
  inline bool has_role_sex() const;
  inline void clear_role_sex();
  static const int kRoleSexFieldNumber = 3;
  inline ::google::protobuf::int32 role_sex() const;
  inline void set_role_sex(::google::protobuf::int32 value);
  
  // optional string role_name = 4;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 4;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  
  // optional int32 role_lvl = 5;
  inline bool has_role_lvl() const;
  inline void clear_role_lvl();
  static const int kRoleLvlFieldNumber = 5;
  inline ::google::protobuf::int32 role_lvl() const;
  inline void set_role_lvl(::google::protobuf::int32 value);
  
  // optional int32 role_career = 6;
  inline bool has_role_career() const;
  inline void clear_role_career();
  static const int kRoleCareerFieldNumber = 6;
  inline ::google::protobuf::int32 role_career() const;
  inline void set_role_career(::google::protobuf::int32 value);
  
  // optional int32 role_force = 7;
  inline bool has_role_force() const;
  inline void clear_role_force();
  static const int kRoleForceFieldNumber = 7;
  inline ::google::protobuf::int32 role_force() const;
  inline void set_role_force(::google::protobuf::int32 value);
  
  // optional int32 online_flag = 8;
  inline bool has_online_flag() const;
  inline void clear_online_flag();
  static const int kOnlineFlagFieldNumber = 8;
  inline ::google::protobuf::int32 online_flag() const;
  inline void set_online_flag(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoLeagueApply)
 private:
  inline void set_has_role_index();
  inline void clear_has_role_index();
  inline void set_has_vip_type();
  inline void clear_has_vip_type();
  inline void set_has_role_sex();
  inline void clear_has_role_sex();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_role_lvl();
  inline void clear_has_role_lvl();
  inline void set_has_role_career();
  inline void clear_has_role_career();
  inline void set_has_role_force();
  inline void clear_has_role_force();
  inline void set_has_online_flag();
  inline void clear_has_online_flag();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 role_index_;
  ::google::protobuf::int32 vip_type_;
  ::google::protobuf::int32 role_sex_;
  ::std::string* role_name_;
  ::google::protobuf::int32 role_lvl_;
  ::google::protobuf::int32 role_career_;
  ::google::protobuf::int32 role_force_;
  ::google::protobuf::int32 online_flag_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoLeagueApply* default_instance_;
};
// -------------------------------------------------------------------

class ProtoLeagueLog : public ::google::protobuf::Message {
 public:
  ProtoLeagueLog();
  virtual ~ProtoLeagueLog();
  
  ProtoLeagueLog(const ProtoLeagueLog& from);
  
  inline ProtoLeagueLog& operator=(const ProtoLeagueLog& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoLeagueLog& default_instance();
  
  void Swap(ProtoLeagueLog* other);
  
  // implements Message ----------------------------------------------
  
  ProtoLeagueLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoLeagueLog& from);
  void MergeFrom(const ProtoLeagueLog& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 log_tick = 1;
  inline bool has_log_tick() const;
  inline void clear_log_tick();
  static const int kLogTickFieldNumber = 1;
  inline ::google::protobuf::int64 log_tick() const;
  inline void set_log_tick(::google::protobuf::int64 value);
  
  // optional string log_content = 2;
  inline bool has_log_content() const;
  inline void clear_log_content();
  static const int kLogContentFieldNumber = 2;
  inline const ::std::string& log_content() const;
  inline void set_log_content(const ::std::string& value);
  inline void set_log_content(const char* value);
  inline void set_log_content(const char* value, size_t size);
  inline ::std::string* mutable_log_content();
  inline ::std::string* release_log_content();
  
  // @@protoc_insertion_point(class_scope:ProtoLeagueLog)
 private:
  inline void set_has_log_tick();
  inline void clear_has_log_tick();
  inline void set_has_log_content();
  inline void clear_has_log_content();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 log_tick_;
  ::std::string* log_content_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoLeagueLog* default_instance_;
};
// -------------------------------------------------------------------

class ProtoLeagueShop : public ::google::protobuf::Message {
 public:
  ProtoLeagueShop();
  virtual ~ProtoLeagueShop();
  
  ProtoLeagueShop(const ProtoLeagueShop& from);
  
  inline ProtoLeagueShop& operator=(const ProtoLeagueShop& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoLeagueShop& default_instance();
  
  void Swap(ProtoLeagueShop* other);
  
  // implements Message ----------------------------------------------
  
  ProtoLeagueShop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoLeagueShop& from);
  void MergeFrom(const ProtoLeagueShop& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 item_id = 1;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::int32 item_id() const;
  inline void set_item_id(::google::protobuf::int32 value);
  
  // optional int32 buy_num = 2;
  inline bool has_buy_num() const;
  inline void clear_buy_num();
  static const int kBuyNumFieldNumber = 2;
  inline ::google::protobuf::int32 buy_num() const;
  inline void set_buy_num(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoLeagueShop)
 private:
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_buy_num();
  inline void clear_has_buy_num();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 item_id_;
  ::google::protobuf::int32 buy_num_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoLeagueShop* default_instance_;
};
// -------------------------------------------------------------------

class ProtoMallItem : public ::google::protobuf::Message {
 public:
  ProtoMallItem();
  virtual ~ProtoMallItem();
  
  ProtoMallItem(const ProtoMallItem& from);
  
  inline ProtoMallItem& operator=(const ProtoMallItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoMallItem& default_instance();
  
  void Swap(ProtoMallItem* other);
  
  // implements Message ----------------------------------------------
  
  ProtoMallItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoMallItem& from);
  void MergeFrom(const ProtoMallItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 item_pos = 1;
  inline bool has_item_pos() const;
  inline void clear_item_pos();
  static const int kItemPosFieldNumber = 1;
  inline ::google::protobuf::int32 item_pos() const;
  inline void set_item_pos(::google::protobuf::int32 value);
  
  // optional int32 item_id = 2;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::int32 item_id() const;
  inline void set_item_id(::google::protobuf::int32 value);
  
  // repeated int32 item_type_list = 3;
  inline int item_type_list_size() const;
  inline void clear_item_type_list();
  static const int kItemTypeListFieldNumber = 3;
  inline ::google::protobuf::int32 item_type_list(int index) const;
  inline void set_item_type_list(int index, ::google::protobuf::int32 value);
  inline void add_item_type_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      item_type_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_item_type_list();
  
  // optional int32 money_type = 4;
  inline bool has_money_type() const;
  inline void clear_money_type();
  static const int kMoneyTypeFieldNumber = 4;
  inline ::google::protobuf::int32 money_type() const;
  inline void set_money_type(::google::protobuf::int32 value);
  
  // optional int32 prime_price = 5;
  inline bool has_prime_price() const;
  inline void clear_prime_price();
  static const int kPrimePriceFieldNumber = 5;
  inline ::google::protobuf::int32 prime_price() const;
  inline void set_prime_price(::google::protobuf::int32 value);
  
  // optional int32 cur_price = 6;
  inline bool has_cur_price() const;
  inline void clear_cur_price();
  static const int kCurPriceFieldNumber = 6;
  inline ::google::protobuf::int32 cur_price() const;
  inline void set_cur_price(::google::protobuf::int32 value);
  
  // optional int32 vip_price = 7;
  inline bool has_vip_price() const;
  inline void clear_vip_price();
  static const int kVipPriceFieldNumber = 7;
  inline ::google::protobuf::int32 vip_price() const;
  inline void set_vip_price(::google::protobuf::int32 value);
  
  // optional int32 limit_condt_type = 8;
  inline bool has_limit_condt_type() const;
  inline void clear_limit_condt_type();
  static const int kLimitCondtTypeFieldNumber = 8;
  inline ::google::protobuf::int32 limit_condt_type() const;
  inline void set_limit_condt_type(::google::protobuf::int32 value);
  
  // optional .ProtoPairObj limit_condt = 9;
  inline bool has_limit_condt() const;
  inline void clear_limit_condt();
  static const int kLimitCondtFieldNumber = 9;
  inline const ::ProtoPairObj& limit_condt() const;
  inline ::ProtoPairObj* mutable_limit_condt();
  inline ::ProtoPairObj* release_limit_condt();
  
  // optional string context = 10;
  inline bool has_context() const;
  inline void clear_context();
  static const int kContextFieldNumber = 10;
  inline const ::std::string& context() const;
  inline void set_context(const ::std::string& value);
  inline void set_context(const char* value);
  inline void set_context(const char* value, size_t size);
  inline ::std::string* mutable_context();
  inline ::std::string* release_context();
  
  // optional int32 item_bind = 11;
  inline bool has_item_bind() const;
  inline void clear_item_bind();
  static const int kItemBindFieldNumber = 11;
  inline ::google::protobuf::int32 item_bind() const;
  inline void set_item_bind(::google::protobuf::int32 value);
  
  // optional int32 left_item = 12;
  inline bool has_left_item() const;
  inline void clear_left_item();
  static const int kLeftItemFieldNumber = 12;
  inline ::google::protobuf::int32 left_item() const;
  inline void set_left_item(::google::protobuf::int32 value);
  
  // optional int32 max_item = 13;
  inline bool has_max_item() const;
  inline void clear_max_item();
  static const int kMaxItemFieldNumber = 13;
  inline ::google::protobuf::int32 max_item() const;
  inline void set_max_item(::google::protobuf::int32 value);
  
  // optional int32 own = 14;
  inline bool has_own() const;
  inline void clear_own();
  static const int kOwnFieldNumber = 14;
  inline ::google::protobuf::int32 own() const;
  inline void set_own(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoMallItem)
 private:
  inline void set_has_item_pos();
  inline void clear_has_item_pos();
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_money_type();
  inline void clear_has_money_type();
  inline void set_has_prime_price();
  inline void clear_has_prime_price();
  inline void set_has_cur_price();
  inline void clear_has_cur_price();
  inline void set_has_vip_price();
  inline void clear_has_vip_price();
  inline void set_has_limit_condt_type();
  inline void clear_has_limit_condt_type();
  inline void set_has_limit_condt();
  inline void clear_has_limit_condt();
  inline void set_has_context();
  inline void clear_has_context();
  inline void set_has_item_bind();
  inline void clear_has_item_bind();
  inline void set_has_left_item();
  inline void clear_has_left_item();
  inline void set_has_max_item();
  inline void clear_has_max_item();
  inline void set_has_own();
  inline void clear_has_own();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 item_pos_;
  ::google::protobuf::int32 item_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > item_type_list_;
  ::google::protobuf::int32 money_type_;
  ::google::protobuf::int32 prime_price_;
  ::google::protobuf::int32 cur_price_;
  ::google::protobuf::int32 vip_price_;
  ::ProtoPairObj* limit_condt_;
  ::google::protobuf::int32 limit_condt_type_;
  ::google::protobuf::int32 item_bind_;
  ::std::string* context_;
  ::google::protobuf::int32 left_item_;
  ::google::protobuf::int32 max_item_;
  ::google::protobuf::int32 own_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoMallItem* default_instance_;
};
// -------------------------------------------------------------------

class ProtoMallList : public ::google::protobuf::Message {
 public:
  ProtoMallList();
  virtual ~ProtoMallList();
  
  ProtoMallList(const ProtoMallList& from);
  
  inline ProtoMallList& operator=(const ProtoMallList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoMallList& default_instance();
  
  void Swap(ProtoMallList* other);
  
  // implements Message ----------------------------------------------
  
  ProtoMallList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoMallList& from);
  void MergeFrom(const ProtoMallList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 shop_type = 1;
  inline bool has_shop_type() const;
  inline void clear_shop_type();
  static const int kShopTypeFieldNumber = 1;
  inline ::google::protobuf::int32 shop_type() const;
  inline void set_shop_type(::google::protobuf::int32 value);
  
  // repeated .ProtoMallItem Item_list = 2;
  inline int item_list_size() const;
  inline void clear_item_list();
  static const int kItemListFieldNumber = 2;
  inline const ::ProtoMallItem& item_list(int index) const;
  inline ::ProtoMallItem* mutable_item_list(int index);
  inline ::ProtoMallItem* add_item_list();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoMallItem >&
      item_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoMallItem >*
      mutable_item_list();
  
  // @@protoc_insertion_point(class_scope:ProtoMallList)
 private:
  inline void set_has_shop_type();
  inline void clear_has_shop_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::ProtoMallItem > item_list_;
  ::google::protobuf::int32 shop_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoMallList* default_instance_;
};
// -------------------------------------------------------------------

class ProtoTeamer : public ::google::protobuf::Message {
 public:
  ProtoTeamer();
  virtual ~ProtoTeamer();
  
  ProtoTeamer(const ProtoTeamer& from);
  
  inline ProtoTeamer& operator=(const ProtoTeamer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoTeamer& default_instance();
  
  void Swap(ProtoTeamer* other);
  
  // implements Message ----------------------------------------------
  
  ProtoTeamer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoTeamer& from);
  void MergeFrom(const ProtoTeamer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string role_name = 1;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 1;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  
  // optional string full_name = 2;
  inline bool has_full_name() const;
  inline void clear_full_name();
  static const int kFullNameFieldNumber = 2;
  inline const ::std::string& full_name() const;
  inline void set_full_name(const ::std::string& value);
  inline void set_full_name(const char* value);
  inline void set_full_name(const char* value, size_t size);
  inline ::std::string* mutable_full_name();
  inline ::std::string* release_full_name();
  
  // optional int64 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::int64 role_id() const;
  inline void set_role_id(::google::protobuf::int64 value);
  
  // optional int32 role_level = 4;
  inline bool has_role_level() const;
  inline void clear_role_level();
  static const int kRoleLevelFieldNumber = 4;
  inline ::google::protobuf::int32 role_level() const;
  inline void set_role_level(::google::protobuf::int32 value);
  
  // optional int32 role_force = 5;
  inline bool has_role_force() const;
  inline void clear_role_force();
  static const int kRoleForceFieldNumber = 5;
  inline ::google::protobuf::int32 role_force() const;
  inline void set_role_force(::google::protobuf::int32 value);
  
  // optional int32 role_career = 6;
  inline bool has_role_career() const;
  inline void clear_role_career();
  static const int kRoleCareerFieldNumber = 6;
  inline ::google::protobuf::int32 role_career() const;
  inline void set_role_career(::google::protobuf::int32 value);
  
  // optional int32 role_sex = 7;
  inline bool has_role_sex() const;
  inline void clear_role_sex();
  static const int kRoleSexFieldNumber = 7;
  inline ::google::protobuf::int32 role_sex() const;
  inline void set_role_sex(::google::protobuf::int32 value);
  
  // optional int32 vip_type = 8;
  inline bool has_vip_type() const;
  inline void clear_vip_type();
  static const int kVipTypeFieldNumber = 8;
  inline ::google::protobuf::int32 vip_type() const;
  inline void set_vip_type(::google::protobuf::int32 value);
  
  // optional int32 online_flag = 9;
  inline bool has_online_flag() const;
  inline void clear_online_flag();
  static const int kOnlineFlagFieldNumber = 9;
  inline ::google::protobuf::int32 online_flag() const;
  inline void set_online_flag(::google::protobuf::int32 value);
  
  // optional int32 prepare = 10;
  inline bool has_prepare() const;
  inline void clear_prepare();
  static const int kPrepareFieldNumber = 10;
  inline ::google::protobuf::int32 prepare() const;
  inline void set_prepare(::google::protobuf::int32 value);
  
  // optional string league_name = 11;
  inline bool has_league_name() const;
  inline void clear_league_name();
  static const int kLeagueNameFieldNumber = 11;
  inline const ::std::string& league_name() const;
  inline void set_league_name(const ::std::string& value);
  inline void set_league_name(const char* value);
  inline void set_league_name(const char* value, size_t size);
  inline ::std::string* mutable_league_name();
  inline ::std::string* release_league_name();
  
  // optional int32 team_num = 12;
  inline bool has_team_num() const;
  inline void clear_team_num();
  static const int kTeamNumFieldNumber = 12;
  inline ::google::protobuf::int32 team_num() const;
  inline void set_team_num(::google::protobuf::int32 value);
  
  // optional int32 team_limit = 13;
  inline bool has_team_limit() const;
  inline void clear_team_limit();
  static const int kTeamLimitFieldNumber = 13;
  inline ::google::protobuf::int32 team_limit() const;
  inline void set_team_limit(::google::protobuf::int32 value);
  
  // repeated .ProtoThreeObj show_info = 14;
  inline int show_info_size() const;
  inline void clear_show_info();
  static const int kShowInfoFieldNumber = 14;
  inline const ::ProtoThreeObj& show_info(int index) const;
  inline ::ProtoThreeObj* mutable_show_info(int index);
  inline ::ProtoThreeObj* add_show_info();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoThreeObj >&
      show_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoThreeObj >*
      mutable_show_info();
  
  // repeated .ProtoPairObj mount_info = 15;
  inline int mount_info_size() const;
  inline void clear_mount_info();
  static const int kMountInfoFieldNumber = 15;
  inline const ::ProtoPairObj& mount_info(int index) const;
  inline ::ProtoPairObj* mutable_mount_info(int index);
  inline ::ProtoPairObj* add_mount_info();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >&
      mount_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >*
      mutable_mount_info();
  
  // optional string prev = 16;
  inline bool has_prev() const;
  inline void clear_prev();
  static const int kPrevFieldNumber = 16;
  inline const ::std::string& prev() const;
  inline void set_prev(const ::std::string& value);
  inline void set_prev(const char* value);
  inline void set_prev(const char* value, size_t size);
  inline ::std::string* mutable_prev();
  inline ::std::string* release_prev();
  
  // @@protoc_insertion_point(class_scope:ProtoTeamer)
 private:
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_full_name();
  inline void clear_has_full_name();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_level();
  inline void clear_has_role_level();
  inline void set_has_role_force();
  inline void clear_has_role_force();
  inline void set_has_role_career();
  inline void clear_has_role_career();
  inline void set_has_role_sex();
  inline void clear_has_role_sex();
  inline void set_has_vip_type();
  inline void clear_has_vip_type();
  inline void set_has_online_flag();
  inline void clear_has_online_flag();
  inline void set_has_prepare();
  inline void clear_has_prepare();
  inline void set_has_league_name();
  inline void clear_has_league_name();
  inline void set_has_team_num();
  inline void clear_has_team_num();
  inline void set_has_team_limit();
  inline void clear_has_team_limit();
  inline void set_has_prev();
  inline void clear_has_prev();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* role_name_;
  ::std::string* full_name_;
  ::google::protobuf::int64 role_id_;
  ::google::protobuf::int32 role_level_;
  ::google::protobuf::int32 role_force_;
  ::google::protobuf::int32 role_career_;
  ::google::protobuf::int32 role_sex_;
  ::google::protobuf::int32 vip_type_;
  ::google::protobuf::int32 online_flag_;
  ::std::string* league_name_;
  ::google::protobuf::int32 prepare_;
  ::google::protobuf::int32 team_num_;
  ::google::protobuf::RepeatedPtrField< ::ProtoThreeObj > show_info_;
  ::google::protobuf::RepeatedPtrField< ::ProtoPairObj > mount_info_;
  ::std::string* prev_;
  ::google::protobuf::int32 team_limit_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoTeamer* default_instance_;
};
// -------------------------------------------------------------------

class ProtoLimitTimeLabel : public ::google::protobuf::Message {
 public:
  ProtoLimitTimeLabel();
  virtual ~ProtoLimitTimeLabel();
  
  ProtoLimitTimeLabel(const ProtoLimitTimeLabel& from);
  
  inline ProtoLimitTimeLabel& operator=(const ProtoLimitTimeLabel& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoLimitTimeLabel& default_instance();
  
  void Swap(ProtoLimitTimeLabel* other);
  
  // implements Message ----------------------------------------------
  
  ProtoLimitTimeLabel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoLimitTimeLabel& from);
  void MergeFrom(const ProtoLimitTimeLabel& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 label_id = 1;
  inline bool has_label_id() const;
  inline void clear_label_id();
  static const int kLabelIdFieldNumber = 1;
  inline ::google::protobuf::int32 label_id() const;
  inline void set_label_id(::google::protobuf::int32 value);
  
  // optional int32 left_time = 2;
  inline bool has_left_time() const;
  inline void clear_left_time();
  static const int kLeftTimeFieldNumber = 2;
  inline ::google::protobuf::int32 left_time() const;
  inline void set_left_time(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoLimitTimeLabel)
 private:
  inline void set_has_label_id();
  inline void clear_has_label_id();
  inline void set_has_left_time();
  inline void clear_has_left_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 label_id_;
  ::google::protobuf::int32 left_time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoLimitTimeLabel* default_instance_;
};
// -------------------------------------------------------------------

class ProtoDivineRecord : public ::google::protobuf::Message {
 public:
  ProtoDivineRecord();
  virtual ~ProtoDivineRecord();
  
  ProtoDivineRecord(const ProtoDivineRecord& from);
  
  inline ProtoDivineRecord& operator=(const ProtoDivineRecord& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoDivineRecord& default_instance();
  
  void Swap(ProtoDivineRecord* other);
  
  // implements Message ----------------------------------------------
  
  ProtoDivineRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoDivineRecord& from);
  void MergeFrom(const ProtoDivineRecord& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string role_name = 1;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 1;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  
  // optional int32 item_id = 2;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::int32 item_id() const;
  inline void set_item_id(::google::protobuf::int32 value);
  
  // optional int32 item_amount = 3;
  inline bool has_item_amount() const;
  inline void clear_item_amount();
  static const int kItemAmountFieldNumber = 3;
  inline ::google::protobuf::int32 item_amount() const;
  inline void set_item_amount(::google::protobuf::int32 value);
  
  // optional int64 role_id = 4;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 4;
  inline ::google::protobuf::int64 role_id() const;
  inline void set_role_id(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:ProtoDivineRecord)
 private:
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_item_amount();
  inline void clear_has_item_amount();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* role_name_;
  ::google::protobuf::int32 item_id_;
  ::google::protobuf::int32 item_amount_;
  ::google::protobuf::int64 role_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoDivineRecord* default_instance_;
};
// -------------------------------------------------------------------

class ProtoAchieveDetail : public ::google::protobuf::Message {
 public:
  ProtoAchieveDetail();
  virtual ~ProtoAchieveDetail();
  
  ProtoAchieveDetail(const ProtoAchieveDetail& from);
  
  inline ProtoAchieveDetail& operator=(const ProtoAchieveDetail& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoAchieveDetail& default_instance();
  
  void Swap(ProtoAchieveDetail* other);
  
  // implements Message ----------------------------------------------
  
  ProtoAchieveDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoAchieveDetail& from);
  void MergeFrom(const ProtoAchieveDetail& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 achieve_id = 1;
  inline bool has_achieve_id() const;
  inline void clear_achieve_id();
  static const int kAchieveIdFieldNumber = 1;
  inline ::google::protobuf::int32 achieve_id() const;
  inline void set_achieve_id(::google::protobuf::int32 value);
  
  // optional int32 ach_index = 2;
  inline bool has_ach_index() const;
  inline void clear_ach_index();
  static const int kAchIndexFieldNumber = 2;
  inline ::google::protobuf::int32 ach_index() const;
  inline void set_ach_index(::google::protobuf::int32 value);
  
  // optional int32 finish_num = 3;
  inline bool has_finish_num() const;
  inline void clear_finish_num();
  static const int kFinishNumFieldNumber = 3;
  inline ::google::protobuf::int32 finish_num() const;
  inline void set_finish_num(::google::protobuf::int32 value);
  
  // optional int32 get_status = 4;
  inline bool has_get_status() const;
  inline void clear_get_status();
  static const int kGetStatusFieldNumber = 4;
  inline ::google::protobuf::int32 get_status() const;
  inline void set_get_status(::google::protobuf::int32 value);
  
  // optional int64 finish_tick = 5;
  inline bool has_finish_tick() const;
  inline void clear_finish_tick();
  static const int kFinishTickFieldNumber = 5;
  inline ::google::protobuf::int64 finish_tick() const;
  inline void set_finish_tick(::google::protobuf::int64 value);
  
  // optional int32 special_value = 6;
  inline bool has_special_value() const;
  inline void clear_special_value();
  static const int kSpecialValueFieldNumber = 6;
  inline ::google::protobuf::int32 special_value() const;
  inline void set_special_value(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoAchieveDetail)
 private:
  inline void set_has_achieve_id();
  inline void clear_has_achieve_id();
  inline void set_has_ach_index();
  inline void clear_has_ach_index();
  inline void set_has_finish_num();
  inline void clear_has_finish_num();
  inline void set_has_get_status();
  inline void clear_has_get_status();
  inline void set_has_finish_tick();
  inline void clear_has_finish_tick();
  inline void set_has_special_value();
  inline void clear_has_special_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 achieve_id_;
  ::google::protobuf::int32 ach_index_;
  ::google::protobuf::int32 finish_num_;
  ::google::protobuf::int32 get_status_;
  ::google::protobuf::int64 finish_tick_;
  ::google::protobuf::int32 special_value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoAchieveDetail* default_instance_;
};
// -------------------------------------------------------------------

class ProtoBrocastRole : public ::google::protobuf::Message {
 public:
  ProtoBrocastRole();
  virtual ~ProtoBrocastRole();
  
  ProtoBrocastRole(const ProtoBrocastRole& from);
  
  inline ProtoBrocastRole& operator=(const ProtoBrocastRole& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoBrocastRole& default_instance();
  
  void Swap(ProtoBrocastRole* other);
  
  // implements Message ----------------------------------------------
  
  ProtoBrocastRole* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoBrocastRole& from);
  void MergeFrom(const ProtoBrocastRole& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int64 role_id() const;
  inline void set_role_id(::google::protobuf::int64 value);
  
  // optional string role_name = 2;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 2;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  
  // optional int32 team_state = 3;
  inline bool has_team_state() const;
  inline void clear_team_state();
  static const int kTeamStateFieldNumber = 3;
  inline ::google::protobuf::int32 team_state() const;
  inline void set_team_state(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoBrocastRole)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_team_state();
  inline void clear_has_team_state();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 role_id_;
  ::std::string* role_name_;
  ::google::protobuf::int32 team_state_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoBrocastRole* default_instance_;
};
// -------------------------------------------------------------------

class ProtoMonster : public ::google::protobuf::Message {
 public:
  ProtoMonster();
  virtual ~ProtoMonster();
  
  ProtoMonster(const ProtoMonster& from);
  
  inline ProtoMonster& operator=(const ProtoMonster& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoMonster& default_instance();
  
  void Swap(ProtoMonster* other);
  
  // implements Message ----------------------------------------------
  
  ProtoMonster* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoMonster& from);
  void MergeFrom(const ProtoMonster& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 sort = 1;
  inline bool has_sort() const;
  inline void clear_sort();
  static const int kSortFieldNumber = 1;
  inline ::google::protobuf::int32 sort() const;
  inline void set_sort(::google::protobuf::int32 value);
  
  // optional int32 left_amount = 2;
  inline bool has_left_amount() const;
  inline void clear_left_amount();
  static const int kLeftAmountFieldNumber = 2;
  inline ::google::protobuf::int32 left_amount() const;
  inline void set_left_amount(::google::protobuf::int32 value);
  
  // optional int32 total_amount = 3;
  inline bool has_total_amount() const;
  inline void clear_total_amount();
  static const int kTotalAmountFieldNumber = 3;
  inline ::google::protobuf::int32 total_amount() const;
  inline void set_total_amount(::google::protobuf::int32 value);
  
  // optional .ProtoCoord coord = 4;
  inline bool has_coord() const;
  inline void clear_coord();
  static const int kCoordFieldNumber = 4;
  inline const ::ProtoCoord& coord() const;
  inline ::ProtoCoord* mutable_coord();
  inline ::ProtoCoord* release_coord();
  
  // @@protoc_insertion_point(class_scope:ProtoMonster)
 private:
  inline void set_has_sort();
  inline void clear_has_sort();
  inline void set_has_left_amount();
  inline void clear_has_left_amount();
  inline void set_has_total_amount();
  inline void clear_has_total_amount();
  inline void set_has_coord();
  inline void clear_has_coord();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 sort_;
  ::google::protobuf::int32 left_amount_;
  ::ProtoCoord* coord_;
  ::google::protobuf::int32 total_amount_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoMonster* default_instance_;
};
// -------------------------------------------------------------------

class ProtoActivityInfo : public ::google::protobuf::Message {
 public:
  ProtoActivityInfo();
  virtual ~ProtoActivityInfo();
  
  ProtoActivityInfo(const ProtoActivityInfo& from);
  
  inline ProtoActivityInfo& operator=(const ProtoActivityInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoActivityInfo& default_instance();
  
  void Swap(ProtoActivityInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProtoActivityInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoActivityInfo& from);
  void MergeFrom(const ProtoActivityInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 activity_id = 1;
  inline bool has_activity_id() const;
  inline void clear_activity_id();
  static const int kActivityIdFieldNumber = 1;
  inline ::google::protobuf::int32 activity_id() const;
  inline void set_activity_id(::google::protobuf::int32 value);
  
  // optional int32 activity_state = 2;
  inline bool has_activity_state() const;
  inline void clear_activity_state();
  static const int kActivityStateFieldNumber = 2;
  inline ::google::protobuf::int32 activity_state() const;
  inline void set_activity_state(::google::protobuf::int32 value);
  
  // optional int32 icon_bling = 3;
  inline bool has_icon_bling() const;
  inline void clear_icon_bling();
  static const int kIconBlingFieldNumber = 3;
  inline ::google::protobuf::int32 icon_bling() const;
  inline void set_icon_bling(::google::protobuf::int32 value);
  
  // optional int32 left_time = 4;
  inline bool has_left_time() const;
  inline void clear_left_time();
  static const int kLeftTimeFieldNumber = 4;
  inline ::google::protobuf::int32 left_time() const;
  inline void set_left_time(::google::protobuf::int32 value);
  
  // optional int32 sub_value = 5;
  inline bool has_sub_value() const;
  inline void clear_sub_value();
  static const int kSubValueFieldNumber = 5;
  inline ::google::protobuf::int32 sub_value() const;
  inline void set_sub_value(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoActivityInfo)
 private:
  inline void set_has_activity_id();
  inline void clear_has_activity_id();
  inline void set_has_activity_state();
  inline void clear_has_activity_state();
  inline void set_has_icon_bling();
  inline void clear_has_icon_bling();
  inline void set_has_left_time();
  inline void clear_has_left_time();
  inline void set_has_sub_value();
  inline void clear_has_sub_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 activity_id_;
  ::google::protobuf::int32 activity_state_;
  ::google::protobuf::int32 icon_bling_;
  ::google::protobuf::int32 left_time_;
  ::google::protobuf::int32 sub_value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoActivityInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProtoBeast : public ::google::protobuf::Message {
 public:
  ProtoBeast();
  virtual ~ProtoBeast();
  
  ProtoBeast(const ProtoBeast& from);
  
  inline ProtoBeast& operator=(const ProtoBeast& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoBeast& default_instance();
  
  void Swap(ProtoBeast* other);
  
  // implements Message ----------------------------------------------
  
  ProtoBeast* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoBeast& from);
  void MergeFrom(const ProtoBeast& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 beast_id = 1;
  inline bool has_beast_id() const;
  inline void clear_beast_id();
  static const int kBeastIdFieldNumber = 1;
  inline ::google::protobuf::int64 beast_id() const;
  inline void set_beast_id(::google::protobuf::int64 value);
  
  // optional int32 beast_sort = 2;
  inline bool has_beast_sort() const;
  inline void clear_beast_sort();
  static const int kBeastSortFieldNumber = 2;
  inline ::google::protobuf::int32 beast_sort() const;
  inline void set_beast_sort(::google::protobuf::int32 value);
  
  // optional int32 basic_attck = 3;
  inline bool has_basic_attck() const;
  inline void clear_basic_attck();
  static const int kBasicAttckFieldNumber = 3;
  inline ::google::protobuf::int32 basic_attck() const;
  inline void set_basic_attck(::google::protobuf::int32 value);
  
  // optional int32 basic_hit = 4;
  inline bool has_basic_hit() const;
  inline void clear_basic_hit();
  static const int kBasicHitFieldNumber = 4;
  inline ::google::protobuf::int32 basic_hit() const;
  inline void set_basic_hit(::google::protobuf::int32 value);
  
  // optional int32 basic_crit = 5;
  inline bool has_basic_crit() const;
  inline void clear_basic_crit();
  static const int kBasicCritFieldNumber = 5;
  inline ::google::protobuf::int32 basic_crit() const;
  inline void set_basic_crit(::google::protobuf::int32 value);
  
  // optional string beast_name = 6;
  inline bool has_beast_name() const;
  inline void clear_beast_name();
  static const int kBeastNameFieldNumber = 6;
  inline const ::std::string& beast_name() const;
  inline void set_beast_name(const ::std::string& value);
  inline void set_beast_name(const char* value);
  inline void set_beast_name(const char* value, size_t size);
  inline ::std::string* mutable_beast_name();
  inline ::std::string* release_beast_name();
  
  // repeated .ProtoBeastSkill skill_set = 7;
  inline int skill_set_size() const;
  inline void clear_skill_set();
  static const int kSkillSetFieldNumber = 7;
  inline const ::ProtoBeastSkill& skill_set(int index) const;
  inline ::ProtoBeastSkill* mutable_skill_set(int index);
  inline ::ProtoBeastSkill* add_skill_set();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBeastSkill >&
      skill_set() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBeastSkill >*
      mutable_skill_set();
  
  // optional int32 beast_pos = 8;
  inline bool has_beast_pos() const;
  inline void clear_beast_pos();
  static const int kBeastPosFieldNumber = 8;
  inline ::google::protobuf::int32 beast_pos() const;
  inline void set_beast_pos(::google::protobuf::int32 value);
  
  // optional int32 beast_force = 9;
  inline bool has_beast_force() const;
  inline void clear_beast_force();
  static const int kBeastForceFieldNumber = 9;
  inline ::google::protobuf::int32 beast_force() const;
  inline void set_beast_force(::google::protobuf::int32 value);
  
  // optional int32 ability = 10;
  inline bool has_ability() const;
  inline void clear_ability();
  static const int kAbilityFieldNumber = 10;
  inline ::google::protobuf::int32 ability() const;
  inline void set_ability(::google::protobuf::int32 value);
  
  // optional int32 growth_lvl = 11;
  inline bool has_growth_lvl() const;
  inline void clear_growth_lvl();
  static const int kGrowthLvlFieldNumber = 11;
  inline ::google::protobuf::int32 growth_lvl() const;
  inline void set_growth_lvl(::google::protobuf::int32 value);
  
  // optional int32 growth_value = 12;
  inline bool has_growth_value() const;
  inline void clear_growth_value();
  static const int kGrowthValueFieldNumber = 12;
  inline ::google::protobuf::int32 growth_value() const;
  inline void set_growth_value(::google::protobuf::int32 value);
  
  // repeated int32 beast_soul = 13;
  inline int beast_soul_size() const;
  inline void clear_beast_soul();
  static const int kBeastSoulFieldNumber = 13;
  inline ::google::protobuf::int32 beast_soul(int index) const;
  inline void set_beast_soul(int index, ::google::protobuf::int32 value);
  inline void add_beast_soul(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      beast_soul() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_beast_soul();
  
  // repeated int32 soul_value = 14;
  inline int soul_value_size() const;
  inline void clear_soul_value();
  static const int kSoulValueFieldNumber = 14;
  inline ::google::protobuf::int32 soul_value(int index) const;
  inline void set_soul_value(int index, ::google::protobuf::int32 value);
  inline void add_soul_value(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      soul_value() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_soul_value();
  
  // optional int32 beast_level = 15;
  inline bool has_beast_level() const;
  inline void clear_beast_level();
  static const int kBeastLevelFieldNumber = 15;
  inline ::google::protobuf::int32 beast_level() const;
  inline void set_beast_level(::google::protobuf::int32 value);
  
  // optional int32 color = 16;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 16;
  inline ::google::protobuf::int32 color() const;
  inline void set_color(::google::protobuf::int32 value);
  
  // optional int32 combine = 17;
  inline bool has_combine() const;
  inline void clear_combine();
  static const int kCombineFieldNumber = 17;
  inline ::google::protobuf::int32 combine() const;
  inline void set_combine(::google::protobuf::int32 value);
  
  // optional int32 guard = 18;
  inline bool has_guard() const;
  inline void clear_guard();
  static const int kGuardFieldNumber = 18;
  inline ::google::protobuf::int32 guard() const;
  inline void set_guard(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoBeast)
 private:
  inline void set_has_beast_id();
  inline void clear_has_beast_id();
  inline void set_has_beast_sort();
  inline void clear_has_beast_sort();
  inline void set_has_basic_attck();
  inline void clear_has_basic_attck();
  inline void set_has_basic_hit();
  inline void clear_has_basic_hit();
  inline void set_has_basic_crit();
  inline void clear_has_basic_crit();
  inline void set_has_beast_name();
  inline void clear_has_beast_name();
  inline void set_has_beast_pos();
  inline void clear_has_beast_pos();
  inline void set_has_beast_force();
  inline void clear_has_beast_force();
  inline void set_has_ability();
  inline void clear_has_ability();
  inline void set_has_growth_lvl();
  inline void clear_has_growth_lvl();
  inline void set_has_growth_value();
  inline void clear_has_growth_value();
  inline void set_has_beast_level();
  inline void clear_has_beast_level();
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_combine();
  inline void clear_has_combine();
  inline void set_has_guard();
  inline void clear_has_guard();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 beast_id_;
  ::google::protobuf::int32 beast_sort_;
  ::google::protobuf::int32 basic_attck_;
  ::google::protobuf::int32 basic_hit_;
  ::google::protobuf::int32 basic_crit_;
  ::std::string* beast_name_;
  ::google::protobuf::RepeatedPtrField< ::ProtoBeastSkill > skill_set_;
  ::google::protobuf::int32 beast_pos_;
  ::google::protobuf::int32 beast_force_;
  ::google::protobuf::int32 ability_;
  ::google::protobuf::int32 growth_lvl_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > beast_soul_;
  ::google::protobuf::int32 growth_value_;
  ::google::protobuf::int32 beast_level_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > soul_value_;
  ::google::protobuf::int32 color_;
  ::google::protobuf::int32 combine_;
  ::google::protobuf::int32 guard_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoBeast* default_instance_;
};
// -------------------------------------------------------------------

class ProtoFlaunt : public ::google::protobuf::Message {
 public:
  ProtoFlaunt();
  virtual ~ProtoFlaunt();
  
  ProtoFlaunt(const ProtoFlaunt& from);
  
  inline ProtoFlaunt& operator=(const ProtoFlaunt& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoFlaunt& default_instance();
  
  void Swap(ProtoFlaunt* other);
  
  // implements Message ----------------------------------------------
  
  ProtoFlaunt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoFlaunt& from);
  void MergeFrom(const ProtoFlaunt& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 flaunt_id = 1;
  inline bool has_flaunt_id() const;
  inline void clear_flaunt_id();
  static const int kFlauntIdFieldNumber = 1;
  inline ::google::protobuf::int64 flaunt_id() const;
  inline void set_flaunt_id(::google::protobuf::int64 value);
  
  // optional int32 color = 2;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 2;
  inline ::google::protobuf::int32 color() const;
  inline void set_color(::google::protobuf::int32 value);
  
  // optional string content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  
  // @@protoc_insertion_point(class_scope:ProtoFlaunt)
 private:
  inline void set_has_flaunt_id();
  inline void clear_has_flaunt_id();
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_content();
  inline void clear_has_content();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 flaunt_id_;
  ::std::string* content_;
  ::google::protobuf::int32 color_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoFlaunt* default_instance_;
};
// -------------------------------------------------------------------

class ProtoSyncLeague : public ::google::protobuf::Message {
 public:
  ProtoSyncLeague();
  virtual ~ProtoSyncLeague();
  
  ProtoSyncLeague(const ProtoSyncLeague& from);
  
  inline ProtoSyncLeague& operator=(const ProtoSyncLeague& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoSyncLeague& default_instance();
  
  void Swap(ProtoSyncLeague* other);
  
  // implements Message ----------------------------------------------
  
  ProtoSyncLeague* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoSyncLeague& from);
  void MergeFrom(const ProtoSyncLeague& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 league_index = 1;
  inline bool has_league_index() const;
  inline void clear_league_index();
  static const int kLeagueIndexFieldNumber = 1;
  inline ::google::protobuf::int64 league_index() const;
  inline void set_league_index(::google::protobuf::int64 value);
  
  // optional string league_name = 2;
  inline bool has_league_name() const;
  inline void clear_league_name();
  static const int kLeagueNameFieldNumber = 2;
  inline const ::std::string& league_name() const;
  inline void set_league_name(const ::std::string& value);
  inline void set_league_name(const char* value);
  inline void set_league_name(const char* value, size_t size);
  inline ::std::string* mutable_league_name();
  inline ::std::string* release_league_name();
  
  // optional int32 league_level = 3;
  inline bool has_league_level() const;
  inline void clear_league_level();
  static const int kLeagueLevelFieldNumber = 3;
  inline ::google::protobuf::int32 league_level() const;
  inline void set_league_level(::google::protobuf::int32 value);
  
  // optional int32 force = 4;
  inline bool has_force() const;
  inline void clear_force();
  static const int kForceFieldNumber = 4;
  inline ::google::protobuf::int32 force() const;
  inline void set_force(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoSyncLeague)
 private:
  inline void set_has_league_index();
  inline void clear_has_league_index();
  inline void set_has_league_name();
  inline void clear_has_league_name();
  inline void set_has_league_level();
  inline void clear_has_league_level();
  inline void set_has_force();
  inline void clear_has_force();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 league_index_;
  ::std::string* league_name_;
  ::google::protobuf::int32 league_level_;
  ::google::protobuf::int32 force_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoSyncLeague* default_instance_;
};
// -------------------------------------------------------------------

class ProtoLeagueFighter : public ::google::protobuf::Message {
 public:
  ProtoLeagueFighter();
  virtual ~ProtoLeagueFighter();
  
  ProtoLeagueFighter(const ProtoLeagueFighter& from);
  
  inline ProtoLeagueFighter& operator=(const ProtoLeagueFighter& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoLeagueFighter& default_instance();
  
  void Swap(ProtoLeagueFighter* other);
  
  // implements Message ----------------------------------------------
  
  ProtoLeagueFighter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoLeagueFighter& from);
  void MergeFrom(const ProtoLeagueFighter& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string role_name = 1;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 1;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  
  // optional int32 role_sex = 2;
  inline bool has_role_sex() const;
  inline void clear_role_sex();
  static const int kRoleSexFieldNumber = 2;
  inline ::google::protobuf::int32 role_sex() const;
  inline void set_role_sex(::google::protobuf::int32 value);
  
  // optional int32 role_level = 3;
  inline bool has_role_level() const;
  inline void clear_role_level();
  static const int kRoleLevelFieldNumber = 3;
  inline ::google::protobuf::int32 role_level() const;
  inline void set_role_level(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoLeagueFighter)
 private:
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_role_sex();
  inline void clear_has_role_sex();
  inline void set_has_role_level();
  inline void clear_has_role_level();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* role_name_;
  ::google::protobuf::int32 role_sex_;
  ::google::protobuf::int32 role_level_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoLeagueFighter* default_instance_;
};
// -------------------------------------------------------------------

class ProtoExpRestore : public ::google::protobuf::Message {
 public:
  ProtoExpRestore();
  virtual ~ProtoExpRestore();
  
  ProtoExpRestore(const ProtoExpRestore& from);
  
  inline ProtoExpRestore& operator=(const ProtoExpRestore& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoExpRestore& default_instance();
  
  void Swap(ProtoExpRestore* other);
  
  // implements Message ----------------------------------------------
  
  ProtoExpRestore* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoExpRestore& from);
  void MergeFrom(const ProtoExpRestore& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 activity_id = 1;
  inline bool has_activity_id() const;
  inline void clear_activity_id();
  static const int kActivityIdFieldNumber = 1;
  inline ::google::protobuf::int32 activity_id() const;
  inline void set_activity_id(::google::protobuf::int32 value);
  
  // optional int32 restore_count = 2;
  inline bool has_restore_count() const;
  inline void clear_restore_count();
  static const int kRestoreCountFieldNumber = 2;
  inline ::google::protobuf::int32 restore_count() const;
  inline void set_restore_count(::google::protobuf::int32 value);
  
  // optional .ProtoMoney money = 3;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 3;
  inline const ::ProtoMoney& money() const;
  inline ::ProtoMoney* mutable_money();
  inline ::ProtoMoney* release_money();
  
  // optional int32 exp = 4;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 4;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);
  
  // optional int32 reputation = 5;
  inline bool has_reputation() const;
  inline void clear_reputation();
  static const int kReputationFieldNumber = 5;
  inline ::google::protobuf::int32 reputation() const;
  inline void set_reputation(::google::protobuf::int32 value);
  
  // optional int32 honour = 6;
  inline bool has_honour() const;
  inline void clear_honour();
  static const int kHonourFieldNumber = 6;
  inline ::google::protobuf::int32 honour() const;
  inline void set_honour(::google::protobuf::int32 value);
  
  // optional int32 exploit = 7;
  inline bool has_exploit() const;
  inline void clear_exploit();
  static const int kExploitFieldNumber = 7;
  inline ::google::protobuf::int32 exploit() const;
  inline void set_exploit(::google::protobuf::int32 value);
  
  // optional int32 league_contri = 8;
  inline bool has_league_contri() const;
  inline void clear_league_contri();
  static const int kLeagueContriFieldNumber = 8;
  inline ::google::protobuf::int32 league_contri() const;
  inline void set_league_contri(::google::protobuf::int32 value);
  
  // optional int32 reiki = 9;
  inline bool has_reiki() const;
  inline void clear_reiki();
  static const int kReikiFieldNumber = 9;
  inline ::google::protobuf::int32 reiki() const;
  inline void set_reiki(::google::protobuf::int32 value);
  
  // repeated int32 free_reward_list = 10;
  inline int free_reward_list_size() const;
  inline void clear_free_reward_list();
  static const int kFreeRewardListFieldNumber = 10;
  inline ::google::protobuf::int32 free_reward_list(int index) const;
  inline void set_free_reward_list(int index, ::google::protobuf::int32 value);
  inline void add_free_reward_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      free_reward_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_free_reward_list();
  
  // repeated int32 money_reward_list = 11;
  inline int money_reward_list_size() const;
  inline void clear_money_reward_list();
  static const int kMoneyRewardListFieldNumber = 11;
  inline ::google::protobuf::int32 money_reward_list(int index) const;
  inline void set_money_reward_list(int index, ::google::protobuf::int32 value);
  inline void add_money_reward_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      money_reward_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_money_reward_list();
  
  // optional int32 free_rate = 12;
  inline bool has_free_rate() const;
  inline void clear_free_rate();
  static const int kFreeRateFieldNumber = 12;
  inline ::google::protobuf::int32 free_rate() const;
  inline void set_free_rate(::google::protobuf::int32 value);
  
  // optional int32 need_money = 13;
  inline bool has_need_money() const;
  inline void clear_need_money();
  static const int kNeedMoneyFieldNumber = 13;
  inline ::google::protobuf::int32 need_money() const;
  inline void set_need_money(::google::protobuf::int32 value);
  
  // optional int32 open_level = 14;
  inline bool has_open_level() const;
  inline void clear_open_level();
  static const int kOpenLevelFieldNumber = 14;
  inline ::google::protobuf::int32 open_level() const;
  inline void set_open_level(::google::protobuf::int32 value);
  
  // optional int32 vip_limit = 15;
  inline bool has_vip_limit() const;
  inline void clear_vip_limit();
  static const int kVipLimitFieldNumber = 15;
  inline ::google::protobuf::int32 vip_limit() const;
  inline void set_vip_limit(::google::protobuf::int32 value);
  
  // optional int32 show_index = 16;
  inline bool has_show_index() const;
  inline void clear_show_index();
  static const int kShowIndexFieldNumber = 16;
  inline ::google::protobuf::int32 show_index() const;
  inline void set_show_index(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoExpRestore)
 private:
  inline void set_has_activity_id();
  inline void clear_has_activity_id();
  inline void set_has_restore_count();
  inline void clear_has_restore_count();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_reputation();
  inline void clear_has_reputation();
  inline void set_has_honour();
  inline void clear_has_honour();
  inline void set_has_exploit();
  inline void clear_has_exploit();
  inline void set_has_league_contri();
  inline void clear_has_league_contri();
  inline void set_has_reiki();
  inline void clear_has_reiki();
  inline void set_has_free_rate();
  inline void clear_has_free_rate();
  inline void set_has_need_money();
  inline void clear_has_need_money();
  inline void set_has_open_level();
  inline void clear_has_open_level();
  inline void set_has_vip_limit();
  inline void clear_has_vip_limit();
  inline void set_has_show_index();
  inline void clear_has_show_index();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 activity_id_;
  ::google::protobuf::int32 restore_count_;
  ::ProtoMoney* money_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 reputation_;
  ::google::protobuf::int32 honour_;
  ::google::protobuf::int32 exploit_;
  ::google::protobuf::int32 league_contri_;
  ::google::protobuf::int32 reiki_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > free_reward_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > money_reward_list_;
  ::google::protobuf::int32 free_rate_;
  ::google::protobuf::int32 need_money_;
  ::google::protobuf::int32 open_level_;
  ::google::protobuf::int32 vip_limit_;
  ::google::protobuf::int32 show_index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoExpRestore* default_instance_;
};
// -------------------------------------------------------------------

class ProtoLMRole : public ::google::protobuf::Message {
 public:
  ProtoLMRole();
  virtual ~ProtoLMRole();
  
  ProtoLMRole(const ProtoLMRole& from);
  
  inline ProtoLMRole& operator=(const ProtoLMRole& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoLMRole& default_instance();
  
  void Swap(ProtoLMRole* other);
  
  // implements Message ----------------------------------------------
  
  ProtoLMRole* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoLMRole& from);
  void MergeFrom(const ProtoLMRole& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 rank_index = 1;
  inline bool has_rank_index() const;
  inline void clear_rank_index();
  static const int kRankIndexFieldNumber = 1;
  inline ::google::protobuf::int32 rank_index() const;
  inline void set_rank_index(::google::protobuf::int32 value);
  
  // optional int64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::int64 role_id() const;
  inline void set_role_id(::google::protobuf::int64 value);
  
  // optional string role_name = 3;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 3;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  
  // optional string league_name = 4;
  inline bool has_league_name() const;
  inline void clear_league_name();
  static const int kLeagueNameFieldNumber = 4;
  inline const ::std::string& league_name() const;
  inline void set_league_name(const ::std::string& value);
  inline void set_league_name(const char* value);
  inline void set_league_name(const char* value, size_t size);
  inline ::std::string* mutable_league_name();
  inline ::std::string* release_league_name();
  
  // optional int32 role_force = 5;
  inline bool has_role_force() const;
  inline void clear_role_force();
  static const int kRoleForceFieldNumber = 5;
  inline ::google::protobuf::int32 role_force() const;
  inline void set_role_force(::google::protobuf::int32 value);
  
  // optional int32 fight_score = 6;
  inline bool has_fight_score() const;
  inline void clear_fight_score();
  static const int kFightScoreFieldNumber = 6;
  inline ::google::protobuf::int32 fight_score() const;
  inline void set_fight_score(::google::protobuf::int32 value);
  
  // optional int32 sex = 7;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 7;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);
  
  // optional int32 level = 8;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 8;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoLMRole)
 private:
  inline void set_has_rank_index();
  inline void clear_has_rank_index();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_league_name();
  inline void clear_has_league_name();
  inline void set_has_role_force();
  inline void clear_has_role_force();
  inline void set_has_fight_score();
  inline void clear_has_fight_score();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_level();
  inline void clear_has_level();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 role_id_;
  ::std::string* role_name_;
  ::google::protobuf::int32 rank_index_;
  ::google::protobuf::int32 role_force_;
  ::std::string* league_name_;
  ::google::protobuf::int32 fight_score_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 level_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoLMRole* default_instance_;
};
// -------------------------------------------------------------------

class ProtoMarLeague : public ::google::protobuf::Message {
 public:
  ProtoMarLeague();
  virtual ~ProtoMarLeague();
  
  ProtoMarLeague(const ProtoMarLeague& from);
  
  inline ProtoMarLeague& operator=(const ProtoMarLeague& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoMarLeague& default_instance();
  
  void Swap(ProtoMarLeague* other);
  
  // implements Message ----------------------------------------------
  
  ProtoMarLeague* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoMarLeague& from);
  void MergeFrom(const ProtoMarLeague& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);
  
  // optional int64 league_id = 2;
  inline bool has_league_id() const;
  inline void clear_league_id();
  static const int kLeagueIdFieldNumber = 2;
  inline ::google::protobuf::int64 league_id() const;
  inline void set_league_id(::google::protobuf::int64 value);
  
  // optional string leader_name = 3;
  inline bool has_leader_name() const;
  inline void clear_leader_name();
  static const int kLeaderNameFieldNumber = 3;
  inline const ::std::string& leader_name() const;
  inline void set_leader_name(const ::std::string& value);
  inline void set_leader_name(const char* value);
  inline void set_leader_name(const char* value, size_t size);
  inline ::std::string* mutable_leader_name();
  inline ::std::string* release_leader_name();
  
  // optional string league_name = 4;
  inline bool has_league_name() const;
  inline void clear_league_name();
  static const int kLeagueNameFieldNumber = 4;
  inline const ::std::string& league_name() const;
  inline void set_league_name(const ::std::string& value);
  inline void set_league_name(const char* value);
  inline void set_league_name(const char* value, size_t size);
  inline ::std::string* mutable_league_name();
  inline ::std::string* release_league_name();
  
  // optional int32 league_force = 5;
  inline bool has_league_force() const;
  inline void clear_league_force();
  static const int kLeagueForceFieldNumber = 5;
  inline ::google::protobuf::int32 league_force() const;
  inline void set_league_force(::google::protobuf::int32 value);
  
  // optional int32 league_score = 6;
  inline bool has_league_score() const;
  inline void clear_league_score();
  static const int kLeagueScoreFieldNumber = 6;
  inline ::google::protobuf::int32 league_score() const;
  inline void set_league_score(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoMarLeague)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_league_id();
  inline void clear_has_league_id();
  inline void set_has_leader_name();
  inline void clear_has_leader_name();
  inline void set_has_league_name();
  inline void clear_has_league_name();
  inline void set_has_league_force();
  inline void clear_has_league_force();
  inline void set_has_league_score();
  inline void clear_has_league_score();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 league_id_;
  ::std::string* leader_name_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 league_force_;
  ::std::string* league_name_;
  ::google::protobuf::int32 league_score_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoMarLeague* default_instance_;
};
// -------------------------------------------------------------------

class ProtoRoleInfo : public ::google::protobuf::Message {
 public:
  ProtoRoleInfo();
  virtual ~ProtoRoleInfo();
  
  ProtoRoleInfo(const ProtoRoleInfo& from);
  
  inline ProtoRoleInfo& operator=(const ProtoRoleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoRoleInfo& default_instance();
  
  void Swap(ProtoRoleInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProtoRoleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoRoleInfo& from);
  void MergeFrom(const ProtoRoleInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int64 role_id() const;
  inline void set_role_id(::google::protobuf::int64 value);
  
  // optional string role_name = 2;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 2;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  
  // optional int32 role_sex = 3;
  inline bool has_role_sex() const;
  inline void clear_role_sex();
  static const int kRoleSexFieldNumber = 3;
  inline ::google::protobuf::int32 role_sex() const;
  inline void set_role_sex(::google::protobuf::int32 value);
  
  // optional int32 role_force = 4;
  inline bool has_role_force() const;
  inline void clear_role_force();
  static const int kRoleForceFieldNumber = 4;
  inline ::google::protobuf::int32 role_force() const;
  inline void set_role_force(::google::protobuf::int32 value);
  
  // optional int32 vip_type = 5;
  inline bool has_vip_type() const;
  inline void clear_vip_type();
  static const int kVipTypeFieldNumber = 5;
  inline ::google::protobuf::int32 vip_type() const;
  inline void set_vip_type(::google::protobuf::int32 value);
  
  // optional int32 label_id = 6;
  inline bool has_label_id() const;
  inline void clear_label_id();
  static const int kLabelIdFieldNumber = 6;
  inline ::google::protobuf::int32 label_id() const;
  inline void set_label_id(::google::protobuf::int32 value);
  
  // optional int32 role_level = 7;
  inline bool has_role_level() const;
  inline void clear_role_level();
  static const int kRoleLevelFieldNumber = 7;
  inline ::google::protobuf::int32 role_level() const;
  inline void set_role_level(::google::protobuf::int32 value);
  
  // optional int64 league_id = 8;
  inline bool has_league_id() const;
  inline void clear_league_id();
  static const int kLeagueIdFieldNumber = 8;
  inline ::google::protobuf::int64 league_id() const;
  inline void set_league_id(::google::protobuf::int64 value);
  
  // optional string league_name = 9;
  inline bool has_league_name() const;
  inline void clear_league_name();
  static const int kLeagueNameFieldNumber = 9;
  inline const ::std::string& league_name() const;
  inline void set_league_name(const ::std::string& value);
  inline void set_league_name(const char* value);
  inline void set_league_name(const char* value, size_t size);
  inline ::std::string* mutable_league_name();
  inline ::std::string* release_league_name();
  
  // optional int32 role_career = 10;
  inline bool has_role_career() const;
  inline void clear_role_career();
  static const int kRoleCareerFieldNumber = 10;
  inline ::google::protobuf::int32 role_career() const;
  inline void set_role_career(::google::protobuf::int32 value);
  
  // optional int32 role_wing = 11;
  inline bool has_role_wing() const;
  inline void clear_role_wing();
  static const int kRoleWingFieldNumber = 11;
  inline ::google::protobuf::int32 role_wing() const;
  inline void set_role_wing(::google::protobuf::int32 value);
  
  // optional int32 role_solider = 12;
  inline bool has_role_solider() const;
  inline void clear_role_solider();
  static const int kRoleSoliderFieldNumber = 12;
  inline ::google::protobuf::int32 role_solider() const;
  inline void set_role_solider(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoRoleInfo)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_role_sex();
  inline void clear_has_role_sex();
  inline void set_has_role_force();
  inline void clear_has_role_force();
  inline void set_has_vip_type();
  inline void clear_has_vip_type();
  inline void set_has_label_id();
  inline void clear_has_label_id();
  inline void set_has_role_level();
  inline void clear_has_role_level();
  inline void set_has_league_id();
  inline void clear_has_league_id();
  inline void set_has_league_name();
  inline void clear_has_league_name();
  inline void set_has_role_career();
  inline void clear_has_role_career();
  inline void set_has_role_wing();
  inline void clear_has_role_wing();
  inline void set_has_role_solider();
  inline void clear_has_role_solider();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 role_id_;
  ::std::string* role_name_;
  ::google::protobuf::int32 role_sex_;
  ::google::protobuf::int32 role_force_;
  ::google::protobuf::int32 vip_type_;
  ::google::protobuf::int32 label_id_;
  ::google::protobuf::int64 league_id_;
  ::google::protobuf::int32 role_level_;
  ::google::protobuf::int32 role_career_;
  ::std::string* league_name_;
  ::google::protobuf::int32 role_wing_;
  ::google::protobuf::int32 role_solider_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoRoleInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProtoRankRecord : public ::google::protobuf::Message {
 public:
  ProtoRankRecord();
  virtual ~ProtoRankRecord();
  
  ProtoRankRecord(const ProtoRankRecord& from);
  
  inline ProtoRankRecord& operator=(const ProtoRankRecord& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoRankRecord& default_instance();
  
  void Swap(ProtoRankRecord* other);
  
  // implements Message ----------------------------------------------
  
  ProtoRankRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoRankRecord& from);
  void MergeFrom(const ProtoRankRecord& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 cur_rank = 1;
  inline bool has_cur_rank() const;
  inline void clear_cur_rank();
  static const int kCurRankFieldNumber = 1;
  inline ::google::protobuf::int32 cur_rank() const;
  inline void set_cur_rank(::google::protobuf::int32 value);
  
  // optional int32 last_rank = 2;
  inline bool has_last_rank() const;
  inline void clear_last_rank();
  static const int kLastRankFieldNumber = 2;
  inline ::google::protobuf::int32 last_rank() const;
  inline void set_last_rank(::google::protobuf::int32 value);
  
  // optional int64 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::int64 role_id() const;
  inline void set_role_id(::google::protobuf::int64 value);
  
  // optional int32 vip_type = 4;
  inline bool has_vip_type() const;
  inline void clear_vip_type();
  static const int kVipTypeFieldNumber = 4;
  inline ::google::protobuf::int32 vip_type() const;
  inline void set_vip_type(::google::protobuf::int32 value);
  
  // optional int32 rank_value = 5;
  inline bool has_rank_value() const;
  inline void clear_rank_value();
  static const int kRankValueFieldNumber = 5;
  inline ::google::protobuf::int32 rank_value() const;
  inline void set_rank_value(::google::protobuf::int32 value);
  
  // optional string display_content = 6;
  inline bool has_display_content() const;
  inline void clear_display_content();
  static const int kDisplayContentFieldNumber = 6;
  inline const ::std::string& display_content() const;
  inline void set_display_content(const ::std::string& value);
  inline void set_display_content(const char* value);
  inline void set_display_content(const char* value, size_t size);
  inline ::std::string* mutable_display_content();
  inline ::std::string* release_display_content();
  
  // optional string league_name = 7;
  inline bool has_league_name() const;
  inline void clear_league_name();
  static const int kLeagueNameFieldNumber = 7;
  inline const ::std::string& league_name() const;
  inline void set_league_name(const ::std::string& value);
  inline void set_league_name(const char* value);
  inline void set_league_name(const char* value, size_t size);
  inline ::std::string* mutable_league_name();
  inline ::std::string* release_league_name();
  
  // optional int64 additional_id = 8;
  inline bool has_additional_id() const;
  inline void clear_additional_id();
  static const int kAdditionalIdFieldNumber = 8;
  inline ::google::protobuf::int64 additional_id() const;
  inline void set_additional_id(::google::protobuf::int64 value);
  
  // optional int64 worship_num = 9;
  inline bool has_worship_num() const;
  inline void clear_worship_num();
  static const int kWorshipNumFieldNumber = 9;
  inline ::google::protobuf::int64 worship_num() const;
  inline void set_worship_num(::google::protobuf::int64 value);
  
  // optional int32 is_worship = 10;
  inline bool has_is_worship() const;
  inline void clear_is_worship();
  static const int kIsWorshipFieldNumber = 10;
  inline ::google::protobuf::int32 is_worship() const;
  inline void set_is_worship(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoRankRecord)
 private:
  inline void set_has_cur_rank();
  inline void clear_has_cur_rank();
  inline void set_has_last_rank();
  inline void clear_has_last_rank();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_vip_type();
  inline void clear_has_vip_type();
  inline void set_has_rank_value();
  inline void clear_has_rank_value();
  inline void set_has_display_content();
  inline void clear_has_display_content();
  inline void set_has_league_name();
  inline void clear_has_league_name();
  inline void set_has_additional_id();
  inline void clear_has_additional_id();
  inline void set_has_worship_num();
  inline void clear_has_worship_num();
  inline void set_has_is_worship();
  inline void clear_has_is_worship();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 cur_rank_;
  ::google::protobuf::int32 last_rank_;
  ::google::protobuf::int64 role_id_;
  ::google::protobuf::int32 vip_type_;
  ::google::protobuf::int32 rank_value_;
  ::std::string* display_content_;
  ::std::string* league_name_;
  ::google::protobuf::int64 additional_id_;
  ::google::protobuf::int64 worship_num_;
  ::google::protobuf::int32 is_worship_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoRankRecord* default_instance_;
};
// -------------------------------------------------------------------

class ProtoFBReadyInfo : public ::google::protobuf::Message {
 public:
  ProtoFBReadyInfo();
  virtual ~ProtoFBReadyInfo();
  
  ProtoFBReadyInfo(const ProtoFBReadyInfo& from);
  
  inline ProtoFBReadyInfo& operator=(const ProtoFBReadyInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoFBReadyInfo& default_instance();
  
  void Swap(ProtoFBReadyInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProtoFBReadyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoFBReadyInfo& from);
  void MergeFrom(const ProtoFBReadyInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int64 role_id() const;
  inline void set_role_id(::google::protobuf::int64 value);
  
  // optional bool is_ready = 2;
  inline bool has_is_ready() const;
  inline void clear_is_ready();
  static const int kIsReadyFieldNumber = 2;
  inline bool is_ready() const;
  inline void set_is_ready(bool value);
  
  // @@protoc_insertion_point(class_scope:ProtoFBReadyInfo)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_is_ready();
  inline void clear_has_is_ready();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 role_id_;
  bool is_ready_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoFBReadyInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProtoFightPro : public ::google::protobuf::Message {
 public:
  ProtoFightPro();
  virtual ~ProtoFightPro();
  
  ProtoFightPro(const ProtoFightPro& from);
  
  inline ProtoFightPro& operator=(const ProtoFightPro& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoFightPro& default_instance();
  
  void Swap(ProtoFightPro* other);
  
  // implements Message ----------------------------------------------
  
  ProtoFightPro* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoFightPro& from);
  void MergeFrom(const ProtoFightPro& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 hit = 1;
  inline bool has_hit() const;
  inline void clear_hit();
  static const int kHitFieldNumber = 1;
  inline ::google::protobuf::int32 hit() const;
  inline void set_hit(::google::protobuf::int32 value);
  
  // optional int32 avoid = 2;
  inline bool has_avoid() const;
  inline void clear_avoid();
  static const int kAvoidFieldNumber = 2;
  inline ::google::protobuf::int32 avoid() const;
  inline void set_avoid(::google::protobuf::int32 value);
  
  // optional int32 crit = 3;
  inline bool has_crit() const;
  inline void clear_crit();
  static const int kCritFieldNumber = 3;
  inline ::google::protobuf::int32 crit() const;
  inline void set_crit(::google::protobuf::int32 value);
  
  // optional int32 toughness = 4;
  inline bool has_toughness() const;
  inline void clear_toughness();
  static const int kToughnessFieldNumber = 4;
  inline ::google::protobuf::int32 toughness() const;
  inline void set_toughness(::google::protobuf::int32 value);
  
  // optional int32 speed = 5;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 5;
  inline ::google::protobuf::int32 speed() const;
  inline void set_speed(::google::protobuf::int32 value);
  
  // optional int32 blood = 6;
  inline bool has_blood() const;
  inline void clear_blood();
  static const int kBloodFieldNumber = 6;
  inline ::google::protobuf::int32 blood() const;
  inline void set_blood(::google::protobuf::int32 value);
  
  // optional int32 blood_max = 7;
  inline bool has_blood_max() const;
  inline void clear_blood_max();
  static const int kBloodMaxFieldNumber = 7;
  inline ::google::protobuf::int32 blood_max() const;
  inline void set_blood_max(::google::protobuf::int32 value);
  
  // optional int32 magic = 8;
  inline bool has_magic() const;
  inline void clear_magic();
  static const int kMagicFieldNumber = 8;
  inline ::google::protobuf::int32 magic() const;
  inline void set_magic(::google::protobuf::int32 value);
  
  // optional int32 magic_max = 9;
  inline bool has_magic_max() const;
  inline void clear_magic_max();
  static const int kMagicMaxFieldNumber = 9;
  inline ::google::protobuf::int32 magic_max() const;
  inline void set_magic_max(::google::protobuf::int32 value);
  
  // optional int32 attack = 10;
  inline bool has_attack() const;
  inline void clear_attack();
  static const int kAttackFieldNumber = 10;
  inline ::google::protobuf::int32 attack() const;
  inline void set_attack(::google::protobuf::int32 value);
  
  // optional int32 defence = 11;
  inline bool has_defence() const;
  inline void clear_defence();
  static const int kDefenceFieldNumber = 11;
  inline ::google::protobuf::int32 defence() const;
  inline void set_defence(::google::protobuf::int32 value);
  
  // optional int32 crit_multi = 12;
  inline bool has_crit_multi() const;
  inline void clear_crit_multi();
  static const int kCritMultiFieldNumber = 12;
  inline ::google::protobuf::int32 crit_multi() const;
  inline void set_crit_multi(::google::protobuf::int32 value);
  
  // optional int32 damage_multi = 13;
  inline bool has_damage_multi() const;
  inline void clear_damage_multi();
  static const int kDamageMultiFieldNumber = 13;
  inline ::google::protobuf::int32 damage_multi() const;
  inline void set_damage_multi(::google::protobuf::int32 value);
  
  // optional int32 damage = 14;
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 14;
  inline ::google::protobuf::int32 damage() const;
  inline void set_damage(::google::protobuf::int32 value);
  
  // optional int32 reduction_multi = 15;
  inline bool has_reduction_multi() const;
  inline void clear_reduction_multi();
  static const int kReductionMultiFieldNumber = 15;
  inline ::google::protobuf::int32 reduction_multi() const;
  inline void set_reduction_multi(::google::protobuf::int32 value);
  
  // optional int32 reduction = 16;
  inline bool has_reduction() const;
  inline void clear_reduction();
  static const int kReductionFieldNumber = 16;
  inline ::google::protobuf::int32 reduction() const;
  inline void set_reduction(::google::protobuf::int32 value);
  
  // optional int32 force = 17;
  inline bool has_force() const;
  inline void clear_force();
  static const int kForceFieldNumber = 17;
  inline ::google::protobuf::int32 force() const;
  inline void set_force(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoFightPro)
 private:
  inline void set_has_hit();
  inline void clear_has_hit();
  inline void set_has_avoid();
  inline void clear_has_avoid();
  inline void set_has_crit();
  inline void clear_has_crit();
  inline void set_has_toughness();
  inline void clear_has_toughness();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_blood();
  inline void clear_has_blood();
  inline void set_has_blood_max();
  inline void clear_has_blood_max();
  inline void set_has_magic();
  inline void clear_has_magic();
  inline void set_has_magic_max();
  inline void clear_has_magic_max();
  inline void set_has_attack();
  inline void clear_has_attack();
  inline void set_has_defence();
  inline void clear_has_defence();
  inline void set_has_crit_multi();
  inline void clear_has_crit_multi();
  inline void set_has_damage_multi();
  inline void clear_has_damage_multi();
  inline void set_has_damage();
  inline void clear_has_damage();
  inline void set_has_reduction_multi();
  inline void clear_has_reduction_multi();
  inline void set_has_reduction();
  inline void clear_has_reduction();
  inline void set_has_force();
  inline void clear_has_force();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 hit_;
  ::google::protobuf::int32 avoid_;
  ::google::protobuf::int32 crit_;
  ::google::protobuf::int32 toughness_;
  ::google::protobuf::int32 speed_;
  ::google::protobuf::int32 blood_;
  ::google::protobuf::int32 blood_max_;
  ::google::protobuf::int32 magic_;
  ::google::protobuf::int32 magic_max_;
  ::google::protobuf::int32 attack_;
  ::google::protobuf::int32 defence_;
  ::google::protobuf::int32 crit_multi_;
  ::google::protobuf::int32 damage_multi_;
  ::google::protobuf::int32 damage_;
  ::google::protobuf::int32 reduction_multi_;
  ::google::protobuf::int32 reduction_;
  ::google::protobuf::int32 force_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoFightPro* default_instance_;
};
// -------------------------------------------------------------------

class ProtoWarItem : public ::google::protobuf::Message {
 public:
  ProtoWarItem();
  virtual ~ProtoWarItem();
  
  ProtoWarItem(const ProtoWarItem& from);
  
  inline ProtoWarItem& operator=(const ProtoWarItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoWarItem& default_instance();
  
  void Swap(ProtoWarItem* other);
  
  // implements Message ----------------------------------------------
  
  ProtoWarItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoWarItem& from);
  void MergeFrom(const ProtoWarItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .ProtoSyncLeague league_set = 1;
  inline int league_set_size() const;
  inline void clear_league_set();
  static const int kLeagueSetFieldNumber = 1;
  inline const ::ProtoSyncLeague& league_set(int index) const;
  inline ::ProtoSyncLeague* mutable_league_set(int index);
  inline ::ProtoSyncLeague* add_league_set();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoSyncLeague >&
      league_set() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoSyncLeague >*
      mutable_league_set();
  
  // @@protoc_insertion_point(class_scope:ProtoWarItem)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::ProtoSyncLeague > league_set_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoWarItem* default_instance_;
};
// -------------------------------------------------------------------

class ProtoSMBattleRankRec : public ::google::protobuf::Message {
 public:
  ProtoSMBattleRankRec();
  virtual ~ProtoSMBattleRankRec();
  
  ProtoSMBattleRankRec(const ProtoSMBattleRankRec& from);
  
  inline ProtoSMBattleRankRec& operator=(const ProtoSMBattleRankRec& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoSMBattleRankRec& default_instance();
  
  void Swap(ProtoSMBattleRankRec* other);
  
  // implements Message ----------------------------------------------
  
  ProtoSMBattleRankRec* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoSMBattleRankRec& from);
  void MergeFrom(const ProtoSMBattleRankRec& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int64 role_id() const;
  inline void set_role_id(::google::protobuf::int64 value);
  
  // optional string role_name = 2;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 2;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  
  // optional int32 sex = 3;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 3;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);
  
  // optional int32 rank = 4;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 4;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);
  
  // optional int32 score = 5;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 5;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);
  
  // optional int32 camp_id = 6;
  inline bool has_camp_id() const;
  inline void clear_camp_id();
  static const int kCampIdFieldNumber = 6;
  inline ::google::protobuf::int32 camp_id() const;
  inline void set_camp_id(::google::protobuf::int32 value);
  
  // optional int32 kill = 7;
  inline bool has_kill() const;
  inline void clear_kill();
  static const int kKillFieldNumber = 7;
  inline ::google::protobuf::int32 kill() const;
  inline void set_kill(::google::protobuf::int32 value);
  
  // optional int32 max_kill = 8;
  inline bool has_max_kill() const;
  inline void clear_max_kill();
  static const int kMaxKillFieldNumber = 8;
  inline ::google::protobuf::int32 max_kill() const;
  inline void set_max_kill(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoSMBattleRankRec)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_camp_id();
  inline void clear_has_camp_id();
  inline void set_has_kill();
  inline void clear_has_kill();
  inline void set_has_max_kill();
  inline void clear_has_max_kill();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 role_id_;
  ::std::string* role_name_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 camp_id_;
  ::google::protobuf::int32 kill_;
  ::google::protobuf::int32 max_kill_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoSMBattleRankRec* default_instance_;
};
// -------------------------------------------------------------------

class ProtoLWarItem : public ::google::protobuf::Message {
 public:
  ProtoLWarItem();
  virtual ~ProtoLWarItem();
  
  ProtoLWarItem(const ProtoLWarItem& from);
  
  inline ProtoLWarItem& operator=(const ProtoLWarItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoLWarItem& default_instance();
  
  void Swap(ProtoLWarItem* other);
  
  // implements Message ----------------------------------------------
  
  ProtoLWarItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoLWarItem& from);
  void MergeFrom(const ProtoLWarItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 item_rank = 1;
  inline bool has_item_rank() const;
  inline void clear_item_rank();
  static const int kItemRankFieldNumber = 1;
  inline ::google::protobuf::int32 item_rank() const;
  inline void set_item_rank(::google::protobuf::int32 value);
  
  // optional string item_name = 2;
  inline bool has_item_name() const;
  inline void clear_item_name();
  static const int kItemNameFieldNumber = 2;
  inline const ::std::string& item_name() const;
  inline void set_item_name(const ::std::string& value);
  inline void set_item_name(const char* value);
  inline void set_item_name(const char* value, size_t size);
  inline ::std::string* mutable_item_name();
  inline ::std::string* release_item_name();
  
  // optional int32 item_resource = 3;
  inline bool has_item_resource() const;
  inline void clear_item_resource();
  static const int kItemResourceFieldNumber = 3;
  inline ::google::protobuf::int32 item_resource() const;
  inline void set_item_resource(::google::protobuf::int32 value);
  
  // optional int64 league_id = 4;
  inline bool has_league_id() const;
  inline void clear_league_id();
  static const int kLeagueIdFieldNumber = 4;
  inline ::google::protobuf::int64 league_id() const;
  inline void set_league_id(::google::protobuf::int64 value);
  
  // optional int32 pixel_x = 5;
  inline bool has_pixel_x() const;
  inline void clear_pixel_x();
  static const int kPixelXFieldNumber = 5;
  inline ::google::protobuf::int32 pixel_x() const;
  inline void set_pixel_x(::google::protobuf::int32 value);
  
  // optional int32 pixel_y = 6;
  inline bool has_pixel_y() const;
  inline void clear_pixel_y();
  static const int kPixelYFieldNumber = 6;
  inline ::google::protobuf::int32 pixel_y() const;
  inline void set_pixel_y(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoLWarItem)
 private:
  inline void set_has_item_rank();
  inline void clear_has_item_rank();
  inline void set_has_item_name();
  inline void clear_has_item_name();
  inline void set_has_item_resource();
  inline void clear_has_item_resource();
  inline void set_has_league_id();
  inline void clear_has_league_id();
  inline void set_has_pixel_x();
  inline void clear_has_pixel_x();
  inline void set_has_pixel_y();
  inline void clear_has_pixel_y();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* item_name_;
  ::google::protobuf::int32 item_rank_;
  ::google::protobuf::int32 item_resource_;
  ::google::protobuf::int64 league_id_;
  ::google::protobuf::int32 pixel_x_;
  ::google::protobuf::int32 pixel_y_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoLWarItem* default_instance_;
};
// -------------------------------------------------------------------

class WorldBossRank : public ::google::protobuf::Message {
 public:
  WorldBossRank();
  virtual ~WorldBossRank();
  
  WorldBossRank(const WorldBossRank& from);
  
  inline WorldBossRank& operator=(const WorldBossRank& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WorldBossRank& default_instance();
  
  void Swap(WorldBossRank* other);
  
  // implements Message ----------------------------------------------
  
  WorldBossRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorldBossRank& from);
  void MergeFrom(const WorldBossRank& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int32 role_id() const;
  inline void set_role_id(::google::protobuf::int32 value);
  
  // optional string role_name = 2;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 2;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  
  // optional int32 rank = 3;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 3;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);
  
  // optional int32 score = 4;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 4;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:WorldBossRank)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_score();
  inline void clear_has_score();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* role_name_;
  ::google::protobuf::int32 role_id_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 score_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static WorldBossRank* default_instance_;
};
// -------------------------------------------------------------------

class ProtoWorldBossRank : public ::google::protobuf::Message {
 public:
  ProtoWorldBossRank();
  virtual ~ProtoWorldBossRank();
  
  ProtoWorldBossRank(const ProtoWorldBossRank& from);
  
  inline ProtoWorldBossRank& operator=(const ProtoWorldBossRank& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoWorldBossRank& default_instance();
  
  void Swap(ProtoWorldBossRank* other);
  
  // implements Message ----------------------------------------------
  
  ProtoWorldBossRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoWorldBossRank& from);
  void MergeFrom(const ProtoWorldBossRank& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int64 role_id() const;
  inline void set_role_id(::google::protobuf::int64 value);
  
  // optional string role_name = 2;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 2;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  
  // optional int32 rank = 3;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 3;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);
  
  // optional double score = 4;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 4;
  inline double score() const;
  inline void set_score(double value);
  
  // @@protoc_insertion_point(class_scope:ProtoWorldBossRank)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_score();
  inline void clear_has_score();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 role_id_;
  ::std::string* role_name_;
  double score_;
  ::google::protobuf::int32 rank_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoWorldBossRank* default_instance_;
};
// -------------------------------------------------------------------

class ProtoShoutDetail : public ::google::protobuf::Message {
 public:
  ProtoShoutDetail();
  virtual ~ProtoShoutDetail();
  
  ProtoShoutDetail(const ProtoShoutDetail& from);
  
  inline ProtoShoutDetail& operator=(const ProtoShoutDetail& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoShoutDetail& default_instance();
  
  void Swap(ProtoShoutDetail* other);
  
  // implements Message ----------------------------------------------
  
  ProtoShoutDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoShoutDetail& from);
  void MergeFrom(const ProtoShoutDetail& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 parse_type = 1;
  inline bool has_parse_type() const;
  inline void clear_parse_type();
  static const int kParseTypeFieldNumber = 1;
  inline ::google::protobuf::int32 parse_type() const;
  inline void set_parse_type(::google::protobuf::int32 value);
  
  // optional int32 single_value = 2;
  inline bool has_single_value() const;
  inline void clear_single_value();
  static const int kSingleValueFieldNumber = 2;
  inline ::google::protobuf::int32 single_value() const;
  inline void set_single_value(::google::protobuf::int32 value);
  
  // optional int64 single_id = 3;
  inline bool has_single_id() const;
  inline void clear_single_id();
  static const int kSingleIdFieldNumber = 3;
  inline ::google::protobuf::int64 single_id() const;
  inline void set_single_id(::google::protobuf::int64 value);
  
  // optional string single_content = 4;
  inline bool has_single_content() const;
  inline void clear_single_content();
  static const int kSingleContentFieldNumber = 4;
  inline const ::std::string& single_content() const;
  inline void set_single_content(const ::std::string& value);
  inline void set_single_content(const char* value);
  inline void set_single_content(const char* value, size_t size);
  inline ::std::string* mutable_single_content();
  inline ::std::string* release_single_content();
  
  // optional .ProtoBrocastRole role_info = 5;
  inline bool has_role_info() const;
  inline void clear_role_info();
  static const int kRoleInfoFieldNumber = 5;
  inline const ::ProtoBrocastRole& role_info() const;
  inline ::ProtoBrocastRole* mutable_role_info();
  inline ::ProtoBrocastRole* release_role_info();
  
  // optional .ProtoShoutItem item_tips = 6;
  inline bool has_item_tips() const;
  inline void clear_item_tips();
  static const int kItemTipsFieldNumber = 6;
  inline const ::ProtoShoutItem& item_tips() const;
  inline ::ProtoShoutItem* mutable_item_tips();
  inline ::ProtoShoutItem* release_item_tips();
  
  // @@protoc_insertion_point(class_scope:ProtoShoutDetail)
 private:
  inline void set_has_parse_type();
  inline void clear_has_parse_type();
  inline void set_has_single_value();
  inline void clear_has_single_value();
  inline void set_has_single_id();
  inline void clear_has_single_id();
  inline void set_has_single_content();
  inline void clear_has_single_content();
  inline void set_has_role_info();
  inline void clear_has_role_info();
  inline void set_has_item_tips();
  inline void clear_has_item_tips();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 parse_type_;
  ::google::protobuf::int32 single_value_;
  ::google::protobuf::int64 single_id_;
  ::std::string* single_content_;
  ::ProtoBrocastRole* role_info_;
  ::ProtoShoutItem* item_tips_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoShoutDetail* default_instance_;
};
// -------------------------------------------------------------------

class ProtoTreasure : public ::google::protobuf::Message {
 public:
  ProtoTreasure();
  virtual ~ProtoTreasure();
  
  ProtoTreasure(const ProtoTreasure& from);
  
  inline ProtoTreasure& operator=(const ProtoTreasure& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoTreasure& default_instance();
  
  void Swap(ProtoTreasure* other);
  
  // implements Message ----------------------------------------------
  
  ProtoTreasure* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoTreasure& from);
  void MergeFrom(const ProtoTreasure& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 coord_x = 1;
  inline bool has_coord_x() const;
  inline void clear_coord_x();
  static const int kCoordXFieldNumber = 1;
  inline ::google::protobuf::int32 coord_x() const;
  inline void set_coord_x(::google::protobuf::int32 value);
  
  // optional int32 coord_y = 2;
  inline bool has_coord_y() const;
  inline void clear_coord_y();
  static const int kCoordYFieldNumber = 2;
  inline ::google::protobuf::int32 coord_y() const;
  inline void set_coord_y(::google::protobuf::int32 value);
  
  // optional int32 map_index = 3;
  inline bool has_map_index() const;
  inline void clear_map_index();
  static const int kMapIndexFieldNumber = 3;
  inline ::google::protobuf::int32 map_index() const;
  inline void set_map_index(::google::protobuf::int32 value);
  
  // optional int32 state = 4;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 4;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoTreasure)
 private:
  inline void set_has_coord_x();
  inline void clear_has_coord_x();
  inline void set_has_coord_y();
  inline void clear_has_coord_y();
  inline void set_has_map_index();
  inline void clear_has_map_index();
  inline void set_has_state();
  inline void clear_has_state();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 coord_x_;
  ::google::protobuf::int32 coord_y_;
  ::google::protobuf::int32 map_index_;
  ::google::protobuf::int32 state_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoTreasure* default_instance_;
};
// -------------------------------------------------------------------

class ProtoScriptClean : public ::google::protobuf::Message {
 public:
  ProtoScriptClean();
  virtual ~ProtoScriptClean();
  
  ProtoScriptClean(const ProtoScriptClean& from);
  
  inline ProtoScriptClean& operator=(const ProtoScriptClean& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoScriptClean& default_instance();
  
  void Swap(ProtoScriptClean* other);
  
  // implements Message ----------------------------------------------
  
  ProtoScriptClean* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoScriptClean& from);
  void MergeFrom(const ProtoScriptClean& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 script_sort = 1;
  inline bool has_script_sort() const;
  inline void clear_script_sort();
  static const int kScriptSortFieldNumber = 1;
  inline ::google::protobuf::int32 script_sort() const;
  inline void set_script_sort(::google::protobuf::int32 value);
  
  // optional int32 script_times = 2;
  inline bool has_script_times() const;
  inline void clear_script_times();
  static const int kScriptTimesFieldNumber = 2;
  inline ::google::protobuf::int32 script_times() const;
  inline void set_script_times(::google::protobuf::int32 value);
  
  // optional int32 chapter_key = 3;
  inline bool has_chapter_key() const;
  inline void clear_chapter_key();
  static const int kChapterKeyFieldNumber = 3;
  inline ::google::protobuf::int32 chapter_key() const;
  inline void set_chapter_key(::google::protobuf::int32 value);
  
  // optional int32 script_use_tick = 4;
  inline bool has_script_use_tick() const;
  inline void clear_script_use_tick();
  static const int kScriptUseTickFieldNumber = 4;
  inline ::google::protobuf::int32 script_use_tick() const;
  inline void set_script_use_tick(::google::protobuf::int32 value);
  
  // optional int32 protect_beast_index = 5;
  inline bool has_protect_beast_index() const;
  inline void clear_protect_beast_index();
  static const int kProtectBeastIndexFieldNumber = 5;
  inline ::google::protobuf::int32 protect_beast_index() const;
  inline void set_protect_beast_index(::google::protobuf::int32 value);
  
  // optional int32 reset_times = 6;
  inline bool has_reset_times() const;
  inline void clear_reset_times();
  static const int kResetTimesFieldNumber = 6;
  inline ::google::protobuf::int32 reset_times() const;
  inline void set_reset_times(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoScriptClean)
 private:
  inline void set_has_script_sort();
  inline void clear_has_script_sort();
  inline void set_has_script_times();
  inline void clear_has_script_times();
  inline void set_has_chapter_key();
  inline void clear_has_chapter_key();
  inline void set_has_script_use_tick();
  inline void clear_has_script_use_tick();
  inline void set_has_protect_beast_index();
  inline void clear_has_protect_beast_index();
  inline void set_has_reset_times();
  inline void clear_has_reset_times();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 script_sort_;
  ::google::protobuf::int32 script_times_;
  ::google::protobuf::int32 chapter_key_;
  ::google::protobuf::int32 script_use_tick_;
  ::google::protobuf::int32 protect_beast_index_;
  ::google::protobuf::int32 reset_times_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoScriptClean* default_instance_;
};
// -------------------------------------------------------------------

class ProtoHookDetail : public ::google::protobuf::Message {
 public:
  ProtoHookDetail();
  virtual ~ProtoHookDetail();
  
  ProtoHookDetail(const ProtoHookDetail& from);
  
  inline ProtoHookDetail& operator=(const ProtoHookDetail& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoHookDetail& default_instance();
  
  void Swap(ProtoHookDetail* other);
  
  // implements Message ----------------------------------------------
  
  ProtoHookDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoHookDetail& from);
  void MergeFrom(const ProtoHookDetail& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 kill_task_monster = 1;
  inline bool has_kill_task_monster() const;
  inline void clear_kill_task_monster();
  static const int kKillTaskMonsterFieldNumber = 1;
  inline ::google::protobuf::int32 kill_task_monster() const;
  inline void set_kill_task_monster(::google::protobuf::int32 value);
  
  // optional int32 kill_nearby_monster = 2;
  inline bool has_kill_nearby_monster() const;
  inline void clear_kill_nearby_monster();
  static const int kKillNearbyMonsterFieldNumber = 2;
  inline ::google::protobuf::int32 kill_nearby_monster() const;
  inline void set_kill_nearby_monster(::google::protobuf::int32 value);
  
  // optional int32 auto_pickup = 3;
  inline bool has_auto_pickup() const;
  inline void clear_auto_pickup();
  static const int kAutoPickupFieldNumber = 3;
  inline ::google::protobuf::int32 auto_pickup() const;
  inline void set_auto_pickup(::google::protobuf::int32 value);
  
  // optional int32 auto_call_beast = 4;
  inline bool has_auto_call_beast() const;
  inline void clear_auto_call_beast();
  static const int kAutoCallBeastFieldNumber = 4;
  inline ::google::protobuf::int32 auto_call_beast() const;
  inline void set_auto_call_beast(::google::protobuf::int32 value);
  
  // optional int32 auto_drug = 5;
  inline bool has_auto_drug() const;
  inline void clear_auto_drug();
  static const int kAutoDrugFieldNumber = 5;
  inline ::google::protobuf::int32 auto_drug() const;
  inline void set_auto_drug(::google::protobuf::int32 value);
  
  // optional int32 auto_drug_blood = 6;
  inline bool has_auto_drug_blood() const;
  inline void clear_auto_drug_blood();
  static const int kAutoDrugBloodFieldNumber = 6;
  inline ::google::protobuf::int32 auto_drug_blood() const;
  inline void set_auto_drug_blood(::google::protobuf::int32 value);
  
  // optional int32 auto_drug_magic = 7;
  inline bool has_auto_drug_magic() const;
  inline void clear_auto_drug_magic();
  static const int kAutoDrugMagicFieldNumber = 7;
  inline ::google::protobuf::int32 auto_drug_magic() const;
  inline void set_auto_drug_magic(::google::protobuf::int32 value);
  
  // optional int32 auto_buy_drug = 8;
  inline bool has_auto_buy_drug() const;
  inline void clear_auto_buy_drug();
  static const int kAutoBuyDrugFieldNumber = 8;
  inline ::google::protobuf::int32 auto_buy_drug() const;
  inline void set_auto_buy_drug(::google::protobuf::int32 value);
  
  // optional int32 stop_hook = 9;
  inline bool has_stop_hook() const;
  inline void clear_stop_hook();
  static const int kStopHookFieldNumber = 9;
  inline ::google::protobuf::int32 stop_hook() const;
  inline void set_stop_hook(::google::protobuf::int32 value);
  
  // optional int32 relive_type = 10;
  inline bool has_relive_type() const;
  inline void clear_relive_type();
  static const int kReliveTypeFieldNumber = 10;
  inline ::google::protobuf::int32 relive_type() const;
  inline void set_relive_type(::google::protobuf::int32 value);
  
  // optional int32 hook_list_index = 11;
  inline bool has_hook_list_index() const;
  inline void clear_hook_list_index();
  static const int kHookListIndexFieldNumber = 11;
  inline ::google::protobuf::int32 hook_list_index() const;
  inline void set_hook_list_index(::google::protobuf::int32 value);
  
  // repeated .ProtoHookSkill skill_list = 12;
  inline int skill_list_size() const;
  inline void clear_skill_list();
  static const int kSkillListFieldNumber = 12;
  inline const ::ProtoHookSkill& skill_list(int index) const;
  inline ::ProtoHookSkill* mutable_skill_list(int index);
  inline ::ProtoHookSkill* add_skill_list();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoHookSkill >&
      skill_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoHookSkill >*
      mutable_skill_list();
  
  // optional int32 kill_other = 13;
  inline bool has_kill_other() const;
  inline void clear_kill_other();
  static const int kKillOtherFieldNumber = 13;
  inline ::google::protobuf::int32 kill_other() const;
  inline void set_kill_other(::google::protobuf::int32 value);
  
  // optional int32 auto_drug_blood_beast = 14;
  inline bool has_auto_drug_blood_beast() const;
  inline void clear_auto_drug_blood_beast();
  static const int kAutoDrugBloodBeastFieldNumber = 14;
  inline ::google::protobuf::int32 auto_drug_blood_beast() const;
  inline void set_auto_drug_blood_beast(::google::protobuf::int32 value);
  
  // optional int32 auto_drug_magic_beast = 15;
  inline bool has_auto_drug_magic_beast() const;
  inline void clear_auto_drug_magic_beast();
  static const int kAutoDrugMagicBeastFieldNumber = 15;
  inline ::google::protobuf::int32 auto_drug_magic_beast() const;
  inline void set_auto_drug_magic_beast(::google::protobuf::int32 value);
  
  // optional int32 auto_avoid_boss = 16;
  inline bool has_auto_avoid_boss() const;
  inline void clear_auto_avoid_boss();
  static const int kAutoAvoidBossFieldNumber = 16;
  inline ::google::protobuf::int32 auto_avoid_boss() const;
  inline void set_auto_avoid_boss(::google::protobuf::int32 value);
  
  // optional int32 is_hooking = 17;
  inline bool has_is_hooking() const;
  inline void clear_is_hooking();
  static const int kIsHookingFieldNumber = 17;
  inline ::google::protobuf::int32 is_hooking() const;
  inline void set_is_hooking(::google::protobuf::int32 value);
  
  // optional int32 drug_blood_tick = 18;
  inline bool has_drug_blood_tick() const;
  inline void clear_drug_blood_tick();
  static const int kDrugBloodTickFieldNumber = 18;
  inline ::google::protobuf::int32 drug_blood_tick() const;
  inline void set_drug_blood_tick(::google::protobuf::int32 value);
  
  // optional int32 drug_magic_tick = 19;
  inline bool has_drug_magic_tick() const;
  inline void clear_drug_magic_tick();
  static const int kDrugMagicTickFieldNumber = 19;
  inline ::google::protobuf::int32 drug_magic_tick() const;
  inline void set_drug_magic_tick(::google::protobuf::int32 value);
  
  // optional int32 drug_blood_notify_buy = 20;
  inline bool has_drug_blood_notify_buy() const;
  inline void clear_drug_blood_notify_buy();
  static const int kDrugBloodNotifyBuyFieldNumber = 20;
  inline ::google::protobuf::int32 drug_blood_notify_buy() const;
  inline void set_drug_blood_notify_buy(::google::protobuf::int32 value);
  
  // optional int32 drug_magic_notify_buy = 21;
  inline bool has_drug_magic_notify_buy() const;
  inline void clear_drug_magic_notify_buy();
  static const int kDrugMagicNotifyBuyFieldNumber = 21;
  inline ::google::protobuf::int32 drug_magic_notify_buy() const;
  inline void set_drug_magic_notify_buy(::google::protobuf::int32 value);
  
  // optional int32 auto_back_main = 22;
  inline bool has_auto_back_main() const;
  inline void clear_auto_back_main();
  static const int kAutoBackMainFieldNumber = 22;
  inline ::google::protobuf::int32 auto_back_main() const;
  inline void set_auto_back_main(::google::protobuf::int32 value);
  
  // optional int32 auto_back_main_blood = 23;
  inline bool has_auto_back_main_blood() const;
  inline void clear_auto_back_main_blood();
  static const int kAutoBackMainBloodFieldNumber = 23;
  inline ::google::protobuf::int32 auto_back_main_blood() const;
  inline void set_auto_back_main_blood(::google::protobuf::int32 value);
  
  // optional int32 auto_random = 24;
  inline bool has_auto_random() const;
  inline void clear_auto_random();
  static const int kAutoRandomFieldNumber = 24;
  inline ::google::protobuf::int32 auto_random() const;
  inline void set_auto_random(::google::protobuf::int32 value);
  
  // optional int32 auto_random_blood = 25;
  inline bool has_auto_random_blood() const;
  inline void clear_auto_random_blood();
  static const int kAutoRandomBloodFieldNumber = 25;
  inline ::google::protobuf::int32 auto_random_blood() const;
  inline void set_auto_random_blood(::google::protobuf::int32 value);
  
  // optional int32 auto_back_main_tick = 26;
  inline bool has_auto_back_main_tick() const;
  inline void clear_auto_back_main_tick();
  static const int kAutoBackMainTickFieldNumber = 26;
  inline ::google::protobuf::int32 auto_back_main_tick() const;
  inline void set_auto_back_main_tick(::google::protobuf::int32 value);
  
  // optional int32 auto_random_tick = 27;
  inline bool has_auto_random_tick() const;
  inline void clear_auto_random_tick();
  static const int kAutoRandomTickFieldNumber = 27;
  inline ::google::protobuf::int32 auto_random_tick() const;
  inline void set_auto_random_tick(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoHookDetail)
 private:
  inline void set_has_kill_task_monster();
  inline void clear_has_kill_task_monster();
  inline void set_has_kill_nearby_monster();
  inline void clear_has_kill_nearby_monster();
  inline void set_has_auto_pickup();
  inline void clear_has_auto_pickup();
  inline void set_has_auto_call_beast();
  inline void clear_has_auto_call_beast();
  inline void set_has_auto_drug();
  inline void clear_has_auto_drug();
  inline void set_has_auto_drug_blood();
  inline void clear_has_auto_drug_blood();
  inline void set_has_auto_drug_magic();
  inline void clear_has_auto_drug_magic();
  inline void set_has_auto_buy_drug();
  inline void clear_has_auto_buy_drug();
  inline void set_has_stop_hook();
  inline void clear_has_stop_hook();
  inline void set_has_relive_type();
  inline void clear_has_relive_type();
  inline void set_has_hook_list_index();
  inline void clear_has_hook_list_index();
  inline void set_has_kill_other();
  inline void clear_has_kill_other();
  inline void set_has_auto_drug_blood_beast();
  inline void clear_has_auto_drug_blood_beast();
  inline void set_has_auto_drug_magic_beast();
  inline void clear_has_auto_drug_magic_beast();
  inline void set_has_auto_avoid_boss();
  inline void clear_has_auto_avoid_boss();
  inline void set_has_is_hooking();
  inline void clear_has_is_hooking();
  inline void set_has_drug_blood_tick();
  inline void clear_has_drug_blood_tick();
  inline void set_has_drug_magic_tick();
  inline void clear_has_drug_magic_tick();
  inline void set_has_drug_blood_notify_buy();
  inline void clear_has_drug_blood_notify_buy();
  inline void set_has_drug_magic_notify_buy();
  inline void clear_has_drug_magic_notify_buy();
  inline void set_has_auto_back_main();
  inline void clear_has_auto_back_main();
  inline void set_has_auto_back_main_blood();
  inline void clear_has_auto_back_main_blood();
  inline void set_has_auto_random();
  inline void clear_has_auto_random();
  inline void set_has_auto_random_blood();
  inline void clear_has_auto_random_blood();
  inline void set_has_auto_back_main_tick();
  inline void clear_has_auto_back_main_tick();
  inline void set_has_auto_random_tick();
  inline void clear_has_auto_random_tick();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 kill_task_monster_;
  ::google::protobuf::int32 kill_nearby_monster_;
  ::google::protobuf::int32 auto_pickup_;
  ::google::protobuf::int32 auto_call_beast_;
  ::google::protobuf::int32 auto_drug_;
  ::google::protobuf::int32 auto_drug_blood_;
  ::google::protobuf::int32 auto_drug_magic_;
  ::google::protobuf::int32 auto_buy_drug_;
  ::google::protobuf::int32 stop_hook_;
  ::google::protobuf::int32 relive_type_;
  ::google::protobuf::RepeatedPtrField< ::ProtoHookSkill > skill_list_;
  ::google::protobuf::int32 hook_list_index_;
  ::google::protobuf::int32 kill_other_;
  ::google::protobuf::int32 auto_drug_blood_beast_;
  ::google::protobuf::int32 auto_drug_magic_beast_;
  ::google::protobuf::int32 auto_avoid_boss_;
  ::google::protobuf::int32 is_hooking_;
  ::google::protobuf::int32 drug_blood_tick_;
  ::google::protobuf::int32 drug_magic_tick_;
  ::google::protobuf::int32 drug_blood_notify_buy_;
  ::google::protobuf::int32 drug_magic_notify_buy_;
  ::google::protobuf::int32 auto_back_main_;
  ::google::protobuf::int32 auto_back_main_blood_;
  ::google::protobuf::int32 auto_random_;
  ::google::protobuf::int32 auto_random_blood_;
  ::google::protobuf::int32 auto_back_main_tick_;
  ::google::protobuf::int32 auto_random_tick_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(27 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoHookDetail* default_instance_;
};
// -------------------------------------------------------------------

class ProtoHookSkill : public ::google::protobuf::Message {
 public:
  ProtoHookSkill();
  virtual ~ProtoHookSkill();
  
  ProtoHookSkill(const ProtoHookSkill& from);
  
  inline ProtoHookSkill& operator=(const ProtoHookSkill& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoHookSkill& default_instance();
  
  void Swap(ProtoHookSkill* other);
  
  // implements Message ----------------------------------------------
  
  ProtoHookSkill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoHookSkill& from);
  void MergeFrom(const ProtoHookSkill& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated int32 hook_skill_id = 1;
  inline int hook_skill_id_size() const;
  inline void clear_hook_skill_id();
  static const int kHookSkillIdFieldNumber = 1;
  inline ::google::protobuf::int32 hook_skill_id(int index) const;
  inline void set_hook_skill_id(int index, ::google::protobuf::int32 value);
  inline void add_hook_skill_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      hook_skill_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_hook_skill_id();
  
  // @@protoc_insertion_point(class_scope:ProtoHookSkill)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > hook_skill_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoHookSkill* default_instance_;
};
// -------------------------------------------------------------------

class ProtoFashionTipInfo : public ::google::protobuf::Message {
 public:
  ProtoFashionTipInfo();
  virtual ~ProtoFashionTipInfo();
  
  ProtoFashionTipInfo(const ProtoFashionTipInfo& from);
  
  inline ProtoFashionTipInfo& operator=(const ProtoFashionTipInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoFashionTipInfo& default_instance();
  
  void Swap(ProtoFashionTipInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProtoFashionTipInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoFashionTipInfo& from);
  void MergeFrom(const ProtoFashionTipInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 tip_id = 1;
  inline bool has_tip_id() const;
  inline void clear_tip_id();
  static const int kTipIdFieldNumber = 1;
  inline ::google::protobuf::int64 tip_id() const;
  inline void set_tip_id(::google::protobuf::int64 value);
  
  // optional int32 fashion_id = 2;
  inline bool has_fashion_id() const;
  inline void clear_fashion_id();
  static const int kFashionIdFieldNumber = 2;
  inline ::google::protobuf::int32 fashion_id() const;
  inline void set_fashion_id(::google::protobuf::int32 value);
  
  // optional int32 fashion_force = 3;
  inline bool has_fashion_force() const;
  inline void clear_fashion_force();
  static const int kFashionForceFieldNumber = 3;
  inline ::google::protobuf::int32 fashion_force() const;
  inline void set_fashion_force(::google::protobuf::int32 value);
  
  // optional int32 left_sec = 4;
  inline bool has_left_sec() const;
  inline void clear_left_sec();
  static const int kLeftSecFieldNumber = 4;
  inline ::google::protobuf::int32 left_sec() const;
  inline void set_left_sec(::google::protobuf::int32 value);
  
  // optional int32 martial_id = 5;
  inline bool has_martial_id() const;
  inline void clear_martial_id();
  static const int kMartialIdFieldNumber = 5;
  inline ::google::protobuf::int32 martial_id() const;
  inline void set_martial_id(::google::protobuf::int32 value);
  
  // optional int32 event_id = 6;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 6;
  inline ::google::protobuf::int32 event_id() const;
  inline void set_event_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoFashionTipInfo)
 private:
  inline void set_has_tip_id();
  inline void clear_has_tip_id();
  inline void set_has_fashion_id();
  inline void clear_has_fashion_id();
  inline void set_has_fashion_force();
  inline void clear_has_fashion_force();
  inline void set_has_left_sec();
  inline void clear_has_left_sec();
  inline void set_has_martial_id();
  inline void clear_has_martial_id();
  inline void set_has_event_id();
  inline void clear_has_event_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 tip_id_;
  ::google::protobuf::int32 fashion_id_;
  ::google::protobuf::int32 fashion_force_;
  ::google::protobuf::int32 left_sec_;
  ::google::protobuf::int32 martial_id_;
  ::google::protobuf::int32 event_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoFashionTipInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProtoVipTimeTipInfo : public ::google::protobuf::Message {
 public:
  ProtoVipTimeTipInfo();
  virtual ~ProtoVipTimeTipInfo();
  
  ProtoVipTimeTipInfo(const ProtoVipTimeTipInfo& from);
  
  inline ProtoVipTimeTipInfo& operator=(const ProtoVipTimeTipInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoVipTimeTipInfo& default_instance();
  
  void Swap(ProtoVipTimeTipInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProtoVipTimeTipInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoVipTimeTipInfo& from);
  void MergeFrom(const ProtoVipTimeTipInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 tip_id = 1;
  inline bool has_tip_id() const;
  inline void clear_tip_id();
  static const int kTipIdFieldNumber = 1;
  inline ::google::protobuf::int64 tip_id() const;
  inline void set_tip_id(::google::protobuf::int64 value);
  
  // optional int32 vip_type = 2;
  inline bool has_vip_type() const;
  inline void clear_vip_type();
  static const int kVipTypeFieldNumber = 2;
  inline ::google::protobuf::int32 vip_type() const;
  inline void set_vip_type(::google::protobuf::int32 value);
  
  // optional int32 left_sec = 3;
  inline bool has_left_sec() const;
  inline void clear_left_sec();
  static const int kLeftSecFieldNumber = 3;
  inline ::google::protobuf::int32 left_sec() const;
  inline void set_left_sec(::google::protobuf::int32 value);
  
  // optional int32 event_id = 4;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 4;
  inline ::google::protobuf::int32 event_id() const;
  inline void set_event_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoVipTimeTipInfo)
 private:
  inline void set_has_tip_id();
  inline void clear_has_tip_id();
  inline void set_has_vip_type();
  inline void clear_has_vip_type();
  inline void set_has_left_sec();
  inline void clear_has_left_sec();
  inline void set_has_event_id();
  inline void clear_has_event_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 tip_id_;
  ::google::protobuf::int32 vip_type_;
  ::google::protobuf::int32 left_sec_;
  ::google::protobuf::int32 event_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoVipTimeTipInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProtoScriptChapter : public ::google::protobuf::Message {
 public:
  ProtoScriptChapter();
  virtual ~ProtoScriptChapter();
  
  ProtoScriptChapter(const ProtoScriptChapter& from);
  
  inline ProtoScriptChapter& operator=(const ProtoScriptChapter& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoScriptChapter& default_instance();
  
  void Swap(ProtoScriptChapter* other);
  
  // implements Message ----------------------------------------------
  
  ProtoScriptChapter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoScriptChapter& from);
  void MergeFrom(const ProtoScriptChapter& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 chapter = 1;
  inline bool has_chapter() const;
  inline void clear_chapter();
  static const int kChapterFieldNumber = 1;
  inline ::google::protobuf::int32 chapter() const;
  inline void set_chapter(::google::protobuf::int32 value);
  
  // optional int32 is_passed = 2;
  inline bool has_is_passed() const;
  inline void clear_is_passed();
  static const int kIsPassedFieldNumber = 2;
  inline ::google::protobuf::int32 is_passed() const;
  inline void set_is_passed(::google::protobuf::int32 value);
  
  // optional int32 start_level = 3;
  inline bool has_start_level() const;
  inline void clear_start_level();
  static const int kStartLevelFieldNumber = 3;
  inline ::google::protobuf::int32 start_level() const;
  inline void set_start_level(::google::protobuf::int32 value);
  
  // optional int64 first_id = 4;
  inline bool has_first_id() const;
  inline void clear_first_id();
  static const int kFirstIdFieldNumber = 4;
  inline ::google::protobuf::int64 first_id() const;
  inline void set_first_id(::google::protobuf::int64 value);
  
  // optional string first_name = 5;
  inline bool has_first_name() const;
  inline void clear_first_name();
  static const int kFirstNameFieldNumber = 5;
  inline const ::std::string& first_name() const;
  inline void set_first_name(const ::std::string& value);
  inline void set_first_name(const char* value);
  inline void set_first_name(const char* value, size_t size);
  inline ::std::string* mutable_first_name();
  inline ::std::string* release_first_name();
  
  // optional int32 is_started = 6;
  inline bool has_is_started() const;
  inline void clear_is_started();
  static const int kIsStartedFieldNumber = 6;
  inline ::google::protobuf::int32 is_started() const;
  inline void set_is_started(::google::protobuf::int32 value);
  
  // optional int32 best_tick = 7;
  inline bool has_best_tick() const;
  inline void clear_best_tick();
  static const int kBestTickFieldNumber = 7;
  inline ::google::protobuf::int32 best_tick() const;
  inline void set_best_tick(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoScriptChapter)
 private:
  inline void set_has_chapter();
  inline void clear_has_chapter();
  inline void set_has_is_passed();
  inline void clear_has_is_passed();
  inline void set_has_start_level();
  inline void clear_has_start_level();
  inline void set_has_first_id();
  inline void clear_has_first_id();
  inline void set_has_first_name();
  inline void clear_has_first_name();
  inline void set_has_is_started();
  inline void clear_has_is_started();
  inline void set_has_best_tick();
  inline void clear_has_best_tick();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 chapter_;
  ::google::protobuf::int32 is_passed_;
  ::google::protobuf::int64 first_id_;
  ::google::protobuf::int32 start_level_;
  ::google::protobuf::int32 is_started_;
  ::std::string* first_name_;
  ::google::protobuf::int32 best_tick_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoScriptChapter* default_instance_;
};
// -------------------------------------------------------------------

class ProtoSysSetting : public ::google::protobuf::Message {
 public:
  ProtoSysSetting();
  virtual ~ProtoSysSetting();
  
  ProtoSysSetting(const ProtoSysSetting& from);
  
  inline ProtoSysSetting& operator=(const ProtoSysSetting& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoSysSetting& default_instance();
  
  void Swap(ProtoSysSetting* other);
  
  // implements Message ----------------------------------------------
  
  ProtoSysSetting* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoSysSetting& from);
  void MergeFrom(const ProtoSysSetting& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 is_shock = 1;
  inline bool has_is_shock() const;
  inline void clear_is_shock();
  static const int kIsShockFieldNumber = 1;
  inline ::google::protobuf::int32 is_shock() const;
  inline void set_is_shock(::google::protobuf::int32 value);
  
  // optional .ProtoPairObj music = 2;
  inline bool has_music() const;
  inline void clear_music();
  static const int kMusicFieldNumber = 2;
  inline const ::ProtoPairObj& music() const;
  inline ::ProtoPairObj* mutable_music();
  inline ::ProtoPairObj* release_music();
  
  // optional .ProtoPairObj sound_effect = 3;
  inline bool has_sound_effect() const;
  inline void clear_sound_effect();
  static const int kSoundEffectFieldNumber = 3;
  inline const ::ProtoPairObj& sound_effect() const;
  inline ::ProtoPairObj* mutable_sound_effect();
  inline ::ProtoPairObj* release_sound_effect();
  
  // optional int32 screen_type = 4;
  inline bool has_screen_type() const;
  inline void clear_screen_type();
  static const int kScreenTypeFieldNumber = 4;
  inline ::google::protobuf::int32 screen_type() const;
  inline void set_screen_type(::google::protobuf::int32 value);
  
  // repeated int32 shield_type = 5;
  inline int shield_type_size() const;
  inline void clear_shield_type();
  static const int kShieldTypeFieldNumber = 5;
  inline ::google::protobuf::int32 shield_type(int index) const;
  inline void set_shield_type(int index, ::google::protobuf::int32 value);
  inline void add_shield_type(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      shield_type() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_shield_type();
  
  // optional int32 turnoff_act_notify = 6;
  inline bool has_turnoff_act_notify() const;
  inline void clear_turnoff_act_notify();
  static const int kTurnoffActNotifyFieldNumber = 6;
  inline ::google::protobuf::int32 turnoff_act_notify() const;
  inline void set_turnoff_act_notify(::google::protobuf::int32 value);
  
  // optional int32 auto_adjust_express = 7;
  inline bool has_auto_adjust_express() const;
  inline void clear_auto_adjust_express();
  static const int kAutoAdjustExpressFieldNumber = 7;
  inline ::google::protobuf::int32 auto_adjust_express() const;
  inline void set_auto_adjust_express(::google::protobuf::int32 value);
  
  // optional int32 fluency_type = 8;
  inline bool has_fluency_type() const;
  inline void clear_fluency_type();
  static const int kFluencyTypeFieldNumber = 8;
  inline ::google::protobuf::int32 fluency_type() const;
  inline void set_fluency_type(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoSysSetting)
 private:
  inline void set_has_is_shock();
  inline void clear_has_is_shock();
  inline void set_has_music();
  inline void clear_has_music();
  inline void set_has_sound_effect();
  inline void clear_has_sound_effect();
  inline void set_has_screen_type();
  inline void clear_has_screen_type();
  inline void set_has_turnoff_act_notify();
  inline void clear_has_turnoff_act_notify();
  inline void set_has_auto_adjust_express();
  inline void clear_has_auto_adjust_express();
  inline void set_has_fluency_type();
  inline void clear_has_fluency_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::ProtoPairObj* music_;
  ::google::protobuf::int32 is_shock_;
  ::google::protobuf::int32 screen_type_;
  ::ProtoPairObj* sound_effect_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > shield_type_;
  ::google::protobuf::int32 turnoff_act_notify_;
  ::google::protobuf::int32 auto_adjust_express_;
  ::google::protobuf::int32 fluency_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoSysSetting* default_instance_;
};
// -------------------------------------------------------------------

class ProtoRpmRoleInfo : public ::google::protobuf::Message {
 public:
  ProtoRpmRoleInfo();
  virtual ~ProtoRpmRoleInfo();
  
  ProtoRpmRoleInfo(const ProtoRpmRoleInfo& from);
  
  inline ProtoRpmRoleInfo& operator=(const ProtoRpmRoleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoRpmRoleInfo& default_instance();
  
  void Swap(ProtoRpmRoleInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProtoRpmRoleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoRpmRoleInfo& from);
  void MergeFrom(const ProtoRpmRoleInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int64 role_id() const;
  inline void set_role_id(::google::protobuf::int64 value);
  
  // optional string role_name = 2;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 2;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  
  // optional int32 force = 3;
  inline bool has_force() const;
  inline void clear_force();
  static const int kForceFieldNumber = 3;
  inline ::google::protobuf::int32 force() const;
  inline void set_force(::google::protobuf::int32 value);
  
  // optional int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int32 career = 5;
  inline bool has_career() const;
  inline void clear_career();
  static const int kCareerFieldNumber = 5;
  inline ::google::protobuf::int32 career() const;
  inline void set_career(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoRpmRoleInfo)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_force();
  inline void clear_has_force();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_career();
  inline void clear_has_career();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 role_id_;
  ::std::string* role_name_;
  ::google::protobuf::int32 force_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 career_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoRpmRoleInfo* default_instance_;
};
// -------------------------------------------------------------------

class TipsItem : public ::google::protobuf::Message {
 public:
  TipsItem();
  virtual ~TipsItem();
  
  TipsItem(const TipsItem& from);
  
  inline TipsItem& operator=(const TipsItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TipsItem& default_instance();
  
  void Swap(TipsItem* other);
  
  // implements Message ----------------------------------------------
  
  TipsItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TipsItem& from);
  void MergeFrom(const TipsItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 amount = 3;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 3;
  inline ::google::protobuf::int32 amount() const;
  inline void set_amount(::google::protobuf::int32 value);
  
  // optional int32 extra_1 = 4;
  inline bool has_extra_1() const;
  inline void clear_extra_1();
  static const int kExtra1FieldNumber = 4;
  inline ::google::protobuf::int32 extra_1() const;
  inline void set_extra_1(::google::protobuf::int32 value);
  
  // optional int32 vip_type = 5;
  inline bool has_vip_type() const;
  inline void clear_vip_type();
  static const int kVipTypeFieldNumber = 5;
  inline ::google::protobuf::int32 vip_type() const;
  inline void set_vip_type(::google::protobuf::int32 value);
  
  // optional int32 is_special = 6;
  inline bool has_is_special() const;
  inline void clear_is_special();
  static const int kIsSpecialFieldNumber = 6;
  inline ::google::protobuf::int32 is_special() const;
  inline void set_is_special(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:TipsItem)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_amount();
  inline void clear_has_amount();
  inline void set_has_extra_1();
  inline void clear_has_extra_1();
  inline void set_has_vip_type();
  inline void clear_has_vip_type();
  inline void set_has_is_special();
  inline void clear_has_is_special();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 amount_;
  ::google::protobuf::int32 extra_1_;
  ::google::protobuf::int32 vip_type_;
  ::google::protobuf::int32 is_special_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static TipsItem* default_instance_;
};
// -------------------------------------------------------------------

class ProtoFBUseTimes : public ::google::protobuf::Message {
 public:
  ProtoFBUseTimes();
  virtual ~ProtoFBUseTimes();
  
  ProtoFBUseTimes(const ProtoFBUseTimes& from);
  
  inline ProtoFBUseTimes& operator=(const ProtoFBUseTimes& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoFBUseTimes& default_instance();
  
  void Swap(ProtoFBUseTimes* other);
  
  // implements Message ----------------------------------------------
  
  ProtoFBUseTimes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoFBUseTimes& from);
  void MergeFrom(const ProtoFBUseTimes& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int64 role_id() const;
  inline void set_role_id(::google::protobuf::int64 value);
  
  // optional int32 use_times = 2;
  inline bool has_use_times() const;
  inline void clear_use_times();
  static const int kUseTimesFieldNumber = 2;
  inline ::google::protobuf::int32 use_times() const;
  inline void set_use_times(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoFBUseTimes)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_use_times();
  inline void clear_has_use_times();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 role_id_;
  ::google::protobuf::int32 use_times_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoFBUseTimes* default_instance_;
};
// -------------------------------------------------------------------

class ProtoMoverPos : public ::google::protobuf::Message {
 public:
  ProtoMoverPos();
  virtual ~ProtoMoverPos();
  
  ProtoMoverPos(const ProtoMoverPos& from);
  
  inline ProtoMoverPos& operator=(const ProtoMoverPos& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoMoverPos& default_instance();
  
  void Swap(ProtoMoverPos* other);
  
  // implements Message ----------------------------------------------
  
  ProtoMoverPos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoMoverPos& from);
  void MergeFrom(const ProtoMoverPos& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int64 role_id() const;
  inline void set_role_id(::google::protobuf::int64 value);
  
  // optional int32 pixel_x = 2;
  inline bool has_pixel_x() const;
  inline void clear_pixel_x();
  static const int kPixelXFieldNumber = 2;
  inline ::google::protobuf::int32 pixel_x() const;
  inline void set_pixel_x(::google::protobuf::int32 value);
  
  // optional int32 pixel_y = 3;
  inline bool has_pixel_y() const;
  inline void clear_pixel_y();
  static const int kPixelYFieldNumber = 3;
  inline ::google::protobuf::int32 pixel_y() const;
  inline void set_pixel_y(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoMoverPos)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_pixel_x();
  inline void clear_has_pixel_x();
  inline void set_has_pixel_y();
  inline void clear_has_pixel_y();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 role_id_;
  ::google::protobuf::int32 pixel_x_;
  ::google::protobuf::int32 pixel_y_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoMoverPos* default_instance_;
};
// -------------------------------------------------------------------

class ProtoCustomerSVCRecord : public ::google::protobuf::Message {
 public:
  ProtoCustomerSVCRecord();
  virtual ~ProtoCustomerSVCRecord();
  
  ProtoCustomerSVCRecord(const ProtoCustomerSVCRecord& from);
  
  inline ProtoCustomerSVCRecord& operator=(const ProtoCustomerSVCRecord& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoCustomerSVCRecord& default_instance();
  
  void Swap(ProtoCustomerSVCRecord* other);
  
  // implements Message ----------------------------------------------
  
  ProtoCustomerSVCRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoCustomerSVCRecord& from);
  void MergeFrom(const ProtoCustomerSVCRecord& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 record_id = 1;
  inline bool has_record_id() const;
  inline void clear_record_id();
  static const int kRecordIdFieldNumber = 1;
  inline ::google::protobuf::int64 record_id() const;
  inline void set_record_id(::google::protobuf::int64 value);
  
  // optional int64 send_tick = 2;
  inline bool has_send_tick() const;
  inline void clear_send_tick();
  static const int kSendTickFieldNumber = 2;
  inline ::google::protobuf::int64 send_tick() const;
  inline void set_send_tick(::google::protobuf::int64 value);
  
  // optional int32 record_status = 3;
  inline bool has_record_status() const;
  inline void clear_record_status();
  static const int kRecordStatusFieldNumber = 3;
  inline ::google::protobuf::int32 record_status() const;
  inline void set_record_status(::google::protobuf::int32 value);
  
  // optional int32 record_type = 4;
  inline bool has_record_type() const;
  inline void clear_record_type();
  static const int kRecordTypeFieldNumber = 4;
  inline ::google::protobuf::int32 record_type() const;
  inline void set_record_type(::google::protobuf::int32 value);
  
  // optional string title = 5;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 5;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  
  // optional string content = 6;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 6;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  
  // optional string replay_content = 7;
  inline bool has_replay_content() const;
  inline void clear_replay_content();
  static const int kReplayContentFieldNumber = 7;
  inline const ::std::string& replay_content() const;
  inline void set_replay_content(const ::std::string& value);
  inline void set_replay_content(const char* value);
  inline void set_replay_content(const char* value, size_t size);
  inline ::std::string* mutable_replay_content();
  inline ::std::string* release_replay_content();
  
  // optional int32 last_evaluate = 8;
  inline bool has_last_evaluate() const;
  inline void clear_last_evaluate();
  static const int kLastEvaluateFieldNumber = 8;
  inline ::google::protobuf::int32 last_evaluate() const;
  inline void set_last_evaluate(::google::protobuf::int32 value);
  
  // optional int32 opinion_index = 9;
  inline bool has_opinion_index() const;
  inline void clear_opinion_index();
  static const int kOpinionIndexFieldNumber = 9;
  inline ::google::protobuf::int32 opinion_index() const;
  inline void set_opinion_index(::google::protobuf::int32 value);
  
  // optional int32 evaluate_star = 10;
  inline bool has_evaluate_star() const;
  inline void clear_evaluate_star();
  static const int kEvaluateStarFieldNumber = 10;
  inline ::google::protobuf::int32 evaluate_star() const;
  inline void set_evaluate_star(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoCustomerSVCRecord)
 private:
  inline void set_has_record_id();
  inline void clear_has_record_id();
  inline void set_has_send_tick();
  inline void clear_has_send_tick();
  inline void set_has_record_status();
  inline void clear_has_record_status();
  inline void set_has_record_type();
  inline void clear_has_record_type();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_replay_content();
  inline void clear_has_replay_content();
  inline void set_has_last_evaluate();
  inline void clear_has_last_evaluate();
  inline void set_has_opinion_index();
  inline void clear_has_opinion_index();
  inline void set_has_evaluate_star();
  inline void clear_has_evaluate_star();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 record_id_;
  ::google::protobuf::int64 send_tick_;
  ::google::protobuf::int32 record_status_;
  ::google::protobuf::int32 record_type_;
  ::std::string* title_;
  ::std::string* content_;
  ::std::string* replay_content_;
  ::google::protobuf::int32 last_evaluate_;
  ::google::protobuf::int32 opinion_index_;
  ::google::protobuf::int32 evaluate_star_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoCustomerSVCRecord* default_instance_;
};
// -------------------------------------------------------------------

class ProtoMediaGiftDef : public ::google::protobuf::Message {
 public:
  ProtoMediaGiftDef();
  virtual ~ProtoMediaGiftDef();
  
  ProtoMediaGiftDef(const ProtoMediaGiftDef& from);
  
  inline ProtoMediaGiftDef& operator=(const ProtoMediaGiftDef& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoMediaGiftDef& default_instance();
  
  void Swap(ProtoMediaGiftDef* other);
  
  // implements Message ----------------------------------------------
  
  ProtoMediaGiftDef* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoMediaGiftDef& from);
  void MergeFrom(const ProtoMediaGiftDef& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 gift_sort = 1;
  inline bool has_gift_sort() const;
  inline void clear_gift_sort();
  static const int kGiftSortFieldNumber = 1;
  inline ::google::protobuf::int32 gift_sort() const;
  inline void set_gift_sort(::google::protobuf::int32 value);
  
  // optional int32 gift_type = 2;
  inline bool has_gift_type() const;
  inline void clear_gift_type();
  static const int kGiftTypeFieldNumber = 2;
  inline ::google::protobuf::int32 gift_type() const;
  inline void set_gift_type(::google::protobuf::int32 value);
  
  // repeated .ProtoPairObj value_exts = 3;
  inline int value_exts_size() const;
  inline void clear_value_exts();
  static const int kValueExtsFieldNumber = 3;
  inline const ::ProtoPairObj& value_exts(int index) const;
  inline ::ProtoPairObj* mutable_value_exts(int index);
  inline ::ProtoPairObj* add_value_exts();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >&
      value_exts() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >*
      mutable_value_exts();
  
  // repeated .ProtoItem gift_items = 4;
  inline int gift_items_size() const;
  inline void clear_gift_items();
  static const int kGiftItemsFieldNumber = 4;
  inline const ::ProtoItem& gift_items(int index) const;
  inline ::ProtoItem* mutable_gift_items(int index);
  inline ::ProtoItem* add_gift_items();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoItem >&
      gift_items() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoItem >*
      mutable_gift_items();
  
  // optional string gift_name = 5;
  inline bool has_gift_name() const;
  inline void clear_gift_name();
  static const int kGiftNameFieldNumber = 5;
  inline const ::std::string& gift_name() const;
  inline void set_gift_name(const ::std::string& value);
  inline void set_gift_name(const char* value);
  inline void set_gift_name(const char* value, size_t size);
  inline ::std::string* mutable_gift_name();
  inline ::std::string* release_gift_name();
  
  // optional string gift_desc = 6;
  inline bool has_gift_desc() const;
  inline void clear_gift_desc();
  static const int kGiftDescFieldNumber = 6;
  inline const ::std::string& gift_desc() const;
  inline void set_gift_desc(const ::std::string& value);
  inline void set_gift_desc(const char* value);
  inline void set_gift_desc(const char* value, size_t size);
  inline ::std::string* mutable_gift_desc();
  inline ::std::string* release_gift_desc();
  
  // optional int32 use_times = 7;
  inline bool has_use_times() const;
  inline void clear_use_times();
  static const int kUseTimesFieldNumber = 7;
  inline ::google::protobuf::int32 use_times() const;
  inline void set_use_times(::google::protobuf::int32 value);
  
  // optional int32 left_use_times = 8;
  inline bool has_left_use_times() const;
  inline void clear_left_use_times();
  static const int kLeftUseTimesFieldNumber = 8;
  inline ::google::protobuf::int32 left_use_times() const;
  inline void set_left_use_times(::google::protobuf::int32 value);
  
  // optional int32 icon_id = 9;
  inline bool has_icon_id() const;
  inline void clear_icon_id();
  static const int kIconIdFieldNumber = 9;
  inline ::google::protobuf::int32 icon_id() const;
  inline void set_icon_id(::google::protobuf::int32 value);
  
  // repeated int32 font_color = 10;
  inline int font_color_size() const;
  inline void clear_font_color();
  static const int kFontColorFieldNumber = 10;
  inline ::google::protobuf::int32 font_color(int index) const;
  inline void set_font_color(int index, ::google::protobuf::int32 value);
  inline void add_font_color(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      font_color() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_font_color();
  
  // @@protoc_insertion_point(class_scope:ProtoMediaGiftDef)
 private:
  inline void set_has_gift_sort();
  inline void clear_has_gift_sort();
  inline void set_has_gift_type();
  inline void clear_has_gift_type();
  inline void set_has_gift_name();
  inline void clear_has_gift_name();
  inline void set_has_gift_desc();
  inline void clear_has_gift_desc();
  inline void set_has_use_times();
  inline void clear_has_use_times();
  inline void set_has_left_use_times();
  inline void clear_has_left_use_times();
  inline void set_has_icon_id();
  inline void clear_has_icon_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 gift_sort_;
  ::google::protobuf::int32 gift_type_;
  ::google::protobuf::RepeatedPtrField< ::ProtoPairObj > value_exts_;
  ::google::protobuf::RepeatedPtrField< ::ProtoItem > gift_items_;
  ::std::string* gift_name_;
  ::std::string* gift_desc_;
  ::google::protobuf::int32 use_times_;
  ::google::protobuf::int32 left_use_times_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > font_color_;
  ::google::protobuf::int32 icon_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoMediaGiftDef* default_instance_;
};
// -------------------------------------------------------------------

class ProtoAreaRole : public ::google::protobuf::Message {
 public:
  ProtoAreaRole();
  virtual ~ProtoAreaRole();
  
  ProtoAreaRole(const ProtoAreaRole& from);
  
  inline ProtoAreaRole& operator=(const ProtoAreaRole& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoAreaRole& default_instance();
  
  void Swap(ProtoAreaRole* other);
  
  // implements Message ----------------------------------------------
  
  ProtoAreaRole* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoAreaRole& from);
  void MergeFrom(const ProtoAreaRole& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional int32 rank = 3;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 3;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);
  
  // optional int32 force = 4;
  inline bool has_force() const;
  inline void clear_force();
  static const int kForceFieldNumber = 4;
  inline ::google::protobuf::int32 force() const;
  inline void set_force(::google::protobuf::int32 value);
  
  // optional int32 sex = 5;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 5;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);
  
  // optional int32 weapon = 6;
  inline bool has_weapon() const;
  inline void clear_weapon();
  static const int kWeaponFieldNumber = 6;
  inline ::google::protobuf::int32 weapon() const;
  inline void set_weapon(::google::protobuf::int32 value);
  
  // optional int32 clothes = 7;
  inline bool has_clothes() const;
  inline void clear_clothes();
  static const int kClothesFieldNumber = 7;
  inline ::google::protobuf::int32 clothes() const;
  inline void set_clothes(::google::protobuf::int32 value);
  
  // optional int32 fashion_weapon = 8;
  inline bool has_fashion_weapon() const;
  inline void clear_fashion_weapon();
  static const int kFashionWeaponFieldNumber = 8;
  inline ::google::protobuf::int32 fashion_weapon() const;
  inline void set_fashion_weapon(::google::protobuf::int32 value);
  
  // optional int32 fashion_clothes = 9;
  inline bool has_fashion_clothes() const;
  inline void clear_fashion_clothes();
  static const int kFashionClothesFieldNumber = 9;
  inline ::google::protobuf::int32 fashion_clothes() const;
  inline void set_fashion_clothes(::google::protobuf::int32 value);
  
  // optional int32 level = 10;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 10;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int32 career = 11;
  inline bool has_career() const;
  inline void clear_career();
  static const int kCareerFieldNumber = 11;
  inline ::google::protobuf::int32 career() const;
  inline void set_career(::google::protobuf::int32 value);
  
  // optional int32 wing_level = 12;
  inline bool has_wing_level() const;
  inline void clear_wing_level();
  static const int kWingLevelFieldNumber = 12;
  inline ::google::protobuf::int32 wing_level() const;
  inline void set_wing_level(::google::protobuf::int32 value);
  
  // optional int32 solider_level = 13;
  inline bool has_solider_level() const;
  inline void clear_solider_level();
  static const int kSoliderLevelFieldNumber = 13;
  inline ::google::protobuf::int32 solider_level() const;
  inline void set_solider_level(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoAreaRole)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_force();
  inline void clear_has_force();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_weapon();
  inline void clear_has_weapon();
  inline void set_has_clothes();
  inline void clear_has_clothes();
  inline void set_has_fashion_weapon();
  inline void clear_has_fashion_weapon();
  inline void set_has_fashion_clothes();
  inline void clear_has_fashion_clothes();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_career();
  inline void clear_has_career();
  inline void set_has_wing_level();
  inline void clear_has_wing_level();
  inline void set_has_solider_level();
  inline void clear_has_solider_level();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 id_;
  ::std::string* name_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 force_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 weapon_;
  ::google::protobuf::int32 clothes_;
  ::google::protobuf::int32 fashion_weapon_;
  ::google::protobuf::int32 fashion_clothes_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 career_;
  ::google::protobuf::int32 wing_level_;
  ::google::protobuf::int32 solider_level_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoAreaRole* default_instance_;
};
// -------------------------------------------------------------------

class ProtoScriptInfo : public ::google::protobuf::Message {
 public:
  ProtoScriptInfo();
  virtual ~ProtoScriptInfo();
  
  ProtoScriptInfo(const ProtoScriptInfo& from);
  
  inline ProtoScriptInfo& operator=(const ProtoScriptInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoScriptInfo& default_instance();
  
  void Swap(ProtoScriptInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProtoScriptInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoScriptInfo& from);
  void MergeFrom(const ProtoScriptInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 script_sort = 1;
  inline bool has_script_sort() const;
  inline void clear_script_sort();
  static const int kScriptSortFieldNumber = 1;
  inline ::google::protobuf::int32 script_sort() const;
  inline void set_script_sort(::google::protobuf::int32 value);
  
  // optional int32 left_times = 2;
  inline bool has_left_times() const;
  inline void clear_left_times();
  static const int kLeftTimesFieldNumber = 2;
  inline ::google::protobuf::int32 left_times() const;
  inline void set_left_times(::google::protobuf::int32 value);
  
  // optional int32 star_level = 3;
  inline bool has_star_level() const;
  inline void clear_star_level();
  static const int kStarLevelFieldNumber = 3;
  inline ::google::protobuf::int32 star_level() const;
  inline void set_star_level(::google::protobuf::int32 value);
  
  // optional int32 is_pass = 4;
  inline bool has_is_pass() const;
  inline void clear_is_pass();
  static const int kIsPassFieldNumber = 4;
  inline ::google::protobuf::int32 is_pass() const;
  inline void set_is_pass(::google::protobuf::int32 value);
  
  // optional int32 is_open = 5;
  inline bool has_is_open() const;
  inline void clear_is_open();
  static const int kIsOpenFieldNumber = 5;
  inline ::google::protobuf::int32 is_open() const;
  inline void set_is_open(::google::protobuf::int32 value);
  
  // optional int32 left_buy_times = 6;
  inline bool has_left_buy_times() const;
  inline void clear_left_buy_times();
  static const int kLeftBuyTimesFieldNumber = 6;
  inline ::google::protobuf::int32 left_buy_times() const;
  inline void set_left_buy_times(::google::protobuf::int32 value);
  
  // optional int32 buy_times = 7;
  inline bool has_buy_times() const;
  inline void clear_buy_times();
  static const int kBuyTimesFieldNumber = 7;
  inline ::google::protobuf::int32 buy_times() const;
  inline void set_buy_times(::google::protobuf::int32 value);
  
  // optional int32 left_get = 8;
  inline bool has_left_get() const;
  inline void clear_left_get();
  static const int kLeftGetFieldNumber = 8;
  inline ::google::protobuf::int32 left_get() const;
  inline void set_left_get(::google::protobuf::int32 value);
  
  // optional int32 today_rank = 9;
  inline bool has_today_rank() const;
  inline void clear_today_rank();
  static const int kTodayRankFieldNumber = 9;
  inline ::google::protobuf::int32 today_rank() const;
  inline void set_today_rank(::google::protobuf::int32 value);
  
  // repeated .ProtoFloorInfo floor_info = 10;
  inline int floor_info_size() const;
  inline void clear_floor_info();
  static const int kFloorInfoFieldNumber = 10;
  inline const ::ProtoFloorInfo& floor_info(int index) const;
  inline ::ProtoFloorInfo* mutable_floor_info(int index);
  inline ::ProtoFloorInfo* add_floor_info();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoFloorInfo >&
      floor_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoFloorInfo >*
      mutable_floor_info();
  
  // optional int32 pass_floor = 11;
  inline bool has_pass_floor() const;
  inline void clear_pass_floor();
  static const int kPassFloorFieldNumber = 11;
  inline ::google::protobuf::int32 pass_floor() const;
  inline void set_pass_floor(::google::protobuf::int32 value);
  
  // optional int32 reset_times = 12;
  inline bool has_reset_times() const;
  inline void clear_reset_times();
  static const int kResetTimesFieldNumber = 12;
  inline ::google::protobuf::int32 reset_times() const;
  inline void set_reset_times(::google::protobuf::int32 value);
  
  // optional int32 is_sweep = 13;
  inline bool has_is_sweep() const;
  inline void clear_is_sweep();
  static const int kIsSweepFieldNumber = 13;
  inline ::google::protobuf::int32 is_sweep() const;
  inline void set_is_sweep(::google::protobuf::int32 value);
  
  // optional int32 pass_piece = 14;
  inline bool has_pass_piece() const;
  inline void clear_pass_piece();
  static const int kPassPieceFieldNumber = 14;
  inline ::google::protobuf::int32 pass_piece() const;
  inline void set_pass_piece(::google::protobuf::int32 value);
  
  // optional int32 pass_chapter = 15;
  inline bool has_pass_chapter() const;
  inline void clear_pass_chapter();
  static const int kPassChapterFieldNumber = 15;
  inline ::google::protobuf::int32 pass_chapter() const;
  inline void set_pass_chapter(::google::protobuf::int32 value);
  
  // repeated .ProtoSpecialAwardInfo special_info = 16;
  inline int special_info_size() const;
  inline void clear_special_info();
  static const int kSpecialInfoFieldNumber = 16;
  inline const ::ProtoSpecialAwardInfo& special_info(int index) const;
  inline ::ProtoSpecialAwardInfo* mutable_special_info(int index);
  inline ::ProtoSpecialAwardInfo* add_special_info();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoSpecialAwardInfo >&
      special_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoSpecialAwardInfo >*
      mutable_special_info();
  
  // optional int32 is_first_pass = 17;
  inline bool has_is_first_pass() const;
  inline void clear_is_first_pass();
  static const int kIsFirstPassFieldNumber = 17;
  inline ::google::protobuf::int32 is_first_pass() const;
  inline void set_is_first_pass(::google::protobuf::int32 value);
  
  // optional int32 skill_id = 18;
  inline bool has_skill_id() const;
  inline void clear_skill_id();
  static const int kSkillIdFieldNumber = 18;
  inline ::google::protobuf::int32 skill_id() const;
  inline void set_skill_id(::google::protobuf::int32 value);
  
  // optional int32 start_wave = 19;
  inline bool has_start_wave() const;
  inline void clear_start_wave();
  static const int kStartWaveFieldNumber = 19;
  inline ::google::protobuf::int32 start_wave() const;
  inline void set_start_wave(::google::protobuf::int32 value);
  
  // optional int32 start_chapter = 20;
  inline bool has_start_chapter() const;
  inline void clear_start_chapter();
  static const int kStartChapterFieldNumber = 20;
  inline ::google::protobuf::int32 start_chapter() const;
  inline void set_start_chapter(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoScriptInfo)
 private:
  inline void set_has_script_sort();
  inline void clear_has_script_sort();
  inline void set_has_left_times();
  inline void clear_has_left_times();
  inline void set_has_star_level();
  inline void clear_has_star_level();
  inline void set_has_is_pass();
  inline void clear_has_is_pass();
  inline void set_has_is_open();
  inline void clear_has_is_open();
  inline void set_has_left_buy_times();
  inline void clear_has_left_buy_times();
  inline void set_has_buy_times();
  inline void clear_has_buy_times();
  inline void set_has_left_get();
  inline void clear_has_left_get();
  inline void set_has_today_rank();
  inline void clear_has_today_rank();
  inline void set_has_pass_floor();
  inline void clear_has_pass_floor();
  inline void set_has_reset_times();
  inline void clear_has_reset_times();
  inline void set_has_is_sweep();
  inline void clear_has_is_sweep();
  inline void set_has_pass_piece();
  inline void clear_has_pass_piece();
  inline void set_has_pass_chapter();
  inline void clear_has_pass_chapter();
  inline void set_has_is_first_pass();
  inline void clear_has_is_first_pass();
  inline void set_has_skill_id();
  inline void clear_has_skill_id();
  inline void set_has_start_wave();
  inline void clear_has_start_wave();
  inline void set_has_start_chapter();
  inline void clear_has_start_chapter();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 script_sort_;
  ::google::protobuf::int32 left_times_;
  ::google::protobuf::int32 star_level_;
  ::google::protobuf::int32 is_pass_;
  ::google::protobuf::int32 is_open_;
  ::google::protobuf::int32 left_buy_times_;
  ::google::protobuf::int32 buy_times_;
  ::google::protobuf::int32 left_get_;
  ::google::protobuf::RepeatedPtrField< ::ProtoFloorInfo > floor_info_;
  ::google::protobuf::int32 today_rank_;
  ::google::protobuf::int32 pass_floor_;
  ::google::protobuf::int32 reset_times_;
  ::google::protobuf::int32 is_sweep_;
  ::google::protobuf::int32 pass_piece_;
  ::google::protobuf::int32 pass_chapter_;
  ::google::protobuf::RepeatedPtrField< ::ProtoSpecialAwardInfo > special_info_;
  ::google::protobuf::int32 is_first_pass_;
  ::google::protobuf::int32 skill_id_;
  ::google::protobuf::int32 start_wave_;
  ::google::protobuf::int32 start_chapter_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(20 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoScriptInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProtoAreaRecord : public ::google::protobuf::Message {
 public:
  ProtoAreaRecord();
  virtual ~ProtoAreaRecord();
  
  ProtoAreaRecord(const ProtoAreaRecord& from);
  
  inline ProtoAreaRecord& operator=(const ProtoAreaRecord& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoAreaRecord& default_instance();
  
  void Swap(ProtoAreaRecord* other);
  
  // implements Message ----------------------------------------------
  
  ProtoAreaRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoAreaRecord& from);
  void MergeFrom(const ProtoAreaRecord& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 pass_time = 1;
  inline bool has_pass_time() const;
  inline void clear_pass_time();
  static const int kPassTimeFieldNumber = 1;
  inline ::google::protobuf::int32 pass_time() const;
  inline void set_pass_time(::google::protobuf::int32 value);
  
  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional int32 state = 3;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);
  
  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional int32 rank = 5;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 5;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);
  
  // optional int32 rank_change = 6;
  inline bool has_rank_change() const;
  inline void clear_rank_change();
  static const int kRankChangeFieldNumber = 6;
  inline ::google::protobuf::int32 rank_change() const;
  inline void set_rank_change(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoAreaRecord)
 private:
  inline void set_has_pass_time();
  inline void clear_has_pass_time();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_rank_change();
  inline void clear_has_rank_change();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 pass_time_;
  ::google::protobuf::int32 type_;
  ::std::string* name_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 rank_change_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoAreaRecord* default_instance_;
};
// -------------------------------------------------------------------

class ProtoBuffStatus : public ::google::protobuf::Message {
 public:
  ProtoBuffStatus();
  virtual ~ProtoBuffStatus();
  
  ProtoBuffStatus(const ProtoBuffStatus& from);
  
  inline ProtoBuffStatus& operator=(const ProtoBuffStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoBuffStatus& default_instance();
  
  void Swap(ProtoBuffStatus* other);
  
  // implements Message ----------------------------------------------
  
  ProtoBuffStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoBuffStatus& from);
  void MergeFrom(const ProtoBuffStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 buff_id = 1;
  inline bool has_buff_id() const;
  inline void clear_buff_id();
  static const int kBuffIdFieldNumber = 1;
  inline ::google::protobuf::int32 buff_id() const;
  inline void set_buff_id(::google::protobuf::int32 value);
  
  // optional int32 last = 2;
  inline bool has_last() const;
  inline void clear_last();
  static const int kLastFieldNumber = 2;
  inline ::google::protobuf::int32 last() const;
  inline void set_last(::google::protobuf::int32 value);
  
  // optional int32 interval = 3;
  inline bool has_interval() const;
  inline void clear_interval();
  static const int kIntervalFieldNumber = 3;
  inline ::google::protobuf::int32 interval() const;
  inline void set_interval(::google::protobuf::int32 value);
  
  // optional int64 check_tick = 4;
  inline bool has_check_tick() const;
  inline void clear_check_tick();
  static const int kCheckTickFieldNumber = 4;
  inline ::google::protobuf::int64 check_tick() const;
  inline void set_check_tick(::google::protobuf::int64 value);
  
  // repeated int32 prop_id_set = 5;
  inline int prop_id_set_size() const;
  inline void clear_prop_id_set();
  static const int kPropIdSetFieldNumber = 5;
  inline ::google::protobuf::int32 prop_id_set(int index) const;
  inline void set_prop_id_set(int index, ::google::protobuf::int32 value);
  inline void add_prop_id_set(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      prop_id_set() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_prop_id_set();
  
  // repeated int32 value_set = 6;
  inline int value_set_size() const;
  inline void clear_value_set();
  static const int kValueSetFieldNumber = 6;
  inline ::google::protobuf::int32 value_set(int index) const;
  inline void set_value_set(int index, ::google::protobuf::int32 value);
  inline void add_value_set(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      value_set() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_value_set();
  
  // repeated int32 percent_set = 7;
  inline int percent_set_size() const;
  inline void clear_percent_set();
  static const int kPercentSetFieldNumber = 7;
  inline ::google::protobuf::int32 percent_set(int index) const;
  inline void set_percent_set(int index, ::google::protobuf::int32 value);
  inline void add_percent_set(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      percent_set() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_percent_set();
  
  // optional int32 hidden = 8;
  inline bool has_hidden() const;
  inline void clear_hidden();
  static const int kHiddenFieldNumber = 8;
  inline ::google::protobuf::int32 hidden() const;
  inline void set_hidden(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoBuffStatus)
 private:
  inline void set_has_buff_id();
  inline void clear_has_buff_id();
  inline void set_has_last();
  inline void clear_has_last();
  inline void set_has_interval();
  inline void clear_has_interval();
  inline void set_has_check_tick();
  inline void clear_has_check_tick();
  inline void set_has_hidden();
  inline void clear_has_hidden();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 buff_id_;
  ::google::protobuf::int32 last_;
  ::google::protobuf::int64 check_tick_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > prop_id_set_;
  ::google::protobuf::int32 interval_;
  ::google::protobuf::int32 hidden_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > value_set_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > percent_set_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoBuffStatus* default_instance_;
};
// -------------------------------------------------------------------

class ProtoShusanBoss : public ::google::protobuf::Message {
 public:
  ProtoShusanBoss();
  virtual ~ProtoShusanBoss();
  
  ProtoShusanBoss(const ProtoShusanBoss& from);
  
  inline ProtoShusanBoss& operator=(const ProtoShusanBoss& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoShusanBoss& default_instance();
  
  void Swap(ProtoShusanBoss* other);
  
  // implements Message ----------------------------------------------
  
  ProtoShusanBoss* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoShusanBoss& from);
  void MergeFrom(const ProtoShusanBoss& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 boss_sort = 1;
  inline bool has_boss_sort() const;
  inline void clear_boss_sort();
  static const int kBossSortFieldNumber = 1;
  inline ::google::protobuf::int32 boss_sort() const;
  inline void set_boss_sort(::google::protobuf::int32 value);
  
  // optional int64 boss_id = 2;
  inline bool has_boss_id() const;
  inline void clear_boss_id();
  static const int kBossIdFieldNumber = 2;
  inline ::google::protobuf::int64 boss_id() const;
  inline void set_boss_id(::google::protobuf::int64 value);
  
  // optional int32 born_time = 3;
  inline bool has_born_time() const;
  inline void clear_born_time();
  static const int kBornTimeFieldNumber = 3;
  inline ::google::protobuf::int32 born_time() const;
  inline void set_born_time(::google::protobuf::int32 value);
  
  // optional .ProtoRoleInfo aim_role = 4;
  inline bool has_aim_role() const;
  inline void clear_aim_role();
  static const int kAimRoleFieldNumber = 4;
  inline const ::ProtoRoleInfo& aim_role() const;
  inline ::ProtoRoleInfo* mutable_aim_role();
  inline ::ProtoRoleInfo* release_aim_role();
  
  // optional string last_role_name = 5;
  inline bool has_last_role_name() const;
  inline void clear_last_role_name();
  static const int kLastRoleNameFieldNumber = 5;
  inline const ::std::string& last_role_name() const;
  inline void set_last_role_name(const ::std::string& value);
  inline void set_last_role_name(const char* value);
  inline void set_last_role_name(const char* value, size_t size);
  inline ::std::string* mutable_last_role_name();
  inline ::std::string* release_last_role_name();
  
  // optional int64 last_role_id = 6;
  inline bool has_last_role_id() const;
  inline void clear_last_role_id();
  static const int kLastRoleIdFieldNumber = 6;
  inline ::google::protobuf::int64 last_role_id() const;
  inline void set_last_role_id(::google::protobuf::int64 value);
  
  // optional int32 floor = 7;
  inline bool has_floor() const;
  inline void clear_floor();
  static const int kFloorFieldNumber = 7;
  inline ::google::protobuf::int32 floor() const;
  inline void set_floor(::google::protobuf::int32 value);
  
  // optional int32 scene_id = 8;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 8;
  inline ::google::protobuf::int32 scene_id() const;
  inline void set_scene_id(::google::protobuf::int32 value);
  
  // optional .ProtoCoord born_point = 9;
  inline bool has_born_point() const;
  inline void clear_born_point();
  static const int kBornPointFieldNumber = 9;
  inline const ::ProtoCoord& born_point() const;
  inline ::ProtoCoord* mutable_born_point();
  inline ::ProtoCoord* release_born_point();
  
  // optional int32 space_id = 10;
  inline bool has_space_id() const;
  inline void clear_space_id();
  static const int kSpaceIdFieldNumber = 10;
  inline ::google::protobuf::int32 space_id() const;
  inline void set_space_id(::google::protobuf::int32 value);
  
  // optional int32 left_times = 11;
  inline bool has_left_times() const;
  inline void clear_left_times();
  static const int kLeftTimesFieldNumber = 11;
  inline ::google::protobuf::int32 left_times() const;
  inline void set_left_times(::google::protobuf::int32 value);
  
  // optional int32 is_pack_full = 12;
  inline bool has_is_pack_full() const;
  inline void clear_is_pack_full();
  static const int kIsPackFullFieldNumber = 12;
  inline ::google::protobuf::int32 is_pack_full() const;
  inline void set_is_pack_full(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoShusanBoss)
 private:
  inline void set_has_boss_sort();
  inline void clear_has_boss_sort();
  inline void set_has_boss_id();
  inline void clear_has_boss_id();
  inline void set_has_born_time();
  inline void clear_has_born_time();
  inline void set_has_aim_role();
  inline void clear_has_aim_role();
  inline void set_has_last_role_name();
  inline void clear_has_last_role_name();
  inline void set_has_last_role_id();
  inline void clear_has_last_role_id();
  inline void set_has_floor();
  inline void clear_has_floor();
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_born_point();
  inline void clear_has_born_point();
  inline void set_has_space_id();
  inline void clear_has_space_id();
  inline void set_has_left_times();
  inline void clear_has_left_times();
  inline void set_has_is_pack_full();
  inline void clear_has_is_pack_full();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 boss_id_;
  ::google::protobuf::int32 boss_sort_;
  ::google::protobuf::int32 born_time_;
  ::ProtoRoleInfo* aim_role_;
  ::std::string* last_role_name_;
  ::google::protobuf::int64 last_role_id_;
  ::google::protobuf::int32 floor_;
  ::google::protobuf::int32 scene_id_;
  ::ProtoCoord* born_point_;
  ::google::protobuf::int32 space_id_;
  ::google::protobuf::int32 left_times_;
  ::google::protobuf::int32 is_pack_full_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoShusanBoss* default_instance_;
};
// -------------------------------------------------------------------

class ProtoSuit : public ::google::protobuf::Message {
 public:
  ProtoSuit();
  virtual ~ProtoSuit();
  
  ProtoSuit(const ProtoSuit& from);
  
  inline ProtoSuit& operator=(const ProtoSuit& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoSuit& default_instance();
  
  void Swap(ProtoSuit* other);
  
  // implements Message ----------------------------------------------
  
  ProtoSuit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoSuit& from);
  void MergeFrom(const ProtoSuit& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int32 color = 2;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 2;
  inline ::google::protobuf::int32 color() const;
  inline void set_color(::google::protobuf::int32 value);
  
  // optional int32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // optional int32 suit_type = 4;
  inline bool has_suit_type() const;
  inline void clear_suit_type();
  static const int kSuitTypeFieldNumber = 4;
  inline ::google::protobuf::int32 suit_type() const;
  inline void set_suit_type(::google::protobuf::int32 value);
  
  // optional int32 is_active = 5;
  inline bool has_is_active() const;
  inline void clear_is_active();
  static const int kIsActiveFieldNumber = 5;
  inline ::google::protobuf::int32 is_active() const;
  inline void set_is_active(::google::protobuf::int32 value);
  
  // optional int32 upper_is_suit = 6;
  inline bool has_upper_is_suit() const;
  inline void clear_upper_is_suit();
  static const int kUpperIsSuitFieldNumber = 6;
  inline ::google::protobuf::int32 upper_is_suit() const;
  inline void set_upper_is_suit(::google::protobuf::int32 value);
  
  // optional int32 is_min_level = 7;
  inline bool has_is_min_level() const;
  inline void clear_is_min_level();
  static const int kIsMinLevelFieldNumber = 7;
  inline ::google::protobuf::int32 is_min_level() const;
  inline void set_is_min_level(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoSuit)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_suit_type();
  inline void clear_has_suit_type();
  inline void set_has_is_active();
  inline void clear_has_is_active();
  inline void set_has_upper_is_suit();
  inline void clear_has_upper_is_suit();
  inline void set_has_is_min_level();
  inline void clear_has_is_min_level();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 color_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 suit_type_;
  ::google::protobuf::int32 is_active_;
  ::google::protobuf::int32 upper_is_suit_;
  ::google::protobuf::int32 is_min_level_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoSuit* default_instance_;
};
// -------------------------------------------------------------------

class ProtoLvlReward : public ::google::protobuf::Message {
 public:
  ProtoLvlReward();
  virtual ~ProtoLvlReward();
  
  ProtoLvlReward(const ProtoLvlReward& from);
  
  inline ProtoLvlReward& operator=(const ProtoLvlReward& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoLvlReward& default_instance();
  
  void Swap(ProtoLvlReward* other);
  
  // implements Message ----------------------------------------------
  
  ProtoLvlReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoLvlReward& from);
  void MergeFrom(const ProtoLvlReward& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int32 validate = 2;
  inline bool has_validate() const;
  inline void clear_validate();
  static const int kValidateFieldNumber = 2;
  inline ::google::protobuf::int32 validate() const;
  inline void set_validate(::google::protobuf::int32 value);
  
  // repeated .ProtoItem items = 3;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 3;
  inline const ::ProtoItem& items(int index) const;
  inline ::ProtoItem* mutable_items(int index);
  inline ::ProtoItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoItem >*
      mutable_items();
  
  // @@protoc_insertion_point(class_scope:ProtoLvlReward)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_validate();
  inline void clear_has_validate();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 validate_;
  ::google::protobuf::RepeatedPtrField< ::ProtoItem > items_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoLvlReward* default_instance_;
};
// -------------------------------------------------------------------

class ProtoDailyRecord : public ::google::protobuf::Message {
 public:
  ProtoDailyRecord();
  virtual ~ProtoDailyRecord();
  
  ProtoDailyRecord(const ProtoDailyRecord& from);
  
  inline ProtoDailyRecord& operator=(const ProtoDailyRecord& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoDailyRecord& default_instance();
  
  void Swap(ProtoDailyRecord* other);
  
  // implements Message ----------------------------------------------
  
  ProtoDailyRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoDailyRecord& from);
  void MergeFrom(const ProtoDailyRecord& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);
  
  // optional int32 has_reward = 3;
  inline bool has_has_reward() const;
  inline void clear_has_reward();
  static const int kHasRewardFieldNumber = 3;
  inline ::google::protobuf::int32 has_reward() const;
  inline void set_has_reward(::google::protobuf::int32 value);
  
  // optional int32 is_over = 4;
  inline bool has_is_over() const;
  inline void clear_is_over();
  static const int kIsOverFieldNumber = 4;
  inline ::google::protobuf::int32 is_over() const;
  inline void set_is_over(::google::protobuf::int32 value);
  
  // optional int32 curr_value = 5;
  inline bool has_curr_value() const;
  inline void clear_curr_value();
  static const int kCurrValueFieldNumber = 5;
  inline ::google::protobuf::int32 curr_value() const;
  inline void set_curr_value(::google::protobuf::int32 value);
  
  // optional int32 sort = 6;
  inline bool has_sort() const;
  inline void clear_sort();
  static const int kSortFieldNumber = 6;
  inline ::google::protobuf::int32 sort() const;
  inline void set_sort(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoDailyRecord)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_has_reward();
  inline void clear_has_has_reward();
  inline void set_has_is_over();
  inline void clear_has_is_over();
  inline void set_has_curr_value();
  inline void clear_has_curr_value();
  inline void set_has_sort();
  inline void clear_has_sort();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 value_;
  ::google::protobuf::int32 has_reward_;
  ::google::protobuf::int32 is_over_;
  ::google::protobuf::int32 curr_value_;
  ::google::protobuf::int32 sort_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoDailyRecord* default_instance_;
};
// -------------------------------------------------------------------

class ProtoRoleShape : public ::google::protobuf::Message {
 public:
  ProtoRoleShape();
  virtual ~ProtoRoleShape();
  
  ProtoRoleShape(const ProtoRoleShape& from);
  
  inline ProtoRoleShape& operator=(const ProtoRoleShape& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoRoleShape& default_instance();
  
  void Swap(ProtoRoleShape* other);
  
  // implements Message ----------------------------------------------
  
  ProtoRoleShape* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoRoleShape& from);
  void MergeFrom(const ProtoRoleShape& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int64 role_id() const;
  inline void set_role_id(::google::protobuf::int64 value);
  
  // optional int32 label = 2;
  inline bool has_label() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 2;
  inline ::google::protobuf::int32 label() const;
  inline void set_label(::google::protobuf::int32 value);
  
  // optional int32 weapon = 3;
  inline bool has_weapon() const;
  inline void clear_weapon();
  static const int kWeaponFieldNumber = 3;
  inline ::google::protobuf::int32 weapon() const;
  inline void set_weapon(::google::protobuf::int32 value);
  
  // optional int32 clothes = 4;
  inline bool has_clothes() const;
  inline void clear_clothes();
  static const int kClothesFieldNumber = 4;
  inline ::google::protobuf::int32 clothes() const;
  inline void set_clothes(::google::protobuf::int32 value);
  
  // optional int32 fashion_weapon = 5;
  inline bool has_fashion_weapon() const;
  inline void clear_fashion_weapon();
  static const int kFashionWeaponFieldNumber = 5;
  inline ::google::protobuf::int32 fashion_weapon() const;
  inline void set_fashion_weapon(::google::protobuf::int32 value);
  
  // optional int32 fashion_clothes = 6;
  inline bool has_fashion_clothes() const;
  inline void clear_fashion_clothes();
  static const int kFashionClothesFieldNumber = 6;
  inline ::google::protobuf::int32 fashion_clothes() const;
  inline void set_fashion_clothes(::google::protobuf::int32 value);
  
  // optional int32 career = 7;
  inline bool has_career() const;
  inline void clear_career();
  static const int kCareerFieldNumber = 7;
  inline ::google::protobuf::int32 career() const;
  inline void set_career(::google::protobuf::int32 value);
  
  // optional int32 sex = 8;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 8;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);
  
  // optional int32 wing = 9;
  inline bool has_wing() const;
  inline void clear_wing();
  static const int kWingFieldNumber = 9;
  inline ::google::protobuf::int32 wing() const;
  inline void set_wing(::google::protobuf::int32 value);
  
  // optional int32 god_weapon = 10;
  inline bool has_god_weapon() const;
  inline void clear_god_weapon();
  static const int kGodWeaponFieldNumber = 10;
  inline ::google::protobuf::int32 god_weapon() const;
  inline void set_god_weapon(::google::protobuf::int32 value);
  
  // optional int32 mount_sort = 11;
  inline bool has_mount_sort() const;
  inline void clear_mount_sort();
  static const int kMountSortFieldNumber = 11;
  inline ::google::protobuf::int32 mount_sort() const;
  inline void set_mount_sort(::google::protobuf::int32 value);
  
  // optional int32 sword_pool = 12;
  inline bool has_sword_pool() const;
  inline void clear_sword_pool();
  static const int kSwordPoolFieldNumber = 12;
  inline ::google::protobuf::int32 sword_pool() const;
  inline void set_sword_pool(::google::protobuf::int32 value);
  
  // optional int32 tian_gang = 13;
  inline bool has_tian_gang() const;
  inline void clear_tian_gang();
  static const int kTianGangFieldNumber = 13;
  inline ::google::protobuf::int32 tian_gang() const;
  inline void set_tian_gang(::google::protobuf::int32 value);
  
  // optional int32 fashion_id = 14;
  inline bool has_fashion_id() const;
  inline void clear_fashion_id();
  static const int kFashionIdFieldNumber = 14;
  inline ::google::protobuf::int32 fashion_id() const;
  inline void set_fashion_id(::google::protobuf::int32 value);
  
  // optional int32 fashion_color = 15;
  inline bool has_fashion_color() const;
  inline void clear_fashion_color();
  static const int kFashionColorFieldNumber = 15;
  inline ::google::protobuf::int32 fashion_color() const;
  inline void set_fashion_color(::google::protobuf::int32 value);
  
  // optional int32 transfer_id = 16;
  inline bool has_transfer_id() const;
  inline void clear_transfer_id();
  static const int kTransferIdFieldNumber = 16;
  inline ::google::protobuf::int32 transfer_id() const;
  inline void set_transfer_id(::google::protobuf::int32 value);
  
  // optional int32 hickty_id = 17;
  inline bool has_hickty_id() const;
  inline void clear_hickty_id();
  static const int kHicktyIdFieldNumber = 17;
  inline ::google::protobuf::int32 hickty_id() const;
  inline void set_hickty_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoRoleShape)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_label();
  inline void clear_has_label();
  inline void set_has_weapon();
  inline void clear_has_weapon();
  inline void set_has_clothes();
  inline void clear_has_clothes();
  inline void set_has_fashion_weapon();
  inline void clear_has_fashion_weapon();
  inline void set_has_fashion_clothes();
  inline void clear_has_fashion_clothes();
  inline void set_has_career();
  inline void clear_has_career();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_wing();
  inline void clear_has_wing();
  inline void set_has_god_weapon();
  inline void clear_has_god_weapon();
  inline void set_has_mount_sort();
  inline void clear_has_mount_sort();
  inline void set_has_sword_pool();
  inline void clear_has_sword_pool();
  inline void set_has_tian_gang();
  inline void clear_has_tian_gang();
  inline void set_has_fashion_id();
  inline void clear_has_fashion_id();
  inline void set_has_fashion_color();
  inline void clear_has_fashion_color();
  inline void set_has_transfer_id();
  inline void clear_has_transfer_id();
  inline void set_has_hickty_id();
  inline void clear_has_hickty_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 role_id_;
  ::google::protobuf::int32 label_;
  ::google::protobuf::int32 weapon_;
  ::google::protobuf::int32 clothes_;
  ::google::protobuf::int32 fashion_weapon_;
  ::google::protobuf::int32 fashion_clothes_;
  ::google::protobuf::int32 career_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 wing_;
  ::google::protobuf::int32 god_weapon_;
  ::google::protobuf::int32 mount_sort_;
  ::google::protobuf::int32 sword_pool_;
  ::google::protobuf::int32 tian_gang_;
  ::google::protobuf::int32 fashion_id_;
  ::google::protobuf::int32 fashion_color_;
  ::google::protobuf::int32 transfer_id_;
  ::google::protobuf::int32 hickty_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoRoleShape* default_instance_;
};
// -------------------------------------------------------------------

class ProtoCQAttackerInfo : public ::google::protobuf::Message {
 public:
  ProtoCQAttackerInfo();
  virtual ~ProtoCQAttackerInfo();
  
  ProtoCQAttackerInfo(const ProtoCQAttackerInfo& from);
  
  inline ProtoCQAttackerInfo& operator=(const ProtoCQAttackerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoCQAttackerInfo& default_instance();
  
  void Swap(ProtoCQAttackerInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProtoCQAttackerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoCQAttackerInfo& from);
  void MergeFrom(const ProtoCQAttackerInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 order = 1;
  inline bool has_order() const;
  inline void clear_order();
  static const int kOrderFieldNumber = 1;
  inline ::google::protobuf::int32 order() const;
  inline void set_order(::google::protobuf::int32 value);
  
  // optional int64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::int64 role_id() const;
  inline void set_role_id(::google::protobuf::int64 value);
  
  // optional string role_name = 3;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 3;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  
  // optional int32 status = 4;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoCQAttackerInfo)
 private:
  inline void set_has_order();
  inline void clear_has_order();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_status();
  inline void clear_has_status();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 role_id_;
  ::google::protobuf::int32 order_;
  ::google::protobuf::int32 status_;
  ::std::string* role_name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoCQAttackerInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProtoWing : public ::google::protobuf::Message {
 public:
  ProtoWing();
  virtual ~ProtoWing();
  
  ProtoWing(const ProtoWing& from);
  
  inline ProtoWing& operator=(const ProtoWing& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoWing& default_instance();
  
  void Swap(ProtoWing* other);
  
  // implements Message ----------------------------------------------
  
  ProtoWing* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoWing& from);
  void MergeFrom(const ProtoWing& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 wing_id = 1;
  inline bool has_wing_id() const;
  inline void clear_wing_id();
  static const int kWingIdFieldNumber = 1;
  inline ::google::protobuf::int32 wing_id() const;
  inline void set_wing_id(::google::protobuf::int32 value);
  
  // optional int32 wing_level = 2;
  inline bool has_wing_level() const;
  inline void clear_wing_level();
  static const int kWingLevelFieldNumber = 2;
  inline ::google::protobuf::int32 wing_level() const;
  inline void set_wing_level(::google::protobuf::int32 value);
  
  // optional int32 wing_process = 3;
  inline bool has_wing_process() const;
  inline void clear_wing_process();
  static const int kWingProcessFieldNumber = 3;
  inline ::google::protobuf::int32 wing_process() const;
  inline void set_wing_process(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoWing)
 private:
  inline void set_has_wing_id();
  inline void clear_has_wing_id();
  inline void set_has_wing_level();
  inline void clear_has_wing_level();
  inline void set_has_wing_process();
  inline void clear_has_wing_process();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 wing_id_;
  ::google::protobuf::int32 wing_level_;
  ::google::protobuf::int32 wing_process_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoWing* default_instance_;
};
// -------------------------------------------------------------------

class ProtoCQRank : public ::google::protobuf::Message {
 public:
  ProtoCQRank();
  virtual ~ProtoCQRank();
  
  ProtoCQRank(const ProtoCQRank& from);
  
  inline ProtoCQRank& operator=(const ProtoCQRank& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoCQRank& default_instance();
  
  void Swap(ProtoCQRank* other);
  
  // implements Message ----------------------------------------------
  
  ProtoCQRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoCQRank& from);
  void MergeFrom(const ProtoCQRank& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);
  
  // optional int64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::int64 role_id() const;
  inline void set_role_id(::google::protobuf::int64 value);
  
  // optional string role_name = 3;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 3;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  
  // optional int32 score = 4;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 4;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);
  
  // optional int32 fight_time = 5;
  inline bool has_fight_time() const;
  inline void clear_fight_time();
  static const int kFightTimeFieldNumber = 5;
  inline ::google::protobuf::int32 fight_time() const;
  inline void set_fight_time(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoCQRank)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_fight_time();
  inline void clear_has_fight_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 role_id_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 score_;
  ::std::string* role_name_;
  ::google::protobuf::int32 fight_time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoCQRank* default_instance_;
};
// -------------------------------------------------------------------

class ProtoThreeObj : public ::google::protobuf::Message {
 public:
  ProtoThreeObj();
  virtual ~ProtoThreeObj();
  
  ProtoThreeObj(const ProtoThreeObj& from);
  
  inline ProtoThreeObj& operator=(const ProtoThreeObj& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoThreeObj& default_instance();
  
  void Swap(ProtoThreeObj* other);
  
  // implements Message ----------------------------------------------
  
  ProtoThreeObj* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoThreeObj& from);
  void MergeFrom(const ProtoThreeObj& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);
  
  // optional int32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);
  
  // optional int64 tick = 3;
  inline bool has_tick() const;
  inline void clear_tick();
  static const int kTickFieldNumber = 3;
  inline ::google::protobuf::int64 tick() const;
  inline void set_tick(::google::protobuf::int64 value);
  
  // optional int32 total_times = 4;
  inline bool has_total_times() const;
  inline void clear_total_times();
  static const int kTotalTimesFieldNumber = 4;
  inline ::google::protobuf::int32 total_times() const;
  inline void set_total_times(::google::protobuf::int32 value);
  
  // optional int64 last_tick = 5;
  inline bool has_last_tick() const;
  inline void clear_last_tick();
  static const int kLastTickFieldNumber = 5;
  inline ::google::protobuf::int64 last_tick() const;
  inline void set_last_tick(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:ProtoThreeObj)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_tick();
  inline void clear_has_tick();
  inline void set_has_total_times();
  inline void clear_has_total_times();
  inline void set_has_last_tick();
  inline void clear_has_last_tick();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 tick_;
  ::google::protobuf::int32 value_;
  ::google::protobuf::int32 total_times_;
  ::google::protobuf::int64 last_tick_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoThreeObj* default_instance_;
};
// -------------------------------------------------------------------

class ProtoEscortMapItem : public ::google::protobuf::Message {
 public:
  ProtoEscortMapItem();
  virtual ~ProtoEscortMapItem();
  
  ProtoEscortMapItem(const ProtoEscortMapItem& from);
  
  inline ProtoEscortMapItem& operator=(const ProtoEscortMapItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoEscortMapItem& default_instance();
  
  void Swap(ProtoEscortMapItem* other);
  
  // implements Message ----------------------------------------------
  
  ProtoEscortMapItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoEscortMapItem& from);
  void MergeFrom(const ProtoEscortMapItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional int64 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);
  
  // optional int32 x = 3;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 3;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);
  
  // optional int32 y = 4;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 4;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);
  
  // optional string name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // @@protoc_insertion_point(class_scope:ProtoEscortMapItem)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 x_;
  ::std::string* name_;
  ::google::protobuf::int32 y_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoEscortMapItem* default_instance_;
};
// -------------------------------------------------------------------

class ProtoRefineSuit : public ::google::protobuf::Message {
 public:
  ProtoRefineSuit();
  virtual ~ProtoRefineSuit();
  
  ProtoRefineSuit(const ProtoRefineSuit& from);
  
  inline ProtoRefineSuit& operator=(const ProtoRefineSuit& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoRefineSuit& default_instance();
  
  void Swap(ProtoRefineSuit* other);
  
  // implements Message ----------------------------------------------
  
  ProtoRefineSuit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoRefineSuit& from);
  void MergeFrom(const ProtoRefineSuit& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 is_activity = 1;
  inline bool has_is_activity() const;
  inline void clear_is_activity();
  static const int kIsActivityFieldNumber = 1;
  inline ::google::protobuf::int32 is_activity() const;
  inline void set_is_activity(::google::protobuf::int32 value);
  
  // optional int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoRefineSuit)
 private:
  inline void set_has_is_activity();
  inline void clear_has_is_activity();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_count();
  inline void clear_has_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 is_activity_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoRefineSuit* default_instance_;
};
// -------------------------------------------------------------------

class ProtoPanicItem : public ::google::protobuf::Message {
 public:
  ProtoPanicItem();
  virtual ~ProtoPanicItem();
  
  ProtoPanicItem(const ProtoPanicItem& from);
  
  inline ProtoPanicItem& operator=(const ProtoPanicItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoPanicItem& default_instance();
  
  void Swap(ProtoPanicItem* other);
  
  // implements Message ----------------------------------------------
  
  ProtoPanicItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoPanicItem& from);
  void MergeFrom(const ProtoPanicItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 item_id = 1;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::int32 item_id() const;
  inline void set_item_id(::google::protobuf::int32 value);
  
  // optional int32 org_price = 2;
  inline bool has_org_price() const;
  inline void clear_org_price();
  static const int kOrgPriceFieldNumber = 2;
  inline ::google::protobuf::int32 org_price() const;
  inline void set_org_price(::google::protobuf::int32 value);
  
  // optional int32 price = 3;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 3;
  inline ::google::protobuf::int32 price() const;
  inline void set_price(::google::protobuf::int32 value);
  
  // optional int32 left_amount = 4;
  inline bool has_left_amount() const;
  inline void clear_left_amount();
  static const int kLeftAmountFieldNumber = 4;
  inline ::google::protobuf::int32 left_amount() const;
  inline void set_left_amount(::google::protobuf::int32 value);
  
  // optional int32 limit_buy = 5;
  inline bool has_limit_buy() const;
  inline void clear_limit_buy();
  static const int kLimitBuyFieldNumber = 5;
  inline ::google::protobuf::int32 limit_buy() const;
  inline void set_limit_buy(::google::protobuf::int32 value);
  
  // optional int32 left_buy_times = 6;
  inline bool has_left_buy_times() const;
  inline void clear_left_buy_times();
  static const int kLeftBuyTimesFieldNumber = 6;
  inline ::google::protobuf::int32 left_buy_times() const;
  inline void set_left_buy_times(::google::protobuf::int32 value);
  
  // optional int32 type = 7;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 7;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional int32 item_bind = 8;
  inline bool has_item_bind() const;
  inline void clear_item_bind();
  static const int kItemBindFieldNumber = 8;
  inline ::google::protobuf::int32 item_bind() const;
  inline void set_item_bind(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoPanicItem)
 private:
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_org_price();
  inline void clear_has_org_price();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_left_amount();
  inline void clear_has_left_amount();
  inline void set_has_limit_buy();
  inline void clear_has_limit_buy();
  inline void set_has_left_buy_times();
  inline void clear_has_left_buy_times();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_item_bind();
  inline void clear_has_item_bind();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 item_id_;
  ::google::protobuf::int32 org_price_;
  ::google::protobuf::int32 price_;
  ::google::protobuf::int32 left_amount_;
  ::google::protobuf::int32 limit_buy_;
  ::google::protobuf::int32 left_buy_times_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 item_bind_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoPanicItem* default_instance_;
};
// -------------------------------------------------------------------

class ProtoKiller : public ::google::protobuf::Message {
 public:
  ProtoKiller();
  virtual ~ProtoKiller();
  
  ProtoKiller(const ProtoKiller& from);
  
  inline ProtoKiller& operator=(const ProtoKiller& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoKiller& default_instance();
  
  void Swap(ProtoKiller* other);
  
  // implements Message ----------------------------------------------
  
  ProtoKiller* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoKiller& from);
  void MergeFrom(const ProtoKiller& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int64 role_id() const;
  inline void set_role_id(::google::protobuf::int64 value);
  
  // optional string role_name = 2;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 2;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  
  // optional int32 role_level = 3;
  inline bool has_role_level() const;
  inline void clear_role_level();
  static const int kRoleLevelFieldNumber = 3;
  inline ::google::protobuf::int32 role_level() const;
  inline void set_role_level(::google::protobuf::int32 value);
  
  // optional int32 fight_force = 4;
  inline bool has_fight_force() const;
  inline void clear_fight_force();
  static const int kFightForceFieldNumber = 4;
  inline ::google::protobuf::int32 fight_force() const;
  inline void set_fight_force(::google::protobuf::int32 value);
  
  // optional int32 kill_times = 5;
  inline bool has_kill_times() const;
  inline void clear_kill_times();
  static const int kKillTimesFieldNumber = 5;
  inline ::google::protobuf::int32 kill_times() const;
  inline void set_kill_times(::google::protobuf::int32 value);
  
  // optional int32 lastest_kill_tick = 6;
  inline bool has_lastest_kill_tick() const;
  inline void clear_lastest_kill_tick();
  static const int kLastestKillTickFieldNumber = 6;
  inline ::google::protobuf::int32 lastest_kill_tick() const;
  inline void set_lastest_kill_tick(::google::protobuf::int32 value);
  
  // optional int32 is_in_scene = 7;
  inline bool has_is_in_scene() const;
  inline void clear_is_in_scene();
  static const int kIsInSceneFieldNumber = 7;
  inline ::google::protobuf::int32 is_in_scene() const;
  inline void set_is_in_scene(::google::protobuf::int32 value);
  
  // optional int32 role_sex = 8;
  inline bool has_role_sex() const;
  inline void clear_role_sex();
  static const int kRoleSexFieldNumber = 8;
  inline ::google::protobuf::int32 role_sex() const;
  inline void set_role_sex(::google::protobuf::int32 value);
  
  // optional string kill_tick = 9;
  inline bool has_kill_tick() const;
  inline void clear_kill_tick();
  static const int kKillTickFieldNumber = 9;
  inline const ::std::string& kill_tick() const;
  inline void set_kill_tick(const ::std::string& value);
  inline void set_kill_tick(const char* value);
  inline void set_kill_tick(const char* value, size_t size);
  inline ::std::string* mutable_kill_tick();
  inline ::std::string* release_kill_tick();
  
  // @@protoc_insertion_point(class_scope:ProtoKiller)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_role_level();
  inline void clear_has_role_level();
  inline void set_has_fight_force();
  inline void clear_has_fight_force();
  inline void set_has_kill_times();
  inline void clear_has_kill_times();
  inline void set_has_lastest_kill_tick();
  inline void clear_has_lastest_kill_tick();
  inline void set_has_is_in_scene();
  inline void clear_has_is_in_scene();
  inline void set_has_role_sex();
  inline void clear_has_role_sex();
  inline void set_has_kill_tick();
  inline void clear_has_kill_tick();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 role_id_;
  ::std::string* role_name_;
  ::google::protobuf::int32 role_level_;
  ::google::protobuf::int32 fight_force_;
  ::google::protobuf::int32 kill_times_;
  ::google::protobuf::int32 lastest_kill_tick_;
  ::google::protobuf::int32 is_in_scene_;
  ::google::protobuf::int32 role_sex_;
  ::std::string* kill_tick_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoKiller* default_instance_;
};
// -------------------------------------------------------------------

class ProtoPeakWarRank : public ::google::protobuf::Message {
 public:
  ProtoPeakWarRank();
  virtual ~ProtoPeakWarRank();
  
  ProtoPeakWarRank(const ProtoPeakWarRank& from);
  
  inline ProtoPeakWarRank& operator=(const ProtoPeakWarRank& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoPeakWarRank& default_instance();
  
  void Swap(ProtoPeakWarRank* other);
  
  // implements Message ----------------------------------------------
  
  ProtoPeakWarRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoPeakWarRank& from);
  void MergeFrom(const ProtoPeakWarRank& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);
  
  // optional int64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::int64 role_id() const;
  inline void set_role_id(::google::protobuf::int64 value);
  
  // optional string role_name = 3;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 3;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  
  // optional int32 kill_amount = 4;
  inline bool has_kill_amount() const;
  inline void clear_kill_amount();
  static const int kKillAmountFieldNumber = 4;
  inline ::google::protobuf::int32 kill_amount() const;
  inline void set_kill_amount(::google::protobuf::int32 value);
  
  // optional int32 floor = 5;
  inline bool has_floor() const;
  inline void clear_floor();
  static const int kFloorFieldNumber = 5;
  inline ::google::protobuf::int32 floor() const;
  inline void set_floor(::google::protobuf::int32 value);
  
  // optional int32 exploit = 6;
  inline bool has_exploit() const;
  inline void clear_exploit();
  static const int kExploitFieldNumber = 6;
  inline ::google::protobuf::int32 exploit() const;
  inline void set_exploit(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoPeakWarRank)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_kill_amount();
  inline void clear_has_kill_amount();
  inline void set_has_floor();
  inline void clear_has_floor();
  inline void set_has_exploit();
  inline void clear_has_exploit();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 role_id_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 kill_amount_;
  ::std::string* role_name_;
  ::google::protobuf::int32 floor_;
  ::google::protobuf::int32 exploit_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoPeakWarRank* default_instance_;
};
// -------------------------------------------------------------------

class PActTypeItem : public ::google::protobuf::Message {
 public:
  PActTypeItem();
  virtual ~PActTypeItem();
  
  PActTypeItem(const PActTypeItem& from);
  
  inline PActTypeItem& operator=(const PActTypeItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PActTypeItem& default_instance();
  
  void Swap(PActTypeItem* other);
  
  // implements Message ----------------------------------------------
  
  PActTypeItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PActTypeItem& from);
  void MergeFrom(const PActTypeItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .PRewardItem reward_info = 1;
  inline int reward_info_size() const;
  inline void clear_reward_info();
  static const int kRewardInfoFieldNumber = 1;
  inline const ::PRewardItem& reward_info(int index) const;
  inline ::PRewardItem* mutable_reward_info(int index);
  inline ::PRewardItem* add_reward_info();
  inline const ::google::protobuf::RepeatedPtrField< ::PRewardItem >&
      reward_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::PRewardItem >*
      mutable_reward_info();
  
  // optional int64 sub_value = 2;
  inline bool has_sub_value() const;
  inline void clear_sub_value();
  static const int kSubValueFieldNumber = 2;
  inline ::google::protobuf::int64 sub_value() const;
  inline void set_sub_value(::google::protobuf::int64 value);
  
  // optional int64 second_sub = 3;
  inline bool has_second_sub() const;
  inline void clear_second_sub();
  static const int kSecondSubFieldNumber = 3;
  inline ::google::protobuf::int64 second_sub() const;
  inline void set_second_sub(::google::protobuf::int64 value);
  
  // optional int32 update_tick = 4;
  inline bool has_update_tick() const;
  inline void clear_update_tick();
  static const int kUpdateTickFieldNumber = 4;
  inline ::google::protobuf::int32 update_tick() const;
  inline void set_update_tick(::google::protobuf::int32 value);
  
  // optional int32 act_index = 5;
  inline bool has_act_index() const;
  inline void clear_act_index();
  static const int kActIndexFieldNumber = 5;
  inline ::google::protobuf::int32 act_index() const;
  inline void set_act_index(::google::protobuf::int32 value);
  
  // optional int32 first_type = 6;
  inline bool has_first_type() const;
  inline void clear_first_type();
  static const int kFirstTypeFieldNumber = 6;
  inline ::google::protobuf::int32 first_type() const;
  inline void set_first_type(::google::protobuf::int32 value);
  
  // optional int32 second_type = 7;
  inline bool has_second_type() const;
  inline void clear_second_type();
  static const int kSecondTypeFieldNumber = 7;
  inline ::google::protobuf::int32 second_type() const;
  inline void set_second_type(::google::protobuf::int32 value);
  
  // repeated int32 open_time = 8;
  inline int open_time_size() const;
  inline void clear_open_time();
  static const int kOpenTimeFieldNumber = 8;
  inline ::google::protobuf::int32 open_time(int index) const;
  inline void set_open_time(int index, ::google::protobuf::int32 value);
  inline void add_open_time(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      open_time() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_open_time();
  
  // optional int32 reward_count = 9;
  inline bool has_reward_count() const;
  inline void clear_reward_count();
  static const int kRewardCountFieldNumber = 9;
  inline ::google::protobuf::int32 reward_count() const;
  inline void set_reward_count(::google::protobuf::int32 value);
  
  // optional string title = 10;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 10;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  
  // optional string content = 11;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 11;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  
  // optional int64 start_tick = 12;
  inline bool has_start_tick() const;
  inline void clear_start_tick();
  static const int kStartTickFieldNumber = 12;
  inline ::google::protobuf::int64 start_tick() const;
  inline void set_start_tick(::google::protobuf::int64 value);
  
  // optional int64 stop_tick = 13;
  inline bool has_stop_tick() const;
  inline void clear_stop_tick();
  static const int kStopTickFieldNumber = 13;
  inline ::google::protobuf::int64 stop_tick() const;
  inline void set_stop_tick(::google::protobuf::int64 value);
  
  // repeated int32 agent = 14;
  inline int agent_size() const;
  inline void clear_agent();
  static const int kAgentFieldNumber = 14;
  inline ::google::protobuf::int32 agent(int index) const;
  inline void set_agent(int index, ::google::protobuf::int32 value);
  inline void add_agent(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      agent() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_agent();
  
  // optional int32 priority = 15;
  inline bool has_priority() const;
  inline void clear_priority();
  static const int kPriorityFieldNumber = 15;
  inline ::google::protobuf::int32 priority() const;
  inline void set_priority(::google::protobuf::int32 value);
  
  // optional uint64 times = 16;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 16;
  inline ::google::protobuf::uint64 times() const;
  inline void set_times(::google::protobuf::uint64 value);
  
  // optional int32 icon_type = 17;
  inline bool has_icon_type() const;
  inline void clear_icon_type();
  static const int kIconTypeFieldNumber = 17;
  inline ::google::protobuf::int32 icon_type() const;
  inline void set_icon_type(::google::protobuf::int32 value);
  
  // optional int32 role_recharge = 18;
  inline bool has_role_recharge() const;
  inline void clear_role_recharge();
  static const int kRoleRechargeFieldNumber = 18;
  inline ::google::protobuf::int32 role_recharge() const;
  inline void set_role_recharge(::google::protobuf::int32 value);
  
  // optional int32 limit = 19;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 19;
  inline ::google::protobuf::int32 limit() const;
  inline void set_limit(::google::protobuf::int32 value);
  
  // optional int32 role_consume = 20;
  inline bool has_role_consume() const;
  inline void clear_role_consume();
  static const int kRoleConsumeFieldNumber = 20;
  inline ::google::protobuf::int32 role_consume() const;
  inline void set_role_consume(::google::protobuf::int32 value);
  
  // optional .PActCumulativeLogin cumulative_login = 21;
  inline bool has_cumulative_login() const;
  inline void clear_cumulative_login();
  static const int kCumulativeLoginFieldNumber = 21;
  inline const ::PActCumulativeLogin& cumulative_login() const;
  inline ::PActCumulativeLogin* mutable_cumulative_login();
  inline ::PActCumulativeLogin* release_cumulative_login();
  
  // @@protoc_insertion_point(class_scope:PActTypeItem)
 private:
  inline void set_has_sub_value();
  inline void clear_has_sub_value();
  inline void set_has_second_sub();
  inline void clear_has_second_sub();
  inline void set_has_update_tick();
  inline void clear_has_update_tick();
  inline void set_has_act_index();
  inline void clear_has_act_index();
  inline void set_has_first_type();
  inline void clear_has_first_type();
  inline void set_has_second_type();
  inline void clear_has_second_type();
  inline void set_has_reward_count();
  inline void clear_has_reward_count();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_start_tick();
  inline void clear_has_start_tick();
  inline void set_has_stop_tick();
  inline void clear_has_stop_tick();
  inline void set_has_priority();
  inline void clear_has_priority();
  inline void set_has_times();
  inline void clear_has_times();
  inline void set_has_icon_type();
  inline void clear_has_icon_type();
  inline void set_has_role_recharge();
  inline void clear_has_role_recharge();
  inline void set_has_limit();
  inline void clear_has_limit();
  inline void set_has_role_consume();
  inline void clear_has_role_consume();
  inline void set_has_cumulative_login();
  inline void clear_has_cumulative_login();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::PRewardItem > reward_info_;
  ::google::protobuf::int64 sub_value_;
  ::google::protobuf::int64 second_sub_;
  ::google::protobuf::int32 update_tick_;
  ::google::protobuf::int32 act_index_;
  ::google::protobuf::int32 first_type_;
  ::google::protobuf::int32 second_type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > open_time_;
  ::std::string* title_;
  ::std::string* content_;
  ::google::protobuf::int64 start_tick_;
  ::google::protobuf::int32 reward_count_;
  ::google::protobuf::int32 priority_;
  ::google::protobuf::int64 stop_tick_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > agent_;
  ::google::protobuf::uint64 times_;
  ::google::protobuf::int32 icon_type_;
  ::google::protobuf::int32 role_recharge_;
  ::google::protobuf::int32 limit_;
  ::google::protobuf::int32 role_consume_;
  ::PActCumulativeLogin* cumulative_login_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(21 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static PActTypeItem* default_instance_;
};
// -------------------------------------------------------------------

class PRewardItem : public ::google::protobuf::Message {
 public:
  PRewardItem();
  virtual ~PRewardItem();
  
  PRewardItem(const PRewardItem& from);
  
  inline PRewardItem& operator=(const PRewardItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PRewardItem& default_instance();
  
  void Swap(PRewardItem* other);
  
  // implements Message ----------------------------------------------
  
  PRewardItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PRewardItem& from);
  void MergeFrom(const PRewardItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string content = 1;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 1;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  
  // optional int32 reward_id = 2;
  inline bool has_reward_id() const;
  inline void clear_reward_id();
  static const int kRewardIdFieldNumber = 2;
  inline ::google::protobuf::int32 reward_id() const;
  inline void set_reward_id(::google::protobuf::int32 value);
  
  // repeated .ProtoItem reward_set = 3;
  inline int reward_set_size() const;
  inline void clear_reward_set();
  static const int kRewardSetFieldNumber = 3;
  inline const ::ProtoItem& reward_set(int index) const;
  inline ::ProtoItem* mutable_reward_set(int index);
  inline ::ProtoItem* add_reward_set();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoItem >&
      reward_set() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoItem >*
      mutable_reward_set();
  
  // optional int32 draw_flag = 4;
  inline bool has_draw_flag() const;
  inline void clear_draw_flag();
  static const int kDrawFlagFieldNumber = 4;
  inline ::google::protobuf::int32 draw_flag() const;
  inline void set_draw_flag(::google::protobuf::int32 value);
  
  // optional int32 index = 5;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 5;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // repeated int64 cond = 6;
  inline int cond_size() const;
  inline void clear_cond();
  static const int kCondFieldNumber = 6;
  inline ::google::protobuf::int64 cond(int index) const;
  inline void set_cond(int index, ::google::protobuf::int64 value);
  inline void add_cond(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      cond() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_cond();
  
  // optional int32 arrive = 7;
  inline bool has_arrive() const;
  inline void clear_arrive();
  static const int kArriveFieldNumber = 7;
  inline ::google::protobuf::int32 arrive() const;
  inline void set_arrive(::google::protobuf::int32 value);
  
  // optional int32 drawed = 8;
  inline bool has_drawed() const;
  inline void clear_drawed();
  static const int kDrawedFieldNumber = 8;
  inline ::google::protobuf::int32 drawed() const;
  inline void set_drawed(::google::protobuf::int32 value);
  
  // repeated .ProtoPairLongString role_id_name = 9;
  inline int role_id_name_size() const;
  inline void clear_role_id_name();
  static const int kRoleIdNameFieldNumber = 9;
  inline const ::ProtoPairLongString& role_id_name(int index) const;
  inline ::ProtoPairLongString* mutable_role_id_name(int index);
  inline ::ProtoPairLongString* add_role_id_name();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoPairLongString >&
      role_id_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoPairLongString >*
      mutable_role_id_name();
  
  // optional int32 brocast = 10;
  inline bool has_brocast() const;
  inline void clear_brocast();
  static const int kBrocastFieldNumber = 10;
  inline ::google::protobuf::int32 brocast() const;
  inline void set_brocast(::google::protobuf::int32 value);
  
  // optional int32 times = 11;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 11;
  inline ::google::protobuf::int32 times() const;
  inline void set_times(::google::protobuf::int32 value);
  
  // repeated .ProtoPairLong sub_map = 12;
  inline int sub_map_size() const;
  inline void clear_sub_map();
  static const int kSubMapFieldNumber = 12;
  inline const ::ProtoPairLong& sub_map(int index) const;
  inline ::ProtoPairLong* mutable_sub_map(int index);
  inline ::ProtoPairLong* add_sub_map();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoPairLong >&
      sub_map() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoPairLong >*
      mutable_sub_map();
  
  // repeated .ProtoPairLong recharge_map = 13;
  inline int recharge_map_size() const;
  inline void clear_recharge_map();
  static const int kRechargeMapFieldNumber = 13;
  inline const ::ProtoPairLong& recharge_map(int index) const;
  inline ::ProtoPairLong* mutable_recharge_map(int index);
  inline ::ProtoPairLong* add_recharge_map();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoPairLong >&
      recharge_map() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoPairLong >*
      mutable_recharge_map();
  
  // optional int32 must_reset = 14;
  inline bool has_must_reset() const;
  inline void clear_must_reset();
  static const int kMustResetFieldNumber = 14;
  inline ::google::protobuf::int32 must_reset() const;
  inline void set_must_reset(::google::protobuf::int32 value);
  
  // repeated .ProtoItem cost_item = 15;
  inline int cost_item_size() const;
  inline void clear_cost_item();
  static const int kCostItemFieldNumber = 15;
  inline const ::ProtoItem& cost_item(int index) const;
  inline ::ProtoItem* mutable_cost_item(int index);
  inline ::ProtoItem* add_cost_item();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoItem >&
      cost_item() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoItem >*
      mutable_cost_item();
  
  // repeated .ProtoItem pre_item = 16;
  inline int pre_item_size() const;
  inline void clear_pre_item();
  static const int kPreItemFieldNumber = 16;
  inline const ::ProtoItem& pre_item(int index) const;
  inline ::ProtoItem* mutable_pre_item(int index);
  inline ::ProtoItem* add_pre_item();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoItem >&
      pre_item() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoItem >*
      mutable_pre_item();
  
  // optional int32 exchange_type = 17;
  inline bool has_exchange_type() const;
  inline void clear_exchange_type();
  static const int kExchangeTypeFieldNumber = 17;
  inline ::google::protobuf::int32 exchange_type() const;
  inline void set_exchange_type(::google::protobuf::int32 value);
  
  // optional string exchange_item_name = 18;
  inline bool has_exchange_item_name() const;
  inline void clear_exchange_item_name();
  static const int kExchangeItemNameFieldNumber = 18;
  inline const ::std::string& exchange_item_name() const;
  inline void set_exchange_item_name(const ::std::string& value);
  inline void set_exchange_item_name(const char* value);
  inline void set_exchange_item_name(const char* value, size_t size);
  inline ::std::string* mutable_exchange_item_name();
  inline ::std::string* release_exchange_item_name();
  
  // optional int32 cash_coupon = 19;
  inline bool has_cash_coupon() const;
  inline void clear_cash_coupon();
  static const int kCashCouponFieldNumber = 19;
  inline ::google::protobuf::int32 cash_coupon() const;
  inline void set_cash_coupon(::google::protobuf::int32 value);
  
  // optional int64 sub_value = 20;
  inline bool has_sub_value() const;
  inline void clear_sub_value();
  static const int kSubValueFieldNumber = 20;
  inline ::google::protobuf::int64 sub_value() const;
  inline void set_sub_value(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:PRewardItem)
 private:
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_reward_id();
  inline void clear_has_reward_id();
  inline void set_has_draw_flag();
  inline void clear_has_draw_flag();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_arrive();
  inline void clear_has_arrive();
  inline void set_has_drawed();
  inline void clear_has_drawed();
  inline void set_has_brocast();
  inline void clear_has_brocast();
  inline void set_has_times();
  inline void clear_has_times();
  inline void set_has_must_reset();
  inline void clear_has_must_reset();
  inline void set_has_exchange_type();
  inline void clear_has_exchange_type();
  inline void set_has_exchange_item_name();
  inline void clear_has_exchange_item_name();
  inline void set_has_cash_coupon();
  inline void clear_has_cash_coupon();
  inline void set_has_sub_value();
  inline void clear_has_sub_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* content_;
  ::google::protobuf::RepeatedPtrField< ::ProtoItem > reward_set_;
  ::google::protobuf::int32 reward_id_;
  ::google::protobuf::int32 draw_flag_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > cond_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 arrive_;
  ::google::protobuf::RepeatedPtrField< ::ProtoPairLongString > role_id_name_;
  ::google::protobuf::int32 drawed_;
  ::google::protobuf::int32 brocast_;
  ::google::protobuf::RepeatedPtrField< ::ProtoPairLong > sub_map_;
  ::google::protobuf::int32 times_;
  ::google::protobuf::int32 must_reset_;
  ::google::protobuf::RepeatedPtrField< ::ProtoPairLong > recharge_map_;
  ::google::protobuf::RepeatedPtrField< ::ProtoItem > cost_item_;
  ::google::protobuf::RepeatedPtrField< ::ProtoItem > pre_item_;
  ::std::string* exchange_item_name_;
  ::google::protobuf::int32 exchange_type_;
  ::google::protobuf::int32 cash_coupon_;
  ::google::protobuf::int64 sub_value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(20 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static PRewardItem* default_instance_;
};
// -------------------------------------------------------------------

class ProtoGateRole : public ::google::protobuf::Message {
 public:
  ProtoGateRole();
  virtual ~ProtoGateRole();
  
  ProtoGateRole(const ProtoGateRole& from);
  
  inline ProtoGateRole& operator=(const ProtoGateRole& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoGateRole& default_instance();
  
  void Swap(ProtoGateRole* other);
  
  // implements Message ----------------------------------------------
  
  ProtoGateRole* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoGateRole& from);
  void MergeFrom(const ProtoGateRole& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int64 role_id() const;
  inline void set_role_id(::google::protobuf::int64 value);
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int32 sex = 4;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 4;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);
  
  // optional int32 career = 5;
  inline bool has_career() const;
  inline void clear_career();
  static const int kCareerFieldNumber = 5;
  inline ::google::protobuf::int32 career() const;
  inline void set_career(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoGateRole)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_career();
  inline void clear_has_career();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 role_id_;
  ::std::string* name_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 career_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoGateRole* default_instance_;
};
// -------------------------------------------------------------------

class ProtoPackageItem : public ::google::protobuf::Message {
 public:
  ProtoPackageItem();
  virtual ~ProtoPackageItem();
  
  ProtoPackageItem(const ProtoPackageItem& from);
  
  inline ProtoPackageItem& operator=(const ProtoPackageItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoPackageItem& default_instance();
  
  void Swap(ProtoPackageItem* other);
  
  // implements Message ----------------------------------------------
  
  ProtoPackageItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoPackageItem& from);
  void MergeFrom(const ProtoPackageItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 item_id = 1;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::int32 item_id() const;
  inline void set_item_id(::google::protobuf::int32 value);
  
  // optional int32 item_index = 2;
  inline bool has_item_index() const;
  inline void clear_item_index();
  static const int kItemIndexFieldNumber = 2;
  inline ::google::protobuf::int32 item_index() const;
  inline void set_item_index(::google::protobuf::int32 value);
  
  // optional int32 item_type = 3;
  inline bool has_item_type() const;
  inline void clear_item_type();
  static const int kItemTypeFieldNumber = 3;
  inline ::google::protobuf::int32 item_type() const;
  inline void set_item_type(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoPackageItem)
 private:
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_item_index();
  inline void clear_has_item_index();
  inline void set_has_item_type();
  inline void clear_has_item_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 item_id_;
  ::google::protobuf::int32 item_index_;
  ::google::protobuf::int32 item_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoPackageItem* default_instance_;
};
// -------------------------------------------------------------------

class ProtoEquipPolishAttrInfo : public ::google::protobuf::Message {
 public:
  ProtoEquipPolishAttrInfo();
  virtual ~ProtoEquipPolishAttrInfo();
  
  ProtoEquipPolishAttrInfo(const ProtoEquipPolishAttrInfo& from);
  
  inline ProtoEquipPolishAttrInfo& operator=(const ProtoEquipPolishAttrInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoEquipPolishAttrInfo& default_instance();
  
  void Swap(ProtoEquipPolishAttrInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProtoEquipPolishAttrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoEquipPolishAttrInfo& from);
  void MergeFrom(const ProtoEquipPolishAttrInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 lock_index = 1;
  inline bool has_lock_index() const;
  inline void clear_lock_index();
  static const int kLockIndexFieldNumber = 1;
  inline ::google::protobuf::int32 lock_index() const;
  inline void set_lock_index(::google::protobuf::int32 value);
  
  // optional int32 attr_type = 2;
  inline bool has_attr_type() const;
  inline void clear_attr_type();
  static const int kAttrTypeFieldNumber = 2;
  inline ::google::protobuf::int32 attr_type() const;
  inline void set_attr_type(::google::protobuf::int32 value);
  
  // optional int32 cur_value = 3;
  inline bool has_cur_value() const;
  inline void clear_cur_value();
  static const int kCurValueFieldNumber = 3;
  inline ::google::protobuf::int32 cur_value() const;
  inline void set_cur_value(::google::protobuf::int32 value);
  
  // optional int32 color = 4;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 4;
  inline ::google::protobuf::int32 color() const;
  inline void set_color(::google::protobuf::int32 value);
  
  // optional int32 max_value = 5;
  inline bool has_max_value() const;
  inline void clear_max_value();
  static const int kMaxValueFieldNumber = 5;
  inline ::google::protobuf::int32 max_value() const;
  inline void set_max_value(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoEquipPolishAttrInfo)
 private:
  inline void set_has_lock_index();
  inline void clear_has_lock_index();
  inline void set_has_attr_type();
  inline void clear_has_attr_type();
  inline void set_has_cur_value();
  inline void clear_has_cur_value();
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_max_value();
  inline void clear_has_max_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 lock_index_;
  ::google::protobuf::int32 attr_type_;
  ::google::protobuf::int32 cur_value_;
  ::google::protobuf::int32 color_;
  ::google::protobuf::int32 max_value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoEquipPolishAttrInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProtoEquipPolishStruct : public ::google::protobuf::Message {
 public:
  ProtoEquipPolishStruct();
  virtual ~ProtoEquipPolishStruct();
  
  ProtoEquipPolishStruct(const ProtoEquipPolishStruct& from);
  
  inline ProtoEquipPolishStruct& operator=(const ProtoEquipPolishStruct& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoEquipPolishStruct& default_instance();
  
  void Swap(ProtoEquipPolishStruct* other);
  
  // implements Message ----------------------------------------------
  
  ProtoEquipPolishStruct* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoEquipPolishStruct& from);
  void MergeFrom(const ProtoEquipPolishStruct& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .ProtoEquipPolishAttrInfo equip_polish_info = 1;
  inline int equip_polish_info_size() const;
  inline void clear_equip_polish_info();
  static const int kEquipPolishInfoFieldNumber = 1;
  inline const ::ProtoEquipPolishAttrInfo& equip_polish_info(int index) const;
  inline ::ProtoEquipPolishAttrInfo* mutable_equip_polish_info(int index);
  inline ::ProtoEquipPolishAttrInfo* add_equip_polish_info();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoEquipPolishAttrInfo >&
      equip_polish_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoEquipPolishAttrInfo >*
      mutable_equip_polish_info();
  
  // @@protoc_insertion_point(class_scope:ProtoEquipPolishStruct)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::ProtoEquipPolishAttrInfo > equip_polish_info_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoEquipPolishStruct* default_instance_;
};
// -------------------------------------------------------------------

class ProtoEquipPolish : public ::google::protobuf::Message {
 public:
  ProtoEquipPolish();
  virtual ~ProtoEquipPolish();
  
  ProtoEquipPolish(const ProtoEquipPolish& from);
  
  inline ProtoEquipPolish& operator=(const ProtoEquipPolish& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoEquipPolish& default_instance();
  
  void Swap(ProtoEquipPolish* other);
  
  // implements Message ----------------------------------------------
  
  ProtoEquipPolish* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoEquipPolish& from);
  void MergeFrom(const ProtoEquipPolish& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .ProtoEquipPolishStruct cur_polish_info = 1;
  inline bool has_cur_polish_info() const;
  inline void clear_cur_polish_info();
  static const int kCurPolishInfoFieldNumber = 1;
  inline const ::ProtoEquipPolishStruct& cur_polish_info() const;
  inline ::ProtoEquipPolishStruct* mutable_cur_polish_info();
  inline ::ProtoEquipPolishStruct* release_cur_polish_info();
  
  // optional .ProtoEquipPolishStruct single_polish_info = 2;
  inline bool has_single_polish_info() const;
  inline void clear_single_polish_info();
  static const int kSinglePolishInfoFieldNumber = 2;
  inline const ::ProtoEquipPolishStruct& single_polish_info() const;
  inline ::ProtoEquipPolishStruct* mutable_single_polish_info();
  inline ::ProtoEquipPolishStruct* release_single_polish_info();
  
  // repeated .ProtoEquipPolishStruct batch_polish_info = 3;
  inline int batch_polish_info_size() const;
  inline void clear_batch_polish_info();
  static const int kBatchPolishInfoFieldNumber = 3;
  inline const ::ProtoEquipPolishStruct& batch_polish_info(int index) const;
  inline ::ProtoEquipPolishStruct* mutable_batch_polish_info(int index);
  inline ::ProtoEquipPolishStruct* add_batch_polish_info();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoEquipPolishStruct >&
      batch_polish_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoEquipPolishStruct >*
      mutable_batch_polish_info();
  
  // optional int32 process_value = 4;
  inline bool has_process_value() const;
  inline void clear_process_value();
  static const int kProcessValueFieldNumber = 4;
  inline ::google::protobuf::int32 process_value() const;
  inline void set_process_value(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoEquipPolish)
 private:
  inline void set_has_cur_polish_info();
  inline void clear_has_cur_polish_info();
  inline void set_has_single_polish_info();
  inline void clear_has_single_polish_info();
  inline void set_has_process_value();
  inline void clear_has_process_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::ProtoEquipPolishStruct* cur_polish_info_;
  ::ProtoEquipPolishStruct* single_polish_info_;
  ::google::protobuf::RepeatedPtrField< ::ProtoEquipPolishStruct > batch_polish_info_;
  ::google::protobuf::int32 process_value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoEquipPolish* default_instance_;
};
// -------------------------------------------------------------------

class ProtoVipGift : public ::google::protobuf::Message {
 public:
  ProtoVipGift();
  virtual ~ProtoVipGift();
  
  ProtoVipGift(const ProtoVipGift& from);
  
  inline ProtoVipGift& operator=(const ProtoVipGift& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoVipGift& default_instance();
  
  void Swap(ProtoVipGift* other);
  
  // implements Message ----------------------------------------------
  
  ProtoVipGift* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoVipGift& from);
  void MergeFrom(const ProtoVipGift& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .ProtoItem item_list = 1;
  inline int item_list_size() const;
  inline void clear_item_list();
  static const int kItemListFieldNumber = 1;
  inline const ::ProtoItem& item_list(int index) const;
  inline ::ProtoItem* mutable_item_list(int index);
  inline ::ProtoItem* add_item_list();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoItem >&
      item_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoItem >*
      mutable_item_list();
  
  // optional int32 vip_type = 2;
  inline bool has_vip_type() const;
  inline void clear_vip_type();
  static const int kVipTypeFieldNumber = 2;
  inline ::google::protobuf::int32 vip_type() const;
  inline void set_vip_type(::google::protobuf::int32 value);
  
  // optional int32 isHasGift = 3;
  inline bool has_ishasgift() const;
  inline void clear_ishasgift();
  static const int kIsHasGiftFieldNumber = 3;
  inline ::google::protobuf::int32 ishasgift() const;
  inline void set_ishasgift(::google::protobuf::int32 value);
  
  // optional int32 reward_id = 4;
  inline bool has_reward_id() const;
  inline void clear_reward_id();
  static const int kRewardIdFieldNumber = 4;
  inline ::google::protobuf::int32 reward_id() const;
  inline void set_reward_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoVipGift)
 private:
  inline void set_has_vip_type();
  inline void clear_has_vip_type();
  inline void set_has_ishasgift();
  inline void clear_has_ishasgift();
  inline void set_has_reward_id();
  inline void clear_has_reward_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::ProtoItem > item_list_;
  ::google::protobuf::int32 vip_type_;
  ::google::protobuf::int32 ishasgift_;
  ::google::protobuf::int32 reward_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoVipGift* default_instance_;
};
// -------------------------------------------------------------------

class ProtoTrialTask : public ::google::protobuf::Message {
 public:
  ProtoTrialTask();
  virtual ~ProtoTrialTask();
  
  ProtoTrialTask(const ProtoTrialTask& from);
  
  inline ProtoTrialTask& operator=(const ProtoTrialTask& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoTrialTask& default_instance();
  
  void Swap(ProtoTrialTask* other);
  
  // implements Message ----------------------------------------------
  
  ProtoTrialTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoTrialTask& from);
  void MergeFrom(const ProtoTrialTask& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 task_id = 1;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  inline ::google::protobuf::int32 task_id() const;
  inline void set_task_id(::google::protobuf::int32 value);
  
  // optional int32 status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);
  
  // optional int32 award_exp = 3;
  inline bool has_award_exp() const;
  inline void clear_award_exp();
  static const int kAwardExpFieldNumber = 3;
  inline ::google::protobuf::int32 award_exp() const;
  inline void set_award_exp(::google::protobuf::int32 value);
  
  // optional .ProtoMoney money = 4;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 4;
  inline const ::ProtoMoney& money() const;
  inline ::ProtoMoney* mutable_money();
  inline ::ProtoMoney* release_money();
  
  // optional int32 value = 5;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 5;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);
  
  // optional int32 final_value = 6;
  inline bool has_final_value() const;
  inline void clear_final_value();
  static const int kFinalValueFieldNumber = 6;
  inline ::google::protobuf::int32 final_value() const;
  inline void set_final_value(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoTrialTask)
 private:
  inline void set_has_task_id();
  inline void clear_has_task_id();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_award_exp();
  inline void clear_has_award_exp();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_final_value();
  inline void clear_has_final_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 task_id_;
  ::google::protobuf::int32 status_;
  ::ProtoMoney* money_;
  ::google::protobuf::int32 award_exp_;
  ::google::protobuf::int32 value_;
  ::google::protobuf::int32 final_value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoTrialTask* default_instance_;
};
// -------------------------------------------------------------------

class ProtoWeddingIcon : public ::google::protobuf::Message {
 public:
  ProtoWeddingIcon();
  virtual ~ProtoWeddingIcon();
  
  ProtoWeddingIcon(const ProtoWeddingIcon& from);
  
  inline ProtoWeddingIcon& operator=(const ProtoWeddingIcon& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoWeddingIcon& default_instance();
  
  void Swap(ProtoWeddingIcon* other);
  
  // implements Message ----------------------------------------------
  
  ProtoWeddingIcon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoWeddingIcon& from);
  void MergeFrom(const ProtoWeddingIcon& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 wedding_req_id = 1;
  inline bool has_wedding_req_id() const;
  inline void clear_wedding_req_id();
  static const int kWeddingReqIdFieldNumber = 1;
  inline ::google::protobuf::int64 wedding_req_id() const;
  inline void set_wedding_req_id(::google::protobuf::int64 value);
  
  // optional string wedding_req_name = 2;
  inline bool has_wedding_req_name() const;
  inline void clear_wedding_req_name();
  static const int kWeddingReqNameFieldNumber = 2;
  inline const ::std::string& wedding_req_name() const;
  inline void set_wedding_req_name(const ::std::string& value);
  inline void set_wedding_req_name(const char* value);
  inline void set_wedding_req_name(const char* value, size_t size);
  inline ::std::string* mutable_wedding_req_name();
  inline ::std::string* release_wedding_req_name();
  
  // optional int64 wedding_partner_id = 3;
  inline bool has_wedding_partner_id() const;
  inline void clear_wedding_partner_id();
  static const int kWeddingPartnerIdFieldNumber = 3;
  inline ::google::protobuf::int64 wedding_partner_id() const;
  inline void set_wedding_partner_id(::google::protobuf::int64 value);
  
  // optional string wedding_partner_name = 4;
  inline bool has_wedding_partner_name() const;
  inline void clear_wedding_partner_name();
  static const int kWeddingPartnerNameFieldNumber = 4;
  inline const ::std::string& wedding_partner_name() const;
  inline void set_wedding_partner_name(const ::std::string& value);
  inline void set_wedding_partner_name(const char* value);
  inline void set_wedding_partner_name(const char* value, size_t size);
  inline ::std::string* mutable_wedding_partner_name();
  inline ::std::string* release_wedding_partner_name();
  
  // @@protoc_insertion_point(class_scope:ProtoWeddingIcon)
 private:
  inline void set_has_wedding_req_id();
  inline void clear_has_wedding_req_id();
  inline void set_has_wedding_req_name();
  inline void clear_has_wedding_req_name();
  inline void set_has_wedding_partner_id();
  inline void clear_has_wedding_partner_id();
  inline void set_has_wedding_partner_name();
  inline void clear_has_wedding_partner_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 wedding_req_id_;
  ::std::string* wedding_req_name_;
  ::google::protobuf::int64 wedding_partner_id_;
  ::std::string* wedding_partner_name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoWeddingIcon* default_instance_;
};
// -------------------------------------------------------------------

class ProtoShoutItem : public ::google::protobuf::Message {
 public:
  ProtoShoutItem();
  virtual ~ProtoShoutItem();
  
  ProtoShoutItem(const ProtoShoutItem& from);
  
  inline ProtoShoutItem& operator=(const ProtoShoutItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoShoutItem& default_instance();
  
  void Swap(ProtoShoutItem* other);
  
  // implements Message ----------------------------------------------
  
  ProtoShoutItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoShoutItem& from);
  void MergeFrom(const ProtoShoutItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 item_id = 1;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::int32 item_id() const;
  inline void set_item_id(::google::protobuf::int32 value);
  
  // optional string item_name = 2;
  inline bool has_item_name() const;
  inline void clear_item_name();
  static const int kItemNameFieldNumber = 2;
  inline const ::std::string& item_name() const;
  inline void set_item_name(const ::std::string& value);
  inline void set_item_name(const char* value);
  inline void set_item_name(const char* value, size_t size);
  inline ::std::string* mutable_item_name();
  inline ::std::string* release_item_name();
  
  // optional int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional bytes msg = 4;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 4;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const void* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  
  // optional int32 color = 5;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 5;
  inline ::google::protobuf::int32 color() const;
  inline void set_color(::google::protobuf::int32 value);
  
  // optional int32 item_num = 6;
  inline bool has_item_num() const;
  inline void clear_item_num();
  static const int kItemNumFieldNumber = 6;
  inline ::google::protobuf::int32 item_num() const;
  inline void set_item_num(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoShoutItem)
 private:
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_item_name();
  inline void clear_has_item_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_item_num();
  inline void clear_has_item_num();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* item_name_;
  ::google::protobuf::int32 item_id_;
  ::google::protobuf::int32 type_;
  ::std::string* msg_;
  ::google::protobuf::int32 color_;
  ::google::protobuf::int32 item_num_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoShoutItem* default_instance_;
};
// -------------------------------------------------------------------

class PActPanelInfo : public ::google::protobuf::Message {
 public:
  PActPanelInfo();
  virtual ~PActPanelInfo();
  
  PActPanelInfo(const PActPanelInfo& from);
  
  inline PActPanelInfo& operator=(const PActPanelInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PActPanelInfo& default_instance();
  
  void Swap(PActPanelInfo* other);
  
  // implements Message ----------------------------------------------
  
  PActPanelInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PActPanelInfo& from);
  void MergeFrom(const PActPanelInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 act_index = 1;
  inline bool has_act_index() const;
  inline void clear_act_index();
  static const int kActIndexFieldNumber = 1;
  inline ::google::protobuf::int32 act_index() const;
  inline void set_act_index(::google::protobuf::int32 value);
  
  // optional int32 first_type = 2;
  inline bool has_first_type() const;
  inline void clear_first_type();
  static const int kFirstTypeFieldNumber = 2;
  inline ::google::protobuf::int32 first_type() const;
  inline void set_first_type(::google::protobuf::int32 value);
  
  // optional int32 second_type = 3;
  inline bool has_second_type() const;
  inline void clear_second_type();
  static const int kSecondTypeFieldNumber = 3;
  inline ::google::protobuf::int32 second_type() const;
  inline void set_second_type(::google::protobuf::int32 value);
  
  // optional string title = 4;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 4;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  
  // optional string content = 5;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 5;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  
  // optional int64 start_tick = 6;
  inline bool has_start_tick() const;
  inline void clear_start_tick();
  static const int kStartTickFieldNumber = 6;
  inline ::google::protobuf::int64 start_tick() const;
  inline void set_start_tick(::google::protobuf::int64 value);
  
  // optional int64 end_tick = 7;
  inline bool has_end_tick() const;
  inline void clear_end_tick();
  static const int kEndTickFieldNumber = 7;
  inline ::google::protobuf::int64 end_tick() const;
  inline void set_end_tick(::google::protobuf::int64 value);
  
  // optional int32 reward_count = 8;
  inline bool has_reward_count() const;
  inline void clear_reward_count();
  static const int kRewardCountFieldNumber = 8;
  inline ::google::protobuf::int32 reward_count() const;
  inline void set_reward_count(::google::protobuf::int32 value);
  
  // optional int32 priority = 9;
  inline bool has_priority() const;
  inline void clear_priority();
  static const int kPriorityFieldNumber = 9;
  inline ::google::protobuf::int32 priority() const;
  inline void set_priority(::google::protobuf::int32 value);
  
  // optional int64 times = 10;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 10;
  inline ::google::protobuf::int64 times() const;
  inline void set_times(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:PActPanelInfo)
 private:
  inline void set_has_act_index();
  inline void clear_has_act_index();
  inline void set_has_first_type();
  inline void clear_has_first_type();
  inline void set_has_second_type();
  inline void clear_has_second_type();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_start_tick();
  inline void clear_has_start_tick();
  inline void set_has_end_tick();
  inline void clear_has_end_tick();
  inline void set_has_reward_count();
  inline void clear_has_reward_count();
  inline void set_has_priority();
  inline void clear_has_priority();
  inline void set_has_times();
  inline void clear_has_times();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 act_index_;
  ::google::protobuf::int32 first_type_;
  ::std::string* title_;
  ::std::string* content_;
  ::google::protobuf::int32 second_type_;
  ::google::protobuf::int32 reward_count_;
  ::google::protobuf::int64 start_tick_;
  ::google::protobuf::int64 end_tick_;
  ::google::protobuf::int64 times_;
  ::google::protobuf::int32 priority_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static PActPanelInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProtoLeagueStoreApply : public ::google::protobuf::Message {
 public:
  ProtoLeagueStoreApply();
  virtual ~ProtoLeagueStoreApply();
  
  ProtoLeagueStoreApply(const ProtoLeagueStoreApply& from);
  
  inline ProtoLeagueStoreApply& operator=(const ProtoLeagueStoreApply& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoLeagueStoreApply& default_instance();
  
  void Swap(ProtoLeagueStoreApply* other);
  
  // implements Message ----------------------------------------------
  
  ProtoLeagueStoreApply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoLeagueStoreApply& from);
  void MergeFrom(const ProtoLeagueStoreApply& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string role_name = 1;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 1;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  
  // optional int32 role_level = 2;
  inline bool has_role_level() const;
  inline void clear_role_level();
  static const int kRoleLevelFieldNumber = 2;
  inline ::google::protobuf::int32 role_level() const;
  inline void set_role_level(::google::protobuf::int32 value);
  
  // optional int32 contri = 3;
  inline bool has_contri() const;
  inline void clear_contri();
  static const int kContriFieldNumber = 3;
  inline ::google::protobuf::int32 contri() const;
  inline void set_contri(::google::protobuf::int32 value);
  
  // optional int32 item_id = 4;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 4;
  inline ::google::protobuf::int32 item_id() const;
  inline void set_item_id(::google::protobuf::int32 value);
  
  // optional int32 item_num = 5;
  inline bool has_item_num() const;
  inline void clear_item_num();
  static const int kItemNumFieldNumber = 5;
  inline ::google::protobuf::int32 item_num() const;
  inline void set_item_num(::google::protobuf::int32 value);
  
  // optional int64 apply_id = 6;
  inline bool has_apply_id() const;
  inline void clear_apply_id();
  static const int kApplyIdFieldNumber = 6;
  inline ::google::protobuf::int64 apply_id() const;
  inline void set_apply_id(::google::protobuf::int64 value);
  
  // optional .ProtoItem item = 7;
  inline bool has_item() const;
  inline void clear_item();
  static const int kItemFieldNumber = 7;
  inline const ::ProtoItem& item() const;
  inline ::ProtoItem* mutable_item();
  inline ::ProtoItem* release_item();
  
  // @@protoc_insertion_point(class_scope:ProtoLeagueStoreApply)
 private:
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_role_level();
  inline void clear_has_role_level();
  inline void set_has_contri();
  inline void clear_has_contri();
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_item_num();
  inline void clear_has_item_num();
  inline void set_has_apply_id();
  inline void clear_has_apply_id();
  inline void set_has_item();
  inline void clear_has_item();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* role_name_;
  ::google::protobuf::int32 role_level_;
  ::google::protobuf::int32 contri_;
  ::google::protobuf::int32 item_id_;
  ::google::protobuf::int32 item_num_;
  ::google::protobuf::int64 apply_id_;
  ::ProtoItem* item_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoLeagueStoreApply* default_instance_;
};
// -------------------------------------------------------------------

class ProtoLeagueStoreApplyHis : public ::google::protobuf::Message {
 public:
  ProtoLeagueStoreApplyHis();
  virtual ~ProtoLeagueStoreApplyHis();
  
  ProtoLeagueStoreApplyHis(const ProtoLeagueStoreApplyHis& from);
  
  inline ProtoLeagueStoreApplyHis& operator=(const ProtoLeagueStoreApplyHis& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoLeagueStoreApplyHis& default_instance();
  
  void Swap(ProtoLeagueStoreApplyHis* other);
  
  // implements Message ----------------------------------------------
  
  ProtoLeagueStoreApplyHis* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoLeagueStoreApplyHis& from);
  void MergeFrom(const ProtoLeagueStoreApplyHis& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 exec_tick = 1;
  inline bool has_exec_tick() const;
  inline void clear_exec_tick();
  static const int kExecTickFieldNumber = 1;
  inline ::google::protobuf::int64 exec_tick() const;
  inline void set_exec_tick(::google::protobuf::int64 value);
  
  // optional string exec_name = 2;
  inline bool has_exec_name() const;
  inline void clear_exec_name();
  static const int kExecNameFieldNumber = 2;
  inline const ::std::string& exec_name() const;
  inline void set_exec_name(const ::std::string& value);
  inline void set_exec_name(const char* value);
  inline void set_exec_name(const char* value, size_t size);
  inline ::std::string* mutable_exec_name();
  inline ::std::string* release_exec_name();
  
  // optional int32 item_id = 3;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 3;
  inline ::google::protobuf::int32 item_id() const;
  inline void set_item_id(::google::protobuf::int32 value);
  
  // optional int32 item_num = 4;
  inline bool has_item_num() const;
  inline void clear_item_num();
  static const int kItemNumFieldNumber = 4;
  inline ::google::protobuf::int32 item_num() const;
  inline void set_item_num(::google::protobuf::int32 value);
  
  // optional string checker_name = 5;
  inline bool has_checker_name() const;
  inline void clear_checker_name();
  static const int kCheckerNameFieldNumber = 5;
  inline const ::std::string& checker_name() const;
  inline void set_checker_name(const ::std::string& value);
  inline void set_checker_name(const char* value);
  inline void set_checker_name(const char* value, size_t size);
  inline ::std::string* mutable_checker_name();
  inline ::std::string* release_checker_name();
  
  // optional int32 exec = 6;
  inline bool has_exec() const;
  inline void clear_exec();
  static const int kExecFieldNumber = 6;
  inline ::google::protobuf::int32 exec() const;
  inline void set_exec(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoLeagueStoreApplyHis)
 private:
  inline void set_has_exec_tick();
  inline void clear_has_exec_tick();
  inline void set_has_exec_name();
  inline void clear_has_exec_name();
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_item_num();
  inline void clear_has_item_num();
  inline void set_has_checker_name();
  inline void clear_has_checker_name();
  inline void set_has_exec();
  inline void clear_has_exec();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 exec_tick_;
  ::std::string* exec_name_;
  ::google::protobuf::int32 item_id_;
  ::google::protobuf::int32 item_num_;
  ::std::string* checker_name_;
  ::google::protobuf::int32 exec_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoLeagueStoreApplyHis* default_instance_;
};
// -------------------------------------------------------------------

class ProtoActRewardItem : public ::google::protobuf::Message {
 public:
  ProtoActRewardItem();
  virtual ~ProtoActRewardItem();
  
  ProtoActRewardItem(const ProtoActRewardItem& from);
  
  inline ProtoActRewardItem& operator=(const ProtoActRewardItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoActRewardItem& default_instance();
  
  void Swap(ProtoActRewardItem* other);
  
  // implements Message ----------------------------------------------
  
  ProtoActRewardItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoActRewardItem& from);
  void MergeFrom(const ProtoActRewardItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // optional int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoActRewardItem)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_count();
  inline void clear_has_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoActRewardItem* default_instance_;
};
// -------------------------------------------------------------------

class ProtoActRoleReward : public ::google::protobuf::Message {
 public:
  ProtoActRoleReward();
  virtual ~ProtoActRoleReward();
  
  ProtoActRoleReward(const ProtoActRoleReward& from);
  
  inline ProtoActRoleReward& operator=(const ProtoActRoleReward& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoActRoleReward& default_instance();
  
  void Swap(ProtoActRoleReward* other);
  
  // implements Message ----------------------------------------------
  
  ProtoActRoleReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoActRoleReward& from);
  void MergeFrom(const ProtoActRoleReward& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .ProtoActRewardItem drawed_set = 1;
  inline int drawed_set_size() const;
  inline void clear_drawed_set();
  static const int kDrawedSetFieldNumber = 1;
  inline const ::ProtoActRewardItem& drawed_set(int index) const;
  inline ::ProtoActRewardItem* mutable_drawed_set(int index);
  inline ::ProtoActRewardItem* add_drawed_set();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoActRewardItem >&
      drawed_set() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoActRewardItem >*
      mutable_drawed_set();
  
  // optional int64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::int64 role_id() const;
  inline void set_role_id(::google::protobuf::int64 value);
  
  // optional int32 carrer = 3;
  inline bool has_carrer() const;
  inline void clear_carrer();
  static const int kCarrerFieldNumber = 3;
  inline ::google::protobuf::int32 carrer() const;
  inline void set_carrer(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoActRoleReward)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_carrer();
  inline void clear_has_carrer();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::ProtoActRewardItem > drawed_set_;
  ::google::protobuf::int64 role_id_;
  ::google::protobuf::int32 carrer_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoActRoleReward* default_instance_;
};
// -------------------------------------------------------------------

class ProtoPairLongString : public ::google::protobuf::Message {
 public:
  ProtoPairLongString();
  virtual ~ProtoPairLongString();
  
  ProtoPairLongString(const ProtoPairLongString& from);
  
  inline ProtoPairLongString& operator=(const ProtoPairLongString& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoPairLongString& default_instance();
  
  void Swap(ProtoPairLongString* other);
  
  // implements Message ----------------------------------------------
  
  ProtoPairLongString* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoPairLongString& from);
  void MergeFrom(const ProtoPairLongString& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 data_int64 = 1;
  inline bool has_data_int64() const;
  inline void clear_data_int64();
  static const int kDataInt64FieldNumber = 1;
  inline ::google::protobuf::int64 data_int64() const;
  inline void set_data_int64(::google::protobuf::int64 value);
  
  // optional string data_string = 2;
  inline bool has_data_string() const;
  inline void clear_data_string();
  static const int kDataStringFieldNumber = 2;
  inline const ::std::string& data_string() const;
  inline void set_data_string(const ::std::string& value);
  inline void set_data_string(const char* value);
  inline void set_data_string(const char* value, size_t size);
  inline ::std::string* mutable_data_string();
  inline ::std::string* release_data_string();
  
  // optional string league = 3;
  inline bool has_league() const;
  inline void clear_league();
  static const int kLeagueFieldNumber = 3;
  inline const ::std::string& league() const;
  inline void set_league(const ::std::string& value);
  inline void set_league(const char* value);
  inline void set_league(const char* value, size_t size);
  inline ::std::string* mutable_league();
  inline ::std::string* release_league();
  
  // @@protoc_insertion_point(class_scope:ProtoPairLongString)
 private:
  inline void set_has_data_int64();
  inline void clear_has_data_int64();
  inline void set_has_data_string();
  inline void clear_has_data_string();
  inline void set_has_league();
  inline void clear_has_league();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 data_int64_;
  ::std::string* data_string_;
  ::std::string* league_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoPairLongString* default_instance_;
};
// -------------------------------------------------------------------

class ProtoPairLong : public ::google::protobuf::Message {
 public:
  ProtoPairLong();
  virtual ~ProtoPairLong();
  
  ProtoPairLong(const ProtoPairLong& from);
  
  inline ProtoPairLong& operator=(const ProtoPairLong& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoPairLong& default_instance();
  
  void Swap(ProtoPairLong* other);
  
  // implements Message ----------------------------------------------
  
  ProtoPairLong* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoPairLong& from);
  void MergeFrom(const ProtoPairLong& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 obj_id = 1;
  inline bool has_obj_id() const;
  inline void clear_obj_id();
  static const int kObjIdFieldNumber = 1;
  inline ::google::protobuf::int64 obj_id() const;
  inline void set_obj_id(::google::protobuf::int64 value);
  
  // optional int64 obj_value = 2;
  inline bool has_obj_value() const;
  inline void clear_obj_value();
  static const int kObjValueFieldNumber = 2;
  inline ::google::protobuf::int64 obj_value() const;
  inline void set_obj_value(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:ProtoPairLong)
 private:
  inline void set_has_obj_id();
  inline void clear_has_obj_id();
  inline void set_has_obj_value();
  inline void clear_has_obj_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 obj_id_;
  ::google::protobuf::int64 obj_value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoPairLong* default_instance_;
};
// -------------------------------------------------------------------

class ProtoActRewardNotify : public ::google::protobuf::Message {
 public:
  ProtoActRewardNotify();
  virtual ~ProtoActRewardNotify();
  
  ProtoActRewardNotify(const ProtoActRewardNotify& from);
  
  inline ProtoActRewardNotify& operator=(const ProtoActRewardNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoActRewardNotify& default_instance();
  
  void Swap(ProtoActRewardNotify* other);
  
  // implements Message ----------------------------------------------
  
  ProtoActRewardNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoActRewardNotify& from);
  void MergeFrom(const ProtoActRewardNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 priority = 1;
  inline bool has_priority() const;
  inline void clear_priority();
  static const int kPriorityFieldNumber = 1;
  inline ::google::protobuf::int32 priority() const;
  inline void set_priority(::google::protobuf::int32 value);
  
  // repeated int32 act_index = 2;
  inline int act_index_size() const;
  inline void clear_act_index();
  static const int kActIndexFieldNumber = 2;
  inline ::google::protobuf::int32 act_index(int index) const;
  inline void set_act_index(int index, ::google::protobuf::int32 value);
  inline void add_act_index(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      act_index() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_act_index();
  
  // @@protoc_insertion_point(class_scope:ProtoActRewardNotify)
 private:
  inline void set_has_priority();
  inline void clear_has_priority();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > act_index_;
  ::google::protobuf::int32 priority_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoActRewardNotify* default_instance_;
};
// -------------------------------------------------------------------

class ProtoNearRole : public ::google::protobuf::Message {
 public:
  ProtoNearRole();
  virtual ~ProtoNearRole();
  
  ProtoNearRole(const ProtoNearRole& from);
  
  inline ProtoNearRole& operator=(const ProtoNearRole& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoNearRole& default_instance();
  
  void Swap(ProtoNearRole* other);
  
  // implements Message ----------------------------------------------
  
  ProtoNearRole* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoNearRole& from);
  void MergeFrom(const ProtoNearRole& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int64 role_id() const;
  inline void set_role_id(::google::protobuf::int64 value);
  
  // optional string role_name = 2;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 2;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  
  // optional int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional .ProtoCoord location = 4;
  inline bool has_location() const;
  inline void clear_location();
  static const int kLocationFieldNumber = 4;
  inline const ::ProtoCoord& location() const;
  inline ::ProtoCoord* mutable_location();
  inline ::ProtoCoord* release_location();
  
  // optional int32 name_color = 5;
  inline bool has_name_color() const;
  inline void clear_name_color();
  static const int kNameColorFieldNumber = 5;
  inline ::google::protobuf::int32 name_color() const;
  inline void set_name_color(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoNearRole)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_location();
  inline void clear_has_location();
  inline void set_has_name_color();
  inline void clear_has_name_color();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 role_id_;
  ::std::string* role_name_;
  ::ProtoCoord* location_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 name_color_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoNearRole* default_instance_;
};
// -------------------------------------------------------------------

class ProtoTravelTeam : public ::google::protobuf::Message {
 public:
  ProtoTravelTeam();
  virtual ~ProtoTravelTeam();
  
  ProtoTravelTeam(const ProtoTravelTeam& from);
  
  inline ProtoTravelTeam& operator=(const ProtoTravelTeam& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoTravelTeam& default_instance();
  
  void Swap(ProtoTravelTeam* other);
  
  // implements Message ----------------------------------------------
  
  ProtoTravelTeam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoTravelTeam& from);
  void MergeFrom(const ProtoTravelTeam& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 team_id = 1;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  inline ::google::protobuf::int64 team_id() const;
  inline void set_team_id(::google::protobuf::int64 value);
  
  // optional string team_name = 2;
  inline bool has_team_name() const;
  inline void clear_team_name();
  static const int kTeamNameFieldNumber = 2;
  inline const ::std::string& team_name() const;
  inline void set_team_name(const ::std::string& value);
  inline void set_team_name(const char* value);
  inline void set_team_name(const char* value, size_t size);
  inline ::std::string* mutable_team_name();
  inline ::std::string* release_team_name();
  
  // optional int64 leader_id = 3;
  inline bool has_leader_id() const;
  inline void clear_leader_id();
  static const int kLeaderIdFieldNumber = 3;
  inline ::google::protobuf::int64 leader_id() const;
  inline void set_leader_id(::google::protobuf::int64 value);
  
  // optional string leader_name = 4;
  inline bool has_leader_name() const;
  inline void clear_leader_name();
  static const int kLeaderNameFieldNumber = 4;
  inline const ::std::string& leader_name() const;
  inline void set_leader_name(const ::std::string& value);
  inline void set_leader_name(const char* value);
  inline void set_leader_name(const char* value, size_t size);
  inline ::std::string* mutable_leader_name();
  inline ::std::string* release_leader_name();
  
  // optional int32 teamer_amount = 5;
  inline bool has_teamer_amount() const;
  inline void clear_teamer_amount();
  static const int kTeamerAmountFieldNumber = 5;
  inline ::google::protobuf::int32 teamer_amount() const;
  inline void set_teamer_amount(::google::protobuf::int32 value);
  
  // optional int32 team_force = 6;
  inline bool has_team_force() const;
  inline void clear_team_force();
  static const int kTeamForceFieldNumber = 6;
  inline ::google::protobuf::int32 team_force() const;
  inline void set_team_force(::google::protobuf::int32 value);
  
  // optional int32 scene_id = 7;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 7;
  inline ::google::protobuf::int32 scene_id() const;
  inline void set_scene_id(::google::protobuf::int32 value);
  
  // optional int32 sceret_flag = 8;
  inline bool has_sceret_flag() const;
  inline void clear_sceret_flag();
  static const int kSceretFlagFieldNumber = 8;
  inline ::google::protobuf::int32 sceret_flag() const;
  inline void set_sceret_flag(::google::protobuf::int32 value);
  
  // optional int32 limit_force = 9;
  inline bool has_limit_force() const;
  inline void clear_limit_force();
  static const int kLimitForceFieldNumber = 9;
  inline ::google::protobuf::int32 limit_force() const;
  inline void set_limit_force(::google::protobuf::int32 value);
  
  // optional int32 auto_start = 10;
  inline bool has_auto_start() const;
  inline void clear_auto_start();
  static const int kAutoStartFieldNumber = 10;
  inline ::google::protobuf::int32 auto_start() const;
  inline void set_auto_start(::google::protobuf::int32 value);
  
  // optional int32 start_fb = 11;
  inline bool has_start_fb() const;
  inline void clear_start_fb();
  static const int kStartFbFieldNumber = 11;
  inline ::google::protobuf::int32 start_fb() const;
  inline void set_start_fb(::google::protobuf::int32 value);
  
  // repeated int64 teamer_id = 12;
  inline int teamer_id_size() const;
  inline void clear_teamer_id();
  static const int kTeamerIdFieldNumber = 12;
  inline ::google::protobuf::int64 teamer_id(int index) const;
  inline void set_teamer_id(int index, ::google::protobuf::int64 value);
  inline void add_teamer_id(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      teamer_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_teamer_id();
  
  // optional int32 is_apply = 13;
  inline bool has_is_apply() const;
  inline void clear_is_apply();
  static const int kIsApplyFieldNumber = 13;
  inline ::google::protobuf::int32 is_apply() const;
  inline void set_is_apply(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoTravelTeam)
 private:
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_team_name();
  inline void clear_has_team_name();
  inline void set_has_leader_id();
  inline void clear_has_leader_id();
  inline void set_has_leader_name();
  inline void clear_has_leader_name();
  inline void set_has_teamer_amount();
  inline void clear_has_teamer_amount();
  inline void set_has_team_force();
  inline void clear_has_team_force();
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_sceret_flag();
  inline void clear_has_sceret_flag();
  inline void set_has_limit_force();
  inline void clear_has_limit_force();
  inline void set_has_auto_start();
  inline void clear_has_auto_start();
  inline void set_has_start_fb();
  inline void clear_has_start_fb();
  inline void set_has_is_apply();
  inline void clear_has_is_apply();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 team_id_;
  ::std::string* team_name_;
  ::google::protobuf::int64 leader_id_;
  ::std::string* leader_name_;
  ::google::protobuf::int32 teamer_amount_;
  ::google::protobuf::int32 team_force_;
  ::google::protobuf::int32 scene_id_;
  ::google::protobuf::int32 sceret_flag_;
  ::google::protobuf::int32 limit_force_;
  ::google::protobuf::int32 auto_start_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > teamer_id_;
  ::google::protobuf::int32 start_fb_;
  ::google::protobuf::int32 is_apply_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoTravelTeam* default_instance_;
};
// -------------------------------------------------------------------

class ProtoBrotherInfo : public ::google::protobuf::Message {
 public:
  ProtoBrotherInfo();
  virtual ~ProtoBrotherInfo();
  
  ProtoBrotherInfo(const ProtoBrotherInfo& from);
  
  inline ProtoBrotherInfo& operator=(const ProtoBrotherInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoBrotherInfo& default_instance();
  
  void Swap(ProtoBrotherInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProtoBrotherInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoBrotherInfo& from);
  void MergeFrom(const ProtoBrotherInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int64 role_id() const;
  inline void set_role_id(::google::protobuf::int64 value);
  
  // optional string role_name = 2;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 2;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  
  // optional int32 role_career = 3;
  inline bool has_role_career() const;
  inline void clear_role_career();
  static const int kRoleCareerFieldNumber = 3;
  inline ::google::protobuf::int32 role_career() const;
  inline void set_role_career(::google::protobuf::int32 value);
  
  // optional int32 role_level = 4;
  inline bool has_role_level() const;
  inline void clear_role_level();
  static const int kRoleLevelFieldNumber = 4;
  inline ::google::protobuf::int32 role_level() const;
  inline void set_role_level(::google::protobuf::int32 value);
  
  // optional int32 emotion = 5;
  inline bool has_emotion() const;
  inline void clear_emotion();
  static const int kEmotionFieldNumber = 5;
  inline ::google::protobuf::int32 emotion() const;
  inline void set_emotion(::google::protobuf::int32 value);
  
  // optional int32 online = 6;
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnlineFieldNumber = 6;
  inline ::google::protobuf::int32 online() const;
  inline void set_online(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoBrotherInfo)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_role_career();
  inline void clear_has_role_career();
  inline void set_has_role_level();
  inline void clear_has_role_level();
  inline void set_has_emotion();
  inline void clear_has_emotion();
  inline void set_has_online();
  inline void clear_has_online();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 role_id_;
  ::std::string* role_name_;
  ::google::protobuf::int32 role_career_;
  ::google::protobuf::int32 role_level_;
  ::google::protobuf::int32 emotion_;
  ::google::protobuf::int32 online_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoBrotherInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProtoBrotherTask : public ::google::protobuf::Message {
 public:
  ProtoBrotherTask();
  virtual ~ProtoBrotherTask();
  
  ProtoBrotherTask(const ProtoBrotherTask& from);
  
  inline ProtoBrotherTask& operator=(const ProtoBrotherTask& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoBrotherTask& default_instance();
  
  void Swap(ProtoBrotherTask* other);
  
  // implements Message ----------------------------------------------
  
  ProtoBrotherTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoBrotherTask& from);
  void MergeFrom(const ProtoBrotherTask& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 task_id = 1;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  inline ::google::protobuf::int32 task_id() const;
  inline void set_task_id(::google::protobuf::int32 value);
  
  // optional int32 finished_num = 2;
  inline bool has_finished_num() const;
  inline void clear_finished_num();
  static const int kFinishedNumFieldNumber = 2;
  inline ::google::protobuf::int32 finished_num() const;
  inline void set_finished_num(::google::protobuf::int32 value);
  
  // repeated int32 finished_player = 3;
  inline int finished_player_size() const;
  inline void clear_finished_player();
  static const int kFinishedPlayerFieldNumber = 3;
  inline ::google::protobuf::int32 finished_player(int index) const;
  inline void set_finished_player(int index, ::google::protobuf::int32 value);
  inline void add_finished_player(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      finished_player() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_finished_player();
  
  // @@protoc_insertion_point(class_scope:ProtoBrotherTask)
 private:
  inline void set_has_task_id();
  inline void clear_has_task_id();
  inline void set_has_finished_num();
  inline void clear_has_finished_num();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 task_id_;
  ::google::protobuf::int32 finished_num_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > finished_player_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoBrotherTask* default_instance_;
};
// -------------------------------------------------------------------

class ProtoMagicWeapon : public ::google::protobuf::Message {
 public:
  ProtoMagicWeapon();
  virtual ~ProtoMagicWeapon();
  
  ProtoMagicWeapon(const ProtoMagicWeapon& from);
  
  inline ProtoMagicWeapon& operator=(const ProtoMagicWeapon& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoMagicWeapon& default_instance();
  
  void Swap(ProtoMagicWeapon* other);
  
  // implements Message ----------------------------------------------
  
  ProtoMagicWeapon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoMagicWeapon& from);
  void MergeFrom(const ProtoMagicWeapon& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 magicweapon_id = 1;
  inline bool has_magicweapon_id() const;
  inline void clear_magicweapon_id();
  static const int kMagicweaponIdFieldNumber = 1;
  inline ::google::protobuf::int32 magicweapon_id() const;
  inline void set_magicweapon_id(::google::protobuf::int32 value);
  
  // optional int32 rank_star_grade = 2;
  inline bool has_rank_star_grade() const;
  inline void clear_rank_star_grade();
  static const int kRankStarGradeFieldNumber = 2;
  inline ::google::protobuf::int32 rank_star_grade() const;
  inline void set_rank_star_grade(::google::protobuf::int32 value);
  
  // optional int32 rank_star_progress = 3;
  inline bool has_rank_star_progress() const;
  inline void clear_rank_star_progress();
  static const int kRankStarProgressFieldNumber = 3;
  inline ::google::protobuf::int32 rank_star_progress() const;
  inline void set_rank_star_progress(::google::protobuf::int32 value);
  
  // optional int32 skill_id = 4;
  inline bool has_skill_id() const;
  inline void clear_skill_id();
  static const int kSkillIdFieldNumber = 4;
  inline ::google::protobuf::int32 skill_id() const;
  inline void set_skill_id(::google::protobuf::int32 value);
  
  // optional int32 skill_level = 5;
  inline bool has_skill_level() const;
  inline void clear_skill_level();
  static const int kSkillLevelFieldNumber = 5;
  inline ::google::protobuf::int32 skill_level() const;
  inline void set_skill_level(::google::protobuf::int32 value);
  
  // optional int32 qua_star_grade = 6;
  inline bool has_qua_star_grade() const;
  inline void clear_qua_star_grade();
  static const int kQuaStarGradeFieldNumber = 6;
  inline ::google::protobuf::int32 qua_star_grade() const;
  inline void set_qua_star_grade(::google::protobuf::int32 value);
  
  // optional int32 qua_star_progress = 7;
  inline bool has_qua_star_progress() const;
  inline void clear_qua_star_progress();
  static const int kQuaStarProgressFieldNumber = 7;
  inline ::google::protobuf::int32 qua_star_progress() const;
  inline void set_qua_star_progress(::google::protobuf::int32 value);
  
  // optional int32 activate_state = 8;
  inline bool has_activate_state() const;
  inline void clear_activate_state();
  static const int kActivateStateFieldNumber = 8;
  inline ::google::protobuf::int32 activate_state() const;
  inline void set_activate_state(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoMagicWeapon)
 private:
  inline void set_has_magicweapon_id();
  inline void clear_has_magicweapon_id();
  inline void set_has_rank_star_grade();
  inline void clear_has_rank_star_grade();
  inline void set_has_rank_star_progress();
  inline void clear_has_rank_star_progress();
  inline void set_has_skill_id();
  inline void clear_has_skill_id();
  inline void set_has_skill_level();
  inline void clear_has_skill_level();
  inline void set_has_qua_star_grade();
  inline void clear_has_qua_star_grade();
  inline void set_has_qua_star_progress();
  inline void clear_has_qua_star_progress();
  inline void set_has_activate_state();
  inline void clear_has_activate_state();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 magicweapon_id_;
  ::google::protobuf::int32 rank_star_grade_;
  ::google::protobuf::int32 rank_star_progress_;
  ::google::protobuf::int32 skill_id_;
  ::google::protobuf::int32 skill_level_;
  ::google::protobuf::int32 qua_star_grade_;
  ::google::protobuf::int32 qua_star_progress_;
  ::google::protobuf::int32 activate_state_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoMagicWeapon* default_instance_;
};
// -------------------------------------------------------------------

class ProtoAIllusion : public ::google::protobuf::Message {
 public:
  ProtoAIllusion();
  virtual ~ProtoAIllusion();
  
  ProtoAIllusion(const ProtoAIllusion& from);
  
  inline ProtoAIllusion& operator=(const ProtoAIllusion& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoAIllusion& default_instance();
  
  void Swap(ProtoAIllusion* other);
  
  // implements Message ----------------------------------------------
  
  ProtoAIllusion* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoAIllusion& from);
  void MergeFrom(const ProtoAIllusion& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional bool unlock = 2;
  inline bool has_unlock() const;
  inline void clear_unlock();
  static const int kUnlockFieldNumber = 2;
  inline bool unlock() const;
  inline void set_unlock(bool value);
  
  // optional int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional int32 last_sec = 4;
  inline bool has_last_sec() const;
  inline void clear_last_sec();
  static const int kLastSecFieldNumber = 4;
  inline ::google::protobuf::int32 last_sec() const;
  inline void set_last_sec(::google::protobuf::int32 value);
  
  // optional int32 unlock_type = 5;
  inline bool has_unlock_type() const;
  inline void clear_unlock_type();
  static const int kUnlockTypeFieldNumber = 5;
  inline ::google::protobuf::int32 unlock_type() const;
  inline void set_unlock_type(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoAIllusion)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_unlock();
  inline void clear_has_unlock();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_last_sec();
  inline void clear_has_last_sec();
  inline void set_has_unlock_type();
  inline void clear_has_unlock_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  bool unlock_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 last_sec_;
  ::google::protobuf::int32 unlock_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoAIllusion* default_instance_;
};
// -------------------------------------------------------------------

class ProtoTravelTeamer : public ::google::protobuf::Message {
 public:
  ProtoTravelTeamer();
  virtual ~ProtoTravelTeamer();
  
  ProtoTravelTeamer(const ProtoTravelTeamer& from);
  
  inline ProtoTravelTeamer& operator=(const ProtoTravelTeamer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoTravelTeamer& default_instance();
  
  void Swap(ProtoTravelTeamer* other);
  
  // implements Message ----------------------------------------------
  
  ProtoTravelTeamer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoTravelTeamer& from);
  void MergeFrom(const ProtoTravelTeamer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int64 role_id() const;
  inline void set_role_id(::google::protobuf::int64 value);
  
  // optional string role_name = 2;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 2;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  
  // optional int32 role_sex = 3;
  inline bool has_role_sex() const;
  inline void clear_role_sex();
  static const int kRoleSexFieldNumber = 3;
  inline ::google::protobuf::int32 role_sex() const;
  inline void set_role_sex(::google::protobuf::int32 value);
  
  // optional int32 role_career = 4;
  inline bool has_role_career() const;
  inline void clear_role_career();
  static const int kRoleCareerFieldNumber = 4;
  inline ::google::protobuf::int32 role_career() const;
  inline void set_role_career(::google::protobuf::int32 value);
  
  // optional int32 left_blood = 5;
  inline bool has_left_blood() const;
  inline void clear_left_blood();
  static const int kLeftBloodFieldNumber = 5;
  inline ::google::protobuf::int32 left_blood() const;
  inline void set_left_blood(::google::protobuf::int32 value);
  
  // optional int32 total_blood = 6;
  inline bool has_total_blood() const;
  inline void clear_total_blood();
  static const int kTotalBloodFieldNumber = 6;
  inline ::google::protobuf::int32 total_blood() const;
  inline void set_total_blood(::google::protobuf::int32 value);
  
  // optional int32 left_magic = 7;
  inline bool has_left_magic() const;
  inline void clear_left_magic();
  static const int kLeftMagicFieldNumber = 7;
  inline ::google::protobuf::int32 left_magic() const;
  inline void set_left_magic(::google::protobuf::int32 value);
  
  // optional int32 total_magic = 8;
  inline bool has_total_magic() const;
  inline void clear_total_magic();
  static const int kTotalMagicFieldNumber = 8;
  inline ::google::protobuf::int32 total_magic() const;
  inline void set_total_magic(::google::protobuf::int32 value);
  
  // optional int32 level = 9;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 9;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int32 fight_force = 10;
  inline bool has_fight_force() const;
  inline void clear_fight_force();
  static const int kFightForceFieldNumber = 10;
  inline ::google::protobuf::int32 fight_force() const;
  inline void set_fight_force(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoTravelTeamer)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_role_sex();
  inline void clear_has_role_sex();
  inline void set_has_role_career();
  inline void clear_has_role_career();
  inline void set_has_left_blood();
  inline void clear_has_left_blood();
  inline void set_has_total_blood();
  inline void clear_has_total_blood();
  inline void set_has_left_magic();
  inline void clear_has_left_magic();
  inline void set_has_total_magic();
  inline void clear_has_total_magic();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_fight_force();
  inline void clear_has_fight_force();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 role_id_;
  ::std::string* role_name_;
  ::google::protobuf::int32 role_sex_;
  ::google::protobuf::int32 role_career_;
  ::google::protobuf::int32 left_blood_;
  ::google::protobuf::int32 total_blood_;
  ::google::protobuf::int32 left_magic_;
  ::google::protobuf::int32 total_magic_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 fight_force_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoTravelTeamer* default_instance_;
};
// -------------------------------------------------------------------

class ProtoPromotTeam : public ::google::protobuf::Message {
 public:
  ProtoPromotTeam();
  virtual ~ProtoPromotTeam();
  
  ProtoPromotTeam(const ProtoPromotTeam& from);
  
  inline ProtoPromotTeam& operator=(const ProtoPromotTeam& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoPromotTeam& default_instance();
  
  void Swap(ProtoPromotTeam* other);
  
  // implements Message ----------------------------------------------
  
  ProtoPromotTeam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoPromotTeam& from);
  void MergeFrom(const ProtoPromotTeam& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 team_id = 1;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  inline ::google::protobuf::int64 team_id() const;
  inline void set_team_id(::google::protobuf::int64 value);
  
  // optional string team_name = 2;
  inline bool has_team_name() const;
  inline void clear_team_name();
  static const int kTeamNameFieldNumber = 2;
  inline const ::std::string& team_name() const;
  inline void set_team_name(const ::std::string& value);
  inline void set_team_name(const char* value);
  inline void set_team_name(const char* value, size_t size);
  inline ::std::string* mutable_team_name();
  inline ::std::string* release_team_name();
  
  // optional string server_prev = 3;
  inline bool has_server_prev() const;
  inline void clear_server_prev();
  static const int kServerPrevFieldNumber = 3;
  inline const ::std::string& server_prev() const;
  inline void set_server_prev(const ::std::string& value);
  inline void set_server_prev(const char* value);
  inline void set_server_prev(const char* value, size_t size);
  inline ::std::string* mutable_server_prev();
  inline ::std::string* release_server_prev();
  
  // optional int32 is_bet = 4;
  inline bool has_is_bet() const;
  inline void clear_is_bet();
  static const int kIsBetFieldNumber = 4;
  inline ::google::protobuf::int32 is_bet() const;
  inline void set_is_bet(::google::protobuf::int32 value);
  
  // optional int32 is_promot_turns = 5;
  inline bool has_is_promot_turns() const;
  inline void clear_is_promot_turns();
  static const int kIsPromotTurnsFieldNumber = 5;
  inline ::google::protobuf::int32 is_promot_turns() const;
  inline void set_is_promot_turns(::google::protobuf::int32 value);
  
  // optional int32 is_next_turns = 6;
  inline bool has_is_next_turns() const;
  inline void clear_is_next_turns();
  static const int kIsNextTurnsFieldNumber = 6;
  inline ::google::protobuf::int32 is_next_turns() const;
  inline void set_is_next_turns(::google::protobuf::int32 value);
  
  // optional int32 team_icon = 7;
  inline bool has_team_icon() const;
  inline void clear_team_icon();
  static const int kTeamIconFieldNumber = 7;
  inline ::google::protobuf::int32 team_icon() const;
  inline void set_team_icon(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoPromotTeam)
 private:
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_team_name();
  inline void clear_has_team_name();
  inline void set_has_server_prev();
  inline void clear_has_server_prev();
  inline void set_has_is_bet();
  inline void clear_has_is_bet();
  inline void set_has_is_promot_turns();
  inline void clear_has_is_promot_turns();
  inline void set_has_is_next_turns();
  inline void clear_has_is_next_turns();
  inline void set_has_team_icon();
  inline void clear_has_team_icon();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 team_id_;
  ::std::string* team_name_;
  ::std::string* server_prev_;
  ::google::protobuf::int32 is_bet_;
  ::google::protobuf::int32 is_promot_turns_;
  ::google::protobuf::int32 is_next_turns_;
  ::google::protobuf::int32 team_icon_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoPromotTeam* default_instance_;
};
// -------------------------------------------------------------------

class ProtoTravelPeakBet : public ::google::protobuf::Message {
 public:
  ProtoTravelPeakBet();
  virtual ~ProtoTravelPeakBet();
  
  ProtoTravelPeakBet(const ProtoTravelPeakBet& from);
  
  inline ProtoTravelPeakBet& operator=(const ProtoTravelPeakBet& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoTravelPeakBet& default_instance();
  
  void Swap(ProtoTravelPeakBet* other);
  
  // implements Message ----------------------------------------------
  
  ProtoTravelPeakBet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoTravelPeakBet& from);
  void MergeFrom(const ProtoTravelPeakBet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 promot_turns = 1;
  inline bool has_promot_turns() const;
  inline void clear_promot_turns();
  static const int kPromotTurnsFieldNumber = 1;
  inline ::google::protobuf::int32 promot_turns() const;
  inline void set_promot_turns(::google::protobuf::int32 value);
  
  // optional int64 team_id = 2;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 2;
  inline ::google::protobuf::int64 team_id() const;
  inline void set_team_id(::google::protobuf::int64 value);
  
  // optional string team_name = 3;
  inline bool has_team_name() const;
  inline void clear_team_name();
  static const int kTeamNameFieldNumber = 3;
  inline const ::std::string& team_name() const;
  inline void set_team_name(const ::std::string& value);
  inline void set_team_name(const char* value);
  inline void set_team_name(const char* value, size_t size);
  inline ::std::string* mutable_team_name();
  inline ::std::string* release_team_name();
  
  // optional string server_prev = 4;
  inline bool has_server_prev() const;
  inline void clear_server_prev();
  static const int kServerPrevFieldNumber = 4;
  inline const ::std::string& server_prev() const;
  inline void set_server_prev(const ::std::string& value);
  inline void set_server_prev(const char* value);
  inline void set_server_prev(const char* value, size_t size);
  inline ::std::string* mutable_server_prev();
  inline ::std::string* release_server_prev();
  
  // optional int32 copper = 5;
  inline bool has_copper() const;
  inline void clear_copper();
  static const int kCopperFieldNumber = 5;
  inline ::google::protobuf::int32 copper() const;
  inline void set_copper(::google::protobuf::int32 value);
  
  // optional int32 state = 6;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 6;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoTravelPeakBet)
 private:
  inline void set_has_promot_turns();
  inline void clear_has_promot_turns();
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_team_name();
  inline void clear_has_team_name();
  inline void set_has_server_prev();
  inline void clear_has_server_prev();
  inline void set_has_copper();
  inline void clear_has_copper();
  inline void set_has_state();
  inline void clear_has_state();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 team_id_;
  ::std::string* team_name_;
  ::google::protobuf::int32 promot_turns_;
  ::google::protobuf::int32 copper_;
  ::std::string* server_prev_;
  ::google::protobuf::int32 state_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoTravelPeakBet* default_instance_;
};
// -------------------------------------------------------------------

class ProtoMilitaryExploits : public ::google::protobuf::Message {
 public:
  ProtoMilitaryExploits();
  virtual ~ProtoMilitaryExploits();
  
  ProtoMilitaryExploits(const ProtoMilitaryExploits& from);
  
  inline ProtoMilitaryExploits& operator=(const ProtoMilitaryExploits& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoMilitaryExploits& default_instance();
  
  void Swap(ProtoMilitaryExploits* other);
  
  // implements Message ----------------------------------------------
  
  ProtoMilitaryExploits* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoMilitaryExploits& from);
  void MergeFrom(const ProtoMilitaryExploits& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional int64 team_id = 2;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 2;
  inline ::google::protobuf::int64 team_id() const;
  inline void set_team_id(::google::protobuf::int64 value);
  
  // optional string team_name = 3;
  inline bool has_team_name() const;
  inline void clear_team_name();
  static const int kTeamNameFieldNumber = 3;
  inline const ::std::string& team_name() const;
  inline void set_team_name(const ::std::string& value);
  inline void set_team_name(const char* value);
  inline void set_team_name(const char* value, size_t size);
  inline ::std::string* mutable_team_name();
  inline ::std::string* release_team_name();
  
  // optional string server_prev = 4;
  inline bool has_server_prev() const;
  inline void clear_server_prev();
  static const int kServerPrevFieldNumber = 4;
  inline const ::std::string& server_prev() const;
  inline void set_server_prev(const ::std::string& value);
  inline void set_server_prev(const char* value);
  inline void set_server_prev(const char* value, size_t size);
  inline ::std::string* mutable_server_prev();
  inline ::std::string* release_server_prev();
  
  // optional int32 win_times = 5;
  inline bool has_win_times() const;
  inline void clear_win_times();
  static const int kWinTimesFieldNumber = 5;
  inline ::google::protobuf::int32 win_times() const;
  inline void set_win_times(::google::protobuf::int32 value);
  
  // optional int32 loss_times = 6;
  inline bool has_loss_times() const;
  inline void clear_loss_times();
  static const int kLossTimesFieldNumber = 6;
  inline ::google::protobuf::int32 loss_times() const;
  inline void set_loss_times(::google::protobuf::int32 value);
  
  // optional int32 result = 7;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 7;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoMilitaryExploits)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_team_name();
  inline void clear_has_team_name();
  inline void set_has_server_prev();
  inline void clear_has_server_prev();
  inline void set_has_win_times();
  inline void clear_has_win_times();
  inline void set_has_loss_times();
  inline void clear_has_loss_times();
  inline void set_has_result();
  inline void clear_has_result();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 team_id_;
  ::std::string* team_name_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 win_times_;
  ::std::string* server_prev_;
  ::google::protobuf::int32 loss_times_;
  ::google::protobuf::int32 result_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoMilitaryExploits* default_instance_;
};
// -------------------------------------------------------------------

class ProtoTravPeakWorth : public ::google::protobuf::Message {
 public:
  ProtoTravPeakWorth();
  virtual ~ProtoTravPeakWorth();
  
  ProtoTravPeakWorth(const ProtoTravPeakWorth& from);
  
  inline ProtoTravPeakWorth& operator=(const ProtoTravPeakWorth& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoTravPeakWorth& default_instance();
  
  void Swap(ProtoTravPeakWorth* other);
  
  // implements Message ----------------------------------------------
  
  ProtoTravPeakWorth* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoTravPeakWorth& from);
  void MergeFrom(const ProtoTravPeakWorth& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);
  
  // optional int64 team_id = 2;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 2;
  inline ::google::protobuf::int64 team_id() const;
  inline void set_team_id(::google::protobuf::int64 value);
  
  // optional string team_name = 3;
  inline bool has_team_name() const;
  inline void clear_team_name();
  static const int kTeamNameFieldNumber = 3;
  inline const ::std::string& team_name() const;
  inline void set_team_name(const ::std::string& value);
  inline void set_team_name(const char* value);
  inline void set_team_name(const char* value, size_t size);
  inline ::std::string* mutable_team_name();
  inline ::std::string* release_team_name();
  
  // optional int32 team_force = 4;
  inline bool has_team_force() const;
  inline void clear_team_force();
  static const int kTeamForceFieldNumber = 4;
  inline ::google::protobuf::int32 team_force() const;
  inline void set_team_force(::google::protobuf::int32 value);
  
  // optional int32 worth = 5;
  inline bool has_worth() const;
  inline void clear_worth();
  static const int kWorthFieldNumber = 5;
  inline ::google::protobuf::int32 worth() const;
  inline void set_worth(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoTravPeakWorth)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_team_name();
  inline void clear_has_team_name();
  inline void set_has_team_force();
  inline void clear_has_team_force();
  inline void set_has_worth();
  inline void clear_has_worth();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 team_id_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 team_force_;
  ::std::string* team_name_;
  ::google::protobuf::int32 worth_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoTravPeakWorth* default_instance_;
};
// -------------------------------------------------------------------

class ProtoMagicActBase : public ::google::protobuf::Message {
 public:
  ProtoMagicActBase();
  virtual ~ProtoMagicActBase();
  
  ProtoMagicActBase(const ProtoMagicActBase& from);
  
  inline ProtoMagicActBase& operator=(const ProtoMagicActBase& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoMagicActBase& default_instance();
  
  void Swap(ProtoMagicActBase* other);
  
  // implements Message ----------------------------------------------
  
  ProtoMagicActBase* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoMagicActBase& from);
  void MergeFrom(const ProtoMagicActBase& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  inline ::google::protobuf::int32 active() const;
  inline void set_active(::google::protobuf::int32 value);
  
  // optional int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int32 degree = 3;
  inline bool has_degree() const;
  inline void clear_degree();
  static const int kDegreeFieldNumber = 3;
  inline ::google::protobuf::int32 degree() const;
  inline void set_degree(::google::protobuf::int32 value);
  
  // optional int32 auto_use = 4;
  inline bool has_auto_use() const;
  inline void clear_auto_use();
  static const int kAutoUseFieldNumber = 4;
  inline ::google::protobuf::int32 auto_use() const;
  inline void set_auto_use(::google::protobuf::int32 value);
  
  // repeated int32 part = 5;
  inline int part_size() const;
  inline void clear_part();
  static const int kPartFieldNumber = 5;
  inline ::google::protobuf::int32 part(int index) const;
  inline void set_part(int index, ::google::protobuf::int32 value);
  inline void add_part(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      part() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_part();
  
  // optional int32 magic_id = 6;
  inline bool has_magic_id() const;
  inline void clear_magic_id();
  static const int kMagicIdFieldNumber = 6;
  inline ::google::protobuf::int32 magic_id() const;
  inline void set_magic_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoMagicActBase)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_degree();
  inline void clear_has_degree();
  inline void set_has_auto_use();
  inline void clear_has_auto_use();
  inline void set_has_magic_id();
  inline void clear_has_magic_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 active_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 degree_;
  ::google::protobuf::int32 auto_use_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > part_;
  ::google::protobuf::int32 magic_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoMagicActBase* default_instance_;
};
// -------------------------------------------------------------------

class SecretTShopItem : public ::google::protobuf::Message {
 public:
  SecretTShopItem();
  virtual ~SecretTShopItem();
  
  SecretTShopItem(const SecretTShopItem& from);
  
  inline SecretTShopItem& operator=(const SecretTShopItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SecretTShopItem& default_instance();
  
  void Swap(SecretTShopItem* other);
  
  // implements Message ----------------------------------------------
  
  SecretTShopItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SecretTShopItem& from);
  void MergeFrom(const SecretTShopItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 item_id = 1;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::int32 item_id() const;
  inline void set_item_id(::google::protobuf::int32 value);
  
  // optional int32 buy_record = 2;
  inline bool has_buy_record() const;
  inline void clear_buy_record();
  static const int kBuyRecordFieldNumber = 2;
  inline ::google::protobuf::int32 buy_record() const;
  inline void set_buy_record(::google::protobuf::int32 value);
  
  // optional int32 bind = 3;
  inline bool has_bind() const;
  inline void clear_bind();
  static const int kBindFieldNumber = 3;
  inline ::google::protobuf::int32 bind() const;
  inline void set_bind(::google::protobuf::int32 value);
  
  // optional int32 price = 4;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 4;
  inline ::google::protobuf::int32 price() const;
  inline void set_price(::google::protobuf::int32 value);
  
  // optional int32 amount = 5;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 5;
  inline ::google::protobuf::int32 amount() const;
  inline void set_amount(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:SecretTShopItem)
 private:
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_buy_record();
  inline void clear_has_buy_record();
  inline void set_has_bind();
  inline void clear_has_bind();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_amount();
  inline void clear_has_amount();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 item_id_;
  ::google::protobuf::int32 buy_record_;
  ::google::protobuf::int32 bind_;
  ::google::protobuf::int32 price_;
  ::google::protobuf::int32 amount_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static SecretTShopItem* default_instance_;
};
// -------------------------------------------------------------------

class StRankUnit : public ::google::protobuf::Message {
 public:
  StRankUnit();
  virtual ~StRankUnit();
  
  StRankUnit(const StRankUnit& from);
  
  inline StRankUnit& operator=(const StRankUnit& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StRankUnit& default_instance();
  
  void Swap(StRankUnit* other);
  
  // implements Message ----------------------------------------------
  
  StRankUnit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StRankUnit& from);
  void MergeFrom(const StRankUnit& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int64 player_id() const;
  inline void set_player_id(::google::protobuf::int64 value);
  
  // optional string player_name = 2;
  inline bool has_player_name() const;
  inline void clear_player_name();
  static const int kPlayerNameFieldNumber = 2;
  inline const ::std::string& player_name() const;
  inline void set_player_name(const ::std::string& value);
  inline void set_player_name(const char* value);
  inline void set_player_name(const char* value, size_t size);
  inline ::std::string* mutable_player_name();
  inline ::std::string* release_player_name();
  
  // optional int32 value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);
  
  // optional int32 rank = 4;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 4;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);
  
  // optional .ProtoCoord coord = 5;
  inline bool has_coord() const;
  inline void clear_coord();
  static const int kCoordFieldNumber = 5;
  inline const ::ProtoCoord& coord() const;
  inline ::ProtoCoord* mutable_coord();
  inline ::ProtoCoord* release_coord();
  
  // @@protoc_insertion_point(class_scope:StRankUnit)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_player_name();
  inline void clear_has_player_name();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_coord();
  inline void clear_has_coord();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 player_id_;
  ::std::string* player_name_;
  ::google::protobuf::int32 value_;
  ::google::protobuf::int32 rank_;
  ::ProtoCoord* coord_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static StRankUnit* default_instance_;
};
// -------------------------------------------------------------------

class STHistoryRankUnit : public ::google::protobuf::Message {
 public:
  STHistoryRankUnit();
  virtual ~STHistoryRankUnit();
  
  STHistoryRankUnit(const STHistoryRankUnit& from);
  
  inline STHistoryRankUnit& operator=(const STHistoryRankUnit& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const STHistoryRankUnit& default_instance();
  
  void Swap(STHistoryRankUnit* other);
  
  // implements Message ----------------------------------------------
  
  STHistoryRankUnit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const STHistoryRankUnit& from);
  void MergeFrom(const STHistoryRankUnit& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int64 player_id() const;
  inline void set_player_id(::google::protobuf::int64 value);
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int32 fight = 4;
  inline bool has_fight() const;
  inline void clear_fight();
  static const int kFightFieldNumber = 4;
  inline ::google::protobuf::int32 fight() const;
  inline void set_fight(::google::protobuf::int32 value);
  
  // optional int32 val = 5;
  inline bool has_val() const;
  inline void clear_val();
  static const int kValFieldNumber = 5;
  inline ::google::protobuf::int32 val() const;
  inline void set_val(::google::protobuf::int32 value);
  
  // optional int32 rank = 6;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 6;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:STHistoryRankUnit)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_fight();
  inline void clear_has_fight();
  inline void set_has_val();
  inline void clear_has_val();
  inline void set_has_rank();
  inline void clear_has_rank();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 player_id_;
  ::std::string* name_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 fight_;
  ::google::protobuf::int32 val_;
  ::google::protobuf::int32 rank_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static STHistoryRankUnit* default_instance_;
};
// -------------------------------------------------------------------

class PTLeagueItem : public ::google::protobuf::Message {
 public:
  PTLeagueItem();
  virtual ~PTLeagueItem();
  
  PTLeagueItem(const PTLeagueItem& from);
  
  inline PTLeagueItem& operator=(const PTLeagueItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PTLeagueItem& default_instance();
  
  void Swap(PTLeagueItem* other);
  
  // implements Message ----------------------------------------------
  
  PTLeagueItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PTLeagueItem& from);
  void MergeFrom(const PTLeagueItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // repeated int32 result = 3;
  inline int result_size() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::int32 result(int index) const;
  inline void set_result(int index, ::google::protobuf::int32 value);
  inline void add_result(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      result() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_result();
  
  // @@protoc_insertion_point(class_scope:PTLeagueItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 id_;
  ::std::string* name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > result_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static PTLeagueItem* default_instance_;
};
// -------------------------------------------------------------------

class ProtoSession : public ::google::protobuf::Message {
 public:
  ProtoSession();
  virtual ~ProtoSession();
  
  ProtoSession(const ProtoSession& from);
  
  inline ProtoSession& operator=(const ProtoSession& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoSession& default_instance();
  
  void Swap(ProtoSession* other);
  
  // implements Message ----------------------------------------------
  
  ProtoSession* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoSession& from);
  void MergeFrom(const ProtoSession& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  
  // optional string session = 2;
  inline bool has_session() const;
  inline void clear_session();
  static const int kSessionFieldNumber = 2;
  inline const ::std::string& session() const;
  inline void set_session(const ::std::string& value);
  inline void set_session(const char* value);
  inline void set_session(const char* value, size_t size);
  inline ::std::string* mutable_session();
  inline ::std::string* release_session();
  
  // @@protoc_insertion_point(class_scope:ProtoSession)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_session();
  inline void clear_has_session();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* account_;
  ::std::string* session_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoSession* default_instance_;
};
// -------------------------------------------------------------------

class Illustrations : public ::google::protobuf::Message {
 public:
  Illustrations();
  virtual ~Illustrations();
  
  Illustrations(const Illustrations& from);
  
  inline Illustrations& operator=(const Illustrations& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Illustrations& default_instance();
  
  void Swap(Illustrations* other);
  
  // implements Message ----------------------------------------------
  
  Illustrations* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Illustrations& from);
  void MergeFrom(const Illustrations& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 illus_id = 1;
  inline bool has_illus_id() const;
  inline void clear_illus_id();
  static const int kIllusIdFieldNumber = 1;
  inline ::google::protobuf::int32 illus_id() const;
  inline void set_illus_id(::google::protobuf::int32 value);
  
  // optional int32 illus_class_id = 2;
  inline bool has_illus_class_id() const;
  inline void clear_illus_class_id();
  static const int kIllusClassIdFieldNumber = 2;
  inline ::google::protobuf::int32 illus_class_id() const;
  inline void set_illus_class_id(::google::protobuf::int32 value);
  
  // optional int32 illus_group_id = 3;
  inline bool has_illus_group_id() const;
  inline void clear_illus_group_id();
  static const int kIllusGroupIdFieldNumber = 3;
  inline ::google::protobuf::int32 illus_group_id() const;
  inline void set_illus_group_id(::google::protobuf::int32 value);
  
  // optional int32 illus_level = 4;
  inline bool has_illus_level() const;
  inline void clear_illus_level();
  static const int kIllusLevelFieldNumber = 4;
  inline ::google::protobuf::int32 illus_level() const;
  inline void set_illus_level(::google::protobuf::int32 value);
  
  // optional int32 upgrade_goods_id = 5;
  inline bool has_upgrade_goods_id() const;
  inline void clear_upgrade_goods_id();
  static const int kUpgradeGoodsIdFieldNumber = 5;
  inline ::google::protobuf::int32 upgrade_goods_id() const;
  inline void set_upgrade_goods_id(::google::protobuf::int32 value);
  
  // optional int32 upgrade_goods_amount = 6;
  inline bool has_upgrade_goods_amount() const;
  inline void clear_upgrade_goods_amount();
  static const int kUpgradeGoodsAmountFieldNumber = 6;
  inline ::google::protobuf::int32 upgrade_goods_amount() const;
  inline void set_upgrade_goods_amount(::google::protobuf::int32 value);
  
  // optional int32 open_level = 7;
  inline bool has_open_level() const;
  inline void clear_open_level();
  static const int kOpenLevelFieldNumber = 7;
  inline ::google::protobuf::int32 open_level() const;
  inline void set_open_level(::google::protobuf::int32 value);
  
  // optional int32 attr_type = 8;
  inline bool has_attr_type() const;
  inline void clear_attr_type();
  static const int kAttrTypeFieldNumber = 8;
  inline ::google::protobuf::int32 attr_type() const;
  inline void set_attr_type(::google::protobuf::int32 value);
  
  // optional int32 cur_value = 9;
  inline bool has_cur_value() const;
  inline void clear_cur_value();
  static const int kCurValueFieldNumber = 9;
  inline ::google::protobuf::int32 cur_value() const;
  inline void set_cur_value(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Illustrations)
 private:
  inline void set_has_illus_id();
  inline void clear_has_illus_id();
  inline void set_has_illus_class_id();
  inline void clear_has_illus_class_id();
  inline void set_has_illus_group_id();
  inline void clear_has_illus_group_id();
  inline void set_has_illus_level();
  inline void clear_has_illus_level();
  inline void set_has_upgrade_goods_id();
  inline void clear_has_upgrade_goods_id();
  inline void set_has_upgrade_goods_amount();
  inline void clear_has_upgrade_goods_amount();
  inline void set_has_open_level();
  inline void clear_has_open_level();
  inline void set_has_attr_type();
  inline void clear_has_attr_type();
  inline void set_has_cur_value();
  inline void clear_has_cur_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 illus_id_;
  ::google::protobuf::int32 illus_class_id_;
  ::google::protobuf::int32 illus_group_id_;
  ::google::protobuf::int32 illus_level_;
  ::google::protobuf::int32 upgrade_goods_id_;
  ::google::protobuf::int32 upgrade_goods_amount_;
  ::google::protobuf::int32 open_level_;
  ::google::protobuf::int32 attr_type_;
  ::google::protobuf::int32 cur_value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static Illustrations* default_instance_;
};
// -------------------------------------------------------------------

class Illus_group : public ::google::protobuf::Message {
 public:
  Illus_group();
  virtual ~Illus_group();
  
  Illus_group(const Illus_group& from);
  
  inline Illus_group& operator=(const Illus_group& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Illus_group& default_instance();
  
  void Swap(Illus_group* other);
  
  // implements Message ----------------------------------------------
  
  Illus_group* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Illus_group& from);
  void MergeFrom(const Illus_group& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::int32 group_id() const;
  inline void set_group_id(::google::protobuf::int32 value);
  
  // optional int32 group_type = 2;
  inline bool has_group_type() const;
  inline void clear_group_type();
  static const int kGroupTypeFieldNumber = 2;
  inline ::google::protobuf::int32 group_type() const;
  inline void set_group_type(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Illus_group)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_group_type();
  inline void clear_has_group_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 group_id_;
  ::google::protobuf::int32 group_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static Illus_group* default_instance_;
};
// -------------------------------------------------------------------

class Illus_class : public ::google::protobuf::Message {
 public:
  Illus_class();
  virtual ~Illus_class();
  
  Illus_class(const Illus_class& from);
  
  inline Illus_class& operator=(const Illus_class& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Illus_class& default_instance();
  
  void Swap(Illus_class* other);
  
  // implements Message ----------------------------------------------
  
  Illus_class* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Illus_class& from);
  void MergeFrom(const Illus_class& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .Illus_group group_list = 1;
  inline int group_list_size() const;
  inline void clear_group_list();
  static const int kGroupListFieldNumber = 1;
  inline const ::Illus_group& group_list(int index) const;
  inline ::Illus_group* mutable_group_list(int index);
  inline ::Illus_group* add_group_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Illus_group >&
      group_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Illus_group >*
      mutable_group_list();
  
  // optional int32 class_id = 2;
  inline bool has_class_id() const;
  inline void clear_class_id();
  static const int kClassIdFieldNumber = 2;
  inline ::google::protobuf::int32 class_id() const;
  inline void set_class_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Illus_class)
 private:
  inline void set_has_class_id();
  inline void clear_has_class_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Illus_group > group_list_;
  ::google::protobuf::int32 class_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static Illus_class* default_instance_;
};
// -------------------------------------------------------------------

class ProtoFloorInfo : public ::google::protobuf::Message {
 public:
  ProtoFloorInfo();
  virtual ~ProtoFloorInfo();
  
  ProtoFloorInfo(const ProtoFloorInfo& from);
  
  inline ProtoFloorInfo& operator=(const ProtoFloorInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoFloorInfo& default_instance();
  
  void Swap(ProtoFloorInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProtoFloorInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoFloorInfo& from);
  void MergeFrom(const ProtoFloorInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 floor_id = 1;
  inline bool has_floor_id() const;
  inline void clear_floor_id();
  static const int kFloorIdFieldNumber = 1;
  inline ::google::protobuf::int32 floor_id() const;
  inline void set_floor_id(::google::protobuf::int32 value);
  
  // optional int32 is_special = 2;
  inline bool has_is_special() const;
  inline void clear_is_special();
  static const int kIsSpecialFieldNumber = 2;
  inline ::google::protobuf::int32 is_special() const;
  inline void set_is_special(::google::protobuf::int32 value);
  
  // optional int64 pass_tick = 3;
  inline bool has_pass_tick() const;
  inline void clear_pass_tick();
  static const int kPassTickFieldNumber = 3;
  inline ::google::protobuf::int64 pass_tick() const;
  inline void set_pass_tick(::google::protobuf::int64 value);
  
  // optional int32 is_today_pass = 4;
  inline bool has_is_today_pass() const;
  inline void clear_is_today_pass();
  static const int kIsTodayPassFieldNumber = 4;
  inline ::google::protobuf::int32 is_today_pass() const;
  inline void set_is_today_pass(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoFloorInfo)
 private:
  inline void set_has_floor_id();
  inline void clear_has_floor_id();
  inline void set_has_is_special();
  inline void clear_has_is_special();
  inline void set_has_pass_tick();
  inline void clear_has_pass_tick();
  inline void set_has_is_today_pass();
  inline void clear_has_is_today_pass();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 floor_id_;
  ::google::protobuf::int32 is_special_;
  ::google::protobuf::int64 pass_tick_;
  ::google::protobuf::int32 is_today_pass_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoFloorInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProtoLScoreInfo : public ::google::protobuf::Message {
 public:
  ProtoLScoreInfo();
  virtual ~ProtoLScoreInfo();
  
  ProtoLScoreInfo(const ProtoLScoreInfo& from);
  
  inline ProtoLScoreInfo& operator=(const ProtoLScoreInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoLScoreInfo& default_instance();
  
  void Swap(ProtoLScoreInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProtoLScoreInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoLScoreInfo& from);
  void MergeFrom(const ProtoLScoreInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 role_rank = 1;
  inline bool has_role_rank() const;
  inline void clear_role_rank();
  static const int kRoleRankFieldNumber = 1;
  inline ::google::protobuf::int32 role_rank() const;
  inline void set_role_rank(::google::protobuf::int32 value);
  
  // optional string role_name = 2;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 2;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  
  // optional int32 role_hurt = 3;
  inline bool has_role_hurt() const;
  inline void clear_role_hurt();
  static const int kRoleHurtFieldNumber = 3;
  inline ::google::protobuf::int32 role_hurt() const;
  inline void set_role_hurt(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoLScoreInfo)
 private:
  inline void set_has_role_rank();
  inline void clear_has_role_rank();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_role_hurt();
  inline void clear_has_role_hurt();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* role_name_;
  ::google::protobuf::int32 role_rank_;
  ::google::protobuf::int32 role_hurt_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoLScoreInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProtoScriptAdvance : public ::google::protobuf::Message {
 public:
  ProtoScriptAdvance();
  virtual ~ProtoScriptAdvance();
  
  ProtoScriptAdvance(const ProtoScriptAdvance& from);
  
  inline ProtoScriptAdvance& operator=(const ProtoScriptAdvance& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoScriptAdvance& default_instance();
  
  void Swap(ProtoScriptAdvance* other);
  
  // implements Message ----------------------------------------------
  
  ProtoScriptAdvance* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoScriptAdvance& from);
  void MergeFrom(const ProtoScriptAdvance& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 script_sort = 1;
  inline bool has_script_sort() const;
  inline void clear_script_sort();
  static const int kScriptSortFieldNumber = 1;
  inline ::google::protobuf::int32 script_sort() const;
  inline void set_script_sort(::google::protobuf::int32 value);
  
  // optional int32 left_times = 2;
  inline bool has_left_times() const;
  inline void clear_left_times();
  static const int kLeftTimesFieldNumber = 2;
  inline ::google::protobuf::int32 left_times() const;
  inline void set_left_times(::google::protobuf::int32 value);
  
  // optional int32 reset_times = 3;
  inline bool has_reset_times() const;
  inline void clear_reset_times();
  static const int kResetTimesFieldNumber = 3;
  inline ::google::protobuf::int32 reset_times() const;
  inline void set_reset_times(::google::protobuf::int32 value);
  
  // optional int32 is_sweep = 4;
  inline bool has_is_sweep() const;
  inline void clear_is_sweep();
  static const int kIsSweepFieldNumber = 4;
  inline ::google::protobuf::int32 is_sweep() const;
  inline void set_is_sweep(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoScriptAdvance)
 private:
  inline void set_has_script_sort();
  inline void clear_has_script_sort();
  inline void set_has_left_times();
  inline void clear_has_left_times();
  inline void set_has_reset_times();
  inline void clear_has_reset_times();
  inline void set_has_is_sweep();
  inline void clear_has_is_sweep();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 script_sort_;
  ::google::protobuf::int32 left_times_;
  ::google::protobuf::int32 reset_times_;
  ::google::protobuf::int32 is_sweep_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoScriptAdvance* default_instance_;
};
// -------------------------------------------------------------------

class ProtoScriptExpInfo : public ::google::protobuf::Message {
 public:
  ProtoScriptExpInfo();
  virtual ~ProtoScriptExpInfo();
  
  ProtoScriptExpInfo(const ProtoScriptExpInfo& from);
  
  inline ProtoScriptExpInfo& operator=(const ProtoScriptExpInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoScriptExpInfo& default_instance();
  
  void Swap(ProtoScriptExpInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProtoScriptExpInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoScriptExpInfo& from);
  void MergeFrom(const ProtoScriptExpInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 chapter_id = 1;
  inline bool has_chapter_id() const;
  inline void clear_chapter_id();
  static const int kChapterIdFieldNumber = 1;
  inline ::google::protobuf::int32 chapter_id() const;
  inline void set_chapter_id(::google::protobuf::int32 value);
  
  // optional int32 is_today_pass = 2;
  inline bool has_is_today_pass() const;
  inline void clear_is_today_pass();
  static const int kIsTodayPassFieldNumber = 2;
  inline ::google::protobuf::int32 is_today_pass() const;
  inline void set_is_today_pass(::google::protobuf::int32 value);
  
  // optional int32 is_pass = 3;
  inline bool has_is_pass() const;
  inline void clear_is_pass();
  static const int kIsPassFieldNumber = 3;
  inline ::google::protobuf::int32 is_pass() const;
  inline void set_is_pass(::google::protobuf::int32 value);
  
  // optional int32 is_open = 4;
  inline bool has_is_open() const;
  inline void clear_is_open();
  static const int kIsOpenFieldNumber = 4;
  inline ::google::protobuf::int32 is_open() const;
  inline void set_is_open(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoScriptExpInfo)
 private:
  inline void set_has_chapter_id();
  inline void clear_has_chapter_id();
  inline void set_has_is_today_pass();
  inline void clear_has_is_today_pass();
  inline void set_has_is_pass();
  inline void clear_has_is_pass();
  inline void set_has_is_open();
  inline void clear_has_is_open();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 chapter_id_;
  ::google::protobuf::int32 is_today_pass_;
  ::google::protobuf::int32 is_pass_;
  ::google::protobuf::int32 is_open_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoScriptExpInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProtoSpecialAwardInfo : public ::google::protobuf::Message {
 public:
  ProtoSpecialAwardInfo();
  virtual ~ProtoSpecialAwardInfo();
  
  ProtoSpecialAwardInfo(const ProtoSpecialAwardInfo& from);
  
  inline ProtoSpecialAwardInfo& operator=(const ProtoSpecialAwardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoSpecialAwardInfo& default_instance();
  
  void Swap(ProtoSpecialAwardInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProtoSpecialAwardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoSpecialAwardInfo& from);
  void MergeFrom(const ProtoSpecialAwardInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 script_wave_id = 1;
  inline bool has_script_wave_id() const;
  inline void clear_script_wave_id();
  static const int kScriptWaveIdFieldNumber = 1;
  inline ::google::protobuf::int32 script_wave_id() const;
  inline void set_script_wave_id(::google::protobuf::int32 value);
  
  // optional int32 script_sort = 2;
  inline bool has_script_sort() const;
  inline void clear_script_sort();
  static const int kScriptSortFieldNumber = 2;
  inline ::google::protobuf::int32 script_sort() const;
  inline void set_script_sort(::google::protobuf::int32 value);
  
  // optional int32 wave = 3;
  inline bool has_wave() const;
  inline void clear_wave();
  static const int kWaveFieldNumber = 3;
  inline ::google::protobuf::int32 wave() const;
  inline void set_wave(::google::protobuf::int32 value);
  
  // optional int32 is_get = 4;
  inline bool has_is_get() const;
  inline void clear_is_get();
  static const int kIsGetFieldNumber = 4;
  inline ::google::protobuf::int32 is_get() const;
  inline void set_is_get(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoSpecialAwardInfo)
 private:
  inline void set_has_script_wave_id();
  inline void clear_has_script_wave_id();
  inline void set_has_script_sort();
  inline void clear_has_script_sort();
  inline void set_has_wave();
  inline void clear_has_wave();
  inline void set_has_is_get();
  inline void clear_has_is_get();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 script_wave_id_;
  ::google::protobuf::int32 script_sort_;
  ::google::protobuf::int32 wave_;
  ::google::protobuf::int32 is_get_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoSpecialAwardInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProtoServer : public ::google::protobuf::Message {
 public:
  ProtoServer();
  virtual ~ProtoServer();
  
  ProtoServer(const ProtoServer& from);
  
  inline ProtoServer& operator=(const ProtoServer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoServer& default_instance();
  
  void Swap(ProtoServer* other);
  
  // implements Message ----------------------------------------------
  
  ProtoServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoServer& from);
  void MergeFrom(const ProtoServer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string prev = 3;
  inline bool has_prev() const;
  inline void clear_prev();
  static const int kPrevFieldNumber = 3;
  inline const ::std::string& prev() const;
  inline void set_prev(const ::std::string& value);
  inline void set_prev(const char* value);
  inline void set_prev(const char* value, size_t size);
  inline ::std::string* mutable_prev();
  inline ::std::string* release_prev();
  
  // optional string flag = 4;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 4;
  inline const ::std::string& flag() const;
  inline void set_flag(const ::std::string& value);
  inline void set_flag(const char* value);
  inline void set_flag(const char* value, size_t size);
  inline ::std::string* mutable_flag();
  inline ::std::string* release_flag();
  
  // optional string cur_flag = 5;
  inline bool has_cur_flag() const;
  inline void clear_cur_flag();
  static const int kCurFlagFieldNumber = 5;
  inline const ::std::string& cur_flag() const;
  inline void set_cur_flag(const ::std::string& value);
  inline void set_cur_flag(const char* value);
  inline void set_cur_flag(const char* value, size_t size);
  inline ::std::string* mutable_cur_flag();
  inline ::std::string* release_cur_flag();
  
  // @@protoc_insertion_point(class_scope:ProtoServer)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_prev();
  inline void clear_has_prev();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_cur_flag();
  inline void clear_has_cur_flag();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* prev_;
  ::std::string* flag_;
  ::std::string* cur_flag_;
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoServer* default_instance_;
};
// -------------------------------------------------------------------

class ProtoWorldBossInfo : public ::google::protobuf::Message {
 public:
  ProtoWorldBossInfo();
  virtual ~ProtoWorldBossInfo();
  
  ProtoWorldBossInfo(const ProtoWorldBossInfo& from);
  
  inline ProtoWorldBossInfo& operator=(const ProtoWorldBossInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoWorldBossInfo& default_instance();
  
  void Swap(ProtoWorldBossInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProtoWorldBossInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoWorldBossInfo& from);
  void MergeFrom(const ProtoWorldBossInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 boss_scene_id = 1;
  inline bool has_boss_scene_id() const;
  inline void clear_boss_scene_id();
  static const int kBossSceneIdFieldNumber = 1;
  inline ::google::protobuf::int32 boss_scene_id() const;
  inline void set_boss_scene_id(::google::protobuf::int32 value);
  
  // optional int32 boss_status = 2;
  inline bool has_boss_status() const;
  inline void clear_boss_status();
  static const int kBossStatusFieldNumber = 2;
  inline ::google::protobuf::int32 boss_status() const;
  inline void set_boss_status(::google::protobuf::int32 value);
  
  // optional double blood = 3;
  inline bool has_blood() const;
  inline void clear_blood();
  static const int kBloodFieldNumber = 3;
  inline double blood() const;
  inline void set_blood(double value);
  
  // optional string killer = 4;
  inline bool has_killer() const;
  inline void clear_killer();
  static const int kKillerFieldNumber = 4;
  inline const ::std::string& killer() const;
  inline void set_killer(const ::std::string& value);
  inline void set_killer(const char* value);
  inline void set_killer(const char* value, size_t size);
  inline ::std::string* mutable_killer();
  inline ::std::string* release_killer();
  
  // optional int32 is_full = 5;
  inline bool has_is_full() const;
  inline void clear_is_full();
  static const int kIsFullFieldNumber = 5;
  inline ::google::protobuf::int32 is_full() const;
  inline void set_is_full(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoWorldBossInfo)
 private:
  inline void set_has_boss_scene_id();
  inline void clear_has_boss_scene_id();
  inline void set_has_boss_status();
  inline void clear_has_boss_status();
  inline void set_has_blood();
  inline void clear_has_blood();
  inline void set_has_killer();
  inline void clear_has_killer();
  inline void set_has_is_full();
  inline void clear_has_is_full();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 boss_scene_id_;
  ::google::protobuf::int32 boss_status_;
  double blood_;
  ::std::string* killer_;
  ::google::protobuf::int32 is_full_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoWorldBossInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProtoLeagueRankInfo : public ::google::protobuf::Message {
 public:
  ProtoLeagueRankInfo();
  virtual ~ProtoLeagueRankInfo();
  
  ProtoLeagueRankInfo(const ProtoLeagueRankInfo& from);
  
  inline ProtoLeagueRankInfo& operator=(const ProtoLeagueRankInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoLeagueRankInfo& default_instance();
  
  void Swap(ProtoLeagueRankInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProtoLeagueRankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoLeagueRankInfo& from);
  void MergeFrom(const ProtoLeagueRankInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 league_index = 1;
  inline bool has_league_index() const;
  inline void clear_league_index();
  static const int kLeagueIndexFieldNumber = 1;
  inline ::google::protobuf::int64 league_index() const;
  inline void set_league_index(::google::protobuf::int64 value);
  
  // optional string league_name = 2;
  inline bool has_league_name() const;
  inline void clear_league_name();
  static const int kLeagueNameFieldNumber = 2;
  inline const ::std::string& league_name() const;
  inline void set_league_name(const ::std::string& value);
  inline void set_league_name(const char* value);
  inline void set_league_name(const char* value, size_t size);
  inline ::std::string* mutable_league_name();
  inline ::std::string* release_league_name();
  
  // optional int32 rank = 3;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 3;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);
  
  // optional double hurt = 4;
  inline bool has_hurt() const;
  inline void clear_hurt();
  static const int kHurtFieldNumber = 4;
  inline double hurt() const;
  inline void set_hurt(double value);
  
  // optional int32 score = 5;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 5;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);
  
  // optional int32 space_id = 6;
  inline bool has_space_id() const;
  inline void clear_space_id();
  static const int kSpaceIdFieldNumber = 6;
  inline ::google::protobuf::int32 space_id() const;
  inline void set_space_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoLeagueRankInfo)
 private:
  inline void set_has_league_index();
  inline void clear_has_league_index();
  inline void set_has_league_name();
  inline void clear_has_league_name();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_hurt();
  inline void clear_has_hurt();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_space_id();
  inline void clear_has_space_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 league_index_;
  ::std::string* league_name_;
  double hurt_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 space_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoLeagueRankInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProtoLWarInfo : public ::google::protobuf::Message {
 public:
  ProtoLWarInfo();
  virtual ~ProtoLWarInfo();
  
  ProtoLWarInfo(const ProtoLWarInfo& from);
  
  inline ProtoLWarInfo& operator=(const ProtoLWarInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoLWarInfo& default_instance();
  
  void Swap(ProtoLWarInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProtoLWarInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoLWarInfo& from);
  void MergeFrom(const ProtoLWarInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 space_id = 1;
  inline bool has_space_id() const;
  inline void clear_space_id();
  static const int kSpaceIdFieldNumber = 1;
  inline ::google::protobuf::int32 space_id() const;
  inline void set_space_id(::google::protobuf::int32 value);
  
  // optional int32 attack_resource = 2;
  inline bool has_attack_resource() const;
  inline void clear_attack_resource();
  static const int kAttackResourceFieldNumber = 2;
  inline ::google::protobuf::int32 attack_resource() const;
  inline void set_attack_resource(::google::protobuf::int32 value);
  
  // optional int32 defence_resource = 3;
  inline bool has_defence_resource() const;
  inline void clear_defence_resource();
  static const int kDefenceResourceFieldNumber = 3;
  inline ::google::protobuf::int32 defence_resource() const;
  inline void set_defence_resource(::google::protobuf::int32 value);
  
  // optional int32 attack_level = 4;
  inline bool has_attack_level() const;
  inline void clear_attack_level();
  static const int kAttackLevelFieldNumber = 4;
  inline ::google::protobuf::int32 attack_level() const;
  inline void set_attack_level(::google::protobuf::int32 value);
  
  // optional int32 defence_level = 5;
  inline bool has_defence_level() const;
  inline void clear_defence_level();
  static const int kDefenceLevelFieldNumber = 5;
  inline ::google::protobuf::int32 defence_level() const;
  inline void set_defence_level(::google::protobuf::int32 value);
  
  // optional int32 attack_add = 6;
  inline bool has_attack_add() const;
  inline void clear_attack_add();
  static const int kAttackAddFieldNumber = 6;
  inline ::google::protobuf::int32 attack_add() const;
  inline void set_attack_add(::google::protobuf::int32 value);
  
  // optional int32 defence_add = 7;
  inline bool has_defence_add() const;
  inline void clear_defence_add();
  static const int kDefenceAddFieldNumber = 7;
  inline ::google::protobuf::int32 defence_add() const;
  inline void set_defence_add(::google::protobuf::int32 value);
  
  // optional string boss_name = 8;
  inline bool has_boss_name() const;
  inline void clear_boss_name();
  static const int kBossNameFieldNumber = 8;
  inline const ::std::string& boss_name() const;
  inline void set_boss_name(const ::std::string& value);
  inline void set_boss_name(const char* value);
  inline void set_boss_name(const char* value, size_t size);
  inline ::std::string* mutable_boss_name();
  inline ::std::string* release_boss_name();
  
  // optional double boss_blood = 9;
  inline bool has_boss_blood() const;
  inline void clear_boss_blood();
  static const int kBossBloodFieldNumber = 9;
  inline double boss_blood() const;
  inline void set_boss_blood(double value);
  
  // repeated .ProtoLeagueRankInfo room_league_rank = 10;
  inline int room_league_rank_size() const;
  inline void clear_room_league_rank();
  static const int kRoomLeagueRankFieldNumber = 10;
  inline const ::ProtoLeagueRankInfo& room_league_rank(int index) const;
  inline ::ProtoLeagueRankInfo* mutable_room_league_rank(int index);
  inline ::ProtoLeagueRankInfo* add_room_league_rank();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoLeagueRankInfo >&
      room_league_rank() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoLeagueRankInfo >*
      mutable_room_league_rank();
  
  // optional .ProtoLeagueRankInfo room_my_league = 11;
  inline bool has_room_my_league() const;
  inline void clear_room_my_league();
  static const int kRoomMyLeagueFieldNumber = 11;
  inline const ::ProtoLeagueRankInfo& room_my_league() const;
  inline ::ProtoLeagueRankInfo* mutable_room_my_league();
  inline ::ProtoLeagueRankInfo* release_room_my_league();
  
  // @@protoc_insertion_point(class_scope:ProtoLWarInfo)
 private:
  inline void set_has_space_id();
  inline void clear_has_space_id();
  inline void set_has_attack_resource();
  inline void clear_has_attack_resource();
  inline void set_has_defence_resource();
  inline void clear_has_defence_resource();
  inline void set_has_attack_level();
  inline void clear_has_attack_level();
  inline void set_has_defence_level();
  inline void clear_has_defence_level();
  inline void set_has_attack_add();
  inline void clear_has_attack_add();
  inline void set_has_defence_add();
  inline void clear_has_defence_add();
  inline void set_has_boss_name();
  inline void clear_has_boss_name();
  inline void set_has_boss_blood();
  inline void clear_has_boss_blood();
  inline void set_has_room_my_league();
  inline void clear_has_room_my_league();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 space_id_;
  ::google::protobuf::int32 attack_resource_;
  ::google::protobuf::int32 defence_resource_;
  ::google::protobuf::int32 attack_level_;
  ::google::protobuf::int32 defence_level_;
  ::google::protobuf::int32 attack_add_;
  ::std::string* boss_name_;
  double boss_blood_;
  ::google::protobuf::RepeatedPtrField< ::ProtoLeagueRankInfo > room_league_rank_;
  ::ProtoLeagueRankInfo* room_my_league_;
  ::google::protobuf::int32 defence_add_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoLWarInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProtoItemId : public ::google::protobuf::Message {
 public:
  ProtoItemId();
  virtual ~ProtoItemId();
  
  ProtoItemId(const ProtoItemId& from);
  
  inline ProtoItemId& operator=(const ProtoItemId& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoItemId& default_instance();
  
  void Swap(ProtoItemId* other);
  
  // implements Message ----------------------------------------------
  
  ProtoItemId* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoItemId& from);
  void MergeFrom(const ProtoItemId& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 amount = 2;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 2;
  inline ::google::protobuf::int32 amount() const;
  inline void set_amount(::google::protobuf::int32 value);
  
  // optional int32 bind = 3;
  inline bool has_bind() const;
  inline void clear_bind();
  static const int kBindFieldNumber = 3;
  inline ::google::protobuf::int32 bind() const;
  inline void set_bind(::google::protobuf::int32 value);
  
  // optional int32 cond = 4;
  inline bool has_cond() const;
  inline void clear_cond();
  static const int kCondFieldNumber = 4;
  inline ::google::protobuf::int32 cond() const;
  inline void set_cond(::google::protobuf::int32 value);
  
  // optional int32 state = 5;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 5;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoItemId)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_amount();
  inline void clear_has_amount();
  inline void set_has_bind();
  inline void clear_has_bind();
  inline void set_has_cond();
  inline void clear_has_cond();
  inline void set_has_state();
  inline void clear_has_state();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 amount_;
  ::google::protobuf::int32 bind_;
  ::google::protobuf::int32 cond_;
  ::google::protobuf::int32 state_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoItemId* default_instance_;
};
// -------------------------------------------------------------------

class ProtoSwordPoolTask : public ::google::protobuf::Message {
 public:
  ProtoSwordPoolTask();
  virtual ~ProtoSwordPoolTask();
  
  ProtoSwordPoolTask(const ProtoSwordPoolTask& from);
  
  inline ProtoSwordPoolTask& operator=(const ProtoSwordPoolTask& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoSwordPoolTask& default_instance();
  
  void Swap(ProtoSwordPoolTask* other);
  
  // implements Message ----------------------------------------------
  
  ProtoSwordPoolTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoSwordPoolTask& from);
  void MergeFrom(const ProtoSwordPoolTask& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 task_id = 1;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  inline ::google::protobuf::int32 task_id() const;
  inline void set_task_id(::google::protobuf::int32 value);
  
  // optional int32 total_num = 2;
  inline bool has_total_num() const;
  inline void clear_total_num();
  static const int kTotalNumFieldNumber = 2;
  inline ::google::protobuf::int32 total_num() const;
  inline void set_total_num(::google::protobuf::int32 value);
  
  // optional int32 left_num = 3;
  inline bool has_left_num() const;
  inline void clear_left_num();
  static const int kLeftNumFieldNumber = 3;
  inline ::google::protobuf::int32 left_num() const;
  inline void set_left_num(::google::protobuf::int32 value);
  
  // optional int32 once_exp = 4;
  inline bool has_once_exp() const;
  inline void clear_once_exp();
  static const int kOnceExpFieldNumber = 4;
  inline ::google::protobuf::int32 once_exp() const;
  inline void set_once_exp(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoSwordPoolTask)
 private:
  inline void set_has_task_id();
  inline void clear_has_task_id();
  inline void set_has_total_num();
  inline void clear_has_total_num();
  inline void set_has_left_num();
  inline void clear_has_left_num();
  inline void set_has_once_exp();
  inline void clear_has_once_exp();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 task_id_;
  ::google::protobuf::int32 total_num_;
  ::google::protobuf::int32 left_num_;
  ::google::protobuf::int32 once_exp_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoSwordPoolTask* default_instance_;
};
// -------------------------------------------------------------------

class ProtoSvenDayItem : public ::google::protobuf::Message {
 public:
  ProtoSvenDayItem();
  virtual ~ProtoSvenDayItem();
  
  ProtoSvenDayItem(const ProtoSvenDayItem& from);
  
  inline ProtoSvenDayItem& operator=(const ProtoSvenDayItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoSvenDayItem& default_instance();
  
  void Swap(ProtoSvenDayItem* other);
  
  // implements Message ----------------------------------------------
  
  ProtoSvenDayItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoSvenDayItem& from);
  void MergeFrom(const ProtoSvenDayItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 day = 1;
  inline bool has_day() const;
  inline void clear_day();
  static const int kDayFieldNumber = 1;
  inline ::google::protobuf::int32 day() const;
  inline void set_day(::google::protobuf::int32 value);
  
  // optional int32 item_id = 2;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::int32 item_id() const;
  inline void set_item_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoSvenDayItem)
 private:
  inline void set_has_day();
  inline void clear_has_day();
  inline void set_has_item_id();
  inline void clear_has_item_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 day_;
  ::google::protobuf::int32 item_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoSvenDayItem* default_instance_;
};
// -------------------------------------------------------------------

class ProtoSevenDayItem : public ::google::protobuf::Message {
 public:
  ProtoSevenDayItem();
  virtual ~ProtoSevenDayItem();
  
  ProtoSevenDayItem(const ProtoSevenDayItem& from);
  
  inline ProtoSevenDayItem& operator=(const ProtoSevenDayItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoSevenDayItem& default_instance();
  
  void Swap(ProtoSevenDayItem* other);
  
  // implements Message ----------------------------------------------
  
  ProtoSevenDayItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoSevenDayItem& from);
  void MergeFrom(const ProtoSevenDayItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 day = 1;
  inline bool has_day() const;
  inline void clear_day();
  static const int kDayFieldNumber = 1;
  inline ::google::protobuf::int32 day() const;
  inline void set_day(::google::protobuf::int32 value);
  
  // optional int32 item_id = 2;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::int32 item_id() const;
  inline void set_item_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoSevenDayItem)
 private:
  inline void set_has_day();
  inline void clear_has_day();
  inline void set_has_item_id();
  inline void clear_has_item_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 day_;
  ::google::protobuf::int32 item_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoSevenDayItem* default_instance_;
};
// -------------------------------------------------------------------

class ProtoLegendTopRank : public ::google::protobuf::Message {
 public:
  ProtoLegendTopRank();
  virtual ~ProtoLegendTopRank();
  
  ProtoLegendTopRank(const ProtoLegendTopRank& from);
  
  inline ProtoLegendTopRank& operator=(const ProtoLegendTopRank& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoLegendTopRank& default_instance();
  
  void Swap(ProtoLegendTopRank* other);
  
  // implements Message ----------------------------------------------
  
  ProtoLegendTopRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoLegendTopRank& from);
  void MergeFrom(const ProtoLegendTopRank& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int64 role_id() const;
  inline void set_role_id(::google::protobuf::int64 value);
  
  // optional string role_name = 2;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 2;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  
  // optional int32 rank = 3;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 3;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);
  
  // optional int32 fight_score = 4;
  inline bool has_fight_score() const;
  inline void clear_fight_score();
  static const int kFightScoreFieldNumber = 4;
  inline ::google::protobuf::int32 fight_score() const;
  inline void set_fight_score(::google::protobuf::int32 value);
  
  // optional int32 floor = 5;
  inline bool has_floor() const;
  inline void clear_floor();
  static const int kFloorFieldNumber = 5;
  inline ::google::protobuf::int32 floor() const;
  inline void set_floor(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoLegendTopRank)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_fight_score();
  inline void clear_has_fight_score();
  inline void set_has_floor();
  inline void clear_has_floor();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 role_id_;
  ::std::string* role_name_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 fight_score_;
  ::google::protobuf::int32 floor_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoLegendTopRank* default_instance_;
};
// -------------------------------------------------------------------

class ProtoApplyInfo : public ::google::protobuf::Message {
 public:
  ProtoApplyInfo();
  virtual ~ProtoApplyInfo();
  
  ProtoApplyInfo(const ProtoApplyInfo& from);
  
  inline ProtoApplyInfo& operator=(const ProtoApplyInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoApplyInfo& default_instance();
  
  void Swap(ProtoApplyInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProtoApplyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoApplyInfo& from);
  void MergeFrom(const ProtoApplyInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 friend_id = 1;
  inline bool has_friend_id() const;
  inline void clear_friend_id();
  static const int kFriendIdFieldNumber = 1;
  inline ::google::protobuf::int64 friend_id() const;
  inline void set_friend_id(::google::protobuf::int64 value);
  
  // optional string friend_name = 2;
  inline bool has_friend_name() const;
  inline void clear_friend_name();
  static const int kFriendNameFieldNumber = 2;
  inline const ::std::string& friend_name() const;
  inline void set_friend_name(const ::std::string& value);
  inline void set_friend_name(const char* value);
  inline void set_friend_name(const char* value, size_t size);
  inline ::std::string* mutable_friend_name();
  inline ::std::string* release_friend_name();
  
  // optional int64 league_id = 3;
  inline bool has_league_id() const;
  inline void clear_league_id();
  static const int kLeagueIdFieldNumber = 3;
  inline ::google::protobuf::int64 league_id() const;
  inline void set_league_id(::google::protobuf::int64 value);
  
  // optional string league_name = 4;
  inline bool has_league_name() const;
  inline void clear_league_name();
  static const int kLeagueNameFieldNumber = 4;
  inline const ::std::string& league_name() const;
  inline void set_league_name(const ::std::string& value);
  inline void set_league_name(const char* value);
  inline void set_league_name(const char* value, size_t size);
  inline ::std::string* mutable_league_name();
  inline ::std::string* release_league_name();
  
  // optional int32 level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int32 sex = 6;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 6;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);
  
  // optional int64 tick = 7;
  inline bool has_tick() const;
  inline void clear_tick();
  static const int kTickFieldNumber = 7;
  inline ::google::protobuf::int64 tick() const;
  inline void set_tick(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:ProtoApplyInfo)
 private:
  inline void set_has_friend_id();
  inline void clear_has_friend_id();
  inline void set_has_friend_name();
  inline void clear_has_friend_name();
  inline void set_has_league_id();
  inline void clear_has_league_id();
  inline void set_has_league_name();
  inline void clear_has_league_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_tick();
  inline void clear_has_tick();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 friend_id_;
  ::std::string* friend_name_;
  ::google::protobuf::int64 league_id_;
  ::std::string* league_name_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int64 tick_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoApplyInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProtoPairMap : public ::google::protobuf::Message {
 public:
  ProtoPairMap();
  virtual ~ProtoPairMap();
  
  ProtoPairMap(const ProtoPairMap& from);
  
  inline ProtoPairMap& operator=(const ProtoPairMap& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoPairMap& default_instance();
  
  void Swap(ProtoPairMap* other);
  
  // implements Message ----------------------------------------------
  
  ProtoPairMap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoPairMap& from);
  void MergeFrom(const ProtoPairMap& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .ProtoPairObj obj_list = 1;
  inline int obj_list_size() const;
  inline void clear_obj_list();
  static const int kObjListFieldNumber = 1;
  inline const ::ProtoPairObj& obj_list(int index) const;
  inline ::ProtoPairObj* mutable_obj_list(int index);
  inline ::ProtoPairObj* add_obj_list();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >&
      obj_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >*
      mutable_obj_list();
  
  // @@protoc_insertion_point(class_scope:ProtoPairMap)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::ProtoPairObj > obj_list_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoPairMap* default_instance_;
};
// -------------------------------------------------------------------

class ProtoDonateRank : public ::google::protobuf::Message {
 public:
  ProtoDonateRank();
  virtual ~ProtoDonateRank();
  
  ProtoDonateRank(const ProtoDonateRank& from);
  
  inline ProtoDonateRank& operator=(const ProtoDonateRank& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoDonateRank& default_instance();
  
  void Swap(ProtoDonateRank* other);
  
  // implements Message ----------------------------------------------
  
  ProtoDonateRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoDonateRank& from);
  void MergeFrom(const ProtoDonateRank& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);
  
  // optional string role_name = 2;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 2;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  
  // optional int32 vip = 3;
  inline bool has_vip() const;
  inline void clear_vip();
  static const int kVipFieldNumber = 3;
  inline ::google::protobuf::int32 vip() const;
  inline void set_vip(::google::protobuf::int32 value);
  
  // optional int32 contri = 4;
  inline bool has_contri() const;
  inline void clear_contri();
  static const int kContriFieldNumber = 4;
  inline ::google::protobuf::int32 contri() const;
  inline void set_contri(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoDonateRank)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_vip();
  inline void clear_has_vip();
  inline void set_has_contri();
  inline void clear_has_contri();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* role_name_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 vip_;
  ::google::protobuf::int32 contri_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoDonateRank* default_instance_;
};
// -------------------------------------------------------------------

class ProtoMAttackLabel : public ::google::protobuf::Message {
 public:
  ProtoMAttackLabel();
  virtual ~ProtoMAttackLabel();
  
  ProtoMAttackLabel(const ProtoMAttackLabel& from);
  
  inline ProtoMAttackLabel& operator=(const ProtoMAttackLabel& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoMAttackLabel& default_instance();
  
  void Swap(ProtoMAttackLabel* other);
  
  // implements Message ----------------------------------------------
  
  ProtoMAttackLabel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoMAttackLabel& from);
  void MergeFrom(const ProtoMAttackLabel& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 label_id = 1;
  inline bool has_label_id() const;
  inline void clear_label_id();
  static const int kLabelIdFieldNumber = 1;
  inline ::google::protobuf::int32 label_id() const;
  inline void set_label_id(::google::protobuf::int32 value);
  
  // optional int64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::int64 role_id() const;
  inline void set_role_id(::google::protobuf::int64 value);
  
  // optional string role_name = 3;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 3;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  
  // optional int32 role_sex = 4;
  inline bool has_role_sex() const;
  inline void clear_role_sex();
  static const int kRoleSexFieldNumber = 4;
  inline ::google::protobuf::int32 role_sex() const;
  inline void set_role_sex(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoMAttackLabel)
 private:
  inline void set_has_label_id();
  inline void clear_has_label_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_role_sex();
  inline void clear_has_role_sex();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 role_id_;
  ::google::protobuf::int32 label_id_;
  ::google::protobuf::int32 role_sex_;
  ::std::string* role_name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoMAttackLabel* default_instance_;
};
// -------------------------------------------------------------------

class ProtoActivityLWarRank : public ::google::protobuf::Message {
 public:
  ProtoActivityLWarRank();
  virtual ~ProtoActivityLWarRank();
  
  ProtoActivityLWarRank(const ProtoActivityLWarRank& from);
  
  inline ProtoActivityLWarRank& operator=(const ProtoActivityLWarRank& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoActivityLWarRank& default_instance();
  
  void Swap(ProtoActivityLWarRank* other);
  
  // implements Message ----------------------------------------------
  
  ProtoActivityLWarRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoActivityLWarRank& from);
  void MergeFrom(const ProtoActivityLWarRank& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int64 role_id() const;
  inline void set_role_id(::google::protobuf::int64 value);
  
  // optional int32 rank = 2;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);
  
  // optional int32 is_leader = 3;
  inline bool has_is_leader() const;
  inline void clear_is_leader();
  static const int kIsLeaderFieldNumber = 3;
  inline ::google::protobuf::int32 is_leader() const;
  inline void set_is_leader(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoActivityLWarRank)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_is_leader();
  inline void clear_has_is_leader();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 role_id_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 is_leader_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoActivityLWarRank* default_instance_;
};
// -------------------------------------------------------------------

class ProtoChildAchieve : public ::google::protobuf::Message {
 public:
  ProtoChildAchieve();
  virtual ~ProtoChildAchieve();
  
  ProtoChildAchieve(const ProtoChildAchieve& from);
  
  inline ProtoChildAchieve& operator=(const ProtoChildAchieve& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoChildAchieve& default_instance();
  
  void Swap(ProtoChildAchieve* other);
  
  // implements Message ----------------------------------------------
  
  ProtoChildAchieve* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoChildAchieve& from);
  void MergeFrom(const ProtoChildAchieve& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 ach_index = 1;
  inline bool has_ach_index() const;
  inline void clear_ach_index();
  static const int kAchIndexFieldNumber = 1;
  inline ::google::protobuf::int32 ach_index() const;
  inline void set_ach_index(::google::protobuf::int32 value);
  
  // optional int32 base_type = 2;
  inline bool has_base_type() const;
  inline void clear_base_type();
  static const int kBaseTypeFieldNumber = 2;
  inline ::google::protobuf::int32 base_type() const;
  inline void set_base_type(::google::protobuf::int32 value);
  
  // optional int32 child_type = 3;
  inline bool has_child_type() const;
  inline void clear_child_type();
  static const int kChildTypeFieldNumber = 3;
  inline ::google::protobuf::int32 child_type() const;
  inline void set_child_type(::google::protobuf::int32 value);
  
  // optional int32 act_type = 4;
  inline bool has_act_type() const;
  inline void clear_act_type();
  static const int kActTypeFieldNumber = 4;
  inline ::google::protobuf::int32 act_type() const;
  inline void set_act_type(::google::protobuf::int32 value);
  
  // optional int32 compare = 5;
  inline bool has_compare() const;
  inline void clear_compare();
  static const int kCompareFieldNumber = 5;
  inline ::google::protobuf::int32 compare() const;
  inline void set_compare(::google::protobuf::int32 value);
  
  // optional int32 sort = 6;
  inline bool has_sort() const;
  inline void clear_sort();
  static const int kSortFieldNumber = 6;
  inline ::google::protobuf::int32 sort() const;
  inline void set_sort(::google::protobuf::int32 value);
  
  // optional int32 red_point = 7;
  inline bool has_red_point() const;
  inline void clear_red_point();
  static const int kRedPointFieldNumber = 7;
  inline ::google::protobuf::int32 red_point() const;
  inline void set_red_point(::google::protobuf::int32 value);
  
  // repeated .ProtoAchieveInfo achieve_info = 8;
  inline int achieve_info_size() const;
  inline void clear_achieve_info();
  static const int kAchieveInfoFieldNumber = 8;
  inline const ::ProtoAchieveInfo& achieve_info(int index) const;
  inline ::ProtoAchieveInfo* mutable_achieve_info(int index);
  inline ::ProtoAchieveInfo* add_achieve_info();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoAchieveInfo >&
      achieve_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoAchieveInfo >*
      mutable_achieve_info();
  
  // @@protoc_insertion_point(class_scope:ProtoChildAchieve)
 private:
  inline void set_has_ach_index();
  inline void clear_has_ach_index();
  inline void set_has_base_type();
  inline void clear_has_base_type();
  inline void set_has_child_type();
  inline void clear_has_child_type();
  inline void set_has_act_type();
  inline void clear_has_act_type();
  inline void set_has_compare();
  inline void clear_has_compare();
  inline void set_has_sort();
  inline void clear_has_sort();
  inline void set_has_red_point();
  inline void clear_has_red_point();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 ach_index_;
  ::google::protobuf::int32 base_type_;
  ::google::protobuf::int32 child_type_;
  ::google::protobuf::int32 act_type_;
  ::google::protobuf::int32 compare_;
  ::google::protobuf::int32 sort_;
  ::google::protobuf::RepeatedPtrField< ::ProtoAchieveInfo > achieve_info_;
  ::google::protobuf::int32 red_point_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoChildAchieve* default_instance_;
};
// -------------------------------------------------------------------

class ProtoAchieveInfo : public ::google::protobuf::Message {
 public:
  ProtoAchieveInfo();
  virtual ~ProtoAchieveInfo();
  
  ProtoAchieveInfo(const ProtoAchieveInfo& from);
  
  inline ProtoAchieveInfo& operator=(const ProtoAchieveInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoAchieveInfo& default_instance();
  
  void Swap(ProtoAchieveInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProtoAchieveInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoAchieveInfo& from);
  void MergeFrom(const ProtoAchieveInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 achieve_id = 1;
  inline bool has_achieve_id() const;
  inline void clear_achieve_id();
  static const int kAchieveIdFieldNumber = 1;
  inline ::google::protobuf::int32 achieve_id() const;
  inline void set_achieve_id(::google::protobuf::int32 value);
  
  // optional int32 ach_type = 2;
  inline bool has_ach_type() const;
  inline void clear_ach_type();
  static const int kAchTypeFieldNumber = 2;
  inline ::google::protobuf::int32 ach_type() const;
  inline void set_ach_type(::google::protobuf::int32 value);
  
  // optional int32 number_type = 3;
  inline bool has_number_type() const;
  inline void clear_number_type();
  static const int kNumberTypeFieldNumber = 3;
  inline ::google::protobuf::int32 number_type() const;
  inline void set_number_type(::google::protobuf::int32 value);
  
  // optional int32 need_amount = 4;
  inline bool has_need_amount() const;
  inline void clear_need_amount();
  static const int kNeedAmountFieldNumber = 4;
  inline ::google::protobuf::int32 need_amount() const;
  inline void set_need_amount(::google::protobuf::int32 value);
  
  // optional int32 sort = 5;
  inline bool has_sort() const;
  inline void clear_sort();
  static const int kSortFieldNumber = 5;
  inline ::google::protobuf::int32 sort() const;
  inline void set_sort(::google::protobuf::int32 value);
  
  // optional int32 reward_id = 6;
  inline bool has_reward_id() const;
  inline void clear_reward_id();
  static const int kRewardIdFieldNumber = 6;
  inline ::google::protobuf::int32 reward_id() const;
  inline void set_reward_id(::google::protobuf::int32 value);
  
  // optional int32 ach_amount = 7;
  inline bool has_ach_amount() const;
  inline void clear_ach_amount();
  static const int kAchAmountFieldNumber = 7;
  inline ::google::protobuf::int32 ach_amount() const;
  inline void set_ach_amount(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoAchieveInfo)
 private:
  inline void set_has_achieve_id();
  inline void clear_has_achieve_id();
  inline void set_has_ach_type();
  inline void clear_has_ach_type();
  inline void set_has_number_type();
  inline void clear_has_number_type();
  inline void set_has_need_amount();
  inline void clear_has_need_amount();
  inline void set_has_sort();
  inline void clear_has_sort();
  inline void set_has_reward_id();
  inline void clear_has_reward_id();
  inline void set_has_ach_amount();
  inline void clear_has_ach_amount();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 achieve_id_;
  ::google::protobuf::int32 ach_type_;
  ::google::protobuf::int32 number_type_;
  ::google::protobuf::int32 need_amount_;
  ::google::protobuf::int32 sort_;
  ::google::protobuf::int32 reward_id_;
  ::google::protobuf::int32 ach_amount_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoAchieveInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProtoServerRecord : public ::google::protobuf::Message {
 public:
  ProtoServerRecord();
  virtual ~ProtoServerRecord();
  
  ProtoServerRecord(const ProtoServerRecord& from);
  
  inline ProtoServerRecord& operator=(const ProtoServerRecord& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoServerRecord& default_instance();
  
  void Swap(ProtoServerRecord* other);
  
  // implements Message ----------------------------------------------
  
  ProtoServerRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoServerRecord& from);
  void MergeFrom(const ProtoServerRecord& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int64 player_id() const;
  inline void set_player_id(::google::protobuf::int64 value);
  
  // optional string player_name = 2;
  inline bool has_player_name() const;
  inline void clear_player_name();
  static const int kPlayerNameFieldNumber = 2;
  inline const ::std::string& player_name() const;
  inline void set_player_name(const ::std::string& value);
  inline void set_player_name(const char* value);
  inline void set_player_name(const char* value, size_t size);
  inline ::std::string* mutable_player_name();
  inline ::std::string* release_player_name();
  
  // optional int64 get_tme = 3;
  inline bool has_get_tme() const;
  inline void clear_get_tme();
  static const int kGetTmeFieldNumber = 3;
  inline ::google::protobuf::int64 get_tme() const;
  inline void set_get_tme(::google::protobuf::int64 value);
  
  // optional int32 amount = 4;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 4;
  inline ::google::protobuf::int32 amount() const;
  inline void set_amount(::google::protobuf::int32 value);
  
  // optional int32 item_id = 5;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 5;
  inline ::google::protobuf::int32 item_id() const;
  inline void set_item_id(::google::protobuf::int32 value);
  
  // optional int32 item_bind = 6;
  inline bool has_item_bind() const;
  inline void clear_item_bind();
  static const int kItemBindFieldNumber = 6;
  inline ::google::protobuf::int32 item_bind() const;
  inline void set_item_bind(::google::protobuf::int32 value);
  
  // optional int32 reward_mult = 7;
  inline bool has_reward_mult() const;
  inline void clear_reward_mult();
  static const int kRewardMultFieldNumber = 7;
  inline ::google::protobuf::int32 reward_mult() const;
  inline void set_reward_mult(::google::protobuf::int32 value);
  
  // optional int32 sub_value = 8;
  inline bool has_sub_value() const;
  inline void clear_sub_value();
  static const int kSubValueFieldNumber = 8;
  inline ::google::protobuf::int32 sub_value() const;
  inline void set_sub_value(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoServerRecord)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_player_name();
  inline void clear_has_player_name();
  inline void set_has_get_tme();
  inline void clear_has_get_tme();
  inline void set_has_amount();
  inline void clear_has_amount();
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_item_bind();
  inline void clear_has_item_bind();
  inline void set_has_reward_mult();
  inline void clear_has_reward_mult();
  inline void set_has_sub_value();
  inline void clear_has_sub_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 player_id_;
  ::std::string* player_name_;
  ::google::protobuf::int64 get_tme_;
  ::google::protobuf::int32 amount_;
  ::google::protobuf::int32 item_id_;
  ::google::protobuf::int32 item_bind_;
  ::google::protobuf::int32 reward_mult_;
  ::google::protobuf::int32 sub_value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoServerRecord* default_instance_;
};
// -------------------------------------------------------------------

class ProtoSlotInfo : public ::google::protobuf::Message {
 public:
  ProtoSlotInfo();
  virtual ~ProtoSlotInfo();
  
  ProtoSlotInfo(const ProtoSlotInfo& from);
  
  inline ProtoSlotInfo& operator=(const ProtoSlotInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoSlotInfo& default_instance();
  
  void Swap(ProtoSlotInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProtoSlotInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoSlotInfo& from);
  void MergeFrom(const ProtoSlotInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // optional int32 slot_id = 2;
  inline bool has_slot_id() const;
  inline void clear_slot_id();
  static const int kSlotIdFieldNumber = 2;
  inline ::google::protobuf::int32 slot_id() const;
  inline void set_slot_id(::google::protobuf::int32 value);
  
  // optional .ProtoItem item = 3;
  inline bool has_item() const;
  inline void clear_item();
  static const int kItemFieldNumber = 3;
  inline const ::ProtoItem& item() const;
  inline ::ProtoItem* mutable_item();
  inline ::ProtoItem* release_item();
  
  // optional int32 is_precious = 4;
  inline bool has_is_precious() const;
  inline void clear_is_precious();
  static const int kIsPreciousFieldNumber = 4;
  inline ::google::protobuf::int32 is_precious() const;
  inline void set_is_precious(::google::protobuf::int32 value);
  
  // optional int32 pre_cost = 5;
  inline bool has_pre_cost() const;
  inline void clear_pre_cost();
  static const int kPreCostFieldNumber = 5;
  inline ::google::protobuf::int32 pre_cost() const;
  inline void set_pre_cost(::google::protobuf::int32 value);
  
  // optional int32 now_cost = 6;
  inline bool has_now_cost() const;
  inline void clear_now_cost();
  static const int kNowCostFieldNumber = 6;
  inline ::google::protobuf::int32 now_cost() const;
  inline void set_now_cost(::google::protobuf::int32 value);
  
  // optional int32 person_limit = 7;
  inline bool has_person_limit() const;
  inline void clear_person_limit();
  static const int kPersonLimitFieldNumber = 7;
  inline ::google::protobuf::int32 person_limit() const;
  inline void set_person_limit(::google::protobuf::int32 value);
  
  // optional int32 server_limit = 8;
  inline bool has_server_limit() const;
  inline void clear_server_limit();
  static const int kServerLimitFieldNumber = 8;
  inline ::google::protobuf::int32 server_limit() const;
  inline void set_server_limit(::google::protobuf::int32 value);
  
  // optional int32 person_left_limit = 9;
  inline bool has_person_left_limit() const;
  inline void clear_person_left_limit();
  static const int kPersonLeftLimitFieldNumber = 9;
  inline ::google::protobuf::int32 person_left_limit() const;
  inline void set_person_left_limit(::google::protobuf::int32 value);
  
  // optional int32 server_left_limit = 10;
  inline bool has_server_left_limit() const;
  inline void clear_server_left_limit();
  static const int kServerLeftLimitFieldNumber = 10;
  inline ::google::protobuf::int32 server_left_limit() const;
  inline void set_server_left_limit(::google::protobuf::int32 value);
  
  // optional int32 slot_type = 11;
  inline bool has_slot_type() const;
  inline void clear_slot_type();
  static const int kSlotTypeFieldNumber = 11;
  inline ::google::protobuf::int32 slot_type() const;
  inline void set_slot_type(::google::protobuf::int32 value);
  
  // repeated .ProtoPairObj pair_info = 12;
  inline int pair_info_size() const;
  inline void clear_pair_info();
  static const int kPairInfoFieldNumber = 12;
  inline const ::ProtoPairObj& pair_info(int index) const;
  inline ::ProtoPairObj* mutable_pair_info(int index);
  inline ::ProtoPairObj* add_pair_info();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >&
      pair_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >*
      mutable_pair_info();
  
  // @@protoc_insertion_point(class_scope:ProtoSlotInfo)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_slot_id();
  inline void clear_has_slot_id();
  inline void set_has_item();
  inline void clear_has_item();
  inline void set_has_is_precious();
  inline void clear_has_is_precious();
  inline void set_has_pre_cost();
  inline void clear_has_pre_cost();
  inline void set_has_now_cost();
  inline void clear_has_now_cost();
  inline void set_has_person_limit();
  inline void clear_has_person_limit();
  inline void set_has_server_limit();
  inline void clear_has_server_limit();
  inline void set_has_person_left_limit();
  inline void clear_has_person_left_limit();
  inline void set_has_server_left_limit();
  inline void clear_has_server_left_limit();
  inline void set_has_slot_type();
  inline void clear_has_slot_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 slot_id_;
  ::ProtoItem* item_;
  ::google::protobuf::int32 is_precious_;
  ::google::protobuf::int32 pre_cost_;
  ::google::protobuf::int32 now_cost_;
  ::google::protobuf::int32 person_limit_;
  ::google::protobuf::int32 server_limit_;
  ::google::protobuf::int32 person_left_limit_;
  ::google::protobuf::int32 server_left_limit_;
  ::google::protobuf::int32 slot_type_;
  ::google::protobuf::RepeatedPtrField< ::ProtoPairObj > pair_info_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoSlotInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProtoPersonRecord : public ::google::protobuf::Message {
 public:
  ProtoPersonRecord();
  virtual ~ProtoPersonRecord();
  
  ProtoPersonRecord(const ProtoPersonRecord& from);
  
  inline ProtoPersonRecord& operator=(const ProtoPersonRecord& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoPersonRecord& default_instance();
  
  void Swap(ProtoPersonRecord* other);
  
  // implements Message ----------------------------------------------
  
  ProtoPersonRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoPersonRecord& from);
  void MergeFrom(const ProtoPersonRecord& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 amount = 1;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 1;
  inline ::google::protobuf::int32 amount() const;
  inline void set_amount(::google::protobuf::int32 value);
  
  // optional int32 get_time = 2;
  inline bool has_get_time() const;
  inline void clear_get_time();
  static const int kGetTimeFieldNumber = 2;
  inline ::google::protobuf::int32 get_time() const;
  inline void set_get_time(::google::protobuf::int32 value);
  
  // optional int32 item_id = 3;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 3;
  inline ::google::protobuf::int32 item_id() const;
  inline void set_item_id(::google::protobuf::int32 value);
  
  // optional int32 item_bind = 4;
  inline bool has_item_bind() const;
  inline void clear_item_bind();
  static const int kItemBindFieldNumber = 4;
  inline ::google::protobuf::int32 item_bind() const;
  inline void set_item_bind(::google::protobuf::int32 value);
  
  // optional int32 reward_mult = 5;
  inline bool has_reward_mult() const;
  inline void clear_reward_mult();
  static const int kRewardMultFieldNumber = 5;
  inline ::google::protobuf::int32 reward_mult() const;
  inline void set_reward_mult(::google::protobuf::int32 value);
  
  // optional int32 sub_value = 6;
  inline bool has_sub_value() const;
  inline void clear_sub_value();
  static const int kSubValueFieldNumber = 6;
  inline ::google::protobuf::int32 sub_value() const;
  inline void set_sub_value(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoPersonRecord)
 private:
  inline void set_has_amount();
  inline void clear_has_amount();
  inline void set_has_get_time();
  inline void clear_has_get_time();
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_item_bind();
  inline void clear_has_item_bind();
  inline void set_has_reward_mult();
  inline void clear_has_reward_mult();
  inline void set_has_sub_value();
  inline void clear_has_sub_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 amount_;
  ::google::protobuf::int32 get_time_;
  ::google::protobuf::int32 item_id_;
  ::google::protobuf::int32 item_bind_;
  ::google::protobuf::int32 reward_mult_;
  ::google::protobuf::int32 sub_value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoPersonRecord* default_instance_;
};
// -------------------------------------------------------------------

class ProtoTimeLimitInfo : public ::google::protobuf::Message {
 public:
  ProtoTimeLimitInfo();
  virtual ~ProtoTimeLimitInfo();
  
  ProtoTimeLimitInfo(const ProtoTimeLimitInfo& from);
  
  inline ProtoTimeLimitInfo& operator=(const ProtoTimeLimitInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoTimeLimitInfo& default_instance();
  
  void Swap(ProtoTimeLimitInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProtoTimeLimitInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoTimeLimitInfo& from);
  void MergeFrom(const ProtoTimeLimitInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 time_point = 1;
  inline bool has_time_point() const;
  inline void clear_time_point();
  static const int kTimePointFieldNumber = 1;
  inline ::google::protobuf::int32 time_point() const;
  inline void set_time_point(::google::protobuf::int32 value);
  
  // optional int32 time_point_tick = 2;
  inline bool has_time_point_tick() const;
  inline void clear_time_point_tick();
  static const int kTimePointTickFieldNumber = 2;
  inline ::google::protobuf::int32 time_point_tick() const;
  inline void set_time_point_tick(::google::protobuf::int32 value);
  
  // repeated .ProtoSlotInfo slot_info = 3;
  inline int slot_info_size() const;
  inline void clear_slot_info();
  static const int kSlotInfoFieldNumber = 3;
  inline const ::ProtoSlotInfo& slot_info(int index) const;
  inline ::ProtoSlotInfo* mutable_slot_info(int index);
  inline ::ProtoSlotInfo* add_slot_info();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoSlotInfo >&
      slot_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoSlotInfo >*
      mutable_slot_info();
  
  // @@protoc_insertion_point(class_scope:ProtoTimeLimitInfo)
 private:
  inline void set_has_time_point();
  inline void clear_has_time_point();
  inline void set_has_time_point_tick();
  inline void clear_has_time_point_tick();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 time_point_;
  ::google::protobuf::int32 time_point_tick_;
  ::google::protobuf::RepeatedPtrField< ::ProtoSlotInfo > slot_info_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoTimeLimitInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProtoShopInfo : public ::google::protobuf::Message {
 public:
  ProtoShopInfo();
  virtual ~ProtoShopInfo();
  
  ProtoShopInfo(const ProtoShopInfo& from);
  
  inline ProtoShopInfo& operator=(const ProtoShopInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoShopInfo& default_instance();
  
  void Swap(ProtoShopInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProtoShopInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoShopInfo& from);
  void MergeFrom(const ProtoShopInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .ProtoItem item = 1;
  inline bool has_item() const;
  inline void clear_item();
  static const int kItemFieldNumber = 1;
  inline const ::ProtoItem& item() const;
  inline ::ProtoItem* mutable_item();
  inline ::ProtoItem* release_item();
  
  // optional int32 cost = 2;
  inline bool has_cost() const;
  inline void clear_cost();
  static const int kCostFieldNumber = 2;
  inline ::google::protobuf::int32 cost() const;
  inline void set_cost(::google::protobuf::int32 value);
  
  // optional int32 is_buy = 3;
  inline bool has_is_buy() const;
  inline void clear_is_buy();
  static const int kIsBuyFieldNumber = 3;
  inline ::google::protobuf::int32 is_buy() const;
  inline void set_is_buy(::google::protobuf::int32 value);
  
  // optional int32 is_rarity = 4;
  inline bool has_is_rarity() const;
  inline void clear_is_rarity();
  static const int kIsRarityFieldNumber = 4;
  inline ::google::protobuf::int32 is_rarity() const;
  inline void set_is_rarity(::google::protobuf::int32 value);
  
  // optional int32 cost_pre = 5;
  inline bool has_cost_pre() const;
  inline void clear_cost_pre();
  static const int kCostPreFieldNumber = 5;
  inline ::google::protobuf::int32 cost_pre() const;
  inline void set_cost_pre(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoShopInfo)
 private:
  inline void set_has_item();
  inline void clear_has_item();
  inline void set_has_cost();
  inline void clear_has_cost();
  inline void set_has_is_buy();
  inline void clear_has_is_buy();
  inline void set_has_is_rarity();
  inline void clear_has_is_rarity();
  inline void set_has_cost_pre();
  inline void clear_has_cost_pre();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::ProtoItem* item_;
  ::google::protobuf::int32 cost_;
  ::google::protobuf::int32 is_buy_;
  ::google::protobuf::int32 is_rarity_;
  ::google::protobuf::int32 cost_pre_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoShopInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProtoFashionDetail : public ::google::protobuf::Message {
 public:
  ProtoFashionDetail();
  virtual ~ProtoFashionDetail();
  
  ProtoFashionDetail(const ProtoFashionDetail& from);
  
  inline ProtoFashionDetail& operator=(const ProtoFashionDetail& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoFashionDetail& default_instance();
  
  void Swap(ProtoFashionDetail* other);
  
  // implements Message ----------------------------------------------
  
  ProtoFashionDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoFashionDetail& from);
  void MergeFrom(const ProtoFashionDetail& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 fashion_id = 1;
  inline bool has_fashion_id() const;
  inline void clear_fashion_id();
  static const int kFashionIdFieldNumber = 1;
  inline ::google::protobuf::int32 fashion_id() const;
  inline void set_fashion_id(::google::protobuf::int32 value);
  
  // optional int32 active_type = 2;
  inline bool has_active_type() const;
  inline void clear_active_type();
  static const int kActiveTypeFieldNumber = 2;
  inline ::google::protobuf::int32 active_type() const;
  inline void set_active_type(::google::protobuf::int32 value);
  
  // optional int32 color_id = 3;
  inline bool has_color_id() const;
  inline void clear_color_id();
  static const int kColorIdFieldNumber = 3;
  inline ::google::protobuf::int32 color_id() const;
  inline void set_color_id(::google::protobuf::int32 value);
  
  // optional int32 is_permanent = 4;
  inline bool has_is_permanent() const;
  inline void clear_is_permanent();
  static const int kIsPermanentFieldNumber = 4;
  inline ::google::protobuf::int32 is_permanent() const;
  inline void set_is_permanent(::google::protobuf::int32 value);
  
  // optional int64 active_tick = 5;
  inline bool has_active_tick() const;
  inline void clear_active_tick();
  static const int kActiveTickFieldNumber = 5;
  inline ::google::protobuf::int64 active_tick() const;
  inline void set_active_tick(::google::protobuf::int64 value);
  
  // optional int64 end_tick = 6;
  inline bool has_end_tick() const;
  inline void clear_end_tick();
  static const int kEndTickFieldNumber = 6;
  inline ::google::protobuf::int64 end_tick() const;
  inline void set_end_tick(::google::protobuf::int64 value);
  
  // repeated int32 color_set = 7;
  inline int color_set_size() const;
  inline void clear_color_set();
  static const int kColorSetFieldNumber = 7;
  inline ::google::protobuf::int32 color_set(int index) const;
  inline void set_color_set(int index, ::google::protobuf::int32 value);
  inline void add_color_set(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      color_set() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_color_set();
  
  // @@protoc_insertion_point(class_scope:ProtoFashionDetail)
 private:
  inline void set_has_fashion_id();
  inline void clear_has_fashion_id();
  inline void set_has_active_type();
  inline void clear_has_active_type();
  inline void set_has_color_id();
  inline void clear_has_color_id();
  inline void set_has_is_permanent();
  inline void clear_has_is_permanent();
  inline void set_has_active_tick();
  inline void clear_has_active_tick();
  inline void set_has_end_tick();
  inline void clear_has_end_tick();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 fashion_id_;
  ::google::protobuf::int32 active_type_;
  ::google::protobuf::int32 color_id_;
  ::google::protobuf::int32 is_permanent_;
  ::google::protobuf::int64 active_tick_;
  ::google::protobuf::int64 end_tick_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > color_set_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoFashionDetail* default_instance_;
};
// -------------------------------------------------------------------

class ProtoWeddingDetail : public ::google::protobuf::Message {
 public:
  ProtoWeddingDetail();
  virtual ~ProtoWeddingDetail();
  
  ProtoWeddingDetail(const ProtoWeddingDetail& from);
  
  inline ProtoWeddingDetail& operator=(const ProtoWeddingDetail& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoWeddingDetail& default_instance();
  
  void Swap(ProtoWeddingDetail* other);
  
  // implements Message ----------------------------------------------
  
  ProtoWeddingDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoWeddingDetail& from);
  void MergeFrom(const ProtoWeddingDetail& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int32 order = 2;
  inline bool has_order() const;
  inline void clear_order();
  static const int kOrderFieldNumber = 2;
  inline ::google::protobuf::int32 order() const;
  inline void set_order(::google::protobuf::int32 value);
  
  // optional int32 side_level = 3;
  inline bool has_side_level() const;
  inline void clear_side_level();
  static const int kSideLevelFieldNumber = 3;
  inline ::google::protobuf::int32 side_level() const;
  inline void set_side_level(::google::protobuf::int32 value);
  
  // optional int32 side_order = 4;
  inline bool has_side_order() const;
  inline void clear_side_order();
  static const int kSideOrderFieldNumber = 4;
  inline ::google::protobuf::int32 side_order() const;
  inline void set_side_order(::google::protobuf::int32 value);
  
  // optional int32 exp = 5;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 5;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);
  
  // optional int32 is_open = 6;
  inline bool has_is_open() const;
  inline void clear_is_open();
  static const int kIsOpenFieldNumber = 6;
  inline ::google::protobuf::int32 is_open() const;
  inline void set_is_open(::google::protobuf::int32 value);
  
  // optional .ProtoFightPro pro_list = 7;
  inline bool has_pro_list() const;
  inline void clear_pro_list();
  static const int kProListFieldNumber = 7;
  inline const ::ProtoFightPro& pro_list() const;
  inline ::ProtoFightPro* mutable_pro_list();
  inline ::ProtoFightPro* release_pro_list();
  
  // optional .ProtoThreeObj other_info = 8;
  inline bool has_other_info() const;
  inline void clear_other_info();
  static const int kOtherInfoFieldNumber = 8;
  inline const ::ProtoThreeObj& other_info() const;
  inline ::ProtoThreeObj* mutable_other_info();
  inline ::ProtoThreeObj* release_other_info();
  
  // @@protoc_insertion_point(class_scope:ProtoWeddingDetail)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_order();
  inline void clear_has_order();
  inline void set_has_side_level();
  inline void clear_has_side_level();
  inline void set_has_side_order();
  inline void clear_has_side_order();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_is_open();
  inline void clear_has_is_open();
  inline void set_has_pro_list();
  inline void clear_has_pro_list();
  inline void set_has_other_info();
  inline void clear_has_other_info();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 order_;
  ::google::protobuf::int32 side_level_;
  ::google::protobuf::int32 side_order_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 is_open_;
  ::ProtoFightPro* pro_list_;
  ::ProtoThreeObj* other_info_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoWeddingDetail* default_instance_;
};
// -------------------------------------------------------------------

class ProtoWedTreasures : public ::google::protobuf::Message {
 public:
  ProtoWedTreasures();
  virtual ~ProtoWedTreasures();
  
  ProtoWedTreasures(const ProtoWedTreasures& from);
  
  inline ProtoWedTreasures& operator=(const ProtoWedTreasures& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoWedTreasures& default_instance();
  
  void Swap(ProtoWedTreasures* other);
  
  // implements Message ----------------------------------------------
  
  ProtoWedTreasures* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoWedTreasures& from);
  void MergeFrom(const ProtoWedTreasures& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 buy_tick = 1;
  inline bool has_buy_tick() const;
  inline void clear_buy_tick();
  static const int kBuyTickFieldNumber = 1;
  inline ::google::protobuf::int64 buy_tick() const;
  inline void set_buy_tick(::google::protobuf::int64 value);
  
  // optional int32 is_fetch = 2;
  inline bool has_is_fetch() const;
  inline void clear_is_fetch();
  static const int kIsFetchFieldNumber = 2;
  inline ::google::protobuf::int32 is_fetch() const;
  inline void set_is_fetch(::google::protobuf::int32 value);
  
  // optional int32 left_time = 3;
  inline bool has_left_time() const;
  inline void clear_left_time();
  static const int kLeftTimeFieldNumber = 3;
  inline ::google::protobuf::int32 left_time() const;
  inline void set_left_time(::google::protobuf::int32 value);
  
  // optional int32 type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoWedTreasures)
 private:
  inline void set_has_buy_tick();
  inline void clear_has_buy_tick();
  inline void set_has_is_fetch();
  inline void clear_has_is_fetch();
  inline void set_has_left_time();
  inline void clear_has_left_time();
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 buy_tick_;
  ::google::protobuf::int32 is_fetch_;
  ::google::protobuf::int32 left_time_;
  ::google::protobuf::int32 type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoWedTreasures* default_instance_;
};
// -------------------------------------------------------------------

class ProtoWeddingRole : public ::google::protobuf::Message {
 public:
  ProtoWeddingRole();
  virtual ~ProtoWeddingRole();
  
  ProtoWeddingRole(const ProtoWeddingRole& from);
  
  inline ProtoWeddingRole& operator=(const ProtoWeddingRole& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoWeddingRole& default_instance();
  
  void Swap(ProtoWeddingRole* other);
  
  // implements Message ----------------------------------------------
  
  ProtoWeddingRole* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoWeddingRole& from);
  void MergeFrom(const ProtoWeddingRole& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int64 role_id() const;
  inline void set_role_id(::google::protobuf::int64 value);
  
  // optional string role_name = 2;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 2;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  
  // optional int32 sex = 3;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 3;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoWeddingRole)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_sex();
  inline void clear_has_sex();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 role_id_;
  ::std::string* role_name_;
  ::google::protobuf::int32 sex_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoWeddingRole* default_instance_;
};
// -------------------------------------------------------------------

class ProtoWeddingRank : public ::google::protobuf::Message {
 public:
  ProtoWeddingRank();
  virtual ~ProtoWeddingRank();
  
  ProtoWeddingRank(const ProtoWeddingRank& from);
  
  inline ProtoWeddingRank& operator=(const ProtoWeddingRank& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoWeddingRank& default_instance();
  
  void Swap(ProtoWeddingRank* other);
  
  // implements Message ----------------------------------------------
  
  ProtoWeddingRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoWeddingRank& from);
  void MergeFrom(const ProtoWeddingRank& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);
  
  // optional int64 tick = 2;
  inline bool has_tick() const;
  inline void clear_tick();
  static const int kTickFieldNumber = 2;
  inline ::google::protobuf::int64 tick() const;
  inline void set_tick(::google::protobuf::int64 value);
  
  // optional int32 server_id = 3;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 3;
  inline ::google::protobuf::int32 server_id() const;
  inline void set_server_id(::google::protobuf::int32 value);
  
  // optional string server_flag = 4;
  inline bool has_server_flag() const;
  inline void clear_server_flag();
  static const int kServerFlagFieldNumber = 4;
  inline const ::std::string& server_flag() const;
  inline void set_server_flag(const ::std::string& value);
  inline void set_server_flag(const char* value);
  inline void set_server_flag(const char* value, size_t size);
  inline ::std::string* mutable_server_flag();
  inline ::std::string* release_server_flag();
  
  // optional string server_prev = 5;
  inline bool has_server_prev() const;
  inline void clear_server_prev();
  static const int kServerPrevFieldNumber = 5;
  inline const ::std::string& server_prev() const;
  inline void set_server_prev(const ::std::string& value);
  inline void set_server_prev(const char* value);
  inline void set_server_prev(const char* value, size_t size);
  inline ::std::string* mutable_server_prev();
  inline ::std::string* release_server_prev();
  
  // optional string server_name = 6;
  inline bool has_server_name() const;
  inline void clear_server_name();
  static const int kServerNameFieldNumber = 6;
  inline const ::std::string& server_name() const;
  inline void set_server_name(const ::std::string& value);
  inline void set_server_name(const char* value);
  inline void set_server_name(const char* value, size_t size);
  inline ::std::string* mutable_server_name();
  inline ::std::string* release_server_name();
  
  // optional .ProtoWeddingRole player1 = 7;
  inline bool has_player1() const;
  inline void clear_player1();
  static const int kPlayer1FieldNumber = 7;
  inline const ::ProtoWeddingRole& player1() const;
  inline ::ProtoWeddingRole* mutable_player1();
  inline ::ProtoWeddingRole* release_player1();
  
  // optional .ProtoWeddingRole player2 = 8;
  inline bool has_player2() const;
  inline void clear_player2();
  static const int kPlayer2FieldNumber = 8;
  inline const ::ProtoWeddingRole& player2() const;
  inline ::ProtoWeddingRole* mutable_player2();
  inline ::ProtoWeddingRole* release_player2();
  
  // @@protoc_insertion_point(class_scope:ProtoWeddingRank)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_tick();
  inline void clear_has_tick();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_server_flag();
  inline void clear_has_server_flag();
  inline void set_has_server_prev();
  inline void clear_has_server_prev();
  inline void set_has_server_name();
  inline void clear_has_server_name();
  inline void set_has_player1();
  inline void clear_has_player1();
  inline void set_has_player2();
  inline void clear_has_player2();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 tick_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 server_id_;
  ::std::string* server_flag_;
  ::std::string* server_prev_;
  ::std::string* server_name_;
  ::ProtoWeddingRole* player1_;
  ::ProtoWeddingRole* player2_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoWeddingRank* default_instance_;
};
// -------------------------------------------------------------------

class ProtoWedLabel : public ::google::protobuf::Message {
 public:
  ProtoWedLabel();
  virtual ~ProtoWedLabel();
  
  ProtoWedLabel(const ProtoWedLabel& from);
  
  inline ProtoWedLabel& operator=(const ProtoWedLabel& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoWedLabel& default_instance();
  
  void Swap(ProtoWedLabel* other);
  
  // implements Message ----------------------------------------------
  
  ProtoWedLabel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoWedLabel& from);
  void MergeFrom(const ProtoWedLabel& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 label_id = 2;
  inline bool has_label_id() const;
  inline void clear_label_id();
  static const int kLabelIdFieldNumber = 2;
  inline ::google::protobuf::int32 label_id() const;
  inline void set_label_id(::google::protobuf::int32 value);
  
  // optional int32 ring_level_limit = 3;
  inline bool has_ring_level_limit() const;
  inline void clear_ring_level_limit();
  static const int kRingLevelLimitFieldNumber = 3;
  inline ::google::protobuf::int32 ring_level_limit() const;
  inline void set_ring_level_limit(::google::protobuf::int32 value);
  
  // optional int32 sys_level_limit = 4;
  inline bool has_sys_level_limit() const;
  inline void clear_sys_level_limit();
  static const int kSysLevelLimitFieldNumber = 4;
  inline ::google::protobuf::int32 sys_level_limit() const;
  inline void set_sys_level_limit(::google::protobuf::int32 value);
  
  // optional int32 tree_level_limit = 5;
  inline bool has_tree_level_limit() const;
  inline void clear_tree_level_limit();
  static const int kTreeLevelLimitFieldNumber = 5;
  inline ::google::protobuf::int32 tree_level_limit() const;
  inline void set_tree_level_limit(::google::protobuf::int32 value);
  
  // optional int32 status = 6;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 6;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);
  
  // optional .ProtoThreeObj other_info = 7;
  inline bool has_other_info() const;
  inline void clear_other_info();
  static const int kOtherInfoFieldNumber = 7;
  inline const ::ProtoThreeObj& other_info() const;
  inline ::ProtoThreeObj* mutable_other_info();
  inline ::ProtoThreeObj* release_other_info();
  
  // @@protoc_insertion_point(class_scope:ProtoWedLabel)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_label_id();
  inline void clear_has_label_id();
  inline void set_has_ring_level_limit();
  inline void clear_has_ring_level_limit();
  inline void set_has_sys_level_limit();
  inline void clear_has_sys_level_limit();
  inline void set_has_tree_level_limit();
  inline void clear_has_tree_level_limit();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_other_info();
  inline void clear_has_other_info();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 label_id_;
  ::google::protobuf::int32 ring_level_limit_;
  ::google::protobuf::int32 sys_level_limit_;
  ::google::protobuf::int32 tree_level_limit_;
  ::google::protobuf::int32 status_;
  ::ProtoThreeObj* other_info_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoWedLabel* default_instance_;
};
// -------------------------------------------------------------------

class ProtoActRankInfo : public ::google::protobuf::Message {
 public:
  ProtoActRankInfo();
  virtual ~ProtoActRankInfo();
  
  ProtoActRankInfo(const ProtoActRankInfo& from);
  
  inline ProtoActRankInfo& operator=(const ProtoActRankInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoActRankInfo& default_instance();
  
  void Swap(ProtoActRankInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProtoActRankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoActRankInfo& from);
  void MergeFrom(const ProtoActRankInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);
  
  // optional int64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::int64 role_id() const;
  inline void set_role_id(::google::protobuf::int64 value);
  
  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional int32 rank_value = 4;
  inline bool has_rank_value() const;
  inline void clear_rank_value();
  static const int kRankValueFieldNumber = 4;
  inline ::google::protobuf::int32 rank_value() const;
  inline void set_rank_value(::google::protobuf::int32 value);
  
  // optional int64 tick = 5;
  inline bool has_tick() const;
  inline void clear_tick();
  static const int kTickFieldNumber = 5;
  inline ::google::protobuf::int64 tick() const;
  inline void set_tick(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:ProtoActRankInfo)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_rank_value();
  inline void clear_has_rank_value();
  inline void set_has_tick();
  inline void clear_has_tick();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 role_id_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 rank_value_;
  ::std::string* name_;
  ::google::protobuf::int64 tick_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoActRankInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProtoWaveReward : public ::google::protobuf::Message {
 public:
  ProtoWaveReward();
  virtual ~ProtoWaveReward();
  
  ProtoWaveReward(const ProtoWaveReward& from);
  
  inline ProtoWaveReward& operator=(const ProtoWaveReward& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoWaveReward& default_instance();
  
  void Swap(ProtoWaveReward* other);
  
  // implements Message ----------------------------------------------
  
  ProtoWaveReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoWaveReward& from);
  void MergeFrom(const ProtoWaveReward& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 wave = 1;
  inline bool has_wave() const;
  inline void clear_wave();
  static const int kWaveFieldNumber = 1;
  inline ::google::protobuf::int32 wave() const;
  inline void set_wave(::google::protobuf::int32 value);
  
  // optional int32 amount = 2;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 2;
  inline ::google::protobuf::int32 amount() const;
  inline void set_amount(::google::protobuf::int32 value);
  
  // repeated .ProtoPairObj obj = 3;
  inline int obj_size() const;
  inline void clear_obj();
  static const int kObjFieldNumber = 3;
  inline const ::ProtoPairObj& obj(int index) const;
  inline ::ProtoPairObj* mutable_obj(int index);
  inline ::ProtoPairObj* add_obj();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >&
      obj() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >*
      mutable_obj();
  
  // @@protoc_insertion_point(class_scope:ProtoWaveReward)
 private:
  inline void set_has_wave();
  inline void clear_has_wave();
  inline void set_has_amount();
  inline void clear_has_amount();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 wave_;
  ::google::protobuf::int32 amount_;
  ::google::protobuf::RepeatedPtrField< ::ProtoPairObj > obj_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoWaveReward* default_instance_;
};
// -------------------------------------------------------------------

class ProtoPlayerCheer : public ::google::protobuf::Message {
 public:
  ProtoPlayerCheer();
  virtual ~ProtoPlayerCheer();
  
  ProtoPlayerCheer(const ProtoPlayerCheer& from);
  
  inline ProtoPlayerCheer& operator=(const ProtoPlayerCheer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoPlayerCheer& default_instance();
  
  void Swap(ProtoPlayerCheer* other);
  
  // implements Message ----------------------------------------------
  
  ProtoPlayerCheer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoPlayerCheer& from);
  void MergeFrom(const ProtoPlayerCheer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int64 role_id() const;
  inline void set_role_id(::google::protobuf::int64 value);
  
  // optional string role_name = 2;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 2;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  
  // optional int32 wave = 3;
  inline bool has_wave() const;
  inline void clear_wave();
  static const int kWaveFieldNumber = 3;
  inline ::google::protobuf::int32 wave() const;
  inline void set_wave(::google::protobuf::int32 value);
  
  // optional int32 is_cheer = 4;
  inline bool has_is_cheer() const;
  inline void clear_is_cheer();
  static const int kIsCheerFieldNumber = 4;
  inline ::google::protobuf::int32 is_cheer() const;
  inline void set_is_cheer(::google::protobuf::int32 value);
  
  // optional int32 is_encourage = 5;
  inline bool has_is_encourage() const;
  inline void clear_is_encourage();
  static const int kIsEncourageFieldNumber = 5;
  inline ::google::protobuf::int32 is_encourage() const;
  inline void set_is_encourage(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoPlayerCheer)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_wave();
  inline void clear_has_wave();
  inline void set_has_is_cheer();
  inline void clear_has_is_cheer();
  inline void set_has_is_encourage();
  inline void clear_has_is_encourage();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 role_id_;
  ::std::string* role_name_;
  ::google::protobuf::int32 wave_;
  ::google::protobuf::int32 is_cheer_;
  ::google::protobuf::int32 is_encourage_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoPlayerCheer* default_instance_;
};
// -------------------------------------------------------------------

class ProtoCheerRecord : public ::google::protobuf::Message {
 public:
  ProtoCheerRecord();
  virtual ~ProtoCheerRecord();
  
  ProtoCheerRecord(const ProtoCheerRecord& from);
  
  inline ProtoCheerRecord& operator=(const ProtoCheerRecord& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoCheerRecord& default_instance();
  
  void Swap(ProtoCheerRecord* other);
  
  // implements Message ----------------------------------------------
  
  ProtoCheerRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoCheerRecord& from);
  void MergeFrom(const ProtoCheerRecord& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int64 role_id() const;
  inline void set_role_id(::google::protobuf::int64 value);
  
  // optional string role_name = 2;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 2;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  
  // optional int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional int32 is_active = 4;
  inline bool has_is_active() const;
  inline void clear_is_active();
  static const int kIsActiveFieldNumber = 4;
  inline ::google::protobuf::int32 is_active() const;
  inline void set_is_active(::google::protobuf::int32 value);
  
  // optional int32 time = 5;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoCheerRecord)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_is_active();
  inline void clear_has_is_active();
  inline void set_has_time();
  inline void clear_has_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 role_id_;
  ::std::string* role_name_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 is_active_;
  ::google::protobuf::int32 time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoCheerRecord* default_instance_;
};
// -------------------------------------------------------------------

class ProtoRechargeRank : public ::google::protobuf::Message {
 public:
  ProtoRechargeRank();
  virtual ~ProtoRechargeRank();
  
  ProtoRechargeRank(const ProtoRechargeRank& from);
  
  inline ProtoRechargeRank& operator=(const ProtoRechargeRank& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoRechargeRank& default_instance();
  
  void Swap(ProtoRechargeRank* other);
  
  // implements Message ----------------------------------------------
  
  ProtoRechargeRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoRechargeRank& from);
  void MergeFrom(const ProtoRechargeRank& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int64 role_id() const;
  inline void set_role_id(::google::protobuf::int64 value);
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional int32 rank = 3;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 3;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);
  
  // optional int32 amount = 4;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 4;
  inline ::google::protobuf::int32 amount() const;
  inline void set_amount(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoRechargeRank)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_amount();
  inline void clear_has_amount();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 role_id_;
  ::std::string* name_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 amount_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoRechargeRank* default_instance_;
};
// -------------------------------------------------------------------

class ProtoMountInfo : public ::google::protobuf::Message {
 public:
  ProtoMountInfo();
  virtual ~ProtoMountInfo();
  
  ProtoMountInfo(const ProtoMountInfo& from);
  
  inline ProtoMountInfo& operator=(const ProtoMountInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoMountInfo& default_instance();
  
  void Swap(ProtoMountInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProtoMountInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoMountInfo& from);
  void MergeFrom(const ProtoMountInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 mount_grade = 1;
  inline bool has_mount_grade() const;
  inline void clear_mount_grade();
  static const int kMountGradeFieldNumber = 1;
  inline ::google::protobuf::int32 mount_grade() const;
  inline void set_mount_grade(::google::protobuf::int32 value);
  
  // optional int32 mount_shape = 2;
  inline bool has_mount_shape() const;
  inline void clear_mount_shape();
  static const int kMountShapeFieldNumber = 2;
  inline ::google::protobuf::int32 mount_shape() const;
  inline void set_mount_shape(::google::protobuf::int32 value);
  
  // optional int32 force = 3;
  inline bool has_force() const;
  inline void clear_force();
  static const int kForceFieldNumber = 3;
  inline ::google::protobuf::int32 force() const;
  inline void set_force(::google::protobuf::int32 value);
  
  // optional .ProtoFightPro prop = 4;
  inline bool has_prop() const;
  inline void clear_prop();
  static const int kPropFieldNumber = 4;
  inline const ::ProtoFightPro& prop() const;
  inline ::ProtoFightPro* mutable_prop();
  inline ::ProtoFightPro* release_prop();
  
  // optional int32 type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional .ProtoFightPro temp = 6;
  inline bool has_temp() const;
  inline void clear_temp();
  static const int kTempFieldNumber = 6;
  inline const ::ProtoFightPro& temp() const;
  inline ::ProtoFightPro* mutable_temp();
  inline ::ProtoFightPro* release_temp();
  
  // repeated .ProtoSkill skill = 7;
  inline int skill_size() const;
  inline void clear_skill();
  static const int kSkillFieldNumber = 7;
  inline const ::ProtoSkill& skill(int index) const;
  inline ::ProtoSkill* mutable_skill(int index);
  inline ::ProtoSkill* add_skill();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoSkill >&
      skill() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoSkill >*
      mutable_skill();
  
  // optional int32 act_shape = 8;
  inline bool has_act_shape() const;
  inline void clear_act_shape();
  static const int kActShapeFieldNumber = 8;
  inline ::google::protobuf::int32 act_shape() const;
  inline void set_act_shape(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoMountInfo)
 private:
  inline void set_has_mount_grade();
  inline void clear_has_mount_grade();
  inline void set_has_mount_shape();
  inline void clear_has_mount_shape();
  inline void set_has_force();
  inline void clear_has_force();
  inline void set_has_prop();
  inline void clear_has_prop();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_temp();
  inline void clear_has_temp();
  inline void set_has_act_shape();
  inline void clear_has_act_shape();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 mount_grade_;
  ::google::protobuf::int32 mount_shape_;
  ::ProtoFightPro* prop_;
  ::google::protobuf::int32 force_;
  ::google::protobuf::int32 type_;
  ::ProtoFightPro* temp_;
  ::google::protobuf::RepeatedPtrField< ::ProtoSkill > skill_;
  ::google::protobuf::int32 act_shape_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoMountInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProtoEquipList : public ::google::protobuf::Message {
 public:
  ProtoEquipList();
  virtual ~ProtoEquipList();
  
  ProtoEquipList(const ProtoEquipList& from);
  
  inline ProtoEquipList& operator=(const ProtoEquipList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoEquipList& default_instance();
  
  void Swap(ProtoEquipList* other);
  
  // implements Message ----------------------------------------------
  
  ProtoEquipList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoEquipList& from);
  void MergeFrom(const ProtoEquipList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 pack_type = 1;
  inline bool has_pack_type() const;
  inline void clear_pack_type();
  static const int kPackTypeFieldNumber = 1;
  inline ::google::protobuf::int32 pack_type() const;
  inline void set_pack_type(::google::protobuf::int32 value);
  
  // repeated .ProtoItem pack_item_list = 2;
  inline int pack_item_list_size() const;
  inline void clear_pack_item_list();
  static const int kPackItemListFieldNumber = 2;
  inline const ::ProtoItem& pack_item_list(int index) const;
  inline ::ProtoItem* mutable_pack_item_list(int index);
  inline ::ProtoItem* add_pack_item_list();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoItem >&
      pack_item_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoItem >*
      mutable_pack_item_list();
  
  // @@protoc_insertion_point(class_scope:ProtoEquipList)
 private:
  inline void set_has_pack_type();
  inline void clear_has_pack_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::ProtoItem > pack_item_list_;
  ::google::protobuf::int32 pack_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoEquipList* default_instance_;
};
// -------------------------------------------------------------------

class PActCumulativeLogin : public ::google::protobuf::Message {
 public:
  PActCumulativeLogin();
  virtual ~PActCumulativeLogin();
  
  PActCumulativeLogin(const PActCumulativeLogin& from);
  
  inline PActCumulativeLogin& operator=(const PActCumulativeLogin& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PActCumulativeLogin& default_instance();
  
  void Swap(PActCumulativeLogin* other);
  
  // implements Message ----------------------------------------------
  
  PActCumulativeLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PActCumulativeLogin& from);
  void MergeFrom(const PActCumulativeLogin& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 single = 1;
  inline bool has_single() const;
  inline void clear_single();
  static const int kSingleFieldNumber = 1;
  inline ::google::protobuf::int32 single() const;
  inline void set_single(::google::protobuf::int32 value);
  
  // optional int32 ten = 2;
  inline bool has_ten() const;
  inline void clear_ten();
  static const int kTenFieldNumber = 2;
  inline ::google::protobuf::int32 ten() const;
  inline void set_ten(::google::protobuf::int32 value);
  
  // optional int32 hundred = 3;
  inline bool has_hundred() const;
  inline void clear_hundred();
  static const int kHundredFieldNumber = 3;
  inline ::google::protobuf::int32 hundred() const;
  inline void set_hundred(::google::protobuf::int32 value);
  
  // optional int32 multiple = 4;
  inline bool has_multiple() const;
  inline void clear_multiple();
  static const int kMultipleFieldNumber = 4;
  inline ::google::protobuf::int32 multiple() const;
  inline void set_multiple(::google::protobuf::int32 value);
  
  // optional int32 single_state = 5;
  inline bool has_single_state() const;
  inline void clear_single_state();
  static const int kSingleStateFieldNumber = 5;
  inline ::google::protobuf::int32 single_state() const;
  inline void set_single_state(::google::protobuf::int32 value);
  
  // optional int32 ten_state = 6;
  inline bool has_ten_state() const;
  inline void clear_ten_state();
  static const int kTenStateFieldNumber = 6;
  inline ::google::protobuf::int32 ten_state() const;
  inline void set_ten_state(::google::protobuf::int32 value);
  
  // optional int32 hundred_state = 7;
  inline bool has_hundred_state() const;
  inline void clear_hundred_state();
  static const int kHundredStateFieldNumber = 7;
  inline ::google::protobuf::int32 hundred_state() const;
  inline void set_hundred_state(::google::protobuf::int32 value);
  
  // optional int32 multiple_state = 8;
  inline bool has_multiple_state() const;
  inline void clear_multiple_state();
  static const int kMultipleStateFieldNumber = 8;
  inline ::google::protobuf::int32 multiple_state() const;
  inline void set_multiple_state(::google::protobuf::int32 value);
  
  // optional int32 login_count = 9;
  inline bool has_login_count() const;
  inline void clear_login_count();
  static const int kLoginCountFieldNumber = 9;
  inline ::google::protobuf::int32 login_count() const;
  inline void set_login_count(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PActCumulativeLogin)
 private:
  inline void set_has_single();
  inline void clear_has_single();
  inline void set_has_ten();
  inline void clear_has_ten();
  inline void set_has_hundred();
  inline void clear_has_hundred();
  inline void set_has_multiple();
  inline void clear_has_multiple();
  inline void set_has_single_state();
  inline void clear_has_single_state();
  inline void set_has_ten_state();
  inline void clear_has_ten_state();
  inline void set_has_hundred_state();
  inline void clear_has_hundred_state();
  inline void set_has_multiple_state();
  inline void clear_has_multiple_state();
  inline void set_has_login_count();
  inline void clear_has_login_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 single_;
  ::google::protobuf::int32 ten_;
  ::google::protobuf::int32 hundred_;
  ::google::protobuf::int32 multiple_;
  ::google::protobuf::int32 single_state_;
  ::google::protobuf::int32 ten_state_;
  ::google::protobuf::int32 hundred_state_;
  ::google::protobuf::int32 multiple_state_;
  ::google::protobuf::int32 login_count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static PActCumulativeLogin* default_instance_;
};
// -------------------------------------------------------------------

class ProtoLegendTop : public ::google::protobuf::Message {
 public:
  ProtoLegendTop();
  virtual ~ProtoLegendTop();
  
  ProtoLegendTop(const ProtoLegendTop& from);
  
  inline ProtoLegendTop& operator=(const ProtoLegendTop& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoLegendTop& default_instance();
  
  void Swap(ProtoLegendTop* other);
  
  // implements Message ----------------------------------------------
  
  ProtoLegendTop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoLegendTop& from);
  void MergeFrom(const ProtoLegendTop& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 pass_floor = 1;
  inline bool has_pass_floor() const;
  inline void clear_pass_floor();
  static const int kPassFloorFieldNumber = 1;
  inline ::google::protobuf::int32 pass_floor() const;
  inline void set_pass_floor(::google::protobuf::int32 value);
  
  // optional int32 today_rank = 2;
  inline bool has_today_rank() const;
  inline void clear_today_rank();
  static const int kTodayRankFieldNumber = 2;
  inline ::google::protobuf::int32 today_rank() const;
  inline void set_today_rank(::google::protobuf::int32 value);
  
  // optional int32 is_sweep = 3;
  inline bool has_is_sweep() const;
  inline void clear_is_sweep();
  static const int kIsSweepFieldNumber = 3;
  inline ::google::protobuf::int32 is_sweep() const;
  inline void set_is_sweep(::google::protobuf::int32 value);
  
  // repeated .ProtoFloorInfo floor_info = 4;
  inline int floor_info_size() const;
  inline void clear_floor_info();
  static const int kFloorInfoFieldNumber = 4;
  inline const ::ProtoFloorInfo& floor_info(int index) const;
  inline ::ProtoFloorInfo* mutable_floor_info(int index);
  inline ::ProtoFloorInfo* add_floor_info();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoFloorInfo >&
      floor_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoFloorInfo >*
      mutable_floor_info();
  
  // @@protoc_insertion_point(class_scope:ProtoLegendTop)
 private:
  inline void set_has_pass_floor();
  inline void clear_has_pass_floor();
  inline void set_has_today_rank();
  inline void clear_has_today_rank();
  inline void set_has_is_sweep();
  inline void clear_has_is_sweep();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 pass_floor_;
  ::google::protobuf::int32 today_rank_;
  ::google::protobuf::RepeatedPtrField< ::ProtoFloorInfo > floor_info_;
  ::google::protobuf::int32 is_sweep_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoLegendTop* default_instance_;
};
// -------------------------------------------------------------------

class ProtoWavePlayer : public ::google::protobuf::Message {
 public:
  ProtoWavePlayer();
  virtual ~ProtoWavePlayer();
  
  ProtoWavePlayer(const ProtoWavePlayer& from);
  
  inline ProtoWavePlayer& operator=(const ProtoWavePlayer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoWavePlayer& default_instance();
  
  void Swap(ProtoWavePlayer* other);
  
  // implements Message ----------------------------------------------
  
  ProtoWavePlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoWavePlayer& from);
  void MergeFrom(const ProtoWavePlayer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int64 role_id() const;
  inline void set_role_id(::google::protobuf::int64 value);
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional int32 sex = 3;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 3;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);
  
  // optional int32 wave = 4;
  inline bool has_wave() const;
  inline void clear_wave();
  static const int kWaveFieldNumber = 4;
  inline ::google::protobuf::int32 wave() const;
  inline void set_wave(::google::protobuf::int32 value);
  
  // optional int64 tick = 5;
  inline bool has_tick() const;
  inline void clear_tick();
  static const int kTickFieldNumber = 5;
  inline ::google::protobuf::int64 tick() const;
  inline void set_tick(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:ProtoWavePlayer)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_wave();
  inline void clear_has_wave();
  inline void set_has_tick();
  inline void clear_has_tick();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 role_id_;
  ::std::string* name_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 wave_;
  ::google::protobuf::int64 tick_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoWavePlayer* default_instance_;
};
// -------------------------------------------------------------------

class ProtoTransferInfo : public ::google::protobuf::Message {
 public:
  ProtoTransferInfo();
  virtual ~ProtoTransferInfo();
  
  ProtoTransferInfo(const ProtoTransferInfo& from);
  
  inline ProtoTransferInfo& operator=(const ProtoTransferInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoTransferInfo& default_instance();
  
  void Swap(ProtoTransferInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProtoTransferInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoTransferInfo& from);
  void MergeFrom(const ProtoTransferInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 transfer_id = 1;
  inline bool has_transfer_id() const;
  inline void clear_transfer_id();
  static const int kTransferIdFieldNumber = 1;
  inline ::google::protobuf::int32 transfer_id() const;
  inline void set_transfer_id(::google::protobuf::int32 value);
  
  // optional int32 transfer_lv = 2;
  inline bool has_transfer_lv() const;
  inline void clear_transfer_lv();
  static const int kTransferLvFieldNumber = 2;
  inline ::google::protobuf::int32 transfer_lv() const;
  inline void set_transfer_lv(::google::protobuf::int32 value);
  
  // optional int32 is_permanent = 3;
  inline bool has_is_permanent() const;
  inline void clear_is_permanent();
  static const int kIsPermanentFieldNumber = 3;
  inline ::google::protobuf::int32 is_permanent() const;
  inline void set_is_permanent(::google::protobuf::int32 value);
  
  // optional int32 is_active = 4;
  inline bool has_is_active() const;
  inline void clear_is_active();
  static const int kIsActiveFieldNumber = 4;
  inline ::google::protobuf::int32 is_active() const;
  inline void set_is_active(::google::protobuf::int32 value);
  
  // optional int64 active_tick = 5;
  inline bool has_active_tick() const;
  inline void clear_active_tick();
  static const int kActiveTickFieldNumber = 5;
  inline ::google::protobuf::int64 active_tick() const;
  inline void set_active_tick(::google::protobuf::int64 value);
  
  // optional int64 end_tick = 6;
  inline bool has_end_tick() const;
  inline void clear_end_tick();
  static const int kEndTickFieldNumber = 6;
  inline ::google::protobuf::int64 end_tick() const;
  inline void set_end_tick(::google::protobuf::int64 value);
  
  // optional int32 transfer_skill = 7;
  inline bool has_transfer_skill() const;
  inline void clear_transfer_skill();
  static const int kTransferSkillFieldNumber = 7;
  inline ::google::protobuf::int32 transfer_skill() const;
  inline void set_transfer_skill(::google::protobuf::int32 value);
  
  // repeated .ProtoPairObj skill = 8;
  inline int skill_size() const;
  inline void clear_skill();
  static const int kSkillFieldNumber = 8;
  inline const ::ProtoPairObj& skill(int index) const;
  inline ::ProtoPairObj* mutable_skill(int index);
  inline ::ProtoPairObj* add_skill();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >&
      skill() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >*
      mutable_skill();
  
  // @@protoc_insertion_point(class_scope:ProtoTransferInfo)
 private:
  inline void set_has_transfer_id();
  inline void clear_has_transfer_id();
  inline void set_has_transfer_lv();
  inline void clear_has_transfer_lv();
  inline void set_has_is_permanent();
  inline void clear_has_is_permanent();
  inline void set_has_is_active();
  inline void clear_has_is_active();
  inline void set_has_active_tick();
  inline void clear_has_active_tick();
  inline void set_has_end_tick();
  inline void clear_has_end_tick();
  inline void set_has_transfer_skill();
  inline void clear_has_transfer_skill();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 transfer_id_;
  ::google::protobuf::int32 transfer_lv_;
  ::google::protobuf::int32 is_permanent_;
  ::google::protobuf::int32 is_active_;
  ::google::protobuf::int64 active_tick_;
  ::google::protobuf::int64 end_tick_;
  ::google::protobuf::RepeatedPtrField< ::ProtoPairObj > skill_;
  ::google::protobuf::int32 transfer_skill_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoTransferInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProtoScriptReset : public ::google::protobuf::Message {
 public:
  ProtoScriptReset();
  virtual ~ProtoScriptReset();
  
  ProtoScriptReset(const ProtoScriptReset& from);
  
  inline ProtoScriptReset& operator=(const ProtoScriptReset& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoScriptReset& default_instance();
  
  void Swap(ProtoScriptReset* other);
  
  // implements Message ----------------------------------------------
  
  ProtoScriptReset* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoScriptReset& from);
  void MergeFrom(const ProtoScriptReset& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 script_sort = 1;
  inline bool has_script_sort() const;
  inline void clear_script_sort();
  static const int kScriptSortFieldNumber = 1;
  inline ::google::protobuf::int32 script_sort() const;
  inline void set_script_sort(::google::protobuf::int32 value);
  
  // optional int32 left_times = 2;
  inline bool has_left_times() const;
  inline void clear_left_times();
  static const int kLeftTimesFieldNumber = 2;
  inline ::google::protobuf::int32 left_times() const;
  inline void set_left_times(::google::protobuf::int32 value);
  
  // optional int32 left_buy_times = 3;
  inline bool has_left_buy_times() const;
  inline void clear_left_buy_times();
  static const int kLeftBuyTimesFieldNumber = 3;
  inline ::google::protobuf::int32 left_buy_times() const;
  inline void set_left_buy_times(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoScriptReset)
 private:
  inline void set_has_script_sort();
  inline void clear_has_script_sort();
  inline void set_has_left_times();
  inline void clear_has_left_times();
  inline void set_has_left_buy_times();
  inline void clear_has_left_buy_times();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 script_sort_;
  ::google::protobuf::int32 left_times_;
  ::google::protobuf::int32 left_buy_times_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoScriptReset* default_instance_;
};
// -------------------------------------------------------------------

class ProtoBackActName : public ::google::protobuf::Message {
 public:
  ProtoBackActName();
  virtual ~ProtoBackActName();
  
  ProtoBackActName(const ProtoBackActName& from);
  
  inline ProtoBackActName& operator=(const ProtoBackActName& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoBackActName& default_instance();
  
  void Swap(ProtoBackActName* other);
  
  // implements Message ----------------------------------------------
  
  ProtoBackActName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoBackActName& from);
  void MergeFrom(const ProtoBackActName& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 act_id = 1;
  inline bool has_act_id() const;
  inline void clear_act_id();
  static const int kActIdFieldNumber = 1;
  inline ::google::protobuf::int32 act_id() const;
  inline void set_act_id(::google::protobuf::int32 value);
  
  // optional string act_title = 2;
  inline bool has_act_title() const;
  inline void clear_act_title();
  static const int kActTitleFieldNumber = 2;
  inline const ::std::string& act_title() const;
  inline void set_act_title(const ::std::string& value);
  inline void set_act_title(const char* value);
  inline void set_act_title(const char* value, size_t size);
  inline ::std::string* mutable_act_title();
  inline ::std::string* release_act_title();
  
  // optional int32 has_reward = 3;
  inline bool has_has_reward() const;
  inline void clear_has_reward();
  static const int kHasRewardFieldNumber = 3;
  inline ::google::protobuf::int32 has_reward() const;
  inline void set_has_reward(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoBackActName)
 private:
  inline void set_has_act_id();
  inline void clear_has_act_id();
  inline void set_has_act_title();
  inline void clear_has_act_title();
  inline void set_has_has_reward();
  inline void clear_has_has_reward();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* act_title_;
  ::google::protobuf::int32 act_id_;
  ::google::protobuf::int32 has_reward_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoBackActName* default_instance_;
};
// -------------------------------------------------------------------

class ProtoBackActInfo : public ::google::protobuf::Message {
 public:
  ProtoBackActInfo();
  virtual ~ProtoBackActInfo();
  
  ProtoBackActInfo(const ProtoBackActInfo& from);
  
  inline ProtoBackActInfo& operator=(const ProtoBackActInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoBackActInfo& default_instance();
  
  void Swap(ProtoBackActInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProtoBackActInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoBackActInfo& from);
  void MergeFrom(const ProtoBackActInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 act_id = 1;
  inline bool has_act_id() const;
  inline void clear_act_id();
  static const int kActIdFieldNumber = 1;
  inline ::google::protobuf::int32 act_id() const;
  inline void set_act_id(::google::protobuf::int32 value);
  
  // optional int32 second_type = 2;
  inline bool has_second_type() const;
  inline void clear_second_type();
  static const int kSecondTypeFieldNumber = 2;
  inline ::google::protobuf::int32 second_type() const;
  inline void set_second_type(::google::protobuf::int32 value);
  
  // optional int32 act_start = 3;
  inline bool has_act_start() const;
  inline void clear_act_start();
  static const int kActStartFieldNumber = 3;
  inline ::google::protobuf::int32 act_start() const;
  inline void set_act_start(::google::protobuf::int32 value);
  
  // optional int32 act_end = 4;
  inline bool has_act_end() const;
  inline void clear_act_end();
  static const int kActEndFieldNumber = 4;
  inline ::google::protobuf::int32 act_end() const;
  inline void set_act_end(::google::protobuf::int32 value);
  
  // optional string act_content = 5;
  inline bool has_act_content() const;
  inline void clear_act_content();
  static const int kActContentFieldNumber = 5;
  inline const ::std::string& act_content() const;
  inline void set_act_content(const ::std::string& value);
  inline void set_act_content(const char* value);
  inline void set_act_content(const char* value, size_t size);
  inline ::std::string* mutable_act_content();
  inline ::std::string* release_act_content();
  
  // repeated .ProtoBackActReward reward_list = 6;
  inline int reward_list_size() const;
  inline void clear_reward_list();
  static const int kRewardListFieldNumber = 6;
  inline const ::ProtoBackActReward& reward_list(int index) const;
  inline ::ProtoBackActReward* mutable_reward_list(int index);
  inline ::ProtoBackActReward* add_reward_list();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBackActReward >&
      reward_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBackActReward >*
      mutable_reward_list();
  
  // optional int32 need_gold = 7;
  inline bool has_need_gold() const;
  inline void clear_need_gold();
  static const int kNeedGoldFieldNumber = 7;
  inline ::google::protobuf::int32 need_gold() const;
  inline void set_need_gold(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoBackActInfo)
 private:
  inline void set_has_act_id();
  inline void clear_has_act_id();
  inline void set_has_second_type();
  inline void clear_has_second_type();
  inline void set_has_act_start();
  inline void clear_has_act_start();
  inline void set_has_act_end();
  inline void clear_has_act_end();
  inline void set_has_act_content();
  inline void clear_has_act_content();
  inline void set_has_need_gold();
  inline void clear_has_need_gold();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 act_id_;
  ::google::protobuf::int32 second_type_;
  ::google::protobuf::int32 act_start_;
  ::google::protobuf::int32 act_end_;
  ::std::string* act_content_;
  ::google::protobuf::RepeatedPtrField< ::ProtoBackActReward > reward_list_;
  ::google::protobuf::int32 need_gold_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoBackActInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProtoBackActReward : public ::google::protobuf::Message {
 public:
  ProtoBackActReward();
  virtual ~ProtoBackActReward();
  
  ProtoBackActReward(const ProtoBackActReward& from);
  
  inline ProtoBackActReward& operator=(const ProtoBackActReward& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoBackActReward& default_instance();
  
  void Swap(ProtoBackActReward* other);
  
  // implements Message ----------------------------------------------
  
  ProtoBackActReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoBackActReward& from);
  void MergeFrom(const ProtoBackActReward& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 reward_id = 1;
  inline bool has_reward_id() const;
  inline void clear_reward_id();
  static const int kRewardIdFieldNumber = 1;
  inline ::google::protobuf::int32 reward_id() const;
  inline void set_reward_id(::google::protobuf::int32 value);
  
  // repeated .ProtoItem reward_item_list = 2;
  inline int reward_item_list_size() const;
  inline void clear_reward_item_list();
  static const int kRewardItemListFieldNumber = 2;
  inline const ::ProtoItem& reward_item_list(int index) const;
  inline ::ProtoItem* mutable_reward_item_list(int index);
  inline ::ProtoItem* add_reward_item_list();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoItem >&
      reward_item_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoItem >*
      mutable_reward_item_list();
  
  // optional int32 reward_amount = 3;
  inline bool has_reward_amount() const;
  inline void clear_reward_amount();
  static const int kRewardAmountFieldNumber = 3;
  inline ::google::protobuf::int32 reward_amount() const;
  inline void set_reward_amount(::google::protobuf::int32 value);
  
  // repeated int32 cond_value_list = 4;
  inline int cond_value_list_size() const;
  inline void clear_cond_value_list();
  static const int kCondValueListFieldNumber = 4;
  inline ::google::protobuf::int32 cond_value_list(int index) const;
  inline void set_cond_value_list(int index, ::google::protobuf::int32 value);
  inline void add_cond_value_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cond_value_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cond_value_list();
  
  // optional int32 restore_gold_rate = 5;
  inline bool has_restore_gold_rate() const;
  inline void clear_restore_gold_rate();
  static const int kRestoreGoldRateFieldNumber = 5;
  inline ::google::protobuf::int32 restore_gold_rate() const;
  inline void set_restore_gold_rate(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoBackActReward)
 private:
  inline void set_has_reward_id();
  inline void clear_has_reward_id();
  inline void set_has_reward_amount();
  inline void clear_has_reward_amount();
  inline void set_has_restore_gold_rate();
  inline void clear_has_restore_gold_rate();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::ProtoItem > reward_item_list_;
  ::google::protobuf::int32 reward_id_;
  ::google::protobuf::int32 reward_amount_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cond_value_list_;
  ::google::protobuf::int32 restore_gold_rate_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoBackActReward* default_instance_;
};
// -------------------------------------------------------------------

class ProtoTransferClient : public ::google::protobuf::Message {
 public:
  ProtoTransferClient();
  virtual ~ProtoTransferClient();
  
  ProtoTransferClient(const ProtoTransferClient& from);
  
  inline ProtoTransferClient& operator=(const ProtoTransferClient& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoTransferClient& default_instance();
  
  void Swap(ProtoTransferClient* other);
  
  // implements Message ----------------------------------------------
  
  ProtoTransferClient* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoTransferClient& from);
  void MergeFrom(const ProtoTransferClient& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 transfer_id = 1;
  inline bool has_transfer_id() const;
  inline void clear_transfer_id();
  static const int kTransferIdFieldNumber = 1;
  inline ::google::protobuf::int32 transfer_id() const;
  inline void set_transfer_id(::google::protobuf::int32 value);
  
  // optional int32 transfer_lv = 2;
  inline bool has_transfer_lv() const;
  inline void clear_transfer_lv();
  static const int kTransferLvFieldNumber = 2;
  inline ::google::protobuf::int32 transfer_lv() const;
  inline void set_transfer_lv(::google::protobuf::int32 value);
  
  // optional int32 is_active = 3;
  inline bool has_is_active() const;
  inline void clear_is_active();
  static const int kIsActiveFieldNumber = 3;
  inline ::google::protobuf::int32 is_active() const;
  inline void set_is_active(::google::protobuf::int32 value);
  
  // optional int32 is_permanent = 4;
  inline bool has_is_permanent() const;
  inline void clear_is_permanent();
  static const int kIsPermanentFieldNumber = 4;
  inline ::google::protobuf::int32 is_permanent() const;
  inline void set_is_permanent(::google::protobuf::int32 value);
  
  // optional int64 active_tick = 5;
  inline bool has_active_tick() const;
  inline void clear_active_tick();
  static const int kActiveTickFieldNumber = 5;
  inline ::google::protobuf::int64 active_tick() const;
  inline void set_active_tick(::google::protobuf::int64 value);
  
  // optional int64 end_tick = 6;
  inline bool has_end_tick() const;
  inline void clear_end_tick();
  static const int kEndTickFieldNumber = 6;
  inline ::google::protobuf::int64 end_tick() const;
  inline void set_end_tick(::google::protobuf::int64 value);
  
  // optional int32 transfer_skill = 7;
  inline bool has_transfer_skill() const;
  inline void clear_transfer_skill();
  static const int kTransferSkillFieldNumber = 7;
  inline ::google::protobuf::int32 transfer_skill() const;
  inline void set_transfer_skill(::google::protobuf::int32 value);
  
  // repeated .ProtoSkill skill = 8;
  inline int skill_size() const;
  inline void clear_skill();
  static const int kSkillFieldNumber = 8;
  inline const ::ProtoSkill& skill(int index) const;
  inline ::ProtoSkill* mutable_skill(int index);
  inline ::ProtoSkill* add_skill();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoSkill >&
      skill() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoSkill >*
      mutable_skill();
  
  // optional .ProtoFightPro prop = 9;
  inline bool has_prop() const;
  inline void clear_prop();
  static const int kPropFieldNumber = 9;
  inline const ::ProtoFightPro& prop() const;
  inline ::ProtoFightPro* mutable_prop();
  inline ::ProtoFightPro* release_prop();
  
  // optional int32 last = 10;
  inline bool has_last() const;
  inline void clear_last();
  static const int kLastFieldNumber = 10;
  inline ::google::protobuf::int32 last() const;
  inline void set_last(::google::protobuf::int32 value);
  
  // optional int32 cool = 11;
  inline bool has_cool() const;
  inline void clear_cool();
  static const int kCoolFieldNumber = 11;
  inline ::google::protobuf::int32 cool() const;
  inline void set_cool(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoTransferClient)
 private:
  inline void set_has_transfer_id();
  inline void clear_has_transfer_id();
  inline void set_has_transfer_lv();
  inline void clear_has_transfer_lv();
  inline void set_has_is_active();
  inline void clear_has_is_active();
  inline void set_has_is_permanent();
  inline void clear_has_is_permanent();
  inline void set_has_active_tick();
  inline void clear_has_active_tick();
  inline void set_has_end_tick();
  inline void clear_has_end_tick();
  inline void set_has_transfer_skill();
  inline void clear_has_transfer_skill();
  inline void set_has_prop();
  inline void clear_has_prop();
  inline void set_has_last();
  inline void clear_has_last();
  inline void set_has_cool();
  inline void clear_has_cool();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 transfer_id_;
  ::google::protobuf::int32 transfer_lv_;
  ::google::protobuf::int32 is_active_;
  ::google::protobuf::int32 is_permanent_;
  ::google::protobuf::int64 active_tick_;
  ::google::protobuf::int64 end_tick_;
  ::google::protobuf::RepeatedPtrField< ::ProtoSkill > skill_;
  ::google::protobuf::int32 transfer_skill_;
  ::google::protobuf::int32 last_;
  ::ProtoFightPro* prop_;
  ::google::protobuf::int32 cool_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoTransferClient* default_instance_;
};
// -------------------------------------------------------------------

class ProtoBackActRewardIndex : public ::google::protobuf::Message {
 public:
  ProtoBackActRewardIndex();
  virtual ~ProtoBackActRewardIndex();
  
  ProtoBackActRewardIndex(const ProtoBackActRewardIndex& from);
  
  inline ProtoBackActRewardIndex& operator=(const ProtoBackActRewardIndex& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoBackActRewardIndex& default_instance();
  
  void Swap(ProtoBackActRewardIndex* other);
  
  // implements Message ----------------------------------------------
  
  ProtoBackActRewardIndex* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoBackActRewardIndex& from);
  void MergeFrom(const ProtoBackActRewardIndex& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 reward_id = 1;
  inline bool has_reward_id() const;
  inline void clear_reward_id();
  static const int kRewardIdFieldNumber = 1;
  inline ::google::protobuf::int32 reward_id() const;
  inline void set_reward_id(::google::protobuf::int32 value);
  
  // repeated int32 reward_value = 2;
  inline int reward_value_size() const;
  inline void clear_reward_value();
  static const int kRewardValueFieldNumber = 2;
  inline ::google::protobuf::int32 reward_value(int index) const;
  inline void set_reward_value(int index, ::google::protobuf::int32 value);
  inline void add_reward_value(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      reward_value() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_reward_value();
  
  // @@protoc_insertion_point(class_scope:ProtoBackActRewardIndex)
 private:
  inline void set_has_reward_id();
  inline void clear_has_reward_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > reward_value_;
  ::google::protobuf::int32 reward_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoBackActRewardIndex* default_instance_;
};
// -------------------------------------------------------------------

class PActTastList : public ::google::protobuf::Message {
 public:
  PActTastList();
  virtual ~PActTastList();
  
  PActTastList(const PActTastList& from);
  
  inline PActTastList& operator=(const PActTastList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PActTastList& default_instance();
  
  void Swap(PActTastList* other);
  
  // implements Message ----------------------------------------------
  
  PActTastList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PActTastList& from);
  void MergeFrom(const PActTastList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 task_id = 1;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  inline ::google::protobuf::int32 task_id() const;
  inline void set_task_id(::google::protobuf::int32 value);
  
  // optional int32 total_num = 2;
  inline bool has_total_num() const;
  inline void clear_total_num();
  static const int kTotalNumFieldNumber = 2;
  inline ::google::protobuf::int32 total_num() const;
  inline void set_total_num(::google::protobuf::int32 value);
  
  // optional int32 left_num = 3;
  inline bool has_left_num() const;
  inline void clear_left_num();
  static const int kLeftNumFieldNumber = 3;
  inline ::google::protobuf::int32 left_num() const;
  inline void set_left_num(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PActTastList)
 private:
  inline void set_has_task_id();
  inline void clear_has_task_id();
  inline void set_has_total_num();
  inline void clear_has_total_num();
  inline void set_has_left_num();
  inline void clear_has_left_num();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 task_id_;
  ::google::protobuf::int32 total_num_;
  ::google::protobuf::int32 left_num_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static PActTastList* default_instance_;
};
// -------------------------------------------------------------------

class MayRewardInfo : public ::google::protobuf::Message {
 public:
  MayRewardInfo();
  virtual ~MayRewardInfo();
  
  MayRewardInfo(const MayRewardInfo& from);
  
  inline MayRewardInfo& operator=(const MayRewardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MayRewardInfo& default_instance();
  
  void Swap(MayRewardInfo* other);
  
  // implements Message ----------------------------------------------
  
  MayRewardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MayRewardInfo& from);
  void MergeFrom(const MayRewardInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  
  // repeated int32 cond = 4;
  inline int cond_size() const;
  inline void clear_cond();
  static const int kCondFieldNumber = 4;
  inline ::google::protobuf::int32 cond(int index) const;
  inline void set_cond(int index, ::google::protobuf::int32 value);
  inline void add_cond(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cond() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cond();
  
  // optional int32 arrive = 5;
  inline bool has_arrive() const;
  inline void clear_arrive();
  static const int kArriveFieldNumber = 5;
  inline ::google::protobuf::int32 arrive() const;
  inline void set_arrive(::google::protobuf::int32 value);
  
  // optional int32 drawed = 6;
  inline bool has_drawed() const;
  inline void clear_drawed();
  static const int kDrawedFieldNumber = 6;
  inline ::google::protobuf::int32 drawed() const;
  inline void set_drawed(::google::protobuf::int32 value);
  
  // optional int32 draw_flag = 7;
  inline bool has_draw_flag() const;
  inline void clear_draw_flag();
  static const int kDrawFlagFieldNumber = 7;
  inline ::google::protobuf::int32 draw_flag() const;
  inline void set_draw_flag(::google::protobuf::int32 value);
  
  // optional int32 pre_cost = 8;
  inline bool has_pre_cost() const;
  inline void clear_pre_cost();
  static const int kPreCostFieldNumber = 8;
  inline ::google::protobuf::int32 pre_cost() const;
  inline void set_pre_cost(::google::protobuf::int32 value);
  
  // optional int32 now_cost = 9;
  inline bool has_now_cost() const;
  inline void clear_now_cost();
  static const int kNowCostFieldNumber = 9;
  inline ::google::protobuf::int32 now_cost() const;
  inline void set_now_cost(::google::protobuf::int32 value);
  
  // optional int32 times = 10;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 10;
  inline ::google::protobuf::int32 times() const;
  inline void set_times(::google::protobuf::int32 value);
  
  // optional int32 reward_id = 11;
  inline bool has_reward_id() const;
  inline void clear_reward_id();
  static const int kRewardIdFieldNumber = 11;
  inline ::google::protobuf::int32 reward_id() const;
  inline void set_reward_id(::google::protobuf::int32 value);
  
  // repeated .ProtoItemId change_item = 12;
  inline int change_item_size() const;
  inline void clear_change_item();
  static const int kChangeItemFieldNumber = 12;
  inline const ::ProtoItemId& change_item(int index) const;
  inline ::ProtoItemId* mutable_change_item(int index);
  inline ::ProtoItemId* add_change_item();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoItemId >&
      change_item() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoItemId >*
      mutable_change_item();
  
  // optional int32 change_state = 13;
  inline bool has_change_state() const;
  inline void clear_change_state();
  static const int kChangeStateFieldNumber = 13;
  inline ::google::protobuf::int32 change_state() const;
  inline void set_change_state(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:MayRewardInfo)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_arrive();
  inline void clear_has_arrive();
  inline void set_has_drawed();
  inline void clear_has_drawed();
  inline void set_has_draw_flag();
  inline void clear_has_draw_flag();
  inline void set_has_pre_cost();
  inline void clear_has_pre_cost();
  inline void set_has_now_cost();
  inline void clear_has_now_cost();
  inline void set_has_times();
  inline void clear_has_times();
  inline void set_has_reward_id();
  inline void clear_has_reward_id();
  inline void set_has_change_state();
  inline void clear_has_change_state();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* content_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 arrive_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cond_;
  ::google::protobuf::int32 drawed_;
  ::google::protobuf::int32 draw_flag_;
  ::google::protobuf::int32 pre_cost_;
  ::google::protobuf::int32 now_cost_;
  ::google::protobuf::int32 times_;
  ::google::protobuf::int32 reward_id_;
  ::google::protobuf::RepeatedPtrField< ::ProtoItemId > change_item_;
  ::google::protobuf::int32 change_state_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static MayRewardInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProtoLimitValue : public ::google::protobuf::Message {
 public:
  ProtoLimitValue();
  virtual ~ProtoLimitValue();
  
  ProtoLimitValue(const ProtoLimitValue& from);
  
  inline ProtoLimitValue& operator=(const ProtoLimitValue& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoLimitValue& default_instance();
  
  void Swap(ProtoLimitValue* other);
  
  // implements Message ----------------------------------------------
  
  ProtoLimitValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoLimitValue& from);
  void MergeFrom(const ProtoLimitValue& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 value1 = 1;
  inline bool has_value1() const;
  inline void clear_value1();
  static const int kValue1FieldNumber = 1;
  inline ::google::protobuf::int32 value1() const;
  inline void set_value1(::google::protobuf::int32 value);
  
  // optional int32 value2 = 2;
  inline bool has_value2() const;
  inline void clear_value2();
  static const int kValue2FieldNumber = 2;
  inline ::google::protobuf::int32 value2() const;
  inline void set_value2(::google::protobuf::int32 value);
  
  // optional int32 value3 = 3;
  inline bool has_value3() const;
  inline void clear_value3();
  static const int kValue3FieldNumber = 3;
  inline ::google::protobuf::int32 value3() const;
  inline void set_value3(::google::protobuf::int32 value);
  
  // optional int32 value4 = 4;
  inline bool has_value4() const;
  inline void clear_value4();
  static const int kValue4FieldNumber = 4;
  inline ::google::protobuf::int32 value4() const;
  inline void set_value4(::google::protobuf::int32 value);
  
  // optional int32 value5 = 5;
  inline bool has_value5() const;
  inline void clear_value5();
  static const int kValue5FieldNumber = 5;
  inline ::google::protobuf::int32 value5() const;
  inline void set_value5(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoLimitValue)
 private:
  inline void set_has_value1();
  inline void clear_has_value1();
  inline void set_has_value2();
  inline void clear_has_value2();
  inline void set_has_value3();
  inline void clear_has_value3();
  inline void set_has_value4();
  inline void clear_has_value4();
  inline void set_has_value5();
  inline void clear_has_value5();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 value1_;
  ::google::protobuf::int32 value2_;
  ::google::protobuf::int32 value3_;
  ::google::protobuf::int32 value4_;
  ::google::protobuf::int32 value5_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoLimitValue* default_instance_;
};
// -------------------------------------------------------------------

class ActOpenLimitTime : public ::google::protobuf::Message {
 public:
  ActOpenLimitTime();
  virtual ~ActOpenLimitTime();
  
  ActOpenLimitTime(const ActOpenLimitTime& from);
  
  inline ActOpenLimitTime& operator=(const ActOpenLimitTime& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ActOpenLimitTime& default_instance();
  
  void Swap(ActOpenLimitTime* other);
  
  // implements Message ----------------------------------------------
  
  ActOpenLimitTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActOpenLimitTime& from);
  void MergeFrom(const ActOpenLimitTime& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 open_time = 1;
  inline bool has_open_time() const;
  inline void clear_open_time();
  static const int kOpenTimeFieldNumber = 1;
  inline ::google::protobuf::int32 open_time() const;
  inline void set_open_time(::google::protobuf::int32 value);
  
  // optional int32 open_state = 2;
  inline bool has_open_state() const;
  inline void clear_open_state();
  static const int kOpenStateFieldNumber = 2;
  inline ::google::protobuf::int32 open_state() const;
  inline void set_open_state(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ActOpenLimitTime)
 private:
  inline void set_has_open_time();
  inline void clear_has_open_time();
  inline void set_has_open_state();
  inline void clear_has_open_state();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 open_time_;
  ::google::protobuf::int32 open_state_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ActOpenLimitTime* default_instance_;
};
// -------------------------------------------------------------------

class ProtoRedPacketInfo : public ::google::protobuf::Message {
 public:
  ProtoRedPacketInfo();
  virtual ~ProtoRedPacketInfo();
  
  ProtoRedPacketInfo(const ProtoRedPacketInfo& from);
  
  inline ProtoRedPacketInfo& operator=(const ProtoRedPacketInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoRedPacketInfo& default_instance();
  
  void Swap(ProtoRedPacketInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProtoRedPacketInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoRedPacketInfo& from);
  void MergeFrom(const ProtoRedPacketInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string player_name = 1;
  inline bool has_player_name() const;
  inline void clear_player_name();
  static const int kPlayerNameFieldNumber = 1;
  inline const ::std::string& player_name() const;
  inline void set_player_name(const ::std::string& value);
  inline void set_player_name(const char* value);
  inline void set_player_name(const char* value, size_t size);
  inline ::std::string* mutable_player_name();
  inline ::std::string* release_player_name();
  
  // optional int32 money = 2;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 2;
  inline ::google::protobuf::int32 money() const;
  inline void set_money(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoRedPacketInfo)
 private:
  inline void set_has_player_name();
  inline void clear_has_player_name();
  inline void set_has_money();
  inline void clear_has_money();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* player_name_;
  ::google::protobuf::int32 money_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoRedPacketInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProtoRunRole : public ::google::protobuf::Message {
 public:
  ProtoRunRole();
  virtual ~ProtoRunRole();
  
  ProtoRunRole(const ProtoRunRole& from);
  
  inline ProtoRunRole& operator=(const ProtoRunRole& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoRunRole& default_instance();
  
  void Swap(ProtoRunRole* other);
  
  // implements Message ----------------------------------------------
  
  ProtoRunRole* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoRunRole& from);
  void MergeFrom(const ProtoRunRole& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int64 role_id() const;
  inline void set_role_id(::google::protobuf::int64 value);
  
  // optional string role_name = 2;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 2;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  
  // optional int32 role_sex = 3;
  inline bool has_role_sex() const;
  inline void clear_role_sex();
  static const int kRoleSexFieldNumber = 3;
  inline ::google::protobuf::int32 role_sex() const;
  inline void set_role_sex(::google::protobuf::int32 value);
  
  // optional int32 value = 4;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 4;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoRunRole)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_role_sex();
  inline void clear_has_role_sex();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 role_id_;
  ::std::string* role_name_;
  ::google::protobuf::int32 role_sex_;
  ::google::protobuf::int32 value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoRunRole* default_instance_;
};
// -------------------------------------------------------------------

class ProtoAllRedActInfo : public ::google::protobuf::Message {
 public:
  ProtoAllRedActInfo();
  virtual ~ProtoAllRedActInfo();
  
  ProtoAllRedActInfo(const ProtoAllRedActInfo& from);
  
  inline ProtoAllRedActInfo& operator=(const ProtoAllRedActInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoAllRedActInfo& default_instance();
  
  void Swap(ProtoAllRedActInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProtoAllRedActInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoAllRedActInfo& from);
  void MergeFrom(const ProtoAllRedActInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 state = 1;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);
  
  // optional int32 tick = 2;
  inline bool has_tick() const;
  inline void clear_tick();
  static const int kTickFieldNumber = 2;
  inline ::google::protobuf::int32 tick() const;
  inline void set_tick(::google::protobuf::int32 value);
  
  // optional int32 money = 3;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 3;
  inline ::google::protobuf::int32 money() const;
  inline void set_money(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoAllRedActInfo)
 private:
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_tick();
  inline void clear_has_tick();
  inline void set_has_money();
  inline void clear_has_money();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 tick_;
  ::google::protobuf::int32 money_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoAllRedActInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProtoTrvlBaseRole : public ::google::protobuf::Message {
 public:
  ProtoTrvlBaseRole();
  virtual ~ProtoTrvlBaseRole();
  
  ProtoTrvlBaseRole(const ProtoTrvlBaseRole& from);
  
  inline ProtoTrvlBaseRole& operator=(const ProtoTrvlBaseRole& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoTrvlBaseRole& default_instance();
  
  void Swap(ProtoTrvlBaseRole* other);
  
  // implements Message ----------------------------------------------
  
  ProtoTrvlBaseRole* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoTrvlBaseRole& from);
  void MergeFrom(const ProtoTrvlBaseRole& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int64 role_id() const;
  inline void set_role_id(::google::protobuf::int64 value);
  
  // optional string role_name = 2;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 2;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  
  // optional string prev = 3;
  inline bool has_prev() const;
  inline void clear_prev();
  static const int kPrevFieldNumber = 3;
  inline const ::std::string& prev() const;
  inline void set_prev(const ::std::string& value);
  inline void set_prev(const char* value);
  inline void set_prev(const char* value, size_t size);
  inline ::std::string* mutable_prev();
  inline ::std::string* release_prev();
  
  // optional int32 sex = 4;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 4;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);
  
  // optional int32 career = 5;
  inline bool has_career() const;
  inline void clear_career();
  static const int kCareerFieldNumber = 5;
  inline ::google::protobuf::int32 career() const;
  inline void set_career(::google::protobuf::int32 value);
  
  // optional int32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int32 force = 7;
  inline bool has_force() const;
  inline void clear_force();
  static const int kForceFieldNumber = 7;
  inline ::google::protobuf::int32 force() const;
  inline void set_force(::google::protobuf::int32 value);
  
  // optional int32 weapon = 8;
  inline bool has_weapon() const;
  inline void clear_weapon();
  static const int kWeaponFieldNumber = 8;
  inline ::google::protobuf::int32 weapon() const;
  inline void set_weapon(::google::protobuf::int32 value);
  
  // optional int32 clothes = 9;
  inline bool has_clothes() const;
  inline void clear_clothes();
  static const int kClothesFieldNumber = 9;
  inline ::google::protobuf::int32 clothes() const;
  inline void set_clothes(::google::protobuf::int32 value);
  
  // optional int32 fashion_weapon = 10;
  inline bool has_fashion_weapon() const;
  inline void clear_fashion_weapon();
  static const int kFashionWeaponFieldNumber = 10;
  inline ::google::protobuf::int32 fashion_weapon() const;
  inline void set_fashion_weapon(::google::protobuf::int32 value);
  
  // optional int32 fashion_clothes = 11;
  inline bool has_fashion_clothes() const;
  inline void clear_fashion_clothes();
  static const int kFashionClothesFieldNumber = 11;
  inline ::google::protobuf::int32 fashion_clothes() const;
  inline void set_fashion_clothes(::google::protobuf::int32 value);
  
  // optional int32 wing_level = 12;
  inline bool has_wing_level() const;
  inline void clear_wing_level();
  static const int kWingLevelFieldNumber = 12;
  inline ::google::protobuf::int32 wing_level() const;
  inline void set_wing_level(::google::protobuf::int32 value);
  
  // optional int32 solider_level = 13;
  inline bool has_solider_level() const;
  inline void clear_solider_level();
  static const int kSoliderLevelFieldNumber = 13;
  inline ::google::protobuf::int32 solider_level() const;
  inline void set_solider_level(::google::protobuf::int32 value);
  
  // optional int32 vip_type = 14;
  inline bool has_vip_type() const;
  inline void clear_vip_type();
  static const int kVipTypeFieldNumber = 14;
  inline ::google::protobuf::int32 vip_type() const;
  inline void set_vip_type(::google::protobuf::int32 value);
  
  // optional int32 mount_sort = 15;
  inline bool has_mount_sort() const;
  inline void clear_mount_sort();
  static const int kMountSortFieldNumber = 15;
  inline ::google::protobuf::int32 mount_sort() const;
  inline void set_mount_sort(::google::protobuf::int32 value);
  
  // optional int32 sword_pool = 16;
  inline bool has_sword_pool() const;
  inline void clear_sword_pool();
  static const int kSwordPoolFieldNumber = 16;
  inline ::google::protobuf::int32 sword_pool() const;
  inline void set_sword_pool(::google::protobuf::int32 value);
  
  // optional int32 tian_gang = 17;
  inline bool has_tian_gang() const;
  inline void clear_tian_gang();
  static const int kTianGangFieldNumber = 17;
  inline ::google::protobuf::int32 tian_gang() const;
  inline void set_tian_gang(::google::protobuf::int32 value);
  
  // optional int32 fashion_id = 18;
  inline bool has_fashion_id() const;
  inline void clear_fashion_id();
  static const int kFashionIdFieldNumber = 18;
  inline ::google::protobuf::int32 fashion_id() const;
  inline void set_fashion_id(::google::protobuf::int32 value);
  
  // optional int32 fashion_color = 19;
  inline bool has_fashion_color() const;
  inline void clear_fashion_color();
  static const int kFashionColorFieldNumber = 19;
  inline ::google::protobuf::int32 fashion_color() const;
  inline void set_fashion_color(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoTrvlBaseRole)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_prev();
  inline void clear_has_prev();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_career();
  inline void clear_has_career();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_force();
  inline void clear_has_force();
  inline void set_has_weapon();
  inline void clear_has_weapon();
  inline void set_has_clothes();
  inline void clear_has_clothes();
  inline void set_has_fashion_weapon();
  inline void clear_has_fashion_weapon();
  inline void set_has_fashion_clothes();
  inline void clear_has_fashion_clothes();
  inline void set_has_wing_level();
  inline void clear_has_wing_level();
  inline void set_has_solider_level();
  inline void clear_has_solider_level();
  inline void set_has_vip_type();
  inline void clear_has_vip_type();
  inline void set_has_mount_sort();
  inline void clear_has_mount_sort();
  inline void set_has_sword_pool();
  inline void clear_has_sword_pool();
  inline void set_has_tian_gang();
  inline void clear_has_tian_gang();
  inline void set_has_fashion_id();
  inline void clear_has_fashion_id();
  inline void set_has_fashion_color();
  inline void clear_has_fashion_color();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 role_id_;
  ::std::string* role_name_;
  ::std::string* prev_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 career_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 force_;
  ::google::protobuf::int32 weapon_;
  ::google::protobuf::int32 clothes_;
  ::google::protobuf::int32 fashion_weapon_;
  ::google::protobuf::int32 fashion_clothes_;
  ::google::protobuf::int32 wing_level_;
  ::google::protobuf::int32 solider_level_;
  ::google::protobuf::int32 vip_type_;
  ::google::protobuf::int32 mount_sort_;
  ::google::protobuf::int32 sword_pool_;
  ::google::protobuf::int32 tian_gang_;
  ::google::protobuf::int32 fashion_id_;
  ::google::protobuf::int32 fashion_color_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoTrvlBaseRole* default_instance_;
};
// -------------------------------------------------------------------

class ProtoMayFashionInfo : public ::google::protobuf::Message {
 public:
  ProtoMayFashionInfo();
  virtual ~ProtoMayFashionInfo();
  
  ProtoMayFashionInfo(const ProtoMayFashionInfo& from);
  
  inline ProtoMayFashionInfo& operator=(const ProtoMayFashionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoMayFashionInfo& default_instance();
  
  void Swap(ProtoMayFashionInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProtoMayFashionInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoMayFashionInfo& from);
  void MergeFrom(const ProtoMayFashionInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 liveness = 1;
  inline bool has_liveness() const;
  inline void clear_liveness();
  static const int kLivenessFieldNumber = 1;
  inline ::google::protobuf::int32 liveness() const;
  inline void set_liveness(::google::protobuf::int32 value);
  
  // repeated .ProtoItemId item = 2;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 2;
  inline const ::ProtoItemId& item(int index) const;
  inline ::ProtoItemId* mutable_item(int index);
  inline ::ProtoItemId* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoItemId >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoItemId >*
      mutable_item();
  
  // optional int32 one_times_money = 3;
  inline bool has_one_times_money() const;
  inline void clear_one_times_money();
  static const int kOneTimesMoneyFieldNumber = 3;
  inline ::google::protobuf::int32 one_times_money() const;
  inline void set_one_times_money(::google::protobuf::int32 value);
  
  // optional int32 ten_times_money = 4;
  inline bool has_ten_times_money() const;
  inline void clear_ten_times_money();
  static const int kTenTimesMoneyFieldNumber = 4;
  inline ::google::protobuf::int32 ten_times_money() const;
  inline void set_ten_times_money(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoMayFashionInfo)
 private:
  inline void set_has_liveness();
  inline void clear_has_liveness();
  inline void set_has_one_times_money();
  inline void clear_has_one_times_money();
  inline void set_has_ten_times_money();
  inline void clear_has_ten_times_money();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::ProtoItemId > item_;
  ::google::protobuf::int32 liveness_;
  ::google::protobuf::int32 one_times_money_;
  ::google::protobuf::int32 ten_times_money_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoMayFashionInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProtoTrvlBattleRank : public ::google::protobuf::Message {
 public:
  ProtoTrvlBattleRank();
  virtual ~ProtoTrvlBattleRank();
  
  ProtoTrvlBattleRank(const ProtoTrvlBattleRank& from);
  
  inline ProtoTrvlBattleRank& operator=(const ProtoTrvlBattleRank& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoTrvlBattleRank& default_instance();
  
  void Swap(ProtoTrvlBattleRank* other);
  
  // implements Message ----------------------------------------------
  
  ProtoTrvlBattleRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoTrvlBattleRank& from);
  void MergeFrom(const ProtoTrvlBattleRank& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);
  
  // optional int64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::int64 role_id() const;
  inline void set_role_id(::google::protobuf::int64 value);
  
  // optional int32 score = 3;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 3;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);
  
  // optional int32 kill_amount = 4;
  inline bool has_kill_amount() const;
  inline void clear_kill_amount();
  static const int kKillAmountFieldNumber = 4;
  inline ::google::protobuf::int32 kill_amount() const;
  inline void set_kill_amount(::google::protobuf::int32 value);
  
  // optional int32 force = 5;
  inline bool has_force() const;
  inline void clear_force();
  static const int kForceFieldNumber = 5;
  inline ::google::protobuf::int32 force() const;
  inline void set_force(::google::protobuf::int32 value);
  
  // optional int32 tick = 6;
  inline bool has_tick() const;
  inline void clear_tick();
  static const int kTickFieldNumber = 6;
  inline ::google::protobuf::int32 tick() const;
  inline void set_tick(::google::protobuf::int32 value);
  
  // optional string role_name = 7;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 7;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  
  // optional int32 role_sex = 8;
  inline bool has_role_sex() const;
  inline void clear_role_sex();
  static const int kRoleSexFieldNumber = 8;
  inline ::google::protobuf::int32 role_sex() const;
  inline void set_role_sex(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoTrvlBattleRank)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_kill_amount();
  inline void clear_has_kill_amount();
  inline void set_has_force();
  inline void clear_has_force();
  inline void set_has_tick();
  inline void clear_has_tick();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_role_sex();
  inline void clear_has_role_sex();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 role_id_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 kill_amount_;
  ::google::protobuf::int32 force_;
  ::std::string* role_name_;
  ::google::protobuf::int32 tick_;
  ::google::protobuf::int32 role_sex_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoTrvlBattleRank* default_instance_;
};
// -------------------------------------------------------------------

class ProtoGemInfo : public ::google::protobuf::Message {
 public:
  ProtoGemInfo();
  virtual ~ProtoGemInfo();
  
  ProtoGemInfo(const ProtoGemInfo& from);
  
  inline ProtoGemInfo& operator=(const ProtoGemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoGemInfo& default_instance();
  
  void Swap(ProtoGemInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProtoGemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoGemInfo& from);
  void MergeFrom(const ProtoGemInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 gem_id = 1;
  inline bool has_gem_id() const;
  inline void clear_gem_id();
  static const int kGemIdFieldNumber = 1;
  inline ::google::protobuf::int32 gem_id() const;
  inline void set_gem_id(::google::protobuf::int32 value);
  
  // optional int32 gem_amount = 2;
  inline bool has_gem_amount() const;
  inline void clear_gem_amount();
  static const int kGemAmountFieldNumber = 2;
  inline ::google::protobuf::int32 gem_amount() const;
  inline void set_gem_amount(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoGemInfo)
 private:
  inline void set_has_gem_id();
  inline void clear_has_gem_id();
  inline void set_has_gem_amount();
  inline void clear_has_gem_amount();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 gem_id_;
  ::google::protobuf::int32 gem_amount_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoGemInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProtoTrvlWbossMail : public ::google::protobuf::Message {
 public:
  ProtoTrvlWbossMail();
  virtual ~ProtoTrvlWbossMail();
  
  ProtoTrvlWbossMail(const ProtoTrvlWbossMail& from);
  
  inline ProtoTrvlWbossMail& operator=(const ProtoTrvlWbossMail& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoTrvlWbossMail& default_instance();
  
  void Swap(ProtoTrvlWbossMail* other);
  
  // implements Message ----------------------------------------------
  
  ProtoTrvlWbossMail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoTrvlWbossMail& from);
  void MergeFrom(const ProtoTrvlWbossMail& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 reward_id = 1;
  inline bool has_reward_id() const;
  inline void clear_reward_id();
  static const int kRewardIdFieldNumber = 1;
  inline ::google::protobuf::int32 reward_id() const;
  inline void set_reward_id(::google::protobuf::int32 value);
  
  // optional int64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::int64 role_id() const;
  inline void set_role_id(::google::protobuf::int64 value);
  
  // optional int32 rank = 3;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 3;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoTrvlWbossMail)
 private:
  inline void set_has_reward_id();
  inline void clear_has_reward_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_rank();
  inline void clear_has_rank();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 role_id_;
  ::google::protobuf::int32 reward_id_;
  ::google::protobuf::int32 rank_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoTrvlWbossMail* default_instance_;
};
// -------------------------------------------------------------------

class MoldingNature : public ::google::protobuf::Message {
 public:
  MoldingNature();
  virtual ~MoldingNature();
  
  MoldingNature(const MoldingNature& from);
  
  inline MoldingNature& operator=(const MoldingNature& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MoldingNature& default_instance();
  
  void Swap(MoldingNature* other);
  
  // implements Message ----------------------------------------------
  
  MoldingNature* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MoldingNature& from);
  void MergeFrom(const MoldingNature& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);
  
  // optional int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int32 cur_schedule = 3;
  inline bool has_cur_schedule() const;
  inline void clear_cur_schedule();
  static const int kCurScheduleFieldNumber = 3;
  inline ::google::protobuf::int32 cur_schedule() const;
  inline void set_cur_schedule(::google::protobuf::int32 value);
  
  // optional int32 max_schedule = 4;
  inline bool has_max_schedule() const;
  inline void clear_max_schedule();
  static const int kMaxScheduleFieldNumber = 4;
  inline ::google::protobuf::int32 max_schedule() const;
  inline void set_max_schedule(::google::protobuf::int32 value);
  
  // optional int32 nature_id = 5;
  inline bool has_nature_id() const;
  inline void clear_nature_id();
  static const int kNatureIdFieldNumber = 5;
  inline ::google::protobuf::int32 nature_id() const;
  inline void set_nature_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:MoldingNature)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_cur_schedule();
  inline void clear_has_cur_schedule();
  inline void set_has_max_schedule();
  inline void clear_has_max_schedule();
  inline void set_has_nature_id();
  inline void clear_has_nature_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 value_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 cur_schedule_;
  ::google::protobuf::int32 max_schedule_;
  ::google::protobuf::int32 nature_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static MoldingNature* default_instance_;
};
// -------------------------------------------------------------------

class ProtoCleanInfo : public ::google::protobuf::Message {
 public:
  ProtoCleanInfo();
  virtual ~ProtoCleanInfo();
  
  ProtoCleanInfo(const ProtoCleanInfo& from);
  
  inline ProtoCleanInfo& operator=(const ProtoCleanInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoCleanInfo& default_instance();
  
  void Swap(ProtoCleanInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProtoCleanInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoCleanInfo& from);
  void MergeFrom(const ProtoCleanInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 script_sort = 1;
  inline bool has_script_sort() const;
  inline void clear_script_sort();
  static const int kScriptSortFieldNumber = 1;
  inline ::google::protobuf::int32 script_sort() const;
  inline void set_script_sort(::google::protobuf::int32 value);
  
  // repeated .ProtoItem item_list = 2;
  inline int item_list_size() const;
  inline void clear_item_list();
  static const int kItemListFieldNumber = 2;
  inline const ::ProtoItem& item_list(int index) const;
  inline ::ProtoItem* mutable_item_list(int index);
  inline ::ProtoItem* add_item_list();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoItem >&
      item_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoItem >*
      mutable_item_list();
  
  // repeated .ProtoItem drop_list = 3;
  inline int drop_list_size() const;
  inline void clear_drop_list();
  static const int kDropListFieldNumber = 3;
  inline const ::ProtoItem& drop_list(int index) const;
  inline ::ProtoItem* mutable_drop_list(int index);
  inline ::ProtoItem* add_drop_list();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoItem >&
      drop_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoItem >*
      mutable_drop_list();
  
  // @@protoc_insertion_point(class_scope:ProtoCleanInfo)
 private:
  inline void set_has_script_sort();
  inline void clear_has_script_sort();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::ProtoItem > item_list_;
  ::google::protobuf::RepeatedPtrField< ::ProtoItem > drop_list_;
  ::google::protobuf::int32 script_sort_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoCleanInfo* default_instance_;
};
// -------------------------------------------------------------------

class FishDetail : public ::google::protobuf::Message {
 public:
  FishDetail();
  virtual ~FishDetail();
  
  FishDetail(const FishDetail& from);
  
  inline FishDetail& operator=(const FishDetail& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FishDetail& default_instance();
  
  void Swap(FishDetail* other);
  
  // implements Message ----------------------------------------------
  
  FishDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FishDetail& from);
  void MergeFrom(const FishDetail& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional int32 layer = 2;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 2;
  inline ::google::protobuf::int32 layer() const;
  inline void set_layer(::google::protobuf::int32 value);
  
  // optional int32 flag = 3;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 3;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);
  
  // optional int32 pos_x = 4;
  inline bool has_pos_x() const;
  inline void clear_pos_x();
  static const int kPosXFieldNumber = 4;
  inline ::google::protobuf::int32 pos_x() const;
  inline void set_pos_x(::google::protobuf::int32 value);
  
  // optional int32 pos_y = 5;
  inline bool has_pos_y() const;
  inline void clear_pos_y();
  static const int kPosYFieldNumber = 5;
  inline ::google::protobuf::int32 pos_y() const;
  inline void set_pos_y(::google::protobuf::int32 value);
  
  // repeated int32 item_id = 6;
  inline int item_id_size() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 6;
  inline ::google::protobuf::int32 item_id(int index) const;
  inline void set_item_id(int index, ::google::protobuf::int32 value);
  inline void add_item_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      item_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_item_id();
  
  // repeated int32 item_amount = 7;
  inline int item_amount_size() const;
  inline void clear_item_amount();
  static const int kItemAmountFieldNumber = 7;
  inline ::google::protobuf::int32 item_amount(int index) const;
  inline void set_item_amount(int index, ::google::protobuf::int32 value);
  inline void add_item_amount(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      item_amount() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_item_amount();
  
  // @@protoc_insertion_point(class_scope:FishDetail)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_layer();
  inline void clear_has_layer();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_pos_x();
  inline void clear_has_pos_x();
  inline void set_has_pos_y();
  inline void clear_has_pos_y();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 layer_;
  ::google::protobuf::int32 flag_;
  ::google::protobuf::int32 pos_x_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > item_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > item_amount_;
  ::google::protobuf::int32 pos_y_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static FishDetail* default_instance_;
};
// -------------------------------------------------------------------

class ProtoTeamForceInfo : public ::google::protobuf::Message {
 public:
  ProtoTeamForceInfo();
  virtual ~ProtoTeamForceInfo();
  
  ProtoTeamForceInfo(const ProtoTeamForceInfo& from);
  
  inline ProtoTeamForceInfo& operator=(const ProtoTeamForceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoTeamForceInfo& default_instance();
  
  void Swap(ProtoTeamForceInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProtoTeamForceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoTeamForceInfo& from);
  void MergeFrom(const ProtoTeamForceInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 team_id = 1;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  inline ::google::protobuf::int64 team_id() const;
  inline void set_team_id(::google::protobuf::int64 value);
  
  // optional int64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::int64 role_id() const;
  inline void set_role_id(::google::protobuf::int64 value);
  
  // optional int32 force = 3;
  inline bool has_force() const;
  inline void clear_force();
  static const int kForceFieldNumber = 3;
  inline ::google::protobuf::int32 force() const;
  inline void set_force(::google::protobuf::int32 value);
  
  // optional int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoTeamForceInfo)
 private:
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_force();
  inline void clear_has_force();
  inline void set_has_level();
  inline void clear_has_level();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 team_id_;
  ::google::protobuf::int64 role_id_;
  ::google::protobuf::int32 force_;
  ::google::protobuf::int32 level_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoTeamForceInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProtoItemExchangeTimes : public ::google::protobuf::Message {
 public:
  ProtoItemExchangeTimes();
  virtual ~ProtoItemExchangeTimes();
  
  ProtoItemExchangeTimes(const ProtoItemExchangeTimes& from);
  
  inline ProtoItemExchangeTimes& operator=(const ProtoItemExchangeTimes& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoItemExchangeTimes& default_instance();
  
  void Swap(ProtoItemExchangeTimes* other);
  
  // implements Message ----------------------------------------------
  
  ProtoItemExchangeTimes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoItemExchangeTimes& from);
  void MergeFrom(const ProtoItemExchangeTimes& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 item_id = 1;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::int32 item_id() const;
  inline void set_item_id(::google::protobuf::int32 value);
  
  // optional int32 times = 2;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 2;
  inline ::google::protobuf::int32 times() const;
  inline void set_times(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoItemExchangeTimes)
 private:
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_times();
  inline void clear_has_times();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 item_id_;
  ::google::protobuf::int32 times_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoItemExchangeTimes* default_instance_;
};
// -------------------------------------------------------------------

class ProtoPeakQualityInfo : public ::google::protobuf::Message {
 public:
  ProtoPeakQualityInfo();
  virtual ~ProtoPeakQualityInfo();
  
  ProtoPeakQualityInfo(const ProtoPeakQualityInfo& from);
  
  inline ProtoPeakQualityInfo& operator=(const ProtoPeakQualityInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoPeakQualityInfo& default_instance();
  
  void Swap(ProtoPeakQualityInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProtoPeakQualityInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoPeakQualityInfo& from);
  void MergeFrom(const ProtoPeakQualityInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 score = 1;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 1;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);
  
  // optional int32 rank = 2;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);
  
  // optional int32 left_fight_times = 3;
  inline bool has_left_fight_times() const;
  inline void clear_left_fight_times();
  static const int kLeftFightTimesFieldNumber = 3;
  inline ::google::protobuf::int32 left_fight_times() const;
  inline void set_left_fight_times(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoPeakQualityInfo)
 private:
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_left_fight_times();
  inline void clear_has_left_fight_times();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 left_fight_times_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoPeakQualityInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProtoPeakKnockoutInfo : public ::google::protobuf::Message {
 public:
  ProtoPeakKnockoutInfo();
  virtual ~ProtoPeakKnockoutInfo();
  
  ProtoPeakKnockoutInfo(const ProtoPeakKnockoutInfo& from);
  
  inline ProtoPeakKnockoutInfo& operator=(const ProtoPeakKnockoutInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoPeakKnockoutInfo& default_instance();
  
  void Swap(ProtoPeakKnockoutInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProtoPeakKnockoutInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoPeakKnockoutInfo& from);
  void MergeFrom(const ProtoPeakKnockoutInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 rival_team_id = 1;
  inline bool has_rival_team_id() const;
  inline void clear_rival_team_id();
  static const int kRivalTeamIdFieldNumber = 1;
  inline ::google::protobuf::int64 rival_team_id() const;
  inline void set_rival_team_id(::google::protobuf::int64 value);
  
  // optional string rival_team_name = 2;
  inline bool has_rival_team_name() const;
  inline void clear_rival_team_name();
  static const int kRivalTeamNameFieldNumber = 2;
  inline const ::std::string& rival_team_name() const;
  inline void set_rival_team_name(const ::std::string& value);
  inline void set_rival_team_name(const char* value);
  inline void set_rival_team_name(const char* value, size_t size);
  inline ::std::string* mutable_rival_team_name();
  inline ::std::string* release_rival_team_name();
  
  // repeated .ProtoTeamer rival_teamer = 3;
  inline int rival_teamer_size() const;
  inline void clear_rival_teamer();
  static const int kRivalTeamerFieldNumber = 3;
  inline const ::ProtoTeamer& rival_teamer(int index) const;
  inline ::ProtoTeamer* mutable_rival_teamer(int index);
  inline ::ProtoTeamer* add_rival_teamer();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoTeamer >&
      rival_teamer() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoTeamer >*
      mutable_rival_teamer();
  
  // optional int32 my_score = 4;
  inline bool has_my_score() const;
  inline void clear_my_score();
  static const int kMyScoreFieldNumber = 4;
  inline ::google::protobuf::int32 my_score() const;
  inline void set_my_score(::google::protobuf::int32 value);
  
  // optional int32 rival_socre = 5;
  inline bool has_rival_socre() const;
  inline void clear_rival_socre();
  static const int kRivalSocreFieldNumber = 5;
  inline ::google::protobuf::int32 rival_socre() const;
  inline void set_rival_socre(::google::protobuf::int32 value);
  
  // optional int32 score_type = 6;
  inline bool has_score_type() const;
  inline void clear_score_type();
  static const int kScoreTypeFieldNumber = 6;
  inline ::google::protobuf::int32 score_type() const;
  inline void set_score_type(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoPeakKnockoutInfo)
 private:
  inline void set_has_rival_team_id();
  inline void clear_has_rival_team_id();
  inline void set_has_rival_team_name();
  inline void clear_has_rival_team_name();
  inline void set_has_my_score();
  inline void clear_has_my_score();
  inline void set_has_rival_socre();
  inline void clear_has_rival_socre();
  inline void set_has_score_type();
  inline void clear_has_score_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 rival_team_id_;
  ::std::string* rival_team_name_;
  ::google::protobuf::RepeatedPtrField< ::ProtoTeamer > rival_teamer_;
  ::google::protobuf::int32 my_score_;
  ::google::protobuf::int32 rival_socre_;
  ::google::protobuf::int32 score_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoPeakKnockoutInfo* default_instance_;
};
// -------------------------------------------------------------------

class SpecialBoxChange : public ::google::protobuf::Message {
 public:
  SpecialBoxChange();
  virtual ~SpecialBoxChange();
  
  SpecialBoxChange(const SpecialBoxChange& from);
  
  inline SpecialBoxChange& operator=(const SpecialBoxChange& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SpecialBoxChange& default_instance();
  
  void Swap(SpecialBoxChange* other);
  
  // implements Message ----------------------------------------------
  
  SpecialBoxChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpecialBoxChange& from);
  void MergeFrom(const SpecialBoxChange& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 item_id = 1;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::int32 item_id() const;
  inline void set_item_id(::google::protobuf::int32 value);
  
  // optional int32 item_amount = 2;
  inline bool has_item_amount() const;
  inline void clear_item_amount();
  static const int kItemAmountFieldNumber = 2;
  inline ::google::protobuf::int32 item_amount() const;
  inline void set_item_amount(::google::protobuf::int32 value);
  
  // optional int32 item_bind = 3;
  inline bool has_item_bind() const;
  inline void clear_item_bind();
  static const int kItemBindFieldNumber = 3;
  inline ::google::protobuf::int32 item_bind() const;
  inline void set_item_bind(::google::protobuf::int32 value);
  
  // optional int32 page = 4;
  inline bool has_page() const;
  inline void clear_page();
  static const int kPageFieldNumber = 4;
  inline ::google::protobuf::int32 page() const;
  inline void set_page(::google::protobuf::int32 value);
  
  // optional int32 group = 5;
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 5;
  inline ::google::protobuf::int32 group() const;
  inline void set_group(::google::protobuf::int32 value);
  
  // optional int32 change_item_id = 6;
  inline bool has_change_item_id() const;
  inline void clear_change_item_id();
  static const int kChangeItemIdFieldNumber = 6;
  inline ::google::protobuf::int32 change_item_id() const;
  inline void set_change_item_id(::google::protobuf::int32 value);
  
  // optional int32 change_item_amount = 7;
  inline bool has_change_item_amount() const;
  inline void clear_change_item_amount();
  static const int kChangeItemAmountFieldNumber = 7;
  inline ::google::protobuf::int32 change_item_amount() const;
  inline void set_change_item_amount(::google::protobuf::int32 value);
  
  // optional int32 change_item_bind = 8;
  inline bool has_change_item_bind() const;
  inline void clear_change_item_bind();
  static const int kChangeItemBindFieldNumber = 8;
  inline ::google::protobuf::int32 change_item_bind() const;
  inline void set_change_item_bind(::google::protobuf::int32 value);
  
  // optional int32 index = 9;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 9;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:SpecialBoxChange)
 private:
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_item_amount();
  inline void clear_has_item_amount();
  inline void set_has_item_bind();
  inline void clear_has_item_bind();
  inline void set_has_page();
  inline void clear_has_page();
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_change_item_id();
  inline void clear_has_change_item_id();
  inline void set_has_change_item_amount();
  inline void clear_has_change_item_amount();
  inline void set_has_change_item_bind();
  inline void clear_has_change_item_bind();
  inline void set_has_index();
  inline void clear_has_index();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 item_id_;
  ::google::protobuf::int32 item_amount_;
  ::google::protobuf::int32 item_bind_;
  ::google::protobuf::int32 page_;
  ::google::protobuf::int32 group_;
  ::google::protobuf::int32 change_item_id_;
  ::google::protobuf::int32 change_item_amount_;
  ::google::protobuf::int32 change_item_bind_;
  ::google::protobuf::int32 index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static SpecialBoxChange* default_instance_;
};
// -------------------------------------------------------------------

class ProtoQualityRank : public ::google::protobuf::Message {
 public:
  ProtoQualityRank();
  virtual ~ProtoQualityRank();
  
  ProtoQualityRank(const ProtoQualityRank& from);
  
  inline ProtoQualityRank& operator=(const ProtoQualityRank& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoQualityRank& default_instance();
  
  void Swap(ProtoQualityRank* other);
  
  // implements Message ----------------------------------------------
  
  ProtoQualityRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoQualityRank& from);
  void MergeFrom(const ProtoQualityRank& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 team_id = 1;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  inline ::google::protobuf::int64 team_id() const;
  inline void set_team_id(::google::protobuf::int64 value);
  
  // optional string team_name = 2;
  inline bool has_team_name() const;
  inline void clear_team_name();
  static const int kTeamNameFieldNumber = 2;
  inline const ::std::string& team_name() const;
  inline void set_team_name(const ::std::string& value);
  inline void set_team_name(const char* value);
  inline void set_team_name(const char* value, size_t size);
  inline ::std::string* mutable_team_name();
  inline ::std::string* release_team_name();
  
  // optional int32 team_score = 3;
  inline bool has_team_score() const;
  inline void clear_team_score();
  static const int kTeamScoreFieldNumber = 3;
  inline ::google::protobuf::int32 team_score() const;
  inline void set_team_score(::google::protobuf::int32 value);
  
  // optional int32 rank = 4;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 4;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoQualityRank)
 private:
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_team_name();
  inline void clear_has_team_name();
  inline void set_has_team_score();
  inline void clear_has_team_score();
  inline void set_has_rank();
  inline void clear_has_rank();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 team_id_;
  ::std::string* team_name_;
  ::google::protobuf::int32 team_score_;
  ::google::protobuf::int32 rank_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoQualityRank* default_instance_;
};
// ===================================================================


// ===================================================================

// ProtoSceneAddress

// optional int32 scene_id = 1;
inline bool ProtoSceneAddress::has_scene_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoSceneAddress::set_has_scene_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoSceneAddress::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoSceneAddress::clear_scene_id() {
  scene_id_ = 0;
  clear_has_scene_id();
}
inline ::google::protobuf::int32 ProtoSceneAddress::scene_id() const {
  return scene_id_;
}
inline void ProtoSceneAddress::set_scene_id(::google::protobuf::int32 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// optional string address = 2;
inline bool ProtoSceneAddress::has_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoSceneAddress::set_has_address() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoSceneAddress::clear_has_address() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoSceneAddress::clear_address() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    address_->clear();
  }
  clear_has_address();
}
inline const ::std::string& ProtoSceneAddress::address() const {
  return *address_;
}
inline void ProtoSceneAddress::set_address(const ::std::string& value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void ProtoSceneAddress::set_address(const char* value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void ProtoSceneAddress::set_address(const char* value, size_t size) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoSceneAddress::mutable_address() {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  return address_;
}
inline ::std::string* ProtoSceneAddress::release_address() {
  clear_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = address_;
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 port = 3;
inline bool ProtoSceneAddress::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoSceneAddress::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoSceneAddress::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoSceneAddress::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 ProtoSceneAddress::port() const {
  return port_;
}
inline void ProtoSceneAddress::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// optional string domain = 4;
inline bool ProtoSceneAddress::has_domain() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoSceneAddress::set_has_domain() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoSceneAddress::clear_has_domain() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoSceneAddress::clear_domain() {
  if (domain_ != &::google::protobuf::internal::kEmptyString) {
    domain_->clear();
  }
  clear_has_domain();
}
inline const ::std::string& ProtoSceneAddress::domain() const {
  return *domain_;
}
inline void ProtoSceneAddress::set_domain(const ::std::string& value) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::kEmptyString) {
    domain_ = new ::std::string;
  }
  domain_->assign(value);
}
inline void ProtoSceneAddress::set_domain(const char* value) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::kEmptyString) {
    domain_ = new ::std::string;
  }
  domain_->assign(value);
}
inline void ProtoSceneAddress::set_domain(const char* value, size_t size) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::kEmptyString) {
    domain_ = new ::std::string;
  }
  domain_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoSceneAddress::mutable_domain() {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::kEmptyString) {
    domain_ = new ::std::string;
  }
  return domain_;
}
inline ::std::string* ProtoSceneAddress::release_domain() {
  clear_has_domain();
  if (domain_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = domain_;
    domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ProtoCoord

// optional int32 pixel_x = 1;
inline bool ProtoCoord::has_pixel_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoCoord::set_has_pixel_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoCoord::clear_has_pixel_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoCoord::clear_pixel_x() {
  pixel_x_ = 0;
  clear_has_pixel_x();
}
inline ::google::protobuf::int32 ProtoCoord::pixel_x() const {
  return pixel_x_;
}
inline void ProtoCoord::set_pixel_x(::google::protobuf::int32 value) {
  set_has_pixel_x();
  pixel_x_ = value;
}

// optional int32 pixel_y = 2;
inline bool ProtoCoord::has_pixel_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoCoord::set_has_pixel_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoCoord::clear_has_pixel_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoCoord::clear_pixel_y() {
  pixel_y_ = 0;
  clear_has_pixel_y();
}
inline ::google::protobuf::int32 ProtoCoord::pixel_y() const {
  return pixel_y_;
}
inline void ProtoCoord::set_pixel_y(::google::protobuf::int32 value) {
  set_has_pixel_y();
  pixel_y_ = value;
}

// -------------------------------------------------------------------

// ProtoSkill

// optional int32 skill_id = 1;
inline bool ProtoSkill::has_skill_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoSkill::set_has_skill_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoSkill::clear_has_skill_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoSkill::clear_skill_id() {
  skill_id_ = 0;
  clear_has_skill_id();
}
inline ::google::protobuf::int32 ProtoSkill::skill_id() const {
  return skill_id_;
}
inline void ProtoSkill::set_skill_id(::google::protobuf::int32 value) {
  set_has_skill_id();
  skill_id_ = value;
}

// optional int32 skill_level = 2;
inline bool ProtoSkill::has_skill_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoSkill::set_has_skill_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoSkill::clear_has_skill_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoSkill::clear_skill_level() {
  skill_level_ = 0;
  clear_has_skill_level();
}
inline ::google::protobuf::int32 ProtoSkill::skill_level() const {
  return skill_level_;
}
inline void ProtoSkill::set_skill_level(::google::protobuf::int32 value) {
  set_has_skill_level();
  skill_level_ = value;
}

// optional int32 use_sec = 3;
inline bool ProtoSkill::has_use_sec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoSkill::set_has_use_sec() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoSkill::clear_has_use_sec() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoSkill::clear_use_sec() {
  use_sec_ = 0;
  clear_has_use_sec();
}
inline ::google::protobuf::int32 ProtoSkill::use_sec() const {
  return use_sec_;
}
inline void ProtoSkill::set_use_sec(::google::protobuf::int32 value) {
  set_has_use_sec();
  use_sec_ = value;
}

// optional int32 use_usec = 4;
inline bool ProtoSkill::has_use_usec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoSkill::set_has_use_usec() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoSkill::clear_has_use_usec() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoSkill::clear_use_usec() {
  use_usec_ = 0;
  clear_has_use_usec();
}
inline ::google::protobuf::int32 ProtoSkill::use_usec() const {
  return use_usec_;
}
inline void ProtoSkill::set_use_usec(::google::protobuf::int32 value) {
  set_has_use_usec();
  use_usec_ = value;
}

// optional int32 use_times = 5;
inline bool ProtoSkill::has_use_times() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoSkill::set_has_use_times() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoSkill::clear_has_use_times() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoSkill::clear_use_times() {
  use_times_ = 0;
  clear_has_use_times();
}
inline ::google::protobuf::int32 ProtoSkill::use_times() const {
  return use_times_;
}
inline void ProtoSkill::set_use_times(::google::protobuf::int32 value) {
  set_has_use_times();
  use_times_ = value;
}

// -------------------------------------------------------------------

// ProtoMoney

// optional int32 copper = 1;
inline bool ProtoMoney::has_copper() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoMoney::set_has_copper() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoMoney::clear_has_copper() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoMoney::clear_copper() {
  copper_ = 0;
  clear_has_copper();
}
inline ::google::protobuf::int32 ProtoMoney::copper() const {
  return copper_;
}
inline void ProtoMoney::set_copper(::google::protobuf::int32 value) {
  set_has_copper();
  copper_ = value;
}

// optional int32 gold = 2;
inline bool ProtoMoney::has_gold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoMoney::set_has_gold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoMoney::clear_has_gold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoMoney::clear_gold() {
  gold_ = 0;
  clear_has_gold();
}
inline ::google::protobuf::int32 ProtoMoney::gold() const {
  return gold_;
}
inline void ProtoMoney::set_gold(::google::protobuf::int32 value) {
  set_has_gold();
  gold_ = value;
}

// optional int32 bind_gold = 3;
inline bool ProtoMoney::has_bind_gold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoMoney::set_has_bind_gold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoMoney::clear_has_bind_gold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoMoney::clear_bind_gold() {
  bind_gold_ = 0;
  clear_has_bind_gold();
}
inline ::google::protobuf::int32 ProtoMoney::bind_gold() const {
  return bind_gold_;
}
inline void ProtoMoney::set_bind_gold(::google::protobuf::int32 value) {
  set_has_bind_gold();
  bind_gold_ = value;
}

// optional int32 bind_copper = 4;
inline bool ProtoMoney::has_bind_copper() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoMoney::set_has_bind_copper() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoMoney::clear_has_bind_copper() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoMoney::clear_bind_copper() {
  bind_copper_ = 0;
  clear_has_bind_copper();
}
inline ::google::protobuf::int32 ProtoMoney::bind_copper() const {
  return bind_copper_;
}
inline void ProtoMoney::set_bind_copper(::google::protobuf::int32 value) {
  set_has_bind_copper();
  bind_copper_ = value;
}

// -------------------------------------------------------------------

// ProtoItem

// optional int32 index = 1;
inline bool ProtoItem::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoItem::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoItem::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoItem::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 ProtoItem::index() const {
  return index_;
}
inline void ProtoItem::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 id = 2;
inline bool ProtoItem::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoItem::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoItem::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ProtoItem::id() const {
  return id_;
}
inline void ProtoItem::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 amount = 3;
inline bool ProtoItem::has_amount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoItem::set_has_amount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoItem::clear_has_amount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoItem::clear_amount() {
  amount_ = 0;
  clear_has_amount();
}
inline ::google::protobuf::int32 ProtoItem::amount() const {
  return amount_;
}
inline void ProtoItem::set_amount(::google::protobuf::int32 value) {
  set_has_amount();
  amount_ = value;
}

// optional int32 bind = 4;
inline bool ProtoItem::has_bind() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoItem::set_has_bind() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoItem::clear_has_bind() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoItem::clear_bind() {
  bind_ = 0;
  clear_has_bind();
}
inline ::google::protobuf::int32 ProtoItem::bind() const {
  return bind_;
}
inline void ProtoItem::set_bind(::google::protobuf::int32 value) {
  set_has_bind();
  bind_ = value;
}

// optional .ProtoEquip equipment = 5;
inline bool ProtoItem::has_equipment() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoItem::set_has_equipment() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoItem::clear_has_equipment() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoItem::clear_equipment() {
  if (equipment_ != NULL) equipment_->::ProtoEquip::Clear();
  clear_has_equipment();
}
inline const ::ProtoEquip& ProtoItem::equipment() const {
  return equipment_ != NULL ? *equipment_ : *default_instance_->equipment_;
}
inline ::ProtoEquip* ProtoItem::mutable_equipment() {
  set_has_equipment();
  if (equipment_ == NULL) equipment_ = new ::ProtoEquip;
  return equipment_;
}
inline ::ProtoEquip* ProtoItem::release_equipment() {
  clear_has_equipment();
  ::ProtoEquip* temp = equipment_;
  equipment_ = NULL;
  return temp;
}

// optional .ProtoTreasure treausure = 6;
inline bool ProtoItem::has_treausure() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoItem::set_has_treausure() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoItem::clear_has_treausure() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoItem::clear_treausure() {
  if (treausure_ != NULL) treausure_->::ProtoTreasure::Clear();
  clear_has_treausure();
}
inline const ::ProtoTreasure& ProtoItem::treausure() const {
  return treausure_ != NULL ? *treausure_ : *default_instance_->treausure_;
}
inline ::ProtoTreasure* ProtoItem::mutable_treausure() {
  set_has_treausure();
  if (treausure_ == NULL) treausure_ = new ::ProtoTreasure;
  return treausure_;
}
inline ::ProtoTreasure* ProtoItem::release_treausure() {
  clear_has_treausure();
  ::ProtoTreasure* temp = treausure_;
  treausure_ = NULL;
  return temp;
}

// optional int32 use_times = 7;
inline bool ProtoItem::has_use_times() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoItem::set_has_use_times() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoItem::clear_has_use_times() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoItem::clear_use_times() {
  use_times_ = 0;
  clear_has_use_times();
}
inline ::google::protobuf::int32 ProtoItem::use_times() const {
  return use_times_;
}
inline void ProtoItem::set_use_times(::google::protobuf::int32 value) {
  set_has_use_times();
  use_times_ = value;
}

// optional int64 use_tick = 8;
inline bool ProtoItem::has_use_tick() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoItem::set_has_use_tick() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoItem::clear_has_use_tick() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoItem::clear_use_tick() {
  use_tick_ = GOOGLE_LONGLONG(0);
  clear_has_use_tick();
}
inline ::google::protobuf::int64 ProtoItem::use_tick() const {
  return use_tick_;
}
inline void ProtoItem::set_use_tick(::google::protobuf::int64 value) {
  set_has_use_tick();
  use_tick_ = value;
}

// optional int32 new_tag = 9;
inline bool ProtoItem::has_new_tag() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProtoItem::set_has_new_tag() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProtoItem::clear_has_new_tag() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProtoItem::clear_new_tag() {
  new_tag_ = 0;
  clear_has_new_tag();
}
inline ::google::protobuf::int32 ProtoItem::new_tag() const {
  return new_tag_;
}
inline void ProtoItem::set_new_tag(::google::protobuf::int32 value) {
  set_has_new_tag();
  new_tag_ = value;
}

// optional int64 unique_id = 10;
inline bool ProtoItem::has_unique_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProtoItem::set_has_unique_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ProtoItem::clear_has_unique_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ProtoItem::clear_unique_id() {
  unique_id_ = GOOGLE_LONGLONG(0);
  clear_has_unique_id();
}
inline ::google::protobuf::int64 ProtoItem::unique_id() const {
  return unique_id_;
}
inline void ProtoItem::set_unique_id(::google::protobuf::int64 value) {
  set_has_unique_id();
  unique_id_ = value;
}

// optional int32 force = 11;
inline bool ProtoItem::has_force() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ProtoItem::set_has_force() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ProtoItem::clear_has_force() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ProtoItem::clear_force() {
  force_ = 0;
  clear_has_force();
}
inline ::google::protobuf::int32 ProtoItem::force() const {
  return force_;
}
inline void ProtoItem::set_force(::google::protobuf::int32 value) {
  set_has_force();
  force_ = value;
}

// optional uint64 timeout = 12;
inline bool ProtoItem::has_timeout() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ProtoItem::set_has_timeout() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ProtoItem::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ProtoItem::clear_timeout() {
  timeout_ = GOOGLE_ULONGLONG(0);
  clear_has_timeout();
}
inline ::google::protobuf::uint64 ProtoItem::timeout() const {
  return timeout_;
}
inline void ProtoItem::set_timeout(::google::protobuf::uint64 value) {
  set_has_timeout();
  timeout_ = value;
}

// optional int32 out_time_item_id = 13;
inline bool ProtoItem::has_out_time_item_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ProtoItem::set_has_out_time_item_id() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ProtoItem::clear_has_out_time_item_id() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ProtoItem::clear_out_time_item_id() {
  out_time_item_id_ = 0;
  clear_has_out_time_item_id();
}
inline ::google::protobuf::int32 ProtoItem::out_time_item_id() const {
  return out_time_item_id_;
}
inline void ProtoItem::set_out_time_item_id(::google::protobuf::int32 value) {
  set_has_out_time_item_id();
  out_time_item_id_ = value;
}

// optional int32 out_time_item_amount = 14;
inline bool ProtoItem::has_out_time_item_amount() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ProtoItem::set_has_out_time_item_amount() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ProtoItem::clear_has_out_time_item_amount() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ProtoItem::clear_out_time_item_amount() {
  out_time_item_amount_ = 0;
  clear_has_out_time_item_amount();
}
inline ::google::protobuf::int32 ProtoItem::out_time_item_amount() const {
  return out_time_item_amount_;
}
inline void ProtoItem::set_out_time_item_amount(::google::protobuf::int32 value) {
  set_has_out_time_item_amount();
  out_time_item_amount_ = value;
}

// optional int32 out_time_item_bind = 15;
inline bool ProtoItem::has_out_time_item_bind() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ProtoItem::set_has_out_time_item_bind() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ProtoItem::clear_has_out_time_item_bind() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ProtoItem::clear_out_time_item_bind() {
  out_time_item_bind_ = 0;
  clear_has_out_time_item_bind();
}
inline ::google::protobuf::int32 ProtoItem::out_time_item_bind() const {
  return out_time_item_bind_;
}
inline void ProtoItem::set_out_time_item_bind(::google::protobuf::int32 value) {
  set_has_out_time_item_bind();
  out_time_item_bind_ = value;
}

// optional int32 tips_level = 16;
inline bool ProtoItem::has_tips_level() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ProtoItem::set_has_tips_level() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ProtoItem::clear_has_tips_level() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ProtoItem::clear_tips_level() {
  tips_level_ = 0;
  clear_has_tips_level();
}
inline ::google::protobuf::int32 ProtoItem::tips_level() const {
  return tips_level_;
}
inline void ProtoItem::set_tips_level(::google::protobuf::int32 value) {
  set_has_tips_level();
  tips_level_ = value;
}

// repeated int32 tips_time_map = 17;
inline int ProtoItem::tips_time_map_size() const {
  return tips_time_map_.size();
}
inline void ProtoItem::clear_tips_time_map() {
  tips_time_map_.Clear();
}
inline ::google::protobuf::int32 ProtoItem::tips_time_map(int index) const {
  return tips_time_map_.Get(index);
}
inline void ProtoItem::set_tips_time_map(int index, ::google::protobuf::int32 value) {
  tips_time_map_.Set(index, value);
}
inline void ProtoItem::add_tips_time_map(::google::protobuf::int32 value) {
  tips_time_map_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProtoItem::tips_time_map() const {
  return tips_time_map_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProtoItem::mutable_tips_time_map() {
  return &tips_time_map_;
}

// repeated int32 tips_status_map = 18;
inline int ProtoItem::tips_status_map_size() const {
  return tips_status_map_.size();
}
inline void ProtoItem::clear_tips_status_map() {
  tips_status_map_.Clear();
}
inline ::google::protobuf::int32 ProtoItem::tips_status_map(int index) const {
  return tips_status_map_.Get(index);
}
inline void ProtoItem::set_tips_status_map(int index, ::google::protobuf::int32 value) {
  tips_status_map_.Set(index, value);
}
inline void ProtoItem::add_tips_status_map(::google::protobuf::int32 value) {
  tips_status_map_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProtoItem::tips_status_map() const {
  return tips_status_map_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProtoItem::mutable_tips_status_map() {
  return &tips_status_map_;
}

// -------------------------------------------------------------------

// ProtoEquip

// optional int32 refine_level = 1;
inline bool ProtoEquip::has_refine_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoEquip::set_has_refine_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoEquip::clear_has_refine_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoEquip::clear_refine_level() {
  refine_level_ = 0;
  clear_has_refine_level();
}
inline ::google::protobuf::int32 ProtoEquip::refine_level() const {
  return refine_level_;
}
inline void ProtoEquip::set_refine_level(::google::protobuf::int32 value) {
  set_has_refine_level();
  refine_level_ = value;
}

// optional .ProtoFashionInfo fashion_info = 2;
inline bool ProtoEquip::has_fashion_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoEquip::set_has_fashion_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoEquip::clear_has_fashion_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoEquip::clear_fashion_info() {
  if (fashion_info_ != NULL) fashion_info_->::ProtoFashionInfo::Clear();
  clear_has_fashion_info();
}
inline const ::ProtoFashionInfo& ProtoEquip::fashion_info() const {
  return fashion_info_ != NULL ? *fashion_info_ : *default_instance_->fashion_info_;
}
inline ::ProtoFashionInfo* ProtoEquip::mutable_fashion_info() {
  set_has_fashion_info();
  if (fashion_info_ == NULL) fashion_info_ = new ::ProtoFashionInfo;
  return fashion_info_;
}
inline ::ProtoFashionInfo* ProtoEquip::release_fashion_info() {
  clear_has_fashion_info();
  ::ProtoFashionInfo* temp = fashion_info_;
  fashion_info_ = NULL;
  return temp;
}

// optional int32 refine_degree = 3;
inline bool ProtoEquip::has_refine_degree() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoEquip::set_has_refine_degree() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoEquip::clear_has_refine_degree() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoEquip::clear_refine_degree() {
  refine_degree_ = 0;
  clear_has_refine_degree();
}
inline ::google::protobuf::int32 ProtoEquip::refine_degree() const {
  return refine_degree_;
}
inline void ProtoEquip::set_refine_degree(::google::protobuf::int32 value) {
  set_has_refine_degree();
  refine_degree_ = value;
}

// repeated .ProtoPairObj jewel_lists = 4;
inline int ProtoEquip::jewel_lists_size() const {
  return jewel_lists_.size();
}
inline void ProtoEquip::clear_jewel_lists() {
  jewel_lists_.Clear();
}
inline const ::ProtoPairObj& ProtoEquip::jewel_lists(int index) const {
  return jewel_lists_.Get(index);
}
inline ::ProtoPairObj* ProtoEquip::mutable_jewel_lists(int index) {
  return jewel_lists_.Mutable(index);
}
inline ::ProtoPairObj* ProtoEquip::add_jewel_lists() {
  return jewel_lists_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >&
ProtoEquip::jewel_lists() const {
  return jewel_lists_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >*
ProtoEquip::mutable_jewel_lists() {
  return &jewel_lists_;
}

// repeated .ProtoPairObj refine_lists = 5;
inline int ProtoEquip::refine_lists_size() const {
  return refine_lists_.size();
}
inline void ProtoEquip::clear_refine_lists() {
  refine_lists_.Clear();
}
inline const ::ProtoPairObj& ProtoEquip::refine_lists(int index) const {
  return refine_lists_.Get(index);
}
inline ::ProtoPairObj* ProtoEquip::mutable_refine_lists(int index) {
  return refine_lists_.Mutable(index);
}
inline ::ProtoPairObj* ProtoEquip::add_refine_lists() {
  return refine_lists_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >&
ProtoEquip::refine_lists() const {
  return refine_lists_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >*
ProtoEquip::mutable_refine_lists() {
  return &refine_lists_;
}

// repeated .MoldingNature molding_nature = 6;
inline int ProtoEquip::molding_nature_size() const {
  return molding_nature_.size();
}
inline void ProtoEquip::clear_molding_nature() {
  molding_nature_.Clear();
}
inline const ::MoldingNature& ProtoEquip::molding_nature(int index) const {
  return molding_nature_.Get(index);
}
inline ::MoldingNature* ProtoEquip::mutable_molding_nature(int index) {
  return molding_nature_.Mutable(index);
}
inline ::MoldingNature* ProtoEquip::add_molding_nature() {
  return molding_nature_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MoldingNature >&
ProtoEquip::molding_nature() const {
  return molding_nature_;
}
inline ::google::protobuf::RepeatedPtrField< ::MoldingNature >*
ProtoEquip::mutable_molding_nature() {
  return &molding_nature_;
}

// -------------------------------------------------------------------

// ProtoChatInfo

// optional int32 channel = 1;
inline bool ProtoChatInfo::has_channel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoChatInfo::set_has_channel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoChatInfo::clear_has_channel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoChatInfo::clear_channel() {
  channel_ = 0;
  clear_has_channel();
}
inline ::google::protobuf::int32 ProtoChatInfo::channel() const {
  return channel_;
}
inline void ProtoChatInfo::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
}

// optional int32 type = 2;
inline bool ProtoChatInfo::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoChatInfo::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoChatInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoChatInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ProtoChatInfo::type() const {
  return type_;
}
inline void ProtoChatInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int64 voice_id = 3;
inline bool ProtoChatInfo::has_voice_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoChatInfo::set_has_voice_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoChatInfo::clear_has_voice_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoChatInfo::clear_voice_id() {
  voice_id_ = GOOGLE_LONGLONG(0);
  clear_has_voice_id();
}
inline ::google::protobuf::int64 ProtoChatInfo::voice_id() const {
  return voice_id_;
}
inline void ProtoChatInfo::set_voice_id(::google::protobuf::int64 value) {
  set_has_voice_id();
  voice_id_ = value;
}

// optional int32 voice_len = 4;
inline bool ProtoChatInfo::has_voice_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoChatInfo::set_has_voice_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoChatInfo::clear_has_voice_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoChatInfo::clear_voice_len() {
  voice_len_ = 0;
  clear_has_voice_len();
}
inline ::google::protobuf::int32 ProtoChatInfo::voice_len() const {
  return voice_len_;
}
inline void ProtoChatInfo::set_voice_len(::google::protobuf::int32 value) {
  set_has_voice_len();
  voice_len_ = value;
}

// optional int64 role_id = 5;
inline bool ProtoChatInfo::has_role_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoChatInfo::set_has_role_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoChatInfo::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoChatInfo::clear_role_id() {
  role_id_ = GOOGLE_LONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::int64 ProtoChatInfo::role_id() const {
  return role_id_;
}
inline void ProtoChatInfo::set_role_id(::google::protobuf::int64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string name = 6;
inline bool ProtoChatInfo::has_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoChatInfo::set_has_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoChatInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoChatInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ProtoChatInfo::name() const {
  return *name_;
}
inline void ProtoChatInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ProtoChatInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ProtoChatInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoChatInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ProtoChatInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 sex = 7;
inline bool ProtoChatInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoChatInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoChatInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoChatInfo::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 ProtoChatInfo::sex() const {
  return sex_;
}
inline void ProtoChatInfo::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// optional int32 level = 8;
inline bool ProtoChatInfo::has_level() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoChatInfo::set_has_level() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoChatInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoChatInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ProtoChatInfo::level() const {
  return level_;
}
inline void ProtoChatInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 vip = 9;
inline bool ProtoChatInfo::has_vip() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProtoChatInfo::set_has_vip() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProtoChatInfo::clear_has_vip() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProtoChatInfo::clear_vip() {
  vip_ = 0;
  clear_has_vip();
}
inline ::google::protobuf::int32 ProtoChatInfo::vip() const {
  return vip_;
}
inline void ProtoChatInfo::set_vip(::google::protobuf::int32 value) {
  set_has_vip();
  vip_ = value;
}

// optional int32 team = 10;
inline bool ProtoChatInfo::has_team() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProtoChatInfo::set_has_team() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ProtoChatInfo::clear_has_team() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ProtoChatInfo::clear_team() {
  team_ = 0;
  clear_has_team();
}
inline ::google::protobuf::int32 ProtoChatInfo::team() const {
  return team_;
}
inline void ProtoChatInfo::set_team(::google::protobuf::int32 value) {
  set_has_team();
  team_ = value;
}

// optional int32 label = 11;
inline bool ProtoChatInfo::has_label() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ProtoChatInfo::set_has_label() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ProtoChatInfo::clear_has_label() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ProtoChatInfo::clear_label() {
  label_ = 0;
  clear_has_label();
}
inline ::google::protobuf::int32 ProtoChatInfo::label() const {
  return label_;
}
inline void ProtoChatInfo::set_label(::google::protobuf::int32 value) {
  set_has_label();
  label_ = value;
}

// optional int32 time = 12;
inline bool ProtoChatInfo::has_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ProtoChatInfo::set_has_time() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ProtoChatInfo::clear_has_time() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ProtoChatInfo::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 ProtoChatInfo::time() const {
  return time_;
}
inline void ProtoChatInfo::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// optional string content = 13;
inline bool ProtoChatInfo::has_content() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ProtoChatInfo::set_has_content() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ProtoChatInfo::clear_has_content() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ProtoChatInfo::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& ProtoChatInfo::content() const {
  return *content_;
}
inline void ProtoChatInfo::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void ProtoChatInfo::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void ProtoChatInfo::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoChatInfo::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* ProtoChatInfo::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 target_id = 14;
inline bool ProtoChatInfo::has_target_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ProtoChatInfo::set_has_target_id() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ProtoChatInfo::clear_has_target_id() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ProtoChatInfo::clear_target_id() {
  target_id_ = GOOGLE_LONGLONG(0);
  clear_has_target_id();
}
inline ::google::protobuf::int64 ProtoChatInfo::target_id() const {
  return target_id_;
}
inline void ProtoChatInfo::set_target_id(::google::protobuf::int64 value) {
  set_has_target_id();
  target_id_ = value;
}

// optional string target_name = 15;
inline bool ProtoChatInfo::has_target_name() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ProtoChatInfo::set_has_target_name() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ProtoChatInfo::clear_has_target_name() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ProtoChatInfo::clear_target_name() {
  if (target_name_ != &::google::protobuf::internal::kEmptyString) {
    target_name_->clear();
  }
  clear_has_target_name();
}
inline const ::std::string& ProtoChatInfo::target_name() const {
  return *target_name_;
}
inline void ProtoChatInfo::set_target_name(const ::std::string& value) {
  set_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    target_name_ = new ::std::string;
  }
  target_name_->assign(value);
}
inline void ProtoChatInfo::set_target_name(const char* value) {
  set_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    target_name_ = new ::std::string;
  }
  target_name_->assign(value);
}
inline void ProtoChatInfo::set_target_name(const char* value, size_t size) {
  set_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    target_name_ = new ::std::string;
  }
  target_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoChatInfo::mutable_target_name() {
  set_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    target_name_ = new ::std::string;
  }
  return target_name_;
}
inline ::std::string* ProtoChatInfo::release_target_name() {
  clear_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = target_name_;
    target_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 target_sex = 16;
inline bool ProtoChatInfo::has_target_sex() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ProtoChatInfo::set_has_target_sex() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ProtoChatInfo::clear_has_target_sex() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ProtoChatInfo::clear_target_sex() {
  target_sex_ = 0;
  clear_has_target_sex();
}
inline ::google::protobuf::int32 ProtoChatInfo::target_sex() const {
  return target_sex_;
}
inline void ProtoChatInfo::set_target_sex(::google::protobuf::int32 value) {
  set_has_target_sex();
  target_sex_ = value;
}

// optional int32 target_level = 17;
inline bool ProtoChatInfo::has_target_level() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ProtoChatInfo::set_has_target_level() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ProtoChatInfo::clear_has_target_level() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ProtoChatInfo::clear_target_level() {
  target_level_ = 0;
  clear_has_target_level();
}
inline ::google::protobuf::int32 ProtoChatInfo::target_level() const {
  return target_level_;
}
inline void ProtoChatInfo::set_target_level(::google::protobuf::int32 value) {
  set_has_target_level();
  target_level_ = value;
}

// optional int32 target_vip = 18;
inline bool ProtoChatInfo::has_target_vip() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ProtoChatInfo::set_has_target_vip() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ProtoChatInfo::clear_has_target_vip() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ProtoChatInfo::clear_target_vip() {
  target_vip_ = 0;
  clear_has_target_vip();
}
inline ::google::protobuf::int32 ProtoChatInfo::target_vip() const {
  return target_vip_;
}
inline void ProtoChatInfo::set_target_vip(::google::protobuf::int32 value) {
  set_has_target_vip();
  target_vip_ = value;
}

// optional int32 target_team = 19;
inline bool ProtoChatInfo::has_target_team() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ProtoChatInfo::set_has_target_team() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ProtoChatInfo::clear_has_target_team() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ProtoChatInfo::clear_target_team() {
  target_team_ = 0;
  clear_has_target_team();
}
inline ::google::protobuf::int32 ProtoChatInfo::target_team() const {
  return target_team_;
}
inline void ProtoChatInfo::set_target_team(::google::protobuf::int32 value) {
  set_has_target_team();
  target_team_ = value;
}

// optional int32 target_label = 20;
inline bool ProtoChatInfo::has_target_label() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ProtoChatInfo::set_has_target_label() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ProtoChatInfo::clear_has_target_label() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ProtoChatInfo::clear_target_label() {
  target_label_ = 0;
  clear_has_target_label();
}
inline ::google::protobuf::int32 ProtoChatInfo::target_label() const {
  return target_label_;
}
inline void ProtoChatInfo::set_target_label(::google::protobuf::int32 value) {
  set_has_target_label();
  target_label_ = value;
}

// optional .ProtoFlaunt flaunt_detail = 21;
inline bool ProtoChatInfo::has_flaunt_detail() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ProtoChatInfo::set_has_flaunt_detail() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ProtoChatInfo::clear_has_flaunt_detail() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ProtoChatInfo::clear_flaunt_detail() {
  if (flaunt_detail_ != NULL) flaunt_detail_->::ProtoFlaunt::Clear();
  clear_has_flaunt_detail();
}
inline const ::ProtoFlaunt& ProtoChatInfo::flaunt_detail() const {
  return flaunt_detail_ != NULL ? *flaunt_detail_ : *default_instance_->flaunt_detail_;
}
inline ::ProtoFlaunt* ProtoChatInfo::mutable_flaunt_detail() {
  set_has_flaunt_detail();
  if (flaunt_detail_ == NULL) flaunt_detail_ = new ::ProtoFlaunt;
  return flaunt_detail_;
}
inline ::ProtoFlaunt* ProtoChatInfo::release_flaunt_detail() {
  clear_has_flaunt_detail();
  ::ProtoFlaunt* temp = flaunt_detail_;
  flaunt_detail_ = NULL;
  return temp;
}

// optional int32 career = 22;
inline bool ProtoChatInfo::has_career() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ProtoChatInfo::set_has_career() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ProtoChatInfo::clear_has_career() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ProtoChatInfo::clear_career() {
  career_ = 0;
  clear_has_career();
}
inline ::google::protobuf::int32 ProtoChatInfo::career() const {
  return career_;
}
inline void ProtoChatInfo::set_career(::google::protobuf::int32 value) {
  set_has_career();
  career_ = value;
}

// optional int32 permission = 23;
inline bool ProtoChatInfo::has_permission() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ProtoChatInfo::set_has_permission() {
  _has_bits_[0] |= 0x00400000u;
}
inline void ProtoChatInfo::clear_has_permission() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void ProtoChatInfo::clear_permission() {
  permission_ = 0;
  clear_has_permission();
}
inline ::google::protobuf::int32 ProtoChatInfo::permission() const {
  return permission_;
}
inline void ProtoChatInfo::set_permission(::google::protobuf::int32 value) {
  set_has_permission();
  permission_ = value;
}

// optional string server_prev = 24;
inline bool ProtoChatInfo::has_server_prev() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void ProtoChatInfo::set_has_server_prev() {
  _has_bits_[0] |= 0x00800000u;
}
inline void ProtoChatInfo::clear_has_server_prev() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void ProtoChatInfo::clear_server_prev() {
  if (server_prev_ != &::google::protobuf::internal::kEmptyString) {
    server_prev_->clear();
  }
  clear_has_server_prev();
}
inline const ::std::string& ProtoChatInfo::server_prev() const {
  return *server_prev_;
}
inline void ProtoChatInfo::set_server_prev(const ::std::string& value) {
  set_has_server_prev();
  if (server_prev_ == &::google::protobuf::internal::kEmptyString) {
    server_prev_ = new ::std::string;
  }
  server_prev_->assign(value);
}
inline void ProtoChatInfo::set_server_prev(const char* value) {
  set_has_server_prev();
  if (server_prev_ == &::google::protobuf::internal::kEmptyString) {
    server_prev_ = new ::std::string;
  }
  server_prev_->assign(value);
}
inline void ProtoChatInfo::set_server_prev(const char* value, size_t size) {
  set_has_server_prev();
  if (server_prev_ == &::google::protobuf::internal::kEmptyString) {
    server_prev_ = new ::std::string;
  }
  server_prev_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoChatInfo::mutable_server_prev() {
  set_has_server_prev();
  if (server_prev_ == &::google::protobuf::internal::kEmptyString) {
    server_prev_ = new ::std::string;
  }
  return server_prev_;
}
inline ::std::string* ProtoChatInfo::release_server_prev() {
  clear_has_server_prev();
  if (server_prev_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_prev_;
    server_prev_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 server_id = 25;
inline bool ProtoChatInfo::has_server_id() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void ProtoChatInfo::set_has_server_id() {
  _has_bits_[0] |= 0x01000000u;
}
inline void ProtoChatInfo::clear_has_server_id() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void ProtoChatInfo::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
inline ::google::protobuf::int32 ProtoChatInfo::server_id() const {
  return server_id_;
}
inline void ProtoChatInfo::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
}

// optional int32 scene_id = 26;
inline bool ProtoChatInfo::has_scene_id() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void ProtoChatInfo::set_has_scene_id() {
  _has_bits_[0] |= 0x02000000u;
}
inline void ProtoChatInfo::clear_has_scene_id() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void ProtoChatInfo::clear_scene_id() {
  scene_id_ = 0;
  clear_has_scene_id();
}
inline ::google::protobuf::int32 ProtoChatInfo::scene_id() const {
  return scene_id_;
}
inline void ProtoChatInfo::set_scene_id(::google::protobuf::int32 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// optional string league_name = 27;
inline bool ProtoChatInfo::has_league_name() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void ProtoChatInfo::set_has_league_name() {
  _has_bits_[0] |= 0x04000000u;
}
inline void ProtoChatInfo::clear_has_league_name() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void ProtoChatInfo::clear_league_name() {
  if (league_name_ != &::google::protobuf::internal::kEmptyString) {
    league_name_->clear();
  }
  clear_has_league_name();
}
inline const ::std::string& ProtoChatInfo::league_name() const {
  return *league_name_;
}
inline void ProtoChatInfo::set_league_name(const ::std::string& value) {
  set_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    league_name_ = new ::std::string;
  }
  league_name_->assign(value);
}
inline void ProtoChatInfo::set_league_name(const char* value) {
  set_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    league_name_ = new ::std::string;
  }
  league_name_->assign(value);
}
inline void ProtoChatInfo::set_league_name(const char* value, size_t size) {
  set_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    league_name_ = new ::std::string;
  }
  league_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoChatInfo::mutable_league_name() {
  set_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    league_name_ = new ::std::string;
  }
  return league_name_;
}
inline ::std::string* ProtoChatInfo::release_league_name() {
  clear_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = league_name_;
    league_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string target_league_name = 28;
inline bool ProtoChatInfo::has_target_league_name() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void ProtoChatInfo::set_has_target_league_name() {
  _has_bits_[0] |= 0x08000000u;
}
inline void ProtoChatInfo::clear_has_target_league_name() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void ProtoChatInfo::clear_target_league_name() {
  if (target_league_name_ != &::google::protobuf::internal::kEmptyString) {
    target_league_name_->clear();
  }
  clear_has_target_league_name();
}
inline const ::std::string& ProtoChatInfo::target_league_name() const {
  return *target_league_name_;
}
inline void ProtoChatInfo::set_target_league_name(const ::std::string& value) {
  set_has_target_league_name();
  if (target_league_name_ == &::google::protobuf::internal::kEmptyString) {
    target_league_name_ = new ::std::string;
  }
  target_league_name_->assign(value);
}
inline void ProtoChatInfo::set_target_league_name(const char* value) {
  set_has_target_league_name();
  if (target_league_name_ == &::google::protobuf::internal::kEmptyString) {
    target_league_name_ = new ::std::string;
  }
  target_league_name_->assign(value);
}
inline void ProtoChatInfo::set_target_league_name(const char* value, size_t size) {
  set_has_target_league_name();
  if (target_league_name_ == &::google::protobuf::internal::kEmptyString) {
    target_league_name_ = new ::std::string;
  }
  target_league_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoChatInfo::mutable_target_league_name() {
  set_has_target_league_name();
  if (target_league_name_ == &::google::protobuf::internal::kEmptyString) {
    target_league_name_ = new ::std::string;
  }
  return target_league_name_;
}
inline ::std::string* ProtoChatInfo::release_target_league_name() {
  clear_has_target_league_name();
  if (target_league_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = target_league_name_;
    target_league_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ProtoDelItem

// optional int32 del_index = 1;
inline bool ProtoDelItem::has_del_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoDelItem::set_has_del_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoDelItem::clear_has_del_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoDelItem::clear_del_index() {
  del_index_ = 0;
  clear_has_del_index();
}
inline ::google::protobuf::int32 ProtoDelItem::del_index() const {
  return del_index_;
}
inline void ProtoDelItem::set_del_index(::google::protobuf::int32 value) {
  set_has_del_index();
  del_index_ = value;
}

// optional int32 del_amount = 2;
inline bool ProtoDelItem::has_del_amount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoDelItem::set_has_del_amount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoDelItem::clear_has_del_amount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoDelItem::clear_del_amount() {
  del_amount_ = 0;
  clear_has_del_amount();
}
inline ::google::protobuf::int32 ProtoDelItem::del_amount() const {
  return del_amount_;
}
inline void ProtoDelItem::set_del_amount(::google::protobuf::int32 value) {
  set_has_del_amount();
  del_amount_ = value;
}

// -------------------------------------------------------------------

// ProtoTaskCond

// optional int32 index = 1;
inline bool ProtoTaskCond::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoTaskCond::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoTaskCond::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoTaskCond::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 ProtoTaskCond::index() const {
  return index_;
}
inline void ProtoTaskCond::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 value = 2;
inline bool ProtoTaskCond::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoTaskCond::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoTaskCond::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoTaskCond::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 ProtoTaskCond::value() const {
  return value_;
}
inline void ProtoTaskCond::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// optional int32 final_value = 3;
inline bool ProtoTaskCond::has_final_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoTaskCond::set_has_final_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoTaskCond::clear_has_final_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoTaskCond::clear_final_value() {
  final_value_ = 0;
  clear_has_final_value();
}
inline ::google::protobuf::int32 ProtoTaskCond::final_value() const {
  return final_value_;
}
inline void ProtoTaskCond::set_final_value(::google::protobuf::int32 value) {
  set_has_final_value();
  final_value_ = value;
}

// optional int32 cond_id = 4;
inline bool ProtoTaskCond::has_cond_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoTaskCond::set_has_cond_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoTaskCond::clear_has_cond_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoTaskCond::clear_cond_id() {
  cond_id_ = 0;
  clear_has_cond_id();
}
inline ::google::protobuf::int32 ProtoTaskCond::cond_id() const {
  return cond_id_;
}
inline void ProtoTaskCond::set_cond_id(::google::protobuf::int32 value) {
  set_has_cond_id();
  cond_id_ = value;
}

// optional int32 cond_type = 5;
inline bool ProtoTaskCond::has_cond_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoTaskCond::set_has_cond_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoTaskCond::clear_has_cond_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoTaskCond::clear_cond_type() {
  cond_type_ = 0;
  clear_has_cond_type();
}
inline ::google::protobuf::int32 ProtoTaskCond::cond_type() const {
  return cond_type_;
}
inline void ProtoTaskCond::set_cond_type(::google::protobuf::int32 value) {
  set_has_cond_type();
  cond_type_ = value;
}

// optional int32 kill_type = 6;
inline bool ProtoTaskCond::has_kill_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoTaskCond::set_has_kill_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoTaskCond::clear_has_kill_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoTaskCond::clear_kill_type() {
  kill_type_ = 0;
  clear_has_kill_type();
}
inline ::google::protobuf::int32 ProtoTaskCond::kill_type() const {
  return kill_type_;
}
inline void ProtoTaskCond::set_kill_type(::google::protobuf::int32 value) {
  set_has_kill_type();
  kill_type_ = value;
}

// optional int32 range_level = 7;
inline bool ProtoTaskCond::has_range_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoTaskCond::set_has_range_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoTaskCond::clear_has_range_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoTaskCond::clear_range_level() {
  range_level_ = 0;
  clear_has_range_level();
}
inline ::google::protobuf::int32 ProtoTaskCond::range_level() const {
  return range_level_;
}
inline void ProtoTaskCond::set_range_level(::google::protobuf::int32 value) {
  set_has_range_level();
  range_level_ = value;
}

// -------------------------------------------------------------------

// ProtoTaskInfo

// optional int32 task_id = 1;
inline bool ProtoTaskInfo::has_task_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoTaskInfo::set_has_task_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoTaskInfo::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoTaskInfo::clear_task_id() {
  task_id_ = 0;
  clear_has_task_id();
}
inline ::google::protobuf::int32 ProtoTaskInfo::task_id() const {
  return task_id_;
}
inline void ProtoTaskInfo::set_task_id(::google::protobuf::int32 value) {
  set_has_task_id();
  task_id_ = value;
}

// optional int32 type = 2;
inline bool ProtoTaskInfo::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoTaskInfo::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoTaskInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoTaskInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ProtoTaskInfo::type() const {
  return type_;
}
inline void ProtoTaskInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 status = 3;
inline bool ProtoTaskInfo::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoTaskInfo::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoTaskInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoTaskInfo::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 ProtoTaskInfo::status() const {
  return status_;
}
inline void ProtoTaskInfo::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// repeated .ProtoTaskCond cond_list = 4;
inline int ProtoTaskInfo::cond_list_size() const {
  return cond_list_.size();
}
inline void ProtoTaskInfo::clear_cond_list() {
  cond_list_.Clear();
}
inline const ::ProtoTaskCond& ProtoTaskInfo::cond_list(int index) const {
  return cond_list_.Get(index);
}
inline ::ProtoTaskCond* ProtoTaskInfo::mutable_cond_list(int index) {
  return cond_list_.Mutable(index);
}
inline ::ProtoTaskCond* ProtoTaskInfo::add_cond_list() {
  return cond_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoTaskCond >&
ProtoTaskInfo::cond_list() const {
  return cond_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoTaskCond >*
ProtoTaskInfo::mutable_cond_list() {
  return &cond_list_;
}

// optional int32 routine_dice = 5;
inline bool ProtoTaskInfo::has_routine_dice() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoTaskInfo::set_has_routine_dice() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoTaskInfo::clear_has_routine_dice() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoTaskInfo::clear_routine_dice() {
  routine_dice_ = 0;
  clear_has_routine_dice();
}
inline ::google::protobuf::int32 ProtoTaskInfo::routine_dice() const {
  return routine_dice_;
}
inline void ProtoTaskInfo::set_routine_dice(::google::protobuf::int32 value) {
  set_has_routine_dice();
  routine_dice_ = value;
}

// optional int32 is_first_routine = 6;
inline bool ProtoTaskInfo::has_is_first_routine() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoTaskInfo::set_has_is_first_routine() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoTaskInfo::clear_has_is_first_routine() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoTaskInfo::clear_is_first_routine() {
  is_first_routine_ = 0;
  clear_has_is_first_routine();
}
inline ::google::protobuf::int32 ProtoTaskInfo::is_first_routine() const {
  return is_first_routine_;
}
inline void ProtoTaskInfo::set_is_first_routine(::google::protobuf::int32 value) {
  set_has_is_first_routine();
  is_first_routine_ = value;
}

// optional int32 task_star = 7;
inline bool ProtoTaskInfo::has_task_star() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoTaskInfo::set_has_task_star() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoTaskInfo::clear_has_task_star() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoTaskInfo::clear_task_star() {
  task_star_ = 0;
  clear_has_task_star();
}
inline ::google::protobuf::int32 ProtoTaskInfo::task_star() const {
  return task_star_;
}
inline void ProtoTaskInfo::set_task_star(::google::protobuf::int32 value) {
  set_has_task_star();
  task_star_ = value;
}

// optional int32 fast_finish_rate = 8;
inline bool ProtoTaskInfo::has_fast_finish_rate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoTaskInfo::set_has_fast_finish_rate() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoTaskInfo::clear_has_fast_finish_rate() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoTaskInfo::clear_fast_finish_rate() {
  fast_finish_rate_ = 0;
  clear_has_fast_finish_rate();
}
inline ::google::protobuf::int32 ProtoTaskInfo::fast_finish_rate() const {
  return fast_finish_rate_;
}
inline void ProtoTaskInfo::set_fast_finish_rate(::google::protobuf::int32 value) {
  set_has_fast_finish_rate();
  fast_finish_rate_ = value;
}

// optional int32 routine_index = 9;
inline bool ProtoTaskInfo::has_routine_index() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProtoTaskInfo::set_has_routine_index() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProtoTaskInfo::clear_has_routine_index() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProtoTaskInfo::clear_routine_index() {
  routine_index_ = 0;
  clear_has_routine_index();
}
inline ::google::protobuf::int32 ProtoTaskInfo::routine_index() const {
  return routine_index_;
}
inline void ProtoTaskInfo::set_routine_index(::google::protobuf::int32 value) {
  set_has_routine_index();
  routine_index_ = value;
}

// optional int32 routine_total = 10;
inline bool ProtoTaskInfo::has_routine_total() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProtoTaskInfo::set_has_routine_total() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ProtoTaskInfo::clear_has_routine_total() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ProtoTaskInfo::clear_routine_total() {
  routine_total_ = 0;
  clear_has_routine_total();
}
inline ::google::protobuf::int32 ProtoTaskInfo::routine_total() const {
  return routine_total_;
}
inline void ProtoTaskInfo::set_routine_total(::google::protobuf::int32 value) {
  set_has_routine_total();
  routine_total_ = value;
}

// optional int32 is_routine = 11;
inline bool ProtoTaskInfo::has_is_routine() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ProtoTaskInfo::set_has_is_routine() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ProtoTaskInfo::clear_has_is_routine() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ProtoTaskInfo::clear_is_routine() {
  is_routine_ = 0;
  clear_has_is_routine();
}
inline ::google::protobuf::int32 ProtoTaskInfo::is_routine() const {
  return is_routine_;
}
inline void ProtoTaskInfo::set_is_routine(::google::protobuf::int32 value) {
  set_has_is_routine();
  is_routine_ = value;
}

// optional .ProtoThreeObj offer_routine_info = 12;
inline bool ProtoTaskInfo::has_offer_routine_info() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ProtoTaskInfo::set_has_offer_routine_info() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ProtoTaskInfo::clear_has_offer_routine_info() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ProtoTaskInfo::clear_offer_routine_info() {
  if (offer_routine_info_ != NULL) offer_routine_info_->::ProtoThreeObj::Clear();
  clear_has_offer_routine_info();
}
inline const ::ProtoThreeObj& ProtoTaskInfo::offer_routine_info() const {
  return offer_routine_info_ != NULL ? *offer_routine_info_ : *default_instance_->offer_routine_info_;
}
inline ::ProtoThreeObj* ProtoTaskInfo::mutable_offer_routine_info() {
  set_has_offer_routine_info();
  if (offer_routine_info_ == NULL) offer_routine_info_ = new ::ProtoThreeObj;
  return offer_routine_info_;
}
inline ::ProtoThreeObj* ProtoTaskInfo::release_offer_routine_info() {
  clear_has_offer_routine_info();
  ::ProtoThreeObj* temp = offer_routine_info_;
  offer_routine_info_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// ProtoFriendInfo

// optional int64 role_id = 1;
inline bool ProtoFriendInfo::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoFriendInfo::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoFriendInfo::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoFriendInfo::clear_role_id() {
  role_id_ = GOOGLE_LONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::int64 ProtoFriendInfo::role_id() const {
  return role_id_;
}
inline void ProtoFriendInfo::set_role_id(::google::protobuf::int64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional int64 icon_id = 2;
inline bool ProtoFriendInfo::has_icon_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoFriendInfo::set_has_icon_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoFriendInfo::clear_has_icon_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoFriendInfo::clear_icon_id() {
  icon_id_ = GOOGLE_LONGLONG(0);
  clear_has_icon_id();
}
inline ::google::protobuf::int64 ProtoFriendInfo::icon_id() const {
  return icon_id_;
}
inline void ProtoFriendInfo::set_icon_id(::google::protobuf::int64 value) {
  set_has_icon_id();
  icon_id_ = value;
}

// optional int64 league_id = 3;
inline bool ProtoFriendInfo::has_league_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoFriendInfo::set_has_league_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoFriendInfo::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoFriendInfo::clear_league_id() {
  league_id_ = GOOGLE_LONGLONG(0);
  clear_has_league_id();
}
inline ::google::protobuf::int64 ProtoFriendInfo::league_id() const {
  return league_id_;
}
inline void ProtoFriendInfo::set_league_id(::google::protobuf::int64 value) {
  set_has_league_id();
  league_id_ = value;
}

// optional string league_name = 4;
inline bool ProtoFriendInfo::has_league_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoFriendInfo::set_has_league_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoFriendInfo::clear_has_league_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoFriendInfo::clear_league_name() {
  if (league_name_ != &::google::protobuf::internal::kEmptyString) {
    league_name_->clear();
  }
  clear_has_league_name();
}
inline const ::std::string& ProtoFriendInfo::league_name() const {
  return *league_name_;
}
inline void ProtoFriendInfo::set_league_name(const ::std::string& value) {
  set_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    league_name_ = new ::std::string;
  }
  league_name_->assign(value);
}
inline void ProtoFriendInfo::set_league_name(const char* value) {
  set_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    league_name_ = new ::std::string;
  }
  league_name_->assign(value);
}
inline void ProtoFriendInfo::set_league_name(const char* value, size_t size) {
  set_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    league_name_ = new ::std::string;
  }
  league_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoFriendInfo::mutable_league_name() {
  set_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    league_name_ = new ::std::string;
  }
  return league_name_;
}
inline ::std::string* ProtoFriendInfo::release_league_name() {
  clear_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = league_name_;
    league_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 friend_type = 5;
inline bool ProtoFriendInfo::has_friend_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoFriendInfo::set_has_friend_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoFriendInfo::clear_has_friend_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoFriendInfo::clear_friend_type() {
  friend_type_ = 0;
  clear_has_friend_type();
}
inline ::google::protobuf::int32 ProtoFriendInfo::friend_type() const {
  return friend_type_;
}
inline void ProtoFriendInfo::set_friend_type(::google::protobuf::int32 value) {
  set_has_friend_type();
  friend_type_ = value;
}

// optional int32 vip_status = 6;
inline bool ProtoFriendInfo::has_vip_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoFriendInfo::set_has_vip_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoFriendInfo::clear_has_vip_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoFriendInfo::clear_vip_status() {
  vip_status_ = 0;
  clear_has_vip_status();
}
inline ::google::protobuf::int32 ProtoFriendInfo::vip_status() const {
  return vip_status_;
}
inline void ProtoFriendInfo::set_vip_status(::google::protobuf::int32 value) {
  set_has_vip_status();
  vip_status_ = value;
}

// optional int32 is_online = 7;
inline bool ProtoFriendInfo::has_is_online() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoFriendInfo::set_has_is_online() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoFriendInfo::clear_has_is_online() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoFriendInfo::clear_is_online() {
  is_online_ = 0;
  clear_has_is_online();
}
inline ::google::protobuf::int32 ProtoFriendInfo::is_online() const {
  return is_online_;
}
inline void ProtoFriendInfo::set_is_online(::google::protobuf::int32 value) {
  set_has_is_online();
  is_online_ = value;
}

// optional int32 sex = 8;
inline bool ProtoFriendInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoFriendInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoFriendInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoFriendInfo::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 ProtoFriendInfo::sex() const {
  return sex_;
}
inline void ProtoFriendInfo::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// optional int32 career = 9;
inline bool ProtoFriendInfo::has_career() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProtoFriendInfo::set_has_career() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProtoFriendInfo::clear_has_career() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProtoFriendInfo::clear_career() {
  career_ = 0;
  clear_has_career();
}
inline ::google::protobuf::int32 ProtoFriendInfo::career() const {
  return career_;
}
inline void ProtoFriendInfo::set_career(::google::protobuf::int32 value) {
  set_has_career();
  career_ = value;
}

// optional int32 level = 10;
inline bool ProtoFriendInfo::has_level() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProtoFriendInfo::set_has_level() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ProtoFriendInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ProtoFriendInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ProtoFriendInfo::level() const {
  return level_;
}
inline void ProtoFriendInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 team_status = 11;
inline bool ProtoFriendInfo::has_team_status() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ProtoFriendInfo::set_has_team_status() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ProtoFriendInfo::clear_has_team_status() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ProtoFriendInfo::clear_team_status() {
  team_status_ = 0;
  clear_has_team_status();
}
inline ::google::protobuf::int32 ProtoFriendInfo::team_status() const {
  return team_status_;
}
inline void ProtoFriendInfo::set_team_status(::google::protobuf::int32 value) {
  set_has_team_status();
  team_status_ = value;
}

// optional string name = 12;
inline bool ProtoFriendInfo::has_name() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ProtoFriendInfo::set_has_name() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ProtoFriendInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ProtoFriendInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ProtoFriendInfo::name() const {
  return *name_;
}
inline void ProtoFriendInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ProtoFriendInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ProtoFriendInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoFriendInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ProtoFriendInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 intimacy = 13;
inline bool ProtoFriendInfo::has_intimacy() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ProtoFriendInfo::set_has_intimacy() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ProtoFriendInfo::clear_has_intimacy() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ProtoFriendInfo::clear_intimacy() {
  intimacy_ = 0;
  clear_has_intimacy();
}
inline ::google::protobuf::int32 ProtoFriendInfo::intimacy() const {
  return intimacy_;
}
inline void ProtoFriendInfo::set_intimacy(::google::protobuf::int32 value) {
  set_has_intimacy();
  intimacy_ = value;
}

// optional int32 force = 14;
inline bool ProtoFriendInfo::has_force() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ProtoFriendInfo::set_has_force() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ProtoFriendInfo::clear_has_force() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ProtoFriendInfo::clear_force() {
  force_ = 0;
  clear_has_force();
}
inline ::google::protobuf::int32 ProtoFriendInfo::force() const {
  return force_;
}
inline void ProtoFriendInfo::set_force(::google::protobuf::int32 value) {
  set_has_force();
  force_ = value;
}

// optional int32 scene_id = 15;
inline bool ProtoFriendInfo::has_scene_id() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ProtoFriendInfo::set_has_scene_id() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ProtoFriendInfo::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ProtoFriendInfo::clear_scene_id() {
  scene_id_ = 0;
  clear_has_scene_id();
}
inline ::google::protobuf::int32 ProtoFriendInfo::scene_id() const {
  return scene_id_;
}
inline void ProtoFriendInfo::set_scene_id(::google::protobuf::int32 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// optional int32 distance = 16;
inline bool ProtoFriendInfo::has_distance() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ProtoFriendInfo::set_has_distance() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ProtoFriendInfo::clear_has_distance() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ProtoFriendInfo::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
inline ::google::protobuf::int32 ProtoFriendInfo::distance() const {
  return distance_;
}
inline void ProtoFriendInfo::set_distance(::google::protobuf::int32 value) {
  set_has_distance();
  distance_ = value;
}

// optional int32 pixel_x = 17;
inline bool ProtoFriendInfo::has_pixel_x() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ProtoFriendInfo::set_has_pixel_x() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ProtoFriendInfo::clear_has_pixel_x() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ProtoFriendInfo::clear_pixel_x() {
  pixel_x_ = 0;
  clear_has_pixel_x();
}
inline ::google::protobuf::int32 ProtoFriendInfo::pixel_x() const {
  return pixel_x_;
}
inline void ProtoFriendInfo::set_pixel_x(::google::protobuf::int32 value) {
  set_has_pixel_x();
  pixel_x_ = value;
}

// optional int32 pixel_y = 18;
inline bool ProtoFriendInfo::has_pixel_y() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ProtoFriendInfo::set_has_pixel_y() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ProtoFriendInfo::clear_has_pixel_y() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ProtoFriendInfo::clear_pixel_y() {
  pixel_y_ = 0;
  clear_has_pixel_y();
}
inline ::google::protobuf::int32 ProtoFriendInfo::pixel_y() const {
  return pixel_y_;
}
inline void ProtoFriendInfo::set_pixel_y(::google::protobuf::int32 value) {
  set_has_pixel_y();
  pixel_y_ = value;
}

// optional int32 name_color = 19;
inline bool ProtoFriendInfo::has_name_color() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ProtoFriendInfo::set_has_name_color() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ProtoFriendInfo::clear_has_name_color() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ProtoFriendInfo::clear_name_color() {
  name_color_ = 0;
  clear_has_name_color();
}
inline ::google::protobuf::int32 ProtoFriendInfo::name_color() const {
  return name_color_;
}
inline void ProtoFriendInfo::set_name_color(::google::protobuf::int32 value) {
  set_has_name_color();
  name_color_ = value;
}

// optional int32 is_give_strength = 20;
inline bool ProtoFriendInfo::has_is_give_strength() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ProtoFriendInfo::set_has_is_give_strength() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ProtoFriendInfo::clear_has_is_give_strength() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ProtoFriendInfo::clear_is_give_strength() {
  is_give_strength_ = 0;
  clear_has_is_give_strength();
}
inline ::google::protobuf::int32 ProtoFriendInfo::is_give_strength() const {
  return is_give_strength_;
}
inline void ProtoFriendInfo::set_is_give_strength(::google::protobuf::int32 value) {
  set_has_is_give_strength();
  is_give_strength_ = value;
}

// -------------------------------------------------------------------

// ProtoSkillTarget

// optional int64 target_id = 1;
inline bool ProtoSkillTarget::has_target_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoSkillTarget::set_has_target_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoSkillTarget::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoSkillTarget::clear_target_id() {
  target_id_ = GOOGLE_LONGLONG(0);
  clear_has_target_id();
}
inline ::google::protobuf::int64 ProtoSkillTarget::target_id() const {
  return target_id_;
}
inline void ProtoSkillTarget::set_target_id(::google::protobuf::int64 value) {
  set_has_target_id();
  target_id_ = value;
}

// optional int32 is_death = 2;
inline bool ProtoSkillTarget::has_is_death() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoSkillTarget::set_has_is_death() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoSkillTarget::clear_has_is_death() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoSkillTarget::clear_is_death() {
  is_death_ = 0;
  clear_has_is_death();
}
inline ::google::protobuf::int32 ProtoSkillTarget::is_death() const {
  return is_death_;
}
inline void ProtoSkillTarget::set_is_death(::google::protobuf::int32 value) {
  set_has_is_death();
  is_death_ = value;
}

// -------------------------------------------------------------------

// ProtoFightInfo

// optional int32 type = 1;
inline bool ProtoFightInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoFightInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoFightInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoFightInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ProtoFightInfo::type() const {
  return type_;
}
inline void ProtoFightInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 value = 2;
inline bool ProtoFightInfo::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoFightInfo::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoFightInfo::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoFightInfo::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 ProtoFightInfo::value() const {
  return value_;
}
inline void ProtoFightInfo::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// optional int64 attackor_id = 3;
inline bool ProtoFightInfo::has_attackor_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoFightInfo::set_has_attackor_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoFightInfo::clear_has_attackor_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoFightInfo::clear_attackor_id() {
  attackor_id_ = GOOGLE_LONGLONG(0);
  clear_has_attackor_id();
}
inline ::google::protobuf::int64 ProtoFightInfo::attackor_id() const {
  return attackor_id_;
}
inline void ProtoFightInfo::set_attackor_id(::google::protobuf::int64 value) {
  set_has_attackor_id();
  attackor_id_ = value;
}

// optional int32 skill_id = 4;
inline bool ProtoFightInfo::has_skill_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoFightInfo::set_has_skill_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoFightInfo::clear_has_skill_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoFightInfo::clear_skill_id() {
  skill_id_ = 0;
  clear_has_skill_id();
}
inline ::google::protobuf::int32 ProtoFightInfo::skill_id() const {
  return skill_id_;
}
inline void ProtoFightInfo::set_skill_id(::google::protobuf::int32 value) {
  set_has_skill_id();
  skill_id_ = value;
}

// optional int32 tips1 = 5;
inline bool ProtoFightInfo::has_tips1() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoFightInfo::set_has_tips1() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoFightInfo::clear_has_tips1() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoFightInfo::clear_tips1() {
  tips1_ = 0;
  clear_has_tips1();
}
inline ::google::protobuf::int32 ProtoFightInfo::tips1() const {
  return tips1_;
}
inline void ProtoFightInfo::set_tips1(::google::protobuf::int32 value) {
  set_has_tips1();
  tips1_ = value;
}

// optional int32 tips2 = 6;
inline bool ProtoFightInfo::has_tips2() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoFightInfo::set_has_tips2() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoFightInfo::clear_has_tips2() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoFightInfo::clear_tips2() {
  tips2_ = 0;
  clear_has_tips2();
}
inline ::google::protobuf::int32 ProtoFightInfo::tips2() const {
  return tips2_;
}
inline void ProtoFightInfo::set_tips2(::google::protobuf::int32 value) {
  set_has_tips2();
  tips2_ = value;
}

// optional int32 tips3 = 7;
inline bool ProtoFightInfo::has_tips3() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoFightInfo::set_has_tips3() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoFightInfo::clear_has_tips3() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoFightInfo::clear_tips3() {
  tips3_ = 0;
  clear_has_tips3();
}
inline ::google::protobuf::int32 ProtoFightInfo::tips3() const {
  return tips3_;
}
inline void ProtoFightInfo::set_tips3(::google::protobuf::int32 value) {
  set_has_tips3();
  tips3_ = value;
}

// optional int32 tips4 = 8;
inline bool ProtoFightInfo::has_tips4() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoFightInfo::set_has_tips4() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoFightInfo::clear_has_tips4() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoFightInfo::clear_tips4() {
  tips4_ = 0;
  clear_has_tips4();
}
inline ::google::protobuf::int32 ProtoFightInfo::tips4() const {
  return tips4_;
}
inline void ProtoFightInfo::set_tips4(::google::protobuf::int32 value) {
  set_has_tips4();
  tips4_ = value;
}

// optional int64 experience = 9;
inline bool ProtoFightInfo::has_experience() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProtoFightInfo::set_has_experience() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProtoFightInfo::clear_has_experience() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProtoFightInfo::clear_experience() {
  experience_ = GOOGLE_LONGLONG(0);
  clear_has_experience();
}
inline ::google::protobuf::int64 ProtoFightInfo::experience() const {
  return experience_;
}
inline void ProtoFightInfo::set_experience(::google::protobuf::int64 value) {
  set_has_experience();
  experience_ = value;
}

// -------------------------------------------------------------------

// ProtoStatus

// optional int32 status = 1;
inline bool ProtoStatus::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoStatus::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoStatus::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 ProtoStatus::status() const {
  return status_;
}
inline void ProtoStatus::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional int32 view_status = 2;
inline bool ProtoStatus::has_view_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoStatus::set_has_view_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoStatus::clear_has_view_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoStatus::clear_view_status() {
  view_status_ = 0;
  clear_has_view_status();
}
inline ::google::protobuf::int32 ProtoStatus::view_status() const {
  return view_status_;
}
inline void ProtoStatus::set_view_status(::google::protobuf::int32 value) {
  set_has_view_status();
  view_status_ = value;
}

// optional int32 value1 = 3;
inline bool ProtoStatus::has_value1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoStatus::set_has_value1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoStatus::clear_has_value1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoStatus::clear_value1() {
  value1_ = 0;
  clear_has_value1();
}
inline ::google::protobuf::int32 ProtoStatus::value1() const {
  return value1_;
}
inline void ProtoStatus::set_value1(::google::protobuf::int32 value) {
  set_has_value1();
  value1_ = value;
}

// optional int32 value2 = 4;
inline bool ProtoStatus::has_value2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoStatus::set_has_value2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoStatus::clear_has_value2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoStatus::clear_value2() {
  value2_ = 0;
  clear_has_value2();
}
inline ::google::protobuf::int32 ProtoStatus::value2() const {
  return value2_;
}
inline void ProtoStatus::set_value2(::google::protobuf::int32 value) {
  set_has_value2();
  value2_ = value;
}

// optional int32 value3 = 5;
inline bool ProtoStatus::has_value3() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoStatus::set_has_value3() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoStatus::clear_has_value3() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoStatus::clear_value3() {
  value3_ = 0;
  clear_has_value3();
}
inline ::google::protobuf::int32 ProtoStatus::value3() const {
  return value3_;
}
inline void ProtoStatus::set_value3(::google::protobuf::int32 value) {
  set_has_value3();
  value3_ = value;
}

// optional int32 last_tick = 6;
inline bool ProtoStatus::has_last_tick() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoStatus::set_has_last_tick() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoStatus::clear_has_last_tick() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoStatus::clear_last_tick() {
  last_tick_ = 0;
  clear_has_last_tick();
}
inline ::google::protobuf::int32 ProtoStatus::last_tick() const {
  return last_tick_;
}
inline void ProtoStatus::set_last_tick(::google::protobuf::int32 value) {
  set_has_last_tick();
  last_tick_ = value;
}

// optional int32 cool_tick = 7;
inline bool ProtoStatus::has_cool_tick() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoStatus::set_has_cool_tick() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoStatus::clear_has_cool_tick() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoStatus::clear_cool_tick() {
  cool_tick_ = 0;
  clear_has_cool_tick();
}
inline ::google::protobuf::int32 ProtoStatus::cool_tick() const {
  return cool_tick_;
}
inline void ProtoStatus::set_cool_tick(::google::protobuf::int32 value) {
  set_has_cool_tick();
  cool_tick_ = value;
}

// optional int64 attackor = 8;
inline bool ProtoStatus::has_attackor() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoStatus::set_has_attackor() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoStatus::clear_has_attackor() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoStatus::clear_attackor() {
  attackor_ = GOOGLE_LONGLONG(0);
  clear_has_attackor();
}
inline ::google::protobuf::int64 ProtoStatus::attackor() const {
  return attackor_;
}
inline void ProtoStatus::set_attackor(::google::protobuf::int64 value) {
  set_has_attackor();
  attackor_ = value;
}

// repeated int32 value6 = 9;
inline int ProtoStatus::value6_size() const {
  return value6_.size();
}
inline void ProtoStatus::clear_value6() {
  value6_.Clear();
}
inline ::google::protobuf::int32 ProtoStatus::value6(int index) const {
  return value6_.Get(index);
}
inline void ProtoStatus::set_value6(int index, ::google::protobuf::int32 value) {
  value6_.Set(index, value);
}
inline void ProtoStatus::add_value6(::google::protobuf::int32 value) {
  value6_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProtoStatus::value6() const {
  return value6_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProtoStatus::mutable_value6() {
  return &value6_;
}

// -------------------------------------------------------------------

// ProtoMarketItem

// optional int32 market_index = 1;
inline bool ProtoMarketItem::has_market_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoMarketItem::set_has_market_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoMarketItem::clear_has_market_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoMarketItem::clear_market_index() {
  market_index_ = 0;
  clear_has_market_index();
}
inline ::google::protobuf::int32 ProtoMarketItem::market_index() const {
  return market_index_;
}
inline void ProtoMarketItem::set_market_index(::google::protobuf::int32 value) {
  set_has_market_index();
  market_index_ = value;
}

// optional int32 item_id = 2;
inline bool ProtoMarketItem::has_item_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoMarketItem::set_has_item_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoMarketItem::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoMarketItem::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
}
inline ::google::protobuf::int32 ProtoMarketItem::item_id() const {
  return item_id_;
}
inline void ProtoMarketItem::set_item_id(::google::protobuf::int32 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional int32 item_amount = 3;
inline bool ProtoMarketItem::has_item_amount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoMarketItem::set_has_item_amount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoMarketItem::clear_has_item_amount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoMarketItem::clear_item_amount() {
  item_amount_ = 0;
  clear_has_item_amount();
}
inline ::google::protobuf::int32 ProtoMarketItem::item_amount() const {
  return item_amount_;
}
inline void ProtoMarketItem::set_item_amount(::google::protobuf::int32 value) {
  set_has_item_amount();
  item_amount_ = value;
}

// optional int32 money_type = 4;
inline bool ProtoMarketItem::has_money_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoMarketItem::set_has_money_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoMarketItem::clear_has_money_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoMarketItem::clear_money_type() {
  money_type_ = 0;
  clear_has_money_type();
}
inline ::google::protobuf::int32 ProtoMarketItem::money_type() const {
  return money_type_;
}
inline void ProtoMarketItem::set_money_type(::google::protobuf::int32 value) {
  set_has_money_type();
  money_type_ = value;
}

// optional int32 price = 5;
inline bool ProtoMarketItem::has_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoMarketItem::set_has_price() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoMarketItem::clear_has_price() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoMarketItem::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline ::google::protobuf::int32 ProtoMarketItem::price() const {
  return price_;
}
inline void ProtoMarketItem::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
}

// optional int32 left_time = 6;
inline bool ProtoMarketItem::has_left_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoMarketItem::set_has_left_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoMarketItem::clear_has_left_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoMarketItem::clear_left_time() {
  left_time_ = 0;
  clear_has_left_time();
}
inline ::google::protobuf::int32 ProtoMarketItem::left_time() const {
  return left_time_;
}
inline void ProtoMarketItem::set_left_time(::google::protobuf::int32 value) {
  set_has_left_time();
  left_time_ = value;
}

// optional .ProtoEquip equip = 7;
inline bool ProtoMarketItem::has_equip() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoMarketItem::set_has_equip() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoMarketItem::clear_has_equip() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoMarketItem::clear_equip() {
  if (equip_ != NULL) equip_->::ProtoEquip::Clear();
  clear_has_equip();
}
inline const ::ProtoEquip& ProtoMarketItem::equip() const {
  return equip_ != NULL ? *equip_ : *default_instance_->equip_;
}
inline ::ProtoEquip* ProtoMarketItem::mutable_equip() {
  set_has_equip();
  if (equip_ == NULL) equip_ = new ::ProtoEquip;
  return equip_;
}
inline ::ProtoEquip* ProtoMarketItem::release_equip() {
  clear_has_equip();
  ::ProtoEquip* temp = equip_;
  equip_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// ProtoSellOut

// optional int32 index = 1;
inline bool ProtoSellOut::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoSellOut::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoSellOut::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoSellOut::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 ProtoSellOut::index() const {
  return index_;
}
inline void ProtoSellOut::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 item_id = 2;
inline bool ProtoSellOut::has_item_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoSellOut::set_has_item_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoSellOut::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoSellOut::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
}
inline ::google::protobuf::int32 ProtoSellOut::item_id() const {
  return item_id_;
}
inline void ProtoSellOut::set_item_id(::google::protobuf::int32 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional int32 item_bind = 3;
inline bool ProtoSellOut::has_item_bind() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoSellOut::set_has_item_bind() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoSellOut::clear_has_item_bind() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoSellOut::clear_item_bind() {
  item_bind_ = 0;
  clear_has_item_bind();
}
inline ::google::protobuf::int32 ProtoSellOut::item_bind() const {
  return item_bind_;
}
inline void ProtoSellOut::set_item_bind(::google::protobuf::int32 value) {
  set_has_item_bind();
  item_bind_ = value;
}

// optional int32 item_amount = 4;
inline bool ProtoSellOut::has_item_amount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoSellOut::set_has_item_amount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoSellOut::clear_has_item_amount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoSellOut::clear_item_amount() {
  item_amount_ = 0;
  clear_has_item_amount();
}
inline ::google::protobuf::int32 ProtoSellOut::item_amount() const {
  return item_amount_;
}
inline void ProtoSellOut::set_item_amount(::google::protobuf::int32 value) {
  set_has_item_amount();
  item_amount_ = value;
}

// -------------------------------------------------------------------

// ProtoMailInfo

// optional int64 mail_id = 1;
inline bool ProtoMailInfo::has_mail_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoMailInfo::set_has_mail_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoMailInfo::clear_has_mail_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoMailInfo::clear_mail_id() {
  mail_id_ = GOOGLE_LONGLONG(0);
  clear_has_mail_id();
}
inline ::google::protobuf::int64 ProtoMailInfo::mail_id() const {
  return mail_id_;
}
inline void ProtoMailInfo::set_mail_id(::google::protobuf::int64 value) {
  set_has_mail_id();
  mail_id_ = value;
}

// optional int32 mail_type = 2;
inline bool ProtoMailInfo::has_mail_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoMailInfo::set_has_mail_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoMailInfo::clear_has_mail_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoMailInfo::clear_mail_type() {
  mail_type_ = 0;
  clear_has_mail_type();
}
inline ::google::protobuf::int32 ProtoMailInfo::mail_type() const {
  return mail_type_;
}
inline void ProtoMailInfo::set_mail_type(::google::protobuf::int32 value) {
  set_has_mail_type();
  mail_type_ = value;
}

// optional int64 mail_time = 3;
inline bool ProtoMailInfo::has_mail_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoMailInfo::set_has_mail_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoMailInfo::clear_has_mail_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoMailInfo::clear_mail_time() {
  mail_time_ = GOOGLE_LONGLONG(0);
  clear_has_mail_time();
}
inline ::google::protobuf::int64 ProtoMailInfo::mail_time() const {
  return mail_time_;
}
inline void ProtoMailInfo::set_mail_time(::google::protobuf::int64 value) {
  set_has_mail_time();
  mail_time_ = value;
}

// optional int32 has_read = 4;
inline bool ProtoMailInfo::has_has_read() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoMailInfo::set_has_has_read() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoMailInfo::clear_has_has_read() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoMailInfo::clear_has_read() {
  has_read_ = 0;
  clear_has_has_read();
}
inline ::google::protobuf::int32 ProtoMailInfo::has_read() const {
  return has_read_;
}
inline void ProtoMailInfo::set_has_read(::google::protobuf::int32 value) {
  set_has_has_read();
  has_read_ = value;
}

// optional string role_name = 5;
inline bool ProtoMailInfo::has_role_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoMailInfo::set_has_role_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoMailInfo::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoMailInfo::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& ProtoMailInfo::role_name() const {
  return *role_name_;
}
inline void ProtoMailInfo::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoMailInfo::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoMailInfo::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoMailInfo::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* ProtoMailInfo::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string mail_title = 6;
inline bool ProtoMailInfo::has_mail_title() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoMailInfo::set_has_mail_title() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoMailInfo::clear_has_mail_title() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoMailInfo::clear_mail_title() {
  if (mail_title_ != &::google::protobuf::internal::kEmptyString) {
    mail_title_->clear();
  }
  clear_has_mail_title();
}
inline const ::std::string& ProtoMailInfo::mail_title() const {
  return *mail_title_;
}
inline void ProtoMailInfo::set_mail_title(const ::std::string& value) {
  set_has_mail_title();
  if (mail_title_ == &::google::protobuf::internal::kEmptyString) {
    mail_title_ = new ::std::string;
  }
  mail_title_->assign(value);
}
inline void ProtoMailInfo::set_mail_title(const char* value) {
  set_has_mail_title();
  if (mail_title_ == &::google::protobuf::internal::kEmptyString) {
    mail_title_ = new ::std::string;
  }
  mail_title_->assign(value);
}
inline void ProtoMailInfo::set_mail_title(const char* value, size_t size) {
  set_has_mail_title();
  if (mail_title_ == &::google::protobuf::internal::kEmptyString) {
    mail_title_ = new ::std::string;
  }
  mail_title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoMailInfo::mutable_mail_title() {
  set_has_mail_title();
  if (mail_title_ == &::google::protobuf::internal::kEmptyString) {
    mail_title_ = new ::std::string;
  }
  return mail_title_;
}
inline ::std::string* ProtoMailInfo::release_mail_title() {
  clear_has_mail_title();
  if (mail_title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mail_title_;
    mail_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 has_attach = 7;
inline bool ProtoMailInfo::has_has_attach() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoMailInfo::set_has_has_attach() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoMailInfo::clear_has_has_attach() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoMailInfo::clear_has_attach() {
  has_attach_ = 0;
  clear_has_has_attach();
}
inline ::google::protobuf::int32 ProtoMailInfo::has_attach() const {
  return has_attach_;
}
inline void ProtoMailInfo::set_has_attach(::google::protobuf::int32 value) {
  set_has_has_attach();
  has_attach_ = value;
}

// optional int32 left_minute = 8;
inline bool ProtoMailInfo::has_left_minute() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoMailInfo::set_has_left_minute() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoMailInfo::clear_has_left_minute() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoMailInfo::clear_left_minute() {
  left_minute_ = 0;
  clear_has_left_minute();
}
inline ::google::protobuf::int32 ProtoMailInfo::left_minute() const {
  return left_minute_;
}
inline void ProtoMailInfo::set_left_minute(::google::protobuf::int32 value) {
  set_has_left_minute();
  left_minute_ = value;
}

// optional int64 mail_read_tick = 9;
inline bool ProtoMailInfo::has_mail_read_tick() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProtoMailInfo::set_has_mail_read_tick() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProtoMailInfo::clear_has_mail_read_tick() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProtoMailInfo::clear_mail_read_tick() {
  mail_read_tick_ = GOOGLE_LONGLONG(0);
  clear_has_mail_read_tick();
}
inline ::google::protobuf::int64 ProtoMailInfo::mail_read_tick() const {
  return mail_read_tick_;
}
inline void ProtoMailInfo::set_mail_read_tick(::google::protobuf::int64 value) {
  set_has_mail_read_tick();
  mail_read_tick_ = value;
}

// optional int64 sender_id = 10;
inline bool ProtoMailInfo::has_sender_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProtoMailInfo::set_has_sender_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ProtoMailInfo::clear_has_sender_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ProtoMailInfo::clear_sender_id() {
  sender_id_ = GOOGLE_LONGLONG(0);
  clear_has_sender_id();
}
inline ::google::protobuf::int64 ProtoMailInfo::sender_id() const {
  return sender_id_;
}
inline void ProtoMailInfo::set_sender_id(::google::protobuf::int64 value) {
  set_has_sender_id();
  sender_id_ = value;
}

// optional string sender_name = 11;
inline bool ProtoMailInfo::has_sender_name() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ProtoMailInfo::set_has_sender_name() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ProtoMailInfo::clear_has_sender_name() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ProtoMailInfo::clear_sender_name() {
  if (sender_name_ != &::google::protobuf::internal::kEmptyString) {
    sender_name_->clear();
  }
  clear_has_sender_name();
}
inline const ::std::string& ProtoMailInfo::sender_name() const {
  return *sender_name_;
}
inline void ProtoMailInfo::set_sender_name(const ::std::string& value) {
  set_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::kEmptyString) {
    sender_name_ = new ::std::string;
  }
  sender_name_->assign(value);
}
inline void ProtoMailInfo::set_sender_name(const char* value) {
  set_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::kEmptyString) {
    sender_name_ = new ::std::string;
  }
  sender_name_->assign(value);
}
inline void ProtoMailInfo::set_sender_name(const char* value, size_t size) {
  set_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::kEmptyString) {
    sender_name_ = new ::std::string;
  }
  sender_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoMailInfo::mutable_sender_name() {
  set_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::kEmptyString) {
    sender_name_ = new ::std::string;
  }
  return sender_name_;
}
inline ::std::string* ProtoMailInfo::release_sender_name() {
  clear_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sender_name_;
    sender_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 receiver_id = 12;
inline bool ProtoMailInfo::has_receiver_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ProtoMailInfo::set_has_receiver_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ProtoMailInfo::clear_has_receiver_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ProtoMailInfo::clear_receiver_id() {
  receiver_id_ = GOOGLE_LONGLONG(0);
  clear_has_receiver_id();
}
inline ::google::protobuf::int64 ProtoMailInfo::receiver_id() const {
  return receiver_id_;
}
inline void ProtoMailInfo::set_receiver_id(::google::protobuf::int64 value) {
  set_has_receiver_id();
  receiver_id_ = value;
}

// optional string receiver_name = 13;
inline bool ProtoMailInfo::has_receiver_name() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ProtoMailInfo::set_has_receiver_name() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ProtoMailInfo::clear_has_receiver_name() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ProtoMailInfo::clear_receiver_name() {
  if (receiver_name_ != &::google::protobuf::internal::kEmptyString) {
    receiver_name_->clear();
  }
  clear_has_receiver_name();
}
inline const ::std::string& ProtoMailInfo::receiver_name() const {
  return *receiver_name_;
}
inline void ProtoMailInfo::set_receiver_name(const ::std::string& value) {
  set_has_receiver_name();
  if (receiver_name_ == &::google::protobuf::internal::kEmptyString) {
    receiver_name_ = new ::std::string;
  }
  receiver_name_->assign(value);
}
inline void ProtoMailInfo::set_receiver_name(const char* value) {
  set_has_receiver_name();
  if (receiver_name_ == &::google::protobuf::internal::kEmptyString) {
    receiver_name_ = new ::std::string;
  }
  receiver_name_->assign(value);
}
inline void ProtoMailInfo::set_receiver_name(const char* value, size_t size) {
  set_has_receiver_name();
  if (receiver_name_ == &::google::protobuf::internal::kEmptyString) {
    receiver_name_ = new ::std::string;
  }
  receiver_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoMailInfo::mutable_receiver_name() {
  set_has_receiver_name();
  if (receiver_name_ == &::google::protobuf::internal::kEmptyString) {
    receiver_name_ = new ::std::string;
  }
  return receiver_name_;
}
inline ::std::string* ProtoMailInfo::release_receiver_name() {
  clear_has_receiver_name();
  if (receiver_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = receiver_name_;
    receiver_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string mail_content = 14;
inline bool ProtoMailInfo::has_mail_content() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ProtoMailInfo::set_has_mail_content() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ProtoMailInfo::clear_has_mail_content() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ProtoMailInfo::clear_mail_content() {
  if (mail_content_ != &::google::protobuf::internal::kEmptyString) {
    mail_content_->clear();
  }
  clear_has_mail_content();
}
inline const ::std::string& ProtoMailInfo::mail_content() const {
  return *mail_content_;
}
inline void ProtoMailInfo::set_mail_content(const ::std::string& value) {
  set_has_mail_content();
  if (mail_content_ == &::google::protobuf::internal::kEmptyString) {
    mail_content_ = new ::std::string;
  }
  mail_content_->assign(value);
}
inline void ProtoMailInfo::set_mail_content(const char* value) {
  set_has_mail_content();
  if (mail_content_ == &::google::protobuf::internal::kEmptyString) {
    mail_content_ = new ::std::string;
  }
  mail_content_->assign(value);
}
inline void ProtoMailInfo::set_mail_content(const char* value, size_t size) {
  set_has_mail_content();
  if (mail_content_ == &::google::protobuf::internal::kEmptyString) {
    mail_content_ = new ::std::string;
  }
  mail_content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoMailInfo::mutable_mail_content() {
  set_has_mail_content();
  if (mail_content_ == &::google::protobuf::internal::kEmptyString) {
    mail_content_ = new ::std::string;
  }
  return mail_content_;
}
inline ::std::string* ProtoMailInfo::release_mail_content() {
  clear_has_mail_content();
  if (mail_content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mail_content_;
    mail_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .ProtoItem attach_list = 15;
inline int ProtoMailInfo::attach_list_size() const {
  return attach_list_.size();
}
inline void ProtoMailInfo::clear_attach_list() {
  attach_list_.Clear();
}
inline const ::ProtoItem& ProtoMailInfo::attach_list(int index) const {
  return attach_list_.Get(index);
}
inline ::ProtoItem* ProtoMailInfo::mutable_attach_list(int index) {
  return attach_list_.Mutable(index);
}
inline ::ProtoItem* ProtoMailInfo::add_attach_list() {
  return attach_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoItem >&
ProtoMailInfo::attach_list() const {
  return attach_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoItem >*
ProtoMailInfo::mutable_attach_list() {
  return &attach_list_;
}

// optional .ProtoMoney attach_money = 16;
inline bool ProtoMailInfo::has_attach_money() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ProtoMailInfo::set_has_attach_money() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ProtoMailInfo::clear_has_attach_money() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ProtoMailInfo::clear_attach_money() {
  if (attach_money_ != NULL) attach_money_->::ProtoMoney::Clear();
  clear_has_attach_money();
}
inline const ::ProtoMoney& ProtoMailInfo::attach_money() const {
  return attach_money_ != NULL ? *attach_money_ : *default_instance_->attach_money_;
}
inline ::ProtoMoney* ProtoMailInfo::mutable_attach_money() {
  set_has_attach_money();
  if (attach_money_ == NULL) attach_money_ = new ::ProtoMoney;
  return attach_money_;
}
inline ::ProtoMoney* ProtoMailInfo::release_attach_money() {
  clear_has_attach_money();
  ::ProtoMoney* temp = attach_money_;
  attach_money_ = NULL;
  return temp;
}

// optional int32 label = 17;
inline bool ProtoMailInfo::has_label() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ProtoMailInfo::set_has_label() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ProtoMailInfo::clear_has_label() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ProtoMailInfo::clear_label() {
  label_ = 0;
  clear_has_label();
}
inline ::google::protobuf::int32 ProtoMailInfo::label() const {
  return label_;
}
inline void ProtoMailInfo::set_label(::google::protobuf::int32 value) {
  set_has_label();
  label_ = value;
}

// optional int32 exploit = 18;
inline bool ProtoMailInfo::has_exploit() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ProtoMailInfo::set_has_exploit() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ProtoMailInfo::clear_has_exploit() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ProtoMailInfo::clear_exploit() {
  exploit_ = 0;
  clear_has_exploit();
}
inline ::google::protobuf::int32 ProtoMailInfo::exploit() const {
  return exploit_;
}
inline void ProtoMailInfo::set_exploit(::google::protobuf::int32 value) {
  set_has_exploit();
  exploit_ = value;
}

// optional int32 format = 19;
inline bool ProtoMailInfo::has_format() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ProtoMailInfo::set_has_format() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ProtoMailInfo::clear_has_format() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ProtoMailInfo::clear_format() {
  format_ = 0;
  clear_has_format();
}
inline ::google::protobuf::int32 ProtoMailInfo::format() const {
  return format_;
}
inline void ProtoMailInfo::set_format(::google::protobuf::int32 value) {
  set_has_format();
  format_ = value;
}

// optional int32 sender_vip = 20;
inline bool ProtoMailInfo::has_sender_vip() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ProtoMailInfo::set_has_sender_vip() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ProtoMailInfo::clear_has_sender_vip() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ProtoMailInfo::clear_sender_vip() {
  sender_vip_ = 0;
  clear_has_sender_vip();
}
inline ::google::protobuf::int32 ProtoMailInfo::sender_vip() const {
  return sender_vip_;
}
inline void ProtoMailInfo::set_sender_vip(::google::protobuf::int32 value) {
  set_has_sender_vip();
  sender_vip_ = value;
}

// optional int32 st_score = 21;
inline bool ProtoMailInfo::has_st_score() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ProtoMailInfo::set_has_st_score() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ProtoMailInfo::clear_has_st_score() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ProtoMailInfo::clear_st_score() {
  st_score_ = 0;
  clear_has_st_score();
}
inline ::google::protobuf::int32 ProtoMailInfo::st_score() const {
  return st_score_;
}
inline void ProtoMailInfo::set_st_score(::google::protobuf::int32 value) {
  set_has_st_score();
  st_score_ = value;
}

// -------------------------------------------------------------------

// MailAttach

// optional int32 mail_index = 1;
inline bool MailAttach::has_mail_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MailAttach::set_has_mail_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MailAttach::clear_has_mail_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MailAttach::clear_mail_index() {
  mail_index_ = 0;
  clear_has_mail_index();
}
inline ::google::protobuf::int32 MailAttach::mail_index() const {
  return mail_index_;
}
inline void MailAttach::set_mail_index(::google::protobuf::int32 value) {
  set_has_mail_index();
  mail_index_ = value;
}

// optional int32 pack_index = 2;
inline bool MailAttach::has_pack_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MailAttach::set_has_pack_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MailAttach::clear_has_pack_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MailAttach::clear_pack_index() {
  pack_index_ = 0;
  clear_has_pack_index();
}
inline ::google::protobuf::int32 MailAttach::pack_index() const {
  return pack_index_;
}
inline void MailAttach::set_pack_index(::google::protobuf::int32 value) {
  set_has_pack_index();
  pack_index_ = value;
}

// optional int32 pack_amount = 3;
inline bool MailAttach::has_pack_amount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MailAttach::set_has_pack_amount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MailAttach::clear_has_pack_amount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MailAttach::clear_pack_amount() {
  pack_amount_ = 0;
  clear_has_pack_amount();
}
inline ::google::protobuf::int32 MailAttach::pack_amount() const {
  return pack_amount_;
}
inline void MailAttach::set_pack_amount(::google::protobuf::int32 value) {
  set_has_pack_amount();
  pack_amount_ = value;
}

// -------------------------------------------------------------------

// ProtoShopItem

// optional int32 item_pos = 1;
inline bool ProtoShopItem::has_item_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoShopItem::set_has_item_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoShopItem::clear_has_item_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoShopItem::clear_item_pos() {
  item_pos_ = 0;
  clear_has_item_pos();
}
inline ::google::protobuf::int32 ProtoShopItem::item_pos() const {
  return item_pos_;
}
inline void ProtoShopItem::set_item_pos(::google::protobuf::int32 value) {
  set_has_item_pos();
  item_pos_ = value;
}

// optional int32 item_id = 2;
inline bool ProtoShopItem::has_item_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoShopItem::set_has_item_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoShopItem::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoShopItem::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
}
inline ::google::protobuf::int32 ProtoShopItem::item_id() const {
  return item_id_;
}
inline void ProtoShopItem::set_item_id(::google::protobuf::int32 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional int32 item_type = 3;
inline bool ProtoShopItem::has_item_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoShopItem::set_has_item_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoShopItem::clear_has_item_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoShopItem::clear_item_type() {
  item_type_ = 0;
  clear_has_item_type();
}
inline ::google::protobuf::int32 ProtoShopItem::item_type() const {
  return item_type_;
}
inline void ProtoShopItem::set_item_type(::google::protobuf::int32 value) {
  set_has_item_type();
  item_type_ = value;
}

// optional int32 bind_status = 4;
inline bool ProtoShopItem::has_bind_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoShopItem::set_has_bind_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoShopItem::clear_has_bind_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoShopItem::clear_bind_status() {
  bind_status_ = 0;
  clear_has_bind_status();
}
inline ::google::protobuf::int32 ProtoShopItem::bind_status() const {
  return bind_status_;
}
inline void ProtoShopItem::set_bind_status(::google::protobuf::int32 value) {
  set_has_bind_status();
  bind_status_ = value;
}

// optional int32 money_type = 5;
inline bool ProtoShopItem::has_money_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoShopItem::set_has_money_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoShopItem::clear_has_money_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoShopItem::clear_money_type() {
  money_type_ = 0;
  clear_has_money_type();
}
inline ::google::protobuf::int32 ProtoShopItem::money_type() const {
  return money_type_;
}
inline void ProtoShopItem::set_money_type(::google::protobuf::int32 value) {
  set_has_money_type();
  money_type_ = value;
}

// optional int32 cur_money = 6;
inline bool ProtoShopItem::has_cur_money() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoShopItem::set_has_cur_money() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoShopItem::clear_has_cur_money() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoShopItem::clear_cur_money() {
  cur_money_ = 0;
  clear_has_cur_money();
}
inline ::google::protobuf::int32 ProtoShopItem::cur_money() const {
  return cur_money_;
}
inline void ProtoShopItem::set_cur_money(::google::protobuf::int32 value) {
  set_has_cur_money();
  cur_money_ = value;
}

// repeated .ProtoPairObj need_item = 7;
inline int ProtoShopItem::need_item_size() const {
  return need_item_.size();
}
inline void ProtoShopItem::clear_need_item() {
  need_item_.Clear();
}
inline const ::ProtoPairObj& ProtoShopItem::need_item(int index) const {
  return need_item_.Get(index);
}
inline ::ProtoPairObj* ProtoShopItem::mutable_need_item(int index) {
  return need_item_.Mutable(index);
}
inline ::ProtoPairObj* ProtoShopItem::add_need_item() {
  return need_item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >&
ProtoShopItem::need_item() const {
  return need_item_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >*
ProtoShopItem::mutable_need_item() {
  return &need_item_;
}

// optional int32 ai_script_score = 8;
inline bool ProtoShopItem::has_ai_script_score() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoShopItem::set_has_ai_script_score() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoShopItem::clear_has_ai_script_score() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoShopItem::clear_ai_script_score() {
  ai_script_score_ = 0;
  clear_has_ai_script_score();
}
inline ::google::protobuf::int32 ProtoShopItem::ai_script_score() const {
  return ai_script_score_;
}
inline void ProtoShopItem::set_ai_script_score(::google::protobuf::int32 value) {
  set_has_ai_script_score();
  ai_script_score_ = value;
}

// optional int32 exploit = 9;
inline bool ProtoShopItem::has_exploit() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProtoShopItem::set_has_exploit() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProtoShopItem::clear_has_exploit() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProtoShopItem::clear_exploit() {
  exploit_ = 0;
  clear_has_exploit();
}
inline ::google::protobuf::int32 ProtoShopItem::exploit() const {
  return exploit_;
}
inline void ProtoShopItem::set_exploit(::google::protobuf::int32 value) {
  set_has_exploit();
  exploit_ = value;
}

// optional int32 buyed_amount = 10;
inline bool ProtoShopItem::has_buyed_amount() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProtoShopItem::set_has_buyed_amount() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ProtoShopItem::clear_has_buyed_amount() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ProtoShopItem::clear_buyed_amount() {
  buyed_amount_ = 0;
  clear_has_buyed_amount();
}
inline ::google::protobuf::int32 ProtoShopItem::buyed_amount() const {
  return buyed_amount_;
}
inline void ProtoShopItem::set_buyed_amount(::google::protobuf::int32 value) {
  set_has_buyed_amount();
  buyed_amount_ = value;
}

// optional int32 total_amount = 11;
inline bool ProtoShopItem::has_total_amount() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ProtoShopItem::set_has_total_amount() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ProtoShopItem::clear_has_total_amount() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ProtoShopItem::clear_total_amount() {
  total_amount_ = 0;
  clear_has_total_amount();
}
inline ::google::protobuf::int32 ProtoShopItem::total_amount() const {
  return total_amount_;
}
inline void ProtoShopItem::set_total_amount(::google::protobuf::int32 value) {
  set_has_total_amount();
  total_amount_ = value;
}

// optional int32 reputation = 12;
inline bool ProtoShopItem::has_reputation() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ProtoShopItem::set_has_reputation() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ProtoShopItem::clear_has_reputation() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ProtoShopItem::clear_reputation() {
  reputation_ = 0;
  clear_has_reputation();
}
inline ::google::protobuf::int32 ProtoShopItem::reputation() const {
  return reputation_;
}
inline void ProtoShopItem::set_reputation(::google::protobuf::int32 value) {
  set_has_reputation();
  reputation_ = value;
}

// -------------------------------------------------------------------

// ProtoPairObj

// optional int32 obj_id = 1;
inline bool ProtoPairObj::has_obj_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoPairObj::set_has_obj_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoPairObj::clear_has_obj_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoPairObj::clear_obj_id() {
  obj_id_ = 0;
  clear_has_obj_id();
}
inline ::google::protobuf::int32 ProtoPairObj::obj_id() const {
  return obj_id_;
}
inline void ProtoPairObj::set_obj_id(::google::protobuf::int32 value) {
  set_has_obj_id();
  obj_id_ = value;
}

// optional int32 obj_value = 2;
inline bool ProtoPairObj::has_obj_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoPairObj::set_has_obj_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoPairObj::clear_has_obj_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoPairObj::clear_obj_value() {
  obj_value_ = 0;
  clear_has_obj_value();
}
inline ::google::protobuf::int32 ProtoPairObj::obj_value() const {
  return obj_value_;
}
inline void ProtoPairObj::set_obj_value(::google::protobuf::int32 value) {
  set_has_obj_value();
  obj_value_ = value;
}

// -------------------------------------------------------------------

// ProtoBaseBeastInfo

// optional int64 beast_id = 1;
inline bool ProtoBaseBeastInfo::has_beast_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoBaseBeastInfo::set_has_beast_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoBaseBeastInfo::clear_has_beast_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoBaseBeastInfo::clear_beast_id() {
  beast_id_ = GOOGLE_LONGLONG(0);
  clear_has_beast_id();
}
inline ::google::protobuf::int64 ProtoBaseBeastInfo::beast_id() const {
  return beast_id_;
}
inline void ProtoBaseBeastInfo::set_beast_id(::google::protobuf::int64 value) {
  set_has_beast_id();
  beast_id_ = value;
}

// optional int32 beast_sort = 2;
inline bool ProtoBaseBeastInfo::has_beast_sort() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoBaseBeastInfo::set_has_beast_sort() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoBaseBeastInfo::clear_has_beast_sort() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoBaseBeastInfo::clear_beast_sort() {
  beast_sort_ = 0;
  clear_has_beast_sort();
}
inline ::google::protobuf::int32 ProtoBaseBeastInfo::beast_sort() const {
  return beast_sort_;
}
inline void ProtoBaseBeastInfo::set_beast_sort(::google::protobuf::int32 value) {
  set_has_beast_sort();
  beast_sort_ = value;
}

// optional int32 beast_growth = 3;
inline bool ProtoBaseBeastInfo::has_beast_growth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoBaseBeastInfo::set_has_beast_growth() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoBaseBeastInfo::clear_has_beast_growth() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoBaseBeastInfo::clear_beast_growth() {
  beast_growth_ = 0;
  clear_has_beast_growth();
}
inline ::google::protobuf::int32 ProtoBaseBeastInfo::beast_growth() const {
  return beast_growth_;
}
inline void ProtoBaseBeastInfo::set_beast_growth(::google::protobuf::int32 value) {
  set_has_beast_growth();
  beast_growth_ = value;
}

// optional string beast_name = 4;
inline bool ProtoBaseBeastInfo::has_beast_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoBaseBeastInfo::set_has_beast_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoBaseBeastInfo::clear_has_beast_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoBaseBeastInfo::clear_beast_name() {
  if (beast_name_ != &::google::protobuf::internal::kEmptyString) {
    beast_name_->clear();
  }
  clear_has_beast_name();
}
inline const ::std::string& ProtoBaseBeastInfo::beast_name() const {
  return *beast_name_;
}
inline void ProtoBaseBeastInfo::set_beast_name(const ::std::string& value) {
  set_has_beast_name();
  if (beast_name_ == &::google::protobuf::internal::kEmptyString) {
    beast_name_ = new ::std::string;
  }
  beast_name_->assign(value);
}
inline void ProtoBaseBeastInfo::set_beast_name(const char* value) {
  set_has_beast_name();
  if (beast_name_ == &::google::protobuf::internal::kEmptyString) {
    beast_name_ = new ::std::string;
  }
  beast_name_->assign(value);
}
inline void ProtoBaseBeastInfo::set_beast_name(const char* value, size_t size) {
  set_has_beast_name();
  if (beast_name_ == &::google::protobuf::internal::kEmptyString) {
    beast_name_ = new ::std::string;
  }
  beast_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoBaseBeastInfo::mutable_beast_name() {
  set_has_beast_name();
  if (beast_name_ == &::google::protobuf::internal::kEmptyString) {
    beast_name_ = new ::std::string;
  }
  return beast_name_;
}
inline ::std::string* ProtoBaseBeastInfo::release_beast_name() {
  clear_has_beast_name();
  if (beast_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = beast_name_;
    beast_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 action_state = 5;
inline bool ProtoBaseBeastInfo::has_action_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoBaseBeastInfo::set_has_action_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoBaseBeastInfo::clear_has_action_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoBaseBeastInfo::clear_action_state() {
  action_state_ = 0;
  clear_has_action_state();
}
inline ::google::protobuf::int32 ProtoBaseBeastInfo::action_state() const {
  return action_state_;
}
inline void ProtoBaseBeastInfo::set_action_state(::google::protobuf::int32 value) {
  set_has_action_state();
  action_state_ = value;
}

// optional int32 beast_force = 6;
inline bool ProtoBaseBeastInfo::has_beast_force() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoBaseBeastInfo::set_has_beast_force() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoBaseBeastInfo::clear_has_beast_force() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoBaseBeastInfo::clear_beast_force() {
  beast_force_ = 0;
  clear_has_beast_force();
}
inline ::google::protobuf::int32 ProtoBaseBeastInfo::beast_force() const {
  return beast_force_;
}
inline void ProtoBaseBeastInfo::set_beast_force(::google::protobuf::int32 value) {
  set_has_beast_force();
  beast_force_ = value;
}

// optional int32 ability = 7;
inline bool ProtoBaseBeastInfo::has_ability() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoBaseBeastInfo::set_has_ability() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoBaseBeastInfo::clear_has_ability() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoBaseBeastInfo::clear_ability() {
  ability_ = 0;
  clear_has_ability();
}
inline ::google::protobuf::int32 ProtoBaseBeastInfo::ability() const {
  return ability_;
}
inline void ProtoBaseBeastInfo::set_ability(::google::protobuf::int32 value) {
  set_has_ability();
  ability_ = value;
}

// optional int32 guard = 8;
inline bool ProtoBaseBeastInfo::has_guard() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoBaseBeastInfo::set_has_guard() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoBaseBeastInfo::clear_has_guard() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoBaseBeastInfo::clear_guard() {
  guard_ = 0;
  clear_has_guard();
}
inline ::google::protobuf::int32 ProtoBaseBeastInfo::guard() const {
  return guard_;
}
inline void ProtoBaseBeastInfo::set_guard(::google::protobuf::int32 value) {
  set_has_guard();
  guard_ = value;
}

// -------------------------------------------------------------------

// ProtoBeastSkill

// optional int32 skill_id = 1;
inline bool ProtoBeastSkill::has_skill_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoBeastSkill::set_has_skill_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoBeastSkill::clear_has_skill_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoBeastSkill::clear_skill_id() {
  skill_id_ = 0;
  clear_has_skill_id();
}
inline ::google::protobuf::int32 ProtoBeastSkill::skill_id() const {
  return skill_id_;
}
inline void ProtoBeastSkill::set_skill_id(::google::protobuf::int32 value) {
  set_has_skill_id();
  skill_id_ = value;
}

// optional int32 skill_level = 2;
inline bool ProtoBeastSkill::has_skill_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoBeastSkill::set_has_skill_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoBeastSkill::clear_has_skill_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoBeastSkill::clear_skill_level() {
  skill_level_ = 0;
  clear_has_skill_level();
}
inline ::google::protobuf::int32 ProtoBeastSkill::skill_level() const {
  return skill_level_;
}
inline void ProtoBeastSkill::set_skill_level(::google::protobuf::int32 value) {
  set_has_skill_level();
  skill_level_ = value;
}

// optional int32 cur_exp = 3;
inline bool ProtoBeastSkill::has_cur_exp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoBeastSkill::set_has_cur_exp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoBeastSkill::clear_has_cur_exp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoBeastSkill::clear_cur_exp() {
  cur_exp_ = 0;
  clear_has_cur_exp();
}
inline ::google::protobuf::int32 ProtoBeastSkill::cur_exp() const {
  return cur_exp_;
}
inline void ProtoBeastSkill::set_cur_exp(::google::protobuf::int32 value) {
  set_has_cur_exp();
  cur_exp_ = value;
}

// optional int32 cool_time = 4;
inline bool ProtoBeastSkill::has_cool_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoBeastSkill::set_has_cool_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoBeastSkill::clear_has_cool_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoBeastSkill::clear_cool_time() {
  cool_time_ = 0;
  clear_has_cool_time();
}
inline ::google::protobuf::int32 ProtoBeastSkill::cool_time() const {
  return cool_time_;
}
inline void ProtoBeastSkill::set_cool_time(::google::protobuf::int32 value) {
  set_has_cool_time();
  cool_time_ = value;
}

// optional int32 skill_index = 5;
inline bool ProtoBeastSkill::has_skill_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoBeastSkill::set_has_skill_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoBeastSkill::clear_has_skill_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoBeastSkill::clear_skill_index() {
  skill_index_ = 0;
  clear_has_skill_index();
}
inline ::google::protobuf::int32 ProtoBeastSkill::skill_index() const {
  return skill_index_;
}
inline void ProtoBeastSkill::set_skill_index(::google::protobuf::int32 value) {
  set_has_skill_index();
  skill_index_ = value;
}

// optional int32 lock_state = 6;
inline bool ProtoBeastSkill::has_lock_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoBeastSkill::set_has_lock_state() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoBeastSkill::clear_has_lock_state() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoBeastSkill::clear_lock_state() {
  lock_state_ = 0;
  clear_has_lock_state();
}
inline ::google::protobuf::int32 ProtoBeastSkill::lock_state() const {
  return lock_state_;
}
inline void ProtoBeastSkill::set_lock_state(::google::protobuf::int32 value) {
  set_has_lock_state();
  lock_state_ = value;
}

// optional int32 quality = 7;
inline bool ProtoBeastSkill::has_quality() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoBeastSkill::set_has_quality() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoBeastSkill::clear_has_quality() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoBeastSkill::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 ProtoBeastSkill::quality() const {
  return quality_;
}
inline void ProtoBeastSkill::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
}

// optional int32 transform = 8;
inline bool ProtoBeastSkill::has_transform() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoBeastSkill::set_has_transform() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoBeastSkill::clear_has_transform() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoBeastSkill::clear_transform() {
  transform_ = 0;
  clear_has_transform();
}
inline ::google::protobuf::int32 ProtoBeastSkill::transform() const {
  return transform_;
}
inline void ProtoBeastSkill::set_transform(::google::protobuf::int32 value) {
  set_has_transform();
  transform_ = value;
}

// optional int32 type = 9;
inline bool ProtoBeastSkill::has_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProtoBeastSkill::set_has_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProtoBeastSkill::clear_has_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProtoBeastSkill::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ProtoBeastSkill::type() const {
  return type_;
}
inline void ProtoBeastSkill::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// ProtoMagicalRecord

// optional int32 attr_type = 1;
inline bool ProtoMagicalRecord::has_attr_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoMagicalRecord::set_has_attr_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoMagicalRecord::clear_has_attr_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoMagicalRecord::clear_attr_type() {
  attr_type_ = 0;
  clear_has_attr_type();
}
inline ::google::protobuf::int32 ProtoMagicalRecord::attr_type() const {
  return attr_type_;
}
inline void ProtoMagicalRecord::set_attr_type(::google::protobuf::int32 value) {
  set_has_attr_type();
  attr_type_ = value;
}

// optional int32 is_locked = 2;
inline bool ProtoMagicalRecord::has_is_locked() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoMagicalRecord::set_has_is_locked() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoMagicalRecord::clear_has_is_locked() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoMagicalRecord::clear_is_locked() {
  is_locked_ = 0;
  clear_has_is_locked();
}
inline ::google::protobuf::int32 ProtoMagicalRecord::is_locked() const {
  return is_locked_;
}
inline void ProtoMagicalRecord::set_is_locked(::google::protobuf::int32 value) {
  set_has_is_locked();
  is_locked_ = value;
}

// optional int32 index = 3;
inline bool ProtoMagicalRecord::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoMagicalRecord::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoMagicalRecord::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoMagicalRecord::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 ProtoMagicalRecord::index() const {
  return index_;
}
inline void ProtoMagicalRecord::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 color = 4;
inline bool ProtoMagicalRecord::has_color() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoMagicalRecord::set_has_color() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoMagicalRecord::clear_has_color() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoMagicalRecord::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::google::protobuf::int32 ProtoMagicalRecord::color() const {
  return color_;
}
inline void ProtoMagicalRecord::set_color(::google::protobuf::int32 value) {
  set_has_color();
  color_ = value;
}

// optional int32 value = 5;
inline bool ProtoMagicalRecord::has_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoMagicalRecord::set_has_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoMagicalRecord::clear_has_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoMagicalRecord::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 ProtoMagicalRecord::value() const {
  return value_;
}
inline void ProtoMagicalRecord::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// optional int32 max_value = 6;
inline bool ProtoMagicalRecord::has_max_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoMagicalRecord::set_has_max_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoMagicalRecord::clear_has_max_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoMagicalRecord::clear_max_value() {
  max_value_ = 0;
  clear_has_max_value();
}
inline ::google::protobuf::int32 ProtoMagicalRecord::max_value() const {
  return max_value_;
}
inline void ProtoMagicalRecord::set_max_value(::google::protobuf::int32 value) {
  set_has_max_value();
  max_value_ = value;
}

// -------------------------------------------------------------------

// ProtoMagicalInfo

// repeated .ProtoMagicalRecord magical_list = 1;
inline int ProtoMagicalInfo::magical_list_size() const {
  return magical_list_.size();
}
inline void ProtoMagicalInfo::clear_magical_list() {
  magical_list_.Clear();
}
inline const ::ProtoMagicalRecord& ProtoMagicalInfo::magical_list(int index) const {
  return magical_list_.Get(index);
}
inline ::ProtoMagicalRecord* ProtoMagicalInfo::mutable_magical_list(int index) {
  return magical_list_.Mutable(index);
}
inline ::ProtoMagicalRecord* ProtoMagicalInfo::add_magical_list() {
  return magical_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoMagicalRecord >&
ProtoMagicalInfo::magical_list() const {
  return magical_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoMagicalRecord >*
ProtoMagicalInfo::mutable_magical_list() {
  return &magical_list_;
}

// -------------------------------------------------------------------

// ProtoSkillCombine

// optional int32 combine_flag = 1;
inline bool ProtoSkillCombine::has_combine_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoSkillCombine::set_has_combine_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoSkillCombine::clear_has_combine_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoSkillCombine::clear_combine_flag() {
  combine_flag_ = 0;
  clear_has_combine_flag();
}
inline ::google::protobuf::int32 ProtoSkillCombine::combine_flag() const {
  return combine_flag_;
}
inline void ProtoSkillCombine::set_combine_flag(::google::protobuf::int32 value) {
  set_has_combine_flag();
  combine_flag_ = value;
}

// optional int32 from_index = 2;
inline bool ProtoSkillCombine::has_from_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoSkillCombine::set_has_from_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoSkillCombine::clear_has_from_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoSkillCombine::clear_from_index() {
  from_index_ = 0;
  clear_has_from_index();
}
inline ::google::protobuf::int32 ProtoSkillCombine::from_index() const {
  return from_index_;
}
inline void ProtoSkillCombine::set_from_index(::google::protobuf::int32 value) {
  set_has_from_index();
  from_index_ = value;
}

// optional int32 to_index = 3;
inline bool ProtoSkillCombine::has_to_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoSkillCombine::set_has_to_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoSkillCombine::clear_has_to_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoSkillCombine::clear_to_index() {
  to_index_ = 0;
  clear_has_to_index();
}
inline ::google::protobuf::int32 ProtoSkillCombine::to_index() const {
  return to_index_;
}
inline void ProtoSkillCombine::set_to_index(::google::protobuf::int32 value) {
  set_has_to_index();
  to_index_ = value;
}

// optional int32 combine_skill = 4;
inline bool ProtoSkillCombine::has_combine_skill() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoSkillCombine::set_has_combine_skill() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoSkillCombine::clear_has_combine_skill() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoSkillCombine::clear_combine_skill() {
  combine_skill_ = 0;
  clear_has_combine_skill();
}
inline ::google::protobuf::int32 ProtoSkillCombine::combine_skill() const {
  return combine_skill_;
}
inline void ProtoSkillCombine::set_combine_skill(::google::protobuf::int32 value) {
  set_has_combine_skill();
  combine_skill_ = value;
}

// optional int32 combined_skill = 5;
inline bool ProtoSkillCombine::has_combined_skill() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoSkillCombine::set_has_combined_skill() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoSkillCombine::clear_has_combined_skill() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoSkillCombine::clear_combined_skill() {
  combined_skill_ = 0;
  clear_has_combined_skill();
}
inline ::google::protobuf::int32 ProtoSkillCombine::combined_skill() const {
  return combined_skill_;
}
inline void ProtoSkillCombine::set_combined_skill(::google::protobuf::int32 value) {
  set_has_combined_skill();
  combined_skill_ = value;
}

// optional int32 combined_exp = 6;
inline bool ProtoSkillCombine::has_combined_exp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoSkillCombine::set_has_combined_exp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoSkillCombine::clear_has_combined_exp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoSkillCombine::clear_combined_exp() {
  combined_exp_ = 0;
  clear_has_combined_exp();
}
inline ::google::protobuf::int32 ProtoSkillCombine::combined_exp() const {
  return combined_exp_;
}
inline void ProtoSkillCombine::set_combined_exp(::google::protobuf::int32 value) {
  set_has_combined_exp();
  combined_exp_ = value;
}

// -------------------------------------------------------------------

// ProtoFashion

// optional int32 use_type = 1;
inline bool ProtoFashion::has_use_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoFashion::set_has_use_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoFashion::clear_has_use_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoFashion::clear_use_type() {
  use_type_ = 0;
  clear_has_use_type();
}
inline ::google::protobuf::int32 ProtoFashion::use_type() const {
  return use_type_;
}
inline void ProtoFashion::set_use_type(::google::protobuf::int32 value) {
  set_has_use_type();
  use_type_ = value;
}

// optional int32 use_tick = 2;
inline bool ProtoFashion::has_use_tick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoFashion::set_has_use_tick() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoFashion::clear_has_use_tick() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoFashion::clear_use_tick() {
  use_tick_ = 0;
  clear_has_use_tick();
}
inline ::google::protobuf::int32 ProtoFashion::use_tick() const {
  return use_tick_;
}
inline void ProtoFashion::set_use_tick(::google::protobuf::int32 value) {
  set_has_use_tick();
  use_tick_ = value;
}

// optional int32 expire_tick = 3;
inline bool ProtoFashion::has_expire_tick() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoFashion::set_has_expire_tick() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoFashion::clear_has_expire_tick() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoFashion::clear_expire_tick() {
  expire_tick_ = 0;
  clear_has_expire_tick();
}
inline ::google::protobuf::int32 ProtoFashion::expire_tick() const {
  return expire_tick_;
}
inline void ProtoFashion::set_expire_tick(::google::protobuf::int32 value) {
  set_has_expire_tick();
  expire_tick_ = value;
}

// -------------------------------------------------------------------

// ProtoFashionInfo

// optional int32 use_type = 1;
inline bool ProtoFashionInfo::has_use_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoFashionInfo::set_has_use_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoFashionInfo::clear_has_use_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoFashionInfo::clear_use_type() {
  use_type_ = 0;
  clear_has_use_type();
}
inline ::google::protobuf::int32 ProtoFashionInfo::use_type() const {
  return use_type_;
}
inline void ProtoFashionInfo::set_use_type(::google::protobuf::int32 value) {
  set_has_use_type();
  use_type_ = value;
}

// optional int32 left_sec = 2;
inline bool ProtoFashionInfo::has_left_sec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoFashionInfo::set_has_left_sec() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoFashionInfo::clear_has_left_sec() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoFashionInfo::clear_left_sec() {
  left_sec_ = 0;
  clear_has_left_sec();
}
inline ::google::protobuf::int32 ProtoFashionInfo::left_sec() const {
  return left_sec_;
}
inline void ProtoFashionInfo::set_left_sec(::google::protobuf::int32 value) {
  set_has_left_sec();
  left_sec_ = value;
}

// optional int64 use_tick = 3;
inline bool ProtoFashionInfo::has_use_tick() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoFashionInfo::set_has_use_tick() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoFashionInfo::clear_has_use_tick() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoFashionInfo::clear_use_tick() {
  use_tick_ = GOOGLE_LONGLONG(0);
  clear_has_use_tick();
}
inline ::google::protobuf::int64 ProtoFashionInfo::use_tick() const {
  return use_tick_;
}
inline void ProtoFashionInfo::set_use_tick(::google::protobuf::int64 value) {
  set_has_use_tick();
  use_tick_ = value;
}

// optional int64 expire_tick = 4;
inline bool ProtoFashionInfo::has_expire_tick() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoFashionInfo::set_has_expire_tick() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoFashionInfo::clear_has_expire_tick() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoFashionInfo::clear_expire_tick() {
  expire_tick_ = GOOGLE_LONGLONG(0);
  clear_has_expire_tick();
}
inline ::google::protobuf::int64 ProtoFashionInfo::expire_tick() const {
  return expire_tick_;
}
inline void ProtoFashionInfo::set_expire_tick(::google::protobuf::int64 value) {
  set_has_expire_tick();
  expire_tick_ = value;
}

// repeated .ProtoPairObj notify_map = 5;
inline int ProtoFashionInfo::notify_map_size() const {
  return notify_map_.size();
}
inline void ProtoFashionInfo::clear_notify_map() {
  notify_map_.Clear();
}
inline const ::ProtoPairObj& ProtoFashionInfo::notify_map(int index) const {
  return notify_map_.Get(index);
}
inline ::ProtoPairObj* ProtoFashionInfo::mutable_notify_map(int index) {
  return notify_map_.Mutable(index);
}
inline ::ProtoPairObj* ProtoFashionInfo::add_notify_map() {
  return notify_map_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >&
ProtoFashionInfo::notify_map() const {
  return notify_map_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >*
ProtoFashionInfo::mutable_notify_map() {
  return &notify_map_;
}

// optional int32 is_in_use = 6;
inline bool ProtoFashionInfo::has_is_in_use() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoFashionInfo::set_has_is_in_use() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoFashionInfo::clear_has_is_in_use() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoFashionInfo::clear_is_in_use() {
  is_in_use_ = 0;
  clear_has_is_in_use();
}
inline ::google::protobuf::int32 ProtoFashionInfo::is_in_use() const {
  return is_in_use_;
}
inline void ProtoFashionInfo::set_is_in_use(::google::protobuf::int32 value) {
  set_has_is_in_use();
  is_in_use_ = value;
}

// optional int32 vip_type = 7;
inline bool ProtoFashionInfo::has_vip_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoFashionInfo::set_has_vip_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoFashionInfo::clear_has_vip_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoFashionInfo::clear_vip_type() {
  vip_type_ = 0;
  clear_has_vip_type();
}
inline ::google::protobuf::int32 ProtoFashionInfo::vip_type() const {
  return vip_type_;
}
inline void ProtoFashionInfo::set_vip_type(::google::protobuf::int32 value) {
  set_has_vip_type();
  vip_type_ = value;
}

// optional int32 fashion_id = 8;
inline bool ProtoFashionInfo::has_fashion_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoFashionInfo::set_has_fashion_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoFashionInfo::clear_has_fashion_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoFashionInfo::clear_fashion_id() {
  fashion_id_ = 0;
  clear_has_fashion_id();
}
inline ::google::protobuf::int32 ProtoFashionInfo::fashion_id() const {
  return fashion_id_;
}
inline void ProtoFashionInfo::set_fashion_id(::google::protobuf::int32 value) {
  set_has_fashion_id();
  fashion_id_ = value;
}

// optional int32 color_id = 9;
inline bool ProtoFashionInfo::has_color_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProtoFashionInfo::set_has_color_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProtoFashionInfo::clear_has_color_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProtoFashionInfo::clear_color_id() {
  color_id_ = 0;
  clear_has_color_id();
}
inline ::google::protobuf::int32 ProtoFashionInfo::color_id() const {
  return color_id_;
}
inline void ProtoFashionInfo::set_color_id(::google::protobuf::int32 value) {
  set_has_color_id();
  color_id_ = value;
}

// optional int32 active_type = 10;
inline bool ProtoFashionInfo::has_active_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProtoFashionInfo::set_has_active_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ProtoFashionInfo::clear_has_active_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ProtoFashionInfo::clear_active_type() {
  active_type_ = 0;
  clear_has_active_type();
}
inline ::google::protobuf::int32 ProtoFashionInfo::active_type() const {
  return active_type_;
}
inline void ProtoFashionInfo::set_active_type(::google::protobuf::int32 value) {
  set_has_active_type();
  active_type_ = value;
}

// optional int32 is_permanent = 11;
inline bool ProtoFashionInfo::has_is_permanent() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ProtoFashionInfo::set_has_is_permanent() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ProtoFashionInfo::clear_has_is_permanent() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ProtoFashionInfo::clear_is_permanent() {
  is_permanent_ = 0;
  clear_has_is_permanent();
}
inline ::google::protobuf::int32 ProtoFashionInfo::is_permanent() const {
  return is_permanent_;
}
inline void ProtoFashionInfo::set_is_permanent(::google::protobuf::int32 value) {
  set_has_is_permanent();
  is_permanent_ = value;
}

// optional int64 active_tick = 12;
inline bool ProtoFashionInfo::has_active_tick() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ProtoFashionInfo::set_has_active_tick() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ProtoFashionInfo::clear_has_active_tick() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ProtoFashionInfo::clear_active_tick() {
  active_tick_ = GOOGLE_LONGLONG(0);
  clear_has_active_tick();
}
inline ::google::protobuf::int64 ProtoFashionInfo::active_tick() const {
  return active_tick_;
}
inline void ProtoFashionInfo::set_active_tick(::google::protobuf::int64 value) {
  set_has_active_tick();
  active_tick_ = value;
}

// optional int64 end_tick = 13;
inline bool ProtoFashionInfo::has_end_tick() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ProtoFashionInfo::set_has_end_tick() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ProtoFashionInfo::clear_has_end_tick() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ProtoFashionInfo::clear_end_tick() {
  end_tick_ = GOOGLE_LONGLONG(0);
  clear_has_end_tick();
}
inline ::google::protobuf::int64 ProtoFashionInfo::end_tick() const {
  return end_tick_;
}
inline void ProtoFashionInfo::set_end_tick(::google::protobuf::int64 value) {
  set_has_end_tick();
  end_tick_ = value;
}

// repeated int32 color_set_ = 14;
inline int ProtoFashionInfo::color_set__size() const {
  return color_set__.size();
}
inline void ProtoFashionInfo::clear_color_set_() {
  color_set__.Clear();
}
inline ::google::protobuf::int32 ProtoFashionInfo::color_set_(int index) const {
  return color_set__.Get(index);
}
inline void ProtoFashionInfo::set_color_set_(int index, ::google::protobuf::int32 value) {
  color_set__.Set(index, value);
}
inline void ProtoFashionInfo::add_color_set_(::google::protobuf::int32 value) {
  color_set__.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProtoFashionInfo::color_set_() const {
  return color_set__;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProtoFashionInfo::mutable_color_set_() {
  return &color_set__;
}

// -------------------------------------------------------------------

// ProtoLeagueItem

// optional int32 rank_index = 1;
inline bool ProtoLeagueItem::has_rank_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoLeagueItem::set_has_rank_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoLeagueItem::clear_has_rank_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoLeagueItem::clear_rank_index() {
  rank_index_ = 0;
  clear_has_rank_index();
}
inline ::google::protobuf::int32 ProtoLeagueItem::rank_index() const {
  return rank_index_;
}
inline void ProtoLeagueItem::set_rank_index(::google::protobuf::int32 value) {
  set_has_rank_index();
  rank_index_ = value;
}

// optional int64 league_index = 2;
inline bool ProtoLeagueItem::has_league_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoLeagueItem::set_has_league_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoLeagueItem::clear_has_league_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoLeagueItem::clear_league_index() {
  league_index_ = GOOGLE_LONGLONG(0);
  clear_has_league_index();
}
inline ::google::protobuf::int64 ProtoLeagueItem::league_index() const {
  return league_index_;
}
inline void ProtoLeagueItem::set_league_index(::google::protobuf::int64 value) {
  set_has_league_index();
  league_index_ = value;
}

// optional string league_name = 3;
inline bool ProtoLeagueItem::has_league_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoLeagueItem::set_has_league_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoLeagueItem::clear_has_league_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoLeagueItem::clear_league_name() {
  if (league_name_ != &::google::protobuf::internal::kEmptyString) {
    league_name_->clear();
  }
  clear_has_league_name();
}
inline const ::std::string& ProtoLeagueItem::league_name() const {
  return *league_name_;
}
inline void ProtoLeagueItem::set_league_name(const ::std::string& value) {
  set_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    league_name_ = new ::std::string;
  }
  league_name_->assign(value);
}
inline void ProtoLeagueItem::set_league_name(const char* value) {
  set_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    league_name_ = new ::std::string;
  }
  league_name_->assign(value);
}
inline void ProtoLeagueItem::set_league_name(const char* value, size_t size) {
  set_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    league_name_ = new ::std::string;
  }
  league_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoLeagueItem::mutable_league_name() {
  set_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    league_name_ = new ::std::string;
  }
  return league_name_;
}
inline ::std::string* ProtoLeagueItem::release_league_name() {
  clear_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = league_name_;
    league_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 league_lvl = 4;
inline bool ProtoLeagueItem::has_league_lvl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoLeagueItem::set_has_league_lvl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoLeagueItem::clear_has_league_lvl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoLeagueItem::clear_league_lvl() {
  league_lvl_ = 0;
  clear_has_league_lvl();
}
inline ::google::protobuf::int32 ProtoLeagueItem::league_lvl() const {
  return league_lvl_;
}
inline void ProtoLeagueItem::set_league_lvl(::google::protobuf::int32 value) {
  set_has_league_lvl();
  league_lvl_ = value;
}

// optional int32 current_count = 5;
inline bool ProtoLeagueItem::has_current_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoLeagueItem::set_has_current_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoLeagueItem::clear_has_current_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoLeagueItem::clear_current_count() {
  current_count_ = 0;
  clear_has_current_count();
}
inline ::google::protobuf::int32 ProtoLeagueItem::current_count() const {
  return current_count_;
}
inline void ProtoLeagueItem::set_current_count(::google::protobuf::int32 value) {
  set_has_current_count();
  current_count_ = value;
}

// optional int32 league_force = 6;
inline bool ProtoLeagueItem::has_league_force() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoLeagueItem::set_has_league_force() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoLeagueItem::clear_has_league_force() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoLeagueItem::clear_league_force() {
  league_force_ = 0;
  clear_has_league_force();
}
inline ::google::protobuf::int32 ProtoLeagueItem::league_force() const {
  return league_force_;
}
inline void ProtoLeagueItem::set_league_force(::google::protobuf::int32 value) {
  set_has_league_force();
  league_force_ = value;
}

// optional string league_leader = 7;
inline bool ProtoLeagueItem::has_league_leader() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoLeagueItem::set_has_league_leader() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoLeagueItem::clear_has_league_leader() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoLeagueItem::clear_league_leader() {
  if (league_leader_ != &::google::protobuf::internal::kEmptyString) {
    league_leader_->clear();
  }
  clear_has_league_leader();
}
inline const ::std::string& ProtoLeagueItem::league_leader() const {
  return *league_leader_;
}
inline void ProtoLeagueItem::set_league_leader(const ::std::string& value) {
  set_has_league_leader();
  if (league_leader_ == &::google::protobuf::internal::kEmptyString) {
    league_leader_ = new ::std::string;
  }
  league_leader_->assign(value);
}
inline void ProtoLeagueItem::set_league_leader(const char* value) {
  set_has_league_leader();
  if (league_leader_ == &::google::protobuf::internal::kEmptyString) {
    league_leader_ = new ::std::string;
  }
  league_leader_->assign(value);
}
inline void ProtoLeagueItem::set_league_leader(const char* value, size_t size) {
  set_has_league_leader();
  if (league_leader_ == &::google::protobuf::internal::kEmptyString) {
    league_leader_ = new ::std::string;
  }
  league_leader_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoLeagueItem::mutable_league_leader() {
  set_has_league_leader();
  if (league_leader_ == &::google::protobuf::internal::kEmptyString) {
    league_leader_ = new ::std::string;
  }
  return league_leader_;
}
inline ::std::string* ProtoLeagueItem::release_league_leader() {
  clear_has_league_leader();
  if (league_leader_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = league_leader_;
    league_leader_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 apply_flag = 8;
inline bool ProtoLeagueItem::has_apply_flag() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoLeagueItem::set_has_apply_flag() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoLeagueItem::clear_has_apply_flag() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoLeagueItem::clear_apply_flag() {
  apply_flag_ = 0;
  clear_has_apply_flag();
}
inline ::google::protobuf::int32 ProtoLeagueItem::apply_flag() const {
  return apply_flag_;
}
inline void ProtoLeagueItem::set_apply_flag(::google::protobuf::int32 value) {
  set_has_apply_flag();
  apply_flag_ = value;
}

// optional int64 leader_id = 9;
inline bool ProtoLeagueItem::has_leader_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProtoLeagueItem::set_has_leader_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProtoLeagueItem::clear_has_leader_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProtoLeagueItem::clear_leader_id() {
  leader_id_ = GOOGLE_LONGLONG(0);
  clear_has_leader_id();
}
inline ::google::protobuf::int64 ProtoLeagueItem::leader_id() const {
  return leader_id_;
}
inline void ProtoLeagueItem::set_leader_id(::google::protobuf::int64 value) {
  set_has_leader_id();
  leader_id_ = value;
}

// optional int32 max_role = 10;
inline bool ProtoLeagueItem::has_max_role() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProtoLeagueItem::set_has_max_role() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ProtoLeagueItem::clear_has_max_role() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ProtoLeagueItem::clear_max_role() {
  max_role_ = 0;
  clear_has_max_role();
}
inline ::google::protobuf::int32 ProtoLeagueItem::max_role() const {
  return max_role_;
}
inline void ProtoLeagueItem::set_max_role(::google::protobuf::int32 value) {
  set_has_max_role();
  max_role_ = value;
}

// -------------------------------------------------------------------

// ProtoLeagueMember

// optional int64 role_index = 1;
inline bool ProtoLeagueMember::has_role_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoLeagueMember::set_has_role_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoLeagueMember::clear_has_role_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoLeagueMember::clear_role_index() {
  role_index_ = GOOGLE_LONGLONG(0);
  clear_has_role_index();
}
inline ::google::protobuf::int64 ProtoLeagueMember::role_index() const {
  return role_index_;
}
inline void ProtoLeagueMember::set_role_index(::google::protobuf::int64 value) {
  set_has_role_index();
  role_index_ = value;
}

// optional string role_name = 2;
inline bool ProtoLeagueMember::has_role_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoLeagueMember::set_has_role_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoLeagueMember::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoLeagueMember::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& ProtoLeagueMember::role_name() const {
  return *role_name_;
}
inline void ProtoLeagueMember::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoLeagueMember::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoLeagueMember::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoLeagueMember::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* ProtoLeagueMember::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 sex = 3;
inline bool ProtoLeagueMember::has_sex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoLeagueMember::set_has_sex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoLeagueMember::clear_has_sex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoLeagueMember::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 ProtoLeagueMember::sex() const {
  return sex_;
}
inline void ProtoLeagueMember::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// optional int32 vip = 4;
inline bool ProtoLeagueMember::has_vip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoLeagueMember::set_has_vip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoLeagueMember::clear_has_vip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoLeagueMember::clear_vip() {
  vip_ = 0;
  clear_has_vip();
}
inline ::google::protobuf::int32 ProtoLeagueMember::vip() const {
  return vip_;
}
inline void ProtoLeagueMember::set_vip(::google::protobuf::int32 value) {
  set_has_vip();
  vip_ = value;
}

// optional int32 league_pos = 5;
inline bool ProtoLeagueMember::has_league_pos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoLeagueMember::set_has_league_pos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoLeagueMember::clear_has_league_pos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoLeagueMember::clear_league_pos() {
  league_pos_ = 0;
  clear_has_league_pos();
}
inline ::google::protobuf::int32 ProtoLeagueMember::league_pos() const {
  return league_pos_;
}
inline void ProtoLeagueMember::set_league_pos(::google::protobuf::int32 value) {
  set_has_league_pos();
  league_pos_ = value;
}

// optional int32 role_lvl = 6;
inline bool ProtoLeagueMember::has_role_lvl() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoLeagueMember::set_has_role_lvl() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoLeagueMember::clear_has_role_lvl() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoLeagueMember::clear_role_lvl() {
  role_lvl_ = 0;
  clear_has_role_lvl();
}
inline ::google::protobuf::int32 ProtoLeagueMember::role_lvl() const {
  return role_lvl_;
}
inline void ProtoLeagueMember::set_role_lvl(::google::protobuf::int32 value) {
  set_has_role_lvl();
  role_lvl_ = value;
}

// optional int32 role_force = 7;
inline bool ProtoLeagueMember::has_role_force() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoLeagueMember::set_has_role_force() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoLeagueMember::clear_has_role_force() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoLeagueMember::clear_role_force() {
  role_force_ = 0;
  clear_has_role_force();
}
inline ::google::protobuf::int32 ProtoLeagueMember::role_force() const {
  return role_force_;
}
inline void ProtoLeagueMember::set_role_force(::google::protobuf::int32 value) {
  set_has_role_force();
  role_force_ = value;
}

// optional int32 cur_contri = 8;
inline bool ProtoLeagueMember::has_cur_contri() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoLeagueMember::set_has_cur_contri() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoLeagueMember::clear_has_cur_contri() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoLeagueMember::clear_cur_contri() {
  cur_contri_ = 0;
  clear_has_cur_contri();
}
inline ::google::protobuf::int32 ProtoLeagueMember::cur_contri() const {
  return cur_contri_;
}
inline void ProtoLeagueMember::set_cur_contri(::google::protobuf::int32 value) {
  set_has_cur_contri();
  cur_contri_ = value;
}

// optional int32 total_contri = 9;
inline bool ProtoLeagueMember::has_total_contri() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProtoLeagueMember::set_has_total_contri() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProtoLeagueMember::clear_has_total_contri() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProtoLeagueMember::clear_total_contri() {
  total_contri_ = 0;
  clear_has_total_contri();
}
inline ::google::protobuf::int32 ProtoLeagueMember::total_contri() const {
  return total_contri_;
}
inline void ProtoLeagueMember::set_total_contri(::google::protobuf::int32 value) {
  set_has_total_contri();
  total_contri_ = value;
}

// optional int32 left_time = 10;
inline bool ProtoLeagueMember::has_left_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProtoLeagueMember::set_has_left_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ProtoLeagueMember::clear_has_left_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ProtoLeagueMember::clear_left_time() {
  left_time_ = 0;
  clear_has_left_time();
}
inline ::google::protobuf::int32 ProtoLeagueMember::left_time() const {
  return left_time_;
}
inline void ProtoLeagueMember::set_left_time(::google::protobuf::int32 value) {
  set_has_left_time();
  left_time_ = value;
}

// -------------------------------------------------------------------

// ProtoLeagueApply

// optional int64 role_index = 1;
inline bool ProtoLeagueApply::has_role_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoLeagueApply::set_has_role_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoLeagueApply::clear_has_role_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoLeagueApply::clear_role_index() {
  role_index_ = GOOGLE_LONGLONG(0);
  clear_has_role_index();
}
inline ::google::protobuf::int64 ProtoLeagueApply::role_index() const {
  return role_index_;
}
inline void ProtoLeagueApply::set_role_index(::google::protobuf::int64 value) {
  set_has_role_index();
  role_index_ = value;
}

// optional int32 vip_type = 2;
inline bool ProtoLeagueApply::has_vip_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoLeagueApply::set_has_vip_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoLeagueApply::clear_has_vip_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoLeagueApply::clear_vip_type() {
  vip_type_ = 0;
  clear_has_vip_type();
}
inline ::google::protobuf::int32 ProtoLeagueApply::vip_type() const {
  return vip_type_;
}
inline void ProtoLeagueApply::set_vip_type(::google::protobuf::int32 value) {
  set_has_vip_type();
  vip_type_ = value;
}

// optional int32 role_sex = 3;
inline bool ProtoLeagueApply::has_role_sex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoLeagueApply::set_has_role_sex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoLeagueApply::clear_has_role_sex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoLeagueApply::clear_role_sex() {
  role_sex_ = 0;
  clear_has_role_sex();
}
inline ::google::protobuf::int32 ProtoLeagueApply::role_sex() const {
  return role_sex_;
}
inline void ProtoLeagueApply::set_role_sex(::google::protobuf::int32 value) {
  set_has_role_sex();
  role_sex_ = value;
}

// optional string role_name = 4;
inline bool ProtoLeagueApply::has_role_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoLeagueApply::set_has_role_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoLeagueApply::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoLeagueApply::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& ProtoLeagueApply::role_name() const {
  return *role_name_;
}
inline void ProtoLeagueApply::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoLeagueApply::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoLeagueApply::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoLeagueApply::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* ProtoLeagueApply::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 role_lvl = 5;
inline bool ProtoLeagueApply::has_role_lvl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoLeagueApply::set_has_role_lvl() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoLeagueApply::clear_has_role_lvl() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoLeagueApply::clear_role_lvl() {
  role_lvl_ = 0;
  clear_has_role_lvl();
}
inline ::google::protobuf::int32 ProtoLeagueApply::role_lvl() const {
  return role_lvl_;
}
inline void ProtoLeagueApply::set_role_lvl(::google::protobuf::int32 value) {
  set_has_role_lvl();
  role_lvl_ = value;
}

// optional int32 role_career = 6;
inline bool ProtoLeagueApply::has_role_career() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoLeagueApply::set_has_role_career() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoLeagueApply::clear_has_role_career() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoLeagueApply::clear_role_career() {
  role_career_ = 0;
  clear_has_role_career();
}
inline ::google::protobuf::int32 ProtoLeagueApply::role_career() const {
  return role_career_;
}
inline void ProtoLeagueApply::set_role_career(::google::protobuf::int32 value) {
  set_has_role_career();
  role_career_ = value;
}

// optional int32 role_force = 7;
inline bool ProtoLeagueApply::has_role_force() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoLeagueApply::set_has_role_force() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoLeagueApply::clear_has_role_force() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoLeagueApply::clear_role_force() {
  role_force_ = 0;
  clear_has_role_force();
}
inline ::google::protobuf::int32 ProtoLeagueApply::role_force() const {
  return role_force_;
}
inline void ProtoLeagueApply::set_role_force(::google::protobuf::int32 value) {
  set_has_role_force();
  role_force_ = value;
}

// optional int32 online_flag = 8;
inline bool ProtoLeagueApply::has_online_flag() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoLeagueApply::set_has_online_flag() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoLeagueApply::clear_has_online_flag() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoLeagueApply::clear_online_flag() {
  online_flag_ = 0;
  clear_has_online_flag();
}
inline ::google::protobuf::int32 ProtoLeagueApply::online_flag() const {
  return online_flag_;
}
inline void ProtoLeagueApply::set_online_flag(::google::protobuf::int32 value) {
  set_has_online_flag();
  online_flag_ = value;
}

// -------------------------------------------------------------------

// ProtoLeagueLog

// optional int64 log_tick = 1;
inline bool ProtoLeagueLog::has_log_tick() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoLeagueLog::set_has_log_tick() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoLeagueLog::clear_has_log_tick() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoLeagueLog::clear_log_tick() {
  log_tick_ = GOOGLE_LONGLONG(0);
  clear_has_log_tick();
}
inline ::google::protobuf::int64 ProtoLeagueLog::log_tick() const {
  return log_tick_;
}
inline void ProtoLeagueLog::set_log_tick(::google::protobuf::int64 value) {
  set_has_log_tick();
  log_tick_ = value;
}

// optional string log_content = 2;
inline bool ProtoLeagueLog::has_log_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoLeagueLog::set_has_log_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoLeagueLog::clear_has_log_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoLeagueLog::clear_log_content() {
  if (log_content_ != &::google::protobuf::internal::kEmptyString) {
    log_content_->clear();
  }
  clear_has_log_content();
}
inline const ::std::string& ProtoLeagueLog::log_content() const {
  return *log_content_;
}
inline void ProtoLeagueLog::set_log_content(const ::std::string& value) {
  set_has_log_content();
  if (log_content_ == &::google::protobuf::internal::kEmptyString) {
    log_content_ = new ::std::string;
  }
  log_content_->assign(value);
}
inline void ProtoLeagueLog::set_log_content(const char* value) {
  set_has_log_content();
  if (log_content_ == &::google::protobuf::internal::kEmptyString) {
    log_content_ = new ::std::string;
  }
  log_content_->assign(value);
}
inline void ProtoLeagueLog::set_log_content(const char* value, size_t size) {
  set_has_log_content();
  if (log_content_ == &::google::protobuf::internal::kEmptyString) {
    log_content_ = new ::std::string;
  }
  log_content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoLeagueLog::mutable_log_content() {
  set_has_log_content();
  if (log_content_ == &::google::protobuf::internal::kEmptyString) {
    log_content_ = new ::std::string;
  }
  return log_content_;
}
inline ::std::string* ProtoLeagueLog::release_log_content() {
  clear_has_log_content();
  if (log_content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = log_content_;
    log_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ProtoLeagueShop

// optional int32 item_id = 1;
inline bool ProtoLeagueShop::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoLeagueShop::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoLeagueShop::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoLeagueShop::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
}
inline ::google::protobuf::int32 ProtoLeagueShop::item_id() const {
  return item_id_;
}
inline void ProtoLeagueShop::set_item_id(::google::protobuf::int32 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional int32 buy_num = 2;
inline bool ProtoLeagueShop::has_buy_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoLeagueShop::set_has_buy_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoLeagueShop::clear_has_buy_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoLeagueShop::clear_buy_num() {
  buy_num_ = 0;
  clear_has_buy_num();
}
inline ::google::protobuf::int32 ProtoLeagueShop::buy_num() const {
  return buy_num_;
}
inline void ProtoLeagueShop::set_buy_num(::google::protobuf::int32 value) {
  set_has_buy_num();
  buy_num_ = value;
}

// -------------------------------------------------------------------

// ProtoMallItem

// optional int32 item_pos = 1;
inline bool ProtoMallItem::has_item_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoMallItem::set_has_item_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoMallItem::clear_has_item_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoMallItem::clear_item_pos() {
  item_pos_ = 0;
  clear_has_item_pos();
}
inline ::google::protobuf::int32 ProtoMallItem::item_pos() const {
  return item_pos_;
}
inline void ProtoMallItem::set_item_pos(::google::protobuf::int32 value) {
  set_has_item_pos();
  item_pos_ = value;
}

// optional int32 item_id = 2;
inline bool ProtoMallItem::has_item_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoMallItem::set_has_item_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoMallItem::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoMallItem::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
}
inline ::google::protobuf::int32 ProtoMallItem::item_id() const {
  return item_id_;
}
inline void ProtoMallItem::set_item_id(::google::protobuf::int32 value) {
  set_has_item_id();
  item_id_ = value;
}

// repeated int32 item_type_list = 3;
inline int ProtoMallItem::item_type_list_size() const {
  return item_type_list_.size();
}
inline void ProtoMallItem::clear_item_type_list() {
  item_type_list_.Clear();
}
inline ::google::protobuf::int32 ProtoMallItem::item_type_list(int index) const {
  return item_type_list_.Get(index);
}
inline void ProtoMallItem::set_item_type_list(int index, ::google::protobuf::int32 value) {
  item_type_list_.Set(index, value);
}
inline void ProtoMallItem::add_item_type_list(::google::protobuf::int32 value) {
  item_type_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProtoMallItem::item_type_list() const {
  return item_type_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProtoMallItem::mutable_item_type_list() {
  return &item_type_list_;
}

// optional int32 money_type = 4;
inline bool ProtoMallItem::has_money_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoMallItem::set_has_money_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoMallItem::clear_has_money_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoMallItem::clear_money_type() {
  money_type_ = 0;
  clear_has_money_type();
}
inline ::google::protobuf::int32 ProtoMallItem::money_type() const {
  return money_type_;
}
inline void ProtoMallItem::set_money_type(::google::protobuf::int32 value) {
  set_has_money_type();
  money_type_ = value;
}

// optional int32 prime_price = 5;
inline bool ProtoMallItem::has_prime_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoMallItem::set_has_prime_price() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoMallItem::clear_has_prime_price() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoMallItem::clear_prime_price() {
  prime_price_ = 0;
  clear_has_prime_price();
}
inline ::google::protobuf::int32 ProtoMallItem::prime_price() const {
  return prime_price_;
}
inline void ProtoMallItem::set_prime_price(::google::protobuf::int32 value) {
  set_has_prime_price();
  prime_price_ = value;
}

// optional int32 cur_price = 6;
inline bool ProtoMallItem::has_cur_price() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoMallItem::set_has_cur_price() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoMallItem::clear_has_cur_price() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoMallItem::clear_cur_price() {
  cur_price_ = 0;
  clear_has_cur_price();
}
inline ::google::protobuf::int32 ProtoMallItem::cur_price() const {
  return cur_price_;
}
inline void ProtoMallItem::set_cur_price(::google::protobuf::int32 value) {
  set_has_cur_price();
  cur_price_ = value;
}

// optional int32 vip_price = 7;
inline bool ProtoMallItem::has_vip_price() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoMallItem::set_has_vip_price() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoMallItem::clear_has_vip_price() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoMallItem::clear_vip_price() {
  vip_price_ = 0;
  clear_has_vip_price();
}
inline ::google::protobuf::int32 ProtoMallItem::vip_price() const {
  return vip_price_;
}
inline void ProtoMallItem::set_vip_price(::google::protobuf::int32 value) {
  set_has_vip_price();
  vip_price_ = value;
}

// optional int32 limit_condt_type = 8;
inline bool ProtoMallItem::has_limit_condt_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoMallItem::set_has_limit_condt_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoMallItem::clear_has_limit_condt_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoMallItem::clear_limit_condt_type() {
  limit_condt_type_ = 0;
  clear_has_limit_condt_type();
}
inline ::google::protobuf::int32 ProtoMallItem::limit_condt_type() const {
  return limit_condt_type_;
}
inline void ProtoMallItem::set_limit_condt_type(::google::protobuf::int32 value) {
  set_has_limit_condt_type();
  limit_condt_type_ = value;
}

// optional .ProtoPairObj limit_condt = 9;
inline bool ProtoMallItem::has_limit_condt() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProtoMallItem::set_has_limit_condt() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProtoMallItem::clear_has_limit_condt() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProtoMallItem::clear_limit_condt() {
  if (limit_condt_ != NULL) limit_condt_->::ProtoPairObj::Clear();
  clear_has_limit_condt();
}
inline const ::ProtoPairObj& ProtoMallItem::limit_condt() const {
  return limit_condt_ != NULL ? *limit_condt_ : *default_instance_->limit_condt_;
}
inline ::ProtoPairObj* ProtoMallItem::mutable_limit_condt() {
  set_has_limit_condt();
  if (limit_condt_ == NULL) limit_condt_ = new ::ProtoPairObj;
  return limit_condt_;
}
inline ::ProtoPairObj* ProtoMallItem::release_limit_condt() {
  clear_has_limit_condt();
  ::ProtoPairObj* temp = limit_condt_;
  limit_condt_ = NULL;
  return temp;
}

// optional string context = 10;
inline bool ProtoMallItem::has_context() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProtoMallItem::set_has_context() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ProtoMallItem::clear_has_context() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ProtoMallItem::clear_context() {
  if (context_ != &::google::protobuf::internal::kEmptyString) {
    context_->clear();
  }
  clear_has_context();
}
inline const ::std::string& ProtoMallItem::context() const {
  return *context_;
}
inline void ProtoMallItem::set_context(const ::std::string& value) {
  set_has_context();
  if (context_ == &::google::protobuf::internal::kEmptyString) {
    context_ = new ::std::string;
  }
  context_->assign(value);
}
inline void ProtoMallItem::set_context(const char* value) {
  set_has_context();
  if (context_ == &::google::protobuf::internal::kEmptyString) {
    context_ = new ::std::string;
  }
  context_->assign(value);
}
inline void ProtoMallItem::set_context(const char* value, size_t size) {
  set_has_context();
  if (context_ == &::google::protobuf::internal::kEmptyString) {
    context_ = new ::std::string;
  }
  context_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoMallItem::mutable_context() {
  set_has_context();
  if (context_ == &::google::protobuf::internal::kEmptyString) {
    context_ = new ::std::string;
  }
  return context_;
}
inline ::std::string* ProtoMallItem::release_context() {
  clear_has_context();
  if (context_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = context_;
    context_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 item_bind = 11;
inline bool ProtoMallItem::has_item_bind() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ProtoMallItem::set_has_item_bind() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ProtoMallItem::clear_has_item_bind() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ProtoMallItem::clear_item_bind() {
  item_bind_ = 0;
  clear_has_item_bind();
}
inline ::google::protobuf::int32 ProtoMallItem::item_bind() const {
  return item_bind_;
}
inline void ProtoMallItem::set_item_bind(::google::protobuf::int32 value) {
  set_has_item_bind();
  item_bind_ = value;
}

// optional int32 left_item = 12;
inline bool ProtoMallItem::has_left_item() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ProtoMallItem::set_has_left_item() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ProtoMallItem::clear_has_left_item() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ProtoMallItem::clear_left_item() {
  left_item_ = 0;
  clear_has_left_item();
}
inline ::google::protobuf::int32 ProtoMallItem::left_item() const {
  return left_item_;
}
inline void ProtoMallItem::set_left_item(::google::protobuf::int32 value) {
  set_has_left_item();
  left_item_ = value;
}

// optional int32 max_item = 13;
inline bool ProtoMallItem::has_max_item() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ProtoMallItem::set_has_max_item() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ProtoMallItem::clear_has_max_item() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ProtoMallItem::clear_max_item() {
  max_item_ = 0;
  clear_has_max_item();
}
inline ::google::protobuf::int32 ProtoMallItem::max_item() const {
  return max_item_;
}
inline void ProtoMallItem::set_max_item(::google::protobuf::int32 value) {
  set_has_max_item();
  max_item_ = value;
}

// optional int32 own = 14;
inline bool ProtoMallItem::has_own() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ProtoMallItem::set_has_own() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ProtoMallItem::clear_has_own() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ProtoMallItem::clear_own() {
  own_ = 0;
  clear_has_own();
}
inline ::google::protobuf::int32 ProtoMallItem::own() const {
  return own_;
}
inline void ProtoMallItem::set_own(::google::protobuf::int32 value) {
  set_has_own();
  own_ = value;
}

// -------------------------------------------------------------------

// ProtoMallList

// optional int32 shop_type = 1;
inline bool ProtoMallList::has_shop_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoMallList::set_has_shop_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoMallList::clear_has_shop_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoMallList::clear_shop_type() {
  shop_type_ = 0;
  clear_has_shop_type();
}
inline ::google::protobuf::int32 ProtoMallList::shop_type() const {
  return shop_type_;
}
inline void ProtoMallList::set_shop_type(::google::protobuf::int32 value) {
  set_has_shop_type();
  shop_type_ = value;
}

// repeated .ProtoMallItem Item_list = 2;
inline int ProtoMallList::item_list_size() const {
  return item_list_.size();
}
inline void ProtoMallList::clear_item_list() {
  item_list_.Clear();
}
inline const ::ProtoMallItem& ProtoMallList::item_list(int index) const {
  return item_list_.Get(index);
}
inline ::ProtoMallItem* ProtoMallList::mutable_item_list(int index) {
  return item_list_.Mutable(index);
}
inline ::ProtoMallItem* ProtoMallList::add_item_list() {
  return item_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoMallItem >&
ProtoMallList::item_list() const {
  return item_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoMallItem >*
ProtoMallList::mutable_item_list() {
  return &item_list_;
}

// -------------------------------------------------------------------

// ProtoTeamer

// optional string role_name = 1;
inline bool ProtoTeamer::has_role_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoTeamer::set_has_role_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoTeamer::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoTeamer::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& ProtoTeamer::role_name() const {
  return *role_name_;
}
inline void ProtoTeamer::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoTeamer::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoTeamer::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoTeamer::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* ProtoTeamer::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string full_name = 2;
inline bool ProtoTeamer::has_full_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoTeamer::set_has_full_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoTeamer::clear_has_full_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoTeamer::clear_full_name() {
  if (full_name_ != &::google::protobuf::internal::kEmptyString) {
    full_name_->clear();
  }
  clear_has_full_name();
}
inline const ::std::string& ProtoTeamer::full_name() const {
  return *full_name_;
}
inline void ProtoTeamer::set_full_name(const ::std::string& value) {
  set_has_full_name();
  if (full_name_ == &::google::protobuf::internal::kEmptyString) {
    full_name_ = new ::std::string;
  }
  full_name_->assign(value);
}
inline void ProtoTeamer::set_full_name(const char* value) {
  set_has_full_name();
  if (full_name_ == &::google::protobuf::internal::kEmptyString) {
    full_name_ = new ::std::string;
  }
  full_name_->assign(value);
}
inline void ProtoTeamer::set_full_name(const char* value, size_t size) {
  set_has_full_name();
  if (full_name_ == &::google::protobuf::internal::kEmptyString) {
    full_name_ = new ::std::string;
  }
  full_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoTeamer::mutable_full_name() {
  set_has_full_name();
  if (full_name_ == &::google::protobuf::internal::kEmptyString) {
    full_name_ = new ::std::string;
  }
  return full_name_;
}
inline ::std::string* ProtoTeamer::release_full_name() {
  clear_has_full_name();
  if (full_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = full_name_;
    full_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 role_id = 3;
inline bool ProtoTeamer::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoTeamer::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoTeamer::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoTeamer::clear_role_id() {
  role_id_ = GOOGLE_LONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::int64 ProtoTeamer::role_id() const {
  return role_id_;
}
inline void ProtoTeamer::set_role_id(::google::protobuf::int64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional int32 role_level = 4;
inline bool ProtoTeamer::has_role_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoTeamer::set_has_role_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoTeamer::clear_has_role_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoTeamer::clear_role_level() {
  role_level_ = 0;
  clear_has_role_level();
}
inline ::google::protobuf::int32 ProtoTeamer::role_level() const {
  return role_level_;
}
inline void ProtoTeamer::set_role_level(::google::protobuf::int32 value) {
  set_has_role_level();
  role_level_ = value;
}

// optional int32 role_force = 5;
inline bool ProtoTeamer::has_role_force() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoTeamer::set_has_role_force() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoTeamer::clear_has_role_force() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoTeamer::clear_role_force() {
  role_force_ = 0;
  clear_has_role_force();
}
inline ::google::protobuf::int32 ProtoTeamer::role_force() const {
  return role_force_;
}
inline void ProtoTeamer::set_role_force(::google::protobuf::int32 value) {
  set_has_role_force();
  role_force_ = value;
}

// optional int32 role_career = 6;
inline bool ProtoTeamer::has_role_career() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoTeamer::set_has_role_career() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoTeamer::clear_has_role_career() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoTeamer::clear_role_career() {
  role_career_ = 0;
  clear_has_role_career();
}
inline ::google::protobuf::int32 ProtoTeamer::role_career() const {
  return role_career_;
}
inline void ProtoTeamer::set_role_career(::google::protobuf::int32 value) {
  set_has_role_career();
  role_career_ = value;
}

// optional int32 role_sex = 7;
inline bool ProtoTeamer::has_role_sex() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoTeamer::set_has_role_sex() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoTeamer::clear_has_role_sex() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoTeamer::clear_role_sex() {
  role_sex_ = 0;
  clear_has_role_sex();
}
inline ::google::protobuf::int32 ProtoTeamer::role_sex() const {
  return role_sex_;
}
inline void ProtoTeamer::set_role_sex(::google::protobuf::int32 value) {
  set_has_role_sex();
  role_sex_ = value;
}

// optional int32 vip_type = 8;
inline bool ProtoTeamer::has_vip_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoTeamer::set_has_vip_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoTeamer::clear_has_vip_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoTeamer::clear_vip_type() {
  vip_type_ = 0;
  clear_has_vip_type();
}
inline ::google::protobuf::int32 ProtoTeamer::vip_type() const {
  return vip_type_;
}
inline void ProtoTeamer::set_vip_type(::google::protobuf::int32 value) {
  set_has_vip_type();
  vip_type_ = value;
}

// optional int32 online_flag = 9;
inline bool ProtoTeamer::has_online_flag() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProtoTeamer::set_has_online_flag() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProtoTeamer::clear_has_online_flag() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProtoTeamer::clear_online_flag() {
  online_flag_ = 0;
  clear_has_online_flag();
}
inline ::google::protobuf::int32 ProtoTeamer::online_flag() const {
  return online_flag_;
}
inline void ProtoTeamer::set_online_flag(::google::protobuf::int32 value) {
  set_has_online_flag();
  online_flag_ = value;
}

// optional int32 prepare = 10;
inline bool ProtoTeamer::has_prepare() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProtoTeamer::set_has_prepare() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ProtoTeamer::clear_has_prepare() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ProtoTeamer::clear_prepare() {
  prepare_ = 0;
  clear_has_prepare();
}
inline ::google::protobuf::int32 ProtoTeamer::prepare() const {
  return prepare_;
}
inline void ProtoTeamer::set_prepare(::google::protobuf::int32 value) {
  set_has_prepare();
  prepare_ = value;
}

// optional string league_name = 11;
inline bool ProtoTeamer::has_league_name() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ProtoTeamer::set_has_league_name() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ProtoTeamer::clear_has_league_name() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ProtoTeamer::clear_league_name() {
  if (league_name_ != &::google::protobuf::internal::kEmptyString) {
    league_name_->clear();
  }
  clear_has_league_name();
}
inline const ::std::string& ProtoTeamer::league_name() const {
  return *league_name_;
}
inline void ProtoTeamer::set_league_name(const ::std::string& value) {
  set_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    league_name_ = new ::std::string;
  }
  league_name_->assign(value);
}
inline void ProtoTeamer::set_league_name(const char* value) {
  set_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    league_name_ = new ::std::string;
  }
  league_name_->assign(value);
}
inline void ProtoTeamer::set_league_name(const char* value, size_t size) {
  set_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    league_name_ = new ::std::string;
  }
  league_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoTeamer::mutable_league_name() {
  set_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    league_name_ = new ::std::string;
  }
  return league_name_;
}
inline ::std::string* ProtoTeamer::release_league_name() {
  clear_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = league_name_;
    league_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 team_num = 12;
inline bool ProtoTeamer::has_team_num() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ProtoTeamer::set_has_team_num() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ProtoTeamer::clear_has_team_num() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ProtoTeamer::clear_team_num() {
  team_num_ = 0;
  clear_has_team_num();
}
inline ::google::protobuf::int32 ProtoTeamer::team_num() const {
  return team_num_;
}
inline void ProtoTeamer::set_team_num(::google::protobuf::int32 value) {
  set_has_team_num();
  team_num_ = value;
}

// optional int32 team_limit = 13;
inline bool ProtoTeamer::has_team_limit() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ProtoTeamer::set_has_team_limit() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ProtoTeamer::clear_has_team_limit() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ProtoTeamer::clear_team_limit() {
  team_limit_ = 0;
  clear_has_team_limit();
}
inline ::google::protobuf::int32 ProtoTeamer::team_limit() const {
  return team_limit_;
}
inline void ProtoTeamer::set_team_limit(::google::protobuf::int32 value) {
  set_has_team_limit();
  team_limit_ = value;
}

// repeated .ProtoThreeObj show_info = 14;
inline int ProtoTeamer::show_info_size() const {
  return show_info_.size();
}
inline void ProtoTeamer::clear_show_info() {
  show_info_.Clear();
}
inline const ::ProtoThreeObj& ProtoTeamer::show_info(int index) const {
  return show_info_.Get(index);
}
inline ::ProtoThreeObj* ProtoTeamer::mutable_show_info(int index) {
  return show_info_.Mutable(index);
}
inline ::ProtoThreeObj* ProtoTeamer::add_show_info() {
  return show_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoThreeObj >&
ProtoTeamer::show_info() const {
  return show_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoThreeObj >*
ProtoTeamer::mutable_show_info() {
  return &show_info_;
}

// repeated .ProtoPairObj mount_info = 15;
inline int ProtoTeamer::mount_info_size() const {
  return mount_info_.size();
}
inline void ProtoTeamer::clear_mount_info() {
  mount_info_.Clear();
}
inline const ::ProtoPairObj& ProtoTeamer::mount_info(int index) const {
  return mount_info_.Get(index);
}
inline ::ProtoPairObj* ProtoTeamer::mutable_mount_info(int index) {
  return mount_info_.Mutable(index);
}
inline ::ProtoPairObj* ProtoTeamer::add_mount_info() {
  return mount_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >&
ProtoTeamer::mount_info() const {
  return mount_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >*
ProtoTeamer::mutable_mount_info() {
  return &mount_info_;
}

// optional string prev = 16;
inline bool ProtoTeamer::has_prev() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ProtoTeamer::set_has_prev() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ProtoTeamer::clear_has_prev() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ProtoTeamer::clear_prev() {
  if (prev_ != &::google::protobuf::internal::kEmptyString) {
    prev_->clear();
  }
  clear_has_prev();
}
inline const ::std::string& ProtoTeamer::prev() const {
  return *prev_;
}
inline void ProtoTeamer::set_prev(const ::std::string& value) {
  set_has_prev();
  if (prev_ == &::google::protobuf::internal::kEmptyString) {
    prev_ = new ::std::string;
  }
  prev_->assign(value);
}
inline void ProtoTeamer::set_prev(const char* value) {
  set_has_prev();
  if (prev_ == &::google::protobuf::internal::kEmptyString) {
    prev_ = new ::std::string;
  }
  prev_->assign(value);
}
inline void ProtoTeamer::set_prev(const char* value, size_t size) {
  set_has_prev();
  if (prev_ == &::google::protobuf::internal::kEmptyString) {
    prev_ = new ::std::string;
  }
  prev_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoTeamer::mutable_prev() {
  set_has_prev();
  if (prev_ == &::google::protobuf::internal::kEmptyString) {
    prev_ = new ::std::string;
  }
  return prev_;
}
inline ::std::string* ProtoTeamer::release_prev() {
  clear_has_prev();
  if (prev_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = prev_;
    prev_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ProtoLimitTimeLabel

// optional int32 label_id = 1;
inline bool ProtoLimitTimeLabel::has_label_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoLimitTimeLabel::set_has_label_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoLimitTimeLabel::clear_has_label_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoLimitTimeLabel::clear_label_id() {
  label_id_ = 0;
  clear_has_label_id();
}
inline ::google::protobuf::int32 ProtoLimitTimeLabel::label_id() const {
  return label_id_;
}
inline void ProtoLimitTimeLabel::set_label_id(::google::protobuf::int32 value) {
  set_has_label_id();
  label_id_ = value;
}

// optional int32 left_time = 2;
inline bool ProtoLimitTimeLabel::has_left_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoLimitTimeLabel::set_has_left_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoLimitTimeLabel::clear_has_left_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoLimitTimeLabel::clear_left_time() {
  left_time_ = 0;
  clear_has_left_time();
}
inline ::google::protobuf::int32 ProtoLimitTimeLabel::left_time() const {
  return left_time_;
}
inline void ProtoLimitTimeLabel::set_left_time(::google::protobuf::int32 value) {
  set_has_left_time();
  left_time_ = value;
}

// -------------------------------------------------------------------

// ProtoDivineRecord

// optional string role_name = 1;
inline bool ProtoDivineRecord::has_role_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoDivineRecord::set_has_role_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoDivineRecord::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoDivineRecord::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& ProtoDivineRecord::role_name() const {
  return *role_name_;
}
inline void ProtoDivineRecord::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoDivineRecord::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoDivineRecord::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoDivineRecord::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* ProtoDivineRecord::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 item_id = 2;
inline bool ProtoDivineRecord::has_item_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoDivineRecord::set_has_item_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoDivineRecord::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoDivineRecord::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
}
inline ::google::protobuf::int32 ProtoDivineRecord::item_id() const {
  return item_id_;
}
inline void ProtoDivineRecord::set_item_id(::google::protobuf::int32 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional int32 item_amount = 3;
inline bool ProtoDivineRecord::has_item_amount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoDivineRecord::set_has_item_amount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoDivineRecord::clear_has_item_amount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoDivineRecord::clear_item_amount() {
  item_amount_ = 0;
  clear_has_item_amount();
}
inline ::google::protobuf::int32 ProtoDivineRecord::item_amount() const {
  return item_amount_;
}
inline void ProtoDivineRecord::set_item_amount(::google::protobuf::int32 value) {
  set_has_item_amount();
  item_amount_ = value;
}

// optional int64 role_id = 4;
inline bool ProtoDivineRecord::has_role_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoDivineRecord::set_has_role_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoDivineRecord::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoDivineRecord::clear_role_id() {
  role_id_ = GOOGLE_LONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::int64 ProtoDivineRecord::role_id() const {
  return role_id_;
}
inline void ProtoDivineRecord::set_role_id(::google::protobuf::int64 value) {
  set_has_role_id();
  role_id_ = value;
}

// -------------------------------------------------------------------

// ProtoAchieveDetail

// optional int32 achieve_id = 1;
inline bool ProtoAchieveDetail::has_achieve_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoAchieveDetail::set_has_achieve_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoAchieveDetail::clear_has_achieve_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoAchieveDetail::clear_achieve_id() {
  achieve_id_ = 0;
  clear_has_achieve_id();
}
inline ::google::protobuf::int32 ProtoAchieveDetail::achieve_id() const {
  return achieve_id_;
}
inline void ProtoAchieveDetail::set_achieve_id(::google::protobuf::int32 value) {
  set_has_achieve_id();
  achieve_id_ = value;
}

// optional int32 ach_index = 2;
inline bool ProtoAchieveDetail::has_ach_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoAchieveDetail::set_has_ach_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoAchieveDetail::clear_has_ach_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoAchieveDetail::clear_ach_index() {
  ach_index_ = 0;
  clear_has_ach_index();
}
inline ::google::protobuf::int32 ProtoAchieveDetail::ach_index() const {
  return ach_index_;
}
inline void ProtoAchieveDetail::set_ach_index(::google::protobuf::int32 value) {
  set_has_ach_index();
  ach_index_ = value;
}

// optional int32 finish_num = 3;
inline bool ProtoAchieveDetail::has_finish_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoAchieveDetail::set_has_finish_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoAchieveDetail::clear_has_finish_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoAchieveDetail::clear_finish_num() {
  finish_num_ = 0;
  clear_has_finish_num();
}
inline ::google::protobuf::int32 ProtoAchieveDetail::finish_num() const {
  return finish_num_;
}
inline void ProtoAchieveDetail::set_finish_num(::google::protobuf::int32 value) {
  set_has_finish_num();
  finish_num_ = value;
}

// optional int32 get_status = 4;
inline bool ProtoAchieveDetail::has_get_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoAchieveDetail::set_has_get_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoAchieveDetail::clear_has_get_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoAchieveDetail::clear_get_status() {
  get_status_ = 0;
  clear_has_get_status();
}
inline ::google::protobuf::int32 ProtoAchieveDetail::get_status() const {
  return get_status_;
}
inline void ProtoAchieveDetail::set_get_status(::google::protobuf::int32 value) {
  set_has_get_status();
  get_status_ = value;
}

// optional int64 finish_tick = 5;
inline bool ProtoAchieveDetail::has_finish_tick() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoAchieveDetail::set_has_finish_tick() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoAchieveDetail::clear_has_finish_tick() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoAchieveDetail::clear_finish_tick() {
  finish_tick_ = GOOGLE_LONGLONG(0);
  clear_has_finish_tick();
}
inline ::google::protobuf::int64 ProtoAchieveDetail::finish_tick() const {
  return finish_tick_;
}
inline void ProtoAchieveDetail::set_finish_tick(::google::protobuf::int64 value) {
  set_has_finish_tick();
  finish_tick_ = value;
}

// optional int32 special_value = 6;
inline bool ProtoAchieveDetail::has_special_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoAchieveDetail::set_has_special_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoAchieveDetail::clear_has_special_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoAchieveDetail::clear_special_value() {
  special_value_ = 0;
  clear_has_special_value();
}
inline ::google::protobuf::int32 ProtoAchieveDetail::special_value() const {
  return special_value_;
}
inline void ProtoAchieveDetail::set_special_value(::google::protobuf::int32 value) {
  set_has_special_value();
  special_value_ = value;
}

// -------------------------------------------------------------------

// ProtoBrocastRole

// optional int64 role_id = 1;
inline bool ProtoBrocastRole::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoBrocastRole::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoBrocastRole::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoBrocastRole::clear_role_id() {
  role_id_ = GOOGLE_LONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::int64 ProtoBrocastRole::role_id() const {
  return role_id_;
}
inline void ProtoBrocastRole::set_role_id(::google::protobuf::int64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string role_name = 2;
inline bool ProtoBrocastRole::has_role_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoBrocastRole::set_has_role_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoBrocastRole::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoBrocastRole::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& ProtoBrocastRole::role_name() const {
  return *role_name_;
}
inline void ProtoBrocastRole::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoBrocastRole::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoBrocastRole::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoBrocastRole::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* ProtoBrocastRole::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 team_state = 3;
inline bool ProtoBrocastRole::has_team_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoBrocastRole::set_has_team_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoBrocastRole::clear_has_team_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoBrocastRole::clear_team_state() {
  team_state_ = 0;
  clear_has_team_state();
}
inline ::google::protobuf::int32 ProtoBrocastRole::team_state() const {
  return team_state_;
}
inline void ProtoBrocastRole::set_team_state(::google::protobuf::int32 value) {
  set_has_team_state();
  team_state_ = value;
}

// -------------------------------------------------------------------

// ProtoMonster

// optional int32 sort = 1;
inline bool ProtoMonster::has_sort() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoMonster::set_has_sort() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoMonster::clear_has_sort() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoMonster::clear_sort() {
  sort_ = 0;
  clear_has_sort();
}
inline ::google::protobuf::int32 ProtoMonster::sort() const {
  return sort_;
}
inline void ProtoMonster::set_sort(::google::protobuf::int32 value) {
  set_has_sort();
  sort_ = value;
}

// optional int32 left_amount = 2;
inline bool ProtoMonster::has_left_amount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoMonster::set_has_left_amount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoMonster::clear_has_left_amount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoMonster::clear_left_amount() {
  left_amount_ = 0;
  clear_has_left_amount();
}
inline ::google::protobuf::int32 ProtoMonster::left_amount() const {
  return left_amount_;
}
inline void ProtoMonster::set_left_amount(::google::protobuf::int32 value) {
  set_has_left_amount();
  left_amount_ = value;
}

// optional int32 total_amount = 3;
inline bool ProtoMonster::has_total_amount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoMonster::set_has_total_amount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoMonster::clear_has_total_amount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoMonster::clear_total_amount() {
  total_amount_ = 0;
  clear_has_total_amount();
}
inline ::google::protobuf::int32 ProtoMonster::total_amount() const {
  return total_amount_;
}
inline void ProtoMonster::set_total_amount(::google::protobuf::int32 value) {
  set_has_total_amount();
  total_amount_ = value;
}

// optional .ProtoCoord coord = 4;
inline bool ProtoMonster::has_coord() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoMonster::set_has_coord() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoMonster::clear_has_coord() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoMonster::clear_coord() {
  if (coord_ != NULL) coord_->::ProtoCoord::Clear();
  clear_has_coord();
}
inline const ::ProtoCoord& ProtoMonster::coord() const {
  return coord_ != NULL ? *coord_ : *default_instance_->coord_;
}
inline ::ProtoCoord* ProtoMonster::mutable_coord() {
  set_has_coord();
  if (coord_ == NULL) coord_ = new ::ProtoCoord;
  return coord_;
}
inline ::ProtoCoord* ProtoMonster::release_coord() {
  clear_has_coord();
  ::ProtoCoord* temp = coord_;
  coord_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// ProtoActivityInfo

// optional int32 activity_id = 1;
inline bool ProtoActivityInfo::has_activity_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoActivityInfo::set_has_activity_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoActivityInfo::clear_has_activity_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoActivityInfo::clear_activity_id() {
  activity_id_ = 0;
  clear_has_activity_id();
}
inline ::google::protobuf::int32 ProtoActivityInfo::activity_id() const {
  return activity_id_;
}
inline void ProtoActivityInfo::set_activity_id(::google::protobuf::int32 value) {
  set_has_activity_id();
  activity_id_ = value;
}

// optional int32 activity_state = 2;
inline bool ProtoActivityInfo::has_activity_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoActivityInfo::set_has_activity_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoActivityInfo::clear_has_activity_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoActivityInfo::clear_activity_state() {
  activity_state_ = 0;
  clear_has_activity_state();
}
inline ::google::protobuf::int32 ProtoActivityInfo::activity_state() const {
  return activity_state_;
}
inline void ProtoActivityInfo::set_activity_state(::google::protobuf::int32 value) {
  set_has_activity_state();
  activity_state_ = value;
}

// optional int32 icon_bling = 3;
inline bool ProtoActivityInfo::has_icon_bling() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoActivityInfo::set_has_icon_bling() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoActivityInfo::clear_has_icon_bling() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoActivityInfo::clear_icon_bling() {
  icon_bling_ = 0;
  clear_has_icon_bling();
}
inline ::google::protobuf::int32 ProtoActivityInfo::icon_bling() const {
  return icon_bling_;
}
inline void ProtoActivityInfo::set_icon_bling(::google::protobuf::int32 value) {
  set_has_icon_bling();
  icon_bling_ = value;
}

// optional int32 left_time = 4;
inline bool ProtoActivityInfo::has_left_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoActivityInfo::set_has_left_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoActivityInfo::clear_has_left_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoActivityInfo::clear_left_time() {
  left_time_ = 0;
  clear_has_left_time();
}
inline ::google::protobuf::int32 ProtoActivityInfo::left_time() const {
  return left_time_;
}
inline void ProtoActivityInfo::set_left_time(::google::protobuf::int32 value) {
  set_has_left_time();
  left_time_ = value;
}

// optional int32 sub_value = 5;
inline bool ProtoActivityInfo::has_sub_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoActivityInfo::set_has_sub_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoActivityInfo::clear_has_sub_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoActivityInfo::clear_sub_value() {
  sub_value_ = 0;
  clear_has_sub_value();
}
inline ::google::protobuf::int32 ProtoActivityInfo::sub_value() const {
  return sub_value_;
}
inline void ProtoActivityInfo::set_sub_value(::google::protobuf::int32 value) {
  set_has_sub_value();
  sub_value_ = value;
}

// -------------------------------------------------------------------

// ProtoBeast

// optional int64 beast_id = 1;
inline bool ProtoBeast::has_beast_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoBeast::set_has_beast_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoBeast::clear_has_beast_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoBeast::clear_beast_id() {
  beast_id_ = GOOGLE_LONGLONG(0);
  clear_has_beast_id();
}
inline ::google::protobuf::int64 ProtoBeast::beast_id() const {
  return beast_id_;
}
inline void ProtoBeast::set_beast_id(::google::protobuf::int64 value) {
  set_has_beast_id();
  beast_id_ = value;
}

// optional int32 beast_sort = 2;
inline bool ProtoBeast::has_beast_sort() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoBeast::set_has_beast_sort() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoBeast::clear_has_beast_sort() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoBeast::clear_beast_sort() {
  beast_sort_ = 0;
  clear_has_beast_sort();
}
inline ::google::protobuf::int32 ProtoBeast::beast_sort() const {
  return beast_sort_;
}
inline void ProtoBeast::set_beast_sort(::google::protobuf::int32 value) {
  set_has_beast_sort();
  beast_sort_ = value;
}

// optional int32 basic_attck = 3;
inline bool ProtoBeast::has_basic_attck() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoBeast::set_has_basic_attck() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoBeast::clear_has_basic_attck() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoBeast::clear_basic_attck() {
  basic_attck_ = 0;
  clear_has_basic_attck();
}
inline ::google::protobuf::int32 ProtoBeast::basic_attck() const {
  return basic_attck_;
}
inline void ProtoBeast::set_basic_attck(::google::protobuf::int32 value) {
  set_has_basic_attck();
  basic_attck_ = value;
}

// optional int32 basic_hit = 4;
inline bool ProtoBeast::has_basic_hit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoBeast::set_has_basic_hit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoBeast::clear_has_basic_hit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoBeast::clear_basic_hit() {
  basic_hit_ = 0;
  clear_has_basic_hit();
}
inline ::google::protobuf::int32 ProtoBeast::basic_hit() const {
  return basic_hit_;
}
inline void ProtoBeast::set_basic_hit(::google::protobuf::int32 value) {
  set_has_basic_hit();
  basic_hit_ = value;
}

// optional int32 basic_crit = 5;
inline bool ProtoBeast::has_basic_crit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoBeast::set_has_basic_crit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoBeast::clear_has_basic_crit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoBeast::clear_basic_crit() {
  basic_crit_ = 0;
  clear_has_basic_crit();
}
inline ::google::protobuf::int32 ProtoBeast::basic_crit() const {
  return basic_crit_;
}
inline void ProtoBeast::set_basic_crit(::google::protobuf::int32 value) {
  set_has_basic_crit();
  basic_crit_ = value;
}

// optional string beast_name = 6;
inline bool ProtoBeast::has_beast_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoBeast::set_has_beast_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoBeast::clear_has_beast_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoBeast::clear_beast_name() {
  if (beast_name_ != &::google::protobuf::internal::kEmptyString) {
    beast_name_->clear();
  }
  clear_has_beast_name();
}
inline const ::std::string& ProtoBeast::beast_name() const {
  return *beast_name_;
}
inline void ProtoBeast::set_beast_name(const ::std::string& value) {
  set_has_beast_name();
  if (beast_name_ == &::google::protobuf::internal::kEmptyString) {
    beast_name_ = new ::std::string;
  }
  beast_name_->assign(value);
}
inline void ProtoBeast::set_beast_name(const char* value) {
  set_has_beast_name();
  if (beast_name_ == &::google::protobuf::internal::kEmptyString) {
    beast_name_ = new ::std::string;
  }
  beast_name_->assign(value);
}
inline void ProtoBeast::set_beast_name(const char* value, size_t size) {
  set_has_beast_name();
  if (beast_name_ == &::google::protobuf::internal::kEmptyString) {
    beast_name_ = new ::std::string;
  }
  beast_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoBeast::mutable_beast_name() {
  set_has_beast_name();
  if (beast_name_ == &::google::protobuf::internal::kEmptyString) {
    beast_name_ = new ::std::string;
  }
  return beast_name_;
}
inline ::std::string* ProtoBeast::release_beast_name() {
  clear_has_beast_name();
  if (beast_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = beast_name_;
    beast_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .ProtoBeastSkill skill_set = 7;
inline int ProtoBeast::skill_set_size() const {
  return skill_set_.size();
}
inline void ProtoBeast::clear_skill_set() {
  skill_set_.Clear();
}
inline const ::ProtoBeastSkill& ProtoBeast::skill_set(int index) const {
  return skill_set_.Get(index);
}
inline ::ProtoBeastSkill* ProtoBeast::mutable_skill_set(int index) {
  return skill_set_.Mutable(index);
}
inline ::ProtoBeastSkill* ProtoBeast::add_skill_set() {
  return skill_set_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBeastSkill >&
ProtoBeast::skill_set() const {
  return skill_set_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBeastSkill >*
ProtoBeast::mutable_skill_set() {
  return &skill_set_;
}

// optional int32 beast_pos = 8;
inline bool ProtoBeast::has_beast_pos() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoBeast::set_has_beast_pos() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoBeast::clear_has_beast_pos() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoBeast::clear_beast_pos() {
  beast_pos_ = 0;
  clear_has_beast_pos();
}
inline ::google::protobuf::int32 ProtoBeast::beast_pos() const {
  return beast_pos_;
}
inline void ProtoBeast::set_beast_pos(::google::protobuf::int32 value) {
  set_has_beast_pos();
  beast_pos_ = value;
}

// optional int32 beast_force = 9;
inline bool ProtoBeast::has_beast_force() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProtoBeast::set_has_beast_force() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProtoBeast::clear_has_beast_force() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProtoBeast::clear_beast_force() {
  beast_force_ = 0;
  clear_has_beast_force();
}
inline ::google::protobuf::int32 ProtoBeast::beast_force() const {
  return beast_force_;
}
inline void ProtoBeast::set_beast_force(::google::protobuf::int32 value) {
  set_has_beast_force();
  beast_force_ = value;
}

// optional int32 ability = 10;
inline bool ProtoBeast::has_ability() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProtoBeast::set_has_ability() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ProtoBeast::clear_has_ability() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ProtoBeast::clear_ability() {
  ability_ = 0;
  clear_has_ability();
}
inline ::google::protobuf::int32 ProtoBeast::ability() const {
  return ability_;
}
inline void ProtoBeast::set_ability(::google::protobuf::int32 value) {
  set_has_ability();
  ability_ = value;
}

// optional int32 growth_lvl = 11;
inline bool ProtoBeast::has_growth_lvl() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ProtoBeast::set_has_growth_lvl() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ProtoBeast::clear_has_growth_lvl() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ProtoBeast::clear_growth_lvl() {
  growth_lvl_ = 0;
  clear_has_growth_lvl();
}
inline ::google::protobuf::int32 ProtoBeast::growth_lvl() const {
  return growth_lvl_;
}
inline void ProtoBeast::set_growth_lvl(::google::protobuf::int32 value) {
  set_has_growth_lvl();
  growth_lvl_ = value;
}

// optional int32 growth_value = 12;
inline bool ProtoBeast::has_growth_value() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ProtoBeast::set_has_growth_value() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ProtoBeast::clear_has_growth_value() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ProtoBeast::clear_growth_value() {
  growth_value_ = 0;
  clear_has_growth_value();
}
inline ::google::protobuf::int32 ProtoBeast::growth_value() const {
  return growth_value_;
}
inline void ProtoBeast::set_growth_value(::google::protobuf::int32 value) {
  set_has_growth_value();
  growth_value_ = value;
}

// repeated int32 beast_soul = 13;
inline int ProtoBeast::beast_soul_size() const {
  return beast_soul_.size();
}
inline void ProtoBeast::clear_beast_soul() {
  beast_soul_.Clear();
}
inline ::google::protobuf::int32 ProtoBeast::beast_soul(int index) const {
  return beast_soul_.Get(index);
}
inline void ProtoBeast::set_beast_soul(int index, ::google::protobuf::int32 value) {
  beast_soul_.Set(index, value);
}
inline void ProtoBeast::add_beast_soul(::google::protobuf::int32 value) {
  beast_soul_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProtoBeast::beast_soul() const {
  return beast_soul_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProtoBeast::mutable_beast_soul() {
  return &beast_soul_;
}

// repeated int32 soul_value = 14;
inline int ProtoBeast::soul_value_size() const {
  return soul_value_.size();
}
inline void ProtoBeast::clear_soul_value() {
  soul_value_.Clear();
}
inline ::google::protobuf::int32 ProtoBeast::soul_value(int index) const {
  return soul_value_.Get(index);
}
inline void ProtoBeast::set_soul_value(int index, ::google::protobuf::int32 value) {
  soul_value_.Set(index, value);
}
inline void ProtoBeast::add_soul_value(::google::protobuf::int32 value) {
  soul_value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProtoBeast::soul_value() const {
  return soul_value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProtoBeast::mutable_soul_value() {
  return &soul_value_;
}

// optional int32 beast_level = 15;
inline bool ProtoBeast::has_beast_level() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ProtoBeast::set_has_beast_level() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ProtoBeast::clear_has_beast_level() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ProtoBeast::clear_beast_level() {
  beast_level_ = 0;
  clear_has_beast_level();
}
inline ::google::protobuf::int32 ProtoBeast::beast_level() const {
  return beast_level_;
}
inline void ProtoBeast::set_beast_level(::google::protobuf::int32 value) {
  set_has_beast_level();
  beast_level_ = value;
}

// optional int32 color = 16;
inline bool ProtoBeast::has_color() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ProtoBeast::set_has_color() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ProtoBeast::clear_has_color() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ProtoBeast::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::google::protobuf::int32 ProtoBeast::color() const {
  return color_;
}
inline void ProtoBeast::set_color(::google::protobuf::int32 value) {
  set_has_color();
  color_ = value;
}

// optional int32 combine = 17;
inline bool ProtoBeast::has_combine() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ProtoBeast::set_has_combine() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ProtoBeast::clear_has_combine() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ProtoBeast::clear_combine() {
  combine_ = 0;
  clear_has_combine();
}
inline ::google::protobuf::int32 ProtoBeast::combine() const {
  return combine_;
}
inline void ProtoBeast::set_combine(::google::protobuf::int32 value) {
  set_has_combine();
  combine_ = value;
}

// optional int32 guard = 18;
inline bool ProtoBeast::has_guard() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ProtoBeast::set_has_guard() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ProtoBeast::clear_has_guard() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ProtoBeast::clear_guard() {
  guard_ = 0;
  clear_has_guard();
}
inline ::google::protobuf::int32 ProtoBeast::guard() const {
  return guard_;
}
inline void ProtoBeast::set_guard(::google::protobuf::int32 value) {
  set_has_guard();
  guard_ = value;
}

// -------------------------------------------------------------------

// ProtoFlaunt

// optional int64 flaunt_id = 1;
inline bool ProtoFlaunt::has_flaunt_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoFlaunt::set_has_flaunt_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoFlaunt::clear_has_flaunt_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoFlaunt::clear_flaunt_id() {
  flaunt_id_ = GOOGLE_LONGLONG(0);
  clear_has_flaunt_id();
}
inline ::google::protobuf::int64 ProtoFlaunt::flaunt_id() const {
  return flaunt_id_;
}
inline void ProtoFlaunt::set_flaunt_id(::google::protobuf::int64 value) {
  set_has_flaunt_id();
  flaunt_id_ = value;
}

// optional int32 color = 2;
inline bool ProtoFlaunt::has_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoFlaunt::set_has_color() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoFlaunt::clear_has_color() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoFlaunt::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::google::protobuf::int32 ProtoFlaunt::color() const {
  return color_;
}
inline void ProtoFlaunt::set_color(::google::protobuf::int32 value) {
  set_has_color();
  color_ = value;
}

// optional string content = 3;
inline bool ProtoFlaunt::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoFlaunt::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoFlaunt::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoFlaunt::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& ProtoFlaunt::content() const {
  return *content_;
}
inline void ProtoFlaunt::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void ProtoFlaunt::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void ProtoFlaunt::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoFlaunt::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* ProtoFlaunt::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ProtoSyncLeague

// optional int64 league_index = 1;
inline bool ProtoSyncLeague::has_league_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoSyncLeague::set_has_league_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoSyncLeague::clear_has_league_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoSyncLeague::clear_league_index() {
  league_index_ = GOOGLE_LONGLONG(0);
  clear_has_league_index();
}
inline ::google::protobuf::int64 ProtoSyncLeague::league_index() const {
  return league_index_;
}
inline void ProtoSyncLeague::set_league_index(::google::protobuf::int64 value) {
  set_has_league_index();
  league_index_ = value;
}

// optional string league_name = 2;
inline bool ProtoSyncLeague::has_league_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoSyncLeague::set_has_league_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoSyncLeague::clear_has_league_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoSyncLeague::clear_league_name() {
  if (league_name_ != &::google::protobuf::internal::kEmptyString) {
    league_name_->clear();
  }
  clear_has_league_name();
}
inline const ::std::string& ProtoSyncLeague::league_name() const {
  return *league_name_;
}
inline void ProtoSyncLeague::set_league_name(const ::std::string& value) {
  set_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    league_name_ = new ::std::string;
  }
  league_name_->assign(value);
}
inline void ProtoSyncLeague::set_league_name(const char* value) {
  set_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    league_name_ = new ::std::string;
  }
  league_name_->assign(value);
}
inline void ProtoSyncLeague::set_league_name(const char* value, size_t size) {
  set_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    league_name_ = new ::std::string;
  }
  league_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoSyncLeague::mutable_league_name() {
  set_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    league_name_ = new ::std::string;
  }
  return league_name_;
}
inline ::std::string* ProtoSyncLeague::release_league_name() {
  clear_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = league_name_;
    league_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 league_level = 3;
inline bool ProtoSyncLeague::has_league_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoSyncLeague::set_has_league_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoSyncLeague::clear_has_league_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoSyncLeague::clear_league_level() {
  league_level_ = 0;
  clear_has_league_level();
}
inline ::google::protobuf::int32 ProtoSyncLeague::league_level() const {
  return league_level_;
}
inline void ProtoSyncLeague::set_league_level(::google::protobuf::int32 value) {
  set_has_league_level();
  league_level_ = value;
}

// optional int32 force = 4;
inline bool ProtoSyncLeague::has_force() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoSyncLeague::set_has_force() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoSyncLeague::clear_has_force() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoSyncLeague::clear_force() {
  force_ = 0;
  clear_has_force();
}
inline ::google::protobuf::int32 ProtoSyncLeague::force() const {
  return force_;
}
inline void ProtoSyncLeague::set_force(::google::protobuf::int32 value) {
  set_has_force();
  force_ = value;
}

// -------------------------------------------------------------------

// ProtoLeagueFighter

// optional string role_name = 1;
inline bool ProtoLeagueFighter::has_role_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoLeagueFighter::set_has_role_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoLeagueFighter::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoLeagueFighter::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& ProtoLeagueFighter::role_name() const {
  return *role_name_;
}
inline void ProtoLeagueFighter::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoLeagueFighter::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoLeagueFighter::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoLeagueFighter::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* ProtoLeagueFighter::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 role_sex = 2;
inline bool ProtoLeagueFighter::has_role_sex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoLeagueFighter::set_has_role_sex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoLeagueFighter::clear_has_role_sex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoLeagueFighter::clear_role_sex() {
  role_sex_ = 0;
  clear_has_role_sex();
}
inline ::google::protobuf::int32 ProtoLeagueFighter::role_sex() const {
  return role_sex_;
}
inline void ProtoLeagueFighter::set_role_sex(::google::protobuf::int32 value) {
  set_has_role_sex();
  role_sex_ = value;
}

// optional int32 role_level = 3;
inline bool ProtoLeagueFighter::has_role_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoLeagueFighter::set_has_role_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoLeagueFighter::clear_has_role_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoLeagueFighter::clear_role_level() {
  role_level_ = 0;
  clear_has_role_level();
}
inline ::google::protobuf::int32 ProtoLeagueFighter::role_level() const {
  return role_level_;
}
inline void ProtoLeagueFighter::set_role_level(::google::protobuf::int32 value) {
  set_has_role_level();
  role_level_ = value;
}

// -------------------------------------------------------------------

// ProtoExpRestore

// optional int32 activity_id = 1;
inline bool ProtoExpRestore::has_activity_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoExpRestore::set_has_activity_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoExpRestore::clear_has_activity_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoExpRestore::clear_activity_id() {
  activity_id_ = 0;
  clear_has_activity_id();
}
inline ::google::protobuf::int32 ProtoExpRestore::activity_id() const {
  return activity_id_;
}
inline void ProtoExpRestore::set_activity_id(::google::protobuf::int32 value) {
  set_has_activity_id();
  activity_id_ = value;
}

// optional int32 restore_count = 2;
inline bool ProtoExpRestore::has_restore_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoExpRestore::set_has_restore_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoExpRestore::clear_has_restore_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoExpRestore::clear_restore_count() {
  restore_count_ = 0;
  clear_has_restore_count();
}
inline ::google::protobuf::int32 ProtoExpRestore::restore_count() const {
  return restore_count_;
}
inline void ProtoExpRestore::set_restore_count(::google::protobuf::int32 value) {
  set_has_restore_count();
  restore_count_ = value;
}

// optional .ProtoMoney money = 3;
inline bool ProtoExpRestore::has_money() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoExpRestore::set_has_money() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoExpRestore::clear_has_money() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoExpRestore::clear_money() {
  if (money_ != NULL) money_->::ProtoMoney::Clear();
  clear_has_money();
}
inline const ::ProtoMoney& ProtoExpRestore::money() const {
  return money_ != NULL ? *money_ : *default_instance_->money_;
}
inline ::ProtoMoney* ProtoExpRestore::mutable_money() {
  set_has_money();
  if (money_ == NULL) money_ = new ::ProtoMoney;
  return money_;
}
inline ::ProtoMoney* ProtoExpRestore::release_money() {
  clear_has_money();
  ::ProtoMoney* temp = money_;
  money_ = NULL;
  return temp;
}

// optional int32 exp = 4;
inline bool ProtoExpRestore::has_exp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoExpRestore::set_has_exp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoExpRestore::clear_has_exp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoExpRestore::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 ProtoExpRestore::exp() const {
  return exp_;
}
inline void ProtoExpRestore::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// optional int32 reputation = 5;
inline bool ProtoExpRestore::has_reputation() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoExpRestore::set_has_reputation() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoExpRestore::clear_has_reputation() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoExpRestore::clear_reputation() {
  reputation_ = 0;
  clear_has_reputation();
}
inline ::google::protobuf::int32 ProtoExpRestore::reputation() const {
  return reputation_;
}
inline void ProtoExpRestore::set_reputation(::google::protobuf::int32 value) {
  set_has_reputation();
  reputation_ = value;
}

// optional int32 honour = 6;
inline bool ProtoExpRestore::has_honour() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoExpRestore::set_has_honour() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoExpRestore::clear_has_honour() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoExpRestore::clear_honour() {
  honour_ = 0;
  clear_has_honour();
}
inline ::google::protobuf::int32 ProtoExpRestore::honour() const {
  return honour_;
}
inline void ProtoExpRestore::set_honour(::google::protobuf::int32 value) {
  set_has_honour();
  honour_ = value;
}

// optional int32 exploit = 7;
inline bool ProtoExpRestore::has_exploit() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoExpRestore::set_has_exploit() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoExpRestore::clear_has_exploit() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoExpRestore::clear_exploit() {
  exploit_ = 0;
  clear_has_exploit();
}
inline ::google::protobuf::int32 ProtoExpRestore::exploit() const {
  return exploit_;
}
inline void ProtoExpRestore::set_exploit(::google::protobuf::int32 value) {
  set_has_exploit();
  exploit_ = value;
}

// optional int32 league_contri = 8;
inline bool ProtoExpRestore::has_league_contri() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoExpRestore::set_has_league_contri() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoExpRestore::clear_has_league_contri() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoExpRestore::clear_league_contri() {
  league_contri_ = 0;
  clear_has_league_contri();
}
inline ::google::protobuf::int32 ProtoExpRestore::league_contri() const {
  return league_contri_;
}
inline void ProtoExpRestore::set_league_contri(::google::protobuf::int32 value) {
  set_has_league_contri();
  league_contri_ = value;
}

// optional int32 reiki = 9;
inline bool ProtoExpRestore::has_reiki() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProtoExpRestore::set_has_reiki() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProtoExpRestore::clear_has_reiki() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProtoExpRestore::clear_reiki() {
  reiki_ = 0;
  clear_has_reiki();
}
inline ::google::protobuf::int32 ProtoExpRestore::reiki() const {
  return reiki_;
}
inline void ProtoExpRestore::set_reiki(::google::protobuf::int32 value) {
  set_has_reiki();
  reiki_ = value;
}

// repeated int32 free_reward_list = 10;
inline int ProtoExpRestore::free_reward_list_size() const {
  return free_reward_list_.size();
}
inline void ProtoExpRestore::clear_free_reward_list() {
  free_reward_list_.Clear();
}
inline ::google::protobuf::int32 ProtoExpRestore::free_reward_list(int index) const {
  return free_reward_list_.Get(index);
}
inline void ProtoExpRestore::set_free_reward_list(int index, ::google::protobuf::int32 value) {
  free_reward_list_.Set(index, value);
}
inline void ProtoExpRestore::add_free_reward_list(::google::protobuf::int32 value) {
  free_reward_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProtoExpRestore::free_reward_list() const {
  return free_reward_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProtoExpRestore::mutable_free_reward_list() {
  return &free_reward_list_;
}

// repeated int32 money_reward_list = 11;
inline int ProtoExpRestore::money_reward_list_size() const {
  return money_reward_list_.size();
}
inline void ProtoExpRestore::clear_money_reward_list() {
  money_reward_list_.Clear();
}
inline ::google::protobuf::int32 ProtoExpRestore::money_reward_list(int index) const {
  return money_reward_list_.Get(index);
}
inline void ProtoExpRestore::set_money_reward_list(int index, ::google::protobuf::int32 value) {
  money_reward_list_.Set(index, value);
}
inline void ProtoExpRestore::add_money_reward_list(::google::protobuf::int32 value) {
  money_reward_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProtoExpRestore::money_reward_list() const {
  return money_reward_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProtoExpRestore::mutable_money_reward_list() {
  return &money_reward_list_;
}

// optional int32 free_rate = 12;
inline bool ProtoExpRestore::has_free_rate() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ProtoExpRestore::set_has_free_rate() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ProtoExpRestore::clear_has_free_rate() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ProtoExpRestore::clear_free_rate() {
  free_rate_ = 0;
  clear_has_free_rate();
}
inline ::google::protobuf::int32 ProtoExpRestore::free_rate() const {
  return free_rate_;
}
inline void ProtoExpRestore::set_free_rate(::google::protobuf::int32 value) {
  set_has_free_rate();
  free_rate_ = value;
}

// optional int32 need_money = 13;
inline bool ProtoExpRestore::has_need_money() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ProtoExpRestore::set_has_need_money() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ProtoExpRestore::clear_has_need_money() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ProtoExpRestore::clear_need_money() {
  need_money_ = 0;
  clear_has_need_money();
}
inline ::google::protobuf::int32 ProtoExpRestore::need_money() const {
  return need_money_;
}
inline void ProtoExpRestore::set_need_money(::google::protobuf::int32 value) {
  set_has_need_money();
  need_money_ = value;
}

// optional int32 open_level = 14;
inline bool ProtoExpRestore::has_open_level() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ProtoExpRestore::set_has_open_level() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ProtoExpRestore::clear_has_open_level() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ProtoExpRestore::clear_open_level() {
  open_level_ = 0;
  clear_has_open_level();
}
inline ::google::protobuf::int32 ProtoExpRestore::open_level() const {
  return open_level_;
}
inline void ProtoExpRestore::set_open_level(::google::protobuf::int32 value) {
  set_has_open_level();
  open_level_ = value;
}

// optional int32 vip_limit = 15;
inline bool ProtoExpRestore::has_vip_limit() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ProtoExpRestore::set_has_vip_limit() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ProtoExpRestore::clear_has_vip_limit() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ProtoExpRestore::clear_vip_limit() {
  vip_limit_ = 0;
  clear_has_vip_limit();
}
inline ::google::protobuf::int32 ProtoExpRestore::vip_limit() const {
  return vip_limit_;
}
inline void ProtoExpRestore::set_vip_limit(::google::protobuf::int32 value) {
  set_has_vip_limit();
  vip_limit_ = value;
}

// optional int32 show_index = 16;
inline bool ProtoExpRestore::has_show_index() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ProtoExpRestore::set_has_show_index() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ProtoExpRestore::clear_has_show_index() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ProtoExpRestore::clear_show_index() {
  show_index_ = 0;
  clear_has_show_index();
}
inline ::google::protobuf::int32 ProtoExpRestore::show_index() const {
  return show_index_;
}
inline void ProtoExpRestore::set_show_index(::google::protobuf::int32 value) {
  set_has_show_index();
  show_index_ = value;
}

// -------------------------------------------------------------------

// ProtoLMRole

// optional int32 rank_index = 1;
inline bool ProtoLMRole::has_rank_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoLMRole::set_has_rank_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoLMRole::clear_has_rank_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoLMRole::clear_rank_index() {
  rank_index_ = 0;
  clear_has_rank_index();
}
inline ::google::protobuf::int32 ProtoLMRole::rank_index() const {
  return rank_index_;
}
inline void ProtoLMRole::set_rank_index(::google::protobuf::int32 value) {
  set_has_rank_index();
  rank_index_ = value;
}

// optional int64 role_id = 2;
inline bool ProtoLMRole::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoLMRole::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoLMRole::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoLMRole::clear_role_id() {
  role_id_ = GOOGLE_LONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::int64 ProtoLMRole::role_id() const {
  return role_id_;
}
inline void ProtoLMRole::set_role_id(::google::protobuf::int64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string role_name = 3;
inline bool ProtoLMRole::has_role_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoLMRole::set_has_role_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoLMRole::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoLMRole::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& ProtoLMRole::role_name() const {
  return *role_name_;
}
inline void ProtoLMRole::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoLMRole::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoLMRole::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoLMRole::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* ProtoLMRole::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string league_name = 4;
inline bool ProtoLMRole::has_league_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoLMRole::set_has_league_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoLMRole::clear_has_league_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoLMRole::clear_league_name() {
  if (league_name_ != &::google::protobuf::internal::kEmptyString) {
    league_name_->clear();
  }
  clear_has_league_name();
}
inline const ::std::string& ProtoLMRole::league_name() const {
  return *league_name_;
}
inline void ProtoLMRole::set_league_name(const ::std::string& value) {
  set_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    league_name_ = new ::std::string;
  }
  league_name_->assign(value);
}
inline void ProtoLMRole::set_league_name(const char* value) {
  set_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    league_name_ = new ::std::string;
  }
  league_name_->assign(value);
}
inline void ProtoLMRole::set_league_name(const char* value, size_t size) {
  set_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    league_name_ = new ::std::string;
  }
  league_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoLMRole::mutable_league_name() {
  set_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    league_name_ = new ::std::string;
  }
  return league_name_;
}
inline ::std::string* ProtoLMRole::release_league_name() {
  clear_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = league_name_;
    league_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 role_force = 5;
inline bool ProtoLMRole::has_role_force() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoLMRole::set_has_role_force() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoLMRole::clear_has_role_force() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoLMRole::clear_role_force() {
  role_force_ = 0;
  clear_has_role_force();
}
inline ::google::protobuf::int32 ProtoLMRole::role_force() const {
  return role_force_;
}
inline void ProtoLMRole::set_role_force(::google::protobuf::int32 value) {
  set_has_role_force();
  role_force_ = value;
}

// optional int32 fight_score = 6;
inline bool ProtoLMRole::has_fight_score() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoLMRole::set_has_fight_score() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoLMRole::clear_has_fight_score() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoLMRole::clear_fight_score() {
  fight_score_ = 0;
  clear_has_fight_score();
}
inline ::google::protobuf::int32 ProtoLMRole::fight_score() const {
  return fight_score_;
}
inline void ProtoLMRole::set_fight_score(::google::protobuf::int32 value) {
  set_has_fight_score();
  fight_score_ = value;
}

// optional int32 sex = 7;
inline bool ProtoLMRole::has_sex() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoLMRole::set_has_sex() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoLMRole::clear_has_sex() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoLMRole::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 ProtoLMRole::sex() const {
  return sex_;
}
inline void ProtoLMRole::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// optional int32 level = 8;
inline bool ProtoLMRole::has_level() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoLMRole::set_has_level() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoLMRole::clear_has_level() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoLMRole::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ProtoLMRole::level() const {
  return level_;
}
inline void ProtoLMRole::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// ProtoMarLeague

// optional int32 rank = 1;
inline bool ProtoMarLeague::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoMarLeague::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoMarLeague::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoMarLeague::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 ProtoMarLeague::rank() const {
  return rank_;
}
inline void ProtoMarLeague::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional int64 league_id = 2;
inline bool ProtoMarLeague::has_league_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoMarLeague::set_has_league_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoMarLeague::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoMarLeague::clear_league_id() {
  league_id_ = GOOGLE_LONGLONG(0);
  clear_has_league_id();
}
inline ::google::protobuf::int64 ProtoMarLeague::league_id() const {
  return league_id_;
}
inline void ProtoMarLeague::set_league_id(::google::protobuf::int64 value) {
  set_has_league_id();
  league_id_ = value;
}

// optional string leader_name = 3;
inline bool ProtoMarLeague::has_leader_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoMarLeague::set_has_leader_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoMarLeague::clear_has_leader_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoMarLeague::clear_leader_name() {
  if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
    leader_name_->clear();
  }
  clear_has_leader_name();
}
inline const ::std::string& ProtoMarLeague::leader_name() const {
  return *leader_name_;
}
inline void ProtoMarLeague::set_leader_name(const ::std::string& value) {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    leader_name_ = new ::std::string;
  }
  leader_name_->assign(value);
}
inline void ProtoMarLeague::set_leader_name(const char* value) {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    leader_name_ = new ::std::string;
  }
  leader_name_->assign(value);
}
inline void ProtoMarLeague::set_leader_name(const char* value, size_t size) {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    leader_name_ = new ::std::string;
  }
  leader_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoMarLeague::mutable_leader_name() {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    leader_name_ = new ::std::string;
  }
  return leader_name_;
}
inline ::std::string* ProtoMarLeague::release_leader_name() {
  clear_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = leader_name_;
    leader_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string league_name = 4;
inline bool ProtoMarLeague::has_league_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoMarLeague::set_has_league_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoMarLeague::clear_has_league_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoMarLeague::clear_league_name() {
  if (league_name_ != &::google::protobuf::internal::kEmptyString) {
    league_name_->clear();
  }
  clear_has_league_name();
}
inline const ::std::string& ProtoMarLeague::league_name() const {
  return *league_name_;
}
inline void ProtoMarLeague::set_league_name(const ::std::string& value) {
  set_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    league_name_ = new ::std::string;
  }
  league_name_->assign(value);
}
inline void ProtoMarLeague::set_league_name(const char* value) {
  set_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    league_name_ = new ::std::string;
  }
  league_name_->assign(value);
}
inline void ProtoMarLeague::set_league_name(const char* value, size_t size) {
  set_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    league_name_ = new ::std::string;
  }
  league_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoMarLeague::mutable_league_name() {
  set_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    league_name_ = new ::std::string;
  }
  return league_name_;
}
inline ::std::string* ProtoMarLeague::release_league_name() {
  clear_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = league_name_;
    league_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 league_force = 5;
inline bool ProtoMarLeague::has_league_force() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoMarLeague::set_has_league_force() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoMarLeague::clear_has_league_force() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoMarLeague::clear_league_force() {
  league_force_ = 0;
  clear_has_league_force();
}
inline ::google::protobuf::int32 ProtoMarLeague::league_force() const {
  return league_force_;
}
inline void ProtoMarLeague::set_league_force(::google::protobuf::int32 value) {
  set_has_league_force();
  league_force_ = value;
}

// optional int32 league_score = 6;
inline bool ProtoMarLeague::has_league_score() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoMarLeague::set_has_league_score() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoMarLeague::clear_has_league_score() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoMarLeague::clear_league_score() {
  league_score_ = 0;
  clear_has_league_score();
}
inline ::google::protobuf::int32 ProtoMarLeague::league_score() const {
  return league_score_;
}
inline void ProtoMarLeague::set_league_score(::google::protobuf::int32 value) {
  set_has_league_score();
  league_score_ = value;
}

// -------------------------------------------------------------------

// ProtoRoleInfo

// optional int64 role_id = 1;
inline bool ProtoRoleInfo::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoRoleInfo::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoRoleInfo::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoRoleInfo::clear_role_id() {
  role_id_ = GOOGLE_LONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::int64 ProtoRoleInfo::role_id() const {
  return role_id_;
}
inline void ProtoRoleInfo::set_role_id(::google::protobuf::int64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string role_name = 2;
inline bool ProtoRoleInfo::has_role_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoRoleInfo::set_has_role_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoRoleInfo::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoRoleInfo::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& ProtoRoleInfo::role_name() const {
  return *role_name_;
}
inline void ProtoRoleInfo::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoRoleInfo::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoRoleInfo::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoRoleInfo::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* ProtoRoleInfo::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 role_sex = 3;
inline bool ProtoRoleInfo::has_role_sex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoRoleInfo::set_has_role_sex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoRoleInfo::clear_has_role_sex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoRoleInfo::clear_role_sex() {
  role_sex_ = 0;
  clear_has_role_sex();
}
inline ::google::protobuf::int32 ProtoRoleInfo::role_sex() const {
  return role_sex_;
}
inline void ProtoRoleInfo::set_role_sex(::google::protobuf::int32 value) {
  set_has_role_sex();
  role_sex_ = value;
}

// optional int32 role_force = 4;
inline bool ProtoRoleInfo::has_role_force() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoRoleInfo::set_has_role_force() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoRoleInfo::clear_has_role_force() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoRoleInfo::clear_role_force() {
  role_force_ = 0;
  clear_has_role_force();
}
inline ::google::protobuf::int32 ProtoRoleInfo::role_force() const {
  return role_force_;
}
inline void ProtoRoleInfo::set_role_force(::google::protobuf::int32 value) {
  set_has_role_force();
  role_force_ = value;
}

// optional int32 vip_type = 5;
inline bool ProtoRoleInfo::has_vip_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoRoleInfo::set_has_vip_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoRoleInfo::clear_has_vip_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoRoleInfo::clear_vip_type() {
  vip_type_ = 0;
  clear_has_vip_type();
}
inline ::google::protobuf::int32 ProtoRoleInfo::vip_type() const {
  return vip_type_;
}
inline void ProtoRoleInfo::set_vip_type(::google::protobuf::int32 value) {
  set_has_vip_type();
  vip_type_ = value;
}

// optional int32 label_id = 6;
inline bool ProtoRoleInfo::has_label_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoRoleInfo::set_has_label_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoRoleInfo::clear_has_label_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoRoleInfo::clear_label_id() {
  label_id_ = 0;
  clear_has_label_id();
}
inline ::google::protobuf::int32 ProtoRoleInfo::label_id() const {
  return label_id_;
}
inline void ProtoRoleInfo::set_label_id(::google::protobuf::int32 value) {
  set_has_label_id();
  label_id_ = value;
}

// optional int32 role_level = 7;
inline bool ProtoRoleInfo::has_role_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoRoleInfo::set_has_role_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoRoleInfo::clear_has_role_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoRoleInfo::clear_role_level() {
  role_level_ = 0;
  clear_has_role_level();
}
inline ::google::protobuf::int32 ProtoRoleInfo::role_level() const {
  return role_level_;
}
inline void ProtoRoleInfo::set_role_level(::google::protobuf::int32 value) {
  set_has_role_level();
  role_level_ = value;
}

// optional int64 league_id = 8;
inline bool ProtoRoleInfo::has_league_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoRoleInfo::set_has_league_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoRoleInfo::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoRoleInfo::clear_league_id() {
  league_id_ = GOOGLE_LONGLONG(0);
  clear_has_league_id();
}
inline ::google::protobuf::int64 ProtoRoleInfo::league_id() const {
  return league_id_;
}
inline void ProtoRoleInfo::set_league_id(::google::protobuf::int64 value) {
  set_has_league_id();
  league_id_ = value;
}

// optional string league_name = 9;
inline bool ProtoRoleInfo::has_league_name() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProtoRoleInfo::set_has_league_name() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProtoRoleInfo::clear_has_league_name() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProtoRoleInfo::clear_league_name() {
  if (league_name_ != &::google::protobuf::internal::kEmptyString) {
    league_name_->clear();
  }
  clear_has_league_name();
}
inline const ::std::string& ProtoRoleInfo::league_name() const {
  return *league_name_;
}
inline void ProtoRoleInfo::set_league_name(const ::std::string& value) {
  set_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    league_name_ = new ::std::string;
  }
  league_name_->assign(value);
}
inline void ProtoRoleInfo::set_league_name(const char* value) {
  set_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    league_name_ = new ::std::string;
  }
  league_name_->assign(value);
}
inline void ProtoRoleInfo::set_league_name(const char* value, size_t size) {
  set_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    league_name_ = new ::std::string;
  }
  league_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoRoleInfo::mutable_league_name() {
  set_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    league_name_ = new ::std::string;
  }
  return league_name_;
}
inline ::std::string* ProtoRoleInfo::release_league_name() {
  clear_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = league_name_;
    league_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 role_career = 10;
inline bool ProtoRoleInfo::has_role_career() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProtoRoleInfo::set_has_role_career() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ProtoRoleInfo::clear_has_role_career() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ProtoRoleInfo::clear_role_career() {
  role_career_ = 0;
  clear_has_role_career();
}
inline ::google::protobuf::int32 ProtoRoleInfo::role_career() const {
  return role_career_;
}
inline void ProtoRoleInfo::set_role_career(::google::protobuf::int32 value) {
  set_has_role_career();
  role_career_ = value;
}

// optional int32 role_wing = 11;
inline bool ProtoRoleInfo::has_role_wing() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ProtoRoleInfo::set_has_role_wing() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ProtoRoleInfo::clear_has_role_wing() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ProtoRoleInfo::clear_role_wing() {
  role_wing_ = 0;
  clear_has_role_wing();
}
inline ::google::protobuf::int32 ProtoRoleInfo::role_wing() const {
  return role_wing_;
}
inline void ProtoRoleInfo::set_role_wing(::google::protobuf::int32 value) {
  set_has_role_wing();
  role_wing_ = value;
}

// optional int32 role_solider = 12;
inline bool ProtoRoleInfo::has_role_solider() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ProtoRoleInfo::set_has_role_solider() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ProtoRoleInfo::clear_has_role_solider() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ProtoRoleInfo::clear_role_solider() {
  role_solider_ = 0;
  clear_has_role_solider();
}
inline ::google::protobuf::int32 ProtoRoleInfo::role_solider() const {
  return role_solider_;
}
inline void ProtoRoleInfo::set_role_solider(::google::protobuf::int32 value) {
  set_has_role_solider();
  role_solider_ = value;
}

// -------------------------------------------------------------------

// ProtoRankRecord

// optional int32 cur_rank = 1;
inline bool ProtoRankRecord::has_cur_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoRankRecord::set_has_cur_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoRankRecord::clear_has_cur_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoRankRecord::clear_cur_rank() {
  cur_rank_ = 0;
  clear_has_cur_rank();
}
inline ::google::protobuf::int32 ProtoRankRecord::cur_rank() const {
  return cur_rank_;
}
inline void ProtoRankRecord::set_cur_rank(::google::protobuf::int32 value) {
  set_has_cur_rank();
  cur_rank_ = value;
}

// optional int32 last_rank = 2;
inline bool ProtoRankRecord::has_last_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoRankRecord::set_has_last_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoRankRecord::clear_has_last_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoRankRecord::clear_last_rank() {
  last_rank_ = 0;
  clear_has_last_rank();
}
inline ::google::protobuf::int32 ProtoRankRecord::last_rank() const {
  return last_rank_;
}
inline void ProtoRankRecord::set_last_rank(::google::protobuf::int32 value) {
  set_has_last_rank();
  last_rank_ = value;
}

// optional int64 role_id = 3;
inline bool ProtoRankRecord::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoRankRecord::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoRankRecord::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoRankRecord::clear_role_id() {
  role_id_ = GOOGLE_LONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::int64 ProtoRankRecord::role_id() const {
  return role_id_;
}
inline void ProtoRankRecord::set_role_id(::google::protobuf::int64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional int32 vip_type = 4;
inline bool ProtoRankRecord::has_vip_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoRankRecord::set_has_vip_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoRankRecord::clear_has_vip_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoRankRecord::clear_vip_type() {
  vip_type_ = 0;
  clear_has_vip_type();
}
inline ::google::protobuf::int32 ProtoRankRecord::vip_type() const {
  return vip_type_;
}
inline void ProtoRankRecord::set_vip_type(::google::protobuf::int32 value) {
  set_has_vip_type();
  vip_type_ = value;
}

// optional int32 rank_value = 5;
inline bool ProtoRankRecord::has_rank_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoRankRecord::set_has_rank_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoRankRecord::clear_has_rank_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoRankRecord::clear_rank_value() {
  rank_value_ = 0;
  clear_has_rank_value();
}
inline ::google::protobuf::int32 ProtoRankRecord::rank_value() const {
  return rank_value_;
}
inline void ProtoRankRecord::set_rank_value(::google::protobuf::int32 value) {
  set_has_rank_value();
  rank_value_ = value;
}

// optional string display_content = 6;
inline bool ProtoRankRecord::has_display_content() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoRankRecord::set_has_display_content() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoRankRecord::clear_has_display_content() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoRankRecord::clear_display_content() {
  if (display_content_ != &::google::protobuf::internal::kEmptyString) {
    display_content_->clear();
  }
  clear_has_display_content();
}
inline const ::std::string& ProtoRankRecord::display_content() const {
  return *display_content_;
}
inline void ProtoRankRecord::set_display_content(const ::std::string& value) {
  set_has_display_content();
  if (display_content_ == &::google::protobuf::internal::kEmptyString) {
    display_content_ = new ::std::string;
  }
  display_content_->assign(value);
}
inline void ProtoRankRecord::set_display_content(const char* value) {
  set_has_display_content();
  if (display_content_ == &::google::protobuf::internal::kEmptyString) {
    display_content_ = new ::std::string;
  }
  display_content_->assign(value);
}
inline void ProtoRankRecord::set_display_content(const char* value, size_t size) {
  set_has_display_content();
  if (display_content_ == &::google::protobuf::internal::kEmptyString) {
    display_content_ = new ::std::string;
  }
  display_content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoRankRecord::mutable_display_content() {
  set_has_display_content();
  if (display_content_ == &::google::protobuf::internal::kEmptyString) {
    display_content_ = new ::std::string;
  }
  return display_content_;
}
inline ::std::string* ProtoRankRecord::release_display_content() {
  clear_has_display_content();
  if (display_content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = display_content_;
    display_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string league_name = 7;
inline bool ProtoRankRecord::has_league_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoRankRecord::set_has_league_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoRankRecord::clear_has_league_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoRankRecord::clear_league_name() {
  if (league_name_ != &::google::protobuf::internal::kEmptyString) {
    league_name_->clear();
  }
  clear_has_league_name();
}
inline const ::std::string& ProtoRankRecord::league_name() const {
  return *league_name_;
}
inline void ProtoRankRecord::set_league_name(const ::std::string& value) {
  set_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    league_name_ = new ::std::string;
  }
  league_name_->assign(value);
}
inline void ProtoRankRecord::set_league_name(const char* value) {
  set_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    league_name_ = new ::std::string;
  }
  league_name_->assign(value);
}
inline void ProtoRankRecord::set_league_name(const char* value, size_t size) {
  set_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    league_name_ = new ::std::string;
  }
  league_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoRankRecord::mutable_league_name() {
  set_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    league_name_ = new ::std::string;
  }
  return league_name_;
}
inline ::std::string* ProtoRankRecord::release_league_name() {
  clear_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = league_name_;
    league_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 additional_id = 8;
inline bool ProtoRankRecord::has_additional_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoRankRecord::set_has_additional_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoRankRecord::clear_has_additional_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoRankRecord::clear_additional_id() {
  additional_id_ = GOOGLE_LONGLONG(0);
  clear_has_additional_id();
}
inline ::google::protobuf::int64 ProtoRankRecord::additional_id() const {
  return additional_id_;
}
inline void ProtoRankRecord::set_additional_id(::google::protobuf::int64 value) {
  set_has_additional_id();
  additional_id_ = value;
}

// optional int64 worship_num = 9;
inline bool ProtoRankRecord::has_worship_num() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProtoRankRecord::set_has_worship_num() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProtoRankRecord::clear_has_worship_num() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProtoRankRecord::clear_worship_num() {
  worship_num_ = GOOGLE_LONGLONG(0);
  clear_has_worship_num();
}
inline ::google::protobuf::int64 ProtoRankRecord::worship_num() const {
  return worship_num_;
}
inline void ProtoRankRecord::set_worship_num(::google::protobuf::int64 value) {
  set_has_worship_num();
  worship_num_ = value;
}

// optional int32 is_worship = 10;
inline bool ProtoRankRecord::has_is_worship() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProtoRankRecord::set_has_is_worship() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ProtoRankRecord::clear_has_is_worship() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ProtoRankRecord::clear_is_worship() {
  is_worship_ = 0;
  clear_has_is_worship();
}
inline ::google::protobuf::int32 ProtoRankRecord::is_worship() const {
  return is_worship_;
}
inline void ProtoRankRecord::set_is_worship(::google::protobuf::int32 value) {
  set_has_is_worship();
  is_worship_ = value;
}

// -------------------------------------------------------------------

// ProtoFBReadyInfo

// optional int64 role_id = 1;
inline bool ProtoFBReadyInfo::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoFBReadyInfo::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoFBReadyInfo::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoFBReadyInfo::clear_role_id() {
  role_id_ = GOOGLE_LONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::int64 ProtoFBReadyInfo::role_id() const {
  return role_id_;
}
inline void ProtoFBReadyInfo::set_role_id(::google::protobuf::int64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional bool is_ready = 2;
inline bool ProtoFBReadyInfo::has_is_ready() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoFBReadyInfo::set_has_is_ready() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoFBReadyInfo::clear_has_is_ready() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoFBReadyInfo::clear_is_ready() {
  is_ready_ = false;
  clear_has_is_ready();
}
inline bool ProtoFBReadyInfo::is_ready() const {
  return is_ready_;
}
inline void ProtoFBReadyInfo::set_is_ready(bool value) {
  set_has_is_ready();
  is_ready_ = value;
}

// -------------------------------------------------------------------

// ProtoFightPro

// optional int32 hit = 1;
inline bool ProtoFightPro::has_hit() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoFightPro::set_has_hit() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoFightPro::clear_has_hit() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoFightPro::clear_hit() {
  hit_ = 0;
  clear_has_hit();
}
inline ::google::protobuf::int32 ProtoFightPro::hit() const {
  return hit_;
}
inline void ProtoFightPro::set_hit(::google::protobuf::int32 value) {
  set_has_hit();
  hit_ = value;
}

// optional int32 avoid = 2;
inline bool ProtoFightPro::has_avoid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoFightPro::set_has_avoid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoFightPro::clear_has_avoid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoFightPro::clear_avoid() {
  avoid_ = 0;
  clear_has_avoid();
}
inline ::google::protobuf::int32 ProtoFightPro::avoid() const {
  return avoid_;
}
inline void ProtoFightPro::set_avoid(::google::protobuf::int32 value) {
  set_has_avoid();
  avoid_ = value;
}

// optional int32 crit = 3;
inline bool ProtoFightPro::has_crit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoFightPro::set_has_crit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoFightPro::clear_has_crit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoFightPro::clear_crit() {
  crit_ = 0;
  clear_has_crit();
}
inline ::google::protobuf::int32 ProtoFightPro::crit() const {
  return crit_;
}
inline void ProtoFightPro::set_crit(::google::protobuf::int32 value) {
  set_has_crit();
  crit_ = value;
}

// optional int32 toughness = 4;
inline bool ProtoFightPro::has_toughness() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoFightPro::set_has_toughness() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoFightPro::clear_has_toughness() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoFightPro::clear_toughness() {
  toughness_ = 0;
  clear_has_toughness();
}
inline ::google::protobuf::int32 ProtoFightPro::toughness() const {
  return toughness_;
}
inline void ProtoFightPro::set_toughness(::google::protobuf::int32 value) {
  set_has_toughness();
  toughness_ = value;
}

// optional int32 speed = 5;
inline bool ProtoFightPro::has_speed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoFightPro::set_has_speed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoFightPro::clear_has_speed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoFightPro::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline ::google::protobuf::int32 ProtoFightPro::speed() const {
  return speed_;
}
inline void ProtoFightPro::set_speed(::google::protobuf::int32 value) {
  set_has_speed();
  speed_ = value;
}

// optional int32 blood = 6;
inline bool ProtoFightPro::has_blood() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoFightPro::set_has_blood() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoFightPro::clear_has_blood() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoFightPro::clear_blood() {
  blood_ = 0;
  clear_has_blood();
}
inline ::google::protobuf::int32 ProtoFightPro::blood() const {
  return blood_;
}
inline void ProtoFightPro::set_blood(::google::protobuf::int32 value) {
  set_has_blood();
  blood_ = value;
}

// optional int32 blood_max = 7;
inline bool ProtoFightPro::has_blood_max() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoFightPro::set_has_blood_max() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoFightPro::clear_has_blood_max() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoFightPro::clear_blood_max() {
  blood_max_ = 0;
  clear_has_blood_max();
}
inline ::google::protobuf::int32 ProtoFightPro::blood_max() const {
  return blood_max_;
}
inline void ProtoFightPro::set_blood_max(::google::protobuf::int32 value) {
  set_has_blood_max();
  blood_max_ = value;
}

// optional int32 magic = 8;
inline bool ProtoFightPro::has_magic() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoFightPro::set_has_magic() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoFightPro::clear_has_magic() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoFightPro::clear_magic() {
  magic_ = 0;
  clear_has_magic();
}
inline ::google::protobuf::int32 ProtoFightPro::magic() const {
  return magic_;
}
inline void ProtoFightPro::set_magic(::google::protobuf::int32 value) {
  set_has_magic();
  magic_ = value;
}

// optional int32 magic_max = 9;
inline bool ProtoFightPro::has_magic_max() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProtoFightPro::set_has_magic_max() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProtoFightPro::clear_has_magic_max() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProtoFightPro::clear_magic_max() {
  magic_max_ = 0;
  clear_has_magic_max();
}
inline ::google::protobuf::int32 ProtoFightPro::magic_max() const {
  return magic_max_;
}
inline void ProtoFightPro::set_magic_max(::google::protobuf::int32 value) {
  set_has_magic_max();
  magic_max_ = value;
}

// optional int32 attack = 10;
inline bool ProtoFightPro::has_attack() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProtoFightPro::set_has_attack() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ProtoFightPro::clear_has_attack() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ProtoFightPro::clear_attack() {
  attack_ = 0;
  clear_has_attack();
}
inline ::google::protobuf::int32 ProtoFightPro::attack() const {
  return attack_;
}
inline void ProtoFightPro::set_attack(::google::protobuf::int32 value) {
  set_has_attack();
  attack_ = value;
}

// optional int32 defence = 11;
inline bool ProtoFightPro::has_defence() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ProtoFightPro::set_has_defence() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ProtoFightPro::clear_has_defence() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ProtoFightPro::clear_defence() {
  defence_ = 0;
  clear_has_defence();
}
inline ::google::protobuf::int32 ProtoFightPro::defence() const {
  return defence_;
}
inline void ProtoFightPro::set_defence(::google::protobuf::int32 value) {
  set_has_defence();
  defence_ = value;
}

// optional int32 crit_multi = 12;
inline bool ProtoFightPro::has_crit_multi() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ProtoFightPro::set_has_crit_multi() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ProtoFightPro::clear_has_crit_multi() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ProtoFightPro::clear_crit_multi() {
  crit_multi_ = 0;
  clear_has_crit_multi();
}
inline ::google::protobuf::int32 ProtoFightPro::crit_multi() const {
  return crit_multi_;
}
inline void ProtoFightPro::set_crit_multi(::google::protobuf::int32 value) {
  set_has_crit_multi();
  crit_multi_ = value;
}

// optional int32 damage_multi = 13;
inline bool ProtoFightPro::has_damage_multi() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ProtoFightPro::set_has_damage_multi() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ProtoFightPro::clear_has_damage_multi() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ProtoFightPro::clear_damage_multi() {
  damage_multi_ = 0;
  clear_has_damage_multi();
}
inline ::google::protobuf::int32 ProtoFightPro::damage_multi() const {
  return damage_multi_;
}
inline void ProtoFightPro::set_damage_multi(::google::protobuf::int32 value) {
  set_has_damage_multi();
  damage_multi_ = value;
}

// optional int32 damage = 14;
inline bool ProtoFightPro::has_damage() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ProtoFightPro::set_has_damage() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ProtoFightPro::clear_has_damage() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ProtoFightPro::clear_damage() {
  damage_ = 0;
  clear_has_damage();
}
inline ::google::protobuf::int32 ProtoFightPro::damage() const {
  return damage_;
}
inline void ProtoFightPro::set_damage(::google::protobuf::int32 value) {
  set_has_damage();
  damage_ = value;
}

// optional int32 reduction_multi = 15;
inline bool ProtoFightPro::has_reduction_multi() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ProtoFightPro::set_has_reduction_multi() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ProtoFightPro::clear_has_reduction_multi() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ProtoFightPro::clear_reduction_multi() {
  reduction_multi_ = 0;
  clear_has_reduction_multi();
}
inline ::google::protobuf::int32 ProtoFightPro::reduction_multi() const {
  return reduction_multi_;
}
inline void ProtoFightPro::set_reduction_multi(::google::protobuf::int32 value) {
  set_has_reduction_multi();
  reduction_multi_ = value;
}

// optional int32 reduction = 16;
inline bool ProtoFightPro::has_reduction() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ProtoFightPro::set_has_reduction() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ProtoFightPro::clear_has_reduction() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ProtoFightPro::clear_reduction() {
  reduction_ = 0;
  clear_has_reduction();
}
inline ::google::protobuf::int32 ProtoFightPro::reduction() const {
  return reduction_;
}
inline void ProtoFightPro::set_reduction(::google::protobuf::int32 value) {
  set_has_reduction();
  reduction_ = value;
}

// optional int32 force = 17;
inline bool ProtoFightPro::has_force() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ProtoFightPro::set_has_force() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ProtoFightPro::clear_has_force() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ProtoFightPro::clear_force() {
  force_ = 0;
  clear_has_force();
}
inline ::google::protobuf::int32 ProtoFightPro::force() const {
  return force_;
}
inline void ProtoFightPro::set_force(::google::protobuf::int32 value) {
  set_has_force();
  force_ = value;
}

// -------------------------------------------------------------------

// ProtoWarItem

// repeated .ProtoSyncLeague league_set = 1;
inline int ProtoWarItem::league_set_size() const {
  return league_set_.size();
}
inline void ProtoWarItem::clear_league_set() {
  league_set_.Clear();
}
inline const ::ProtoSyncLeague& ProtoWarItem::league_set(int index) const {
  return league_set_.Get(index);
}
inline ::ProtoSyncLeague* ProtoWarItem::mutable_league_set(int index) {
  return league_set_.Mutable(index);
}
inline ::ProtoSyncLeague* ProtoWarItem::add_league_set() {
  return league_set_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoSyncLeague >&
ProtoWarItem::league_set() const {
  return league_set_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoSyncLeague >*
ProtoWarItem::mutable_league_set() {
  return &league_set_;
}

// -------------------------------------------------------------------

// ProtoSMBattleRankRec

// optional int64 role_id = 1;
inline bool ProtoSMBattleRankRec::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoSMBattleRankRec::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoSMBattleRankRec::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoSMBattleRankRec::clear_role_id() {
  role_id_ = GOOGLE_LONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::int64 ProtoSMBattleRankRec::role_id() const {
  return role_id_;
}
inline void ProtoSMBattleRankRec::set_role_id(::google::protobuf::int64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string role_name = 2;
inline bool ProtoSMBattleRankRec::has_role_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoSMBattleRankRec::set_has_role_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoSMBattleRankRec::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoSMBattleRankRec::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& ProtoSMBattleRankRec::role_name() const {
  return *role_name_;
}
inline void ProtoSMBattleRankRec::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoSMBattleRankRec::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoSMBattleRankRec::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoSMBattleRankRec::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* ProtoSMBattleRankRec::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 sex = 3;
inline bool ProtoSMBattleRankRec::has_sex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoSMBattleRankRec::set_has_sex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoSMBattleRankRec::clear_has_sex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoSMBattleRankRec::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 ProtoSMBattleRankRec::sex() const {
  return sex_;
}
inline void ProtoSMBattleRankRec::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// optional int32 rank = 4;
inline bool ProtoSMBattleRankRec::has_rank() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoSMBattleRankRec::set_has_rank() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoSMBattleRankRec::clear_has_rank() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoSMBattleRankRec::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 ProtoSMBattleRankRec::rank() const {
  return rank_;
}
inline void ProtoSMBattleRankRec::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional int32 score = 5;
inline bool ProtoSMBattleRankRec::has_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoSMBattleRankRec::set_has_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoSMBattleRankRec::clear_has_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoSMBattleRankRec::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 ProtoSMBattleRankRec::score() const {
  return score_;
}
inline void ProtoSMBattleRankRec::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// optional int32 camp_id = 6;
inline bool ProtoSMBattleRankRec::has_camp_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoSMBattleRankRec::set_has_camp_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoSMBattleRankRec::clear_has_camp_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoSMBattleRankRec::clear_camp_id() {
  camp_id_ = 0;
  clear_has_camp_id();
}
inline ::google::protobuf::int32 ProtoSMBattleRankRec::camp_id() const {
  return camp_id_;
}
inline void ProtoSMBattleRankRec::set_camp_id(::google::protobuf::int32 value) {
  set_has_camp_id();
  camp_id_ = value;
}

// optional int32 kill = 7;
inline bool ProtoSMBattleRankRec::has_kill() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoSMBattleRankRec::set_has_kill() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoSMBattleRankRec::clear_has_kill() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoSMBattleRankRec::clear_kill() {
  kill_ = 0;
  clear_has_kill();
}
inline ::google::protobuf::int32 ProtoSMBattleRankRec::kill() const {
  return kill_;
}
inline void ProtoSMBattleRankRec::set_kill(::google::protobuf::int32 value) {
  set_has_kill();
  kill_ = value;
}

// optional int32 max_kill = 8;
inline bool ProtoSMBattleRankRec::has_max_kill() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoSMBattleRankRec::set_has_max_kill() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoSMBattleRankRec::clear_has_max_kill() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoSMBattleRankRec::clear_max_kill() {
  max_kill_ = 0;
  clear_has_max_kill();
}
inline ::google::protobuf::int32 ProtoSMBattleRankRec::max_kill() const {
  return max_kill_;
}
inline void ProtoSMBattleRankRec::set_max_kill(::google::protobuf::int32 value) {
  set_has_max_kill();
  max_kill_ = value;
}

// -------------------------------------------------------------------

// ProtoLWarItem

// optional int32 item_rank = 1;
inline bool ProtoLWarItem::has_item_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoLWarItem::set_has_item_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoLWarItem::clear_has_item_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoLWarItem::clear_item_rank() {
  item_rank_ = 0;
  clear_has_item_rank();
}
inline ::google::protobuf::int32 ProtoLWarItem::item_rank() const {
  return item_rank_;
}
inline void ProtoLWarItem::set_item_rank(::google::protobuf::int32 value) {
  set_has_item_rank();
  item_rank_ = value;
}

// optional string item_name = 2;
inline bool ProtoLWarItem::has_item_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoLWarItem::set_has_item_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoLWarItem::clear_has_item_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoLWarItem::clear_item_name() {
  if (item_name_ != &::google::protobuf::internal::kEmptyString) {
    item_name_->clear();
  }
  clear_has_item_name();
}
inline const ::std::string& ProtoLWarItem::item_name() const {
  return *item_name_;
}
inline void ProtoLWarItem::set_item_name(const ::std::string& value) {
  set_has_item_name();
  if (item_name_ == &::google::protobuf::internal::kEmptyString) {
    item_name_ = new ::std::string;
  }
  item_name_->assign(value);
}
inline void ProtoLWarItem::set_item_name(const char* value) {
  set_has_item_name();
  if (item_name_ == &::google::protobuf::internal::kEmptyString) {
    item_name_ = new ::std::string;
  }
  item_name_->assign(value);
}
inline void ProtoLWarItem::set_item_name(const char* value, size_t size) {
  set_has_item_name();
  if (item_name_ == &::google::protobuf::internal::kEmptyString) {
    item_name_ = new ::std::string;
  }
  item_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoLWarItem::mutable_item_name() {
  set_has_item_name();
  if (item_name_ == &::google::protobuf::internal::kEmptyString) {
    item_name_ = new ::std::string;
  }
  return item_name_;
}
inline ::std::string* ProtoLWarItem::release_item_name() {
  clear_has_item_name();
  if (item_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = item_name_;
    item_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 item_resource = 3;
inline bool ProtoLWarItem::has_item_resource() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoLWarItem::set_has_item_resource() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoLWarItem::clear_has_item_resource() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoLWarItem::clear_item_resource() {
  item_resource_ = 0;
  clear_has_item_resource();
}
inline ::google::protobuf::int32 ProtoLWarItem::item_resource() const {
  return item_resource_;
}
inline void ProtoLWarItem::set_item_resource(::google::protobuf::int32 value) {
  set_has_item_resource();
  item_resource_ = value;
}

// optional int64 league_id = 4;
inline bool ProtoLWarItem::has_league_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoLWarItem::set_has_league_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoLWarItem::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoLWarItem::clear_league_id() {
  league_id_ = GOOGLE_LONGLONG(0);
  clear_has_league_id();
}
inline ::google::protobuf::int64 ProtoLWarItem::league_id() const {
  return league_id_;
}
inline void ProtoLWarItem::set_league_id(::google::protobuf::int64 value) {
  set_has_league_id();
  league_id_ = value;
}

// optional int32 pixel_x = 5;
inline bool ProtoLWarItem::has_pixel_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoLWarItem::set_has_pixel_x() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoLWarItem::clear_has_pixel_x() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoLWarItem::clear_pixel_x() {
  pixel_x_ = 0;
  clear_has_pixel_x();
}
inline ::google::protobuf::int32 ProtoLWarItem::pixel_x() const {
  return pixel_x_;
}
inline void ProtoLWarItem::set_pixel_x(::google::protobuf::int32 value) {
  set_has_pixel_x();
  pixel_x_ = value;
}

// optional int32 pixel_y = 6;
inline bool ProtoLWarItem::has_pixel_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoLWarItem::set_has_pixel_y() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoLWarItem::clear_has_pixel_y() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoLWarItem::clear_pixel_y() {
  pixel_y_ = 0;
  clear_has_pixel_y();
}
inline ::google::protobuf::int32 ProtoLWarItem::pixel_y() const {
  return pixel_y_;
}
inline void ProtoLWarItem::set_pixel_y(::google::protobuf::int32 value) {
  set_has_pixel_y();
  pixel_y_ = value;
}

// -------------------------------------------------------------------

// WorldBossRank

// optional int32 role_id = 1;
inline bool WorldBossRank::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WorldBossRank::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WorldBossRank::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WorldBossRank::clear_role_id() {
  role_id_ = 0;
  clear_has_role_id();
}
inline ::google::protobuf::int32 WorldBossRank::role_id() const {
  return role_id_;
}
inline void WorldBossRank::set_role_id(::google::protobuf::int32 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string role_name = 2;
inline bool WorldBossRank::has_role_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WorldBossRank::set_has_role_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WorldBossRank::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WorldBossRank::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& WorldBossRank::role_name() const {
  return *role_name_;
}
inline void WorldBossRank::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void WorldBossRank::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void WorldBossRank::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WorldBossRank::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* WorldBossRank::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 rank = 3;
inline bool WorldBossRank::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WorldBossRank::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WorldBossRank::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WorldBossRank::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 WorldBossRank::rank() const {
  return rank_;
}
inline void WorldBossRank::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional int32 score = 4;
inline bool WorldBossRank::has_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WorldBossRank::set_has_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WorldBossRank::clear_has_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WorldBossRank::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 WorldBossRank::score() const {
  return score_;
}
inline void WorldBossRank::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// -------------------------------------------------------------------

// ProtoWorldBossRank

// optional int64 role_id = 1;
inline bool ProtoWorldBossRank::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoWorldBossRank::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoWorldBossRank::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoWorldBossRank::clear_role_id() {
  role_id_ = GOOGLE_LONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::int64 ProtoWorldBossRank::role_id() const {
  return role_id_;
}
inline void ProtoWorldBossRank::set_role_id(::google::protobuf::int64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string role_name = 2;
inline bool ProtoWorldBossRank::has_role_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoWorldBossRank::set_has_role_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoWorldBossRank::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoWorldBossRank::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& ProtoWorldBossRank::role_name() const {
  return *role_name_;
}
inline void ProtoWorldBossRank::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoWorldBossRank::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoWorldBossRank::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoWorldBossRank::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* ProtoWorldBossRank::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 rank = 3;
inline bool ProtoWorldBossRank::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoWorldBossRank::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoWorldBossRank::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoWorldBossRank::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 ProtoWorldBossRank::rank() const {
  return rank_;
}
inline void ProtoWorldBossRank::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional double score = 4;
inline bool ProtoWorldBossRank::has_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoWorldBossRank::set_has_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoWorldBossRank::clear_has_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoWorldBossRank::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline double ProtoWorldBossRank::score() const {
  return score_;
}
inline void ProtoWorldBossRank::set_score(double value) {
  set_has_score();
  score_ = value;
}

// -------------------------------------------------------------------

// ProtoShoutDetail

// optional int32 parse_type = 1;
inline bool ProtoShoutDetail::has_parse_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoShoutDetail::set_has_parse_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoShoutDetail::clear_has_parse_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoShoutDetail::clear_parse_type() {
  parse_type_ = 0;
  clear_has_parse_type();
}
inline ::google::protobuf::int32 ProtoShoutDetail::parse_type() const {
  return parse_type_;
}
inline void ProtoShoutDetail::set_parse_type(::google::protobuf::int32 value) {
  set_has_parse_type();
  parse_type_ = value;
}

// optional int32 single_value = 2;
inline bool ProtoShoutDetail::has_single_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoShoutDetail::set_has_single_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoShoutDetail::clear_has_single_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoShoutDetail::clear_single_value() {
  single_value_ = 0;
  clear_has_single_value();
}
inline ::google::protobuf::int32 ProtoShoutDetail::single_value() const {
  return single_value_;
}
inline void ProtoShoutDetail::set_single_value(::google::protobuf::int32 value) {
  set_has_single_value();
  single_value_ = value;
}

// optional int64 single_id = 3;
inline bool ProtoShoutDetail::has_single_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoShoutDetail::set_has_single_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoShoutDetail::clear_has_single_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoShoutDetail::clear_single_id() {
  single_id_ = GOOGLE_LONGLONG(0);
  clear_has_single_id();
}
inline ::google::protobuf::int64 ProtoShoutDetail::single_id() const {
  return single_id_;
}
inline void ProtoShoutDetail::set_single_id(::google::protobuf::int64 value) {
  set_has_single_id();
  single_id_ = value;
}

// optional string single_content = 4;
inline bool ProtoShoutDetail::has_single_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoShoutDetail::set_has_single_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoShoutDetail::clear_has_single_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoShoutDetail::clear_single_content() {
  if (single_content_ != &::google::protobuf::internal::kEmptyString) {
    single_content_->clear();
  }
  clear_has_single_content();
}
inline const ::std::string& ProtoShoutDetail::single_content() const {
  return *single_content_;
}
inline void ProtoShoutDetail::set_single_content(const ::std::string& value) {
  set_has_single_content();
  if (single_content_ == &::google::protobuf::internal::kEmptyString) {
    single_content_ = new ::std::string;
  }
  single_content_->assign(value);
}
inline void ProtoShoutDetail::set_single_content(const char* value) {
  set_has_single_content();
  if (single_content_ == &::google::protobuf::internal::kEmptyString) {
    single_content_ = new ::std::string;
  }
  single_content_->assign(value);
}
inline void ProtoShoutDetail::set_single_content(const char* value, size_t size) {
  set_has_single_content();
  if (single_content_ == &::google::protobuf::internal::kEmptyString) {
    single_content_ = new ::std::string;
  }
  single_content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoShoutDetail::mutable_single_content() {
  set_has_single_content();
  if (single_content_ == &::google::protobuf::internal::kEmptyString) {
    single_content_ = new ::std::string;
  }
  return single_content_;
}
inline ::std::string* ProtoShoutDetail::release_single_content() {
  clear_has_single_content();
  if (single_content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = single_content_;
    single_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .ProtoBrocastRole role_info = 5;
inline bool ProtoShoutDetail::has_role_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoShoutDetail::set_has_role_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoShoutDetail::clear_has_role_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoShoutDetail::clear_role_info() {
  if (role_info_ != NULL) role_info_->::ProtoBrocastRole::Clear();
  clear_has_role_info();
}
inline const ::ProtoBrocastRole& ProtoShoutDetail::role_info() const {
  return role_info_ != NULL ? *role_info_ : *default_instance_->role_info_;
}
inline ::ProtoBrocastRole* ProtoShoutDetail::mutable_role_info() {
  set_has_role_info();
  if (role_info_ == NULL) role_info_ = new ::ProtoBrocastRole;
  return role_info_;
}
inline ::ProtoBrocastRole* ProtoShoutDetail::release_role_info() {
  clear_has_role_info();
  ::ProtoBrocastRole* temp = role_info_;
  role_info_ = NULL;
  return temp;
}

// optional .ProtoShoutItem item_tips = 6;
inline bool ProtoShoutDetail::has_item_tips() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoShoutDetail::set_has_item_tips() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoShoutDetail::clear_has_item_tips() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoShoutDetail::clear_item_tips() {
  if (item_tips_ != NULL) item_tips_->::ProtoShoutItem::Clear();
  clear_has_item_tips();
}
inline const ::ProtoShoutItem& ProtoShoutDetail::item_tips() const {
  return item_tips_ != NULL ? *item_tips_ : *default_instance_->item_tips_;
}
inline ::ProtoShoutItem* ProtoShoutDetail::mutable_item_tips() {
  set_has_item_tips();
  if (item_tips_ == NULL) item_tips_ = new ::ProtoShoutItem;
  return item_tips_;
}
inline ::ProtoShoutItem* ProtoShoutDetail::release_item_tips() {
  clear_has_item_tips();
  ::ProtoShoutItem* temp = item_tips_;
  item_tips_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// ProtoTreasure

// optional int32 coord_x = 1;
inline bool ProtoTreasure::has_coord_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoTreasure::set_has_coord_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoTreasure::clear_has_coord_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoTreasure::clear_coord_x() {
  coord_x_ = 0;
  clear_has_coord_x();
}
inline ::google::protobuf::int32 ProtoTreasure::coord_x() const {
  return coord_x_;
}
inline void ProtoTreasure::set_coord_x(::google::protobuf::int32 value) {
  set_has_coord_x();
  coord_x_ = value;
}

// optional int32 coord_y = 2;
inline bool ProtoTreasure::has_coord_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoTreasure::set_has_coord_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoTreasure::clear_has_coord_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoTreasure::clear_coord_y() {
  coord_y_ = 0;
  clear_has_coord_y();
}
inline ::google::protobuf::int32 ProtoTreasure::coord_y() const {
  return coord_y_;
}
inline void ProtoTreasure::set_coord_y(::google::protobuf::int32 value) {
  set_has_coord_y();
  coord_y_ = value;
}

// optional int32 map_index = 3;
inline bool ProtoTreasure::has_map_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoTreasure::set_has_map_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoTreasure::clear_has_map_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoTreasure::clear_map_index() {
  map_index_ = 0;
  clear_has_map_index();
}
inline ::google::protobuf::int32 ProtoTreasure::map_index() const {
  return map_index_;
}
inline void ProtoTreasure::set_map_index(::google::protobuf::int32 value) {
  set_has_map_index();
  map_index_ = value;
}

// optional int32 state = 4;
inline bool ProtoTreasure::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoTreasure::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoTreasure::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoTreasure::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 ProtoTreasure::state() const {
  return state_;
}
inline void ProtoTreasure::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// -------------------------------------------------------------------

// ProtoScriptClean

// optional int32 script_sort = 1;
inline bool ProtoScriptClean::has_script_sort() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoScriptClean::set_has_script_sort() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoScriptClean::clear_has_script_sort() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoScriptClean::clear_script_sort() {
  script_sort_ = 0;
  clear_has_script_sort();
}
inline ::google::protobuf::int32 ProtoScriptClean::script_sort() const {
  return script_sort_;
}
inline void ProtoScriptClean::set_script_sort(::google::protobuf::int32 value) {
  set_has_script_sort();
  script_sort_ = value;
}

// optional int32 script_times = 2;
inline bool ProtoScriptClean::has_script_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoScriptClean::set_has_script_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoScriptClean::clear_has_script_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoScriptClean::clear_script_times() {
  script_times_ = 0;
  clear_has_script_times();
}
inline ::google::protobuf::int32 ProtoScriptClean::script_times() const {
  return script_times_;
}
inline void ProtoScriptClean::set_script_times(::google::protobuf::int32 value) {
  set_has_script_times();
  script_times_ = value;
}

// optional int32 chapter_key = 3;
inline bool ProtoScriptClean::has_chapter_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoScriptClean::set_has_chapter_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoScriptClean::clear_has_chapter_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoScriptClean::clear_chapter_key() {
  chapter_key_ = 0;
  clear_has_chapter_key();
}
inline ::google::protobuf::int32 ProtoScriptClean::chapter_key() const {
  return chapter_key_;
}
inline void ProtoScriptClean::set_chapter_key(::google::protobuf::int32 value) {
  set_has_chapter_key();
  chapter_key_ = value;
}

// optional int32 script_use_tick = 4;
inline bool ProtoScriptClean::has_script_use_tick() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoScriptClean::set_has_script_use_tick() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoScriptClean::clear_has_script_use_tick() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoScriptClean::clear_script_use_tick() {
  script_use_tick_ = 0;
  clear_has_script_use_tick();
}
inline ::google::protobuf::int32 ProtoScriptClean::script_use_tick() const {
  return script_use_tick_;
}
inline void ProtoScriptClean::set_script_use_tick(::google::protobuf::int32 value) {
  set_has_script_use_tick();
  script_use_tick_ = value;
}

// optional int32 protect_beast_index = 5;
inline bool ProtoScriptClean::has_protect_beast_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoScriptClean::set_has_protect_beast_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoScriptClean::clear_has_protect_beast_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoScriptClean::clear_protect_beast_index() {
  protect_beast_index_ = 0;
  clear_has_protect_beast_index();
}
inline ::google::protobuf::int32 ProtoScriptClean::protect_beast_index() const {
  return protect_beast_index_;
}
inline void ProtoScriptClean::set_protect_beast_index(::google::protobuf::int32 value) {
  set_has_protect_beast_index();
  protect_beast_index_ = value;
}

// optional int32 reset_times = 6;
inline bool ProtoScriptClean::has_reset_times() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoScriptClean::set_has_reset_times() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoScriptClean::clear_has_reset_times() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoScriptClean::clear_reset_times() {
  reset_times_ = 0;
  clear_has_reset_times();
}
inline ::google::protobuf::int32 ProtoScriptClean::reset_times() const {
  return reset_times_;
}
inline void ProtoScriptClean::set_reset_times(::google::protobuf::int32 value) {
  set_has_reset_times();
  reset_times_ = value;
}

// -------------------------------------------------------------------

// ProtoHookDetail

// optional int32 kill_task_monster = 1;
inline bool ProtoHookDetail::has_kill_task_monster() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoHookDetail::set_has_kill_task_monster() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoHookDetail::clear_has_kill_task_monster() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoHookDetail::clear_kill_task_monster() {
  kill_task_monster_ = 0;
  clear_has_kill_task_monster();
}
inline ::google::protobuf::int32 ProtoHookDetail::kill_task_monster() const {
  return kill_task_monster_;
}
inline void ProtoHookDetail::set_kill_task_monster(::google::protobuf::int32 value) {
  set_has_kill_task_monster();
  kill_task_monster_ = value;
}

// optional int32 kill_nearby_monster = 2;
inline bool ProtoHookDetail::has_kill_nearby_monster() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoHookDetail::set_has_kill_nearby_monster() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoHookDetail::clear_has_kill_nearby_monster() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoHookDetail::clear_kill_nearby_monster() {
  kill_nearby_monster_ = 0;
  clear_has_kill_nearby_monster();
}
inline ::google::protobuf::int32 ProtoHookDetail::kill_nearby_monster() const {
  return kill_nearby_monster_;
}
inline void ProtoHookDetail::set_kill_nearby_monster(::google::protobuf::int32 value) {
  set_has_kill_nearby_monster();
  kill_nearby_monster_ = value;
}

// optional int32 auto_pickup = 3;
inline bool ProtoHookDetail::has_auto_pickup() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoHookDetail::set_has_auto_pickup() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoHookDetail::clear_has_auto_pickup() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoHookDetail::clear_auto_pickup() {
  auto_pickup_ = 0;
  clear_has_auto_pickup();
}
inline ::google::protobuf::int32 ProtoHookDetail::auto_pickup() const {
  return auto_pickup_;
}
inline void ProtoHookDetail::set_auto_pickup(::google::protobuf::int32 value) {
  set_has_auto_pickup();
  auto_pickup_ = value;
}

// optional int32 auto_call_beast = 4;
inline bool ProtoHookDetail::has_auto_call_beast() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoHookDetail::set_has_auto_call_beast() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoHookDetail::clear_has_auto_call_beast() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoHookDetail::clear_auto_call_beast() {
  auto_call_beast_ = 0;
  clear_has_auto_call_beast();
}
inline ::google::protobuf::int32 ProtoHookDetail::auto_call_beast() const {
  return auto_call_beast_;
}
inline void ProtoHookDetail::set_auto_call_beast(::google::protobuf::int32 value) {
  set_has_auto_call_beast();
  auto_call_beast_ = value;
}

// optional int32 auto_drug = 5;
inline bool ProtoHookDetail::has_auto_drug() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoHookDetail::set_has_auto_drug() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoHookDetail::clear_has_auto_drug() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoHookDetail::clear_auto_drug() {
  auto_drug_ = 0;
  clear_has_auto_drug();
}
inline ::google::protobuf::int32 ProtoHookDetail::auto_drug() const {
  return auto_drug_;
}
inline void ProtoHookDetail::set_auto_drug(::google::protobuf::int32 value) {
  set_has_auto_drug();
  auto_drug_ = value;
}

// optional int32 auto_drug_blood = 6;
inline bool ProtoHookDetail::has_auto_drug_blood() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoHookDetail::set_has_auto_drug_blood() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoHookDetail::clear_has_auto_drug_blood() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoHookDetail::clear_auto_drug_blood() {
  auto_drug_blood_ = 0;
  clear_has_auto_drug_blood();
}
inline ::google::protobuf::int32 ProtoHookDetail::auto_drug_blood() const {
  return auto_drug_blood_;
}
inline void ProtoHookDetail::set_auto_drug_blood(::google::protobuf::int32 value) {
  set_has_auto_drug_blood();
  auto_drug_blood_ = value;
}

// optional int32 auto_drug_magic = 7;
inline bool ProtoHookDetail::has_auto_drug_magic() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoHookDetail::set_has_auto_drug_magic() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoHookDetail::clear_has_auto_drug_magic() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoHookDetail::clear_auto_drug_magic() {
  auto_drug_magic_ = 0;
  clear_has_auto_drug_magic();
}
inline ::google::protobuf::int32 ProtoHookDetail::auto_drug_magic() const {
  return auto_drug_magic_;
}
inline void ProtoHookDetail::set_auto_drug_magic(::google::protobuf::int32 value) {
  set_has_auto_drug_magic();
  auto_drug_magic_ = value;
}

// optional int32 auto_buy_drug = 8;
inline bool ProtoHookDetail::has_auto_buy_drug() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoHookDetail::set_has_auto_buy_drug() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoHookDetail::clear_has_auto_buy_drug() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoHookDetail::clear_auto_buy_drug() {
  auto_buy_drug_ = 0;
  clear_has_auto_buy_drug();
}
inline ::google::protobuf::int32 ProtoHookDetail::auto_buy_drug() const {
  return auto_buy_drug_;
}
inline void ProtoHookDetail::set_auto_buy_drug(::google::protobuf::int32 value) {
  set_has_auto_buy_drug();
  auto_buy_drug_ = value;
}

// optional int32 stop_hook = 9;
inline bool ProtoHookDetail::has_stop_hook() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProtoHookDetail::set_has_stop_hook() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProtoHookDetail::clear_has_stop_hook() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProtoHookDetail::clear_stop_hook() {
  stop_hook_ = 0;
  clear_has_stop_hook();
}
inline ::google::protobuf::int32 ProtoHookDetail::stop_hook() const {
  return stop_hook_;
}
inline void ProtoHookDetail::set_stop_hook(::google::protobuf::int32 value) {
  set_has_stop_hook();
  stop_hook_ = value;
}

// optional int32 relive_type = 10;
inline bool ProtoHookDetail::has_relive_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProtoHookDetail::set_has_relive_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ProtoHookDetail::clear_has_relive_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ProtoHookDetail::clear_relive_type() {
  relive_type_ = 0;
  clear_has_relive_type();
}
inline ::google::protobuf::int32 ProtoHookDetail::relive_type() const {
  return relive_type_;
}
inline void ProtoHookDetail::set_relive_type(::google::protobuf::int32 value) {
  set_has_relive_type();
  relive_type_ = value;
}

// optional int32 hook_list_index = 11;
inline bool ProtoHookDetail::has_hook_list_index() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ProtoHookDetail::set_has_hook_list_index() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ProtoHookDetail::clear_has_hook_list_index() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ProtoHookDetail::clear_hook_list_index() {
  hook_list_index_ = 0;
  clear_has_hook_list_index();
}
inline ::google::protobuf::int32 ProtoHookDetail::hook_list_index() const {
  return hook_list_index_;
}
inline void ProtoHookDetail::set_hook_list_index(::google::protobuf::int32 value) {
  set_has_hook_list_index();
  hook_list_index_ = value;
}

// repeated .ProtoHookSkill skill_list = 12;
inline int ProtoHookDetail::skill_list_size() const {
  return skill_list_.size();
}
inline void ProtoHookDetail::clear_skill_list() {
  skill_list_.Clear();
}
inline const ::ProtoHookSkill& ProtoHookDetail::skill_list(int index) const {
  return skill_list_.Get(index);
}
inline ::ProtoHookSkill* ProtoHookDetail::mutable_skill_list(int index) {
  return skill_list_.Mutable(index);
}
inline ::ProtoHookSkill* ProtoHookDetail::add_skill_list() {
  return skill_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoHookSkill >&
ProtoHookDetail::skill_list() const {
  return skill_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoHookSkill >*
ProtoHookDetail::mutable_skill_list() {
  return &skill_list_;
}

// optional int32 kill_other = 13;
inline bool ProtoHookDetail::has_kill_other() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ProtoHookDetail::set_has_kill_other() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ProtoHookDetail::clear_has_kill_other() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ProtoHookDetail::clear_kill_other() {
  kill_other_ = 0;
  clear_has_kill_other();
}
inline ::google::protobuf::int32 ProtoHookDetail::kill_other() const {
  return kill_other_;
}
inline void ProtoHookDetail::set_kill_other(::google::protobuf::int32 value) {
  set_has_kill_other();
  kill_other_ = value;
}

// optional int32 auto_drug_blood_beast = 14;
inline bool ProtoHookDetail::has_auto_drug_blood_beast() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ProtoHookDetail::set_has_auto_drug_blood_beast() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ProtoHookDetail::clear_has_auto_drug_blood_beast() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ProtoHookDetail::clear_auto_drug_blood_beast() {
  auto_drug_blood_beast_ = 0;
  clear_has_auto_drug_blood_beast();
}
inline ::google::protobuf::int32 ProtoHookDetail::auto_drug_blood_beast() const {
  return auto_drug_blood_beast_;
}
inline void ProtoHookDetail::set_auto_drug_blood_beast(::google::protobuf::int32 value) {
  set_has_auto_drug_blood_beast();
  auto_drug_blood_beast_ = value;
}

// optional int32 auto_drug_magic_beast = 15;
inline bool ProtoHookDetail::has_auto_drug_magic_beast() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ProtoHookDetail::set_has_auto_drug_magic_beast() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ProtoHookDetail::clear_has_auto_drug_magic_beast() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ProtoHookDetail::clear_auto_drug_magic_beast() {
  auto_drug_magic_beast_ = 0;
  clear_has_auto_drug_magic_beast();
}
inline ::google::protobuf::int32 ProtoHookDetail::auto_drug_magic_beast() const {
  return auto_drug_magic_beast_;
}
inline void ProtoHookDetail::set_auto_drug_magic_beast(::google::protobuf::int32 value) {
  set_has_auto_drug_magic_beast();
  auto_drug_magic_beast_ = value;
}

// optional int32 auto_avoid_boss = 16;
inline bool ProtoHookDetail::has_auto_avoid_boss() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ProtoHookDetail::set_has_auto_avoid_boss() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ProtoHookDetail::clear_has_auto_avoid_boss() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ProtoHookDetail::clear_auto_avoid_boss() {
  auto_avoid_boss_ = 0;
  clear_has_auto_avoid_boss();
}
inline ::google::protobuf::int32 ProtoHookDetail::auto_avoid_boss() const {
  return auto_avoid_boss_;
}
inline void ProtoHookDetail::set_auto_avoid_boss(::google::protobuf::int32 value) {
  set_has_auto_avoid_boss();
  auto_avoid_boss_ = value;
}

// optional int32 is_hooking = 17;
inline bool ProtoHookDetail::has_is_hooking() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ProtoHookDetail::set_has_is_hooking() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ProtoHookDetail::clear_has_is_hooking() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ProtoHookDetail::clear_is_hooking() {
  is_hooking_ = 0;
  clear_has_is_hooking();
}
inline ::google::protobuf::int32 ProtoHookDetail::is_hooking() const {
  return is_hooking_;
}
inline void ProtoHookDetail::set_is_hooking(::google::protobuf::int32 value) {
  set_has_is_hooking();
  is_hooking_ = value;
}

// optional int32 drug_blood_tick = 18;
inline bool ProtoHookDetail::has_drug_blood_tick() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ProtoHookDetail::set_has_drug_blood_tick() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ProtoHookDetail::clear_has_drug_blood_tick() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ProtoHookDetail::clear_drug_blood_tick() {
  drug_blood_tick_ = 0;
  clear_has_drug_blood_tick();
}
inline ::google::protobuf::int32 ProtoHookDetail::drug_blood_tick() const {
  return drug_blood_tick_;
}
inline void ProtoHookDetail::set_drug_blood_tick(::google::protobuf::int32 value) {
  set_has_drug_blood_tick();
  drug_blood_tick_ = value;
}

// optional int32 drug_magic_tick = 19;
inline bool ProtoHookDetail::has_drug_magic_tick() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ProtoHookDetail::set_has_drug_magic_tick() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ProtoHookDetail::clear_has_drug_magic_tick() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ProtoHookDetail::clear_drug_magic_tick() {
  drug_magic_tick_ = 0;
  clear_has_drug_magic_tick();
}
inline ::google::protobuf::int32 ProtoHookDetail::drug_magic_tick() const {
  return drug_magic_tick_;
}
inline void ProtoHookDetail::set_drug_magic_tick(::google::protobuf::int32 value) {
  set_has_drug_magic_tick();
  drug_magic_tick_ = value;
}

// optional int32 drug_blood_notify_buy = 20;
inline bool ProtoHookDetail::has_drug_blood_notify_buy() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ProtoHookDetail::set_has_drug_blood_notify_buy() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ProtoHookDetail::clear_has_drug_blood_notify_buy() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ProtoHookDetail::clear_drug_blood_notify_buy() {
  drug_blood_notify_buy_ = 0;
  clear_has_drug_blood_notify_buy();
}
inline ::google::protobuf::int32 ProtoHookDetail::drug_blood_notify_buy() const {
  return drug_blood_notify_buy_;
}
inline void ProtoHookDetail::set_drug_blood_notify_buy(::google::protobuf::int32 value) {
  set_has_drug_blood_notify_buy();
  drug_blood_notify_buy_ = value;
}

// optional int32 drug_magic_notify_buy = 21;
inline bool ProtoHookDetail::has_drug_magic_notify_buy() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ProtoHookDetail::set_has_drug_magic_notify_buy() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ProtoHookDetail::clear_has_drug_magic_notify_buy() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ProtoHookDetail::clear_drug_magic_notify_buy() {
  drug_magic_notify_buy_ = 0;
  clear_has_drug_magic_notify_buy();
}
inline ::google::protobuf::int32 ProtoHookDetail::drug_magic_notify_buy() const {
  return drug_magic_notify_buy_;
}
inline void ProtoHookDetail::set_drug_magic_notify_buy(::google::protobuf::int32 value) {
  set_has_drug_magic_notify_buy();
  drug_magic_notify_buy_ = value;
}

// optional int32 auto_back_main = 22;
inline bool ProtoHookDetail::has_auto_back_main() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ProtoHookDetail::set_has_auto_back_main() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ProtoHookDetail::clear_has_auto_back_main() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ProtoHookDetail::clear_auto_back_main() {
  auto_back_main_ = 0;
  clear_has_auto_back_main();
}
inline ::google::protobuf::int32 ProtoHookDetail::auto_back_main() const {
  return auto_back_main_;
}
inline void ProtoHookDetail::set_auto_back_main(::google::protobuf::int32 value) {
  set_has_auto_back_main();
  auto_back_main_ = value;
}

// optional int32 auto_back_main_blood = 23;
inline bool ProtoHookDetail::has_auto_back_main_blood() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ProtoHookDetail::set_has_auto_back_main_blood() {
  _has_bits_[0] |= 0x00400000u;
}
inline void ProtoHookDetail::clear_has_auto_back_main_blood() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void ProtoHookDetail::clear_auto_back_main_blood() {
  auto_back_main_blood_ = 0;
  clear_has_auto_back_main_blood();
}
inline ::google::protobuf::int32 ProtoHookDetail::auto_back_main_blood() const {
  return auto_back_main_blood_;
}
inline void ProtoHookDetail::set_auto_back_main_blood(::google::protobuf::int32 value) {
  set_has_auto_back_main_blood();
  auto_back_main_blood_ = value;
}

// optional int32 auto_random = 24;
inline bool ProtoHookDetail::has_auto_random() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void ProtoHookDetail::set_has_auto_random() {
  _has_bits_[0] |= 0x00800000u;
}
inline void ProtoHookDetail::clear_has_auto_random() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void ProtoHookDetail::clear_auto_random() {
  auto_random_ = 0;
  clear_has_auto_random();
}
inline ::google::protobuf::int32 ProtoHookDetail::auto_random() const {
  return auto_random_;
}
inline void ProtoHookDetail::set_auto_random(::google::protobuf::int32 value) {
  set_has_auto_random();
  auto_random_ = value;
}

// optional int32 auto_random_blood = 25;
inline bool ProtoHookDetail::has_auto_random_blood() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void ProtoHookDetail::set_has_auto_random_blood() {
  _has_bits_[0] |= 0x01000000u;
}
inline void ProtoHookDetail::clear_has_auto_random_blood() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void ProtoHookDetail::clear_auto_random_blood() {
  auto_random_blood_ = 0;
  clear_has_auto_random_blood();
}
inline ::google::protobuf::int32 ProtoHookDetail::auto_random_blood() const {
  return auto_random_blood_;
}
inline void ProtoHookDetail::set_auto_random_blood(::google::protobuf::int32 value) {
  set_has_auto_random_blood();
  auto_random_blood_ = value;
}

// optional int32 auto_back_main_tick = 26;
inline bool ProtoHookDetail::has_auto_back_main_tick() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void ProtoHookDetail::set_has_auto_back_main_tick() {
  _has_bits_[0] |= 0x02000000u;
}
inline void ProtoHookDetail::clear_has_auto_back_main_tick() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void ProtoHookDetail::clear_auto_back_main_tick() {
  auto_back_main_tick_ = 0;
  clear_has_auto_back_main_tick();
}
inline ::google::protobuf::int32 ProtoHookDetail::auto_back_main_tick() const {
  return auto_back_main_tick_;
}
inline void ProtoHookDetail::set_auto_back_main_tick(::google::protobuf::int32 value) {
  set_has_auto_back_main_tick();
  auto_back_main_tick_ = value;
}

// optional int32 auto_random_tick = 27;
inline bool ProtoHookDetail::has_auto_random_tick() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void ProtoHookDetail::set_has_auto_random_tick() {
  _has_bits_[0] |= 0x04000000u;
}
inline void ProtoHookDetail::clear_has_auto_random_tick() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void ProtoHookDetail::clear_auto_random_tick() {
  auto_random_tick_ = 0;
  clear_has_auto_random_tick();
}
inline ::google::protobuf::int32 ProtoHookDetail::auto_random_tick() const {
  return auto_random_tick_;
}
inline void ProtoHookDetail::set_auto_random_tick(::google::protobuf::int32 value) {
  set_has_auto_random_tick();
  auto_random_tick_ = value;
}

// -------------------------------------------------------------------

// ProtoHookSkill

// repeated int32 hook_skill_id = 1;
inline int ProtoHookSkill::hook_skill_id_size() const {
  return hook_skill_id_.size();
}
inline void ProtoHookSkill::clear_hook_skill_id() {
  hook_skill_id_.Clear();
}
inline ::google::protobuf::int32 ProtoHookSkill::hook_skill_id(int index) const {
  return hook_skill_id_.Get(index);
}
inline void ProtoHookSkill::set_hook_skill_id(int index, ::google::protobuf::int32 value) {
  hook_skill_id_.Set(index, value);
}
inline void ProtoHookSkill::add_hook_skill_id(::google::protobuf::int32 value) {
  hook_skill_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProtoHookSkill::hook_skill_id() const {
  return hook_skill_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProtoHookSkill::mutable_hook_skill_id() {
  return &hook_skill_id_;
}

// -------------------------------------------------------------------

// ProtoFashionTipInfo

// optional int64 tip_id = 1;
inline bool ProtoFashionTipInfo::has_tip_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoFashionTipInfo::set_has_tip_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoFashionTipInfo::clear_has_tip_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoFashionTipInfo::clear_tip_id() {
  tip_id_ = GOOGLE_LONGLONG(0);
  clear_has_tip_id();
}
inline ::google::protobuf::int64 ProtoFashionTipInfo::tip_id() const {
  return tip_id_;
}
inline void ProtoFashionTipInfo::set_tip_id(::google::protobuf::int64 value) {
  set_has_tip_id();
  tip_id_ = value;
}

// optional int32 fashion_id = 2;
inline bool ProtoFashionTipInfo::has_fashion_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoFashionTipInfo::set_has_fashion_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoFashionTipInfo::clear_has_fashion_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoFashionTipInfo::clear_fashion_id() {
  fashion_id_ = 0;
  clear_has_fashion_id();
}
inline ::google::protobuf::int32 ProtoFashionTipInfo::fashion_id() const {
  return fashion_id_;
}
inline void ProtoFashionTipInfo::set_fashion_id(::google::protobuf::int32 value) {
  set_has_fashion_id();
  fashion_id_ = value;
}

// optional int32 fashion_force = 3;
inline bool ProtoFashionTipInfo::has_fashion_force() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoFashionTipInfo::set_has_fashion_force() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoFashionTipInfo::clear_has_fashion_force() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoFashionTipInfo::clear_fashion_force() {
  fashion_force_ = 0;
  clear_has_fashion_force();
}
inline ::google::protobuf::int32 ProtoFashionTipInfo::fashion_force() const {
  return fashion_force_;
}
inline void ProtoFashionTipInfo::set_fashion_force(::google::protobuf::int32 value) {
  set_has_fashion_force();
  fashion_force_ = value;
}

// optional int32 left_sec = 4;
inline bool ProtoFashionTipInfo::has_left_sec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoFashionTipInfo::set_has_left_sec() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoFashionTipInfo::clear_has_left_sec() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoFashionTipInfo::clear_left_sec() {
  left_sec_ = 0;
  clear_has_left_sec();
}
inline ::google::protobuf::int32 ProtoFashionTipInfo::left_sec() const {
  return left_sec_;
}
inline void ProtoFashionTipInfo::set_left_sec(::google::protobuf::int32 value) {
  set_has_left_sec();
  left_sec_ = value;
}

// optional int32 martial_id = 5;
inline bool ProtoFashionTipInfo::has_martial_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoFashionTipInfo::set_has_martial_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoFashionTipInfo::clear_has_martial_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoFashionTipInfo::clear_martial_id() {
  martial_id_ = 0;
  clear_has_martial_id();
}
inline ::google::protobuf::int32 ProtoFashionTipInfo::martial_id() const {
  return martial_id_;
}
inline void ProtoFashionTipInfo::set_martial_id(::google::protobuf::int32 value) {
  set_has_martial_id();
  martial_id_ = value;
}

// optional int32 event_id = 6;
inline bool ProtoFashionTipInfo::has_event_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoFashionTipInfo::set_has_event_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoFashionTipInfo::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoFashionTipInfo::clear_event_id() {
  event_id_ = 0;
  clear_has_event_id();
}
inline ::google::protobuf::int32 ProtoFashionTipInfo::event_id() const {
  return event_id_;
}
inline void ProtoFashionTipInfo::set_event_id(::google::protobuf::int32 value) {
  set_has_event_id();
  event_id_ = value;
}

// -------------------------------------------------------------------

// ProtoVipTimeTipInfo

// optional int64 tip_id = 1;
inline bool ProtoVipTimeTipInfo::has_tip_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoVipTimeTipInfo::set_has_tip_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoVipTimeTipInfo::clear_has_tip_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoVipTimeTipInfo::clear_tip_id() {
  tip_id_ = GOOGLE_LONGLONG(0);
  clear_has_tip_id();
}
inline ::google::protobuf::int64 ProtoVipTimeTipInfo::tip_id() const {
  return tip_id_;
}
inline void ProtoVipTimeTipInfo::set_tip_id(::google::protobuf::int64 value) {
  set_has_tip_id();
  tip_id_ = value;
}

// optional int32 vip_type = 2;
inline bool ProtoVipTimeTipInfo::has_vip_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoVipTimeTipInfo::set_has_vip_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoVipTimeTipInfo::clear_has_vip_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoVipTimeTipInfo::clear_vip_type() {
  vip_type_ = 0;
  clear_has_vip_type();
}
inline ::google::protobuf::int32 ProtoVipTimeTipInfo::vip_type() const {
  return vip_type_;
}
inline void ProtoVipTimeTipInfo::set_vip_type(::google::protobuf::int32 value) {
  set_has_vip_type();
  vip_type_ = value;
}

// optional int32 left_sec = 3;
inline bool ProtoVipTimeTipInfo::has_left_sec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoVipTimeTipInfo::set_has_left_sec() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoVipTimeTipInfo::clear_has_left_sec() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoVipTimeTipInfo::clear_left_sec() {
  left_sec_ = 0;
  clear_has_left_sec();
}
inline ::google::protobuf::int32 ProtoVipTimeTipInfo::left_sec() const {
  return left_sec_;
}
inline void ProtoVipTimeTipInfo::set_left_sec(::google::protobuf::int32 value) {
  set_has_left_sec();
  left_sec_ = value;
}

// optional int32 event_id = 4;
inline bool ProtoVipTimeTipInfo::has_event_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoVipTimeTipInfo::set_has_event_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoVipTimeTipInfo::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoVipTimeTipInfo::clear_event_id() {
  event_id_ = 0;
  clear_has_event_id();
}
inline ::google::protobuf::int32 ProtoVipTimeTipInfo::event_id() const {
  return event_id_;
}
inline void ProtoVipTimeTipInfo::set_event_id(::google::protobuf::int32 value) {
  set_has_event_id();
  event_id_ = value;
}

// -------------------------------------------------------------------

// ProtoScriptChapter

// optional int32 chapter = 1;
inline bool ProtoScriptChapter::has_chapter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoScriptChapter::set_has_chapter() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoScriptChapter::clear_has_chapter() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoScriptChapter::clear_chapter() {
  chapter_ = 0;
  clear_has_chapter();
}
inline ::google::protobuf::int32 ProtoScriptChapter::chapter() const {
  return chapter_;
}
inline void ProtoScriptChapter::set_chapter(::google::protobuf::int32 value) {
  set_has_chapter();
  chapter_ = value;
}

// optional int32 is_passed = 2;
inline bool ProtoScriptChapter::has_is_passed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoScriptChapter::set_has_is_passed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoScriptChapter::clear_has_is_passed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoScriptChapter::clear_is_passed() {
  is_passed_ = 0;
  clear_has_is_passed();
}
inline ::google::protobuf::int32 ProtoScriptChapter::is_passed() const {
  return is_passed_;
}
inline void ProtoScriptChapter::set_is_passed(::google::protobuf::int32 value) {
  set_has_is_passed();
  is_passed_ = value;
}

// optional int32 start_level = 3;
inline bool ProtoScriptChapter::has_start_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoScriptChapter::set_has_start_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoScriptChapter::clear_has_start_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoScriptChapter::clear_start_level() {
  start_level_ = 0;
  clear_has_start_level();
}
inline ::google::protobuf::int32 ProtoScriptChapter::start_level() const {
  return start_level_;
}
inline void ProtoScriptChapter::set_start_level(::google::protobuf::int32 value) {
  set_has_start_level();
  start_level_ = value;
}

// optional int64 first_id = 4;
inline bool ProtoScriptChapter::has_first_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoScriptChapter::set_has_first_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoScriptChapter::clear_has_first_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoScriptChapter::clear_first_id() {
  first_id_ = GOOGLE_LONGLONG(0);
  clear_has_first_id();
}
inline ::google::protobuf::int64 ProtoScriptChapter::first_id() const {
  return first_id_;
}
inline void ProtoScriptChapter::set_first_id(::google::protobuf::int64 value) {
  set_has_first_id();
  first_id_ = value;
}

// optional string first_name = 5;
inline bool ProtoScriptChapter::has_first_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoScriptChapter::set_has_first_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoScriptChapter::clear_has_first_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoScriptChapter::clear_first_name() {
  if (first_name_ != &::google::protobuf::internal::kEmptyString) {
    first_name_->clear();
  }
  clear_has_first_name();
}
inline const ::std::string& ProtoScriptChapter::first_name() const {
  return *first_name_;
}
inline void ProtoScriptChapter::set_first_name(const ::std::string& value) {
  set_has_first_name();
  if (first_name_ == &::google::protobuf::internal::kEmptyString) {
    first_name_ = new ::std::string;
  }
  first_name_->assign(value);
}
inline void ProtoScriptChapter::set_first_name(const char* value) {
  set_has_first_name();
  if (first_name_ == &::google::protobuf::internal::kEmptyString) {
    first_name_ = new ::std::string;
  }
  first_name_->assign(value);
}
inline void ProtoScriptChapter::set_first_name(const char* value, size_t size) {
  set_has_first_name();
  if (first_name_ == &::google::protobuf::internal::kEmptyString) {
    first_name_ = new ::std::string;
  }
  first_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoScriptChapter::mutable_first_name() {
  set_has_first_name();
  if (first_name_ == &::google::protobuf::internal::kEmptyString) {
    first_name_ = new ::std::string;
  }
  return first_name_;
}
inline ::std::string* ProtoScriptChapter::release_first_name() {
  clear_has_first_name();
  if (first_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = first_name_;
    first_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 is_started = 6;
inline bool ProtoScriptChapter::has_is_started() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoScriptChapter::set_has_is_started() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoScriptChapter::clear_has_is_started() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoScriptChapter::clear_is_started() {
  is_started_ = 0;
  clear_has_is_started();
}
inline ::google::protobuf::int32 ProtoScriptChapter::is_started() const {
  return is_started_;
}
inline void ProtoScriptChapter::set_is_started(::google::protobuf::int32 value) {
  set_has_is_started();
  is_started_ = value;
}

// optional int32 best_tick = 7;
inline bool ProtoScriptChapter::has_best_tick() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoScriptChapter::set_has_best_tick() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoScriptChapter::clear_has_best_tick() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoScriptChapter::clear_best_tick() {
  best_tick_ = 0;
  clear_has_best_tick();
}
inline ::google::protobuf::int32 ProtoScriptChapter::best_tick() const {
  return best_tick_;
}
inline void ProtoScriptChapter::set_best_tick(::google::protobuf::int32 value) {
  set_has_best_tick();
  best_tick_ = value;
}

// -------------------------------------------------------------------

// ProtoSysSetting

// optional int32 is_shock = 1;
inline bool ProtoSysSetting::has_is_shock() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoSysSetting::set_has_is_shock() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoSysSetting::clear_has_is_shock() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoSysSetting::clear_is_shock() {
  is_shock_ = 0;
  clear_has_is_shock();
}
inline ::google::protobuf::int32 ProtoSysSetting::is_shock() const {
  return is_shock_;
}
inline void ProtoSysSetting::set_is_shock(::google::protobuf::int32 value) {
  set_has_is_shock();
  is_shock_ = value;
}

// optional .ProtoPairObj music = 2;
inline bool ProtoSysSetting::has_music() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoSysSetting::set_has_music() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoSysSetting::clear_has_music() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoSysSetting::clear_music() {
  if (music_ != NULL) music_->::ProtoPairObj::Clear();
  clear_has_music();
}
inline const ::ProtoPairObj& ProtoSysSetting::music() const {
  return music_ != NULL ? *music_ : *default_instance_->music_;
}
inline ::ProtoPairObj* ProtoSysSetting::mutable_music() {
  set_has_music();
  if (music_ == NULL) music_ = new ::ProtoPairObj;
  return music_;
}
inline ::ProtoPairObj* ProtoSysSetting::release_music() {
  clear_has_music();
  ::ProtoPairObj* temp = music_;
  music_ = NULL;
  return temp;
}

// optional .ProtoPairObj sound_effect = 3;
inline bool ProtoSysSetting::has_sound_effect() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoSysSetting::set_has_sound_effect() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoSysSetting::clear_has_sound_effect() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoSysSetting::clear_sound_effect() {
  if (sound_effect_ != NULL) sound_effect_->::ProtoPairObj::Clear();
  clear_has_sound_effect();
}
inline const ::ProtoPairObj& ProtoSysSetting::sound_effect() const {
  return sound_effect_ != NULL ? *sound_effect_ : *default_instance_->sound_effect_;
}
inline ::ProtoPairObj* ProtoSysSetting::mutable_sound_effect() {
  set_has_sound_effect();
  if (sound_effect_ == NULL) sound_effect_ = new ::ProtoPairObj;
  return sound_effect_;
}
inline ::ProtoPairObj* ProtoSysSetting::release_sound_effect() {
  clear_has_sound_effect();
  ::ProtoPairObj* temp = sound_effect_;
  sound_effect_ = NULL;
  return temp;
}

// optional int32 screen_type = 4;
inline bool ProtoSysSetting::has_screen_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoSysSetting::set_has_screen_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoSysSetting::clear_has_screen_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoSysSetting::clear_screen_type() {
  screen_type_ = 0;
  clear_has_screen_type();
}
inline ::google::protobuf::int32 ProtoSysSetting::screen_type() const {
  return screen_type_;
}
inline void ProtoSysSetting::set_screen_type(::google::protobuf::int32 value) {
  set_has_screen_type();
  screen_type_ = value;
}

// repeated int32 shield_type = 5;
inline int ProtoSysSetting::shield_type_size() const {
  return shield_type_.size();
}
inline void ProtoSysSetting::clear_shield_type() {
  shield_type_.Clear();
}
inline ::google::protobuf::int32 ProtoSysSetting::shield_type(int index) const {
  return shield_type_.Get(index);
}
inline void ProtoSysSetting::set_shield_type(int index, ::google::protobuf::int32 value) {
  shield_type_.Set(index, value);
}
inline void ProtoSysSetting::add_shield_type(::google::protobuf::int32 value) {
  shield_type_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProtoSysSetting::shield_type() const {
  return shield_type_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProtoSysSetting::mutable_shield_type() {
  return &shield_type_;
}

// optional int32 turnoff_act_notify = 6;
inline bool ProtoSysSetting::has_turnoff_act_notify() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoSysSetting::set_has_turnoff_act_notify() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoSysSetting::clear_has_turnoff_act_notify() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoSysSetting::clear_turnoff_act_notify() {
  turnoff_act_notify_ = 0;
  clear_has_turnoff_act_notify();
}
inline ::google::protobuf::int32 ProtoSysSetting::turnoff_act_notify() const {
  return turnoff_act_notify_;
}
inline void ProtoSysSetting::set_turnoff_act_notify(::google::protobuf::int32 value) {
  set_has_turnoff_act_notify();
  turnoff_act_notify_ = value;
}

// optional int32 auto_adjust_express = 7;
inline bool ProtoSysSetting::has_auto_adjust_express() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoSysSetting::set_has_auto_adjust_express() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoSysSetting::clear_has_auto_adjust_express() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoSysSetting::clear_auto_adjust_express() {
  auto_adjust_express_ = 0;
  clear_has_auto_adjust_express();
}
inline ::google::protobuf::int32 ProtoSysSetting::auto_adjust_express() const {
  return auto_adjust_express_;
}
inline void ProtoSysSetting::set_auto_adjust_express(::google::protobuf::int32 value) {
  set_has_auto_adjust_express();
  auto_adjust_express_ = value;
}

// optional int32 fluency_type = 8;
inline bool ProtoSysSetting::has_fluency_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoSysSetting::set_has_fluency_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoSysSetting::clear_has_fluency_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoSysSetting::clear_fluency_type() {
  fluency_type_ = 0;
  clear_has_fluency_type();
}
inline ::google::protobuf::int32 ProtoSysSetting::fluency_type() const {
  return fluency_type_;
}
inline void ProtoSysSetting::set_fluency_type(::google::protobuf::int32 value) {
  set_has_fluency_type();
  fluency_type_ = value;
}

// -------------------------------------------------------------------

// ProtoRpmRoleInfo

// optional int64 role_id = 1;
inline bool ProtoRpmRoleInfo::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoRpmRoleInfo::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoRpmRoleInfo::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoRpmRoleInfo::clear_role_id() {
  role_id_ = GOOGLE_LONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::int64 ProtoRpmRoleInfo::role_id() const {
  return role_id_;
}
inline void ProtoRpmRoleInfo::set_role_id(::google::protobuf::int64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string role_name = 2;
inline bool ProtoRpmRoleInfo::has_role_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoRpmRoleInfo::set_has_role_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoRpmRoleInfo::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoRpmRoleInfo::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& ProtoRpmRoleInfo::role_name() const {
  return *role_name_;
}
inline void ProtoRpmRoleInfo::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoRpmRoleInfo::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoRpmRoleInfo::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoRpmRoleInfo::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* ProtoRpmRoleInfo::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 force = 3;
inline bool ProtoRpmRoleInfo::has_force() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoRpmRoleInfo::set_has_force() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoRpmRoleInfo::clear_has_force() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoRpmRoleInfo::clear_force() {
  force_ = 0;
  clear_has_force();
}
inline ::google::protobuf::int32 ProtoRpmRoleInfo::force() const {
  return force_;
}
inline void ProtoRpmRoleInfo::set_force(::google::protobuf::int32 value) {
  set_has_force();
  force_ = value;
}

// optional int32 level = 4;
inline bool ProtoRpmRoleInfo::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoRpmRoleInfo::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoRpmRoleInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoRpmRoleInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ProtoRpmRoleInfo::level() const {
  return level_;
}
inline void ProtoRpmRoleInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 career = 5;
inline bool ProtoRpmRoleInfo::has_career() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoRpmRoleInfo::set_has_career() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoRpmRoleInfo::clear_has_career() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoRpmRoleInfo::clear_career() {
  career_ = 0;
  clear_has_career();
}
inline ::google::protobuf::int32 ProtoRpmRoleInfo::career() const {
  return career_;
}
inline void ProtoRpmRoleInfo::set_career(::google::protobuf::int32 value) {
  set_has_career();
  career_ = value;
}

// -------------------------------------------------------------------

// TipsItem

// optional int32 type = 1;
inline bool TipsItem::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TipsItem::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TipsItem::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TipsItem::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 TipsItem::type() const {
  return type_;
}
inline void TipsItem::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 id = 2;
inline bool TipsItem::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TipsItem::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TipsItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TipsItem::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 TipsItem::id() const {
  return id_;
}
inline void TipsItem::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 amount = 3;
inline bool TipsItem::has_amount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TipsItem::set_has_amount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TipsItem::clear_has_amount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TipsItem::clear_amount() {
  amount_ = 0;
  clear_has_amount();
}
inline ::google::protobuf::int32 TipsItem::amount() const {
  return amount_;
}
inline void TipsItem::set_amount(::google::protobuf::int32 value) {
  set_has_amount();
  amount_ = value;
}

// optional int32 extra_1 = 4;
inline bool TipsItem::has_extra_1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TipsItem::set_has_extra_1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TipsItem::clear_has_extra_1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TipsItem::clear_extra_1() {
  extra_1_ = 0;
  clear_has_extra_1();
}
inline ::google::protobuf::int32 TipsItem::extra_1() const {
  return extra_1_;
}
inline void TipsItem::set_extra_1(::google::protobuf::int32 value) {
  set_has_extra_1();
  extra_1_ = value;
}

// optional int32 vip_type = 5;
inline bool TipsItem::has_vip_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TipsItem::set_has_vip_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TipsItem::clear_has_vip_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TipsItem::clear_vip_type() {
  vip_type_ = 0;
  clear_has_vip_type();
}
inline ::google::protobuf::int32 TipsItem::vip_type() const {
  return vip_type_;
}
inline void TipsItem::set_vip_type(::google::protobuf::int32 value) {
  set_has_vip_type();
  vip_type_ = value;
}

// optional int32 is_special = 6;
inline bool TipsItem::has_is_special() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TipsItem::set_has_is_special() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TipsItem::clear_has_is_special() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TipsItem::clear_is_special() {
  is_special_ = 0;
  clear_has_is_special();
}
inline ::google::protobuf::int32 TipsItem::is_special() const {
  return is_special_;
}
inline void TipsItem::set_is_special(::google::protobuf::int32 value) {
  set_has_is_special();
  is_special_ = value;
}

// -------------------------------------------------------------------

// ProtoFBUseTimes

// optional int64 role_id = 1;
inline bool ProtoFBUseTimes::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoFBUseTimes::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoFBUseTimes::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoFBUseTimes::clear_role_id() {
  role_id_ = GOOGLE_LONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::int64 ProtoFBUseTimes::role_id() const {
  return role_id_;
}
inline void ProtoFBUseTimes::set_role_id(::google::protobuf::int64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional int32 use_times = 2;
inline bool ProtoFBUseTimes::has_use_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoFBUseTimes::set_has_use_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoFBUseTimes::clear_has_use_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoFBUseTimes::clear_use_times() {
  use_times_ = 0;
  clear_has_use_times();
}
inline ::google::protobuf::int32 ProtoFBUseTimes::use_times() const {
  return use_times_;
}
inline void ProtoFBUseTimes::set_use_times(::google::protobuf::int32 value) {
  set_has_use_times();
  use_times_ = value;
}

// -------------------------------------------------------------------

// ProtoMoverPos

// optional int64 role_id = 1;
inline bool ProtoMoverPos::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoMoverPos::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoMoverPos::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoMoverPos::clear_role_id() {
  role_id_ = GOOGLE_LONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::int64 ProtoMoverPos::role_id() const {
  return role_id_;
}
inline void ProtoMoverPos::set_role_id(::google::protobuf::int64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional int32 pixel_x = 2;
inline bool ProtoMoverPos::has_pixel_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoMoverPos::set_has_pixel_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoMoverPos::clear_has_pixel_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoMoverPos::clear_pixel_x() {
  pixel_x_ = 0;
  clear_has_pixel_x();
}
inline ::google::protobuf::int32 ProtoMoverPos::pixel_x() const {
  return pixel_x_;
}
inline void ProtoMoverPos::set_pixel_x(::google::protobuf::int32 value) {
  set_has_pixel_x();
  pixel_x_ = value;
}

// optional int32 pixel_y = 3;
inline bool ProtoMoverPos::has_pixel_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoMoverPos::set_has_pixel_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoMoverPos::clear_has_pixel_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoMoverPos::clear_pixel_y() {
  pixel_y_ = 0;
  clear_has_pixel_y();
}
inline ::google::protobuf::int32 ProtoMoverPos::pixel_y() const {
  return pixel_y_;
}
inline void ProtoMoverPos::set_pixel_y(::google::protobuf::int32 value) {
  set_has_pixel_y();
  pixel_y_ = value;
}

// -------------------------------------------------------------------

// ProtoCustomerSVCRecord

// optional int64 record_id = 1;
inline bool ProtoCustomerSVCRecord::has_record_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoCustomerSVCRecord::set_has_record_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoCustomerSVCRecord::clear_has_record_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoCustomerSVCRecord::clear_record_id() {
  record_id_ = GOOGLE_LONGLONG(0);
  clear_has_record_id();
}
inline ::google::protobuf::int64 ProtoCustomerSVCRecord::record_id() const {
  return record_id_;
}
inline void ProtoCustomerSVCRecord::set_record_id(::google::protobuf::int64 value) {
  set_has_record_id();
  record_id_ = value;
}

// optional int64 send_tick = 2;
inline bool ProtoCustomerSVCRecord::has_send_tick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoCustomerSVCRecord::set_has_send_tick() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoCustomerSVCRecord::clear_has_send_tick() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoCustomerSVCRecord::clear_send_tick() {
  send_tick_ = GOOGLE_LONGLONG(0);
  clear_has_send_tick();
}
inline ::google::protobuf::int64 ProtoCustomerSVCRecord::send_tick() const {
  return send_tick_;
}
inline void ProtoCustomerSVCRecord::set_send_tick(::google::protobuf::int64 value) {
  set_has_send_tick();
  send_tick_ = value;
}

// optional int32 record_status = 3;
inline bool ProtoCustomerSVCRecord::has_record_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoCustomerSVCRecord::set_has_record_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoCustomerSVCRecord::clear_has_record_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoCustomerSVCRecord::clear_record_status() {
  record_status_ = 0;
  clear_has_record_status();
}
inline ::google::protobuf::int32 ProtoCustomerSVCRecord::record_status() const {
  return record_status_;
}
inline void ProtoCustomerSVCRecord::set_record_status(::google::protobuf::int32 value) {
  set_has_record_status();
  record_status_ = value;
}

// optional int32 record_type = 4;
inline bool ProtoCustomerSVCRecord::has_record_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoCustomerSVCRecord::set_has_record_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoCustomerSVCRecord::clear_has_record_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoCustomerSVCRecord::clear_record_type() {
  record_type_ = 0;
  clear_has_record_type();
}
inline ::google::protobuf::int32 ProtoCustomerSVCRecord::record_type() const {
  return record_type_;
}
inline void ProtoCustomerSVCRecord::set_record_type(::google::protobuf::int32 value) {
  set_has_record_type();
  record_type_ = value;
}

// optional string title = 5;
inline bool ProtoCustomerSVCRecord::has_title() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoCustomerSVCRecord::set_has_title() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoCustomerSVCRecord::clear_has_title() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoCustomerSVCRecord::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& ProtoCustomerSVCRecord::title() const {
  return *title_;
}
inline void ProtoCustomerSVCRecord::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void ProtoCustomerSVCRecord::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void ProtoCustomerSVCRecord::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoCustomerSVCRecord::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* ProtoCustomerSVCRecord::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string content = 6;
inline bool ProtoCustomerSVCRecord::has_content() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoCustomerSVCRecord::set_has_content() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoCustomerSVCRecord::clear_has_content() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoCustomerSVCRecord::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& ProtoCustomerSVCRecord::content() const {
  return *content_;
}
inline void ProtoCustomerSVCRecord::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void ProtoCustomerSVCRecord::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void ProtoCustomerSVCRecord::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoCustomerSVCRecord::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* ProtoCustomerSVCRecord::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string replay_content = 7;
inline bool ProtoCustomerSVCRecord::has_replay_content() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoCustomerSVCRecord::set_has_replay_content() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoCustomerSVCRecord::clear_has_replay_content() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoCustomerSVCRecord::clear_replay_content() {
  if (replay_content_ != &::google::protobuf::internal::kEmptyString) {
    replay_content_->clear();
  }
  clear_has_replay_content();
}
inline const ::std::string& ProtoCustomerSVCRecord::replay_content() const {
  return *replay_content_;
}
inline void ProtoCustomerSVCRecord::set_replay_content(const ::std::string& value) {
  set_has_replay_content();
  if (replay_content_ == &::google::protobuf::internal::kEmptyString) {
    replay_content_ = new ::std::string;
  }
  replay_content_->assign(value);
}
inline void ProtoCustomerSVCRecord::set_replay_content(const char* value) {
  set_has_replay_content();
  if (replay_content_ == &::google::protobuf::internal::kEmptyString) {
    replay_content_ = new ::std::string;
  }
  replay_content_->assign(value);
}
inline void ProtoCustomerSVCRecord::set_replay_content(const char* value, size_t size) {
  set_has_replay_content();
  if (replay_content_ == &::google::protobuf::internal::kEmptyString) {
    replay_content_ = new ::std::string;
  }
  replay_content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoCustomerSVCRecord::mutable_replay_content() {
  set_has_replay_content();
  if (replay_content_ == &::google::protobuf::internal::kEmptyString) {
    replay_content_ = new ::std::string;
  }
  return replay_content_;
}
inline ::std::string* ProtoCustomerSVCRecord::release_replay_content() {
  clear_has_replay_content();
  if (replay_content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = replay_content_;
    replay_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 last_evaluate = 8;
inline bool ProtoCustomerSVCRecord::has_last_evaluate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoCustomerSVCRecord::set_has_last_evaluate() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoCustomerSVCRecord::clear_has_last_evaluate() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoCustomerSVCRecord::clear_last_evaluate() {
  last_evaluate_ = 0;
  clear_has_last_evaluate();
}
inline ::google::protobuf::int32 ProtoCustomerSVCRecord::last_evaluate() const {
  return last_evaluate_;
}
inline void ProtoCustomerSVCRecord::set_last_evaluate(::google::protobuf::int32 value) {
  set_has_last_evaluate();
  last_evaluate_ = value;
}

// optional int32 opinion_index = 9;
inline bool ProtoCustomerSVCRecord::has_opinion_index() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProtoCustomerSVCRecord::set_has_opinion_index() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProtoCustomerSVCRecord::clear_has_opinion_index() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProtoCustomerSVCRecord::clear_opinion_index() {
  opinion_index_ = 0;
  clear_has_opinion_index();
}
inline ::google::protobuf::int32 ProtoCustomerSVCRecord::opinion_index() const {
  return opinion_index_;
}
inline void ProtoCustomerSVCRecord::set_opinion_index(::google::protobuf::int32 value) {
  set_has_opinion_index();
  opinion_index_ = value;
}

// optional int32 evaluate_star = 10;
inline bool ProtoCustomerSVCRecord::has_evaluate_star() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProtoCustomerSVCRecord::set_has_evaluate_star() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ProtoCustomerSVCRecord::clear_has_evaluate_star() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ProtoCustomerSVCRecord::clear_evaluate_star() {
  evaluate_star_ = 0;
  clear_has_evaluate_star();
}
inline ::google::protobuf::int32 ProtoCustomerSVCRecord::evaluate_star() const {
  return evaluate_star_;
}
inline void ProtoCustomerSVCRecord::set_evaluate_star(::google::protobuf::int32 value) {
  set_has_evaluate_star();
  evaluate_star_ = value;
}

// -------------------------------------------------------------------

// ProtoMediaGiftDef

// optional int32 gift_sort = 1;
inline bool ProtoMediaGiftDef::has_gift_sort() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoMediaGiftDef::set_has_gift_sort() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoMediaGiftDef::clear_has_gift_sort() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoMediaGiftDef::clear_gift_sort() {
  gift_sort_ = 0;
  clear_has_gift_sort();
}
inline ::google::protobuf::int32 ProtoMediaGiftDef::gift_sort() const {
  return gift_sort_;
}
inline void ProtoMediaGiftDef::set_gift_sort(::google::protobuf::int32 value) {
  set_has_gift_sort();
  gift_sort_ = value;
}

// optional int32 gift_type = 2;
inline bool ProtoMediaGiftDef::has_gift_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoMediaGiftDef::set_has_gift_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoMediaGiftDef::clear_has_gift_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoMediaGiftDef::clear_gift_type() {
  gift_type_ = 0;
  clear_has_gift_type();
}
inline ::google::protobuf::int32 ProtoMediaGiftDef::gift_type() const {
  return gift_type_;
}
inline void ProtoMediaGiftDef::set_gift_type(::google::protobuf::int32 value) {
  set_has_gift_type();
  gift_type_ = value;
}

// repeated .ProtoPairObj value_exts = 3;
inline int ProtoMediaGiftDef::value_exts_size() const {
  return value_exts_.size();
}
inline void ProtoMediaGiftDef::clear_value_exts() {
  value_exts_.Clear();
}
inline const ::ProtoPairObj& ProtoMediaGiftDef::value_exts(int index) const {
  return value_exts_.Get(index);
}
inline ::ProtoPairObj* ProtoMediaGiftDef::mutable_value_exts(int index) {
  return value_exts_.Mutable(index);
}
inline ::ProtoPairObj* ProtoMediaGiftDef::add_value_exts() {
  return value_exts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >&
ProtoMediaGiftDef::value_exts() const {
  return value_exts_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >*
ProtoMediaGiftDef::mutable_value_exts() {
  return &value_exts_;
}

// repeated .ProtoItem gift_items = 4;
inline int ProtoMediaGiftDef::gift_items_size() const {
  return gift_items_.size();
}
inline void ProtoMediaGiftDef::clear_gift_items() {
  gift_items_.Clear();
}
inline const ::ProtoItem& ProtoMediaGiftDef::gift_items(int index) const {
  return gift_items_.Get(index);
}
inline ::ProtoItem* ProtoMediaGiftDef::mutable_gift_items(int index) {
  return gift_items_.Mutable(index);
}
inline ::ProtoItem* ProtoMediaGiftDef::add_gift_items() {
  return gift_items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoItem >&
ProtoMediaGiftDef::gift_items() const {
  return gift_items_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoItem >*
ProtoMediaGiftDef::mutable_gift_items() {
  return &gift_items_;
}

// optional string gift_name = 5;
inline bool ProtoMediaGiftDef::has_gift_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoMediaGiftDef::set_has_gift_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoMediaGiftDef::clear_has_gift_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoMediaGiftDef::clear_gift_name() {
  if (gift_name_ != &::google::protobuf::internal::kEmptyString) {
    gift_name_->clear();
  }
  clear_has_gift_name();
}
inline const ::std::string& ProtoMediaGiftDef::gift_name() const {
  return *gift_name_;
}
inline void ProtoMediaGiftDef::set_gift_name(const ::std::string& value) {
  set_has_gift_name();
  if (gift_name_ == &::google::protobuf::internal::kEmptyString) {
    gift_name_ = new ::std::string;
  }
  gift_name_->assign(value);
}
inline void ProtoMediaGiftDef::set_gift_name(const char* value) {
  set_has_gift_name();
  if (gift_name_ == &::google::protobuf::internal::kEmptyString) {
    gift_name_ = new ::std::string;
  }
  gift_name_->assign(value);
}
inline void ProtoMediaGiftDef::set_gift_name(const char* value, size_t size) {
  set_has_gift_name();
  if (gift_name_ == &::google::protobuf::internal::kEmptyString) {
    gift_name_ = new ::std::string;
  }
  gift_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoMediaGiftDef::mutable_gift_name() {
  set_has_gift_name();
  if (gift_name_ == &::google::protobuf::internal::kEmptyString) {
    gift_name_ = new ::std::string;
  }
  return gift_name_;
}
inline ::std::string* ProtoMediaGiftDef::release_gift_name() {
  clear_has_gift_name();
  if (gift_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gift_name_;
    gift_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string gift_desc = 6;
inline bool ProtoMediaGiftDef::has_gift_desc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoMediaGiftDef::set_has_gift_desc() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoMediaGiftDef::clear_has_gift_desc() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoMediaGiftDef::clear_gift_desc() {
  if (gift_desc_ != &::google::protobuf::internal::kEmptyString) {
    gift_desc_->clear();
  }
  clear_has_gift_desc();
}
inline const ::std::string& ProtoMediaGiftDef::gift_desc() const {
  return *gift_desc_;
}
inline void ProtoMediaGiftDef::set_gift_desc(const ::std::string& value) {
  set_has_gift_desc();
  if (gift_desc_ == &::google::protobuf::internal::kEmptyString) {
    gift_desc_ = new ::std::string;
  }
  gift_desc_->assign(value);
}
inline void ProtoMediaGiftDef::set_gift_desc(const char* value) {
  set_has_gift_desc();
  if (gift_desc_ == &::google::protobuf::internal::kEmptyString) {
    gift_desc_ = new ::std::string;
  }
  gift_desc_->assign(value);
}
inline void ProtoMediaGiftDef::set_gift_desc(const char* value, size_t size) {
  set_has_gift_desc();
  if (gift_desc_ == &::google::protobuf::internal::kEmptyString) {
    gift_desc_ = new ::std::string;
  }
  gift_desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoMediaGiftDef::mutable_gift_desc() {
  set_has_gift_desc();
  if (gift_desc_ == &::google::protobuf::internal::kEmptyString) {
    gift_desc_ = new ::std::string;
  }
  return gift_desc_;
}
inline ::std::string* ProtoMediaGiftDef::release_gift_desc() {
  clear_has_gift_desc();
  if (gift_desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gift_desc_;
    gift_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 use_times = 7;
inline bool ProtoMediaGiftDef::has_use_times() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoMediaGiftDef::set_has_use_times() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoMediaGiftDef::clear_has_use_times() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoMediaGiftDef::clear_use_times() {
  use_times_ = 0;
  clear_has_use_times();
}
inline ::google::protobuf::int32 ProtoMediaGiftDef::use_times() const {
  return use_times_;
}
inline void ProtoMediaGiftDef::set_use_times(::google::protobuf::int32 value) {
  set_has_use_times();
  use_times_ = value;
}

// optional int32 left_use_times = 8;
inline bool ProtoMediaGiftDef::has_left_use_times() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoMediaGiftDef::set_has_left_use_times() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoMediaGiftDef::clear_has_left_use_times() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoMediaGiftDef::clear_left_use_times() {
  left_use_times_ = 0;
  clear_has_left_use_times();
}
inline ::google::protobuf::int32 ProtoMediaGiftDef::left_use_times() const {
  return left_use_times_;
}
inline void ProtoMediaGiftDef::set_left_use_times(::google::protobuf::int32 value) {
  set_has_left_use_times();
  left_use_times_ = value;
}

// optional int32 icon_id = 9;
inline bool ProtoMediaGiftDef::has_icon_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProtoMediaGiftDef::set_has_icon_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProtoMediaGiftDef::clear_has_icon_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProtoMediaGiftDef::clear_icon_id() {
  icon_id_ = 0;
  clear_has_icon_id();
}
inline ::google::protobuf::int32 ProtoMediaGiftDef::icon_id() const {
  return icon_id_;
}
inline void ProtoMediaGiftDef::set_icon_id(::google::protobuf::int32 value) {
  set_has_icon_id();
  icon_id_ = value;
}

// repeated int32 font_color = 10;
inline int ProtoMediaGiftDef::font_color_size() const {
  return font_color_.size();
}
inline void ProtoMediaGiftDef::clear_font_color() {
  font_color_.Clear();
}
inline ::google::protobuf::int32 ProtoMediaGiftDef::font_color(int index) const {
  return font_color_.Get(index);
}
inline void ProtoMediaGiftDef::set_font_color(int index, ::google::protobuf::int32 value) {
  font_color_.Set(index, value);
}
inline void ProtoMediaGiftDef::add_font_color(::google::protobuf::int32 value) {
  font_color_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProtoMediaGiftDef::font_color() const {
  return font_color_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProtoMediaGiftDef::mutable_font_color() {
  return &font_color_;
}

// -------------------------------------------------------------------

// ProtoAreaRole

// optional int64 id = 1;
inline bool ProtoAreaRole::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoAreaRole::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoAreaRole::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoAreaRole::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 ProtoAreaRole::id() const {
  return id_;
}
inline void ProtoAreaRole::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool ProtoAreaRole::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoAreaRole::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoAreaRole::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoAreaRole::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ProtoAreaRole::name() const {
  return *name_;
}
inline void ProtoAreaRole::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ProtoAreaRole::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ProtoAreaRole::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoAreaRole::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ProtoAreaRole::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 rank = 3;
inline bool ProtoAreaRole::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoAreaRole::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoAreaRole::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoAreaRole::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 ProtoAreaRole::rank() const {
  return rank_;
}
inline void ProtoAreaRole::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional int32 force = 4;
inline bool ProtoAreaRole::has_force() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoAreaRole::set_has_force() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoAreaRole::clear_has_force() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoAreaRole::clear_force() {
  force_ = 0;
  clear_has_force();
}
inline ::google::protobuf::int32 ProtoAreaRole::force() const {
  return force_;
}
inline void ProtoAreaRole::set_force(::google::protobuf::int32 value) {
  set_has_force();
  force_ = value;
}

// optional int32 sex = 5;
inline bool ProtoAreaRole::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoAreaRole::set_has_sex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoAreaRole::clear_has_sex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoAreaRole::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 ProtoAreaRole::sex() const {
  return sex_;
}
inline void ProtoAreaRole::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// optional int32 weapon = 6;
inline bool ProtoAreaRole::has_weapon() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoAreaRole::set_has_weapon() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoAreaRole::clear_has_weapon() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoAreaRole::clear_weapon() {
  weapon_ = 0;
  clear_has_weapon();
}
inline ::google::protobuf::int32 ProtoAreaRole::weapon() const {
  return weapon_;
}
inline void ProtoAreaRole::set_weapon(::google::protobuf::int32 value) {
  set_has_weapon();
  weapon_ = value;
}

// optional int32 clothes = 7;
inline bool ProtoAreaRole::has_clothes() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoAreaRole::set_has_clothes() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoAreaRole::clear_has_clothes() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoAreaRole::clear_clothes() {
  clothes_ = 0;
  clear_has_clothes();
}
inline ::google::protobuf::int32 ProtoAreaRole::clothes() const {
  return clothes_;
}
inline void ProtoAreaRole::set_clothes(::google::protobuf::int32 value) {
  set_has_clothes();
  clothes_ = value;
}

// optional int32 fashion_weapon = 8;
inline bool ProtoAreaRole::has_fashion_weapon() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoAreaRole::set_has_fashion_weapon() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoAreaRole::clear_has_fashion_weapon() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoAreaRole::clear_fashion_weapon() {
  fashion_weapon_ = 0;
  clear_has_fashion_weapon();
}
inline ::google::protobuf::int32 ProtoAreaRole::fashion_weapon() const {
  return fashion_weapon_;
}
inline void ProtoAreaRole::set_fashion_weapon(::google::protobuf::int32 value) {
  set_has_fashion_weapon();
  fashion_weapon_ = value;
}

// optional int32 fashion_clothes = 9;
inline bool ProtoAreaRole::has_fashion_clothes() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProtoAreaRole::set_has_fashion_clothes() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProtoAreaRole::clear_has_fashion_clothes() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProtoAreaRole::clear_fashion_clothes() {
  fashion_clothes_ = 0;
  clear_has_fashion_clothes();
}
inline ::google::protobuf::int32 ProtoAreaRole::fashion_clothes() const {
  return fashion_clothes_;
}
inline void ProtoAreaRole::set_fashion_clothes(::google::protobuf::int32 value) {
  set_has_fashion_clothes();
  fashion_clothes_ = value;
}

// optional int32 level = 10;
inline bool ProtoAreaRole::has_level() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProtoAreaRole::set_has_level() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ProtoAreaRole::clear_has_level() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ProtoAreaRole::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ProtoAreaRole::level() const {
  return level_;
}
inline void ProtoAreaRole::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 career = 11;
inline bool ProtoAreaRole::has_career() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ProtoAreaRole::set_has_career() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ProtoAreaRole::clear_has_career() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ProtoAreaRole::clear_career() {
  career_ = 0;
  clear_has_career();
}
inline ::google::protobuf::int32 ProtoAreaRole::career() const {
  return career_;
}
inline void ProtoAreaRole::set_career(::google::protobuf::int32 value) {
  set_has_career();
  career_ = value;
}

// optional int32 wing_level = 12;
inline bool ProtoAreaRole::has_wing_level() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ProtoAreaRole::set_has_wing_level() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ProtoAreaRole::clear_has_wing_level() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ProtoAreaRole::clear_wing_level() {
  wing_level_ = 0;
  clear_has_wing_level();
}
inline ::google::protobuf::int32 ProtoAreaRole::wing_level() const {
  return wing_level_;
}
inline void ProtoAreaRole::set_wing_level(::google::protobuf::int32 value) {
  set_has_wing_level();
  wing_level_ = value;
}

// optional int32 solider_level = 13;
inline bool ProtoAreaRole::has_solider_level() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ProtoAreaRole::set_has_solider_level() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ProtoAreaRole::clear_has_solider_level() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ProtoAreaRole::clear_solider_level() {
  solider_level_ = 0;
  clear_has_solider_level();
}
inline ::google::protobuf::int32 ProtoAreaRole::solider_level() const {
  return solider_level_;
}
inline void ProtoAreaRole::set_solider_level(::google::protobuf::int32 value) {
  set_has_solider_level();
  solider_level_ = value;
}

// -------------------------------------------------------------------

// ProtoScriptInfo

// optional int32 script_sort = 1;
inline bool ProtoScriptInfo::has_script_sort() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoScriptInfo::set_has_script_sort() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoScriptInfo::clear_has_script_sort() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoScriptInfo::clear_script_sort() {
  script_sort_ = 0;
  clear_has_script_sort();
}
inline ::google::protobuf::int32 ProtoScriptInfo::script_sort() const {
  return script_sort_;
}
inline void ProtoScriptInfo::set_script_sort(::google::protobuf::int32 value) {
  set_has_script_sort();
  script_sort_ = value;
}

// optional int32 left_times = 2;
inline bool ProtoScriptInfo::has_left_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoScriptInfo::set_has_left_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoScriptInfo::clear_has_left_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoScriptInfo::clear_left_times() {
  left_times_ = 0;
  clear_has_left_times();
}
inline ::google::protobuf::int32 ProtoScriptInfo::left_times() const {
  return left_times_;
}
inline void ProtoScriptInfo::set_left_times(::google::protobuf::int32 value) {
  set_has_left_times();
  left_times_ = value;
}

// optional int32 star_level = 3;
inline bool ProtoScriptInfo::has_star_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoScriptInfo::set_has_star_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoScriptInfo::clear_has_star_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoScriptInfo::clear_star_level() {
  star_level_ = 0;
  clear_has_star_level();
}
inline ::google::protobuf::int32 ProtoScriptInfo::star_level() const {
  return star_level_;
}
inline void ProtoScriptInfo::set_star_level(::google::protobuf::int32 value) {
  set_has_star_level();
  star_level_ = value;
}

// optional int32 is_pass = 4;
inline bool ProtoScriptInfo::has_is_pass() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoScriptInfo::set_has_is_pass() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoScriptInfo::clear_has_is_pass() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoScriptInfo::clear_is_pass() {
  is_pass_ = 0;
  clear_has_is_pass();
}
inline ::google::protobuf::int32 ProtoScriptInfo::is_pass() const {
  return is_pass_;
}
inline void ProtoScriptInfo::set_is_pass(::google::protobuf::int32 value) {
  set_has_is_pass();
  is_pass_ = value;
}

// optional int32 is_open = 5;
inline bool ProtoScriptInfo::has_is_open() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoScriptInfo::set_has_is_open() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoScriptInfo::clear_has_is_open() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoScriptInfo::clear_is_open() {
  is_open_ = 0;
  clear_has_is_open();
}
inline ::google::protobuf::int32 ProtoScriptInfo::is_open() const {
  return is_open_;
}
inline void ProtoScriptInfo::set_is_open(::google::protobuf::int32 value) {
  set_has_is_open();
  is_open_ = value;
}

// optional int32 left_buy_times = 6;
inline bool ProtoScriptInfo::has_left_buy_times() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoScriptInfo::set_has_left_buy_times() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoScriptInfo::clear_has_left_buy_times() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoScriptInfo::clear_left_buy_times() {
  left_buy_times_ = 0;
  clear_has_left_buy_times();
}
inline ::google::protobuf::int32 ProtoScriptInfo::left_buy_times() const {
  return left_buy_times_;
}
inline void ProtoScriptInfo::set_left_buy_times(::google::protobuf::int32 value) {
  set_has_left_buy_times();
  left_buy_times_ = value;
}

// optional int32 buy_times = 7;
inline bool ProtoScriptInfo::has_buy_times() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoScriptInfo::set_has_buy_times() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoScriptInfo::clear_has_buy_times() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoScriptInfo::clear_buy_times() {
  buy_times_ = 0;
  clear_has_buy_times();
}
inline ::google::protobuf::int32 ProtoScriptInfo::buy_times() const {
  return buy_times_;
}
inline void ProtoScriptInfo::set_buy_times(::google::protobuf::int32 value) {
  set_has_buy_times();
  buy_times_ = value;
}

// optional int32 left_get = 8;
inline bool ProtoScriptInfo::has_left_get() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoScriptInfo::set_has_left_get() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoScriptInfo::clear_has_left_get() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoScriptInfo::clear_left_get() {
  left_get_ = 0;
  clear_has_left_get();
}
inline ::google::protobuf::int32 ProtoScriptInfo::left_get() const {
  return left_get_;
}
inline void ProtoScriptInfo::set_left_get(::google::protobuf::int32 value) {
  set_has_left_get();
  left_get_ = value;
}

// optional int32 today_rank = 9;
inline bool ProtoScriptInfo::has_today_rank() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProtoScriptInfo::set_has_today_rank() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProtoScriptInfo::clear_has_today_rank() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProtoScriptInfo::clear_today_rank() {
  today_rank_ = 0;
  clear_has_today_rank();
}
inline ::google::protobuf::int32 ProtoScriptInfo::today_rank() const {
  return today_rank_;
}
inline void ProtoScriptInfo::set_today_rank(::google::protobuf::int32 value) {
  set_has_today_rank();
  today_rank_ = value;
}

// repeated .ProtoFloorInfo floor_info = 10;
inline int ProtoScriptInfo::floor_info_size() const {
  return floor_info_.size();
}
inline void ProtoScriptInfo::clear_floor_info() {
  floor_info_.Clear();
}
inline const ::ProtoFloorInfo& ProtoScriptInfo::floor_info(int index) const {
  return floor_info_.Get(index);
}
inline ::ProtoFloorInfo* ProtoScriptInfo::mutable_floor_info(int index) {
  return floor_info_.Mutable(index);
}
inline ::ProtoFloorInfo* ProtoScriptInfo::add_floor_info() {
  return floor_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoFloorInfo >&
ProtoScriptInfo::floor_info() const {
  return floor_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoFloorInfo >*
ProtoScriptInfo::mutable_floor_info() {
  return &floor_info_;
}

// optional int32 pass_floor = 11;
inline bool ProtoScriptInfo::has_pass_floor() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ProtoScriptInfo::set_has_pass_floor() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ProtoScriptInfo::clear_has_pass_floor() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ProtoScriptInfo::clear_pass_floor() {
  pass_floor_ = 0;
  clear_has_pass_floor();
}
inline ::google::protobuf::int32 ProtoScriptInfo::pass_floor() const {
  return pass_floor_;
}
inline void ProtoScriptInfo::set_pass_floor(::google::protobuf::int32 value) {
  set_has_pass_floor();
  pass_floor_ = value;
}

// optional int32 reset_times = 12;
inline bool ProtoScriptInfo::has_reset_times() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ProtoScriptInfo::set_has_reset_times() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ProtoScriptInfo::clear_has_reset_times() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ProtoScriptInfo::clear_reset_times() {
  reset_times_ = 0;
  clear_has_reset_times();
}
inline ::google::protobuf::int32 ProtoScriptInfo::reset_times() const {
  return reset_times_;
}
inline void ProtoScriptInfo::set_reset_times(::google::protobuf::int32 value) {
  set_has_reset_times();
  reset_times_ = value;
}

// optional int32 is_sweep = 13;
inline bool ProtoScriptInfo::has_is_sweep() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ProtoScriptInfo::set_has_is_sweep() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ProtoScriptInfo::clear_has_is_sweep() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ProtoScriptInfo::clear_is_sweep() {
  is_sweep_ = 0;
  clear_has_is_sweep();
}
inline ::google::protobuf::int32 ProtoScriptInfo::is_sweep() const {
  return is_sweep_;
}
inline void ProtoScriptInfo::set_is_sweep(::google::protobuf::int32 value) {
  set_has_is_sweep();
  is_sweep_ = value;
}

// optional int32 pass_piece = 14;
inline bool ProtoScriptInfo::has_pass_piece() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ProtoScriptInfo::set_has_pass_piece() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ProtoScriptInfo::clear_has_pass_piece() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ProtoScriptInfo::clear_pass_piece() {
  pass_piece_ = 0;
  clear_has_pass_piece();
}
inline ::google::protobuf::int32 ProtoScriptInfo::pass_piece() const {
  return pass_piece_;
}
inline void ProtoScriptInfo::set_pass_piece(::google::protobuf::int32 value) {
  set_has_pass_piece();
  pass_piece_ = value;
}

// optional int32 pass_chapter = 15;
inline bool ProtoScriptInfo::has_pass_chapter() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ProtoScriptInfo::set_has_pass_chapter() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ProtoScriptInfo::clear_has_pass_chapter() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ProtoScriptInfo::clear_pass_chapter() {
  pass_chapter_ = 0;
  clear_has_pass_chapter();
}
inline ::google::protobuf::int32 ProtoScriptInfo::pass_chapter() const {
  return pass_chapter_;
}
inline void ProtoScriptInfo::set_pass_chapter(::google::protobuf::int32 value) {
  set_has_pass_chapter();
  pass_chapter_ = value;
}

// repeated .ProtoSpecialAwardInfo special_info = 16;
inline int ProtoScriptInfo::special_info_size() const {
  return special_info_.size();
}
inline void ProtoScriptInfo::clear_special_info() {
  special_info_.Clear();
}
inline const ::ProtoSpecialAwardInfo& ProtoScriptInfo::special_info(int index) const {
  return special_info_.Get(index);
}
inline ::ProtoSpecialAwardInfo* ProtoScriptInfo::mutable_special_info(int index) {
  return special_info_.Mutable(index);
}
inline ::ProtoSpecialAwardInfo* ProtoScriptInfo::add_special_info() {
  return special_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoSpecialAwardInfo >&
ProtoScriptInfo::special_info() const {
  return special_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoSpecialAwardInfo >*
ProtoScriptInfo::mutable_special_info() {
  return &special_info_;
}

// optional int32 is_first_pass = 17;
inline bool ProtoScriptInfo::has_is_first_pass() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ProtoScriptInfo::set_has_is_first_pass() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ProtoScriptInfo::clear_has_is_first_pass() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ProtoScriptInfo::clear_is_first_pass() {
  is_first_pass_ = 0;
  clear_has_is_first_pass();
}
inline ::google::protobuf::int32 ProtoScriptInfo::is_first_pass() const {
  return is_first_pass_;
}
inline void ProtoScriptInfo::set_is_first_pass(::google::protobuf::int32 value) {
  set_has_is_first_pass();
  is_first_pass_ = value;
}

// optional int32 skill_id = 18;
inline bool ProtoScriptInfo::has_skill_id() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ProtoScriptInfo::set_has_skill_id() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ProtoScriptInfo::clear_has_skill_id() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ProtoScriptInfo::clear_skill_id() {
  skill_id_ = 0;
  clear_has_skill_id();
}
inline ::google::protobuf::int32 ProtoScriptInfo::skill_id() const {
  return skill_id_;
}
inline void ProtoScriptInfo::set_skill_id(::google::protobuf::int32 value) {
  set_has_skill_id();
  skill_id_ = value;
}

// optional int32 start_wave = 19;
inline bool ProtoScriptInfo::has_start_wave() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ProtoScriptInfo::set_has_start_wave() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ProtoScriptInfo::clear_has_start_wave() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ProtoScriptInfo::clear_start_wave() {
  start_wave_ = 0;
  clear_has_start_wave();
}
inline ::google::protobuf::int32 ProtoScriptInfo::start_wave() const {
  return start_wave_;
}
inline void ProtoScriptInfo::set_start_wave(::google::protobuf::int32 value) {
  set_has_start_wave();
  start_wave_ = value;
}

// optional int32 start_chapter = 20;
inline bool ProtoScriptInfo::has_start_chapter() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ProtoScriptInfo::set_has_start_chapter() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ProtoScriptInfo::clear_has_start_chapter() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ProtoScriptInfo::clear_start_chapter() {
  start_chapter_ = 0;
  clear_has_start_chapter();
}
inline ::google::protobuf::int32 ProtoScriptInfo::start_chapter() const {
  return start_chapter_;
}
inline void ProtoScriptInfo::set_start_chapter(::google::protobuf::int32 value) {
  set_has_start_chapter();
  start_chapter_ = value;
}

// -------------------------------------------------------------------

// ProtoAreaRecord

// optional int32 pass_time = 1;
inline bool ProtoAreaRecord::has_pass_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoAreaRecord::set_has_pass_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoAreaRecord::clear_has_pass_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoAreaRecord::clear_pass_time() {
  pass_time_ = 0;
  clear_has_pass_time();
}
inline ::google::protobuf::int32 ProtoAreaRecord::pass_time() const {
  return pass_time_;
}
inline void ProtoAreaRecord::set_pass_time(::google::protobuf::int32 value) {
  set_has_pass_time();
  pass_time_ = value;
}

// optional int32 type = 2;
inline bool ProtoAreaRecord::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoAreaRecord::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoAreaRecord::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoAreaRecord::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ProtoAreaRecord::type() const {
  return type_;
}
inline void ProtoAreaRecord::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 state = 3;
inline bool ProtoAreaRecord::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoAreaRecord::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoAreaRecord::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoAreaRecord::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 ProtoAreaRecord::state() const {
  return state_;
}
inline void ProtoAreaRecord::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional string name = 4;
inline bool ProtoAreaRecord::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoAreaRecord::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoAreaRecord::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoAreaRecord::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ProtoAreaRecord::name() const {
  return *name_;
}
inline void ProtoAreaRecord::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ProtoAreaRecord::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ProtoAreaRecord::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoAreaRecord::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ProtoAreaRecord::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 rank = 5;
inline bool ProtoAreaRecord::has_rank() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoAreaRecord::set_has_rank() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoAreaRecord::clear_has_rank() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoAreaRecord::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 ProtoAreaRecord::rank() const {
  return rank_;
}
inline void ProtoAreaRecord::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional int32 rank_change = 6;
inline bool ProtoAreaRecord::has_rank_change() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoAreaRecord::set_has_rank_change() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoAreaRecord::clear_has_rank_change() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoAreaRecord::clear_rank_change() {
  rank_change_ = 0;
  clear_has_rank_change();
}
inline ::google::protobuf::int32 ProtoAreaRecord::rank_change() const {
  return rank_change_;
}
inline void ProtoAreaRecord::set_rank_change(::google::protobuf::int32 value) {
  set_has_rank_change();
  rank_change_ = value;
}

// -------------------------------------------------------------------

// ProtoBuffStatus

// optional int32 buff_id = 1;
inline bool ProtoBuffStatus::has_buff_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoBuffStatus::set_has_buff_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoBuffStatus::clear_has_buff_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoBuffStatus::clear_buff_id() {
  buff_id_ = 0;
  clear_has_buff_id();
}
inline ::google::protobuf::int32 ProtoBuffStatus::buff_id() const {
  return buff_id_;
}
inline void ProtoBuffStatus::set_buff_id(::google::protobuf::int32 value) {
  set_has_buff_id();
  buff_id_ = value;
}

// optional int32 last = 2;
inline bool ProtoBuffStatus::has_last() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoBuffStatus::set_has_last() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoBuffStatus::clear_has_last() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoBuffStatus::clear_last() {
  last_ = 0;
  clear_has_last();
}
inline ::google::protobuf::int32 ProtoBuffStatus::last() const {
  return last_;
}
inline void ProtoBuffStatus::set_last(::google::protobuf::int32 value) {
  set_has_last();
  last_ = value;
}

// optional int32 interval = 3;
inline bool ProtoBuffStatus::has_interval() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoBuffStatus::set_has_interval() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoBuffStatus::clear_has_interval() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoBuffStatus::clear_interval() {
  interval_ = 0;
  clear_has_interval();
}
inline ::google::protobuf::int32 ProtoBuffStatus::interval() const {
  return interval_;
}
inline void ProtoBuffStatus::set_interval(::google::protobuf::int32 value) {
  set_has_interval();
  interval_ = value;
}

// optional int64 check_tick = 4;
inline bool ProtoBuffStatus::has_check_tick() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoBuffStatus::set_has_check_tick() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoBuffStatus::clear_has_check_tick() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoBuffStatus::clear_check_tick() {
  check_tick_ = GOOGLE_LONGLONG(0);
  clear_has_check_tick();
}
inline ::google::protobuf::int64 ProtoBuffStatus::check_tick() const {
  return check_tick_;
}
inline void ProtoBuffStatus::set_check_tick(::google::protobuf::int64 value) {
  set_has_check_tick();
  check_tick_ = value;
}

// repeated int32 prop_id_set = 5;
inline int ProtoBuffStatus::prop_id_set_size() const {
  return prop_id_set_.size();
}
inline void ProtoBuffStatus::clear_prop_id_set() {
  prop_id_set_.Clear();
}
inline ::google::protobuf::int32 ProtoBuffStatus::prop_id_set(int index) const {
  return prop_id_set_.Get(index);
}
inline void ProtoBuffStatus::set_prop_id_set(int index, ::google::protobuf::int32 value) {
  prop_id_set_.Set(index, value);
}
inline void ProtoBuffStatus::add_prop_id_set(::google::protobuf::int32 value) {
  prop_id_set_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProtoBuffStatus::prop_id_set() const {
  return prop_id_set_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProtoBuffStatus::mutable_prop_id_set() {
  return &prop_id_set_;
}

// repeated int32 value_set = 6;
inline int ProtoBuffStatus::value_set_size() const {
  return value_set_.size();
}
inline void ProtoBuffStatus::clear_value_set() {
  value_set_.Clear();
}
inline ::google::protobuf::int32 ProtoBuffStatus::value_set(int index) const {
  return value_set_.Get(index);
}
inline void ProtoBuffStatus::set_value_set(int index, ::google::protobuf::int32 value) {
  value_set_.Set(index, value);
}
inline void ProtoBuffStatus::add_value_set(::google::protobuf::int32 value) {
  value_set_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProtoBuffStatus::value_set() const {
  return value_set_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProtoBuffStatus::mutable_value_set() {
  return &value_set_;
}

// repeated int32 percent_set = 7;
inline int ProtoBuffStatus::percent_set_size() const {
  return percent_set_.size();
}
inline void ProtoBuffStatus::clear_percent_set() {
  percent_set_.Clear();
}
inline ::google::protobuf::int32 ProtoBuffStatus::percent_set(int index) const {
  return percent_set_.Get(index);
}
inline void ProtoBuffStatus::set_percent_set(int index, ::google::protobuf::int32 value) {
  percent_set_.Set(index, value);
}
inline void ProtoBuffStatus::add_percent_set(::google::protobuf::int32 value) {
  percent_set_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProtoBuffStatus::percent_set() const {
  return percent_set_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProtoBuffStatus::mutable_percent_set() {
  return &percent_set_;
}

// optional int32 hidden = 8;
inline bool ProtoBuffStatus::has_hidden() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoBuffStatus::set_has_hidden() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoBuffStatus::clear_has_hidden() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoBuffStatus::clear_hidden() {
  hidden_ = 0;
  clear_has_hidden();
}
inline ::google::protobuf::int32 ProtoBuffStatus::hidden() const {
  return hidden_;
}
inline void ProtoBuffStatus::set_hidden(::google::protobuf::int32 value) {
  set_has_hidden();
  hidden_ = value;
}

// -------------------------------------------------------------------

// ProtoShusanBoss

// optional int32 boss_sort = 1;
inline bool ProtoShusanBoss::has_boss_sort() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoShusanBoss::set_has_boss_sort() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoShusanBoss::clear_has_boss_sort() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoShusanBoss::clear_boss_sort() {
  boss_sort_ = 0;
  clear_has_boss_sort();
}
inline ::google::protobuf::int32 ProtoShusanBoss::boss_sort() const {
  return boss_sort_;
}
inline void ProtoShusanBoss::set_boss_sort(::google::protobuf::int32 value) {
  set_has_boss_sort();
  boss_sort_ = value;
}

// optional int64 boss_id = 2;
inline bool ProtoShusanBoss::has_boss_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoShusanBoss::set_has_boss_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoShusanBoss::clear_has_boss_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoShusanBoss::clear_boss_id() {
  boss_id_ = GOOGLE_LONGLONG(0);
  clear_has_boss_id();
}
inline ::google::protobuf::int64 ProtoShusanBoss::boss_id() const {
  return boss_id_;
}
inline void ProtoShusanBoss::set_boss_id(::google::protobuf::int64 value) {
  set_has_boss_id();
  boss_id_ = value;
}

// optional int32 born_time = 3;
inline bool ProtoShusanBoss::has_born_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoShusanBoss::set_has_born_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoShusanBoss::clear_has_born_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoShusanBoss::clear_born_time() {
  born_time_ = 0;
  clear_has_born_time();
}
inline ::google::protobuf::int32 ProtoShusanBoss::born_time() const {
  return born_time_;
}
inline void ProtoShusanBoss::set_born_time(::google::protobuf::int32 value) {
  set_has_born_time();
  born_time_ = value;
}

// optional .ProtoRoleInfo aim_role = 4;
inline bool ProtoShusanBoss::has_aim_role() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoShusanBoss::set_has_aim_role() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoShusanBoss::clear_has_aim_role() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoShusanBoss::clear_aim_role() {
  if (aim_role_ != NULL) aim_role_->::ProtoRoleInfo::Clear();
  clear_has_aim_role();
}
inline const ::ProtoRoleInfo& ProtoShusanBoss::aim_role() const {
  return aim_role_ != NULL ? *aim_role_ : *default_instance_->aim_role_;
}
inline ::ProtoRoleInfo* ProtoShusanBoss::mutable_aim_role() {
  set_has_aim_role();
  if (aim_role_ == NULL) aim_role_ = new ::ProtoRoleInfo;
  return aim_role_;
}
inline ::ProtoRoleInfo* ProtoShusanBoss::release_aim_role() {
  clear_has_aim_role();
  ::ProtoRoleInfo* temp = aim_role_;
  aim_role_ = NULL;
  return temp;
}

// optional string last_role_name = 5;
inline bool ProtoShusanBoss::has_last_role_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoShusanBoss::set_has_last_role_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoShusanBoss::clear_has_last_role_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoShusanBoss::clear_last_role_name() {
  if (last_role_name_ != &::google::protobuf::internal::kEmptyString) {
    last_role_name_->clear();
  }
  clear_has_last_role_name();
}
inline const ::std::string& ProtoShusanBoss::last_role_name() const {
  return *last_role_name_;
}
inline void ProtoShusanBoss::set_last_role_name(const ::std::string& value) {
  set_has_last_role_name();
  if (last_role_name_ == &::google::protobuf::internal::kEmptyString) {
    last_role_name_ = new ::std::string;
  }
  last_role_name_->assign(value);
}
inline void ProtoShusanBoss::set_last_role_name(const char* value) {
  set_has_last_role_name();
  if (last_role_name_ == &::google::protobuf::internal::kEmptyString) {
    last_role_name_ = new ::std::string;
  }
  last_role_name_->assign(value);
}
inline void ProtoShusanBoss::set_last_role_name(const char* value, size_t size) {
  set_has_last_role_name();
  if (last_role_name_ == &::google::protobuf::internal::kEmptyString) {
    last_role_name_ = new ::std::string;
  }
  last_role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoShusanBoss::mutable_last_role_name() {
  set_has_last_role_name();
  if (last_role_name_ == &::google::protobuf::internal::kEmptyString) {
    last_role_name_ = new ::std::string;
  }
  return last_role_name_;
}
inline ::std::string* ProtoShusanBoss::release_last_role_name() {
  clear_has_last_role_name();
  if (last_role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = last_role_name_;
    last_role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 last_role_id = 6;
inline bool ProtoShusanBoss::has_last_role_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoShusanBoss::set_has_last_role_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoShusanBoss::clear_has_last_role_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoShusanBoss::clear_last_role_id() {
  last_role_id_ = GOOGLE_LONGLONG(0);
  clear_has_last_role_id();
}
inline ::google::protobuf::int64 ProtoShusanBoss::last_role_id() const {
  return last_role_id_;
}
inline void ProtoShusanBoss::set_last_role_id(::google::protobuf::int64 value) {
  set_has_last_role_id();
  last_role_id_ = value;
}

// optional int32 floor = 7;
inline bool ProtoShusanBoss::has_floor() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoShusanBoss::set_has_floor() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoShusanBoss::clear_has_floor() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoShusanBoss::clear_floor() {
  floor_ = 0;
  clear_has_floor();
}
inline ::google::protobuf::int32 ProtoShusanBoss::floor() const {
  return floor_;
}
inline void ProtoShusanBoss::set_floor(::google::protobuf::int32 value) {
  set_has_floor();
  floor_ = value;
}

// optional int32 scene_id = 8;
inline bool ProtoShusanBoss::has_scene_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoShusanBoss::set_has_scene_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoShusanBoss::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoShusanBoss::clear_scene_id() {
  scene_id_ = 0;
  clear_has_scene_id();
}
inline ::google::protobuf::int32 ProtoShusanBoss::scene_id() const {
  return scene_id_;
}
inline void ProtoShusanBoss::set_scene_id(::google::protobuf::int32 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// optional .ProtoCoord born_point = 9;
inline bool ProtoShusanBoss::has_born_point() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProtoShusanBoss::set_has_born_point() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProtoShusanBoss::clear_has_born_point() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProtoShusanBoss::clear_born_point() {
  if (born_point_ != NULL) born_point_->::ProtoCoord::Clear();
  clear_has_born_point();
}
inline const ::ProtoCoord& ProtoShusanBoss::born_point() const {
  return born_point_ != NULL ? *born_point_ : *default_instance_->born_point_;
}
inline ::ProtoCoord* ProtoShusanBoss::mutable_born_point() {
  set_has_born_point();
  if (born_point_ == NULL) born_point_ = new ::ProtoCoord;
  return born_point_;
}
inline ::ProtoCoord* ProtoShusanBoss::release_born_point() {
  clear_has_born_point();
  ::ProtoCoord* temp = born_point_;
  born_point_ = NULL;
  return temp;
}

// optional int32 space_id = 10;
inline bool ProtoShusanBoss::has_space_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProtoShusanBoss::set_has_space_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ProtoShusanBoss::clear_has_space_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ProtoShusanBoss::clear_space_id() {
  space_id_ = 0;
  clear_has_space_id();
}
inline ::google::protobuf::int32 ProtoShusanBoss::space_id() const {
  return space_id_;
}
inline void ProtoShusanBoss::set_space_id(::google::protobuf::int32 value) {
  set_has_space_id();
  space_id_ = value;
}

// optional int32 left_times = 11;
inline bool ProtoShusanBoss::has_left_times() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ProtoShusanBoss::set_has_left_times() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ProtoShusanBoss::clear_has_left_times() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ProtoShusanBoss::clear_left_times() {
  left_times_ = 0;
  clear_has_left_times();
}
inline ::google::protobuf::int32 ProtoShusanBoss::left_times() const {
  return left_times_;
}
inline void ProtoShusanBoss::set_left_times(::google::protobuf::int32 value) {
  set_has_left_times();
  left_times_ = value;
}

// optional int32 is_pack_full = 12;
inline bool ProtoShusanBoss::has_is_pack_full() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ProtoShusanBoss::set_has_is_pack_full() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ProtoShusanBoss::clear_has_is_pack_full() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ProtoShusanBoss::clear_is_pack_full() {
  is_pack_full_ = 0;
  clear_has_is_pack_full();
}
inline ::google::protobuf::int32 ProtoShusanBoss::is_pack_full() const {
  return is_pack_full_;
}
inline void ProtoShusanBoss::set_is_pack_full(::google::protobuf::int32 value) {
  set_has_is_pack_full();
  is_pack_full_ = value;
}

// -------------------------------------------------------------------

// ProtoSuit

// optional int32 level = 1;
inline bool ProtoSuit::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoSuit::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoSuit::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoSuit::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ProtoSuit::level() const {
  return level_;
}
inline void ProtoSuit::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 color = 2;
inline bool ProtoSuit::has_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoSuit::set_has_color() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoSuit::clear_has_color() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoSuit::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::google::protobuf::int32 ProtoSuit::color() const {
  return color_;
}
inline void ProtoSuit::set_color(::google::protobuf::int32 value) {
  set_has_color();
  color_ = value;
}

// optional int32 count = 3;
inline bool ProtoSuit::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoSuit::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoSuit::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoSuit::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 ProtoSuit::count() const {
  return count_;
}
inline void ProtoSuit::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// optional int32 suit_type = 4;
inline bool ProtoSuit::has_suit_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoSuit::set_has_suit_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoSuit::clear_has_suit_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoSuit::clear_suit_type() {
  suit_type_ = 0;
  clear_has_suit_type();
}
inline ::google::protobuf::int32 ProtoSuit::suit_type() const {
  return suit_type_;
}
inline void ProtoSuit::set_suit_type(::google::protobuf::int32 value) {
  set_has_suit_type();
  suit_type_ = value;
}

// optional int32 is_active = 5;
inline bool ProtoSuit::has_is_active() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoSuit::set_has_is_active() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoSuit::clear_has_is_active() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoSuit::clear_is_active() {
  is_active_ = 0;
  clear_has_is_active();
}
inline ::google::protobuf::int32 ProtoSuit::is_active() const {
  return is_active_;
}
inline void ProtoSuit::set_is_active(::google::protobuf::int32 value) {
  set_has_is_active();
  is_active_ = value;
}

// optional int32 upper_is_suit = 6;
inline bool ProtoSuit::has_upper_is_suit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoSuit::set_has_upper_is_suit() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoSuit::clear_has_upper_is_suit() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoSuit::clear_upper_is_suit() {
  upper_is_suit_ = 0;
  clear_has_upper_is_suit();
}
inline ::google::protobuf::int32 ProtoSuit::upper_is_suit() const {
  return upper_is_suit_;
}
inline void ProtoSuit::set_upper_is_suit(::google::protobuf::int32 value) {
  set_has_upper_is_suit();
  upper_is_suit_ = value;
}

// optional int32 is_min_level = 7;
inline bool ProtoSuit::has_is_min_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoSuit::set_has_is_min_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoSuit::clear_has_is_min_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoSuit::clear_is_min_level() {
  is_min_level_ = 0;
  clear_has_is_min_level();
}
inline ::google::protobuf::int32 ProtoSuit::is_min_level() const {
  return is_min_level_;
}
inline void ProtoSuit::set_is_min_level(::google::protobuf::int32 value) {
  set_has_is_min_level();
  is_min_level_ = value;
}

// -------------------------------------------------------------------

// ProtoLvlReward

// optional int32 level = 1;
inline bool ProtoLvlReward::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoLvlReward::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoLvlReward::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoLvlReward::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ProtoLvlReward::level() const {
  return level_;
}
inline void ProtoLvlReward::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 validate = 2;
inline bool ProtoLvlReward::has_validate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoLvlReward::set_has_validate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoLvlReward::clear_has_validate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoLvlReward::clear_validate() {
  validate_ = 0;
  clear_has_validate();
}
inline ::google::protobuf::int32 ProtoLvlReward::validate() const {
  return validate_;
}
inline void ProtoLvlReward::set_validate(::google::protobuf::int32 value) {
  set_has_validate();
  validate_ = value;
}

// repeated .ProtoItem items = 3;
inline int ProtoLvlReward::items_size() const {
  return items_.size();
}
inline void ProtoLvlReward::clear_items() {
  items_.Clear();
}
inline const ::ProtoItem& ProtoLvlReward::items(int index) const {
  return items_.Get(index);
}
inline ::ProtoItem* ProtoLvlReward::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::ProtoItem* ProtoLvlReward::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoItem >&
ProtoLvlReward::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoItem >*
ProtoLvlReward::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// ProtoDailyRecord

// optional int32 id = 1;
inline bool ProtoDailyRecord::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoDailyRecord::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoDailyRecord::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoDailyRecord::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ProtoDailyRecord::id() const {
  return id_;
}
inline void ProtoDailyRecord::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 value = 2;
inline bool ProtoDailyRecord::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoDailyRecord::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoDailyRecord::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoDailyRecord::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 ProtoDailyRecord::value() const {
  return value_;
}
inline void ProtoDailyRecord::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// optional int32 has_reward = 3;
inline bool ProtoDailyRecord::has_has_reward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoDailyRecord::set_has_has_reward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoDailyRecord::clear_has_has_reward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoDailyRecord::clear_has_reward() {
  has_reward_ = 0;
  clear_has_has_reward();
}
inline ::google::protobuf::int32 ProtoDailyRecord::has_reward() const {
  return has_reward_;
}
inline void ProtoDailyRecord::set_has_reward(::google::protobuf::int32 value) {
  set_has_has_reward();
  has_reward_ = value;
}

// optional int32 is_over = 4;
inline bool ProtoDailyRecord::has_is_over() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoDailyRecord::set_has_is_over() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoDailyRecord::clear_has_is_over() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoDailyRecord::clear_is_over() {
  is_over_ = 0;
  clear_has_is_over();
}
inline ::google::protobuf::int32 ProtoDailyRecord::is_over() const {
  return is_over_;
}
inline void ProtoDailyRecord::set_is_over(::google::protobuf::int32 value) {
  set_has_is_over();
  is_over_ = value;
}

// optional int32 curr_value = 5;
inline bool ProtoDailyRecord::has_curr_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoDailyRecord::set_has_curr_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoDailyRecord::clear_has_curr_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoDailyRecord::clear_curr_value() {
  curr_value_ = 0;
  clear_has_curr_value();
}
inline ::google::protobuf::int32 ProtoDailyRecord::curr_value() const {
  return curr_value_;
}
inline void ProtoDailyRecord::set_curr_value(::google::protobuf::int32 value) {
  set_has_curr_value();
  curr_value_ = value;
}

// optional int32 sort = 6;
inline bool ProtoDailyRecord::has_sort() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoDailyRecord::set_has_sort() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoDailyRecord::clear_has_sort() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoDailyRecord::clear_sort() {
  sort_ = 0;
  clear_has_sort();
}
inline ::google::protobuf::int32 ProtoDailyRecord::sort() const {
  return sort_;
}
inline void ProtoDailyRecord::set_sort(::google::protobuf::int32 value) {
  set_has_sort();
  sort_ = value;
}

// -------------------------------------------------------------------

// ProtoRoleShape

// optional int64 role_id = 1;
inline bool ProtoRoleShape::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoRoleShape::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoRoleShape::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoRoleShape::clear_role_id() {
  role_id_ = GOOGLE_LONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::int64 ProtoRoleShape::role_id() const {
  return role_id_;
}
inline void ProtoRoleShape::set_role_id(::google::protobuf::int64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional int32 label = 2;
inline bool ProtoRoleShape::has_label() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoRoleShape::set_has_label() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoRoleShape::clear_has_label() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoRoleShape::clear_label() {
  label_ = 0;
  clear_has_label();
}
inline ::google::protobuf::int32 ProtoRoleShape::label() const {
  return label_;
}
inline void ProtoRoleShape::set_label(::google::protobuf::int32 value) {
  set_has_label();
  label_ = value;
}

// optional int32 weapon = 3;
inline bool ProtoRoleShape::has_weapon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoRoleShape::set_has_weapon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoRoleShape::clear_has_weapon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoRoleShape::clear_weapon() {
  weapon_ = 0;
  clear_has_weapon();
}
inline ::google::protobuf::int32 ProtoRoleShape::weapon() const {
  return weapon_;
}
inline void ProtoRoleShape::set_weapon(::google::protobuf::int32 value) {
  set_has_weapon();
  weapon_ = value;
}

// optional int32 clothes = 4;
inline bool ProtoRoleShape::has_clothes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoRoleShape::set_has_clothes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoRoleShape::clear_has_clothes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoRoleShape::clear_clothes() {
  clothes_ = 0;
  clear_has_clothes();
}
inline ::google::protobuf::int32 ProtoRoleShape::clothes() const {
  return clothes_;
}
inline void ProtoRoleShape::set_clothes(::google::protobuf::int32 value) {
  set_has_clothes();
  clothes_ = value;
}

// optional int32 fashion_weapon = 5;
inline bool ProtoRoleShape::has_fashion_weapon() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoRoleShape::set_has_fashion_weapon() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoRoleShape::clear_has_fashion_weapon() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoRoleShape::clear_fashion_weapon() {
  fashion_weapon_ = 0;
  clear_has_fashion_weapon();
}
inline ::google::protobuf::int32 ProtoRoleShape::fashion_weapon() const {
  return fashion_weapon_;
}
inline void ProtoRoleShape::set_fashion_weapon(::google::protobuf::int32 value) {
  set_has_fashion_weapon();
  fashion_weapon_ = value;
}

// optional int32 fashion_clothes = 6;
inline bool ProtoRoleShape::has_fashion_clothes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoRoleShape::set_has_fashion_clothes() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoRoleShape::clear_has_fashion_clothes() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoRoleShape::clear_fashion_clothes() {
  fashion_clothes_ = 0;
  clear_has_fashion_clothes();
}
inline ::google::protobuf::int32 ProtoRoleShape::fashion_clothes() const {
  return fashion_clothes_;
}
inline void ProtoRoleShape::set_fashion_clothes(::google::protobuf::int32 value) {
  set_has_fashion_clothes();
  fashion_clothes_ = value;
}

// optional int32 career = 7;
inline bool ProtoRoleShape::has_career() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoRoleShape::set_has_career() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoRoleShape::clear_has_career() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoRoleShape::clear_career() {
  career_ = 0;
  clear_has_career();
}
inline ::google::protobuf::int32 ProtoRoleShape::career() const {
  return career_;
}
inline void ProtoRoleShape::set_career(::google::protobuf::int32 value) {
  set_has_career();
  career_ = value;
}

// optional int32 sex = 8;
inline bool ProtoRoleShape::has_sex() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoRoleShape::set_has_sex() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoRoleShape::clear_has_sex() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoRoleShape::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 ProtoRoleShape::sex() const {
  return sex_;
}
inline void ProtoRoleShape::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// optional int32 wing = 9;
inline bool ProtoRoleShape::has_wing() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProtoRoleShape::set_has_wing() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProtoRoleShape::clear_has_wing() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProtoRoleShape::clear_wing() {
  wing_ = 0;
  clear_has_wing();
}
inline ::google::protobuf::int32 ProtoRoleShape::wing() const {
  return wing_;
}
inline void ProtoRoleShape::set_wing(::google::protobuf::int32 value) {
  set_has_wing();
  wing_ = value;
}

// optional int32 god_weapon = 10;
inline bool ProtoRoleShape::has_god_weapon() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProtoRoleShape::set_has_god_weapon() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ProtoRoleShape::clear_has_god_weapon() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ProtoRoleShape::clear_god_weapon() {
  god_weapon_ = 0;
  clear_has_god_weapon();
}
inline ::google::protobuf::int32 ProtoRoleShape::god_weapon() const {
  return god_weapon_;
}
inline void ProtoRoleShape::set_god_weapon(::google::protobuf::int32 value) {
  set_has_god_weapon();
  god_weapon_ = value;
}

// optional int32 mount_sort = 11;
inline bool ProtoRoleShape::has_mount_sort() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ProtoRoleShape::set_has_mount_sort() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ProtoRoleShape::clear_has_mount_sort() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ProtoRoleShape::clear_mount_sort() {
  mount_sort_ = 0;
  clear_has_mount_sort();
}
inline ::google::protobuf::int32 ProtoRoleShape::mount_sort() const {
  return mount_sort_;
}
inline void ProtoRoleShape::set_mount_sort(::google::protobuf::int32 value) {
  set_has_mount_sort();
  mount_sort_ = value;
}

// optional int32 sword_pool = 12;
inline bool ProtoRoleShape::has_sword_pool() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ProtoRoleShape::set_has_sword_pool() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ProtoRoleShape::clear_has_sword_pool() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ProtoRoleShape::clear_sword_pool() {
  sword_pool_ = 0;
  clear_has_sword_pool();
}
inline ::google::protobuf::int32 ProtoRoleShape::sword_pool() const {
  return sword_pool_;
}
inline void ProtoRoleShape::set_sword_pool(::google::protobuf::int32 value) {
  set_has_sword_pool();
  sword_pool_ = value;
}

// optional int32 tian_gang = 13;
inline bool ProtoRoleShape::has_tian_gang() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ProtoRoleShape::set_has_tian_gang() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ProtoRoleShape::clear_has_tian_gang() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ProtoRoleShape::clear_tian_gang() {
  tian_gang_ = 0;
  clear_has_tian_gang();
}
inline ::google::protobuf::int32 ProtoRoleShape::tian_gang() const {
  return tian_gang_;
}
inline void ProtoRoleShape::set_tian_gang(::google::protobuf::int32 value) {
  set_has_tian_gang();
  tian_gang_ = value;
}

// optional int32 fashion_id = 14;
inline bool ProtoRoleShape::has_fashion_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ProtoRoleShape::set_has_fashion_id() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ProtoRoleShape::clear_has_fashion_id() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ProtoRoleShape::clear_fashion_id() {
  fashion_id_ = 0;
  clear_has_fashion_id();
}
inline ::google::protobuf::int32 ProtoRoleShape::fashion_id() const {
  return fashion_id_;
}
inline void ProtoRoleShape::set_fashion_id(::google::protobuf::int32 value) {
  set_has_fashion_id();
  fashion_id_ = value;
}

// optional int32 fashion_color = 15;
inline bool ProtoRoleShape::has_fashion_color() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ProtoRoleShape::set_has_fashion_color() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ProtoRoleShape::clear_has_fashion_color() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ProtoRoleShape::clear_fashion_color() {
  fashion_color_ = 0;
  clear_has_fashion_color();
}
inline ::google::protobuf::int32 ProtoRoleShape::fashion_color() const {
  return fashion_color_;
}
inline void ProtoRoleShape::set_fashion_color(::google::protobuf::int32 value) {
  set_has_fashion_color();
  fashion_color_ = value;
}

// optional int32 transfer_id = 16;
inline bool ProtoRoleShape::has_transfer_id() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ProtoRoleShape::set_has_transfer_id() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ProtoRoleShape::clear_has_transfer_id() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ProtoRoleShape::clear_transfer_id() {
  transfer_id_ = 0;
  clear_has_transfer_id();
}
inline ::google::protobuf::int32 ProtoRoleShape::transfer_id() const {
  return transfer_id_;
}
inline void ProtoRoleShape::set_transfer_id(::google::protobuf::int32 value) {
  set_has_transfer_id();
  transfer_id_ = value;
}

// optional int32 hickty_id = 17;
inline bool ProtoRoleShape::has_hickty_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ProtoRoleShape::set_has_hickty_id() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ProtoRoleShape::clear_has_hickty_id() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ProtoRoleShape::clear_hickty_id() {
  hickty_id_ = 0;
  clear_has_hickty_id();
}
inline ::google::protobuf::int32 ProtoRoleShape::hickty_id() const {
  return hickty_id_;
}
inline void ProtoRoleShape::set_hickty_id(::google::protobuf::int32 value) {
  set_has_hickty_id();
  hickty_id_ = value;
}

// -------------------------------------------------------------------

// ProtoCQAttackerInfo

// optional int32 order = 1;
inline bool ProtoCQAttackerInfo::has_order() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoCQAttackerInfo::set_has_order() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoCQAttackerInfo::clear_has_order() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoCQAttackerInfo::clear_order() {
  order_ = 0;
  clear_has_order();
}
inline ::google::protobuf::int32 ProtoCQAttackerInfo::order() const {
  return order_;
}
inline void ProtoCQAttackerInfo::set_order(::google::protobuf::int32 value) {
  set_has_order();
  order_ = value;
}

// optional int64 role_id = 2;
inline bool ProtoCQAttackerInfo::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoCQAttackerInfo::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoCQAttackerInfo::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoCQAttackerInfo::clear_role_id() {
  role_id_ = GOOGLE_LONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::int64 ProtoCQAttackerInfo::role_id() const {
  return role_id_;
}
inline void ProtoCQAttackerInfo::set_role_id(::google::protobuf::int64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string role_name = 3;
inline bool ProtoCQAttackerInfo::has_role_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoCQAttackerInfo::set_has_role_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoCQAttackerInfo::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoCQAttackerInfo::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& ProtoCQAttackerInfo::role_name() const {
  return *role_name_;
}
inline void ProtoCQAttackerInfo::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoCQAttackerInfo::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoCQAttackerInfo::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoCQAttackerInfo::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* ProtoCQAttackerInfo::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 status = 4;
inline bool ProtoCQAttackerInfo::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoCQAttackerInfo::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoCQAttackerInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoCQAttackerInfo::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 ProtoCQAttackerInfo::status() const {
  return status_;
}
inline void ProtoCQAttackerInfo::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// ProtoWing

// optional int32 wing_id = 1;
inline bool ProtoWing::has_wing_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoWing::set_has_wing_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoWing::clear_has_wing_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoWing::clear_wing_id() {
  wing_id_ = 0;
  clear_has_wing_id();
}
inline ::google::protobuf::int32 ProtoWing::wing_id() const {
  return wing_id_;
}
inline void ProtoWing::set_wing_id(::google::protobuf::int32 value) {
  set_has_wing_id();
  wing_id_ = value;
}

// optional int32 wing_level = 2;
inline bool ProtoWing::has_wing_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoWing::set_has_wing_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoWing::clear_has_wing_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoWing::clear_wing_level() {
  wing_level_ = 0;
  clear_has_wing_level();
}
inline ::google::protobuf::int32 ProtoWing::wing_level() const {
  return wing_level_;
}
inline void ProtoWing::set_wing_level(::google::protobuf::int32 value) {
  set_has_wing_level();
  wing_level_ = value;
}

// optional int32 wing_process = 3;
inline bool ProtoWing::has_wing_process() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoWing::set_has_wing_process() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoWing::clear_has_wing_process() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoWing::clear_wing_process() {
  wing_process_ = 0;
  clear_has_wing_process();
}
inline ::google::protobuf::int32 ProtoWing::wing_process() const {
  return wing_process_;
}
inline void ProtoWing::set_wing_process(::google::protobuf::int32 value) {
  set_has_wing_process();
  wing_process_ = value;
}

// -------------------------------------------------------------------

// ProtoCQRank

// optional int32 rank = 1;
inline bool ProtoCQRank::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoCQRank::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoCQRank::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoCQRank::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 ProtoCQRank::rank() const {
  return rank_;
}
inline void ProtoCQRank::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional int64 role_id = 2;
inline bool ProtoCQRank::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoCQRank::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoCQRank::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoCQRank::clear_role_id() {
  role_id_ = GOOGLE_LONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::int64 ProtoCQRank::role_id() const {
  return role_id_;
}
inline void ProtoCQRank::set_role_id(::google::protobuf::int64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string role_name = 3;
inline bool ProtoCQRank::has_role_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoCQRank::set_has_role_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoCQRank::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoCQRank::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& ProtoCQRank::role_name() const {
  return *role_name_;
}
inline void ProtoCQRank::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoCQRank::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoCQRank::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoCQRank::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* ProtoCQRank::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 score = 4;
inline bool ProtoCQRank::has_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoCQRank::set_has_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoCQRank::clear_has_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoCQRank::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 ProtoCQRank::score() const {
  return score_;
}
inline void ProtoCQRank::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// optional int32 fight_time = 5;
inline bool ProtoCQRank::has_fight_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoCQRank::set_has_fight_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoCQRank::clear_has_fight_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoCQRank::clear_fight_time() {
  fight_time_ = 0;
  clear_has_fight_time();
}
inline ::google::protobuf::int32 ProtoCQRank::fight_time() const {
  return fight_time_;
}
inline void ProtoCQRank::set_fight_time(::google::protobuf::int32 value) {
  set_has_fight_time();
  fight_time_ = value;
}

// -------------------------------------------------------------------

// ProtoThreeObj

// optional int64 id = 1;
inline bool ProtoThreeObj::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoThreeObj::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoThreeObj::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoThreeObj::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 ProtoThreeObj::id() const {
  return id_;
}
inline void ProtoThreeObj::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional int32 value = 2;
inline bool ProtoThreeObj::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoThreeObj::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoThreeObj::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoThreeObj::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 ProtoThreeObj::value() const {
  return value_;
}
inline void ProtoThreeObj::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// optional int64 tick = 3;
inline bool ProtoThreeObj::has_tick() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoThreeObj::set_has_tick() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoThreeObj::clear_has_tick() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoThreeObj::clear_tick() {
  tick_ = GOOGLE_LONGLONG(0);
  clear_has_tick();
}
inline ::google::protobuf::int64 ProtoThreeObj::tick() const {
  return tick_;
}
inline void ProtoThreeObj::set_tick(::google::protobuf::int64 value) {
  set_has_tick();
  tick_ = value;
}

// optional int32 total_times = 4;
inline bool ProtoThreeObj::has_total_times() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoThreeObj::set_has_total_times() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoThreeObj::clear_has_total_times() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoThreeObj::clear_total_times() {
  total_times_ = 0;
  clear_has_total_times();
}
inline ::google::protobuf::int32 ProtoThreeObj::total_times() const {
  return total_times_;
}
inline void ProtoThreeObj::set_total_times(::google::protobuf::int32 value) {
  set_has_total_times();
  total_times_ = value;
}

// optional int64 last_tick = 5;
inline bool ProtoThreeObj::has_last_tick() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoThreeObj::set_has_last_tick() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoThreeObj::clear_has_last_tick() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoThreeObj::clear_last_tick() {
  last_tick_ = GOOGLE_LONGLONG(0);
  clear_has_last_tick();
}
inline ::google::protobuf::int64 ProtoThreeObj::last_tick() const {
  return last_tick_;
}
inline void ProtoThreeObj::set_last_tick(::google::protobuf::int64 value) {
  set_has_last_tick();
  last_tick_ = value;
}

// -------------------------------------------------------------------

// ProtoEscortMapItem

// optional int32 type = 1;
inline bool ProtoEscortMapItem::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoEscortMapItem::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoEscortMapItem::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoEscortMapItem::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ProtoEscortMapItem::type() const {
  return type_;
}
inline void ProtoEscortMapItem::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int64 id = 2;
inline bool ProtoEscortMapItem::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoEscortMapItem::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoEscortMapItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoEscortMapItem::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 ProtoEscortMapItem::id() const {
  return id_;
}
inline void ProtoEscortMapItem::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional int32 x = 3;
inline bool ProtoEscortMapItem::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoEscortMapItem::set_has_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoEscortMapItem::clear_has_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoEscortMapItem::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 ProtoEscortMapItem::x() const {
  return x_;
}
inline void ProtoEscortMapItem::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
}

// optional int32 y = 4;
inline bool ProtoEscortMapItem::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoEscortMapItem::set_has_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoEscortMapItem::clear_has_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoEscortMapItem::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 ProtoEscortMapItem::y() const {
  return y_;
}
inline void ProtoEscortMapItem::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
}

// optional string name = 5;
inline bool ProtoEscortMapItem::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoEscortMapItem::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoEscortMapItem::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoEscortMapItem::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ProtoEscortMapItem::name() const {
  return *name_;
}
inline void ProtoEscortMapItem::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ProtoEscortMapItem::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ProtoEscortMapItem::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoEscortMapItem::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ProtoEscortMapItem::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ProtoRefineSuit

// optional int32 is_activity = 1;
inline bool ProtoRefineSuit::has_is_activity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoRefineSuit::set_has_is_activity() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoRefineSuit::clear_has_is_activity() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoRefineSuit::clear_is_activity() {
  is_activity_ = 0;
  clear_has_is_activity();
}
inline ::google::protobuf::int32 ProtoRefineSuit::is_activity() const {
  return is_activity_;
}
inline void ProtoRefineSuit::set_is_activity(::google::protobuf::int32 value) {
  set_has_is_activity();
  is_activity_ = value;
}

// optional int32 level = 2;
inline bool ProtoRefineSuit::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoRefineSuit::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoRefineSuit::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoRefineSuit::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ProtoRefineSuit::level() const {
  return level_;
}
inline void ProtoRefineSuit::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 count = 3;
inline bool ProtoRefineSuit::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoRefineSuit::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoRefineSuit::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoRefineSuit::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 ProtoRefineSuit::count() const {
  return count_;
}
inline void ProtoRefineSuit::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// ProtoPanicItem

// optional int32 item_id = 1;
inline bool ProtoPanicItem::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoPanicItem::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoPanicItem::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoPanicItem::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
}
inline ::google::protobuf::int32 ProtoPanicItem::item_id() const {
  return item_id_;
}
inline void ProtoPanicItem::set_item_id(::google::protobuf::int32 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional int32 org_price = 2;
inline bool ProtoPanicItem::has_org_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoPanicItem::set_has_org_price() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoPanicItem::clear_has_org_price() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoPanicItem::clear_org_price() {
  org_price_ = 0;
  clear_has_org_price();
}
inline ::google::protobuf::int32 ProtoPanicItem::org_price() const {
  return org_price_;
}
inline void ProtoPanicItem::set_org_price(::google::protobuf::int32 value) {
  set_has_org_price();
  org_price_ = value;
}

// optional int32 price = 3;
inline bool ProtoPanicItem::has_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoPanicItem::set_has_price() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoPanicItem::clear_has_price() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoPanicItem::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline ::google::protobuf::int32 ProtoPanicItem::price() const {
  return price_;
}
inline void ProtoPanicItem::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
}

// optional int32 left_amount = 4;
inline bool ProtoPanicItem::has_left_amount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoPanicItem::set_has_left_amount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoPanicItem::clear_has_left_amount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoPanicItem::clear_left_amount() {
  left_amount_ = 0;
  clear_has_left_amount();
}
inline ::google::protobuf::int32 ProtoPanicItem::left_amount() const {
  return left_amount_;
}
inline void ProtoPanicItem::set_left_amount(::google::protobuf::int32 value) {
  set_has_left_amount();
  left_amount_ = value;
}

// optional int32 limit_buy = 5;
inline bool ProtoPanicItem::has_limit_buy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoPanicItem::set_has_limit_buy() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoPanicItem::clear_has_limit_buy() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoPanicItem::clear_limit_buy() {
  limit_buy_ = 0;
  clear_has_limit_buy();
}
inline ::google::protobuf::int32 ProtoPanicItem::limit_buy() const {
  return limit_buy_;
}
inline void ProtoPanicItem::set_limit_buy(::google::protobuf::int32 value) {
  set_has_limit_buy();
  limit_buy_ = value;
}

// optional int32 left_buy_times = 6;
inline bool ProtoPanicItem::has_left_buy_times() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoPanicItem::set_has_left_buy_times() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoPanicItem::clear_has_left_buy_times() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoPanicItem::clear_left_buy_times() {
  left_buy_times_ = 0;
  clear_has_left_buy_times();
}
inline ::google::protobuf::int32 ProtoPanicItem::left_buy_times() const {
  return left_buy_times_;
}
inline void ProtoPanicItem::set_left_buy_times(::google::protobuf::int32 value) {
  set_has_left_buy_times();
  left_buy_times_ = value;
}

// optional int32 type = 7;
inline bool ProtoPanicItem::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoPanicItem::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoPanicItem::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoPanicItem::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ProtoPanicItem::type() const {
  return type_;
}
inline void ProtoPanicItem::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 item_bind = 8;
inline bool ProtoPanicItem::has_item_bind() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoPanicItem::set_has_item_bind() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoPanicItem::clear_has_item_bind() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoPanicItem::clear_item_bind() {
  item_bind_ = 0;
  clear_has_item_bind();
}
inline ::google::protobuf::int32 ProtoPanicItem::item_bind() const {
  return item_bind_;
}
inline void ProtoPanicItem::set_item_bind(::google::protobuf::int32 value) {
  set_has_item_bind();
  item_bind_ = value;
}

// -------------------------------------------------------------------

// ProtoKiller

// optional int64 role_id = 1;
inline bool ProtoKiller::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoKiller::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoKiller::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoKiller::clear_role_id() {
  role_id_ = GOOGLE_LONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::int64 ProtoKiller::role_id() const {
  return role_id_;
}
inline void ProtoKiller::set_role_id(::google::protobuf::int64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string role_name = 2;
inline bool ProtoKiller::has_role_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoKiller::set_has_role_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoKiller::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoKiller::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& ProtoKiller::role_name() const {
  return *role_name_;
}
inline void ProtoKiller::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoKiller::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoKiller::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoKiller::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* ProtoKiller::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 role_level = 3;
inline bool ProtoKiller::has_role_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoKiller::set_has_role_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoKiller::clear_has_role_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoKiller::clear_role_level() {
  role_level_ = 0;
  clear_has_role_level();
}
inline ::google::protobuf::int32 ProtoKiller::role_level() const {
  return role_level_;
}
inline void ProtoKiller::set_role_level(::google::protobuf::int32 value) {
  set_has_role_level();
  role_level_ = value;
}

// optional int32 fight_force = 4;
inline bool ProtoKiller::has_fight_force() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoKiller::set_has_fight_force() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoKiller::clear_has_fight_force() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoKiller::clear_fight_force() {
  fight_force_ = 0;
  clear_has_fight_force();
}
inline ::google::protobuf::int32 ProtoKiller::fight_force() const {
  return fight_force_;
}
inline void ProtoKiller::set_fight_force(::google::protobuf::int32 value) {
  set_has_fight_force();
  fight_force_ = value;
}

// optional int32 kill_times = 5;
inline bool ProtoKiller::has_kill_times() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoKiller::set_has_kill_times() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoKiller::clear_has_kill_times() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoKiller::clear_kill_times() {
  kill_times_ = 0;
  clear_has_kill_times();
}
inline ::google::protobuf::int32 ProtoKiller::kill_times() const {
  return kill_times_;
}
inline void ProtoKiller::set_kill_times(::google::protobuf::int32 value) {
  set_has_kill_times();
  kill_times_ = value;
}

// optional int32 lastest_kill_tick = 6;
inline bool ProtoKiller::has_lastest_kill_tick() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoKiller::set_has_lastest_kill_tick() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoKiller::clear_has_lastest_kill_tick() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoKiller::clear_lastest_kill_tick() {
  lastest_kill_tick_ = 0;
  clear_has_lastest_kill_tick();
}
inline ::google::protobuf::int32 ProtoKiller::lastest_kill_tick() const {
  return lastest_kill_tick_;
}
inline void ProtoKiller::set_lastest_kill_tick(::google::protobuf::int32 value) {
  set_has_lastest_kill_tick();
  lastest_kill_tick_ = value;
}

// optional int32 is_in_scene = 7;
inline bool ProtoKiller::has_is_in_scene() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoKiller::set_has_is_in_scene() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoKiller::clear_has_is_in_scene() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoKiller::clear_is_in_scene() {
  is_in_scene_ = 0;
  clear_has_is_in_scene();
}
inline ::google::protobuf::int32 ProtoKiller::is_in_scene() const {
  return is_in_scene_;
}
inline void ProtoKiller::set_is_in_scene(::google::protobuf::int32 value) {
  set_has_is_in_scene();
  is_in_scene_ = value;
}

// optional int32 role_sex = 8;
inline bool ProtoKiller::has_role_sex() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoKiller::set_has_role_sex() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoKiller::clear_has_role_sex() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoKiller::clear_role_sex() {
  role_sex_ = 0;
  clear_has_role_sex();
}
inline ::google::protobuf::int32 ProtoKiller::role_sex() const {
  return role_sex_;
}
inline void ProtoKiller::set_role_sex(::google::protobuf::int32 value) {
  set_has_role_sex();
  role_sex_ = value;
}

// optional string kill_tick = 9;
inline bool ProtoKiller::has_kill_tick() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProtoKiller::set_has_kill_tick() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProtoKiller::clear_has_kill_tick() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProtoKiller::clear_kill_tick() {
  if (kill_tick_ != &::google::protobuf::internal::kEmptyString) {
    kill_tick_->clear();
  }
  clear_has_kill_tick();
}
inline const ::std::string& ProtoKiller::kill_tick() const {
  return *kill_tick_;
}
inline void ProtoKiller::set_kill_tick(const ::std::string& value) {
  set_has_kill_tick();
  if (kill_tick_ == &::google::protobuf::internal::kEmptyString) {
    kill_tick_ = new ::std::string;
  }
  kill_tick_->assign(value);
}
inline void ProtoKiller::set_kill_tick(const char* value) {
  set_has_kill_tick();
  if (kill_tick_ == &::google::protobuf::internal::kEmptyString) {
    kill_tick_ = new ::std::string;
  }
  kill_tick_->assign(value);
}
inline void ProtoKiller::set_kill_tick(const char* value, size_t size) {
  set_has_kill_tick();
  if (kill_tick_ == &::google::protobuf::internal::kEmptyString) {
    kill_tick_ = new ::std::string;
  }
  kill_tick_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoKiller::mutable_kill_tick() {
  set_has_kill_tick();
  if (kill_tick_ == &::google::protobuf::internal::kEmptyString) {
    kill_tick_ = new ::std::string;
  }
  return kill_tick_;
}
inline ::std::string* ProtoKiller::release_kill_tick() {
  clear_has_kill_tick();
  if (kill_tick_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = kill_tick_;
    kill_tick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ProtoPeakWarRank

// optional int32 rank = 1;
inline bool ProtoPeakWarRank::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoPeakWarRank::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoPeakWarRank::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoPeakWarRank::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 ProtoPeakWarRank::rank() const {
  return rank_;
}
inline void ProtoPeakWarRank::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional int64 role_id = 2;
inline bool ProtoPeakWarRank::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoPeakWarRank::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoPeakWarRank::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoPeakWarRank::clear_role_id() {
  role_id_ = GOOGLE_LONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::int64 ProtoPeakWarRank::role_id() const {
  return role_id_;
}
inline void ProtoPeakWarRank::set_role_id(::google::protobuf::int64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string role_name = 3;
inline bool ProtoPeakWarRank::has_role_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoPeakWarRank::set_has_role_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoPeakWarRank::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoPeakWarRank::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& ProtoPeakWarRank::role_name() const {
  return *role_name_;
}
inline void ProtoPeakWarRank::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoPeakWarRank::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoPeakWarRank::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoPeakWarRank::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* ProtoPeakWarRank::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 kill_amount = 4;
inline bool ProtoPeakWarRank::has_kill_amount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoPeakWarRank::set_has_kill_amount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoPeakWarRank::clear_has_kill_amount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoPeakWarRank::clear_kill_amount() {
  kill_amount_ = 0;
  clear_has_kill_amount();
}
inline ::google::protobuf::int32 ProtoPeakWarRank::kill_amount() const {
  return kill_amount_;
}
inline void ProtoPeakWarRank::set_kill_amount(::google::protobuf::int32 value) {
  set_has_kill_amount();
  kill_amount_ = value;
}

// optional int32 floor = 5;
inline bool ProtoPeakWarRank::has_floor() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoPeakWarRank::set_has_floor() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoPeakWarRank::clear_has_floor() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoPeakWarRank::clear_floor() {
  floor_ = 0;
  clear_has_floor();
}
inline ::google::protobuf::int32 ProtoPeakWarRank::floor() const {
  return floor_;
}
inline void ProtoPeakWarRank::set_floor(::google::protobuf::int32 value) {
  set_has_floor();
  floor_ = value;
}

// optional int32 exploit = 6;
inline bool ProtoPeakWarRank::has_exploit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoPeakWarRank::set_has_exploit() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoPeakWarRank::clear_has_exploit() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoPeakWarRank::clear_exploit() {
  exploit_ = 0;
  clear_has_exploit();
}
inline ::google::protobuf::int32 ProtoPeakWarRank::exploit() const {
  return exploit_;
}
inline void ProtoPeakWarRank::set_exploit(::google::protobuf::int32 value) {
  set_has_exploit();
  exploit_ = value;
}

// -------------------------------------------------------------------

// PActTypeItem

// repeated .PRewardItem reward_info = 1;
inline int PActTypeItem::reward_info_size() const {
  return reward_info_.size();
}
inline void PActTypeItem::clear_reward_info() {
  reward_info_.Clear();
}
inline const ::PRewardItem& PActTypeItem::reward_info(int index) const {
  return reward_info_.Get(index);
}
inline ::PRewardItem* PActTypeItem::mutable_reward_info(int index) {
  return reward_info_.Mutable(index);
}
inline ::PRewardItem* PActTypeItem::add_reward_info() {
  return reward_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PRewardItem >&
PActTypeItem::reward_info() const {
  return reward_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::PRewardItem >*
PActTypeItem::mutable_reward_info() {
  return &reward_info_;
}

// optional int64 sub_value = 2;
inline bool PActTypeItem::has_sub_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PActTypeItem::set_has_sub_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PActTypeItem::clear_has_sub_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PActTypeItem::clear_sub_value() {
  sub_value_ = GOOGLE_LONGLONG(0);
  clear_has_sub_value();
}
inline ::google::protobuf::int64 PActTypeItem::sub_value() const {
  return sub_value_;
}
inline void PActTypeItem::set_sub_value(::google::protobuf::int64 value) {
  set_has_sub_value();
  sub_value_ = value;
}

// optional int64 second_sub = 3;
inline bool PActTypeItem::has_second_sub() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PActTypeItem::set_has_second_sub() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PActTypeItem::clear_has_second_sub() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PActTypeItem::clear_second_sub() {
  second_sub_ = GOOGLE_LONGLONG(0);
  clear_has_second_sub();
}
inline ::google::protobuf::int64 PActTypeItem::second_sub() const {
  return second_sub_;
}
inline void PActTypeItem::set_second_sub(::google::protobuf::int64 value) {
  set_has_second_sub();
  second_sub_ = value;
}

// optional int32 update_tick = 4;
inline bool PActTypeItem::has_update_tick() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PActTypeItem::set_has_update_tick() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PActTypeItem::clear_has_update_tick() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PActTypeItem::clear_update_tick() {
  update_tick_ = 0;
  clear_has_update_tick();
}
inline ::google::protobuf::int32 PActTypeItem::update_tick() const {
  return update_tick_;
}
inline void PActTypeItem::set_update_tick(::google::protobuf::int32 value) {
  set_has_update_tick();
  update_tick_ = value;
}

// optional int32 act_index = 5;
inline bool PActTypeItem::has_act_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PActTypeItem::set_has_act_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PActTypeItem::clear_has_act_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PActTypeItem::clear_act_index() {
  act_index_ = 0;
  clear_has_act_index();
}
inline ::google::protobuf::int32 PActTypeItem::act_index() const {
  return act_index_;
}
inline void PActTypeItem::set_act_index(::google::protobuf::int32 value) {
  set_has_act_index();
  act_index_ = value;
}

// optional int32 first_type = 6;
inline bool PActTypeItem::has_first_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PActTypeItem::set_has_first_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PActTypeItem::clear_has_first_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PActTypeItem::clear_first_type() {
  first_type_ = 0;
  clear_has_first_type();
}
inline ::google::protobuf::int32 PActTypeItem::first_type() const {
  return first_type_;
}
inline void PActTypeItem::set_first_type(::google::protobuf::int32 value) {
  set_has_first_type();
  first_type_ = value;
}

// optional int32 second_type = 7;
inline bool PActTypeItem::has_second_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PActTypeItem::set_has_second_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PActTypeItem::clear_has_second_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PActTypeItem::clear_second_type() {
  second_type_ = 0;
  clear_has_second_type();
}
inline ::google::protobuf::int32 PActTypeItem::second_type() const {
  return second_type_;
}
inline void PActTypeItem::set_second_type(::google::protobuf::int32 value) {
  set_has_second_type();
  second_type_ = value;
}

// repeated int32 open_time = 8;
inline int PActTypeItem::open_time_size() const {
  return open_time_.size();
}
inline void PActTypeItem::clear_open_time() {
  open_time_.Clear();
}
inline ::google::protobuf::int32 PActTypeItem::open_time(int index) const {
  return open_time_.Get(index);
}
inline void PActTypeItem::set_open_time(int index, ::google::protobuf::int32 value) {
  open_time_.Set(index, value);
}
inline void PActTypeItem::add_open_time(::google::protobuf::int32 value) {
  open_time_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PActTypeItem::open_time() const {
  return open_time_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PActTypeItem::mutable_open_time() {
  return &open_time_;
}

// optional int32 reward_count = 9;
inline bool PActTypeItem::has_reward_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PActTypeItem::set_has_reward_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PActTypeItem::clear_has_reward_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PActTypeItem::clear_reward_count() {
  reward_count_ = 0;
  clear_has_reward_count();
}
inline ::google::protobuf::int32 PActTypeItem::reward_count() const {
  return reward_count_;
}
inline void PActTypeItem::set_reward_count(::google::protobuf::int32 value) {
  set_has_reward_count();
  reward_count_ = value;
}

// optional string title = 10;
inline bool PActTypeItem::has_title() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PActTypeItem::set_has_title() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PActTypeItem::clear_has_title() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PActTypeItem::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& PActTypeItem::title() const {
  return *title_;
}
inline void PActTypeItem::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void PActTypeItem::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void PActTypeItem::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PActTypeItem::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* PActTypeItem::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string content = 11;
inline bool PActTypeItem::has_content() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PActTypeItem::set_has_content() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PActTypeItem::clear_has_content() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PActTypeItem::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& PActTypeItem::content() const {
  return *content_;
}
inline void PActTypeItem::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void PActTypeItem::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void PActTypeItem::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PActTypeItem::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* PActTypeItem::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 start_tick = 12;
inline bool PActTypeItem::has_start_tick() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PActTypeItem::set_has_start_tick() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PActTypeItem::clear_has_start_tick() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PActTypeItem::clear_start_tick() {
  start_tick_ = GOOGLE_LONGLONG(0);
  clear_has_start_tick();
}
inline ::google::protobuf::int64 PActTypeItem::start_tick() const {
  return start_tick_;
}
inline void PActTypeItem::set_start_tick(::google::protobuf::int64 value) {
  set_has_start_tick();
  start_tick_ = value;
}

// optional int64 stop_tick = 13;
inline bool PActTypeItem::has_stop_tick() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PActTypeItem::set_has_stop_tick() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PActTypeItem::clear_has_stop_tick() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PActTypeItem::clear_stop_tick() {
  stop_tick_ = GOOGLE_LONGLONG(0);
  clear_has_stop_tick();
}
inline ::google::protobuf::int64 PActTypeItem::stop_tick() const {
  return stop_tick_;
}
inline void PActTypeItem::set_stop_tick(::google::protobuf::int64 value) {
  set_has_stop_tick();
  stop_tick_ = value;
}

// repeated int32 agent = 14;
inline int PActTypeItem::agent_size() const {
  return agent_.size();
}
inline void PActTypeItem::clear_agent() {
  agent_.Clear();
}
inline ::google::protobuf::int32 PActTypeItem::agent(int index) const {
  return agent_.Get(index);
}
inline void PActTypeItem::set_agent(int index, ::google::protobuf::int32 value) {
  agent_.Set(index, value);
}
inline void PActTypeItem::add_agent(::google::protobuf::int32 value) {
  agent_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PActTypeItem::agent() const {
  return agent_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PActTypeItem::mutable_agent() {
  return &agent_;
}

// optional int32 priority = 15;
inline bool PActTypeItem::has_priority() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PActTypeItem::set_has_priority() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PActTypeItem::clear_has_priority() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PActTypeItem::clear_priority() {
  priority_ = 0;
  clear_has_priority();
}
inline ::google::protobuf::int32 PActTypeItem::priority() const {
  return priority_;
}
inline void PActTypeItem::set_priority(::google::protobuf::int32 value) {
  set_has_priority();
  priority_ = value;
}

// optional uint64 times = 16;
inline bool PActTypeItem::has_times() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PActTypeItem::set_has_times() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PActTypeItem::clear_has_times() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PActTypeItem::clear_times() {
  times_ = GOOGLE_ULONGLONG(0);
  clear_has_times();
}
inline ::google::protobuf::uint64 PActTypeItem::times() const {
  return times_;
}
inline void PActTypeItem::set_times(::google::protobuf::uint64 value) {
  set_has_times();
  times_ = value;
}

// optional int32 icon_type = 17;
inline bool PActTypeItem::has_icon_type() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PActTypeItem::set_has_icon_type() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PActTypeItem::clear_has_icon_type() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PActTypeItem::clear_icon_type() {
  icon_type_ = 0;
  clear_has_icon_type();
}
inline ::google::protobuf::int32 PActTypeItem::icon_type() const {
  return icon_type_;
}
inline void PActTypeItem::set_icon_type(::google::protobuf::int32 value) {
  set_has_icon_type();
  icon_type_ = value;
}

// optional int32 role_recharge = 18;
inline bool PActTypeItem::has_role_recharge() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PActTypeItem::set_has_role_recharge() {
  _has_bits_[0] |= 0x00020000u;
}
inline void PActTypeItem::clear_has_role_recharge() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void PActTypeItem::clear_role_recharge() {
  role_recharge_ = 0;
  clear_has_role_recharge();
}
inline ::google::protobuf::int32 PActTypeItem::role_recharge() const {
  return role_recharge_;
}
inline void PActTypeItem::set_role_recharge(::google::protobuf::int32 value) {
  set_has_role_recharge();
  role_recharge_ = value;
}

// optional int32 limit = 19;
inline bool PActTypeItem::has_limit() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void PActTypeItem::set_has_limit() {
  _has_bits_[0] |= 0x00040000u;
}
inline void PActTypeItem::clear_has_limit() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void PActTypeItem::clear_limit() {
  limit_ = 0;
  clear_has_limit();
}
inline ::google::protobuf::int32 PActTypeItem::limit() const {
  return limit_;
}
inline void PActTypeItem::set_limit(::google::protobuf::int32 value) {
  set_has_limit();
  limit_ = value;
}

// optional int32 role_consume = 20;
inline bool PActTypeItem::has_role_consume() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void PActTypeItem::set_has_role_consume() {
  _has_bits_[0] |= 0x00080000u;
}
inline void PActTypeItem::clear_has_role_consume() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void PActTypeItem::clear_role_consume() {
  role_consume_ = 0;
  clear_has_role_consume();
}
inline ::google::protobuf::int32 PActTypeItem::role_consume() const {
  return role_consume_;
}
inline void PActTypeItem::set_role_consume(::google::protobuf::int32 value) {
  set_has_role_consume();
  role_consume_ = value;
}

// optional .PActCumulativeLogin cumulative_login = 21;
inline bool PActTypeItem::has_cumulative_login() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void PActTypeItem::set_has_cumulative_login() {
  _has_bits_[0] |= 0x00100000u;
}
inline void PActTypeItem::clear_has_cumulative_login() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void PActTypeItem::clear_cumulative_login() {
  if (cumulative_login_ != NULL) cumulative_login_->::PActCumulativeLogin::Clear();
  clear_has_cumulative_login();
}
inline const ::PActCumulativeLogin& PActTypeItem::cumulative_login() const {
  return cumulative_login_ != NULL ? *cumulative_login_ : *default_instance_->cumulative_login_;
}
inline ::PActCumulativeLogin* PActTypeItem::mutable_cumulative_login() {
  set_has_cumulative_login();
  if (cumulative_login_ == NULL) cumulative_login_ = new ::PActCumulativeLogin;
  return cumulative_login_;
}
inline ::PActCumulativeLogin* PActTypeItem::release_cumulative_login() {
  clear_has_cumulative_login();
  ::PActCumulativeLogin* temp = cumulative_login_;
  cumulative_login_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PRewardItem

// optional string content = 1;
inline bool PRewardItem::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PRewardItem::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PRewardItem::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PRewardItem::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& PRewardItem::content() const {
  return *content_;
}
inline void PRewardItem::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void PRewardItem::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void PRewardItem::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PRewardItem::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* PRewardItem::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 reward_id = 2;
inline bool PRewardItem::has_reward_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PRewardItem::set_has_reward_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PRewardItem::clear_has_reward_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PRewardItem::clear_reward_id() {
  reward_id_ = 0;
  clear_has_reward_id();
}
inline ::google::protobuf::int32 PRewardItem::reward_id() const {
  return reward_id_;
}
inline void PRewardItem::set_reward_id(::google::protobuf::int32 value) {
  set_has_reward_id();
  reward_id_ = value;
}

// repeated .ProtoItem reward_set = 3;
inline int PRewardItem::reward_set_size() const {
  return reward_set_.size();
}
inline void PRewardItem::clear_reward_set() {
  reward_set_.Clear();
}
inline const ::ProtoItem& PRewardItem::reward_set(int index) const {
  return reward_set_.Get(index);
}
inline ::ProtoItem* PRewardItem::mutable_reward_set(int index) {
  return reward_set_.Mutable(index);
}
inline ::ProtoItem* PRewardItem::add_reward_set() {
  return reward_set_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoItem >&
PRewardItem::reward_set() const {
  return reward_set_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoItem >*
PRewardItem::mutable_reward_set() {
  return &reward_set_;
}

// optional int32 draw_flag = 4;
inline bool PRewardItem::has_draw_flag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PRewardItem::set_has_draw_flag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PRewardItem::clear_has_draw_flag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PRewardItem::clear_draw_flag() {
  draw_flag_ = 0;
  clear_has_draw_flag();
}
inline ::google::protobuf::int32 PRewardItem::draw_flag() const {
  return draw_flag_;
}
inline void PRewardItem::set_draw_flag(::google::protobuf::int32 value) {
  set_has_draw_flag();
  draw_flag_ = value;
}

// optional int32 index = 5;
inline bool PRewardItem::has_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PRewardItem::set_has_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PRewardItem::clear_has_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PRewardItem::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 PRewardItem::index() const {
  return index_;
}
inline void PRewardItem::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// repeated int64 cond = 6;
inline int PRewardItem::cond_size() const {
  return cond_.size();
}
inline void PRewardItem::clear_cond() {
  cond_.Clear();
}
inline ::google::protobuf::int64 PRewardItem::cond(int index) const {
  return cond_.Get(index);
}
inline void PRewardItem::set_cond(int index, ::google::protobuf::int64 value) {
  cond_.Set(index, value);
}
inline void PRewardItem::add_cond(::google::protobuf::int64 value) {
  cond_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
PRewardItem::cond() const {
  return cond_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
PRewardItem::mutable_cond() {
  return &cond_;
}

// optional int32 arrive = 7;
inline bool PRewardItem::has_arrive() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PRewardItem::set_has_arrive() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PRewardItem::clear_has_arrive() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PRewardItem::clear_arrive() {
  arrive_ = 0;
  clear_has_arrive();
}
inline ::google::protobuf::int32 PRewardItem::arrive() const {
  return arrive_;
}
inline void PRewardItem::set_arrive(::google::protobuf::int32 value) {
  set_has_arrive();
  arrive_ = value;
}

// optional int32 drawed = 8;
inline bool PRewardItem::has_drawed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PRewardItem::set_has_drawed() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PRewardItem::clear_has_drawed() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PRewardItem::clear_drawed() {
  drawed_ = 0;
  clear_has_drawed();
}
inline ::google::protobuf::int32 PRewardItem::drawed() const {
  return drawed_;
}
inline void PRewardItem::set_drawed(::google::protobuf::int32 value) {
  set_has_drawed();
  drawed_ = value;
}

// repeated .ProtoPairLongString role_id_name = 9;
inline int PRewardItem::role_id_name_size() const {
  return role_id_name_.size();
}
inline void PRewardItem::clear_role_id_name() {
  role_id_name_.Clear();
}
inline const ::ProtoPairLongString& PRewardItem::role_id_name(int index) const {
  return role_id_name_.Get(index);
}
inline ::ProtoPairLongString* PRewardItem::mutable_role_id_name(int index) {
  return role_id_name_.Mutable(index);
}
inline ::ProtoPairLongString* PRewardItem::add_role_id_name() {
  return role_id_name_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoPairLongString >&
PRewardItem::role_id_name() const {
  return role_id_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoPairLongString >*
PRewardItem::mutable_role_id_name() {
  return &role_id_name_;
}

// optional int32 brocast = 10;
inline bool PRewardItem::has_brocast() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PRewardItem::set_has_brocast() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PRewardItem::clear_has_brocast() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PRewardItem::clear_brocast() {
  brocast_ = 0;
  clear_has_brocast();
}
inline ::google::protobuf::int32 PRewardItem::brocast() const {
  return brocast_;
}
inline void PRewardItem::set_brocast(::google::protobuf::int32 value) {
  set_has_brocast();
  brocast_ = value;
}

// optional int32 times = 11;
inline bool PRewardItem::has_times() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PRewardItem::set_has_times() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PRewardItem::clear_has_times() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PRewardItem::clear_times() {
  times_ = 0;
  clear_has_times();
}
inline ::google::protobuf::int32 PRewardItem::times() const {
  return times_;
}
inline void PRewardItem::set_times(::google::protobuf::int32 value) {
  set_has_times();
  times_ = value;
}

// repeated .ProtoPairLong sub_map = 12;
inline int PRewardItem::sub_map_size() const {
  return sub_map_.size();
}
inline void PRewardItem::clear_sub_map() {
  sub_map_.Clear();
}
inline const ::ProtoPairLong& PRewardItem::sub_map(int index) const {
  return sub_map_.Get(index);
}
inline ::ProtoPairLong* PRewardItem::mutable_sub_map(int index) {
  return sub_map_.Mutable(index);
}
inline ::ProtoPairLong* PRewardItem::add_sub_map() {
  return sub_map_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoPairLong >&
PRewardItem::sub_map() const {
  return sub_map_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoPairLong >*
PRewardItem::mutable_sub_map() {
  return &sub_map_;
}

// repeated .ProtoPairLong recharge_map = 13;
inline int PRewardItem::recharge_map_size() const {
  return recharge_map_.size();
}
inline void PRewardItem::clear_recharge_map() {
  recharge_map_.Clear();
}
inline const ::ProtoPairLong& PRewardItem::recharge_map(int index) const {
  return recharge_map_.Get(index);
}
inline ::ProtoPairLong* PRewardItem::mutable_recharge_map(int index) {
  return recharge_map_.Mutable(index);
}
inline ::ProtoPairLong* PRewardItem::add_recharge_map() {
  return recharge_map_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoPairLong >&
PRewardItem::recharge_map() const {
  return recharge_map_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoPairLong >*
PRewardItem::mutable_recharge_map() {
  return &recharge_map_;
}

// optional int32 must_reset = 14;
inline bool PRewardItem::has_must_reset() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PRewardItem::set_has_must_reset() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PRewardItem::clear_has_must_reset() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PRewardItem::clear_must_reset() {
  must_reset_ = 0;
  clear_has_must_reset();
}
inline ::google::protobuf::int32 PRewardItem::must_reset() const {
  return must_reset_;
}
inline void PRewardItem::set_must_reset(::google::protobuf::int32 value) {
  set_has_must_reset();
  must_reset_ = value;
}

// repeated .ProtoItem cost_item = 15;
inline int PRewardItem::cost_item_size() const {
  return cost_item_.size();
}
inline void PRewardItem::clear_cost_item() {
  cost_item_.Clear();
}
inline const ::ProtoItem& PRewardItem::cost_item(int index) const {
  return cost_item_.Get(index);
}
inline ::ProtoItem* PRewardItem::mutable_cost_item(int index) {
  return cost_item_.Mutable(index);
}
inline ::ProtoItem* PRewardItem::add_cost_item() {
  return cost_item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoItem >&
PRewardItem::cost_item() const {
  return cost_item_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoItem >*
PRewardItem::mutable_cost_item() {
  return &cost_item_;
}

// repeated .ProtoItem pre_item = 16;
inline int PRewardItem::pre_item_size() const {
  return pre_item_.size();
}
inline void PRewardItem::clear_pre_item() {
  pre_item_.Clear();
}
inline const ::ProtoItem& PRewardItem::pre_item(int index) const {
  return pre_item_.Get(index);
}
inline ::ProtoItem* PRewardItem::mutable_pre_item(int index) {
  return pre_item_.Mutable(index);
}
inline ::ProtoItem* PRewardItem::add_pre_item() {
  return pre_item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoItem >&
PRewardItem::pre_item() const {
  return pre_item_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoItem >*
PRewardItem::mutable_pre_item() {
  return &pre_item_;
}

// optional int32 exchange_type = 17;
inline bool PRewardItem::has_exchange_type() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PRewardItem::set_has_exchange_type() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PRewardItem::clear_has_exchange_type() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PRewardItem::clear_exchange_type() {
  exchange_type_ = 0;
  clear_has_exchange_type();
}
inline ::google::protobuf::int32 PRewardItem::exchange_type() const {
  return exchange_type_;
}
inline void PRewardItem::set_exchange_type(::google::protobuf::int32 value) {
  set_has_exchange_type();
  exchange_type_ = value;
}

// optional string exchange_item_name = 18;
inline bool PRewardItem::has_exchange_item_name() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PRewardItem::set_has_exchange_item_name() {
  _has_bits_[0] |= 0x00020000u;
}
inline void PRewardItem::clear_has_exchange_item_name() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void PRewardItem::clear_exchange_item_name() {
  if (exchange_item_name_ != &::google::protobuf::internal::kEmptyString) {
    exchange_item_name_->clear();
  }
  clear_has_exchange_item_name();
}
inline const ::std::string& PRewardItem::exchange_item_name() const {
  return *exchange_item_name_;
}
inline void PRewardItem::set_exchange_item_name(const ::std::string& value) {
  set_has_exchange_item_name();
  if (exchange_item_name_ == &::google::protobuf::internal::kEmptyString) {
    exchange_item_name_ = new ::std::string;
  }
  exchange_item_name_->assign(value);
}
inline void PRewardItem::set_exchange_item_name(const char* value) {
  set_has_exchange_item_name();
  if (exchange_item_name_ == &::google::protobuf::internal::kEmptyString) {
    exchange_item_name_ = new ::std::string;
  }
  exchange_item_name_->assign(value);
}
inline void PRewardItem::set_exchange_item_name(const char* value, size_t size) {
  set_has_exchange_item_name();
  if (exchange_item_name_ == &::google::protobuf::internal::kEmptyString) {
    exchange_item_name_ = new ::std::string;
  }
  exchange_item_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PRewardItem::mutable_exchange_item_name() {
  set_has_exchange_item_name();
  if (exchange_item_name_ == &::google::protobuf::internal::kEmptyString) {
    exchange_item_name_ = new ::std::string;
  }
  return exchange_item_name_;
}
inline ::std::string* PRewardItem::release_exchange_item_name() {
  clear_has_exchange_item_name();
  if (exchange_item_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = exchange_item_name_;
    exchange_item_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 cash_coupon = 19;
inline bool PRewardItem::has_cash_coupon() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void PRewardItem::set_has_cash_coupon() {
  _has_bits_[0] |= 0x00040000u;
}
inline void PRewardItem::clear_has_cash_coupon() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void PRewardItem::clear_cash_coupon() {
  cash_coupon_ = 0;
  clear_has_cash_coupon();
}
inline ::google::protobuf::int32 PRewardItem::cash_coupon() const {
  return cash_coupon_;
}
inline void PRewardItem::set_cash_coupon(::google::protobuf::int32 value) {
  set_has_cash_coupon();
  cash_coupon_ = value;
}

// optional int64 sub_value = 20;
inline bool PRewardItem::has_sub_value() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void PRewardItem::set_has_sub_value() {
  _has_bits_[0] |= 0x00080000u;
}
inline void PRewardItem::clear_has_sub_value() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void PRewardItem::clear_sub_value() {
  sub_value_ = GOOGLE_LONGLONG(0);
  clear_has_sub_value();
}
inline ::google::protobuf::int64 PRewardItem::sub_value() const {
  return sub_value_;
}
inline void PRewardItem::set_sub_value(::google::protobuf::int64 value) {
  set_has_sub_value();
  sub_value_ = value;
}

// -------------------------------------------------------------------

// ProtoGateRole

// optional int64 role_id = 1;
inline bool ProtoGateRole::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoGateRole::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoGateRole::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoGateRole::clear_role_id() {
  role_id_ = GOOGLE_LONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::int64 ProtoGateRole::role_id() const {
  return role_id_;
}
inline void ProtoGateRole::set_role_id(::google::protobuf::int64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string name = 2;
inline bool ProtoGateRole::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoGateRole::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoGateRole::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoGateRole::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ProtoGateRole::name() const {
  return *name_;
}
inline void ProtoGateRole::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ProtoGateRole::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ProtoGateRole::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoGateRole::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ProtoGateRole::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 level = 3;
inline bool ProtoGateRole::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoGateRole::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoGateRole::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoGateRole::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ProtoGateRole::level() const {
  return level_;
}
inline void ProtoGateRole::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 sex = 4;
inline bool ProtoGateRole::has_sex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoGateRole::set_has_sex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoGateRole::clear_has_sex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoGateRole::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 ProtoGateRole::sex() const {
  return sex_;
}
inline void ProtoGateRole::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// optional int32 career = 5;
inline bool ProtoGateRole::has_career() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoGateRole::set_has_career() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoGateRole::clear_has_career() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoGateRole::clear_career() {
  career_ = 0;
  clear_has_career();
}
inline ::google::protobuf::int32 ProtoGateRole::career() const {
  return career_;
}
inline void ProtoGateRole::set_career(::google::protobuf::int32 value) {
  set_has_career();
  career_ = value;
}

// -------------------------------------------------------------------

// ProtoPackageItem

// optional int32 item_id = 1;
inline bool ProtoPackageItem::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoPackageItem::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoPackageItem::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoPackageItem::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
}
inline ::google::protobuf::int32 ProtoPackageItem::item_id() const {
  return item_id_;
}
inline void ProtoPackageItem::set_item_id(::google::protobuf::int32 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional int32 item_index = 2;
inline bool ProtoPackageItem::has_item_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoPackageItem::set_has_item_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoPackageItem::clear_has_item_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoPackageItem::clear_item_index() {
  item_index_ = 0;
  clear_has_item_index();
}
inline ::google::protobuf::int32 ProtoPackageItem::item_index() const {
  return item_index_;
}
inline void ProtoPackageItem::set_item_index(::google::protobuf::int32 value) {
  set_has_item_index();
  item_index_ = value;
}

// optional int32 item_type = 3;
inline bool ProtoPackageItem::has_item_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoPackageItem::set_has_item_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoPackageItem::clear_has_item_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoPackageItem::clear_item_type() {
  item_type_ = 0;
  clear_has_item_type();
}
inline ::google::protobuf::int32 ProtoPackageItem::item_type() const {
  return item_type_;
}
inline void ProtoPackageItem::set_item_type(::google::protobuf::int32 value) {
  set_has_item_type();
  item_type_ = value;
}

// -------------------------------------------------------------------

// ProtoEquipPolishAttrInfo

// optional int32 lock_index = 1;
inline bool ProtoEquipPolishAttrInfo::has_lock_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoEquipPolishAttrInfo::set_has_lock_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoEquipPolishAttrInfo::clear_has_lock_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoEquipPolishAttrInfo::clear_lock_index() {
  lock_index_ = 0;
  clear_has_lock_index();
}
inline ::google::protobuf::int32 ProtoEquipPolishAttrInfo::lock_index() const {
  return lock_index_;
}
inline void ProtoEquipPolishAttrInfo::set_lock_index(::google::protobuf::int32 value) {
  set_has_lock_index();
  lock_index_ = value;
}

// optional int32 attr_type = 2;
inline bool ProtoEquipPolishAttrInfo::has_attr_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoEquipPolishAttrInfo::set_has_attr_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoEquipPolishAttrInfo::clear_has_attr_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoEquipPolishAttrInfo::clear_attr_type() {
  attr_type_ = 0;
  clear_has_attr_type();
}
inline ::google::protobuf::int32 ProtoEquipPolishAttrInfo::attr_type() const {
  return attr_type_;
}
inline void ProtoEquipPolishAttrInfo::set_attr_type(::google::protobuf::int32 value) {
  set_has_attr_type();
  attr_type_ = value;
}

// optional int32 cur_value = 3;
inline bool ProtoEquipPolishAttrInfo::has_cur_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoEquipPolishAttrInfo::set_has_cur_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoEquipPolishAttrInfo::clear_has_cur_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoEquipPolishAttrInfo::clear_cur_value() {
  cur_value_ = 0;
  clear_has_cur_value();
}
inline ::google::protobuf::int32 ProtoEquipPolishAttrInfo::cur_value() const {
  return cur_value_;
}
inline void ProtoEquipPolishAttrInfo::set_cur_value(::google::protobuf::int32 value) {
  set_has_cur_value();
  cur_value_ = value;
}

// optional int32 color = 4;
inline bool ProtoEquipPolishAttrInfo::has_color() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoEquipPolishAttrInfo::set_has_color() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoEquipPolishAttrInfo::clear_has_color() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoEquipPolishAttrInfo::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::google::protobuf::int32 ProtoEquipPolishAttrInfo::color() const {
  return color_;
}
inline void ProtoEquipPolishAttrInfo::set_color(::google::protobuf::int32 value) {
  set_has_color();
  color_ = value;
}

// optional int32 max_value = 5;
inline bool ProtoEquipPolishAttrInfo::has_max_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoEquipPolishAttrInfo::set_has_max_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoEquipPolishAttrInfo::clear_has_max_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoEquipPolishAttrInfo::clear_max_value() {
  max_value_ = 0;
  clear_has_max_value();
}
inline ::google::protobuf::int32 ProtoEquipPolishAttrInfo::max_value() const {
  return max_value_;
}
inline void ProtoEquipPolishAttrInfo::set_max_value(::google::protobuf::int32 value) {
  set_has_max_value();
  max_value_ = value;
}

// -------------------------------------------------------------------

// ProtoEquipPolishStruct

// repeated .ProtoEquipPolishAttrInfo equip_polish_info = 1;
inline int ProtoEquipPolishStruct::equip_polish_info_size() const {
  return equip_polish_info_.size();
}
inline void ProtoEquipPolishStruct::clear_equip_polish_info() {
  equip_polish_info_.Clear();
}
inline const ::ProtoEquipPolishAttrInfo& ProtoEquipPolishStruct::equip_polish_info(int index) const {
  return equip_polish_info_.Get(index);
}
inline ::ProtoEquipPolishAttrInfo* ProtoEquipPolishStruct::mutable_equip_polish_info(int index) {
  return equip_polish_info_.Mutable(index);
}
inline ::ProtoEquipPolishAttrInfo* ProtoEquipPolishStruct::add_equip_polish_info() {
  return equip_polish_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoEquipPolishAttrInfo >&
ProtoEquipPolishStruct::equip_polish_info() const {
  return equip_polish_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoEquipPolishAttrInfo >*
ProtoEquipPolishStruct::mutable_equip_polish_info() {
  return &equip_polish_info_;
}

// -------------------------------------------------------------------

// ProtoEquipPolish

// optional .ProtoEquipPolishStruct cur_polish_info = 1;
inline bool ProtoEquipPolish::has_cur_polish_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoEquipPolish::set_has_cur_polish_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoEquipPolish::clear_has_cur_polish_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoEquipPolish::clear_cur_polish_info() {
  if (cur_polish_info_ != NULL) cur_polish_info_->::ProtoEquipPolishStruct::Clear();
  clear_has_cur_polish_info();
}
inline const ::ProtoEquipPolishStruct& ProtoEquipPolish::cur_polish_info() const {
  return cur_polish_info_ != NULL ? *cur_polish_info_ : *default_instance_->cur_polish_info_;
}
inline ::ProtoEquipPolishStruct* ProtoEquipPolish::mutable_cur_polish_info() {
  set_has_cur_polish_info();
  if (cur_polish_info_ == NULL) cur_polish_info_ = new ::ProtoEquipPolishStruct;
  return cur_polish_info_;
}
inline ::ProtoEquipPolishStruct* ProtoEquipPolish::release_cur_polish_info() {
  clear_has_cur_polish_info();
  ::ProtoEquipPolishStruct* temp = cur_polish_info_;
  cur_polish_info_ = NULL;
  return temp;
}

// optional .ProtoEquipPolishStruct single_polish_info = 2;
inline bool ProtoEquipPolish::has_single_polish_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoEquipPolish::set_has_single_polish_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoEquipPolish::clear_has_single_polish_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoEquipPolish::clear_single_polish_info() {
  if (single_polish_info_ != NULL) single_polish_info_->::ProtoEquipPolishStruct::Clear();
  clear_has_single_polish_info();
}
inline const ::ProtoEquipPolishStruct& ProtoEquipPolish::single_polish_info() const {
  return single_polish_info_ != NULL ? *single_polish_info_ : *default_instance_->single_polish_info_;
}
inline ::ProtoEquipPolishStruct* ProtoEquipPolish::mutable_single_polish_info() {
  set_has_single_polish_info();
  if (single_polish_info_ == NULL) single_polish_info_ = new ::ProtoEquipPolishStruct;
  return single_polish_info_;
}
inline ::ProtoEquipPolishStruct* ProtoEquipPolish::release_single_polish_info() {
  clear_has_single_polish_info();
  ::ProtoEquipPolishStruct* temp = single_polish_info_;
  single_polish_info_ = NULL;
  return temp;
}

// repeated .ProtoEquipPolishStruct batch_polish_info = 3;
inline int ProtoEquipPolish::batch_polish_info_size() const {
  return batch_polish_info_.size();
}
inline void ProtoEquipPolish::clear_batch_polish_info() {
  batch_polish_info_.Clear();
}
inline const ::ProtoEquipPolishStruct& ProtoEquipPolish::batch_polish_info(int index) const {
  return batch_polish_info_.Get(index);
}
inline ::ProtoEquipPolishStruct* ProtoEquipPolish::mutable_batch_polish_info(int index) {
  return batch_polish_info_.Mutable(index);
}
inline ::ProtoEquipPolishStruct* ProtoEquipPolish::add_batch_polish_info() {
  return batch_polish_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoEquipPolishStruct >&
ProtoEquipPolish::batch_polish_info() const {
  return batch_polish_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoEquipPolishStruct >*
ProtoEquipPolish::mutable_batch_polish_info() {
  return &batch_polish_info_;
}

// optional int32 process_value = 4;
inline bool ProtoEquipPolish::has_process_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoEquipPolish::set_has_process_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoEquipPolish::clear_has_process_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoEquipPolish::clear_process_value() {
  process_value_ = 0;
  clear_has_process_value();
}
inline ::google::protobuf::int32 ProtoEquipPolish::process_value() const {
  return process_value_;
}
inline void ProtoEquipPolish::set_process_value(::google::protobuf::int32 value) {
  set_has_process_value();
  process_value_ = value;
}

// -------------------------------------------------------------------

// ProtoVipGift

// repeated .ProtoItem item_list = 1;
inline int ProtoVipGift::item_list_size() const {
  return item_list_.size();
}
inline void ProtoVipGift::clear_item_list() {
  item_list_.Clear();
}
inline const ::ProtoItem& ProtoVipGift::item_list(int index) const {
  return item_list_.Get(index);
}
inline ::ProtoItem* ProtoVipGift::mutable_item_list(int index) {
  return item_list_.Mutable(index);
}
inline ::ProtoItem* ProtoVipGift::add_item_list() {
  return item_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoItem >&
ProtoVipGift::item_list() const {
  return item_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoItem >*
ProtoVipGift::mutable_item_list() {
  return &item_list_;
}

// optional int32 vip_type = 2;
inline bool ProtoVipGift::has_vip_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoVipGift::set_has_vip_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoVipGift::clear_has_vip_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoVipGift::clear_vip_type() {
  vip_type_ = 0;
  clear_has_vip_type();
}
inline ::google::protobuf::int32 ProtoVipGift::vip_type() const {
  return vip_type_;
}
inline void ProtoVipGift::set_vip_type(::google::protobuf::int32 value) {
  set_has_vip_type();
  vip_type_ = value;
}

// optional int32 isHasGift = 3;
inline bool ProtoVipGift::has_ishasgift() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoVipGift::set_has_ishasgift() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoVipGift::clear_has_ishasgift() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoVipGift::clear_ishasgift() {
  ishasgift_ = 0;
  clear_has_ishasgift();
}
inline ::google::protobuf::int32 ProtoVipGift::ishasgift() const {
  return ishasgift_;
}
inline void ProtoVipGift::set_ishasgift(::google::protobuf::int32 value) {
  set_has_ishasgift();
  ishasgift_ = value;
}

// optional int32 reward_id = 4;
inline bool ProtoVipGift::has_reward_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoVipGift::set_has_reward_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoVipGift::clear_has_reward_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoVipGift::clear_reward_id() {
  reward_id_ = 0;
  clear_has_reward_id();
}
inline ::google::protobuf::int32 ProtoVipGift::reward_id() const {
  return reward_id_;
}
inline void ProtoVipGift::set_reward_id(::google::protobuf::int32 value) {
  set_has_reward_id();
  reward_id_ = value;
}

// -------------------------------------------------------------------

// ProtoTrialTask

// optional int32 task_id = 1;
inline bool ProtoTrialTask::has_task_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoTrialTask::set_has_task_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoTrialTask::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoTrialTask::clear_task_id() {
  task_id_ = 0;
  clear_has_task_id();
}
inline ::google::protobuf::int32 ProtoTrialTask::task_id() const {
  return task_id_;
}
inline void ProtoTrialTask::set_task_id(::google::protobuf::int32 value) {
  set_has_task_id();
  task_id_ = value;
}

// optional int32 status = 2;
inline bool ProtoTrialTask::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoTrialTask::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoTrialTask::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoTrialTask::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 ProtoTrialTask::status() const {
  return status_;
}
inline void ProtoTrialTask::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional int32 award_exp = 3;
inline bool ProtoTrialTask::has_award_exp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoTrialTask::set_has_award_exp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoTrialTask::clear_has_award_exp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoTrialTask::clear_award_exp() {
  award_exp_ = 0;
  clear_has_award_exp();
}
inline ::google::protobuf::int32 ProtoTrialTask::award_exp() const {
  return award_exp_;
}
inline void ProtoTrialTask::set_award_exp(::google::protobuf::int32 value) {
  set_has_award_exp();
  award_exp_ = value;
}

// optional .ProtoMoney money = 4;
inline bool ProtoTrialTask::has_money() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoTrialTask::set_has_money() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoTrialTask::clear_has_money() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoTrialTask::clear_money() {
  if (money_ != NULL) money_->::ProtoMoney::Clear();
  clear_has_money();
}
inline const ::ProtoMoney& ProtoTrialTask::money() const {
  return money_ != NULL ? *money_ : *default_instance_->money_;
}
inline ::ProtoMoney* ProtoTrialTask::mutable_money() {
  set_has_money();
  if (money_ == NULL) money_ = new ::ProtoMoney;
  return money_;
}
inline ::ProtoMoney* ProtoTrialTask::release_money() {
  clear_has_money();
  ::ProtoMoney* temp = money_;
  money_ = NULL;
  return temp;
}

// optional int32 value = 5;
inline bool ProtoTrialTask::has_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoTrialTask::set_has_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoTrialTask::clear_has_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoTrialTask::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 ProtoTrialTask::value() const {
  return value_;
}
inline void ProtoTrialTask::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// optional int32 final_value = 6;
inline bool ProtoTrialTask::has_final_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoTrialTask::set_has_final_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoTrialTask::clear_has_final_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoTrialTask::clear_final_value() {
  final_value_ = 0;
  clear_has_final_value();
}
inline ::google::protobuf::int32 ProtoTrialTask::final_value() const {
  return final_value_;
}
inline void ProtoTrialTask::set_final_value(::google::protobuf::int32 value) {
  set_has_final_value();
  final_value_ = value;
}

// -------------------------------------------------------------------

// ProtoWeddingIcon

// optional int64 wedding_req_id = 1;
inline bool ProtoWeddingIcon::has_wedding_req_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoWeddingIcon::set_has_wedding_req_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoWeddingIcon::clear_has_wedding_req_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoWeddingIcon::clear_wedding_req_id() {
  wedding_req_id_ = GOOGLE_LONGLONG(0);
  clear_has_wedding_req_id();
}
inline ::google::protobuf::int64 ProtoWeddingIcon::wedding_req_id() const {
  return wedding_req_id_;
}
inline void ProtoWeddingIcon::set_wedding_req_id(::google::protobuf::int64 value) {
  set_has_wedding_req_id();
  wedding_req_id_ = value;
}

// optional string wedding_req_name = 2;
inline bool ProtoWeddingIcon::has_wedding_req_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoWeddingIcon::set_has_wedding_req_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoWeddingIcon::clear_has_wedding_req_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoWeddingIcon::clear_wedding_req_name() {
  if (wedding_req_name_ != &::google::protobuf::internal::kEmptyString) {
    wedding_req_name_->clear();
  }
  clear_has_wedding_req_name();
}
inline const ::std::string& ProtoWeddingIcon::wedding_req_name() const {
  return *wedding_req_name_;
}
inline void ProtoWeddingIcon::set_wedding_req_name(const ::std::string& value) {
  set_has_wedding_req_name();
  if (wedding_req_name_ == &::google::protobuf::internal::kEmptyString) {
    wedding_req_name_ = new ::std::string;
  }
  wedding_req_name_->assign(value);
}
inline void ProtoWeddingIcon::set_wedding_req_name(const char* value) {
  set_has_wedding_req_name();
  if (wedding_req_name_ == &::google::protobuf::internal::kEmptyString) {
    wedding_req_name_ = new ::std::string;
  }
  wedding_req_name_->assign(value);
}
inline void ProtoWeddingIcon::set_wedding_req_name(const char* value, size_t size) {
  set_has_wedding_req_name();
  if (wedding_req_name_ == &::google::protobuf::internal::kEmptyString) {
    wedding_req_name_ = new ::std::string;
  }
  wedding_req_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoWeddingIcon::mutable_wedding_req_name() {
  set_has_wedding_req_name();
  if (wedding_req_name_ == &::google::protobuf::internal::kEmptyString) {
    wedding_req_name_ = new ::std::string;
  }
  return wedding_req_name_;
}
inline ::std::string* ProtoWeddingIcon::release_wedding_req_name() {
  clear_has_wedding_req_name();
  if (wedding_req_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = wedding_req_name_;
    wedding_req_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 wedding_partner_id = 3;
inline bool ProtoWeddingIcon::has_wedding_partner_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoWeddingIcon::set_has_wedding_partner_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoWeddingIcon::clear_has_wedding_partner_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoWeddingIcon::clear_wedding_partner_id() {
  wedding_partner_id_ = GOOGLE_LONGLONG(0);
  clear_has_wedding_partner_id();
}
inline ::google::protobuf::int64 ProtoWeddingIcon::wedding_partner_id() const {
  return wedding_partner_id_;
}
inline void ProtoWeddingIcon::set_wedding_partner_id(::google::protobuf::int64 value) {
  set_has_wedding_partner_id();
  wedding_partner_id_ = value;
}

// optional string wedding_partner_name = 4;
inline bool ProtoWeddingIcon::has_wedding_partner_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoWeddingIcon::set_has_wedding_partner_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoWeddingIcon::clear_has_wedding_partner_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoWeddingIcon::clear_wedding_partner_name() {
  if (wedding_partner_name_ != &::google::protobuf::internal::kEmptyString) {
    wedding_partner_name_->clear();
  }
  clear_has_wedding_partner_name();
}
inline const ::std::string& ProtoWeddingIcon::wedding_partner_name() const {
  return *wedding_partner_name_;
}
inline void ProtoWeddingIcon::set_wedding_partner_name(const ::std::string& value) {
  set_has_wedding_partner_name();
  if (wedding_partner_name_ == &::google::protobuf::internal::kEmptyString) {
    wedding_partner_name_ = new ::std::string;
  }
  wedding_partner_name_->assign(value);
}
inline void ProtoWeddingIcon::set_wedding_partner_name(const char* value) {
  set_has_wedding_partner_name();
  if (wedding_partner_name_ == &::google::protobuf::internal::kEmptyString) {
    wedding_partner_name_ = new ::std::string;
  }
  wedding_partner_name_->assign(value);
}
inline void ProtoWeddingIcon::set_wedding_partner_name(const char* value, size_t size) {
  set_has_wedding_partner_name();
  if (wedding_partner_name_ == &::google::protobuf::internal::kEmptyString) {
    wedding_partner_name_ = new ::std::string;
  }
  wedding_partner_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoWeddingIcon::mutable_wedding_partner_name() {
  set_has_wedding_partner_name();
  if (wedding_partner_name_ == &::google::protobuf::internal::kEmptyString) {
    wedding_partner_name_ = new ::std::string;
  }
  return wedding_partner_name_;
}
inline ::std::string* ProtoWeddingIcon::release_wedding_partner_name() {
  clear_has_wedding_partner_name();
  if (wedding_partner_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = wedding_partner_name_;
    wedding_partner_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ProtoShoutItem

// optional int32 item_id = 1;
inline bool ProtoShoutItem::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoShoutItem::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoShoutItem::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoShoutItem::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
}
inline ::google::protobuf::int32 ProtoShoutItem::item_id() const {
  return item_id_;
}
inline void ProtoShoutItem::set_item_id(::google::protobuf::int32 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional string item_name = 2;
inline bool ProtoShoutItem::has_item_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoShoutItem::set_has_item_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoShoutItem::clear_has_item_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoShoutItem::clear_item_name() {
  if (item_name_ != &::google::protobuf::internal::kEmptyString) {
    item_name_->clear();
  }
  clear_has_item_name();
}
inline const ::std::string& ProtoShoutItem::item_name() const {
  return *item_name_;
}
inline void ProtoShoutItem::set_item_name(const ::std::string& value) {
  set_has_item_name();
  if (item_name_ == &::google::protobuf::internal::kEmptyString) {
    item_name_ = new ::std::string;
  }
  item_name_->assign(value);
}
inline void ProtoShoutItem::set_item_name(const char* value) {
  set_has_item_name();
  if (item_name_ == &::google::protobuf::internal::kEmptyString) {
    item_name_ = new ::std::string;
  }
  item_name_->assign(value);
}
inline void ProtoShoutItem::set_item_name(const char* value, size_t size) {
  set_has_item_name();
  if (item_name_ == &::google::protobuf::internal::kEmptyString) {
    item_name_ = new ::std::string;
  }
  item_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoShoutItem::mutable_item_name() {
  set_has_item_name();
  if (item_name_ == &::google::protobuf::internal::kEmptyString) {
    item_name_ = new ::std::string;
  }
  return item_name_;
}
inline ::std::string* ProtoShoutItem::release_item_name() {
  clear_has_item_name();
  if (item_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = item_name_;
    item_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 type = 3;
inline bool ProtoShoutItem::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoShoutItem::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoShoutItem::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoShoutItem::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ProtoShoutItem::type() const {
  return type_;
}
inline void ProtoShoutItem::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional bytes msg = 4;
inline bool ProtoShoutItem::has_msg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoShoutItem::set_has_msg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoShoutItem::clear_has_msg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoShoutItem::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& ProtoShoutItem::msg() const {
  return *msg_;
}
inline void ProtoShoutItem::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void ProtoShoutItem::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void ProtoShoutItem::set_msg(const void* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoShoutItem::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* ProtoShoutItem::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 color = 5;
inline bool ProtoShoutItem::has_color() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoShoutItem::set_has_color() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoShoutItem::clear_has_color() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoShoutItem::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::google::protobuf::int32 ProtoShoutItem::color() const {
  return color_;
}
inline void ProtoShoutItem::set_color(::google::protobuf::int32 value) {
  set_has_color();
  color_ = value;
}

// optional int32 item_num = 6;
inline bool ProtoShoutItem::has_item_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoShoutItem::set_has_item_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoShoutItem::clear_has_item_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoShoutItem::clear_item_num() {
  item_num_ = 0;
  clear_has_item_num();
}
inline ::google::protobuf::int32 ProtoShoutItem::item_num() const {
  return item_num_;
}
inline void ProtoShoutItem::set_item_num(::google::protobuf::int32 value) {
  set_has_item_num();
  item_num_ = value;
}

// -------------------------------------------------------------------

// PActPanelInfo

// optional int32 act_index = 1;
inline bool PActPanelInfo::has_act_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PActPanelInfo::set_has_act_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PActPanelInfo::clear_has_act_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PActPanelInfo::clear_act_index() {
  act_index_ = 0;
  clear_has_act_index();
}
inline ::google::protobuf::int32 PActPanelInfo::act_index() const {
  return act_index_;
}
inline void PActPanelInfo::set_act_index(::google::protobuf::int32 value) {
  set_has_act_index();
  act_index_ = value;
}

// optional int32 first_type = 2;
inline bool PActPanelInfo::has_first_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PActPanelInfo::set_has_first_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PActPanelInfo::clear_has_first_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PActPanelInfo::clear_first_type() {
  first_type_ = 0;
  clear_has_first_type();
}
inline ::google::protobuf::int32 PActPanelInfo::first_type() const {
  return first_type_;
}
inline void PActPanelInfo::set_first_type(::google::protobuf::int32 value) {
  set_has_first_type();
  first_type_ = value;
}

// optional int32 second_type = 3;
inline bool PActPanelInfo::has_second_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PActPanelInfo::set_has_second_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PActPanelInfo::clear_has_second_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PActPanelInfo::clear_second_type() {
  second_type_ = 0;
  clear_has_second_type();
}
inline ::google::protobuf::int32 PActPanelInfo::second_type() const {
  return second_type_;
}
inline void PActPanelInfo::set_second_type(::google::protobuf::int32 value) {
  set_has_second_type();
  second_type_ = value;
}

// optional string title = 4;
inline bool PActPanelInfo::has_title() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PActPanelInfo::set_has_title() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PActPanelInfo::clear_has_title() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PActPanelInfo::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& PActPanelInfo::title() const {
  return *title_;
}
inline void PActPanelInfo::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void PActPanelInfo::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void PActPanelInfo::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PActPanelInfo::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* PActPanelInfo::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string content = 5;
inline bool PActPanelInfo::has_content() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PActPanelInfo::set_has_content() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PActPanelInfo::clear_has_content() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PActPanelInfo::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& PActPanelInfo::content() const {
  return *content_;
}
inline void PActPanelInfo::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void PActPanelInfo::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void PActPanelInfo::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PActPanelInfo::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* PActPanelInfo::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 start_tick = 6;
inline bool PActPanelInfo::has_start_tick() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PActPanelInfo::set_has_start_tick() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PActPanelInfo::clear_has_start_tick() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PActPanelInfo::clear_start_tick() {
  start_tick_ = GOOGLE_LONGLONG(0);
  clear_has_start_tick();
}
inline ::google::protobuf::int64 PActPanelInfo::start_tick() const {
  return start_tick_;
}
inline void PActPanelInfo::set_start_tick(::google::protobuf::int64 value) {
  set_has_start_tick();
  start_tick_ = value;
}

// optional int64 end_tick = 7;
inline bool PActPanelInfo::has_end_tick() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PActPanelInfo::set_has_end_tick() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PActPanelInfo::clear_has_end_tick() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PActPanelInfo::clear_end_tick() {
  end_tick_ = GOOGLE_LONGLONG(0);
  clear_has_end_tick();
}
inline ::google::protobuf::int64 PActPanelInfo::end_tick() const {
  return end_tick_;
}
inline void PActPanelInfo::set_end_tick(::google::protobuf::int64 value) {
  set_has_end_tick();
  end_tick_ = value;
}

// optional int32 reward_count = 8;
inline bool PActPanelInfo::has_reward_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PActPanelInfo::set_has_reward_count() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PActPanelInfo::clear_has_reward_count() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PActPanelInfo::clear_reward_count() {
  reward_count_ = 0;
  clear_has_reward_count();
}
inline ::google::protobuf::int32 PActPanelInfo::reward_count() const {
  return reward_count_;
}
inline void PActPanelInfo::set_reward_count(::google::protobuf::int32 value) {
  set_has_reward_count();
  reward_count_ = value;
}

// optional int32 priority = 9;
inline bool PActPanelInfo::has_priority() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PActPanelInfo::set_has_priority() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PActPanelInfo::clear_has_priority() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PActPanelInfo::clear_priority() {
  priority_ = 0;
  clear_has_priority();
}
inline ::google::protobuf::int32 PActPanelInfo::priority() const {
  return priority_;
}
inline void PActPanelInfo::set_priority(::google::protobuf::int32 value) {
  set_has_priority();
  priority_ = value;
}

// optional int64 times = 10;
inline bool PActPanelInfo::has_times() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PActPanelInfo::set_has_times() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PActPanelInfo::clear_has_times() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PActPanelInfo::clear_times() {
  times_ = GOOGLE_LONGLONG(0);
  clear_has_times();
}
inline ::google::protobuf::int64 PActPanelInfo::times() const {
  return times_;
}
inline void PActPanelInfo::set_times(::google::protobuf::int64 value) {
  set_has_times();
  times_ = value;
}

// -------------------------------------------------------------------

// ProtoLeagueStoreApply

// optional string role_name = 1;
inline bool ProtoLeagueStoreApply::has_role_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoLeagueStoreApply::set_has_role_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoLeagueStoreApply::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoLeagueStoreApply::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& ProtoLeagueStoreApply::role_name() const {
  return *role_name_;
}
inline void ProtoLeagueStoreApply::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoLeagueStoreApply::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoLeagueStoreApply::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoLeagueStoreApply::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* ProtoLeagueStoreApply::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 role_level = 2;
inline bool ProtoLeagueStoreApply::has_role_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoLeagueStoreApply::set_has_role_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoLeagueStoreApply::clear_has_role_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoLeagueStoreApply::clear_role_level() {
  role_level_ = 0;
  clear_has_role_level();
}
inline ::google::protobuf::int32 ProtoLeagueStoreApply::role_level() const {
  return role_level_;
}
inline void ProtoLeagueStoreApply::set_role_level(::google::protobuf::int32 value) {
  set_has_role_level();
  role_level_ = value;
}

// optional int32 contri = 3;
inline bool ProtoLeagueStoreApply::has_contri() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoLeagueStoreApply::set_has_contri() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoLeagueStoreApply::clear_has_contri() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoLeagueStoreApply::clear_contri() {
  contri_ = 0;
  clear_has_contri();
}
inline ::google::protobuf::int32 ProtoLeagueStoreApply::contri() const {
  return contri_;
}
inline void ProtoLeagueStoreApply::set_contri(::google::protobuf::int32 value) {
  set_has_contri();
  contri_ = value;
}

// optional int32 item_id = 4;
inline bool ProtoLeagueStoreApply::has_item_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoLeagueStoreApply::set_has_item_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoLeagueStoreApply::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoLeagueStoreApply::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
}
inline ::google::protobuf::int32 ProtoLeagueStoreApply::item_id() const {
  return item_id_;
}
inline void ProtoLeagueStoreApply::set_item_id(::google::protobuf::int32 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional int32 item_num = 5;
inline bool ProtoLeagueStoreApply::has_item_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoLeagueStoreApply::set_has_item_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoLeagueStoreApply::clear_has_item_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoLeagueStoreApply::clear_item_num() {
  item_num_ = 0;
  clear_has_item_num();
}
inline ::google::protobuf::int32 ProtoLeagueStoreApply::item_num() const {
  return item_num_;
}
inline void ProtoLeagueStoreApply::set_item_num(::google::protobuf::int32 value) {
  set_has_item_num();
  item_num_ = value;
}

// optional int64 apply_id = 6;
inline bool ProtoLeagueStoreApply::has_apply_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoLeagueStoreApply::set_has_apply_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoLeagueStoreApply::clear_has_apply_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoLeagueStoreApply::clear_apply_id() {
  apply_id_ = GOOGLE_LONGLONG(0);
  clear_has_apply_id();
}
inline ::google::protobuf::int64 ProtoLeagueStoreApply::apply_id() const {
  return apply_id_;
}
inline void ProtoLeagueStoreApply::set_apply_id(::google::protobuf::int64 value) {
  set_has_apply_id();
  apply_id_ = value;
}

// optional .ProtoItem item = 7;
inline bool ProtoLeagueStoreApply::has_item() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoLeagueStoreApply::set_has_item() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoLeagueStoreApply::clear_has_item() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoLeagueStoreApply::clear_item() {
  if (item_ != NULL) item_->::ProtoItem::Clear();
  clear_has_item();
}
inline const ::ProtoItem& ProtoLeagueStoreApply::item() const {
  return item_ != NULL ? *item_ : *default_instance_->item_;
}
inline ::ProtoItem* ProtoLeagueStoreApply::mutable_item() {
  set_has_item();
  if (item_ == NULL) item_ = new ::ProtoItem;
  return item_;
}
inline ::ProtoItem* ProtoLeagueStoreApply::release_item() {
  clear_has_item();
  ::ProtoItem* temp = item_;
  item_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// ProtoLeagueStoreApplyHis

// optional int64 exec_tick = 1;
inline bool ProtoLeagueStoreApplyHis::has_exec_tick() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoLeagueStoreApplyHis::set_has_exec_tick() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoLeagueStoreApplyHis::clear_has_exec_tick() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoLeagueStoreApplyHis::clear_exec_tick() {
  exec_tick_ = GOOGLE_LONGLONG(0);
  clear_has_exec_tick();
}
inline ::google::protobuf::int64 ProtoLeagueStoreApplyHis::exec_tick() const {
  return exec_tick_;
}
inline void ProtoLeagueStoreApplyHis::set_exec_tick(::google::protobuf::int64 value) {
  set_has_exec_tick();
  exec_tick_ = value;
}

// optional string exec_name = 2;
inline bool ProtoLeagueStoreApplyHis::has_exec_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoLeagueStoreApplyHis::set_has_exec_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoLeagueStoreApplyHis::clear_has_exec_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoLeagueStoreApplyHis::clear_exec_name() {
  if (exec_name_ != &::google::protobuf::internal::kEmptyString) {
    exec_name_->clear();
  }
  clear_has_exec_name();
}
inline const ::std::string& ProtoLeagueStoreApplyHis::exec_name() const {
  return *exec_name_;
}
inline void ProtoLeagueStoreApplyHis::set_exec_name(const ::std::string& value) {
  set_has_exec_name();
  if (exec_name_ == &::google::protobuf::internal::kEmptyString) {
    exec_name_ = new ::std::string;
  }
  exec_name_->assign(value);
}
inline void ProtoLeagueStoreApplyHis::set_exec_name(const char* value) {
  set_has_exec_name();
  if (exec_name_ == &::google::protobuf::internal::kEmptyString) {
    exec_name_ = new ::std::string;
  }
  exec_name_->assign(value);
}
inline void ProtoLeagueStoreApplyHis::set_exec_name(const char* value, size_t size) {
  set_has_exec_name();
  if (exec_name_ == &::google::protobuf::internal::kEmptyString) {
    exec_name_ = new ::std::string;
  }
  exec_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoLeagueStoreApplyHis::mutable_exec_name() {
  set_has_exec_name();
  if (exec_name_ == &::google::protobuf::internal::kEmptyString) {
    exec_name_ = new ::std::string;
  }
  return exec_name_;
}
inline ::std::string* ProtoLeagueStoreApplyHis::release_exec_name() {
  clear_has_exec_name();
  if (exec_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = exec_name_;
    exec_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 item_id = 3;
inline bool ProtoLeagueStoreApplyHis::has_item_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoLeagueStoreApplyHis::set_has_item_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoLeagueStoreApplyHis::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoLeagueStoreApplyHis::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
}
inline ::google::protobuf::int32 ProtoLeagueStoreApplyHis::item_id() const {
  return item_id_;
}
inline void ProtoLeagueStoreApplyHis::set_item_id(::google::protobuf::int32 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional int32 item_num = 4;
inline bool ProtoLeagueStoreApplyHis::has_item_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoLeagueStoreApplyHis::set_has_item_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoLeagueStoreApplyHis::clear_has_item_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoLeagueStoreApplyHis::clear_item_num() {
  item_num_ = 0;
  clear_has_item_num();
}
inline ::google::protobuf::int32 ProtoLeagueStoreApplyHis::item_num() const {
  return item_num_;
}
inline void ProtoLeagueStoreApplyHis::set_item_num(::google::protobuf::int32 value) {
  set_has_item_num();
  item_num_ = value;
}

// optional string checker_name = 5;
inline bool ProtoLeagueStoreApplyHis::has_checker_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoLeagueStoreApplyHis::set_has_checker_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoLeagueStoreApplyHis::clear_has_checker_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoLeagueStoreApplyHis::clear_checker_name() {
  if (checker_name_ != &::google::protobuf::internal::kEmptyString) {
    checker_name_->clear();
  }
  clear_has_checker_name();
}
inline const ::std::string& ProtoLeagueStoreApplyHis::checker_name() const {
  return *checker_name_;
}
inline void ProtoLeagueStoreApplyHis::set_checker_name(const ::std::string& value) {
  set_has_checker_name();
  if (checker_name_ == &::google::protobuf::internal::kEmptyString) {
    checker_name_ = new ::std::string;
  }
  checker_name_->assign(value);
}
inline void ProtoLeagueStoreApplyHis::set_checker_name(const char* value) {
  set_has_checker_name();
  if (checker_name_ == &::google::protobuf::internal::kEmptyString) {
    checker_name_ = new ::std::string;
  }
  checker_name_->assign(value);
}
inline void ProtoLeagueStoreApplyHis::set_checker_name(const char* value, size_t size) {
  set_has_checker_name();
  if (checker_name_ == &::google::protobuf::internal::kEmptyString) {
    checker_name_ = new ::std::string;
  }
  checker_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoLeagueStoreApplyHis::mutable_checker_name() {
  set_has_checker_name();
  if (checker_name_ == &::google::protobuf::internal::kEmptyString) {
    checker_name_ = new ::std::string;
  }
  return checker_name_;
}
inline ::std::string* ProtoLeagueStoreApplyHis::release_checker_name() {
  clear_has_checker_name();
  if (checker_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = checker_name_;
    checker_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 exec = 6;
inline bool ProtoLeagueStoreApplyHis::has_exec() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoLeagueStoreApplyHis::set_has_exec() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoLeagueStoreApplyHis::clear_has_exec() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoLeagueStoreApplyHis::clear_exec() {
  exec_ = 0;
  clear_has_exec();
}
inline ::google::protobuf::int32 ProtoLeagueStoreApplyHis::exec() const {
  return exec_;
}
inline void ProtoLeagueStoreApplyHis::set_exec(::google::protobuf::int32 value) {
  set_has_exec();
  exec_ = value;
}

// -------------------------------------------------------------------

// ProtoActRewardItem

// optional int32 index = 1;
inline bool ProtoActRewardItem::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoActRewardItem::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoActRewardItem::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoActRewardItem::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 ProtoActRewardItem::index() const {
  return index_;
}
inline void ProtoActRewardItem::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 count = 2;
inline bool ProtoActRewardItem::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoActRewardItem::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoActRewardItem::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoActRewardItem::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 ProtoActRewardItem::count() const {
  return count_;
}
inline void ProtoActRewardItem::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// ProtoActRoleReward

// repeated .ProtoActRewardItem drawed_set = 1;
inline int ProtoActRoleReward::drawed_set_size() const {
  return drawed_set_.size();
}
inline void ProtoActRoleReward::clear_drawed_set() {
  drawed_set_.Clear();
}
inline const ::ProtoActRewardItem& ProtoActRoleReward::drawed_set(int index) const {
  return drawed_set_.Get(index);
}
inline ::ProtoActRewardItem* ProtoActRoleReward::mutable_drawed_set(int index) {
  return drawed_set_.Mutable(index);
}
inline ::ProtoActRewardItem* ProtoActRoleReward::add_drawed_set() {
  return drawed_set_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoActRewardItem >&
ProtoActRoleReward::drawed_set() const {
  return drawed_set_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoActRewardItem >*
ProtoActRoleReward::mutable_drawed_set() {
  return &drawed_set_;
}

// optional int64 role_id = 2;
inline bool ProtoActRoleReward::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoActRoleReward::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoActRoleReward::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoActRoleReward::clear_role_id() {
  role_id_ = GOOGLE_LONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::int64 ProtoActRoleReward::role_id() const {
  return role_id_;
}
inline void ProtoActRoleReward::set_role_id(::google::protobuf::int64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional int32 carrer = 3;
inline bool ProtoActRoleReward::has_carrer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoActRoleReward::set_has_carrer() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoActRoleReward::clear_has_carrer() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoActRoleReward::clear_carrer() {
  carrer_ = 0;
  clear_has_carrer();
}
inline ::google::protobuf::int32 ProtoActRoleReward::carrer() const {
  return carrer_;
}
inline void ProtoActRoleReward::set_carrer(::google::protobuf::int32 value) {
  set_has_carrer();
  carrer_ = value;
}

// -------------------------------------------------------------------

// ProtoPairLongString

// optional int64 data_int64 = 1;
inline bool ProtoPairLongString::has_data_int64() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoPairLongString::set_has_data_int64() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoPairLongString::clear_has_data_int64() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoPairLongString::clear_data_int64() {
  data_int64_ = GOOGLE_LONGLONG(0);
  clear_has_data_int64();
}
inline ::google::protobuf::int64 ProtoPairLongString::data_int64() const {
  return data_int64_;
}
inline void ProtoPairLongString::set_data_int64(::google::protobuf::int64 value) {
  set_has_data_int64();
  data_int64_ = value;
}

// optional string data_string = 2;
inline bool ProtoPairLongString::has_data_string() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoPairLongString::set_has_data_string() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoPairLongString::clear_has_data_string() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoPairLongString::clear_data_string() {
  if (data_string_ != &::google::protobuf::internal::kEmptyString) {
    data_string_->clear();
  }
  clear_has_data_string();
}
inline const ::std::string& ProtoPairLongString::data_string() const {
  return *data_string_;
}
inline void ProtoPairLongString::set_data_string(const ::std::string& value) {
  set_has_data_string();
  if (data_string_ == &::google::protobuf::internal::kEmptyString) {
    data_string_ = new ::std::string;
  }
  data_string_->assign(value);
}
inline void ProtoPairLongString::set_data_string(const char* value) {
  set_has_data_string();
  if (data_string_ == &::google::protobuf::internal::kEmptyString) {
    data_string_ = new ::std::string;
  }
  data_string_->assign(value);
}
inline void ProtoPairLongString::set_data_string(const char* value, size_t size) {
  set_has_data_string();
  if (data_string_ == &::google::protobuf::internal::kEmptyString) {
    data_string_ = new ::std::string;
  }
  data_string_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoPairLongString::mutable_data_string() {
  set_has_data_string();
  if (data_string_ == &::google::protobuf::internal::kEmptyString) {
    data_string_ = new ::std::string;
  }
  return data_string_;
}
inline ::std::string* ProtoPairLongString::release_data_string() {
  clear_has_data_string();
  if (data_string_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_string_;
    data_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string league = 3;
inline bool ProtoPairLongString::has_league() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoPairLongString::set_has_league() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoPairLongString::clear_has_league() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoPairLongString::clear_league() {
  if (league_ != &::google::protobuf::internal::kEmptyString) {
    league_->clear();
  }
  clear_has_league();
}
inline const ::std::string& ProtoPairLongString::league() const {
  return *league_;
}
inline void ProtoPairLongString::set_league(const ::std::string& value) {
  set_has_league();
  if (league_ == &::google::protobuf::internal::kEmptyString) {
    league_ = new ::std::string;
  }
  league_->assign(value);
}
inline void ProtoPairLongString::set_league(const char* value) {
  set_has_league();
  if (league_ == &::google::protobuf::internal::kEmptyString) {
    league_ = new ::std::string;
  }
  league_->assign(value);
}
inline void ProtoPairLongString::set_league(const char* value, size_t size) {
  set_has_league();
  if (league_ == &::google::protobuf::internal::kEmptyString) {
    league_ = new ::std::string;
  }
  league_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoPairLongString::mutable_league() {
  set_has_league();
  if (league_ == &::google::protobuf::internal::kEmptyString) {
    league_ = new ::std::string;
  }
  return league_;
}
inline ::std::string* ProtoPairLongString::release_league() {
  clear_has_league();
  if (league_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = league_;
    league_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ProtoPairLong

// optional int64 obj_id = 1;
inline bool ProtoPairLong::has_obj_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoPairLong::set_has_obj_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoPairLong::clear_has_obj_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoPairLong::clear_obj_id() {
  obj_id_ = GOOGLE_LONGLONG(0);
  clear_has_obj_id();
}
inline ::google::protobuf::int64 ProtoPairLong::obj_id() const {
  return obj_id_;
}
inline void ProtoPairLong::set_obj_id(::google::protobuf::int64 value) {
  set_has_obj_id();
  obj_id_ = value;
}

// optional int64 obj_value = 2;
inline bool ProtoPairLong::has_obj_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoPairLong::set_has_obj_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoPairLong::clear_has_obj_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoPairLong::clear_obj_value() {
  obj_value_ = GOOGLE_LONGLONG(0);
  clear_has_obj_value();
}
inline ::google::protobuf::int64 ProtoPairLong::obj_value() const {
  return obj_value_;
}
inline void ProtoPairLong::set_obj_value(::google::protobuf::int64 value) {
  set_has_obj_value();
  obj_value_ = value;
}

// -------------------------------------------------------------------

// ProtoActRewardNotify

// optional int32 priority = 1;
inline bool ProtoActRewardNotify::has_priority() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoActRewardNotify::set_has_priority() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoActRewardNotify::clear_has_priority() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoActRewardNotify::clear_priority() {
  priority_ = 0;
  clear_has_priority();
}
inline ::google::protobuf::int32 ProtoActRewardNotify::priority() const {
  return priority_;
}
inline void ProtoActRewardNotify::set_priority(::google::protobuf::int32 value) {
  set_has_priority();
  priority_ = value;
}

// repeated int32 act_index = 2;
inline int ProtoActRewardNotify::act_index_size() const {
  return act_index_.size();
}
inline void ProtoActRewardNotify::clear_act_index() {
  act_index_.Clear();
}
inline ::google::protobuf::int32 ProtoActRewardNotify::act_index(int index) const {
  return act_index_.Get(index);
}
inline void ProtoActRewardNotify::set_act_index(int index, ::google::protobuf::int32 value) {
  act_index_.Set(index, value);
}
inline void ProtoActRewardNotify::add_act_index(::google::protobuf::int32 value) {
  act_index_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProtoActRewardNotify::act_index() const {
  return act_index_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProtoActRewardNotify::mutable_act_index() {
  return &act_index_;
}

// -------------------------------------------------------------------

// ProtoNearRole

// optional int64 role_id = 1;
inline bool ProtoNearRole::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoNearRole::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoNearRole::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoNearRole::clear_role_id() {
  role_id_ = GOOGLE_LONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::int64 ProtoNearRole::role_id() const {
  return role_id_;
}
inline void ProtoNearRole::set_role_id(::google::protobuf::int64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string role_name = 2;
inline bool ProtoNearRole::has_role_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoNearRole::set_has_role_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoNearRole::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoNearRole::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& ProtoNearRole::role_name() const {
  return *role_name_;
}
inline void ProtoNearRole::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoNearRole::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoNearRole::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoNearRole::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* ProtoNearRole::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 level = 3;
inline bool ProtoNearRole::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoNearRole::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoNearRole::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoNearRole::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ProtoNearRole::level() const {
  return level_;
}
inline void ProtoNearRole::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional .ProtoCoord location = 4;
inline bool ProtoNearRole::has_location() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoNearRole::set_has_location() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoNearRole::clear_has_location() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoNearRole::clear_location() {
  if (location_ != NULL) location_->::ProtoCoord::Clear();
  clear_has_location();
}
inline const ::ProtoCoord& ProtoNearRole::location() const {
  return location_ != NULL ? *location_ : *default_instance_->location_;
}
inline ::ProtoCoord* ProtoNearRole::mutable_location() {
  set_has_location();
  if (location_ == NULL) location_ = new ::ProtoCoord;
  return location_;
}
inline ::ProtoCoord* ProtoNearRole::release_location() {
  clear_has_location();
  ::ProtoCoord* temp = location_;
  location_ = NULL;
  return temp;
}

// optional int32 name_color = 5;
inline bool ProtoNearRole::has_name_color() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoNearRole::set_has_name_color() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoNearRole::clear_has_name_color() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoNearRole::clear_name_color() {
  name_color_ = 0;
  clear_has_name_color();
}
inline ::google::protobuf::int32 ProtoNearRole::name_color() const {
  return name_color_;
}
inline void ProtoNearRole::set_name_color(::google::protobuf::int32 value) {
  set_has_name_color();
  name_color_ = value;
}

// -------------------------------------------------------------------

// ProtoTravelTeam

// optional int64 team_id = 1;
inline bool ProtoTravelTeam::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoTravelTeam::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoTravelTeam::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoTravelTeam::clear_team_id() {
  team_id_ = GOOGLE_LONGLONG(0);
  clear_has_team_id();
}
inline ::google::protobuf::int64 ProtoTravelTeam::team_id() const {
  return team_id_;
}
inline void ProtoTravelTeam::set_team_id(::google::protobuf::int64 value) {
  set_has_team_id();
  team_id_ = value;
}

// optional string team_name = 2;
inline bool ProtoTravelTeam::has_team_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoTravelTeam::set_has_team_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoTravelTeam::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoTravelTeam::clear_team_name() {
  if (team_name_ != &::google::protobuf::internal::kEmptyString) {
    team_name_->clear();
  }
  clear_has_team_name();
}
inline const ::std::string& ProtoTravelTeam::team_name() const {
  return *team_name_;
}
inline void ProtoTravelTeam::set_team_name(const ::std::string& value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
}
inline void ProtoTravelTeam::set_team_name(const char* value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
}
inline void ProtoTravelTeam::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoTravelTeam::mutable_team_name() {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  return team_name_;
}
inline ::std::string* ProtoTravelTeam::release_team_name() {
  clear_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = team_name_;
    team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 leader_id = 3;
inline bool ProtoTravelTeam::has_leader_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoTravelTeam::set_has_leader_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoTravelTeam::clear_has_leader_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoTravelTeam::clear_leader_id() {
  leader_id_ = GOOGLE_LONGLONG(0);
  clear_has_leader_id();
}
inline ::google::protobuf::int64 ProtoTravelTeam::leader_id() const {
  return leader_id_;
}
inline void ProtoTravelTeam::set_leader_id(::google::protobuf::int64 value) {
  set_has_leader_id();
  leader_id_ = value;
}

// optional string leader_name = 4;
inline bool ProtoTravelTeam::has_leader_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoTravelTeam::set_has_leader_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoTravelTeam::clear_has_leader_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoTravelTeam::clear_leader_name() {
  if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
    leader_name_->clear();
  }
  clear_has_leader_name();
}
inline const ::std::string& ProtoTravelTeam::leader_name() const {
  return *leader_name_;
}
inline void ProtoTravelTeam::set_leader_name(const ::std::string& value) {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    leader_name_ = new ::std::string;
  }
  leader_name_->assign(value);
}
inline void ProtoTravelTeam::set_leader_name(const char* value) {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    leader_name_ = new ::std::string;
  }
  leader_name_->assign(value);
}
inline void ProtoTravelTeam::set_leader_name(const char* value, size_t size) {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    leader_name_ = new ::std::string;
  }
  leader_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoTravelTeam::mutable_leader_name() {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    leader_name_ = new ::std::string;
  }
  return leader_name_;
}
inline ::std::string* ProtoTravelTeam::release_leader_name() {
  clear_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = leader_name_;
    leader_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 teamer_amount = 5;
inline bool ProtoTravelTeam::has_teamer_amount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoTravelTeam::set_has_teamer_amount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoTravelTeam::clear_has_teamer_amount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoTravelTeam::clear_teamer_amount() {
  teamer_amount_ = 0;
  clear_has_teamer_amount();
}
inline ::google::protobuf::int32 ProtoTravelTeam::teamer_amount() const {
  return teamer_amount_;
}
inline void ProtoTravelTeam::set_teamer_amount(::google::protobuf::int32 value) {
  set_has_teamer_amount();
  teamer_amount_ = value;
}

// optional int32 team_force = 6;
inline bool ProtoTravelTeam::has_team_force() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoTravelTeam::set_has_team_force() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoTravelTeam::clear_has_team_force() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoTravelTeam::clear_team_force() {
  team_force_ = 0;
  clear_has_team_force();
}
inline ::google::protobuf::int32 ProtoTravelTeam::team_force() const {
  return team_force_;
}
inline void ProtoTravelTeam::set_team_force(::google::protobuf::int32 value) {
  set_has_team_force();
  team_force_ = value;
}

// optional int32 scene_id = 7;
inline bool ProtoTravelTeam::has_scene_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoTravelTeam::set_has_scene_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoTravelTeam::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoTravelTeam::clear_scene_id() {
  scene_id_ = 0;
  clear_has_scene_id();
}
inline ::google::protobuf::int32 ProtoTravelTeam::scene_id() const {
  return scene_id_;
}
inline void ProtoTravelTeam::set_scene_id(::google::protobuf::int32 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// optional int32 sceret_flag = 8;
inline bool ProtoTravelTeam::has_sceret_flag() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoTravelTeam::set_has_sceret_flag() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoTravelTeam::clear_has_sceret_flag() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoTravelTeam::clear_sceret_flag() {
  sceret_flag_ = 0;
  clear_has_sceret_flag();
}
inline ::google::protobuf::int32 ProtoTravelTeam::sceret_flag() const {
  return sceret_flag_;
}
inline void ProtoTravelTeam::set_sceret_flag(::google::protobuf::int32 value) {
  set_has_sceret_flag();
  sceret_flag_ = value;
}

// optional int32 limit_force = 9;
inline bool ProtoTravelTeam::has_limit_force() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProtoTravelTeam::set_has_limit_force() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProtoTravelTeam::clear_has_limit_force() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProtoTravelTeam::clear_limit_force() {
  limit_force_ = 0;
  clear_has_limit_force();
}
inline ::google::protobuf::int32 ProtoTravelTeam::limit_force() const {
  return limit_force_;
}
inline void ProtoTravelTeam::set_limit_force(::google::protobuf::int32 value) {
  set_has_limit_force();
  limit_force_ = value;
}

// optional int32 auto_start = 10;
inline bool ProtoTravelTeam::has_auto_start() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProtoTravelTeam::set_has_auto_start() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ProtoTravelTeam::clear_has_auto_start() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ProtoTravelTeam::clear_auto_start() {
  auto_start_ = 0;
  clear_has_auto_start();
}
inline ::google::protobuf::int32 ProtoTravelTeam::auto_start() const {
  return auto_start_;
}
inline void ProtoTravelTeam::set_auto_start(::google::protobuf::int32 value) {
  set_has_auto_start();
  auto_start_ = value;
}

// optional int32 start_fb = 11;
inline bool ProtoTravelTeam::has_start_fb() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ProtoTravelTeam::set_has_start_fb() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ProtoTravelTeam::clear_has_start_fb() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ProtoTravelTeam::clear_start_fb() {
  start_fb_ = 0;
  clear_has_start_fb();
}
inline ::google::protobuf::int32 ProtoTravelTeam::start_fb() const {
  return start_fb_;
}
inline void ProtoTravelTeam::set_start_fb(::google::protobuf::int32 value) {
  set_has_start_fb();
  start_fb_ = value;
}

// repeated int64 teamer_id = 12;
inline int ProtoTravelTeam::teamer_id_size() const {
  return teamer_id_.size();
}
inline void ProtoTravelTeam::clear_teamer_id() {
  teamer_id_.Clear();
}
inline ::google::protobuf::int64 ProtoTravelTeam::teamer_id(int index) const {
  return teamer_id_.Get(index);
}
inline void ProtoTravelTeam::set_teamer_id(int index, ::google::protobuf::int64 value) {
  teamer_id_.Set(index, value);
}
inline void ProtoTravelTeam::add_teamer_id(::google::protobuf::int64 value) {
  teamer_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ProtoTravelTeam::teamer_id() const {
  return teamer_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ProtoTravelTeam::mutable_teamer_id() {
  return &teamer_id_;
}

// optional int32 is_apply = 13;
inline bool ProtoTravelTeam::has_is_apply() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ProtoTravelTeam::set_has_is_apply() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ProtoTravelTeam::clear_has_is_apply() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ProtoTravelTeam::clear_is_apply() {
  is_apply_ = 0;
  clear_has_is_apply();
}
inline ::google::protobuf::int32 ProtoTravelTeam::is_apply() const {
  return is_apply_;
}
inline void ProtoTravelTeam::set_is_apply(::google::protobuf::int32 value) {
  set_has_is_apply();
  is_apply_ = value;
}

// -------------------------------------------------------------------

// ProtoBrotherInfo

// optional int64 role_id = 1;
inline bool ProtoBrotherInfo::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoBrotherInfo::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoBrotherInfo::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoBrotherInfo::clear_role_id() {
  role_id_ = GOOGLE_LONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::int64 ProtoBrotherInfo::role_id() const {
  return role_id_;
}
inline void ProtoBrotherInfo::set_role_id(::google::protobuf::int64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string role_name = 2;
inline bool ProtoBrotherInfo::has_role_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoBrotherInfo::set_has_role_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoBrotherInfo::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoBrotherInfo::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& ProtoBrotherInfo::role_name() const {
  return *role_name_;
}
inline void ProtoBrotherInfo::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoBrotherInfo::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoBrotherInfo::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoBrotherInfo::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* ProtoBrotherInfo::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 role_career = 3;
inline bool ProtoBrotherInfo::has_role_career() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoBrotherInfo::set_has_role_career() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoBrotherInfo::clear_has_role_career() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoBrotherInfo::clear_role_career() {
  role_career_ = 0;
  clear_has_role_career();
}
inline ::google::protobuf::int32 ProtoBrotherInfo::role_career() const {
  return role_career_;
}
inline void ProtoBrotherInfo::set_role_career(::google::protobuf::int32 value) {
  set_has_role_career();
  role_career_ = value;
}

// optional int32 role_level = 4;
inline bool ProtoBrotherInfo::has_role_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoBrotherInfo::set_has_role_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoBrotherInfo::clear_has_role_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoBrotherInfo::clear_role_level() {
  role_level_ = 0;
  clear_has_role_level();
}
inline ::google::protobuf::int32 ProtoBrotherInfo::role_level() const {
  return role_level_;
}
inline void ProtoBrotherInfo::set_role_level(::google::protobuf::int32 value) {
  set_has_role_level();
  role_level_ = value;
}

// optional int32 emotion = 5;
inline bool ProtoBrotherInfo::has_emotion() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoBrotherInfo::set_has_emotion() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoBrotherInfo::clear_has_emotion() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoBrotherInfo::clear_emotion() {
  emotion_ = 0;
  clear_has_emotion();
}
inline ::google::protobuf::int32 ProtoBrotherInfo::emotion() const {
  return emotion_;
}
inline void ProtoBrotherInfo::set_emotion(::google::protobuf::int32 value) {
  set_has_emotion();
  emotion_ = value;
}

// optional int32 online = 6;
inline bool ProtoBrotherInfo::has_online() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoBrotherInfo::set_has_online() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoBrotherInfo::clear_has_online() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoBrotherInfo::clear_online() {
  online_ = 0;
  clear_has_online();
}
inline ::google::protobuf::int32 ProtoBrotherInfo::online() const {
  return online_;
}
inline void ProtoBrotherInfo::set_online(::google::protobuf::int32 value) {
  set_has_online();
  online_ = value;
}

// -------------------------------------------------------------------

// ProtoBrotherTask

// optional int32 task_id = 1;
inline bool ProtoBrotherTask::has_task_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoBrotherTask::set_has_task_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoBrotherTask::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoBrotherTask::clear_task_id() {
  task_id_ = 0;
  clear_has_task_id();
}
inline ::google::protobuf::int32 ProtoBrotherTask::task_id() const {
  return task_id_;
}
inline void ProtoBrotherTask::set_task_id(::google::protobuf::int32 value) {
  set_has_task_id();
  task_id_ = value;
}

// optional int32 finished_num = 2;
inline bool ProtoBrotherTask::has_finished_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoBrotherTask::set_has_finished_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoBrotherTask::clear_has_finished_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoBrotherTask::clear_finished_num() {
  finished_num_ = 0;
  clear_has_finished_num();
}
inline ::google::protobuf::int32 ProtoBrotherTask::finished_num() const {
  return finished_num_;
}
inline void ProtoBrotherTask::set_finished_num(::google::protobuf::int32 value) {
  set_has_finished_num();
  finished_num_ = value;
}

// repeated int32 finished_player = 3;
inline int ProtoBrotherTask::finished_player_size() const {
  return finished_player_.size();
}
inline void ProtoBrotherTask::clear_finished_player() {
  finished_player_.Clear();
}
inline ::google::protobuf::int32 ProtoBrotherTask::finished_player(int index) const {
  return finished_player_.Get(index);
}
inline void ProtoBrotherTask::set_finished_player(int index, ::google::protobuf::int32 value) {
  finished_player_.Set(index, value);
}
inline void ProtoBrotherTask::add_finished_player(::google::protobuf::int32 value) {
  finished_player_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProtoBrotherTask::finished_player() const {
  return finished_player_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProtoBrotherTask::mutable_finished_player() {
  return &finished_player_;
}

// -------------------------------------------------------------------

// ProtoMagicWeapon

// optional int32 magicweapon_id = 1;
inline bool ProtoMagicWeapon::has_magicweapon_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoMagicWeapon::set_has_magicweapon_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoMagicWeapon::clear_has_magicweapon_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoMagicWeapon::clear_magicweapon_id() {
  magicweapon_id_ = 0;
  clear_has_magicweapon_id();
}
inline ::google::protobuf::int32 ProtoMagicWeapon::magicweapon_id() const {
  return magicweapon_id_;
}
inline void ProtoMagicWeapon::set_magicweapon_id(::google::protobuf::int32 value) {
  set_has_magicweapon_id();
  magicweapon_id_ = value;
}

// optional int32 rank_star_grade = 2;
inline bool ProtoMagicWeapon::has_rank_star_grade() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoMagicWeapon::set_has_rank_star_grade() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoMagicWeapon::clear_has_rank_star_grade() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoMagicWeapon::clear_rank_star_grade() {
  rank_star_grade_ = 0;
  clear_has_rank_star_grade();
}
inline ::google::protobuf::int32 ProtoMagicWeapon::rank_star_grade() const {
  return rank_star_grade_;
}
inline void ProtoMagicWeapon::set_rank_star_grade(::google::protobuf::int32 value) {
  set_has_rank_star_grade();
  rank_star_grade_ = value;
}

// optional int32 rank_star_progress = 3;
inline bool ProtoMagicWeapon::has_rank_star_progress() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoMagicWeapon::set_has_rank_star_progress() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoMagicWeapon::clear_has_rank_star_progress() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoMagicWeapon::clear_rank_star_progress() {
  rank_star_progress_ = 0;
  clear_has_rank_star_progress();
}
inline ::google::protobuf::int32 ProtoMagicWeapon::rank_star_progress() const {
  return rank_star_progress_;
}
inline void ProtoMagicWeapon::set_rank_star_progress(::google::protobuf::int32 value) {
  set_has_rank_star_progress();
  rank_star_progress_ = value;
}

// optional int32 skill_id = 4;
inline bool ProtoMagicWeapon::has_skill_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoMagicWeapon::set_has_skill_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoMagicWeapon::clear_has_skill_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoMagicWeapon::clear_skill_id() {
  skill_id_ = 0;
  clear_has_skill_id();
}
inline ::google::protobuf::int32 ProtoMagicWeapon::skill_id() const {
  return skill_id_;
}
inline void ProtoMagicWeapon::set_skill_id(::google::protobuf::int32 value) {
  set_has_skill_id();
  skill_id_ = value;
}

// optional int32 skill_level = 5;
inline bool ProtoMagicWeapon::has_skill_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoMagicWeapon::set_has_skill_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoMagicWeapon::clear_has_skill_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoMagicWeapon::clear_skill_level() {
  skill_level_ = 0;
  clear_has_skill_level();
}
inline ::google::protobuf::int32 ProtoMagicWeapon::skill_level() const {
  return skill_level_;
}
inline void ProtoMagicWeapon::set_skill_level(::google::protobuf::int32 value) {
  set_has_skill_level();
  skill_level_ = value;
}

// optional int32 qua_star_grade = 6;
inline bool ProtoMagicWeapon::has_qua_star_grade() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoMagicWeapon::set_has_qua_star_grade() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoMagicWeapon::clear_has_qua_star_grade() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoMagicWeapon::clear_qua_star_grade() {
  qua_star_grade_ = 0;
  clear_has_qua_star_grade();
}
inline ::google::protobuf::int32 ProtoMagicWeapon::qua_star_grade() const {
  return qua_star_grade_;
}
inline void ProtoMagicWeapon::set_qua_star_grade(::google::protobuf::int32 value) {
  set_has_qua_star_grade();
  qua_star_grade_ = value;
}

// optional int32 qua_star_progress = 7;
inline bool ProtoMagicWeapon::has_qua_star_progress() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoMagicWeapon::set_has_qua_star_progress() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoMagicWeapon::clear_has_qua_star_progress() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoMagicWeapon::clear_qua_star_progress() {
  qua_star_progress_ = 0;
  clear_has_qua_star_progress();
}
inline ::google::protobuf::int32 ProtoMagicWeapon::qua_star_progress() const {
  return qua_star_progress_;
}
inline void ProtoMagicWeapon::set_qua_star_progress(::google::protobuf::int32 value) {
  set_has_qua_star_progress();
  qua_star_progress_ = value;
}

// optional int32 activate_state = 8;
inline bool ProtoMagicWeapon::has_activate_state() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoMagicWeapon::set_has_activate_state() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoMagicWeapon::clear_has_activate_state() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoMagicWeapon::clear_activate_state() {
  activate_state_ = 0;
  clear_has_activate_state();
}
inline ::google::protobuf::int32 ProtoMagicWeapon::activate_state() const {
  return activate_state_;
}
inline void ProtoMagicWeapon::set_activate_state(::google::protobuf::int32 value) {
  set_has_activate_state();
  activate_state_ = value;
}

// -------------------------------------------------------------------

// ProtoAIllusion

// optional int32 id = 1;
inline bool ProtoAIllusion::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoAIllusion::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoAIllusion::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoAIllusion::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ProtoAIllusion::id() const {
  return id_;
}
inline void ProtoAIllusion::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional bool unlock = 2;
inline bool ProtoAIllusion::has_unlock() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoAIllusion::set_has_unlock() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoAIllusion::clear_has_unlock() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoAIllusion::clear_unlock() {
  unlock_ = false;
  clear_has_unlock();
}
inline bool ProtoAIllusion::unlock() const {
  return unlock_;
}
inline void ProtoAIllusion::set_unlock(bool value) {
  set_has_unlock();
  unlock_ = value;
}

// optional int32 type = 3;
inline bool ProtoAIllusion::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoAIllusion::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoAIllusion::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoAIllusion::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ProtoAIllusion::type() const {
  return type_;
}
inline void ProtoAIllusion::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 last_sec = 4;
inline bool ProtoAIllusion::has_last_sec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoAIllusion::set_has_last_sec() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoAIllusion::clear_has_last_sec() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoAIllusion::clear_last_sec() {
  last_sec_ = 0;
  clear_has_last_sec();
}
inline ::google::protobuf::int32 ProtoAIllusion::last_sec() const {
  return last_sec_;
}
inline void ProtoAIllusion::set_last_sec(::google::protobuf::int32 value) {
  set_has_last_sec();
  last_sec_ = value;
}

// optional int32 unlock_type = 5;
inline bool ProtoAIllusion::has_unlock_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoAIllusion::set_has_unlock_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoAIllusion::clear_has_unlock_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoAIllusion::clear_unlock_type() {
  unlock_type_ = 0;
  clear_has_unlock_type();
}
inline ::google::protobuf::int32 ProtoAIllusion::unlock_type() const {
  return unlock_type_;
}
inline void ProtoAIllusion::set_unlock_type(::google::protobuf::int32 value) {
  set_has_unlock_type();
  unlock_type_ = value;
}

// -------------------------------------------------------------------

// ProtoTravelTeamer

// optional int64 role_id = 1;
inline bool ProtoTravelTeamer::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoTravelTeamer::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoTravelTeamer::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoTravelTeamer::clear_role_id() {
  role_id_ = GOOGLE_LONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::int64 ProtoTravelTeamer::role_id() const {
  return role_id_;
}
inline void ProtoTravelTeamer::set_role_id(::google::protobuf::int64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string role_name = 2;
inline bool ProtoTravelTeamer::has_role_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoTravelTeamer::set_has_role_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoTravelTeamer::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoTravelTeamer::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& ProtoTravelTeamer::role_name() const {
  return *role_name_;
}
inline void ProtoTravelTeamer::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoTravelTeamer::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoTravelTeamer::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoTravelTeamer::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* ProtoTravelTeamer::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 role_sex = 3;
inline bool ProtoTravelTeamer::has_role_sex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoTravelTeamer::set_has_role_sex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoTravelTeamer::clear_has_role_sex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoTravelTeamer::clear_role_sex() {
  role_sex_ = 0;
  clear_has_role_sex();
}
inline ::google::protobuf::int32 ProtoTravelTeamer::role_sex() const {
  return role_sex_;
}
inline void ProtoTravelTeamer::set_role_sex(::google::protobuf::int32 value) {
  set_has_role_sex();
  role_sex_ = value;
}

// optional int32 role_career = 4;
inline bool ProtoTravelTeamer::has_role_career() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoTravelTeamer::set_has_role_career() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoTravelTeamer::clear_has_role_career() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoTravelTeamer::clear_role_career() {
  role_career_ = 0;
  clear_has_role_career();
}
inline ::google::protobuf::int32 ProtoTravelTeamer::role_career() const {
  return role_career_;
}
inline void ProtoTravelTeamer::set_role_career(::google::protobuf::int32 value) {
  set_has_role_career();
  role_career_ = value;
}

// optional int32 left_blood = 5;
inline bool ProtoTravelTeamer::has_left_blood() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoTravelTeamer::set_has_left_blood() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoTravelTeamer::clear_has_left_blood() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoTravelTeamer::clear_left_blood() {
  left_blood_ = 0;
  clear_has_left_blood();
}
inline ::google::protobuf::int32 ProtoTravelTeamer::left_blood() const {
  return left_blood_;
}
inline void ProtoTravelTeamer::set_left_blood(::google::protobuf::int32 value) {
  set_has_left_blood();
  left_blood_ = value;
}

// optional int32 total_blood = 6;
inline bool ProtoTravelTeamer::has_total_blood() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoTravelTeamer::set_has_total_blood() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoTravelTeamer::clear_has_total_blood() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoTravelTeamer::clear_total_blood() {
  total_blood_ = 0;
  clear_has_total_blood();
}
inline ::google::protobuf::int32 ProtoTravelTeamer::total_blood() const {
  return total_blood_;
}
inline void ProtoTravelTeamer::set_total_blood(::google::protobuf::int32 value) {
  set_has_total_blood();
  total_blood_ = value;
}

// optional int32 left_magic = 7;
inline bool ProtoTravelTeamer::has_left_magic() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoTravelTeamer::set_has_left_magic() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoTravelTeamer::clear_has_left_magic() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoTravelTeamer::clear_left_magic() {
  left_magic_ = 0;
  clear_has_left_magic();
}
inline ::google::protobuf::int32 ProtoTravelTeamer::left_magic() const {
  return left_magic_;
}
inline void ProtoTravelTeamer::set_left_magic(::google::protobuf::int32 value) {
  set_has_left_magic();
  left_magic_ = value;
}

// optional int32 total_magic = 8;
inline bool ProtoTravelTeamer::has_total_magic() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoTravelTeamer::set_has_total_magic() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoTravelTeamer::clear_has_total_magic() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoTravelTeamer::clear_total_magic() {
  total_magic_ = 0;
  clear_has_total_magic();
}
inline ::google::protobuf::int32 ProtoTravelTeamer::total_magic() const {
  return total_magic_;
}
inline void ProtoTravelTeamer::set_total_magic(::google::protobuf::int32 value) {
  set_has_total_magic();
  total_magic_ = value;
}

// optional int32 level = 9;
inline bool ProtoTravelTeamer::has_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProtoTravelTeamer::set_has_level() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProtoTravelTeamer::clear_has_level() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProtoTravelTeamer::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ProtoTravelTeamer::level() const {
  return level_;
}
inline void ProtoTravelTeamer::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 fight_force = 10;
inline bool ProtoTravelTeamer::has_fight_force() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProtoTravelTeamer::set_has_fight_force() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ProtoTravelTeamer::clear_has_fight_force() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ProtoTravelTeamer::clear_fight_force() {
  fight_force_ = 0;
  clear_has_fight_force();
}
inline ::google::protobuf::int32 ProtoTravelTeamer::fight_force() const {
  return fight_force_;
}
inline void ProtoTravelTeamer::set_fight_force(::google::protobuf::int32 value) {
  set_has_fight_force();
  fight_force_ = value;
}

// -------------------------------------------------------------------

// ProtoPromotTeam

// optional int64 team_id = 1;
inline bool ProtoPromotTeam::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoPromotTeam::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoPromotTeam::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoPromotTeam::clear_team_id() {
  team_id_ = GOOGLE_LONGLONG(0);
  clear_has_team_id();
}
inline ::google::protobuf::int64 ProtoPromotTeam::team_id() const {
  return team_id_;
}
inline void ProtoPromotTeam::set_team_id(::google::protobuf::int64 value) {
  set_has_team_id();
  team_id_ = value;
}

// optional string team_name = 2;
inline bool ProtoPromotTeam::has_team_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoPromotTeam::set_has_team_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoPromotTeam::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoPromotTeam::clear_team_name() {
  if (team_name_ != &::google::protobuf::internal::kEmptyString) {
    team_name_->clear();
  }
  clear_has_team_name();
}
inline const ::std::string& ProtoPromotTeam::team_name() const {
  return *team_name_;
}
inline void ProtoPromotTeam::set_team_name(const ::std::string& value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
}
inline void ProtoPromotTeam::set_team_name(const char* value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
}
inline void ProtoPromotTeam::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoPromotTeam::mutable_team_name() {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  return team_name_;
}
inline ::std::string* ProtoPromotTeam::release_team_name() {
  clear_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = team_name_;
    team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string server_prev = 3;
inline bool ProtoPromotTeam::has_server_prev() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoPromotTeam::set_has_server_prev() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoPromotTeam::clear_has_server_prev() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoPromotTeam::clear_server_prev() {
  if (server_prev_ != &::google::protobuf::internal::kEmptyString) {
    server_prev_->clear();
  }
  clear_has_server_prev();
}
inline const ::std::string& ProtoPromotTeam::server_prev() const {
  return *server_prev_;
}
inline void ProtoPromotTeam::set_server_prev(const ::std::string& value) {
  set_has_server_prev();
  if (server_prev_ == &::google::protobuf::internal::kEmptyString) {
    server_prev_ = new ::std::string;
  }
  server_prev_->assign(value);
}
inline void ProtoPromotTeam::set_server_prev(const char* value) {
  set_has_server_prev();
  if (server_prev_ == &::google::protobuf::internal::kEmptyString) {
    server_prev_ = new ::std::string;
  }
  server_prev_->assign(value);
}
inline void ProtoPromotTeam::set_server_prev(const char* value, size_t size) {
  set_has_server_prev();
  if (server_prev_ == &::google::protobuf::internal::kEmptyString) {
    server_prev_ = new ::std::string;
  }
  server_prev_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoPromotTeam::mutable_server_prev() {
  set_has_server_prev();
  if (server_prev_ == &::google::protobuf::internal::kEmptyString) {
    server_prev_ = new ::std::string;
  }
  return server_prev_;
}
inline ::std::string* ProtoPromotTeam::release_server_prev() {
  clear_has_server_prev();
  if (server_prev_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_prev_;
    server_prev_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 is_bet = 4;
inline bool ProtoPromotTeam::has_is_bet() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoPromotTeam::set_has_is_bet() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoPromotTeam::clear_has_is_bet() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoPromotTeam::clear_is_bet() {
  is_bet_ = 0;
  clear_has_is_bet();
}
inline ::google::protobuf::int32 ProtoPromotTeam::is_bet() const {
  return is_bet_;
}
inline void ProtoPromotTeam::set_is_bet(::google::protobuf::int32 value) {
  set_has_is_bet();
  is_bet_ = value;
}

// optional int32 is_promot_turns = 5;
inline bool ProtoPromotTeam::has_is_promot_turns() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoPromotTeam::set_has_is_promot_turns() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoPromotTeam::clear_has_is_promot_turns() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoPromotTeam::clear_is_promot_turns() {
  is_promot_turns_ = 0;
  clear_has_is_promot_turns();
}
inline ::google::protobuf::int32 ProtoPromotTeam::is_promot_turns() const {
  return is_promot_turns_;
}
inline void ProtoPromotTeam::set_is_promot_turns(::google::protobuf::int32 value) {
  set_has_is_promot_turns();
  is_promot_turns_ = value;
}

// optional int32 is_next_turns = 6;
inline bool ProtoPromotTeam::has_is_next_turns() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoPromotTeam::set_has_is_next_turns() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoPromotTeam::clear_has_is_next_turns() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoPromotTeam::clear_is_next_turns() {
  is_next_turns_ = 0;
  clear_has_is_next_turns();
}
inline ::google::protobuf::int32 ProtoPromotTeam::is_next_turns() const {
  return is_next_turns_;
}
inline void ProtoPromotTeam::set_is_next_turns(::google::protobuf::int32 value) {
  set_has_is_next_turns();
  is_next_turns_ = value;
}

// optional int32 team_icon = 7;
inline bool ProtoPromotTeam::has_team_icon() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoPromotTeam::set_has_team_icon() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoPromotTeam::clear_has_team_icon() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoPromotTeam::clear_team_icon() {
  team_icon_ = 0;
  clear_has_team_icon();
}
inline ::google::protobuf::int32 ProtoPromotTeam::team_icon() const {
  return team_icon_;
}
inline void ProtoPromotTeam::set_team_icon(::google::protobuf::int32 value) {
  set_has_team_icon();
  team_icon_ = value;
}

// -------------------------------------------------------------------

// ProtoTravelPeakBet

// optional int32 promot_turns = 1;
inline bool ProtoTravelPeakBet::has_promot_turns() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoTravelPeakBet::set_has_promot_turns() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoTravelPeakBet::clear_has_promot_turns() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoTravelPeakBet::clear_promot_turns() {
  promot_turns_ = 0;
  clear_has_promot_turns();
}
inline ::google::protobuf::int32 ProtoTravelPeakBet::promot_turns() const {
  return promot_turns_;
}
inline void ProtoTravelPeakBet::set_promot_turns(::google::protobuf::int32 value) {
  set_has_promot_turns();
  promot_turns_ = value;
}

// optional int64 team_id = 2;
inline bool ProtoTravelPeakBet::has_team_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoTravelPeakBet::set_has_team_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoTravelPeakBet::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoTravelPeakBet::clear_team_id() {
  team_id_ = GOOGLE_LONGLONG(0);
  clear_has_team_id();
}
inline ::google::protobuf::int64 ProtoTravelPeakBet::team_id() const {
  return team_id_;
}
inline void ProtoTravelPeakBet::set_team_id(::google::protobuf::int64 value) {
  set_has_team_id();
  team_id_ = value;
}

// optional string team_name = 3;
inline bool ProtoTravelPeakBet::has_team_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoTravelPeakBet::set_has_team_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoTravelPeakBet::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoTravelPeakBet::clear_team_name() {
  if (team_name_ != &::google::protobuf::internal::kEmptyString) {
    team_name_->clear();
  }
  clear_has_team_name();
}
inline const ::std::string& ProtoTravelPeakBet::team_name() const {
  return *team_name_;
}
inline void ProtoTravelPeakBet::set_team_name(const ::std::string& value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
}
inline void ProtoTravelPeakBet::set_team_name(const char* value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
}
inline void ProtoTravelPeakBet::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoTravelPeakBet::mutable_team_name() {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  return team_name_;
}
inline ::std::string* ProtoTravelPeakBet::release_team_name() {
  clear_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = team_name_;
    team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string server_prev = 4;
inline bool ProtoTravelPeakBet::has_server_prev() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoTravelPeakBet::set_has_server_prev() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoTravelPeakBet::clear_has_server_prev() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoTravelPeakBet::clear_server_prev() {
  if (server_prev_ != &::google::protobuf::internal::kEmptyString) {
    server_prev_->clear();
  }
  clear_has_server_prev();
}
inline const ::std::string& ProtoTravelPeakBet::server_prev() const {
  return *server_prev_;
}
inline void ProtoTravelPeakBet::set_server_prev(const ::std::string& value) {
  set_has_server_prev();
  if (server_prev_ == &::google::protobuf::internal::kEmptyString) {
    server_prev_ = new ::std::string;
  }
  server_prev_->assign(value);
}
inline void ProtoTravelPeakBet::set_server_prev(const char* value) {
  set_has_server_prev();
  if (server_prev_ == &::google::protobuf::internal::kEmptyString) {
    server_prev_ = new ::std::string;
  }
  server_prev_->assign(value);
}
inline void ProtoTravelPeakBet::set_server_prev(const char* value, size_t size) {
  set_has_server_prev();
  if (server_prev_ == &::google::protobuf::internal::kEmptyString) {
    server_prev_ = new ::std::string;
  }
  server_prev_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoTravelPeakBet::mutable_server_prev() {
  set_has_server_prev();
  if (server_prev_ == &::google::protobuf::internal::kEmptyString) {
    server_prev_ = new ::std::string;
  }
  return server_prev_;
}
inline ::std::string* ProtoTravelPeakBet::release_server_prev() {
  clear_has_server_prev();
  if (server_prev_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_prev_;
    server_prev_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 copper = 5;
inline bool ProtoTravelPeakBet::has_copper() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoTravelPeakBet::set_has_copper() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoTravelPeakBet::clear_has_copper() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoTravelPeakBet::clear_copper() {
  copper_ = 0;
  clear_has_copper();
}
inline ::google::protobuf::int32 ProtoTravelPeakBet::copper() const {
  return copper_;
}
inline void ProtoTravelPeakBet::set_copper(::google::protobuf::int32 value) {
  set_has_copper();
  copper_ = value;
}

// optional int32 state = 6;
inline bool ProtoTravelPeakBet::has_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoTravelPeakBet::set_has_state() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoTravelPeakBet::clear_has_state() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoTravelPeakBet::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 ProtoTravelPeakBet::state() const {
  return state_;
}
inline void ProtoTravelPeakBet::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// -------------------------------------------------------------------

// ProtoMilitaryExploits

// optional int32 type = 1;
inline bool ProtoMilitaryExploits::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoMilitaryExploits::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoMilitaryExploits::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoMilitaryExploits::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ProtoMilitaryExploits::type() const {
  return type_;
}
inline void ProtoMilitaryExploits::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int64 team_id = 2;
inline bool ProtoMilitaryExploits::has_team_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoMilitaryExploits::set_has_team_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoMilitaryExploits::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoMilitaryExploits::clear_team_id() {
  team_id_ = GOOGLE_LONGLONG(0);
  clear_has_team_id();
}
inline ::google::protobuf::int64 ProtoMilitaryExploits::team_id() const {
  return team_id_;
}
inline void ProtoMilitaryExploits::set_team_id(::google::protobuf::int64 value) {
  set_has_team_id();
  team_id_ = value;
}

// optional string team_name = 3;
inline bool ProtoMilitaryExploits::has_team_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoMilitaryExploits::set_has_team_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoMilitaryExploits::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoMilitaryExploits::clear_team_name() {
  if (team_name_ != &::google::protobuf::internal::kEmptyString) {
    team_name_->clear();
  }
  clear_has_team_name();
}
inline const ::std::string& ProtoMilitaryExploits::team_name() const {
  return *team_name_;
}
inline void ProtoMilitaryExploits::set_team_name(const ::std::string& value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
}
inline void ProtoMilitaryExploits::set_team_name(const char* value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
}
inline void ProtoMilitaryExploits::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoMilitaryExploits::mutable_team_name() {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  return team_name_;
}
inline ::std::string* ProtoMilitaryExploits::release_team_name() {
  clear_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = team_name_;
    team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string server_prev = 4;
inline bool ProtoMilitaryExploits::has_server_prev() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoMilitaryExploits::set_has_server_prev() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoMilitaryExploits::clear_has_server_prev() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoMilitaryExploits::clear_server_prev() {
  if (server_prev_ != &::google::protobuf::internal::kEmptyString) {
    server_prev_->clear();
  }
  clear_has_server_prev();
}
inline const ::std::string& ProtoMilitaryExploits::server_prev() const {
  return *server_prev_;
}
inline void ProtoMilitaryExploits::set_server_prev(const ::std::string& value) {
  set_has_server_prev();
  if (server_prev_ == &::google::protobuf::internal::kEmptyString) {
    server_prev_ = new ::std::string;
  }
  server_prev_->assign(value);
}
inline void ProtoMilitaryExploits::set_server_prev(const char* value) {
  set_has_server_prev();
  if (server_prev_ == &::google::protobuf::internal::kEmptyString) {
    server_prev_ = new ::std::string;
  }
  server_prev_->assign(value);
}
inline void ProtoMilitaryExploits::set_server_prev(const char* value, size_t size) {
  set_has_server_prev();
  if (server_prev_ == &::google::protobuf::internal::kEmptyString) {
    server_prev_ = new ::std::string;
  }
  server_prev_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoMilitaryExploits::mutable_server_prev() {
  set_has_server_prev();
  if (server_prev_ == &::google::protobuf::internal::kEmptyString) {
    server_prev_ = new ::std::string;
  }
  return server_prev_;
}
inline ::std::string* ProtoMilitaryExploits::release_server_prev() {
  clear_has_server_prev();
  if (server_prev_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_prev_;
    server_prev_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 win_times = 5;
inline bool ProtoMilitaryExploits::has_win_times() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoMilitaryExploits::set_has_win_times() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoMilitaryExploits::clear_has_win_times() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoMilitaryExploits::clear_win_times() {
  win_times_ = 0;
  clear_has_win_times();
}
inline ::google::protobuf::int32 ProtoMilitaryExploits::win_times() const {
  return win_times_;
}
inline void ProtoMilitaryExploits::set_win_times(::google::protobuf::int32 value) {
  set_has_win_times();
  win_times_ = value;
}

// optional int32 loss_times = 6;
inline bool ProtoMilitaryExploits::has_loss_times() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoMilitaryExploits::set_has_loss_times() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoMilitaryExploits::clear_has_loss_times() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoMilitaryExploits::clear_loss_times() {
  loss_times_ = 0;
  clear_has_loss_times();
}
inline ::google::protobuf::int32 ProtoMilitaryExploits::loss_times() const {
  return loss_times_;
}
inline void ProtoMilitaryExploits::set_loss_times(::google::protobuf::int32 value) {
  set_has_loss_times();
  loss_times_ = value;
}

// optional int32 result = 7;
inline bool ProtoMilitaryExploits::has_result() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoMilitaryExploits::set_has_result() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoMilitaryExploits::clear_has_result() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoMilitaryExploits::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 ProtoMilitaryExploits::result() const {
  return result_;
}
inline void ProtoMilitaryExploits::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// ProtoTravPeakWorth

// optional int32 rank = 1;
inline bool ProtoTravPeakWorth::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoTravPeakWorth::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoTravPeakWorth::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoTravPeakWorth::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 ProtoTravPeakWorth::rank() const {
  return rank_;
}
inline void ProtoTravPeakWorth::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional int64 team_id = 2;
inline bool ProtoTravPeakWorth::has_team_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoTravPeakWorth::set_has_team_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoTravPeakWorth::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoTravPeakWorth::clear_team_id() {
  team_id_ = GOOGLE_LONGLONG(0);
  clear_has_team_id();
}
inline ::google::protobuf::int64 ProtoTravPeakWorth::team_id() const {
  return team_id_;
}
inline void ProtoTravPeakWorth::set_team_id(::google::protobuf::int64 value) {
  set_has_team_id();
  team_id_ = value;
}

// optional string team_name = 3;
inline bool ProtoTravPeakWorth::has_team_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoTravPeakWorth::set_has_team_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoTravPeakWorth::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoTravPeakWorth::clear_team_name() {
  if (team_name_ != &::google::protobuf::internal::kEmptyString) {
    team_name_->clear();
  }
  clear_has_team_name();
}
inline const ::std::string& ProtoTravPeakWorth::team_name() const {
  return *team_name_;
}
inline void ProtoTravPeakWorth::set_team_name(const ::std::string& value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
}
inline void ProtoTravPeakWorth::set_team_name(const char* value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
}
inline void ProtoTravPeakWorth::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoTravPeakWorth::mutable_team_name() {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  return team_name_;
}
inline ::std::string* ProtoTravPeakWorth::release_team_name() {
  clear_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = team_name_;
    team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 team_force = 4;
inline bool ProtoTravPeakWorth::has_team_force() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoTravPeakWorth::set_has_team_force() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoTravPeakWorth::clear_has_team_force() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoTravPeakWorth::clear_team_force() {
  team_force_ = 0;
  clear_has_team_force();
}
inline ::google::protobuf::int32 ProtoTravPeakWorth::team_force() const {
  return team_force_;
}
inline void ProtoTravPeakWorth::set_team_force(::google::protobuf::int32 value) {
  set_has_team_force();
  team_force_ = value;
}

// optional int32 worth = 5;
inline bool ProtoTravPeakWorth::has_worth() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoTravPeakWorth::set_has_worth() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoTravPeakWorth::clear_has_worth() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoTravPeakWorth::clear_worth() {
  worth_ = 0;
  clear_has_worth();
}
inline ::google::protobuf::int32 ProtoTravPeakWorth::worth() const {
  return worth_;
}
inline void ProtoTravPeakWorth::set_worth(::google::protobuf::int32 value) {
  set_has_worth();
  worth_ = value;
}

// -------------------------------------------------------------------

// ProtoMagicActBase

// optional int32 active = 1;
inline bool ProtoMagicActBase::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoMagicActBase::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoMagicActBase::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoMagicActBase::clear_active() {
  active_ = 0;
  clear_has_active();
}
inline ::google::protobuf::int32 ProtoMagicActBase::active() const {
  return active_;
}
inline void ProtoMagicActBase::set_active(::google::protobuf::int32 value) {
  set_has_active();
  active_ = value;
}

// optional int32 level = 2;
inline bool ProtoMagicActBase::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoMagicActBase::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoMagicActBase::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoMagicActBase::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ProtoMagicActBase::level() const {
  return level_;
}
inline void ProtoMagicActBase::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 degree = 3;
inline bool ProtoMagicActBase::has_degree() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoMagicActBase::set_has_degree() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoMagicActBase::clear_has_degree() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoMagicActBase::clear_degree() {
  degree_ = 0;
  clear_has_degree();
}
inline ::google::protobuf::int32 ProtoMagicActBase::degree() const {
  return degree_;
}
inline void ProtoMagicActBase::set_degree(::google::protobuf::int32 value) {
  set_has_degree();
  degree_ = value;
}

// optional int32 auto_use = 4;
inline bool ProtoMagicActBase::has_auto_use() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoMagicActBase::set_has_auto_use() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoMagicActBase::clear_has_auto_use() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoMagicActBase::clear_auto_use() {
  auto_use_ = 0;
  clear_has_auto_use();
}
inline ::google::protobuf::int32 ProtoMagicActBase::auto_use() const {
  return auto_use_;
}
inline void ProtoMagicActBase::set_auto_use(::google::protobuf::int32 value) {
  set_has_auto_use();
  auto_use_ = value;
}

// repeated int32 part = 5;
inline int ProtoMagicActBase::part_size() const {
  return part_.size();
}
inline void ProtoMagicActBase::clear_part() {
  part_.Clear();
}
inline ::google::protobuf::int32 ProtoMagicActBase::part(int index) const {
  return part_.Get(index);
}
inline void ProtoMagicActBase::set_part(int index, ::google::protobuf::int32 value) {
  part_.Set(index, value);
}
inline void ProtoMagicActBase::add_part(::google::protobuf::int32 value) {
  part_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProtoMagicActBase::part() const {
  return part_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProtoMagicActBase::mutable_part() {
  return &part_;
}

// optional int32 magic_id = 6;
inline bool ProtoMagicActBase::has_magic_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoMagicActBase::set_has_magic_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoMagicActBase::clear_has_magic_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoMagicActBase::clear_magic_id() {
  magic_id_ = 0;
  clear_has_magic_id();
}
inline ::google::protobuf::int32 ProtoMagicActBase::magic_id() const {
  return magic_id_;
}
inline void ProtoMagicActBase::set_magic_id(::google::protobuf::int32 value) {
  set_has_magic_id();
  magic_id_ = value;
}

// -------------------------------------------------------------------

// SecretTShopItem

// optional int32 item_id = 1;
inline bool SecretTShopItem::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SecretTShopItem::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SecretTShopItem::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SecretTShopItem::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
}
inline ::google::protobuf::int32 SecretTShopItem::item_id() const {
  return item_id_;
}
inline void SecretTShopItem::set_item_id(::google::protobuf::int32 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional int32 buy_record = 2;
inline bool SecretTShopItem::has_buy_record() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SecretTShopItem::set_has_buy_record() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SecretTShopItem::clear_has_buy_record() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SecretTShopItem::clear_buy_record() {
  buy_record_ = 0;
  clear_has_buy_record();
}
inline ::google::protobuf::int32 SecretTShopItem::buy_record() const {
  return buy_record_;
}
inline void SecretTShopItem::set_buy_record(::google::protobuf::int32 value) {
  set_has_buy_record();
  buy_record_ = value;
}

// optional int32 bind = 3;
inline bool SecretTShopItem::has_bind() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SecretTShopItem::set_has_bind() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SecretTShopItem::clear_has_bind() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SecretTShopItem::clear_bind() {
  bind_ = 0;
  clear_has_bind();
}
inline ::google::protobuf::int32 SecretTShopItem::bind() const {
  return bind_;
}
inline void SecretTShopItem::set_bind(::google::protobuf::int32 value) {
  set_has_bind();
  bind_ = value;
}

// optional int32 price = 4;
inline bool SecretTShopItem::has_price() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SecretTShopItem::set_has_price() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SecretTShopItem::clear_has_price() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SecretTShopItem::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline ::google::protobuf::int32 SecretTShopItem::price() const {
  return price_;
}
inline void SecretTShopItem::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
}

// optional int32 amount = 5;
inline bool SecretTShopItem::has_amount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SecretTShopItem::set_has_amount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SecretTShopItem::clear_has_amount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SecretTShopItem::clear_amount() {
  amount_ = 0;
  clear_has_amount();
}
inline ::google::protobuf::int32 SecretTShopItem::amount() const {
  return amount_;
}
inline void SecretTShopItem::set_amount(::google::protobuf::int32 value) {
  set_has_amount();
  amount_ = value;
}

// -------------------------------------------------------------------

// StRankUnit

// optional int64 player_id = 1;
inline bool StRankUnit::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StRankUnit::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StRankUnit::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StRankUnit::clear_player_id() {
  player_id_ = GOOGLE_LONGLONG(0);
  clear_has_player_id();
}
inline ::google::protobuf::int64 StRankUnit::player_id() const {
  return player_id_;
}
inline void StRankUnit::set_player_id(::google::protobuf::int64 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional string player_name = 2;
inline bool StRankUnit::has_player_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StRankUnit::set_has_player_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StRankUnit::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StRankUnit::clear_player_name() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    player_name_->clear();
  }
  clear_has_player_name();
}
inline const ::std::string& StRankUnit::player_name() const {
  return *player_name_;
}
inline void StRankUnit::set_player_name(const ::std::string& value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void StRankUnit::set_player_name(const char* value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void StRankUnit::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StRankUnit::mutable_player_name() {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  return player_name_;
}
inline ::std::string* StRankUnit::release_player_name() {
  clear_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_name_;
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 value = 3;
inline bool StRankUnit::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StRankUnit::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StRankUnit::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StRankUnit::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 StRankUnit::value() const {
  return value_;
}
inline void StRankUnit::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// optional int32 rank = 4;
inline bool StRankUnit::has_rank() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StRankUnit::set_has_rank() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StRankUnit::clear_has_rank() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StRankUnit::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 StRankUnit::rank() const {
  return rank_;
}
inline void StRankUnit::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional .ProtoCoord coord = 5;
inline bool StRankUnit::has_coord() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StRankUnit::set_has_coord() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StRankUnit::clear_has_coord() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StRankUnit::clear_coord() {
  if (coord_ != NULL) coord_->::ProtoCoord::Clear();
  clear_has_coord();
}
inline const ::ProtoCoord& StRankUnit::coord() const {
  return coord_ != NULL ? *coord_ : *default_instance_->coord_;
}
inline ::ProtoCoord* StRankUnit::mutable_coord() {
  set_has_coord();
  if (coord_ == NULL) coord_ = new ::ProtoCoord;
  return coord_;
}
inline ::ProtoCoord* StRankUnit::release_coord() {
  clear_has_coord();
  ::ProtoCoord* temp = coord_;
  coord_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// STHistoryRankUnit

// optional int64 player_id = 1;
inline bool STHistoryRankUnit::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void STHistoryRankUnit::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void STHistoryRankUnit::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void STHistoryRankUnit::clear_player_id() {
  player_id_ = GOOGLE_LONGLONG(0);
  clear_has_player_id();
}
inline ::google::protobuf::int64 STHistoryRankUnit::player_id() const {
  return player_id_;
}
inline void STHistoryRankUnit::set_player_id(::google::protobuf::int64 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional string name = 2;
inline bool STHistoryRankUnit::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void STHistoryRankUnit::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void STHistoryRankUnit::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void STHistoryRankUnit::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& STHistoryRankUnit::name() const {
  return *name_;
}
inline void STHistoryRankUnit::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void STHistoryRankUnit::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void STHistoryRankUnit::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* STHistoryRankUnit::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* STHistoryRankUnit::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 level = 3;
inline bool STHistoryRankUnit::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void STHistoryRankUnit::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void STHistoryRankUnit::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void STHistoryRankUnit::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 STHistoryRankUnit::level() const {
  return level_;
}
inline void STHistoryRankUnit::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 fight = 4;
inline bool STHistoryRankUnit::has_fight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void STHistoryRankUnit::set_has_fight() {
  _has_bits_[0] |= 0x00000008u;
}
inline void STHistoryRankUnit::clear_has_fight() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void STHistoryRankUnit::clear_fight() {
  fight_ = 0;
  clear_has_fight();
}
inline ::google::protobuf::int32 STHistoryRankUnit::fight() const {
  return fight_;
}
inline void STHistoryRankUnit::set_fight(::google::protobuf::int32 value) {
  set_has_fight();
  fight_ = value;
}

// optional int32 val = 5;
inline bool STHistoryRankUnit::has_val() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void STHistoryRankUnit::set_has_val() {
  _has_bits_[0] |= 0x00000010u;
}
inline void STHistoryRankUnit::clear_has_val() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void STHistoryRankUnit::clear_val() {
  val_ = 0;
  clear_has_val();
}
inline ::google::protobuf::int32 STHistoryRankUnit::val() const {
  return val_;
}
inline void STHistoryRankUnit::set_val(::google::protobuf::int32 value) {
  set_has_val();
  val_ = value;
}

// optional int32 rank = 6;
inline bool STHistoryRankUnit::has_rank() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void STHistoryRankUnit::set_has_rank() {
  _has_bits_[0] |= 0x00000020u;
}
inline void STHistoryRankUnit::clear_has_rank() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void STHistoryRankUnit::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 STHistoryRankUnit::rank() const {
  return rank_;
}
inline void STHistoryRankUnit::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// -------------------------------------------------------------------

// PTLeagueItem

// optional int64 id = 1;
inline bool PTLeagueItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PTLeagueItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PTLeagueItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PTLeagueItem::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 PTLeagueItem::id() const {
  return id_;
}
inline void PTLeagueItem::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool PTLeagueItem::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PTLeagueItem::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PTLeagueItem::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PTLeagueItem::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PTLeagueItem::name() const {
  return *name_;
}
inline void PTLeagueItem::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PTLeagueItem::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PTLeagueItem::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PTLeagueItem::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PTLeagueItem::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated int32 result = 3;
inline int PTLeagueItem::result_size() const {
  return result_.size();
}
inline void PTLeagueItem::clear_result() {
  result_.Clear();
}
inline ::google::protobuf::int32 PTLeagueItem::result(int index) const {
  return result_.Get(index);
}
inline void PTLeagueItem::set_result(int index, ::google::protobuf::int32 value) {
  result_.Set(index, value);
}
inline void PTLeagueItem::add_result(::google::protobuf::int32 value) {
  result_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PTLeagueItem::result() const {
  return result_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PTLeagueItem::mutable_result() {
  return &result_;
}

// -------------------------------------------------------------------

// ProtoSession

// optional string account = 1;
inline bool ProtoSession::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoSession::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoSession::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoSession::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& ProtoSession::account() const {
  return *account_;
}
inline void ProtoSession::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void ProtoSession::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void ProtoSession::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoSession::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* ProtoSession::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string session = 2;
inline bool ProtoSession::has_session() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoSession::set_has_session() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoSession::clear_has_session() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoSession::clear_session() {
  if (session_ != &::google::protobuf::internal::kEmptyString) {
    session_->clear();
  }
  clear_has_session();
}
inline const ::std::string& ProtoSession::session() const {
  return *session_;
}
inline void ProtoSession::set_session(const ::std::string& value) {
  set_has_session();
  if (session_ == &::google::protobuf::internal::kEmptyString) {
    session_ = new ::std::string;
  }
  session_->assign(value);
}
inline void ProtoSession::set_session(const char* value) {
  set_has_session();
  if (session_ == &::google::protobuf::internal::kEmptyString) {
    session_ = new ::std::string;
  }
  session_->assign(value);
}
inline void ProtoSession::set_session(const char* value, size_t size) {
  set_has_session();
  if (session_ == &::google::protobuf::internal::kEmptyString) {
    session_ = new ::std::string;
  }
  session_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoSession::mutable_session() {
  set_has_session();
  if (session_ == &::google::protobuf::internal::kEmptyString) {
    session_ = new ::std::string;
  }
  return session_;
}
inline ::std::string* ProtoSession::release_session() {
  clear_has_session();
  if (session_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = session_;
    session_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Illustrations

// optional int32 illus_id = 1;
inline bool Illustrations::has_illus_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Illustrations::set_has_illus_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Illustrations::clear_has_illus_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Illustrations::clear_illus_id() {
  illus_id_ = 0;
  clear_has_illus_id();
}
inline ::google::protobuf::int32 Illustrations::illus_id() const {
  return illus_id_;
}
inline void Illustrations::set_illus_id(::google::protobuf::int32 value) {
  set_has_illus_id();
  illus_id_ = value;
}

// optional int32 illus_class_id = 2;
inline bool Illustrations::has_illus_class_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Illustrations::set_has_illus_class_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Illustrations::clear_has_illus_class_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Illustrations::clear_illus_class_id() {
  illus_class_id_ = 0;
  clear_has_illus_class_id();
}
inline ::google::protobuf::int32 Illustrations::illus_class_id() const {
  return illus_class_id_;
}
inline void Illustrations::set_illus_class_id(::google::protobuf::int32 value) {
  set_has_illus_class_id();
  illus_class_id_ = value;
}

// optional int32 illus_group_id = 3;
inline bool Illustrations::has_illus_group_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Illustrations::set_has_illus_group_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Illustrations::clear_has_illus_group_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Illustrations::clear_illus_group_id() {
  illus_group_id_ = 0;
  clear_has_illus_group_id();
}
inline ::google::protobuf::int32 Illustrations::illus_group_id() const {
  return illus_group_id_;
}
inline void Illustrations::set_illus_group_id(::google::protobuf::int32 value) {
  set_has_illus_group_id();
  illus_group_id_ = value;
}

// optional int32 illus_level = 4;
inline bool Illustrations::has_illus_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Illustrations::set_has_illus_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Illustrations::clear_has_illus_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Illustrations::clear_illus_level() {
  illus_level_ = 0;
  clear_has_illus_level();
}
inline ::google::protobuf::int32 Illustrations::illus_level() const {
  return illus_level_;
}
inline void Illustrations::set_illus_level(::google::protobuf::int32 value) {
  set_has_illus_level();
  illus_level_ = value;
}

// optional int32 upgrade_goods_id = 5;
inline bool Illustrations::has_upgrade_goods_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Illustrations::set_has_upgrade_goods_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Illustrations::clear_has_upgrade_goods_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Illustrations::clear_upgrade_goods_id() {
  upgrade_goods_id_ = 0;
  clear_has_upgrade_goods_id();
}
inline ::google::protobuf::int32 Illustrations::upgrade_goods_id() const {
  return upgrade_goods_id_;
}
inline void Illustrations::set_upgrade_goods_id(::google::protobuf::int32 value) {
  set_has_upgrade_goods_id();
  upgrade_goods_id_ = value;
}

// optional int32 upgrade_goods_amount = 6;
inline bool Illustrations::has_upgrade_goods_amount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Illustrations::set_has_upgrade_goods_amount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Illustrations::clear_has_upgrade_goods_amount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Illustrations::clear_upgrade_goods_amount() {
  upgrade_goods_amount_ = 0;
  clear_has_upgrade_goods_amount();
}
inline ::google::protobuf::int32 Illustrations::upgrade_goods_amount() const {
  return upgrade_goods_amount_;
}
inline void Illustrations::set_upgrade_goods_amount(::google::protobuf::int32 value) {
  set_has_upgrade_goods_amount();
  upgrade_goods_amount_ = value;
}

// optional int32 open_level = 7;
inline bool Illustrations::has_open_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Illustrations::set_has_open_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Illustrations::clear_has_open_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Illustrations::clear_open_level() {
  open_level_ = 0;
  clear_has_open_level();
}
inline ::google::protobuf::int32 Illustrations::open_level() const {
  return open_level_;
}
inline void Illustrations::set_open_level(::google::protobuf::int32 value) {
  set_has_open_level();
  open_level_ = value;
}

// optional int32 attr_type = 8;
inline bool Illustrations::has_attr_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Illustrations::set_has_attr_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Illustrations::clear_has_attr_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Illustrations::clear_attr_type() {
  attr_type_ = 0;
  clear_has_attr_type();
}
inline ::google::protobuf::int32 Illustrations::attr_type() const {
  return attr_type_;
}
inline void Illustrations::set_attr_type(::google::protobuf::int32 value) {
  set_has_attr_type();
  attr_type_ = value;
}

// optional int32 cur_value = 9;
inline bool Illustrations::has_cur_value() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Illustrations::set_has_cur_value() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Illustrations::clear_has_cur_value() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Illustrations::clear_cur_value() {
  cur_value_ = 0;
  clear_has_cur_value();
}
inline ::google::protobuf::int32 Illustrations::cur_value() const {
  return cur_value_;
}
inline void Illustrations::set_cur_value(::google::protobuf::int32 value) {
  set_has_cur_value();
  cur_value_ = value;
}

// -------------------------------------------------------------------

// Illus_group

// optional int32 group_id = 1;
inline bool Illus_group::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Illus_group::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Illus_group::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Illus_group::clear_group_id() {
  group_id_ = 0;
  clear_has_group_id();
}
inline ::google::protobuf::int32 Illus_group::group_id() const {
  return group_id_;
}
inline void Illus_group::set_group_id(::google::protobuf::int32 value) {
  set_has_group_id();
  group_id_ = value;
}

// optional int32 group_type = 2;
inline bool Illus_group::has_group_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Illus_group::set_has_group_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Illus_group::clear_has_group_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Illus_group::clear_group_type() {
  group_type_ = 0;
  clear_has_group_type();
}
inline ::google::protobuf::int32 Illus_group::group_type() const {
  return group_type_;
}
inline void Illus_group::set_group_type(::google::protobuf::int32 value) {
  set_has_group_type();
  group_type_ = value;
}

// -------------------------------------------------------------------

// Illus_class

// repeated .Illus_group group_list = 1;
inline int Illus_class::group_list_size() const {
  return group_list_.size();
}
inline void Illus_class::clear_group_list() {
  group_list_.Clear();
}
inline const ::Illus_group& Illus_class::group_list(int index) const {
  return group_list_.Get(index);
}
inline ::Illus_group* Illus_class::mutable_group_list(int index) {
  return group_list_.Mutable(index);
}
inline ::Illus_group* Illus_class::add_group_list() {
  return group_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Illus_group >&
Illus_class::group_list() const {
  return group_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Illus_group >*
Illus_class::mutable_group_list() {
  return &group_list_;
}

// optional int32 class_id = 2;
inline bool Illus_class::has_class_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Illus_class::set_has_class_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Illus_class::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Illus_class::clear_class_id() {
  class_id_ = 0;
  clear_has_class_id();
}
inline ::google::protobuf::int32 Illus_class::class_id() const {
  return class_id_;
}
inline void Illus_class::set_class_id(::google::protobuf::int32 value) {
  set_has_class_id();
  class_id_ = value;
}

// -------------------------------------------------------------------

// ProtoFloorInfo

// optional int32 floor_id = 1;
inline bool ProtoFloorInfo::has_floor_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoFloorInfo::set_has_floor_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoFloorInfo::clear_has_floor_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoFloorInfo::clear_floor_id() {
  floor_id_ = 0;
  clear_has_floor_id();
}
inline ::google::protobuf::int32 ProtoFloorInfo::floor_id() const {
  return floor_id_;
}
inline void ProtoFloorInfo::set_floor_id(::google::protobuf::int32 value) {
  set_has_floor_id();
  floor_id_ = value;
}

// optional int32 is_special = 2;
inline bool ProtoFloorInfo::has_is_special() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoFloorInfo::set_has_is_special() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoFloorInfo::clear_has_is_special() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoFloorInfo::clear_is_special() {
  is_special_ = 0;
  clear_has_is_special();
}
inline ::google::protobuf::int32 ProtoFloorInfo::is_special() const {
  return is_special_;
}
inline void ProtoFloorInfo::set_is_special(::google::protobuf::int32 value) {
  set_has_is_special();
  is_special_ = value;
}

// optional int64 pass_tick = 3;
inline bool ProtoFloorInfo::has_pass_tick() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoFloorInfo::set_has_pass_tick() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoFloorInfo::clear_has_pass_tick() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoFloorInfo::clear_pass_tick() {
  pass_tick_ = GOOGLE_LONGLONG(0);
  clear_has_pass_tick();
}
inline ::google::protobuf::int64 ProtoFloorInfo::pass_tick() const {
  return pass_tick_;
}
inline void ProtoFloorInfo::set_pass_tick(::google::protobuf::int64 value) {
  set_has_pass_tick();
  pass_tick_ = value;
}

// optional int32 is_today_pass = 4;
inline bool ProtoFloorInfo::has_is_today_pass() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoFloorInfo::set_has_is_today_pass() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoFloorInfo::clear_has_is_today_pass() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoFloorInfo::clear_is_today_pass() {
  is_today_pass_ = 0;
  clear_has_is_today_pass();
}
inline ::google::protobuf::int32 ProtoFloorInfo::is_today_pass() const {
  return is_today_pass_;
}
inline void ProtoFloorInfo::set_is_today_pass(::google::protobuf::int32 value) {
  set_has_is_today_pass();
  is_today_pass_ = value;
}

// -------------------------------------------------------------------

// ProtoLScoreInfo

// optional int32 role_rank = 1;
inline bool ProtoLScoreInfo::has_role_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoLScoreInfo::set_has_role_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoLScoreInfo::clear_has_role_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoLScoreInfo::clear_role_rank() {
  role_rank_ = 0;
  clear_has_role_rank();
}
inline ::google::protobuf::int32 ProtoLScoreInfo::role_rank() const {
  return role_rank_;
}
inline void ProtoLScoreInfo::set_role_rank(::google::protobuf::int32 value) {
  set_has_role_rank();
  role_rank_ = value;
}

// optional string role_name = 2;
inline bool ProtoLScoreInfo::has_role_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoLScoreInfo::set_has_role_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoLScoreInfo::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoLScoreInfo::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& ProtoLScoreInfo::role_name() const {
  return *role_name_;
}
inline void ProtoLScoreInfo::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoLScoreInfo::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoLScoreInfo::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoLScoreInfo::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* ProtoLScoreInfo::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 role_hurt = 3;
inline bool ProtoLScoreInfo::has_role_hurt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoLScoreInfo::set_has_role_hurt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoLScoreInfo::clear_has_role_hurt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoLScoreInfo::clear_role_hurt() {
  role_hurt_ = 0;
  clear_has_role_hurt();
}
inline ::google::protobuf::int32 ProtoLScoreInfo::role_hurt() const {
  return role_hurt_;
}
inline void ProtoLScoreInfo::set_role_hurt(::google::protobuf::int32 value) {
  set_has_role_hurt();
  role_hurt_ = value;
}

// -------------------------------------------------------------------

// ProtoScriptAdvance

// optional int32 script_sort = 1;
inline bool ProtoScriptAdvance::has_script_sort() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoScriptAdvance::set_has_script_sort() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoScriptAdvance::clear_has_script_sort() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoScriptAdvance::clear_script_sort() {
  script_sort_ = 0;
  clear_has_script_sort();
}
inline ::google::protobuf::int32 ProtoScriptAdvance::script_sort() const {
  return script_sort_;
}
inline void ProtoScriptAdvance::set_script_sort(::google::protobuf::int32 value) {
  set_has_script_sort();
  script_sort_ = value;
}

// optional int32 left_times = 2;
inline bool ProtoScriptAdvance::has_left_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoScriptAdvance::set_has_left_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoScriptAdvance::clear_has_left_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoScriptAdvance::clear_left_times() {
  left_times_ = 0;
  clear_has_left_times();
}
inline ::google::protobuf::int32 ProtoScriptAdvance::left_times() const {
  return left_times_;
}
inline void ProtoScriptAdvance::set_left_times(::google::protobuf::int32 value) {
  set_has_left_times();
  left_times_ = value;
}

// optional int32 reset_times = 3;
inline bool ProtoScriptAdvance::has_reset_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoScriptAdvance::set_has_reset_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoScriptAdvance::clear_has_reset_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoScriptAdvance::clear_reset_times() {
  reset_times_ = 0;
  clear_has_reset_times();
}
inline ::google::protobuf::int32 ProtoScriptAdvance::reset_times() const {
  return reset_times_;
}
inline void ProtoScriptAdvance::set_reset_times(::google::protobuf::int32 value) {
  set_has_reset_times();
  reset_times_ = value;
}

// optional int32 is_sweep = 4;
inline bool ProtoScriptAdvance::has_is_sweep() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoScriptAdvance::set_has_is_sweep() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoScriptAdvance::clear_has_is_sweep() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoScriptAdvance::clear_is_sweep() {
  is_sweep_ = 0;
  clear_has_is_sweep();
}
inline ::google::protobuf::int32 ProtoScriptAdvance::is_sweep() const {
  return is_sweep_;
}
inline void ProtoScriptAdvance::set_is_sweep(::google::protobuf::int32 value) {
  set_has_is_sweep();
  is_sweep_ = value;
}

// -------------------------------------------------------------------

// ProtoScriptExpInfo

// optional int32 chapter_id = 1;
inline bool ProtoScriptExpInfo::has_chapter_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoScriptExpInfo::set_has_chapter_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoScriptExpInfo::clear_has_chapter_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoScriptExpInfo::clear_chapter_id() {
  chapter_id_ = 0;
  clear_has_chapter_id();
}
inline ::google::protobuf::int32 ProtoScriptExpInfo::chapter_id() const {
  return chapter_id_;
}
inline void ProtoScriptExpInfo::set_chapter_id(::google::protobuf::int32 value) {
  set_has_chapter_id();
  chapter_id_ = value;
}

// optional int32 is_today_pass = 2;
inline bool ProtoScriptExpInfo::has_is_today_pass() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoScriptExpInfo::set_has_is_today_pass() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoScriptExpInfo::clear_has_is_today_pass() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoScriptExpInfo::clear_is_today_pass() {
  is_today_pass_ = 0;
  clear_has_is_today_pass();
}
inline ::google::protobuf::int32 ProtoScriptExpInfo::is_today_pass() const {
  return is_today_pass_;
}
inline void ProtoScriptExpInfo::set_is_today_pass(::google::protobuf::int32 value) {
  set_has_is_today_pass();
  is_today_pass_ = value;
}

// optional int32 is_pass = 3;
inline bool ProtoScriptExpInfo::has_is_pass() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoScriptExpInfo::set_has_is_pass() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoScriptExpInfo::clear_has_is_pass() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoScriptExpInfo::clear_is_pass() {
  is_pass_ = 0;
  clear_has_is_pass();
}
inline ::google::protobuf::int32 ProtoScriptExpInfo::is_pass() const {
  return is_pass_;
}
inline void ProtoScriptExpInfo::set_is_pass(::google::protobuf::int32 value) {
  set_has_is_pass();
  is_pass_ = value;
}

// optional int32 is_open = 4;
inline bool ProtoScriptExpInfo::has_is_open() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoScriptExpInfo::set_has_is_open() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoScriptExpInfo::clear_has_is_open() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoScriptExpInfo::clear_is_open() {
  is_open_ = 0;
  clear_has_is_open();
}
inline ::google::protobuf::int32 ProtoScriptExpInfo::is_open() const {
  return is_open_;
}
inline void ProtoScriptExpInfo::set_is_open(::google::protobuf::int32 value) {
  set_has_is_open();
  is_open_ = value;
}

// -------------------------------------------------------------------

// ProtoSpecialAwardInfo

// optional int32 script_wave_id = 1;
inline bool ProtoSpecialAwardInfo::has_script_wave_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoSpecialAwardInfo::set_has_script_wave_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoSpecialAwardInfo::clear_has_script_wave_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoSpecialAwardInfo::clear_script_wave_id() {
  script_wave_id_ = 0;
  clear_has_script_wave_id();
}
inline ::google::protobuf::int32 ProtoSpecialAwardInfo::script_wave_id() const {
  return script_wave_id_;
}
inline void ProtoSpecialAwardInfo::set_script_wave_id(::google::protobuf::int32 value) {
  set_has_script_wave_id();
  script_wave_id_ = value;
}

// optional int32 script_sort = 2;
inline bool ProtoSpecialAwardInfo::has_script_sort() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoSpecialAwardInfo::set_has_script_sort() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoSpecialAwardInfo::clear_has_script_sort() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoSpecialAwardInfo::clear_script_sort() {
  script_sort_ = 0;
  clear_has_script_sort();
}
inline ::google::protobuf::int32 ProtoSpecialAwardInfo::script_sort() const {
  return script_sort_;
}
inline void ProtoSpecialAwardInfo::set_script_sort(::google::protobuf::int32 value) {
  set_has_script_sort();
  script_sort_ = value;
}

// optional int32 wave = 3;
inline bool ProtoSpecialAwardInfo::has_wave() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoSpecialAwardInfo::set_has_wave() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoSpecialAwardInfo::clear_has_wave() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoSpecialAwardInfo::clear_wave() {
  wave_ = 0;
  clear_has_wave();
}
inline ::google::protobuf::int32 ProtoSpecialAwardInfo::wave() const {
  return wave_;
}
inline void ProtoSpecialAwardInfo::set_wave(::google::protobuf::int32 value) {
  set_has_wave();
  wave_ = value;
}

// optional int32 is_get = 4;
inline bool ProtoSpecialAwardInfo::has_is_get() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoSpecialAwardInfo::set_has_is_get() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoSpecialAwardInfo::clear_has_is_get() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoSpecialAwardInfo::clear_is_get() {
  is_get_ = 0;
  clear_has_is_get();
}
inline ::google::protobuf::int32 ProtoSpecialAwardInfo::is_get() const {
  return is_get_;
}
inline void ProtoSpecialAwardInfo::set_is_get(::google::protobuf::int32 value) {
  set_has_is_get();
  is_get_ = value;
}

// -------------------------------------------------------------------

// ProtoServer

// optional int32 id = 1;
inline bool ProtoServer::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoServer::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoServer::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoServer::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ProtoServer::id() const {
  return id_;
}
inline void ProtoServer::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool ProtoServer::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoServer::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoServer::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoServer::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ProtoServer::name() const {
  return *name_;
}
inline void ProtoServer::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ProtoServer::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ProtoServer::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoServer::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ProtoServer::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string prev = 3;
inline bool ProtoServer::has_prev() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoServer::set_has_prev() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoServer::clear_has_prev() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoServer::clear_prev() {
  if (prev_ != &::google::protobuf::internal::kEmptyString) {
    prev_->clear();
  }
  clear_has_prev();
}
inline const ::std::string& ProtoServer::prev() const {
  return *prev_;
}
inline void ProtoServer::set_prev(const ::std::string& value) {
  set_has_prev();
  if (prev_ == &::google::protobuf::internal::kEmptyString) {
    prev_ = new ::std::string;
  }
  prev_->assign(value);
}
inline void ProtoServer::set_prev(const char* value) {
  set_has_prev();
  if (prev_ == &::google::protobuf::internal::kEmptyString) {
    prev_ = new ::std::string;
  }
  prev_->assign(value);
}
inline void ProtoServer::set_prev(const char* value, size_t size) {
  set_has_prev();
  if (prev_ == &::google::protobuf::internal::kEmptyString) {
    prev_ = new ::std::string;
  }
  prev_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoServer::mutable_prev() {
  set_has_prev();
  if (prev_ == &::google::protobuf::internal::kEmptyString) {
    prev_ = new ::std::string;
  }
  return prev_;
}
inline ::std::string* ProtoServer::release_prev() {
  clear_has_prev();
  if (prev_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = prev_;
    prev_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string flag = 4;
inline bool ProtoServer::has_flag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoServer::set_has_flag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoServer::clear_has_flag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoServer::clear_flag() {
  if (flag_ != &::google::protobuf::internal::kEmptyString) {
    flag_->clear();
  }
  clear_has_flag();
}
inline const ::std::string& ProtoServer::flag() const {
  return *flag_;
}
inline void ProtoServer::set_flag(const ::std::string& value) {
  set_has_flag();
  if (flag_ == &::google::protobuf::internal::kEmptyString) {
    flag_ = new ::std::string;
  }
  flag_->assign(value);
}
inline void ProtoServer::set_flag(const char* value) {
  set_has_flag();
  if (flag_ == &::google::protobuf::internal::kEmptyString) {
    flag_ = new ::std::string;
  }
  flag_->assign(value);
}
inline void ProtoServer::set_flag(const char* value, size_t size) {
  set_has_flag();
  if (flag_ == &::google::protobuf::internal::kEmptyString) {
    flag_ = new ::std::string;
  }
  flag_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoServer::mutable_flag() {
  set_has_flag();
  if (flag_ == &::google::protobuf::internal::kEmptyString) {
    flag_ = new ::std::string;
  }
  return flag_;
}
inline ::std::string* ProtoServer::release_flag() {
  clear_has_flag();
  if (flag_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = flag_;
    flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string cur_flag = 5;
inline bool ProtoServer::has_cur_flag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoServer::set_has_cur_flag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoServer::clear_has_cur_flag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoServer::clear_cur_flag() {
  if (cur_flag_ != &::google::protobuf::internal::kEmptyString) {
    cur_flag_->clear();
  }
  clear_has_cur_flag();
}
inline const ::std::string& ProtoServer::cur_flag() const {
  return *cur_flag_;
}
inline void ProtoServer::set_cur_flag(const ::std::string& value) {
  set_has_cur_flag();
  if (cur_flag_ == &::google::protobuf::internal::kEmptyString) {
    cur_flag_ = new ::std::string;
  }
  cur_flag_->assign(value);
}
inline void ProtoServer::set_cur_flag(const char* value) {
  set_has_cur_flag();
  if (cur_flag_ == &::google::protobuf::internal::kEmptyString) {
    cur_flag_ = new ::std::string;
  }
  cur_flag_->assign(value);
}
inline void ProtoServer::set_cur_flag(const char* value, size_t size) {
  set_has_cur_flag();
  if (cur_flag_ == &::google::protobuf::internal::kEmptyString) {
    cur_flag_ = new ::std::string;
  }
  cur_flag_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoServer::mutable_cur_flag() {
  set_has_cur_flag();
  if (cur_flag_ == &::google::protobuf::internal::kEmptyString) {
    cur_flag_ = new ::std::string;
  }
  return cur_flag_;
}
inline ::std::string* ProtoServer::release_cur_flag() {
  clear_has_cur_flag();
  if (cur_flag_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cur_flag_;
    cur_flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ProtoWorldBossInfo

// optional int32 boss_scene_id = 1;
inline bool ProtoWorldBossInfo::has_boss_scene_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoWorldBossInfo::set_has_boss_scene_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoWorldBossInfo::clear_has_boss_scene_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoWorldBossInfo::clear_boss_scene_id() {
  boss_scene_id_ = 0;
  clear_has_boss_scene_id();
}
inline ::google::protobuf::int32 ProtoWorldBossInfo::boss_scene_id() const {
  return boss_scene_id_;
}
inline void ProtoWorldBossInfo::set_boss_scene_id(::google::protobuf::int32 value) {
  set_has_boss_scene_id();
  boss_scene_id_ = value;
}

// optional int32 boss_status = 2;
inline bool ProtoWorldBossInfo::has_boss_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoWorldBossInfo::set_has_boss_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoWorldBossInfo::clear_has_boss_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoWorldBossInfo::clear_boss_status() {
  boss_status_ = 0;
  clear_has_boss_status();
}
inline ::google::protobuf::int32 ProtoWorldBossInfo::boss_status() const {
  return boss_status_;
}
inline void ProtoWorldBossInfo::set_boss_status(::google::protobuf::int32 value) {
  set_has_boss_status();
  boss_status_ = value;
}

// optional double blood = 3;
inline bool ProtoWorldBossInfo::has_blood() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoWorldBossInfo::set_has_blood() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoWorldBossInfo::clear_has_blood() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoWorldBossInfo::clear_blood() {
  blood_ = 0;
  clear_has_blood();
}
inline double ProtoWorldBossInfo::blood() const {
  return blood_;
}
inline void ProtoWorldBossInfo::set_blood(double value) {
  set_has_blood();
  blood_ = value;
}

// optional string killer = 4;
inline bool ProtoWorldBossInfo::has_killer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoWorldBossInfo::set_has_killer() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoWorldBossInfo::clear_has_killer() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoWorldBossInfo::clear_killer() {
  if (killer_ != &::google::protobuf::internal::kEmptyString) {
    killer_->clear();
  }
  clear_has_killer();
}
inline const ::std::string& ProtoWorldBossInfo::killer() const {
  return *killer_;
}
inline void ProtoWorldBossInfo::set_killer(const ::std::string& value) {
  set_has_killer();
  if (killer_ == &::google::protobuf::internal::kEmptyString) {
    killer_ = new ::std::string;
  }
  killer_->assign(value);
}
inline void ProtoWorldBossInfo::set_killer(const char* value) {
  set_has_killer();
  if (killer_ == &::google::protobuf::internal::kEmptyString) {
    killer_ = new ::std::string;
  }
  killer_->assign(value);
}
inline void ProtoWorldBossInfo::set_killer(const char* value, size_t size) {
  set_has_killer();
  if (killer_ == &::google::protobuf::internal::kEmptyString) {
    killer_ = new ::std::string;
  }
  killer_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoWorldBossInfo::mutable_killer() {
  set_has_killer();
  if (killer_ == &::google::protobuf::internal::kEmptyString) {
    killer_ = new ::std::string;
  }
  return killer_;
}
inline ::std::string* ProtoWorldBossInfo::release_killer() {
  clear_has_killer();
  if (killer_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = killer_;
    killer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 is_full = 5;
inline bool ProtoWorldBossInfo::has_is_full() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoWorldBossInfo::set_has_is_full() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoWorldBossInfo::clear_has_is_full() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoWorldBossInfo::clear_is_full() {
  is_full_ = 0;
  clear_has_is_full();
}
inline ::google::protobuf::int32 ProtoWorldBossInfo::is_full() const {
  return is_full_;
}
inline void ProtoWorldBossInfo::set_is_full(::google::protobuf::int32 value) {
  set_has_is_full();
  is_full_ = value;
}

// -------------------------------------------------------------------

// ProtoLeagueRankInfo

// optional int64 league_index = 1;
inline bool ProtoLeagueRankInfo::has_league_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoLeagueRankInfo::set_has_league_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoLeagueRankInfo::clear_has_league_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoLeagueRankInfo::clear_league_index() {
  league_index_ = GOOGLE_LONGLONG(0);
  clear_has_league_index();
}
inline ::google::protobuf::int64 ProtoLeagueRankInfo::league_index() const {
  return league_index_;
}
inline void ProtoLeagueRankInfo::set_league_index(::google::protobuf::int64 value) {
  set_has_league_index();
  league_index_ = value;
}

// optional string league_name = 2;
inline bool ProtoLeagueRankInfo::has_league_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoLeagueRankInfo::set_has_league_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoLeagueRankInfo::clear_has_league_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoLeagueRankInfo::clear_league_name() {
  if (league_name_ != &::google::protobuf::internal::kEmptyString) {
    league_name_->clear();
  }
  clear_has_league_name();
}
inline const ::std::string& ProtoLeagueRankInfo::league_name() const {
  return *league_name_;
}
inline void ProtoLeagueRankInfo::set_league_name(const ::std::string& value) {
  set_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    league_name_ = new ::std::string;
  }
  league_name_->assign(value);
}
inline void ProtoLeagueRankInfo::set_league_name(const char* value) {
  set_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    league_name_ = new ::std::string;
  }
  league_name_->assign(value);
}
inline void ProtoLeagueRankInfo::set_league_name(const char* value, size_t size) {
  set_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    league_name_ = new ::std::string;
  }
  league_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoLeagueRankInfo::mutable_league_name() {
  set_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    league_name_ = new ::std::string;
  }
  return league_name_;
}
inline ::std::string* ProtoLeagueRankInfo::release_league_name() {
  clear_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = league_name_;
    league_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 rank = 3;
inline bool ProtoLeagueRankInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoLeagueRankInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoLeagueRankInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoLeagueRankInfo::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 ProtoLeagueRankInfo::rank() const {
  return rank_;
}
inline void ProtoLeagueRankInfo::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional double hurt = 4;
inline bool ProtoLeagueRankInfo::has_hurt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoLeagueRankInfo::set_has_hurt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoLeagueRankInfo::clear_has_hurt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoLeagueRankInfo::clear_hurt() {
  hurt_ = 0;
  clear_has_hurt();
}
inline double ProtoLeagueRankInfo::hurt() const {
  return hurt_;
}
inline void ProtoLeagueRankInfo::set_hurt(double value) {
  set_has_hurt();
  hurt_ = value;
}

// optional int32 score = 5;
inline bool ProtoLeagueRankInfo::has_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoLeagueRankInfo::set_has_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoLeagueRankInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoLeagueRankInfo::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 ProtoLeagueRankInfo::score() const {
  return score_;
}
inline void ProtoLeagueRankInfo::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// optional int32 space_id = 6;
inline bool ProtoLeagueRankInfo::has_space_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoLeagueRankInfo::set_has_space_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoLeagueRankInfo::clear_has_space_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoLeagueRankInfo::clear_space_id() {
  space_id_ = 0;
  clear_has_space_id();
}
inline ::google::protobuf::int32 ProtoLeagueRankInfo::space_id() const {
  return space_id_;
}
inline void ProtoLeagueRankInfo::set_space_id(::google::protobuf::int32 value) {
  set_has_space_id();
  space_id_ = value;
}

// -------------------------------------------------------------------

// ProtoLWarInfo

// optional int32 space_id = 1;
inline bool ProtoLWarInfo::has_space_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoLWarInfo::set_has_space_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoLWarInfo::clear_has_space_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoLWarInfo::clear_space_id() {
  space_id_ = 0;
  clear_has_space_id();
}
inline ::google::protobuf::int32 ProtoLWarInfo::space_id() const {
  return space_id_;
}
inline void ProtoLWarInfo::set_space_id(::google::protobuf::int32 value) {
  set_has_space_id();
  space_id_ = value;
}

// optional int32 attack_resource = 2;
inline bool ProtoLWarInfo::has_attack_resource() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoLWarInfo::set_has_attack_resource() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoLWarInfo::clear_has_attack_resource() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoLWarInfo::clear_attack_resource() {
  attack_resource_ = 0;
  clear_has_attack_resource();
}
inline ::google::protobuf::int32 ProtoLWarInfo::attack_resource() const {
  return attack_resource_;
}
inline void ProtoLWarInfo::set_attack_resource(::google::protobuf::int32 value) {
  set_has_attack_resource();
  attack_resource_ = value;
}

// optional int32 defence_resource = 3;
inline bool ProtoLWarInfo::has_defence_resource() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoLWarInfo::set_has_defence_resource() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoLWarInfo::clear_has_defence_resource() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoLWarInfo::clear_defence_resource() {
  defence_resource_ = 0;
  clear_has_defence_resource();
}
inline ::google::protobuf::int32 ProtoLWarInfo::defence_resource() const {
  return defence_resource_;
}
inline void ProtoLWarInfo::set_defence_resource(::google::protobuf::int32 value) {
  set_has_defence_resource();
  defence_resource_ = value;
}

// optional int32 attack_level = 4;
inline bool ProtoLWarInfo::has_attack_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoLWarInfo::set_has_attack_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoLWarInfo::clear_has_attack_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoLWarInfo::clear_attack_level() {
  attack_level_ = 0;
  clear_has_attack_level();
}
inline ::google::protobuf::int32 ProtoLWarInfo::attack_level() const {
  return attack_level_;
}
inline void ProtoLWarInfo::set_attack_level(::google::protobuf::int32 value) {
  set_has_attack_level();
  attack_level_ = value;
}

// optional int32 defence_level = 5;
inline bool ProtoLWarInfo::has_defence_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoLWarInfo::set_has_defence_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoLWarInfo::clear_has_defence_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoLWarInfo::clear_defence_level() {
  defence_level_ = 0;
  clear_has_defence_level();
}
inline ::google::protobuf::int32 ProtoLWarInfo::defence_level() const {
  return defence_level_;
}
inline void ProtoLWarInfo::set_defence_level(::google::protobuf::int32 value) {
  set_has_defence_level();
  defence_level_ = value;
}

// optional int32 attack_add = 6;
inline bool ProtoLWarInfo::has_attack_add() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoLWarInfo::set_has_attack_add() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoLWarInfo::clear_has_attack_add() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoLWarInfo::clear_attack_add() {
  attack_add_ = 0;
  clear_has_attack_add();
}
inline ::google::protobuf::int32 ProtoLWarInfo::attack_add() const {
  return attack_add_;
}
inline void ProtoLWarInfo::set_attack_add(::google::protobuf::int32 value) {
  set_has_attack_add();
  attack_add_ = value;
}

// optional int32 defence_add = 7;
inline bool ProtoLWarInfo::has_defence_add() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoLWarInfo::set_has_defence_add() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoLWarInfo::clear_has_defence_add() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoLWarInfo::clear_defence_add() {
  defence_add_ = 0;
  clear_has_defence_add();
}
inline ::google::protobuf::int32 ProtoLWarInfo::defence_add() const {
  return defence_add_;
}
inline void ProtoLWarInfo::set_defence_add(::google::protobuf::int32 value) {
  set_has_defence_add();
  defence_add_ = value;
}

// optional string boss_name = 8;
inline bool ProtoLWarInfo::has_boss_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoLWarInfo::set_has_boss_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoLWarInfo::clear_has_boss_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoLWarInfo::clear_boss_name() {
  if (boss_name_ != &::google::protobuf::internal::kEmptyString) {
    boss_name_->clear();
  }
  clear_has_boss_name();
}
inline const ::std::string& ProtoLWarInfo::boss_name() const {
  return *boss_name_;
}
inline void ProtoLWarInfo::set_boss_name(const ::std::string& value) {
  set_has_boss_name();
  if (boss_name_ == &::google::protobuf::internal::kEmptyString) {
    boss_name_ = new ::std::string;
  }
  boss_name_->assign(value);
}
inline void ProtoLWarInfo::set_boss_name(const char* value) {
  set_has_boss_name();
  if (boss_name_ == &::google::protobuf::internal::kEmptyString) {
    boss_name_ = new ::std::string;
  }
  boss_name_->assign(value);
}
inline void ProtoLWarInfo::set_boss_name(const char* value, size_t size) {
  set_has_boss_name();
  if (boss_name_ == &::google::protobuf::internal::kEmptyString) {
    boss_name_ = new ::std::string;
  }
  boss_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoLWarInfo::mutable_boss_name() {
  set_has_boss_name();
  if (boss_name_ == &::google::protobuf::internal::kEmptyString) {
    boss_name_ = new ::std::string;
  }
  return boss_name_;
}
inline ::std::string* ProtoLWarInfo::release_boss_name() {
  clear_has_boss_name();
  if (boss_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = boss_name_;
    boss_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional double boss_blood = 9;
inline bool ProtoLWarInfo::has_boss_blood() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProtoLWarInfo::set_has_boss_blood() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProtoLWarInfo::clear_has_boss_blood() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProtoLWarInfo::clear_boss_blood() {
  boss_blood_ = 0;
  clear_has_boss_blood();
}
inline double ProtoLWarInfo::boss_blood() const {
  return boss_blood_;
}
inline void ProtoLWarInfo::set_boss_blood(double value) {
  set_has_boss_blood();
  boss_blood_ = value;
}

// repeated .ProtoLeagueRankInfo room_league_rank = 10;
inline int ProtoLWarInfo::room_league_rank_size() const {
  return room_league_rank_.size();
}
inline void ProtoLWarInfo::clear_room_league_rank() {
  room_league_rank_.Clear();
}
inline const ::ProtoLeagueRankInfo& ProtoLWarInfo::room_league_rank(int index) const {
  return room_league_rank_.Get(index);
}
inline ::ProtoLeagueRankInfo* ProtoLWarInfo::mutable_room_league_rank(int index) {
  return room_league_rank_.Mutable(index);
}
inline ::ProtoLeagueRankInfo* ProtoLWarInfo::add_room_league_rank() {
  return room_league_rank_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoLeagueRankInfo >&
ProtoLWarInfo::room_league_rank() const {
  return room_league_rank_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoLeagueRankInfo >*
ProtoLWarInfo::mutable_room_league_rank() {
  return &room_league_rank_;
}

// optional .ProtoLeagueRankInfo room_my_league = 11;
inline bool ProtoLWarInfo::has_room_my_league() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ProtoLWarInfo::set_has_room_my_league() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ProtoLWarInfo::clear_has_room_my_league() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ProtoLWarInfo::clear_room_my_league() {
  if (room_my_league_ != NULL) room_my_league_->::ProtoLeagueRankInfo::Clear();
  clear_has_room_my_league();
}
inline const ::ProtoLeagueRankInfo& ProtoLWarInfo::room_my_league() const {
  return room_my_league_ != NULL ? *room_my_league_ : *default_instance_->room_my_league_;
}
inline ::ProtoLeagueRankInfo* ProtoLWarInfo::mutable_room_my_league() {
  set_has_room_my_league();
  if (room_my_league_ == NULL) room_my_league_ = new ::ProtoLeagueRankInfo;
  return room_my_league_;
}
inline ::ProtoLeagueRankInfo* ProtoLWarInfo::release_room_my_league() {
  clear_has_room_my_league();
  ::ProtoLeagueRankInfo* temp = room_my_league_;
  room_my_league_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// ProtoItemId

// optional int32 id = 1;
inline bool ProtoItemId::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoItemId::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoItemId::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoItemId::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ProtoItemId::id() const {
  return id_;
}
inline void ProtoItemId::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 amount = 2;
inline bool ProtoItemId::has_amount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoItemId::set_has_amount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoItemId::clear_has_amount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoItemId::clear_amount() {
  amount_ = 0;
  clear_has_amount();
}
inline ::google::protobuf::int32 ProtoItemId::amount() const {
  return amount_;
}
inline void ProtoItemId::set_amount(::google::protobuf::int32 value) {
  set_has_amount();
  amount_ = value;
}

// optional int32 bind = 3;
inline bool ProtoItemId::has_bind() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoItemId::set_has_bind() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoItemId::clear_has_bind() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoItemId::clear_bind() {
  bind_ = 0;
  clear_has_bind();
}
inline ::google::protobuf::int32 ProtoItemId::bind() const {
  return bind_;
}
inline void ProtoItemId::set_bind(::google::protobuf::int32 value) {
  set_has_bind();
  bind_ = value;
}

// optional int32 cond = 4;
inline bool ProtoItemId::has_cond() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoItemId::set_has_cond() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoItemId::clear_has_cond() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoItemId::clear_cond() {
  cond_ = 0;
  clear_has_cond();
}
inline ::google::protobuf::int32 ProtoItemId::cond() const {
  return cond_;
}
inline void ProtoItemId::set_cond(::google::protobuf::int32 value) {
  set_has_cond();
  cond_ = value;
}

// optional int32 state = 5;
inline bool ProtoItemId::has_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoItemId::set_has_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoItemId::clear_has_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoItemId::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 ProtoItemId::state() const {
  return state_;
}
inline void ProtoItemId::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// -------------------------------------------------------------------

// ProtoSwordPoolTask

// optional int32 task_id = 1;
inline bool ProtoSwordPoolTask::has_task_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoSwordPoolTask::set_has_task_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoSwordPoolTask::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoSwordPoolTask::clear_task_id() {
  task_id_ = 0;
  clear_has_task_id();
}
inline ::google::protobuf::int32 ProtoSwordPoolTask::task_id() const {
  return task_id_;
}
inline void ProtoSwordPoolTask::set_task_id(::google::protobuf::int32 value) {
  set_has_task_id();
  task_id_ = value;
}

// optional int32 total_num = 2;
inline bool ProtoSwordPoolTask::has_total_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoSwordPoolTask::set_has_total_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoSwordPoolTask::clear_has_total_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoSwordPoolTask::clear_total_num() {
  total_num_ = 0;
  clear_has_total_num();
}
inline ::google::protobuf::int32 ProtoSwordPoolTask::total_num() const {
  return total_num_;
}
inline void ProtoSwordPoolTask::set_total_num(::google::protobuf::int32 value) {
  set_has_total_num();
  total_num_ = value;
}

// optional int32 left_num = 3;
inline bool ProtoSwordPoolTask::has_left_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoSwordPoolTask::set_has_left_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoSwordPoolTask::clear_has_left_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoSwordPoolTask::clear_left_num() {
  left_num_ = 0;
  clear_has_left_num();
}
inline ::google::protobuf::int32 ProtoSwordPoolTask::left_num() const {
  return left_num_;
}
inline void ProtoSwordPoolTask::set_left_num(::google::protobuf::int32 value) {
  set_has_left_num();
  left_num_ = value;
}

// optional int32 once_exp = 4;
inline bool ProtoSwordPoolTask::has_once_exp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoSwordPoolTask::set_has_once_exp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoSwordPoolTask::clear_has_once_exp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoSwordPoolTask::clear_once_exp() {
  once_exp_ = 0;
  clear_has_once_exp();
}
inline ::google::protobuf::int32 ProtoSwordPoolTask::once_exp() const {
  return once_exp_;
}
inline void ProtoSwordPoolTask::set_once_exp(::google::protobuf::int32 value) {
  set_has_once_exp();
  once_exp_ = value;
}

// -------------------------------------------------------------------

// ProtoSvenDayItem

// optional int32 day = 1;
inline bool ProtoSvenDayItem::has_day() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoSvenDayItem::set_has_day() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoSvenDayItem::clear_has_day() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoSvenDayItem::clear_day() {
  day_ = 0;
  clear_has_day();
}
inline ::google::protobuf::int32 ProtoSvenDayItem::day() const {
  return day_;
}
inline void ProtoSvenDayItem::set_day(::google::protobuf::int32 value) {
  set_has_day();
  day_ = value;
}

// optional int32 item_id = 2;
inline bool ProtoSvenDayItem::has_item_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoSvenDayItem::set_has_item_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoSvenDayItem::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoSvenDayItem::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
}
inline ::google::protobuf::int32 ProtoSvenDayItem::item_id() const {
  return item_id_;
}
inline void ProtoSvenDayItem::set_item_id(::google::protobuf::int32 value) {
  set_has_item_id();
  item_id_ = value;
}

// -------------------------------------------------------------------

// ProtoSevenDayItem

// optional int32 day = 1;
inline bool ProtoSevenDayItem::has_day() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoSevenDayItem::set_has_day() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoSevenDayItem::clear_has_day() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoSevenDayItem::clear_day() {
  day_ = 0;
  clear_has_day();
}
inline ::google::protobuf::int32 ProtoSevenDayItem::day() const {
  return day_;
}
inline void ProtoSevenDayItem::set_day(::google::protobuf::int32 value) {
  set_has_day();
  day_ = value;
}

// optional int32 item_id = 2;
inline bool ProtoSevenDayItem::has_item_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoSevenDayItem::set_has_item_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoSevenDayItem::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoSevenDayItem::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
}
inline ::google::protobuf::int32 ProtoSevenDayItem::item_id() const {
  return item_id_;
}
inline void ProtoSevenDayItem::set_item_id(::google::protobuf::int32 value) {
  set_has_item_id();
  item_id_ = value;
}

// -------------------------------------------------------------------

// ProtoLegendTopRank

// optional int64 role_id = 1;
inline bool ProtoLegendTopRank::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoLegendTopRank::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoLegendTopRank::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoLegendTopRank::clear_role_id() {
  role_id_ = GOOGLE_LONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::int64 ProtoLegendTopRank::role_id() const {
  return role_id_;
}
inline void ProtoLegendTopRank::set_role_id(::google::protobuf::int64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string role_name = 2;
inline bool ProtoLegendTopRank::has_role_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoLegendTopRank::set_has_role_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoLegendTopRank::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoLegendTopRank::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& ProtoLegendTopRank::role_name() const {
  return *role_name_;
}
inline void ProtoLegendTopRank::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoLegendTopRank::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoLegendTopRank::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoLegendTopRank::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* ProtoLegendTopRank::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 rank = 3;
inline bool ProtoLegendTopRank::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoLegendTopRank::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoLegendTopRank::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoLegendTopRank::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 ProtoLegendTopRank::rank() const {
  return rank_;
}
inline void ProtoLegendTopRank::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional int32 fight_score = 4;
inline bool ProtoLegendTopRank::has_fight_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoLegendTopRank::set_has_fight_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoLegendTopRank::clear_has_fight_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoLegendTopRank::clear_fight_score() {
  fight_score_ = 0;
  clear_has_fight_score();
}
inline ::google::protobuf::int32 ProtoLegendTopRank::fight_score() const {
  return fight_score_;
}
inline void ProtoLegendTopRank::set_fight_score(::google::protobuf::int32 value) {
  set_has_fight_score();
  fight_score_ = value;
}

// optional int32 floor = 5;
inline bool ProtoLegendTopRank::has_floor() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoLegendTopRank::set_has_floor() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoLegendTopRank::clear_has_floor() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoLegendTopRank::clear_floor() {
  floor_ = 0;
  clear_has_floor();
}
inline ::google::protobuf::int32 ProtoLegendTopRank::floor() const {
  return floor_;
}
inline void ProtoLegendTopRank::set_floor(::google::protobuf::int32 value) {
  set_has_floor();
  floor_ = value;
}

// -------------------------------------------------------------------

// ProtoApplyInfo

// optional int64 friend_id = 1;
inline bool ProtoApplyInfo::has_friend_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoApplyInfo::set_has_friend_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoApplyInfo::clear_has_friend_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoApplyInfo::clear_friend_id() {
  friend_id_ = GOOGLE_LONGLONG(0);
  clear_has_friend_id();
}
inline ::google::protobuf::int64 ProtoApplyInfo::friend_id() const {
  return friend_id_;
}
inline void ProtoApplyInfo::set_friend_id(::google::protobuf::int64 value) {
  set_has_friend_id();
  friend_id_ = value;
}

// optional string friend_name = 2;
inline bool ProtoApplyInfo::has_friend_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoApplyInfo::set_has_friend_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoApplyInfo::clear_has_friend_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoApplyInfo::clear_friend_name() {
  if (friend_name_ != &::google::protobuf::internal::kEmptyString) {
    friend_name_->clear();
  }
  clear_has_friend_name();
}
inline const ::std::string& ProtoApplyInfo::friend_name() const {
  return *friend_name_;
}
inline void ProtoApplyInfo::set_friend_name(const ::std::string& value) {
  set_has_friend_name();
  if (friend_name_ == &::google::protobuf::internal::kEmptyString) {
    friend_name_ = new ::std::string;
  }
  friend_name_->assign(value);
}
inline void ProtoApplyInfo::set_friend_name(const char* value) {
  set_has_friend_name();
  if (friend_name_ == &::google::protobuf::internal::kEmptyString) {
    friend_name_ = new ::std::string;
  }
  friend_name_->assign(value);
}
inline void ProtoApplyInfo::set_friend_name(const char* value, size_t size) {
  set_has_friend_name();
  if (friend_name_ == &::google::protobuf::internal::kEmptyString) {
    friend_name_ = new ::std::string;
  }
  friend_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoApplyInfo::mutable_friend_name() {
  set_has_friend_name();
  if (friend_name_ == &::google::protobuf::internal::kEmptyString) {
    friend_name_ = new ::std::string;
  }
  return friend_name_;
}
inline ::std::string* ProtoApplyInfo::release_friend_name() {
  clear_has_friend_name();
  if (friend_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = friend_name_;
    friend_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 league_id = 3;
inline bool ProtoApplyInfo::has_league_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoApplyInfo::set_has_league_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoApplyInfo::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoApplyInfo::clear_league_id() {
  league_id_ = GOOGLE_LONGLONG(0);
  clear_has_league_id();
}
inline ::google::protobuf::int64 ProtoApplyInfo::league_id() const {
  return league_id_;
}
inline void ProtoApplyInfo::set_league_id(::google::protobuf::int64 value) {
  set_has_league_id();
  league_id_ = value;
}

// optional string league_name = 4;
inline bool ProtoApplyInfo::has_league_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoApplyInfo::set_has_league_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoApplyInfo::clear_has_league_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoApplyInfo::clear_league_name() {
  if (league_name_ != &::google::protobuf::internal::kEmptyString) {
    league_name_->clear();
  }
  clear_has_league_name();
}
inline const ::std::string& ProtoApplyInfo::league_name() const {
  return *league_name_;
}
inline void ProtoApplyInfo::set_league_name(const ::std::string& value) {
  set_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    league_name_ = new ::std::string;
  }
  league_name_->assign(value);
}
inline void ProtoApplyInfo::set_league_name(const char* value) {
  set_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    league_name_ = new ::std::string;
  }
  league_name_->assign(value);
}
inline void ProtoApplyInfo::set_league_name(const char* value, size_t size) {
  set_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    league_name_ = new ::std::string;
  }
  league_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoApplyInfo::mutable_league_name() {
  set_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    league_name_ = new ::std::string;
  }
  return league_name_;
}
inline ::std::string* ProtoApplyInfo::release_league_name() {
  clear_has_league_name();
  if (league_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = league_name_;
    league_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 level = 5;
inline bool ProtoApplyInfo::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoApplyInfo::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoApplyInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoApplyInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ProtoApplyInfo::level() const {
  return level_;
}
inline void ProtoApplyInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 sex = 6;
inline bool ProtoApplyInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoApplyInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoApplyInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoApplyInfo::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 ProtoApplyInfo::sex() const {
  return sex_;
}
inline void ProtoApplyInfo::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// optional int64 tick = 7;
inline bool ProtoApplyInfo::has_tick() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoApplyInfo::set_has_tick() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoApplyInfo::clear_has_tick() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoApplyInfo::clear_tick() {
  tick_ = GOOGLE_LONGLONG(0);
  clear_has_tick();
}
inline ::google::protobuf::int64 ProtoApplyInfo::tick() const {
  return tick_;
}
inline void ProtoApplyInfo::set_tick(::google::protobuf::int64 value) {
  set_has_tick();
  tick_ = value;
}

// -------------------------------------------------------------------

// ProtoPairMap

// repeated .ProtoPairObj obj_list = 1;
inline int ProtoPairMap::obj_list_size() const {
  return obj_list_.size();
}
inline void ProtoPairMap::clear_obj_list() {
  obj_list_.Clear();
}
inline const ::ProtoPairObj& ProtoPairMap::obj_list(int index) const {
  return obj_list_.Get(index);
}
inline ::ProtoPairObj* ProtoPairMap::mutable_obj_list(int index) {
  return obj_list_.Mutable(index);
}
inline ::ProtoPairObj* ProtoPairMap::add_obj_list() {
  return obj_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >&
ProtoPairMap::obj_list() const {
  return obj_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >*
ProtoPairMap::mutable_obj_list() {
  return &obj_list_;
}

// -------------------------------------------------------------------

// ProtoDonateRank

// optional int32 rank = 1;
inline bool ProtoDonateRank::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoDonateRank::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoDonateRank::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoDonateRank::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 ProtoDonateRank::rank() const {
  return rank_;
}
inline void ProtoDonateRank::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional string role_name = 2;
inline bool ProtoDonateRank::has_role_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoDonateRank::set_has_role_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoDonateRank::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoDonateRank::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& ProtoDonateRank::role_name() const {
  return *role_name_;
}
inline void ProtoDonateRank::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoDonateRank::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoDonateRank::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoDonateRank::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* ProtoDonateRank::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 vip = 3;
inline bool ProtoDonateRank::has_vip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoDonateRank::set_has_vip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoDonateRank::clear_has_vip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoDonateRank::clear_vip() {
  vip_ = 0;
  clear_has_vip();
}
inline ::google::protobuf::int32 ProtoDonateRank::vip() const {
  return vip_;
}
inline void ProtoDonateRank::set_vip(::google::protobuf::int32 value) {
  set_has_vip();
  vip_ = value;
}

// optional int32 contri = 4;
inline bool ProtoDonateRank::has_contri() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoDonateRank::set_has_contri() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoDonateRank::clear_has_contri() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoDonateRank::clear_contri() {
  contri_ = 0;
  clear_has_contri();
}
inline ::google::protobuf::int32 ProtoDonateRank::contri() const {
  return contri_;
}
inline void ProtoDonateRank::set_contri(::google::protobuf::int32 value) {
  set_has_contri();
  contri_ = value;
}

// -------------------------------------------------------------------

// ProtoMAttackLabel

// optional int32 label_id = 1;
inline bool ProtoMAttackLabel::has_label_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoMAttackLabel::set_has_label_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoMAttackLabel::clear_has_label_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoMAttackLabel::clear_label_id() {
  label_id_ = 0;
  clear_has_label_id();
}
inline ::google::protobuf::int32 ProtoMAttackLabel::label_id() const {
  return label_id_;
}
inline void ProtoMAttackLabel::set_label_id(::google::protobuf::int32 value) {
  set_has_label_id();
  label_id_ = value;
}

// optional int64 role_id = 2;
inline bool ProtoMAttackLabel::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoMAttackLabel::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoMAttackLabel::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoMAttackLabel::clear_role_id() {
  role_id_ = GOOGLE_LONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::int64 ProtoMAttackLabel::role_id() const {
  return role_id_;
}
inline void ProtoMAttackLabel::set_role_id(::google::protobuf::int64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string role_name = 3;
inline bool ProtoMAttackLabel::has_role_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoMAttackLabel::set_has_role_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoMAttackLabel::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoMAttackLabel::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& ProtoMAttackLabel::role_name() const {
  return *role_name_;
}
inline void ProtoMAttackLabel::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoMAttackLabel::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoMAttackLabel::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoMAttackLabel::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* ProtoMAttackLabel::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 role_sex = 4;
inline bool ProtoMAttackLabel::has_role_sex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoMAttackLabel::set_has_role_sex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoMAttackLabel::clear_has_role_sex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoMAttackLabel::clear_role_sex() {
  role_sex_ = 0;
  clear_has_role_sex();
}
inline ::google::protobuf::int32 ProtoMAttackLabel::role_sex() const {
  return role_sex_;
}
inline void ProtoMAttackLabel::set_role_sex(::google::protobuf::int32 value) {
  set_has_role_sex();
  role_sex_ = value;
}

// -------------------------------------------------------------------

// ProtoActivityLWarRank

// optional int64 role_id = 1;
inline bool ProtoActivityLWarRank::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoActivityLWarRank::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoActivityLWarRank::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoActivityLWarRank::clear_role_id() {
  role_id_ = GOOGLE_LONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::int64 ProtoActivityLWarRank::role_id() const {
  return role_id_;
}
inline void ProtoActivityLWarRank::set_role_id(::google::protobuf::int64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional int32 rank = 2;
inline bool ProtoActivityLWarRank::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoActivityLWarRank::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoActivityLWarRank::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoActivityLWarRank::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 ProtoActivityLWarRank::rank() const {
  return rank_;
}
inline void ProtoActivityLWarRank::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional int32 is_leader = 3;
inline bool ProtoActivityLWarRank::has_is_leader() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoActivityLWarRank::set_has_is_leader() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoActivityLWarRank::clear_has_is_leader() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoActivityLWarRank::clear_is_leader() {
  is_leader_ = 0;
  clear_has_is_leader();
}
inline ::google::protobuf::int32 ProtoActivityLWarRank::is_leader() const {
  return is_leader_;
}
inline void ProtoActivityLWarRank::set_is_leader(::google::protobuf::int32 value) {
  set_has_is_leader();
  is_leader_ = value;
}

// -------------------------------------------------------------------

// ProtoChildAchieve

// optional int32 ach_index = 1;
inline bool ProtoChildAchieve::has_ach_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoChildAchieve::set_has_ach_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoChildAchieve::clear_has_ach_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoChildAchieve::clear_ach_index() {
  ach_index_ = 0;
  clear_has_ach_index();
}
inline ::google::protobuf::int32 ProtoChildAchieve::ach_index() const {
  return ach_index_;
}
inline void ProtoChildAchieve::set_ach_index(::google::protobuf::int32 value) {
  set_has_ach_index();
  ach_index_ = value;
}

// optional int32 base_type = 2;
inline bool ProtoChildAchieve::has_base_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoChildAchieve::set_has_base_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoChildAchieve::clear_has_base_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoChildAchieve::clear_base_type() {
  base_type_ = 0;
  clear_has_base_type();
}
inline ::google::protobuf::int32 ProtoChildAchieve::base_type() const {
  return base_type_;
}
inline void ProtoChildAchieve::set_base_type(::google::protobuf::int32 value) {
  set_has_base_type();
  base_type_ = value;
}

// optional int32 child_type = 3;
inline bool ProtoChildAchieve::has_child_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoChildAchieve::set_has_child_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoChildAchieve::clear_has_child_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoChildAchieve::clear_child_type() {
  child_type_ = 0;
  clear_has_child_type();
}
inline ::google::protobuf::int32 ProtoChildAchieve::child_type() const {
  return child_type_;
}
inline void ProtoChildAchieve::set_child_type(::google::protobuf::int32 value) {
  set_has_child_type();
  child_type_ = value;
}

// optional int32 act_type = 4;
inline bool ProtoChildAchieve::has_act_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoChildAchieve::set_has_act_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoChildAchieve::clear_has_act_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoChildAchieve::clear_act_type() {
  act_type_ = 0;
  clear_has_act_type();
}
inline ::google::protobuf::int32 ProtoChildAchieve::act_type() const {
  return act_type_;
}
inline void ProtoChildAchieve::set_act_type(::google::protobuf::int32 value) {
  set_has_act_type();
  act_type_ = value;
}

// optional int32 compare = 5;
inline bool ProtoChildAchieve::has_compare() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoChildAchieve::set_has_compare() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoChildAchieve::clear_has_compare() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoChildAchieve::clear_compare() {
  compare_ = 0;
  clear_has_compare();
}
inline ::google::protobuf::int32 ProtoChildAchieve::compare() const {
  return compare_;
}
inline void ProtoChildAchieve::set_compare(::google::protobuf::int32 value) {
  set_has_compare();
  compare_ = value;
}

// optional int32 sort = 6;
inline bool ProtoChildAchieve::has_sort() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoChildAchieve::set_has_sort() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoChildAchieve::clear_has_sort() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoChildAchieve::clear_sort() {
  sort_ = 0;
  clear_has_sort();
}
inline ::google::protobuf::int32 ProtoChildAchieve::sort() const {
  return sort_;
}
inline void ProtoChildAchieve::set_sort(::google::protobuf::int32 value) {
  set_has_sort();
  sort_ = value;
}

// optional int32 red_point = 7;
inline bool ProtoChildAchieve::has_red_point() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoChildAchieve::set_has_red_point() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoChildAchieve::clear_has_red_point() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoChildAchieve::clear_red_point() {
  red_point_ = 0;
  clear_has_red_point();
}
inline ::google::protobuf::int32 ProtoChildAchieve::red_point() const {
  return red_point_;
}
inline void ProtoChildAchieve::set_red_point(::google::protobuf::int32 value) {
  set_has_red_point();
  red_point_ = value;
}

// repeated .ProtoAchieveInfo achieve_info = 8;
inline int ProtoChildAchieve::achieve_info_size() const {
  return achieve_info_.size();
}
inline void ProtoChildAchieve::clear_achieve_info() {
  achieve_info_.Clear();
}
inline const ::ProtoAchieveInfo& ProtoChildAchieve::achieve_info(int index) const {
  return achieve_info_.Get(index);
}
inline ::ProtoAchieveInfo* ProtoChildAchieve::mutable_achieve_info(int index) {
  return achieve_info_.Mutable(index);
}
inline ::ProtoAchieveInfo* ProtoChildAchieve::add_achieve_info() {
  return achieve_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoAchieveInfo >&
ProtoChildAchieve::achieve_info() const {
  return achieve_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoAchieveInfo >*
ProtoChildAchieve::mutable_achieve_info() {
  return &achieve_info_;
}

// -------------------------------------------------------------------

// ProtoAchieveInfo

// optional int32 achieve_id = 1;
inline bool ProtoAchieveInfo::has_achieve_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoAchieveInfo::set_has_achieve_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoAchieveInfo::clear_has_achieve_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoAchieveInfo::clear_achieve_id() {
  achieve_id_ = 0;
  clear_has_achieve_id();
}
inline ::google::protobuf::int32 ProtoAchieveInfo::achieve_id() const {
  return achieve_id_;
}
inline void ProtoAchieveInfo::set_achieve_id(::google::protobuf::int32 value) {
  set_has_achieve_id();
  achieve_id_ = value;
}

// optional int32 ach_type = 2;
inline bool ProtoAchieveInfo::has_ach_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoAchieveInfo::set_has_ach_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoAchieveInfo::clear_has_ach_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoAchieveInfo::clear_ach_type() {
  ach_type_ = 0;
  clear_has_ach_type();
}
inline ::google::protobuf::int32 ProtoAchieveInfo::ach_type() const {
  return ach_type_;
}
inline void ProtoAchieveInfo::set_ach_type(::google::protobuf::int32 value) {
  set_has_ach_type();
  ach_type_ = value;
}

// optional int32 number_type = 3;
inline bool ProtoAchieveInfo::has_number_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoAchieveInfo::set_has_number_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoAchieveInfo::clear_has_number_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoAchieveInfo::clear_number_type() {
  number_type_ = 0;
  clear_has_number_type();
}
inline ::google::protobuf::int32 ProtoAchieveInfo::number_type() const {
  return number_type_;
}
inline void ProtoAchieveInfo::set_number_type(::google::protobuf::int32 value) {
  set_has_number_type();
  number_type_ = value;
}

// optional int32 need_amount = 4;
inline bool ProtoAchieveInfo::has_need_amount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoAchieveInfo::set_has_need_amount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoAchieveInfo::clear_has_need_amount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoAchieveInfo::clear_need_amount() {
  need_amount_ = 0;
  clear_has_need_amount();
}
inline ::google::protobuf::int32 ProtoAchieveInfo::need_amount() const {
  return need_amount_;
}
inline void ProtoAchieveInfo::set_need_amount(::google::protobuf::int32 value) {
  set_has_need_amount();
  need_amount_ = value;
}

// optional int32 sort = 5;
inline bool ProtoAchieveInfo::has_sort() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoAchieveInfo::set_has_sort() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoAchieveInfo::clear_has_sort() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoAchieveInfo::clear_sort() {
  sort_ = 0;
  clear_has_sort();
}
inline ::google::protobuf::int32 ProtoAchieveInfo::sort() const {
  return sort_;
}
inline void ProtoAchieveInfo::set_sort(::google::protobuf::int32 value) {
  set_has_sort();
  sort_ = value;
}

// optional int32 reward_id = 6;
inline bool ProtoAchieveInfo::has_reward_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoAchieveInfo::set_has_reward_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoAchieveInfo::clear_has_reward_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoAchieveInfo::clear_reward_id() {
  reward_id_ = 0;
  clear_has_reward_id();
}
inline ::google::protobuf::int32 ProtoAchieveInfo::reward_id() const {
  return reward_id_;
}
inline void ProtoAchieveInfo::set_reward_id(::google::protobuf::int32 value) {
  set_has_reward_id();
  reward_id_ = value;
}

// optional int32 ach_amount = 7;
inline bool ProtoAchieveInfo::has_ach_amount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoAchieveInfo::set_has_ach_amount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoAchieveInfo::clear_has_ach_amount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoAchieveInfo::clear_ach_amount() {
  ach_amount_ = 0;
  clear_has_ach_amount();
}
inline ::google::protobuf::int32 ProtoAchieveInfo::ach_amount() const {
  return ach_amount_;
}
inline void ProtoAchieveInfo::set_ach_amount(::google::protobuf::int32 value) {
  set_has_ach_amount();
  ach_amount_ = value;
}

// -------------------------------------------------------------------

// ProtoServerRecord

// optional int64 player_id = 1;
inline bool ProtoServerRecord::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoServerRecord::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoServerRecord::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoServerRecord::clear_player_id() {
  player_id_ = GOOGLE_LONGLONG(0);
  clear_has_player_id();
}
inline ::google::protobuf::int64 ProtoServerRecord::player_id() const {
  return player_id_;
}
inline void ProtoServerRecord::set_player_id(::google::protobuf::int64 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional string player_name = 2;
inline bool ProtoServerRecord::has_player_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoServerRecord::set_has_player_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoServerRecord::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoServerRecord::clear_player_name() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    player_name_->clear();
  }
  clear_has_player_name();
}
inline const ::std::string& ProtoServerRecord::player_name() const {
  return *player_name_;
}
inline void ProtoServerRecord::set_player_name(const ::std::string& value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void ProtoServerRecord::set_player_name(const char* value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void ProtoServerRecord::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoServerRecord::mutable_player_name() {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  return player_name_;
}
inline ::std::string* ProtoServerRecord::release_player_name() {
  clear_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_name_;
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 get_tme = 3;
inline bool ProtoServerRecord::has_get_tme() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoServerRecord::set_has_get_tme() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoServerRecord::clear_has_get_tme() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoServerRecord::clear_get_tme() {
  get_tme_ = GOOGLE_LONGLONG(0);
  clear_has_get_tme();
}
inline ::google::protobuf::int64 ProtoServerRecord::get_tme() const {
  return get_tme_;
}
inline void ProtoServerRecord::set_get_tme(::google::protobuf::int64 value) {
  set_has_get_tme();
  get_tme_ = value;
}

// optional int32 amount = 4;
inline bool ProtoServerRecord::has_amount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoServerRecord::set_has_amount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoServerRecord::clear_has_amount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoServerRecord::clear_amount() {
  amount_ = 0;
  clear_has_amount();
}
inline ::google::protobuf::int32 ProtoServerRecord::amount() const {
  return amount_;
}
inline void ProtoServerRecord::set_amount(::google::protobuf::int32 value) {
  set_has_amount();
  amount_ = value;
}

// optional int32 item_id = 5;
inline bool ProtoServerRecord::has_item_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoServerRecord::set_has_item_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoServerRecord::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoServerRecord::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
}
inline ::google::protobuf::int32 ProtoServerRecord::item_id() const {
  return item_id_;
}
inline void ProtoServerRecord::set_item_id(::google::protobuf::int32 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional int32 item_bind = 6;
inline bool ProtoServerRecord::has_item_bind() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoServerRecord::set_has_item_bind() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoServerRecord::clear_has_item_bind() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoServerRecord::clear_item_bind() {
  item_bind_ = 0;
  clear_has_item_bind();
}
inline ::google::protobuf::int32 ProtoServerRecord::item_bind() const {
  return item_bind_;
}
inline void ProtoServerRecord::set_item_bind(::google::protobuf::int32 value) {
  set_has_item_bind();
  item_bind_ = value;
}

// optional int32 reward_mult = 7;
inline bool ProtoServerRecord::has_reward_mult() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoServerRecord::set_has_reward_mult() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoServerRecord::clear_has_reward_mult() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoServerRecord::clear_reward_mult() {
  reward_mult_ = 0;
  clear_has_reward_mult();
}
inline ::google::protobuf::int32 ProtoServerRecord::reward_mult() const {
  return reward_mult_;
}
inline void ProtoServerRecord::set_reward_mult(::google::protobuf::int32 value) {
  set_has_reward_mult();
  reward_mult_ = value;
}

// optional int32 sub_value = 8;
inline bool ProtoServerRecord::has_sub_value() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoServerRecord::set_has_sub_value() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoServerRecord::clear_has_sub_value() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoServerRecord::clear_sub_value() {
  sub_value_ = 0;
  clear_has_sub_value();
}
inline ::google::protobuf::int32 ProtoServerRecord::sub_value() const {
  return sub_value_;
}
inline void ProtoServerRecord::set_sub_value(::google::protobuf::int32 value) {
  set_has_sub_value();
  sub_value_ = value;
}

// -------------------------------------------------------------------

// ProtoSlotInfo

// optional int32 index = 1;
inline bool ProtoSlotInfo::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoSlotInfo::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoSlotInfo::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoSlotInfo::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 ProtoSlotInfo::index() const {
  return index_;
}
inline void ProtoSlotInfo::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 slot_id = 2;
inline bool ProtoSlotInfo::has_slot_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoSlotInfo::set_has_slot_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoSlotInfo::clear_has_slot_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoSlotInfo::clear_slot_id() {
  slot_id_ = 0;
  clear_has_slot_id();
}
inline ::google::protobuf::int32 ProtoSlotInfo::slot_id() const {
  return slot_id_;
}
inline void ProtoSlotInfo::set_slot_id(::google::protobuf::int32 value) {
  set_has_slot_id();
  slot_id_ = value;
}

// optional .ProtoItem item = 3;
inline bool ProtoSlotInfo::has_item() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoSlotInfo::set_has_item() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoSlotInfo::clear_has_item() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoSlotInfo::clear_item() {
  if (item_ != NULL) item_->::ProtoItem::Clear();
  clear_has_item();
}
inline const ::ProtoItem& ProtoSlotInfo::item() const {
  return item_ != NULL ? *item_ : *default_instance_->item_;
}
inline ::ProtoItem* ProtoSlotInfo::mutable_item() {
  set_has_item();
  if (item_ == NULL) item_ = new ::ProtoItem;
  return item_;
}
inline ::ProtoItem* ProtoSlotInfo::release_item() {
  clear_has_item();
  ::ProtoItem* temp = item_;
  item_ = NULL;
  return temp;
}

// optional int32 is_precious = 4;
inline bool ProtoSlotInfo::has_is_precious() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoSlotInfo::set_has_is_precious() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoSlotInfo::clear_has_is_precious() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoSlotInfo::clear_is_precious() {
  is_precious_ = 0;
  clear_has_is_precious();
}
inline ::google::protobuf::int32 ProtoSlotInfo::is_precious() const {
  return is_precious_;
}
inline void ProtoSlotInfo::set_is_precious(::google::protobuf::int32 value) {
  set_has_is_precious();
  is_precious_ = value;
}

// optional int32 pre_cost = 5;
inline bool ProtoSlotInfo::has_pre_cost() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoSlotInfo::set_has_pre_cost() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoSlotInfo::clear_has_pre_cost() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoSlotInfo::clear_pre_cost() {
  pre_cost_ = 0;
  clear_has_pre_cost();
}
inline ::google::protobuf::int32 ProtoSlotInfo::pre_cost() const {
  return pre_cost_;
}
inline void ProtoSlotInfo::set_pre_cost(::google::protobuf::int32 value) {
  set_has_pre_cost();
  pre_cost_ = value;
}

// optional int32 now_cost = 6;
inline bool ProtoSlotInfo::has_now_cost() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoSlotInfo::set_has_now_cost() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoSlotInfo::clear_has_now_cost() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoSlotInfo::clear_now_cost() {
  now_cost_ = 0;
  clear_has_now_cost();
}
inline ::google::protobuf::int32 ProtoSlotInfo::now_cost() const {
  return now_cost_;
}
inline void ProtoSlotInfo::set_now_cost(::google::protobuf::int32 value) {
  set_has_now_cost();
  now_cost_ = value;
}

// optional int32 person_limit = 7;
inline bool ProtoSlotInfo::has_person_limit() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoSlotInfo::set_has_person_limit() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoSlotInfo::clear_has_person_limit() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoSlotInfo::clear_person_limit() {
  person_limit_ = 0;
  clear_has_person_limit();
}
inline ::google::protobuf::int32 ProtoSlotInfo::person_limit() const {
  return person_limit_;
}
inline void ProtoSlotInfo::set_person_limit(::google::protobuf::int32 value) {
  set_has_person_limit();
  person_limit_ = value;
}

// optional int32 server_limit = 8;
inline bool ProtoSlotInfo::has_server_limit() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoSlotInfo::set_has_server_limit() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoSlotInfo::clear_has_server_limit() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoSlotInfo::clear_server_limit() {
  server_limit_ = 0;
  clear_has_server_limit();
}
inline ::google::protobuf::int32 ProtoSlotInfo::server_limit() const {
  return server_limit_;
}
inline void ProtoSlotInfo::set_server_limit(::google::protobuf::int32 value) {
  set_has_server_limit();
  server_limit_ = value;
}

// optional int32 person_left_limit = 9;
inline bool ProtoSlotInfo::has_person_left_limit() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProtoSlotInfo::set_has_person_left_limit() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProtoSlotInfo::clear_has_person_left_limit() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProtoSlotInfo::clear_person_left_limit() {
  person_left_limit_ = 0;
  clear_has_person_left_limit();
}
inline ::google::protobuf::int32 ProtoSlotInfo::person_left_limit() const {
  return person_left_limit_;
}
inline void ProtoSlotInfo::set_person_left_limit(::google::protobuf::int32 value) {
  set_has_person_left_limit();
  person_left_limit_ = value;
}

// optional int32 server_left_limit = 10;
inline bool ProtoSlotInfo::has_server_left_limit() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProtoSlotInfo::set_has_server_left_limit() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ProtoSlotInfo::clear_has_server_left_limit() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ProtoSlotInfo::clear_server_left_limit() {
  server_left_limit_ = 0;
  clear_has_server_left_limit();
}
inline ::google::protobuf::int32 ProtoSlotInfo::server_left_limit() const {
  return server_left_limit_;
}
inline void ProtoSlotInfo::set_server_left_limit(::google::protobuf::int32 value) {
  set_has_server_left_limit();
  server_left_limit_ = value;
}

// optional int32 slot_type = 11;
inline bool ProtoSlotInfo::has_slot_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ProtoSlotInfo::set_has_slot_type() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ProtoSlotInfo::clear_has_slot_type() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ProtoSlotInfo::clear_slot_type() {
  slot_type_ = 0;
  clear_has_slot_type();
}
inline ::google::protobuf::int32 ProtoSlotInfo::slot_type() const {
  return slot_type_;
}
inline void ProtoSlotInfo::set_slot_type(::google::protobuf::int32 value) {
  set_has_slot_type();
  slot_type_ = value;
}

// repeated .ProtoPairObj pair_info = 12;
inline int ProtoSlotInfo::pair_info_size() const {
  return pair_info_.size();
}
inline void ProtoSlotInfo::clear_pair_info() {
  pair_info_.Clear();
}
inline const ::ProtoPairObj& ProtoSlotInfo::pair_info(int index) const {
  return pair_info_.Get(index);
}
inline ::ProtoPairObj* ProtoSlotInfo::mutable_pair_info(int index) {
  return pair_info_.Mutable(index);
}
inline ::ProtoPairObj* ProtoSlotInfo::add_pair_info() {
  return pair_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >&
ProtoSlotInfo::pair_info() const {
  return pair_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >*
ProtoSlotInfo::mutable_pair_info() {
  return &pair_info_;
}

// -------------------------------------------------------------------

// ProtoPersonRecord

// optional int32 amount = 1;
inline bool ProtoPersonRecord::has_amount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoPersonRecord::set_has_amount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoPersonRecord::clear_has_amount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoPersonRecord::clear_amount() {
  amount_ = 0;
  clear_has_amount();
}
inline ::google::protobuf::int32 ProtoPersonRecord::amount() const {
  return amount_;
}
inline void ProtoPersonRecord::set_amount(::google::protobuf::int32 value) {
  set_has_amount();
  amount_ = value;
}

// optional int32 get_time = 2;
inline bool ProtoPersonRecord::has_get_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoPersonRecord::set_has_get_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoPersonRecord::clear_has_get_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoPersonRecord::clear_get_time() {
  get_time_ = 0;
  clear_has_get_time();
}
inline ::google::protobuf::int32 ProtoPersonRecord::get_time() const {
  return get_time_;
}
inline void ProtoPersonRecord::set_get_time(::google::protobuf::int32 value) {
  set_has_get_time();
  get_time_ = value;
}

// optional int32 item_id = 3;
inline bool ProtoPersonRecord::has_item_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoPersonRecord::set_has_item_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoPersonRecord::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoPersonRecord::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
}
inline ::google::protobuf::int32 ProtoPersonRecord::item_id() const {
  return item_id_;
}
inline void ProtoPersonRecord::set_item_id(::google::protobuf::int32 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional int32 item_bind = 4;
inline bool ProtoPersonRecord::has_item_bind() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoPersonRecord::set_has_item_bind() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoPersonRecord::clear_has_item_bind() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoPersonRecord::clear_item_bind() {
  item_bind_ = 0;
  clear_has_item_bind();
}
inline ::google::protobuf::int32 ProtoPersonRecord::item_bind() const {
  return item_bind_;
}
inline void ProtoPersonRecord::set_item_bind(::google::protobuf::int32 value) {
  set_has_item_bind();
  item_bind_ = value;
}

// optional int32 reward_mult = 5;
inline bool ProtoPersonRecord::has_reward_mult() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoPersonRecord::set_has_reward_mult() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoPersonRecord::clear_has_reward_mult() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoPersonRecord::clear_reward_mult() {
  reward_mult_ = 0;
  clear_has_reward_mult();
}
inline ::google::protobuf::int32 ProtoPersonRecord::reward_mult() const {
  return reward_mult_;
}
inline void ProtoPersonRecord::set_reward_mult(::google::protobuf::int32 value) {
  set_has_reward_mult();
  reward_mult_ = value;
}

// optional int32 sub_value = 6;
inline bool ProtoPersonRecord::has_sub_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoPersonRecord::set_has_sub_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoPersonRecord::clear_has_sub_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoPersonRecord::clear_sub_value() {
  sub_value_ = 0;
  clear_has_sub_value();
}
inline ::google::protobuf::int32 ProtoPersonRecord::sub_value() const {
  return sub_value_;
}
inline void ProtoPersonRecord::set_sub_value(::google::protobuf::int32 value) {
  set_has_sub_value();
  sub_value_ = value;
}

// -------------------------------------------------------------------

// ProtoTimeLimitInfo

// optional int32 time_point = 1;
inline bool ProtoTimeLimitInfo::has_time_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoTimeLimitInfo::set_has_time_point() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoTimeLimitInfo::clear_has_time_point() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoTimeLimitInfo::clear_time_point() {
  time_point_ = 0;
  clear_has_time_point();
}
inline ::google::protobuf::int32 ProtoTimeLimitInfo::time_point() const {
  return time_point_;
}
inline void ProtoTimeLimitInfo::set_time_point(::google::protobuf::int32 value) {
  set_has_time_point();
  time_point_ = value;
}

// optional int32 time_point_tick = 2;
inline bool ProtoTimeLimitInfo::has_time_point_tick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoTimeLimitInfo::set_has_time_point_tick() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoTimeLimitInfo::clear_has_time_point_tick() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoTimeLimitInfo::clear_time_point_tick() {
  time_point_tick_ = 0;
  clear_has_time_point_tick();
}
inline ::google::protobuf::int32 ProtoTimeLimitInfo::time_point_tick() const {
  return time_point_tick_;
}
inline void ProtoTimeLimitInfo::set_time_point_tick(::google::protobuf::int32 value) {
  set_has_time_point_tick();
  time_point_tick_ = value;
}

// repeated .ProtoSlotInfo slot_info = 3;
inline int ProtoTimeLimitInfo::slot_info_size() const {
  return slot_info_.size();
}
inline void ProtoTimeLimitInfo::clear_slot_info() {
  slot_info_.Clear();
}
inline const ::ProtoSlotInfo& ProtoTimeLimitInfo::slot_info(int index) const {
  return slot_info_.Get(index);
}
inline ::ProtoSlotInfo* ProtoTimeLimitInfo::mutable_slot_info(int index) {
  return slot_info_.Mutable(index);
}
inline ::ProtoSlotInfo* ProtoTimeLimitInfo::add_slot_info() {
  return slot_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoSlotInfo >&
ProtoTimeLimitInfo::slot_info() const {
  return slot_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoSlotInfo >*
ProtoTimeLimitInfo::mutable_slot_info() {
  return &slot_info_;
}

// -------------------------------------------------------------------

// ProtoShopInfo

// optional .ProtoItem item = 1;
inline bool ProtoShopInfo::has_item() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoShopInfo::set_has_item() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoShopInfo::clear_has_item() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoShopInfo::clear_item() {
  if (item_ != NULL) item_->::ProtoItem::Clear();
  clear_has_item();
}
inline const ::ProtoItem& ProtoShopInfo::item() const {
  return item_ != NULL ? *item_ : *default_instance_->item_;
}
inline ::ProtoItem* ProtoShopInfo::mutable_item() {
  set_has_item();
  if (item_ == NULL) item_ = new ::ProtoItem;
  return item_;
}
inline ::ProtoItem* ProtoShopInfo::release_item() {
  clear_has_item();
  ::ProtoItem* temp = item_;
  item_ = NULL;
  return temp;
}

// optional int32 cost = 2;
inline bool ProtoShopInfo::has_cost() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoShopInfo::set_has_cost() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoShopInfo::clear_has_cost() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoShopInfo::clear_cost() {
  cost_ = 0;
  clear_has_cost();
}
inline ::google::protobuf::int32 ProtoShopInfo::cost() const {
  return cost_;
}
inline void ProtoShopInfo::set_cost(::google::protobuf::int32 value) {
  set_has_cost();
  cost_ = value;
}

// optional int32 is_buy = 3;
inline bool ProtoShopInfo::has_is_buy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoShopInfo::set_has_is_buy() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoShopInfo::clear_has_is_buy() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoShopInfo::clear_is_buy() {
  is_buy_ = 0;
  clear_has_is_buy();
}
inline ::google::protobuf::int32 ProtoShopInfo::is_buy() const {
  return is_buy_;
}
inline void ProtoShopInfo::set_is_buy(::google::protobuf::int32 value) {
  set_has_is_buy();
  is_buy_ = value;
}

// optional int32 is_rarity = 4;
inline bool ProtoShopInfo::has_is_rarity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoShopInfo::set_has_is_rarity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoShopInfo::clear_has_is_rarity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoShopInfo::clear_is_rarity() {
  is_rarity_ = 0;
  clear_has_is_rarity();
}
inline ::google::protobuf::int32 ProtoShopInfo::is_rarity() const {
  return is_rarity_;
}
inline void ProtoShopInfo::set_is_rarity(::google::protobuf::int32 value) {
  set_has_is_rarity();
  is_rarity_ = value;
}

// optional int32 cost_pre = 5;
inline bool ProtoShopInfo::has_cost_pre() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoShopInfo::set_has_cost_pre() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoShopInfo::clear_has_cost_pre() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoShopInfo::clear_cost_pre() {
  cost_pre_ = 0;
  clear_has_cost_pre();
}
inline ::google::protobuf::int32 ProtoShopInfo::cost_pre() const {
  return cost_pre_;
}
inline void ProtoShopInfo::set_cost_pre(::google::protobuf::int32 value) {
  set_has_cost_pre();
  cost_pre_ = value;
}

// -------------------------------------------------------------------

// ProtoFashionDetail

// optional int32 fashion_id = 1;
inline bool ProtoFashionDetail::has_fashion_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoFashionDetail::set_has_fashion_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoFashionDetail::clear_has_fashion_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoFashionDetail::clear_fashion_id() {
  fashion_id_ = 0;
  clear_has_fashion_id();
}
inline ::google::protobuf::int32 ProtoFashionDetail::fashion_id() const {
  return fashion_id_;
}
inline void ProtoFashionDetail::set_fashion_id(::google::protobuf::int32 value) {
  set_has_fashion_id();
  fashion_id_ = value;
}

// optional int32 active_type = 2;
inline bool ProtoFashionDetail::has_active_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoFashionDetail::set_has_active_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoFashionDetail::clear_has_active_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoFashionDetail::clear_active_type() {
  active_type_ = 0;
  clear_has_active_type();
}
inline ::google::protobuf::int32 ProtoFashionDetail::active_type() const {
  return active_type_;
}
inline void ProtoFashionDetail::set_active_type(::google::protobuf::int32 value) {
  set_has_active_type();
  active_type_ = value;
}

// optional int32 color_id = 3;
inline bool ProtoFashionDetail::has_color_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoFashionDetail::set_has_color_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoFashionDetail::clear_has_color_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoFashionDetail::clear_color_id() {
  color_id_ = 0;
  clear_has_color_id();
}
inline ::google::protobuf::int32 ProtoFashionDetail::color_id() const {
  return color_id_;
}
inline void ProtoFashionDetail::set_color_id(::google::protobuf::int32 value) {
  set_has_color_id();
  color_id_ = value;
}

// optional int32 is_permanent = 4;
inline bool ProtoFashionDetail::has_is_permanent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoFashionDetail::set_has_is_permanent() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoFashionDetail::clear_has_is_permanent() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoFashionDetail::clear_is_permanent() {
  is_permanent_ = 0;
  clear_has_is_permanent();
}
inline ::google::protobuf::int32 ProtoFashionDetail::is_permanent() const {
  return is_permanent_;
}
inline void ProtoFashionDetail::set_is_permanent(::google::protobuf::int32 value) {
  set_has_is_permanent();
  is_permanent_ = value;
}

// optional int64 active_tick = 5;
inline bool ProtoFashionDetail::has_active_tick() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoFashionDetail::set_has_active_tick() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoFashionDetail::clear_has_active_tick() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoFashionDetail::clear_active_tick() {
  active_tick_ = GOOGLE_LONGLONG(0);
  clear_has_active_tick();
}
inline ::google::protobuf::int64 ProtoFashionDetail::active_tick() const {
  return active_tick_;
}
inline void ProtoFashionDetail::set_active_tick(::google::protobuf::int64 value) {
  set_has_active_tick();
  active_tick_ = value;
}

// optional int64 end_tick = 6;
inline bool ProtoFashionDetail::has_end_tick() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoFashionDetail::set_has_end_tick() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoFashionDetail::clear_has_end_tick() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoFashionDetail::clear_end_tick() {
  end_tick_ = GOOGLE_LONGLONG(0);
  clear_has_end_tick();
}
inline ::google::protobuf::int64 ProtoFashionDetail::end_tick() const {
  return end_tick_;
}
inline void ProtoFashionDetail::set_end_tick(::google::protobuf::int64 value) {
  set_has_end_tick();
  end_tick_ = value;
}

// repeated int32 color_set = 7;
inline int ProtoFashionDetail::color_set_size() const {
  return color_set_.size();
}
inline void ProtoFashionDetail::clear_color_set() {
  color_set_.Clear();
}
inline ::google::protobuf::int32 ProtoFashionDetail::color_set(int index) const {
  return color_set_.Get(index);
}
inline void ProtoFashionDetail::set_color_set(int index, ::google::protobuf::int32 value) {
  color_set_.Set(index, value);
}
inline void ProtoFashionDetail::add_color_set(::google::protobuf::int32 value) {
  color_set_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProtoFashionDetail::color_set() const {
  return color_set_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProtoFashionDetail::mutable_color_set() {
  return &color_set_;
}

// -------------------------------------------------------------------

// ProtoWeddingDetail

// optional int32 level = 1;
inline bool ProtoWeddingDetail::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoWeddingDetail::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoWeddingDetail::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoWeddingDetail::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ProtoWeddingDetail::level() const {
  return level_;
}
inline void ProtoWeddingDetail::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 order = 2;
inline bool ProtoWeddingDetail::has_order() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoWeddingDetail::set_has_order() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoWeddingDetail::clear_has_order() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoWeddingDetail::clear_order() {
  order_ = 0;
  clear_has_order();
}
inline ::google::protobuf::int32 ProtoWeddingDetail::order() const {
  return order_;
}
inline void ProtoWeddingDetail::set_order(::google::protobuf::int32 value) {
  set_has_order();
  order_ = value;
}

// optional int32 side_level = 3;
inline bool ProtoWeddingDetail::has_side_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoWeddingDetail::set_has_side_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoWeddingDetail::clear_has_side_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoWeddingDetail::clear_side_level() {
  side_level_ = 0;
  clear_has_side_level();
}
inline ::google::protobuf::int32 ProtoWeddingDetail::side_level() const {
  return side_level_;
}
inline void ProtoWeddingDetail::set_side_level(::google::protobuf::int32 value) {
  set_has_side_level();
  side_level_ = value;
}

// optional int32 side_order = 4;
inline bool ProtoWeddingDetail::has_side_order() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoWeddingDetail::set_has_side_order() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoWeddingDetail::clear_has_side_order() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoWeddingDetail::clear_side_order() {
  side_order_ = 0;
  clear_has_side_order();
}
inline ::google::protobuf::int32 ProtoWeddingDetail::side_order() const {
  return side_order_;
}
inline void ProtoWeddingDetail::set_side_order(::google::protobuf::int32 value) {
  set_has_side_order();
  side_order_ = value;
}

// optional int32 exp = 5;
inline bool ProtoWeddingDetail::has_exp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoWeddingDetail::set_has_exp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoWeddingDetail::clear_has_exp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoWeddingDetail::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 ProtoWeddingDetail::exp() const {
  return exp_;
}
inline void ProtoWeddingDetail::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// optional int32 is_open = 6;
inline bool ProtoWeddingDetail::has_is_open() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoWeddingDetail::set_has_is_open() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoWeddingDetail::clear_has_is_open() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoWeddingDetail::clear_is_open() {
  is_open_ = 0;
  clear_has_is_open();
}
inline ::google::protobuf::int32 ProtoWeddingDetail::is_open() const {
  return is_open_;
}
inline void ProtoWeddingDetail::set_is_open(::google::protobuf::int32 value) {
  set_has_is_open();
  is_open_ = value;
}

// optional .ProtoFightPro pro_list = 7;
inline bool ProtoWeddingDetail::has_pro_list() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoWeddingDetail::set_has_pro_list() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoWeddingDetail::clear_has_pro_list() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoWeddingDetail::clear_pro_list() {
  if (pro_list_ != NULL) pro_list_->::ProtoFightPro::Clear();
  clear_has_pro_list();
}
inline const ::ProtoFightPro& ProtoWeddingDetail::pro_list() const {
  return pro_list_ != NULL ? *pro_list_ : *default_instance_->pro_list_;
}
inline ::ProtoFightPro* ProtoWeddingDetail::mutable_pro_list() {
  set_has_pro_list();
  if (pro_list_ == NULL) pro_list_ = new ::ProtoFightPro;
  return pro_list_;
}
inline ::ProtoFightPro* ProtoWeddingDetail::release_pro_list() {
  clear_has_pro_list();
  ::ProtoFightPro* temp = pro_list_;
  pro_list_ = NULL;
  return temp;
}

// optional .ProtoThreeObj other_info = 8;
inline bool ProtoWeddingDetail::has_other_info() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoWeddingDetail::set_has_other_info() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoWeddingDetail::clear_has_other_info() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoWeddingDetail::clear_other_info() {
  if (other_info_ != NULL) other_info_->::ProtoThreeObj::Clear();
  clear_has_other_info();
}
inline const ::ProtoThreeObj& ProtoWeddingDetail::other_info() const {
  return other_info_ != NULL ? *other_info_ : *default_instance_->other_info_;
}
inline ::ProtoThreeObj* ProtoWeddingDetail::mutable_other_info() {
  set_has_other_info();
  if (other_info_ == NULL) other_info_ = new ::ProtoThreeObj;
  return other_info_;
}
inline ::ProtoThreeObj* ProtoWeddingDetail::release_other_info() {
  clear_has_other_info();
  ::ProtoThreeObj* temp = other_info_;
  other_info_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// ProtoWedTreasures

// optional int64 buy_tick = 1;
inline bool ProtoWedTreasures::has_buy_tick() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoWedTreasures::set_has_buy_tick() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoWedTreasures::clear_has_buy_tick() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoWedTreasures::clear_buy_tick() {
  buy_tick_ = GOOGLE_LONGLONG(0);
  clear_has_buy_tick();
}
inline ::google::protobuf::int64 ProtoWedTreasures::buy_tick() const {
  return buy_tick_;
}
inline void ProtoWedTreasures::set_buy_tick(::google::protobuf::int64 value) {
  set_has_buy_tick();
  buy_tick_ = value;
}

// optional int32 is_fetch = 2;
inline bool ProtoWedTreasures::has_is_fetch() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoWedTreasures::set_has_is_fetch() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoWedTreasures::clear_has_is_fetch() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoWedTreasures::clear_is_fetch() {
  is_fetch_ = 0;
  clear_has_is_fetch();
}
inline ::google::protobuf::int32 ProtoWedTreasures::is_fetch() const {
  return is_fetch_;
}
inline void ProtoWedTreasures::set_is_fetch(::google::protobuf::int32 value) {
  set_has_is_fetch();
  is_fetch_ = value;
}

// optional int32 left_time = 3;
inline bool ProtoWedTreasures::has_left_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoWedTreasures::set_has_left_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoWedTreasures::clear_has_left_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoWedTreasures::clear_left_time() {
  left_time_ = 0;
  clear_has_left_time();
}
inline ::google::protobuf::int32 ProtoWedTreasures::left_time() const {
  return left_time_;
}
inline void ProtoWedTreasures::set_left_time(::google::protobuf::int32 value) {
  set_has_left_time();
  left_time_ = value;
}

// optional int32 type = 4;
inline bool ProtoWedTreasures::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoWedTreasures::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoWedTreasures::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoWedTreasures::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ProtoWedTreasures::type() const {
  return type_;
}
inline void ProtoWedTreasures::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// ProtoWeddingRole

// optional int64 role_id = 1;
inline bool ProtoWeddingRole::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoWeddingRole::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoWeddingRole::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoWeddingRole::clear_role_id() {
  role_id_ = GOOGLE_LONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::int64 ProtoWeddingRole::role_id() const {
  return role_id_;
}
inline void ProtoWeddingRole::set_role_id(::google::protobuf::int64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string role_name = 2;
inline bool ProtoWeddingRole::has_role_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoWeddingRole::set_has_role_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoWeddingRole::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoWeddingRole::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& ProtoWeddingRole::role_name() const {
  return *role_name_;
}
inline void ProtoWeddingRole::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoWeddingRole::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoWeddingRole::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoWeddingRole::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* ProtoWeddingRole::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 sex = 3;
inline bool ProtoWeddingRole::has_sex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoWeddingRole::set_has_sex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoWeddingRole::clear_has_sex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoWeddingRole::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 ProtoWeddingRole::sex() const {
  return sex_;
}
inline void ProtoWeddingRole::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// -------------------------------------------------------------------

// ProtoWeddingRank

// optional int32 rank = 1;
inline bool ProtoWeddingRank::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoWeddingRank::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoWeddingRank::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoWeddingRank::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 ProtoWeddingRank::rank() const {
  return rank_;
}
inline void ProtoWeddingRank::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional int64 tick = 2;
inline bool ProtoWeddingRank::has_tick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoWeddingRank::set_has_tick() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoWeddingRank::clear_has_tick() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoWeddingRank::clear_tick() {
  tick_ = GOOGLE_LONGLONG(0);
  clear_has_tick();
}
inline ::google::protobuf::int64 ProtoWeddingRank::tick() const {
  return tick_;
}
inline void ProtoWeddingRank::set_tick(::google::protobuf::int64 value) {
  set_has_tick();
  tick_ = value;
}

// optional int32 server_id = 3;
inline bool ProtoWeddingRank::has_server_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoWeddingRank::set_has_server_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoWeddingRank::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoWeddingRank::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
inline ::google::protobuf::int32 ProtoWeddingRank::server_id() const {
  return server_id_;
}
inline void ProtoWeddingRank::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
}

// optional string server_flag = 4;
inline bool ProtoWeddingRank::has_server_flag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoWeddingRank::set_has_server_flag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoWeddingRank::clear_has_server_flag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoWeddingRank::clear_server_flag() {
  if (server_flag_ != &::google::protobuf::internal::kEmptyString) {
    server_flag_->clear();
  }
  clear_has_server_flag();
}
inline const ::std::string& ProtoWeddingRank::server_flag() const {
  return *server_flag_;
}
inline void ProtoWeddingRank::set_server_flag(const ::std::string& value) {
  set_has_server_flag();
  if (server_flag_ == &::google::protobuf::internal::kEmptyString) {
    server_flag_ = new ::std::string;
  }
  server_flag_->assign(value);
}
inline void ProtoWeddingRank::set_server_flag(const char* value) {
  set_has_server_flag();
  if (server_flag_ == &::google::protobuf::internal::kEmptyString) {
    server_flag_ = new ::std::string;
  }
  server_flag_->assign(value);
}
inline void ProtoWeddingRank::set_server_flag(const char* value, size_t size) {
  set_has_server_flag();
  if (server_flag_ == &::google::protobuf::internal::kEmptyString) {
    server_flag_ = new ::std::string;
  }
  server_flag_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoWeddingRank::mutable_server_flag() {
  set_has_server_flag();
  if (server_flag_ == &::google::protobuf::internal::kEmptyString) {
    server_flag_ = new ::std::string;
  }
  return server_flag_;
}
inline ::std::string* ProtoWeddingRank::release_server_flag() {
  clear_has_server_flag();
  if (server_flag_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_flag_;
    server_flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string server_prev = 5;
inline bool ProtoWeddingRank::has_server_prev() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoWeddingRank::set_has_server_prev() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoWeddingRank::clear_has_server_prev() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoWeddingRank::clear_server_prev() {
  if (server_prev_ != &::google::protobuf::internal::kEmptyString) {
    server_prev_->clear();
  }
  clear_has_server_prev();
}
inline const ::std::string& ProtoWeddingRank::server_prev() const {
  return *server_prev_;
}
inline void ProtoWeddingRank::set_server_prev(const ::std::string& value) {
  set_has_server_prev();
  if (server_prev_ == &::google::protobuf::internal::kEmptyString) {
    server_prev_ = new ::std::string;
  }
  server_prev_->assign(value);
}
inline void ProtoWeddingRank::set_server_prev(const char* value) {
  set_has_server_prev();
  if (server_prev_ == &::google::protobuf::internal::kEmptyString) {
    server_prev_ = new ::std::string;
  }
  server_prev_->assign(value);
}
inline void ProtoWeddingRank::set_server_prev(const char* value, size_t size) {
  set_has_server_prev();
  if (server_prev_ == &::google::protobuf::internal::kEmptyString) {
    server_prev_ = new ::std::string;
  }
  server_prev_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoWeddingRank::mutable_server_prev() {
  set_has_server_prev();
  if (server_prev_ == &::google::protobuf::internal::kEmptyString) {
    server_prev_ = new ::std::string;
  }
  return server_prev_;
}
inline ::std::string* ProtoWeddingRank::release_server_prev() {
  clear_has_server_prev();
  if (server_prev_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_prev_;
    server_prev_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string server_name = 6;
inline bool ProtoWeddingRank::has_server_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoWeddingRank::set_has_server_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoWeddingRank::clear_has_server_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoWeddingRank::clear_server_name() {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    server_name_->clear();
  }
  clear_has_server_name();
}
inline const ::std::string& ProtoWeddingRank::server_name() const {
  return *server_name_;
}
inline void ProtoWeddingRank::set_server_name(const ::std::string& value) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
}
inline void ProtoWeddingRank::set_server_name(const char* value) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
}
inline void ProtoWeddingRank::set_server_name(const char* value, size_t size) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoWeddingRank::mutable_server_name() {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  return server_name_;
}
inline ::std::string* ProtoWeddingRank::release_server_name() {
  clear_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_name_;
    server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .ProtoWeddingRole player1 = 7;
inline bool ProtoWeddingRank::has_player1() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoWeddingRank::set_has_player1() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoWeddingRank::clear_has_player1() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoWeddingRank::clear_player1() {
  if (player1_ != NULL) player1_->::ProtoWeddingRole::Clear();
  clear_has_player1();
}
inline const ::ProtoWeddingRole& ProtoWeddingRank::player1() const {
  return player1_ != NULL ? *player1_ : *default_instance_->player1_;
}
inline ::ProtoWeddingRole* ProtoWeddingRank::mutable_player1() {
  set_has_player1();
  if (player1_ == NULL) player1_ = new ::ProtoWeddingRole;
  return player1_;
}
inline ::ProtoWeddingRole* ProtoWeddingRank::release_player1() {
  clear_has_player1();
  ::ProtoWeddingRole* temp = player1_;
  player1_ = NULL;
  return temp;
}

// optional .ProtoWeddingRole player2 = 8;
inline bool ProtoWeddingRank::has_player2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoWeddingRank::set_has_player2() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoWeddingRank::clear_has_player2() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoWeddingRank::clear_player2() {
  if (player2_ != NULL) player2_->::ProtoWeddingRole::Clear();
  clear_has_player2();
}
inline const ::ProtoWeddingRole& ProtoWeddingRank::player2() const {
  return player2_ != NULL ? *player2_ : *default_instance_->player2_;
}
inline ::ProtoWeddingRole* ProtoWeddingRank::mutable_player2() {
  set_has_player2();
  if (player2_ == NULL) player2_ = new ::ProtoWeddingRole;
  return player2_;
}
inline ::ProtoWeddingRole* ProtoWeddingRank::release_player2() {
  clear_has_player2();
  ::ProtoWeddingRole* temp = player2_;
  player2_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// ProtoWedLabel

// optional int32 id = 1;
inline bool ProtoWedLabel::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoWedLabel::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoWedLabel::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoWedLabel::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ProtoWedLabel::id() const {
  return id_;
}
inline void ProtoWedLabel::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 label_id = 2;
inline bool ProtoWedLabel::has_label_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoWedLabel::set_has_label_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoWedLabel::clear_has_label_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoWedLabel::clear_label_id() {
  label_id_ = 0;
  clear_has_label_id();
}
inline ::google::protobuf::int32 ProtoWedLabel::label_id() const {
  return label_id_;
}
inline void ProtoWedLabel::set_label_id(::google::protobuf::int32 value) {
  set_has_label_id();
  label_id_ = value;
}

// optional int32 ring_level_limit = 3;
inline bool ProtoWedLabel::has_ring_level_limit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoWedLabel::set_has_ring_level_limit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoWedLabel::clear_has_ring_level_limit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoWedLabel::clear_ring_level_limit() {
  ring_level_limit_ = 0;
  clear_has_ring_level_limit();
}
inline ::google::protobuf::int32 ProtoWedLabel::ring_level_limit() const {
  return ring_level_limit_;
}
inline void ProtoWedLabel::set_ring_level_limit(::google::protobuf::int32 value) {
  set_has_ring_level_limit();
  ring_level_limit_ = value;
}

// optional int32 sys_level_limit = 4;
inline bool ProtoWedLabel::has_sys_level_limit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoWedLabel::set_has_sys_level_limit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoWedLabel::clear_has_sys_level_limit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoWedLabel::clear_sys_level_limit() {
  sys_level_limit_ = 0;
  clear_has_sys_level_limit();
}
inline ::google::protobuf::int32 ProtoWedLabel::sys_level_limit() const {
  return sys_level_limit_;
}
inline void ProtoWedLabel::set_sys_level_limit(::google::protobuf::int32 value) {
  set_has_sys_level_limit();
  sys_level_limit_ = value;
}

// optional int32 tree_level_limit = 5;
inline bool ProtoWedLabel::has_tree_level_limit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoWedLabel::set_has_tree_level_limit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoWedLabel::clear_has_tree_level_limit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoWedLabel::clear_tree_level_limit() {
  tree_level_limit_ = 0;
  clear_has_tree_level_limit();
}
inline ::google::protobuf::int32 ProtoWedLabel::tree_level_limit() const {
  return tree_level_limit_;
}
inline void ProtoWedLabel::set_tree_level_limit(::google::protobuf::int32 value) {
  set_has_tree_level_limit();
  tree_level_limit_ = value;
}

// optional int32 status = 6;
inline bool ProtoWedLabel::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoWedLabel::set_has_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoWedLabel::clear_has_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoWedLabel::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 ProtoWedLabel::status() const {
  return status_;
}
inline void ProtoWedLabel::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional .ProtoThreeObj other_info = 7;
inline bool ProtoWedLabel::has_other_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoWedLabel::set_has_other_info() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoWedLabel::clear_has_other_info() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoWedLabel::clear_other_info() {
  if (other_info_ != NULL) other_info_->::ProtoThreeObj::Clear();
  clear_has_other_info();
}
inline const ::ProtoThreeObj& ProtoWedLabel::other_info() const {
  return other_info_ != NULL ? *other_info_ : *default_instance_->other_info_;
}
inline ::ProtoThreeObj* ProtoWedLabel::mutable_other_info() {
  set_has_other_info();
  if (other_info_ == NULL) other_info_ = new ::ProtoThreeObj;
  return other_info_;
}
inline ::ProtoThreeObj* ProtoWedLabel::release_other_info() {
  clear_has_other_info();
  ::ProtoThreeObj* temp = other_info_;
  other_info_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// ProtoActRankInfo

// optional int32 rank = 1;
inline bool ProtoActRankInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoActRankInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoActRankInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoActRankInfo::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 ProtoActRankInfo::rank() const {
  return rank_;
}
inline void ProtoActRankInfo::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional int64 role_id = 2;
inline bool ProtoActRankInfo::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoActRankInfo::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoActRankInfo::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoActRankInfo::clear_role_id() {
  role_id_ = GOOGLE_LONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::int64 ProtoActRankInfo::role_id() const {
  return role_id_;
}
inline void ProtoActRankInfo::set_role_id(::google::protobuf::int64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string name = 3;
inline bool ProtoActRankInfo::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoActRankInfo::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoActRankInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoActRankInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ProtoActRankInfo::name() const {
  return *name_;
}
inline void ProtoActRankInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ProtoActRankInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ProtoActRankInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoActRankInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ProtoActRankInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 rank_value = 4;
inline bool ProtoActRankInfo::has_rank_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoActRankInfo::set_has_rank_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoActRankInfo::clear_has_rank_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoActRankInfo::clear_rank_value() {
  rank_value_ = 0;
  clear_has_rank_value();
}
inline ::google::protobuf::int32 ProtoActRankInfo::rank_value() const {
  return rank_value_;
}
inline void ProtoActRankInfo::set_rank_value(::google::protobuf::int32 value) {
  set_has_rank_value();
  rank_value_ = value;
}

// optional int64 tick = 5;
inline bool ProtoActRankInfo::has_tick() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoActRankInfo::set_has_tick() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoActRankInfo::clear_has_tick() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoActRankInfo::clear_tick() {
  tick_ = GOOGLE_LONGLONG(0);
  clear_has_tick();
}
inline ::google::protobuf::int64 ProtoActRankInfo::tick() const {
  return tick_;
}
inline void ProtoActRankInfo::set_tick(::google::protobuf::int64 value) {
  set_has_tick();
  tick_ = value;
}

// -------------------------------------------------------------------

// ProtoWaveReward

// optional int32 wave = 1;
inline bool ProtoWaveReward::has_wave() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoWaveReward::set_has_wave() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoWaveReward::clear_has_wave() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoWaveReward::clear_wave() {
  wave_ = 0;
  clear_has_wave();
}
inline ::google::protobuf::int32 ProtoWaveReward::wave() const {
  return wave_;
}
inline void ProtoWaveReward::set_wave(::google::protobuf::int32 value) {
  set_has_wave();
  wave_ = value;
}

// optional int32 amount = 2;
inline bool ProtoWaveReward::has_amount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoWaveReward::set_has_amount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoWaveReward::clear_has_amount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoWaveReward::clear_amount() {
  amount_ = 0;
  clear_has_amount();
}
inline ::google::protobuf::int32 ProtoWaveReward::amount() const {
  return amount_;
}
inline void ProtoWaveReward::set_amount(::google::protobuf::int32 value) {
  set_has_amount();
  amount_ = value;
}

// repeated .ProtoPairObj obj = 3;
inline int ProtoWaveReward::obj_size() const {
  return obj_.size();
}
inline void ProtoWaveReward::clear_obj() {
  obj_.Clear();
}
inline const ::ProtoPairObj& ProtoWaveReward::obj(int index) const {
  return obj_.Get(index);
}
inline ::ProtoPairObj* ProtoWaveReward::mutable_obj(int index) {
  return obj_.Mutable(index);
}
inline ::ProtoPairObj* ProtoWaveReward::add_obj() {
  return obj_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >&
ProtoWaveReward::obj() const {
  return obj_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >*
ProtoWaveReward::mutable_obj() {
  return &obj_;
}

// -------------------------------------------------------------------

// ProtoPlayerCheer

// optional int64 role_id = 1;
inline bool ProtoPlayerCheer::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoPlayerCheer::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoPlayerCheer::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoPlayerCheer::clear_role_id() {
  role_id_ = GOOGLE_LONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::int64 ProtoPlayerCheer::role_id() const {
  return role_id_;
}
inline void ProtoPlayerCheer::set_role_id(::google::protobuf::int64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string role_name = 2;
inline bool ProtoPlayerCheer::has_role_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoPlayerCheer::set_has_role_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoPlayerCheer::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoPlayerCheer::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& ProtoPlayerCheer::role_name() const {
  return *role_name_;
}
inline void ProtoPlayerCheer::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoPlayerCheer::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoPlayerCheer::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoPlayerCheer::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* ProtoPlayerCheer::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 wave = 3;
inline bool ProtoPlayerCheer::has_wave() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoPlayerCheer::set_has_wave() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoPlayerCheer::clear_has_wave() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoPlayerCheer::clear_wave() {
  wave_ = 0;
  clear_has_wave();
}
inline ::google::protobuf::int32 ProtoPlayerCheer::wave() const {
  return wave_;
}
inline void ProtoPlayerCheer::set_wave(::google::protobuf::int32 value) {
  set_has_wave();
  wave_ = value;
}

// optional int32 is_cheer = 4;
inline bool ProtoPlayerCheer::has_is_cheer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoPlayerCheer::set_has_is_cheer() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoPlayerCheer::clear_has_is_cheer() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoPlayerCheer::clear_is_cheer() {
  is_cheer_ = 0;
  clear_has_is_cheer();
}
inline ::google::protobuf::int32 ProtoPlayerCheer::is_cheer() const {
  return is_cheer_;
}
inline void ProtoPlayerCheer::set_is_cheer(::google::protobuf::int32 value) {
  set_has_is_cheer();
  is_cheer_ = value;
}

// optional int32 is_encourage = 5;
inline bool ProtoPlayerCheer::has_is_encourage() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoPlayerCheer::set_has_is_encourage() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoPlayerCheer::clear_has_is_encourage() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoPlayerCheer::clear_is_encourage() {
  is_encourage_ = 0;
  clear_has_is_encourage();
}
inline ::google::protobuf::int32 ProtoPlayerCheer::is_encourage() const {
  return is_encourage_;
}
inline void ProtoPlayerCheer::set_is_encourage(::google::protobuf::int32 value) {
  set_has_is_encourage();
  is_encourage_ = value;
}

// -------------------------------------------------------------------

// ProtoCheerRecord

// optional int64 role_id = 1;
inline bool ProtoCheerRecord::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoCheerRecord::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoCheerRecord::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoCheerRecord::clear_role_id() {
  role_id_ = GOOGLE_LONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::int64 ProtoCheerRecord::role_id() const {
  return role_id_;
}
inline void ProtoCheerRecord::set_role_id(::google::protobuf::int64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string role_name = 2;
inline bool ProtoCheerRecord::has_role_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoCheerRecord::set_has_role_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoCheerRecord::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoCheerRecord::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& ProtoCheerRecord::role_name() const {
  return *role_name_;
}
inline void ProtoCheerRecord::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoCheerRecord::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoCheerRecord::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoCheerRecord::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* ProtoCheerRecord::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 type = 3;
inline bool ProtoCheerRecord::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoCheerRecord::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoCheerRecord::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoCheerRecord::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ProtoCheerRecord::type() const {
  return type_;
}
inline void ProtoCheerRecord::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 is_active = 4;
inline bool ProtoCheerRecord::has_is_active() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoCheerRecord::set_has_is_active() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoCheerRecord::clear_has_is_active() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoCheerRecord::clear_is_active() {
  is_active_ = 0;
  clear_has_is_active();
}
inline ::google::protobuf::int32 ProtoCheerRecord::is_active() const {
  return is_active_;
}
inline void ProtoCheerRecord::set_is_active(::google::protobuf::int32 value) {
  set_has_is_active();
  is_active_ = value;
}

// optional int32 time = 5;
inline bool ProtoCheerRecord::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoCheerRecord::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoCheerRecord::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoCheerRecord::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 ProtoCheerRecord::time() const {
  return time_;
}
inline void ProtoCheerRecord::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// ProtoRechargeRank

// optional int64 role_id = 1;
inline bool ProtoRechargeRank::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoRechargeRank::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoRechargeRank::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoRechargeRank::clear_role_id() {
  role_id_ = GOOGLE_LONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::int64 ProtoRechargeRank::role_id() const {
  return role_id_;
}
inline void ProtoRechargeRank::set_role_id(::google::protobuf::int64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string name = 2;
inline bool ProtoRechargeRank::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoRechargeRank::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoRechargeRank::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoRechargeRank::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ProtoRechargeRank::name() const {
  return *name_;
}
inline void ProtoRechargeRank::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ProtoRechargeRank::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ProtoRechargeRank::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoRechargeRank::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ProtoRechargeRank::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 rank = 3;
inline bool ProtoRechargeRank::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoRechargeRank::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoRechargeRank::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoRechargeRank::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 ProtoRechargeRank::rank() const {
  return rank_;
}
inline void ProtoRechargeRank::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional int32 amount = 4;
inline bool ProtoRechargeRank::has_amount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoRechargeRank::set_has_amount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoRechargeRank::clear_has_amount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoRechargeRank::clear_amount() {
  amount_ = 0;
  clear_has_amount();
}
inline ::google::protobuf::int32 ProtoRechargeRank::amount() const {
  return amount_;
}
inline void ProtoRechargeRank::set_amount(::google::protobuf::int32 value) {
  set_has_amount();
  amount_ = value;
}

// -------------------------------------------------------------------

// ProtoMountInfo

// optional int32 mount_grade = 1;
inline bool ProtoMountInfo::has_mount_grade() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoMountInfo::set_has_mount_grade() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoMountInfo::clear_has_mount_grade() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoMountInfo::clear_mount_grade() {
  mount_grade_ = 0;
  clear_has_mount_grade();
}
inline ::google::protobuf::int32 ProtoMountInfo::mount_grade() const {
  return mount_grade_;
}
inline void ProtoMountInfo::set_mount_grade(::google::protobuf::int32 value) {
  set_has_mount_grade();
  mount_grade_ = value;
}

// optional int32 mount_shape = 2;
inline bool ProtoMountInfo::has_mount_shape() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoMountInfo::set_has_mount_shape() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoMountInfo::clear_has_mount_shape() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoMountInfo::clear_mount_shape() {
  mount_shape_ = 0;
  clear_has_mount_shape();
}
inline ::google::protobuf::int32 ProtoMountInfo::mount_shape() const {
  return mount_shape_;
}
inline void ProtoMountInfo::set_mount_shape(::google::protobuf::int32 value) {
  set_has_mount_shape();
  mount_shape_ = value;
}

// optional int32 force = 3;
inline bool ProtoMountInfo::has_force() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoMountInfo::set_has_force() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoMountInfo::clear_has_force() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoMountInfo::clear_force() {
  force_ = 0;
  clear_has_force();
}
inline ::google::protobuf::int32 ProtoMountInfo::force() const {
  return force_;
}
inline void ProtoMountInfo::set_force(::google::protobuf::int32 value) {
  set_has_force();
  force_ = value;
}

// optional .ProtoFightPro prop = 4;
inline bool ProtoMountInfo::has_prop() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoMountInfo::set_has_prop() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoMountInfo::clear_has_prop() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoMountInfo::clear_prop() {
  if (prop_ != NULL) prop_->::ProtoFightPro::Clear();
  clear_has_prop();
}
inline const ::ProtoFightPro& ProtoMountInfo::prop() const {
  return prop_ != NULL ? *prop_ : *default_instance_->prop_;
}
inline ::ProtoFightPro* ProtoMountInfo::mutable_prop() {
  set_has_prop();
  if (prop_ == NULL) prop_ = new ::ProtoFightPro;
  return prop_;
}
inline ::ProtoFightPro* ProtoMountInfo::release_prop() {
  clear_has_prop();
  ::ProtoFightPro* temp = prop_;
  prop_ = NULL;
  return temp;
}

// optional int32 type = 5;
inline bool ProtoMountInfo::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoMountInfo::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoMountInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoMountInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ProtoMountInfo::type() const {
  return type_;
}
inline void ProtoMountInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional .ProtoFightPro temp = 6;
inline bool ProtoMountInfo::has_temp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoMountInfo::set_has_temp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoMountInfo::clear_has_temp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoMountInfo::clear_temp() {
  if (temp_ != NULL) temp_->::ProtoFightPro::Clear();
  clear_has_temp();
}
inline const ::ProtoFightPro& ProtoMountInfo::temp() const {
  return temp_ != NULL ? *temp_ : *default_instance_->temp_;
}
inline ::ProtoFightPro* ProtoMountInfo::mutable_temp() {
  set_has_temp();
  if (temp_ == NULL) temp_ = new ::ProtoFightPro;
  return temp_;
}
inline ::ProtoFightPro* ProtoMountInfo::release_temp() {
  clear_has_temp();
  ::ProtoFightPro* temp = temp_;
  temp_ = NULL;
  return temp;
}

// repeated .ProtoSkill skill = 7;
inline int ProtoMountInfo::skill_size() const {
  return skill_.size();
}
inline void ProtoMountInfo::clear_skill() {
  skill_.Clear();
}
inline const ::ProtoSkill& ProtoMountInfo::skill(int index) const {
  return skill_.Get(index);
}
inline ::ProtoSkill* ProtoMountInfo::mutable_skill(int index) {
  return skill_.Mutable(index);
}
inline ::ProtoSkill* ProtoMountInfo::add_skill() {
  return skill_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoSkill >&
ProtoMountInfo::skill() const {
  return skill_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoSkill >*
ProtoMountInfo::mutable_skill() {
  return &skill_;
}

// optional int32 act_shape = 8;
inline bool ProtoMountInfo::has_act_shape() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoMountInfo::set_has_act_shape() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoMountInfo::clear_has_act_shape() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoMountInfo::clear_act_shape() {
  act_shape_ = 0;
  clear_has_act_shape();
}
inline ::google::protobuf::int32 ProtoMountInfo::act_shape() const {
  return act_shape_;
}
inline void ProtoMountInfo::set_act_shape(::google::protobuf::int32 value) {
  set_has_act_shape();
  act_shape_ = value;
}

// -------------------------------------------------------------------

// ProtoEquipList

// optional int32 pack_type = 1;
inline bool ProtoEquipList::has_pack_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoEquipList::set_has_pack_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoEquipList::clear_has_pack_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoEquipList::clear_pack_type() {
  pack_type_ = 0;
  clear_has_pack_type();
}
inline ::google::protobuf::int32 ProtoEquipList::pack_type() const {
  return pack_type_;
}
inline void ProtoEquipList::set_pack_type(::google::protobuf::int32 value) {
  set_has_pack_type();
  pack_type_ = value;
}

// repeated .ProtoItem pack_item_list = 2;
inline int ProtoEquipList::pack_item_list_size() const {
  return pack_item_list_.size();
}
inline void ProtoEquipList::clear_pack_item_list() {
  pack_item_list_.Clear();
}
inline const ::ProtoItem& ProtoEquipList::pack_item_list(int index) const {
  return pack_item_list_.Get(index);
}
inline ::ProtoItem* ProtoEquipList::mutable_pack_item_list(int index) {
  return pack_item_list_.Mutable(index);
}
inline ::ProtoItem* ProtoEquipList::add_pack_item_list() {
  return pack_item_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoItem >&
ProtoEquipList::pack_item_list() const {
  return pack_item_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoItem >*
ProtoEquipList::mutable_pack_item_list() {
  return &pack_item_list_;
}

// -------------------------------------------------------------------

// PActCumulativeLogin

// optional int32 single = 1;
inline bool PActCumulativeLogin::has_single() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PActCumulativeLogin::set_has_single() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PActCumulativeLogin::clear_has_single() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PActCumulativeLogin::clear_single() {
  single_ = 0;
  clear_has_single();
}
inline ::google::protobuf::int32 PActCumulativeLogin::single() const {
  return single_;
}
inline void PActCumulativeLogin::set_single(::google::protobuf::int32 value) {
  set_has_single();
  single_ = value;
}

// optional int32 ten = 2;
inline bool PActCumulativeLogin::has_ten() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PActCumulativeLogin::set_has_ten() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PActCumulativeLogin::clear_has_ten() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PActCumulativeLogin::clear_ten() {
  ten_ = 0;
  clear_has_ten();
}
inline ::google::protobuf::int32 PActCumulativeLogin::ten() const {
  return ten_;
}
inline void PActCumulativeLogin::set_ten(::google::protobuf::int32 value) {
  set_has_ten();
  ten_ = value;
}

// optional int32 hundred = 3;
inline bool PActCumulativeLogin::has_hundred() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PActCumulativeLogin::set_has_hundred() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PActCumulativeLogin::clear_has_hundred() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PActCumulativeLogin::clear_hundred() {
  hundred_ = 0;
  clear_has_hundred();
}
inline ::google::protobuf::int32 PActCumulativeLogin::hundred() const {
  return hundred_;
}
inline void PActCumulativeLogin::set_hundred(::google::protobuf::int32 value) {
  set_has_hundred();
  hundred_ = value;
}

// optional int32 multiple = 4;
inline bool PActCumulativeLogin::has_multiple() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PActCumulativeLogin::set_has_multiple() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PActCumulativeLogin::clear_has_multiple() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PActCumulativeLogin::clear_multiple() {
  multiple_ = 0;
  clear_has_multiple();
}
inline ::google::protobuf::int32 PActCumulativeLogin::multiple() const {
  return multiple_;
}
inline void PActCumulativeLogin::set_multiple(::google::protobuf::int32 value) {
  set_has_multiple();
  multiple_ = value;
}

// optional int32 single_state = 5;
inline bool PActCumulativeLogin::has_single_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PActCumulativeLogin::set_has_single_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PActCumulativeLogin::clear_has_single_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PActCumulativeLogin::clear_single_state() {
  single_state_ = 0;
  clear_has_single_state();
}
inline ::google::protobuf::int32 PActCumulativeLogin::single_state() const {
  return single_state_;
}
inline void PActCumulativeLogin::set_single_state(::google::protobuf::int32 value) {
  set_has_single_state();
  single_state_ = value;
}

// optional int32 ten_state = 6;
inline bool PActCumulativeLogin::has_ten_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PActCumulativeLogin::set_has_ten_state() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PActCumulativeLogin::clear_has_ten_state() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PActCumulativeLogin::clear_ten_state() {
  ten_state_ = 0;
  clear_has_ten_state();
}
inline ::google::protobuf::int32 PActCumulativeLogin::ten_state() const {
  return ten_state_;
}
inline void PActCumulativeLogin::set_ten_state(::google::protobuf::int32 value) {
  set_has_ten_state();
  ten_state_ = value;
}

// optional int32 hundred_state = 7;
inline bool PActCumulativeLogin::has_hundred_state() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PActCumulativeLogin::set_has_hundred_state() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PActCumulativeLogin::clear_has_hundred_state() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PActCumulativeLogin::clear_hundred_state() {
  hundred_state_ = 0;
  clear_has_hundred_state();
}
inline ::google::protobuf::int32 PActCumulativeLogin::hundred_state() const {
  return hundred_state_;
}
inline void PActCumulativeLogin::set_hundred_state(::google::protobuf::int32 value) {
  set_has_hundred_state();
  hundred_state_ = value;
}

// optional int32 multiple_state = 8;
inline bool PActCumulativeLogin::has_multiple_state() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PActCumulativeLogin::set_has_multiple_state() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PActCumulativeLogin::clear_has_multiple_state() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PActCumulativeLogin::clear_multiple_state() {
  multiple_state_ = 0;
  clear_has_multiple_state();
}
inline ::google::protobuf::int32 PActCumulativeLogin::multiple_state() const {
  return multiple_state_;
}
inline void PActCumulativeLogin::set_multiple_state(::google::protobuf::int32 value) {
  set_has_multiple_state();
  multiple_state_ = value;
}

// optional int32 login_count = 9;
inline bool PActCumulativeLogin::has_login_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PActCumulativeLogin::set_has_login_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PActCumulativeLogin::clear_has_login_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PActCumulativeLogin::clear_login_count() {
  login_count_ = 0;
  clear_has_login_count();
}
inline ::google::protobuf::int32 PActCumulativeLogin::login_count() const {
  return login_count_;
}
inline void PActCumulativeLogin::set_login_count(::google::protobuf::int32 value) {
  set_has_login_count();
  login_count_ = value;
}

// -------------------------------------------------------------------

// ProtoLegendTop

// optional int32 pass_floor = 1;
inline bool ProtoLegendTop::has_pass_floor() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoLegendTop::set_has_pass_floor() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoLegendTop::clear_has_pass_floor() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoLegendTop::clear_pass_floor() {
  pass_floor_ = 0;
  clear_has_pass_floor();
}
inline ::google::protobuf::int32 ProtoLegendTop::pass_floor() const {
  return pass_floor_;
}
inline void ProtoLegendTop::set_pass_floor(::google::protobuf::int32 value) {
  set_has_pass_floor();
  pass_floor_ = value;
}

// optional int32 today_rank = 2;
inline bool ProtoLegendTop::has_today_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoLegendTop::set_has_today_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoLegendTop::clear_has_today_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoLegendTop::clear_today_rank() {
  today_rank_ = 0;
  clear_has_today_rank();
}
inline ::google::protobuf::int32 ProtoLegendTop::today_rank() const {
  return today_rank_;
}
inline void ProtoLegendTop::set_today_rank(::google::protobuf::int32 value) {
  set_has_today_rank();
  today_rank_ = value;
}

// optional int32 is_sweep = 3;
inline bool ProtoLegendTop::has_is_sweep() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoLegendTop::set_has_is_sweep() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoLegendTop::clear_has_is_sweep() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoLegendTop::clear_is_sweep() {
  is_sweep_ = 0;
  clear_has_is_sweep();
}
inline ::google::protobuf::int32 ProtoLegendTop::is_sweep() const {
  return is_sweep_;
}
inline void ProtoLegendTop::set_is_sweep(::google::protobuf::int32 value) {
  set_has_is_sweep();
  is_sweep_ = value;
}

// repeated .ProtoFloorInfo floor_info = 4;
inline int ProtoLegendTop::floor_info_size() const {
  return floor_info_.size();
}
inline void ProtoLegendTop::clear_floor_info() {
  floor_info_.Clear();
}
inline const ::ProtoFloorInfo& ProtoLegendTop::floor_info(int index) const {
  return floor_info_.Get(index);
}
inline ::ProtoFloorInfo* ProtoLegendTop::mutable_floor_info(int index) {
  return floor_info_.Mutable(index);
}
inline ::ProtoFloorInfo* ProtoLegendTop::add_floor_info() {
  return floor_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoFloorInfo >&
ProtoLegendTop::floor_info() const {
  return floor_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoFloorInfo >*
ProtoLegendTop::mutable_floor_info() {
  return &floor_info_;
}

// -------------------------------------------------------------------

// ProtoWavePlayer

// optional int64 role_id = 1;
inline bool ProtoWavePlayer::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoWavePlayer::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoWavePlayer::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoWavePlayer::clear_role_id() {
  role_id_ = GOOGLE_LONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::int64 ProtoWavePlayer::role_id() const {
  return role_id_;
}
inline void ProtoWavePlayer::set_role_id(::google::protobuf::int64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string name = 2;
inline bool ProtoWavePlayer::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoWavePlayer::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoWavePlayer::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoWavePlayer::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ProtoWavePlayer::name() const {
  return *name_;
}
inline void ProtoWavePlayer::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ProtoWavePlayer::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ProtoWavePlayer::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoWavePlayer::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ProtoWavePlayer::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 sex = 3;
inline bool ProtoWavePlayer::has_sex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoWavePlayer::set_has_sex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoWavePlayer::clear_has_sex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoWavePlayer::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 ProtoWavePlayer::sex() const {
  return sex_;
}
inline void ProtoWavePlayer::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// optional int32 wave = 4;
inline bool ProtoWavePlayer::has_wave() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoWavePlayer::set_has_wave() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoWavePlayer::clear_has_wave() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoWavePlayer::clear_wave() {
  wave_ = 0;
  clear_has_wave();
}
inline ::google::protobuf::int32 ProtoWavePlayer::wave() const {
  return wave_;
}
inline void ProtoWavePlayer::set_wave(::google::protobuf::int32 value) {
  set_has_wave();
  wave_ = value;
}

// optional int64 tick = 5;
inline bool ProtoWavePlayer::has_tick() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoWavePlayer::set_has_tick() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoWavePlayer::clear_has_tick() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoWavePlayer::clear_tick() {
  tick_ = GOOGLE_LONGLONG(0);
  clear_has_tick();
}
inline ::google::protobuf::int64 ProtoWavePlayer::tick() const {
  return tick_;
}
inline void ProtoWavePlayer::set_tick(::google::protobuf::int64 value) {
  set_has_tick();
  tick_ = value;
}

// -------------------------------------------------------------------

// ProtoTransferInfo

// optional int32 transfer_id = 1;
inline bool ProtoTransferInfo::has_transfer_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoTransferInfo::set_has_transfer_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoTransferInfo::clear_has_transfer_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoTransferInfo::clear_transfer_id() {
  transfer_id_ = 0;
  clear_has_transfer_id();
}
inline ::google::protobuf::int32 ProtoTransferInfo::transfer_id() const {
  return transfer_id_;
}
inline void ProtoTransferInfo::set_transfer_id(::google::protobuf::int32 value) {
  set_has_transfer_id();
  transfer_id_ = value;
}

// optional int32 transfer_lv = 2;
inline bool ProtoTransferInfo::has_transfer_lv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoTransferInfo::set_has_transfer_lv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoTransferInfo::clear_has_transfer_lv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoTransferInfo::clear_transfer_lv() {
  transfer_lv_ = 0;
  clear_has_transfer_lv();
}
inline ::google::protobuf::int32 ProtoTransferInfo::transfer_lv() const {
  return transfer_lv_;
}
inline void ProtoTransferInfo::set_transfer_lv(::google::protobuf::int32 value) {
  set_has_transfer_lv();
  transfer_lv_ = value;
}

// optional int32 is_permanent = 3;
inline bool ProtoTransferInfo::has_is_permanent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoTransferInfo::set_has_is_permanent() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoTransferInfo::clear_has_is_permanent() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoTransferInfo::clear_is_permanent() {
  is_permanent_ = 0;
  clear_has_is_permanent();
}
inline ::google::protobuf::int32 ProtoTransferInfo::is_permanent() const {
  return is_permanent_;
}
inline void ProtoTransferInfo::set_is_permanent(::google::protobuf::int32 value) {
  set_has_is_permanent();
  is_permanent_ = value;
}

// optional int32 is_active = 4;
inline bool ProtoTransferInfo::has_is_active() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoTransferInfo::set_has_is_active() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoTransferInfo::clear_has_is_active() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoTransferInfo::clear_is_active() {
  is_active_ = 0;
  clear_has_is_active();
}
inline ::google::protobuf::int32 ProtoTransferInfo::is_active() const {
  return is_active_;
}
inline void ProtoTransferInfo::set_is_active(::google::protobuf::int32 value) {
  set_has_is_active();
  is_active_ = value;
}

// optional int64 active_tick = 5;
inline bool ProtoTransferInfo::has_active_tick() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoTransferInfo::set_has_active_tick() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoTransferInfo::clear_has_active_tick() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoTransferInfo::clear_active_tick() {
  active_tick_ = GOOGLE_LONGLONG(0);
  clear_has_active_tick();
}
inline ::google::protobuf::int64 ProtoTransferInfo::active_tick() const {
  return active_tick_;
}
inline void ProtoTransferInfo::set_active_tick(::google::protobuf::int64 value) {
  set_has_active_tick();
  active_tick_ = value;
}

// optional int64 end_tick = 6;
inline bool ProtoTransferInfo::has_end_tick() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoTransferInfo::set_has_end_tick() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoTransferInfo::clear_has_end_tick() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoTransferInfo::clear_end_tick() {
  end_tick_ = GOOGLE_LONGLONG(0);
  clear_has_end_tick();
}
inline ::google::protobuf::int64 ProtoTransferInfo::end_tick() const {
  return end_tick_;
}
inline void ProtoTransferInfo::set_end_tick(::google::protobuf::int64 value) {
  set_has_end_tick();
  end_tick_ = value;
}

// optional int32 transfer_skill = 7;
inline bool ProtoTransferInfo::has_transfer_skill() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoTransferInfo::set_has_transfer_skill() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoTransferInfo::clear_has_transfer_skill() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoTransferInfo::clear_transfer_skill() {
  transfer_skill_ = 0;
  clear_has_transfer_skill();
}
inline ::google::protobuf::int32 ProtoTransferInfo::transfer_skill() const {
  return transfer_skill_;
}
inline void ProtoTransferInfo::set_transfer_skill(::google::protobuf::int32 value) {
  set_has_transfer_skill();
  transfer_skill_ = value;
}

// repeated .ProtoPairObj skill = 8;
inline int ProtoTransferInfo::skill_size() const {
  return skill_.size();
}
inline void ProtoTransferInfo::clear_skill() {
  skill_.Clear();
}
inline const ::ProtoPairObj& ProtoTransferInfo::skill(int index) const {
  return skill_.Get(index);
}
inline ::ProtoPairObj* ProtoTransferInfo::mutable_skill(int index) {
  return skill_.Mutable(index);
}
inline ::ProtoPairObj* ProtoTransferInfo::add_skill() {
  return skill_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >&
ProtoTransferInfo::skill() const {
  return skill_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >*
ProtoTransferInfo::mutable_skill() {
  return &skill_;
}

// -------------------------------------------------------------------

// ProtoScriptReset

// optional int32 script_sort = 1;
inline bool ProtoScriptReset::has_script_sort() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoScriptReset::set_has_script_sort() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoScriptReset::clear_has_script_sort() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoScriptReset::clear_script_sort() {
  script_sort_ = 0;
  clear_has_script_sort();
}
inline ::google::protobuf::int32 ProtoScriptReset::script_sort() const {
  return script_sort_;
}
inline void ProtoScriptReset::set_script_sort(::google::protobuf::int32 value) {
  set_has_script_sort();
  script_sort_ = value;
}

// optional int32 left_times = 2;
inline bool ProtoScriptReset::has_left_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoScriptReset::set_has_left_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoScriptReset::clear_has_left_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoScriptReset::clear_left_times() {
  left_times_ = 0;
  clear_has_left_times();
}
inline ::google::protobuf::int32 ProtoScriptReset::left_times() const {
  return left_times_;
}
inline void ProtoScriptReset::set_left_times(::google::protobuf::int32 value) {
  set_has_left_times();
  left_times_ = value;
}

// optional int32 left_buy_times = 3;
inline bool ProtoScriptReset::has_left_buy_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoScriptReset::set_has_left_buy_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoScriptReset::clear_has_left_buy_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoScriptReset::clear_left_buy_times() {
  left_buy_times_ = 0;
  clear_has_left_buy_times();
}
inline ::google::protobuf::int32 ProtoScriptReset::left_buy_times() const {
  return left_buy_times_;
}
inline void ProtoScriptReset::set_left_buy_times(::google::protobuf::int32 value) {
  set_has_left_buy_times();
  left_buy_times_ = value;
}

// -------------------------------------------------------------------

// ProtoBackActName

// optional int32 act_id = 1;
inline bool ProtoBackActName::has_act_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoBackActName::set_has_act_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoBackActName::clear_has_act_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoBackActName::clear_act_id() {
  act_id_ = 0;
  clear_has_act_id();
}
inline ::google::protobuf::int32 ProtoBackActName::act_id() const {
  return act_id_;
}
inline void ProtoBackActName::set_act_id(::google::protobuf::int32 value) {
  set_has_act_id();
  act_id_ = value;
}

// optional string act_title = 2;
inline bool ProtoBackActName::has_act_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoBackActName::set_has_act_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoBackActName::clear_has_act_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoBackActName::clear_act_title() {
  if (act_title_ != &::google::protobuf::internal::kEmptyString) {
    act_title_->clear();
  }
  clear_has_act_title();
}
inline const ::std::string& ProtoBackActName::act_title() const {
  return *act_title_;
}
inline void ProtoBackActName::set_act_title(const ::std::string& value) {
  set_has_act_title();
  if (act_title_ == &::google::protobuf::internal::kEmptyString) {
    act_title_ = new ::std::string;
  }
  act_title_->assign(value);
}
inline void ProtoBackActName::set_act_title(const char* value) {
  set_has_act_title();
  if (act_title_ == &::google::protobuf::internal::kEmptyString) {
    act_title_ = new ::std::string;
  }
  act_title_->assign(value);
}
inline void ProtoBackActName::set_act_title(const char* value, size_t size) {
  set_has_act_title();
  if (act_title_ == &::google::protobuf::internal::kEmptyString) {
    act_title_ = new ::std::string;
  }
  act_title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoBackActName::mutable_act_title() {
  set_has_act_title();
  if (act_title_ == &::google::protobuf::internal::kEmptyString) {
    act_title_ = new ::std::string;
  }
  return act_title_;
}
inline ::std::string* ProtoBackActName::release_act_title() {
  clear_has_act_title();
  if (act_title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = act_title_;
    act_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 has_reward = 3;
inline bool ProtoBackActName::has_has_reward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoBackActName::set_has_has_reward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoBackActName::clear_has_has_reward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoBackActName::clear_has_reward() {
  has_reward_ = 0;
  clear_has_has_reward();
}
inline ::google::protobuf::int32 ProtoBackActName::has_reward() const {
  return has_reward_;
}
inline void ProtoBackActName::set_has_reward(::google::protobuf::int32 value) {
  set_has_has_reward();
  has_reward_ = value;
}

// -------------------------------------------------------------------

// ProtoBackActInfo

// optional int32 act_id = 1;
inline bool ProtoBackActInfo::has_act_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoBackActInfo::set_has_act_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoBackActInfo::clear_has_act_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoBackActInfo::clear_act_id() {
  act_id_ = 0;
  clear_has_act_id();
}
inline ::google::protobuf::int32 ProtoBackActInfo::act_id() const {
  return act_id_;
}
inline void ProtoBackActInfo::set_act_id(::google::protobuf::int32 value) {
  set_has_act_id();
  act_id_ = value;
}

// optional int32 second_type = 2;
inline bool ProtoBackActInfo::has_second_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoBackActInfo::set_has_second_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoBackActInfo::clear_has_second_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoBackActInfo::clear_second_type() {
  second_type_ = 0;
  clear_has_second_type();
}
inline ::google::protobuf::int32 ProtoBackActInfo::second_type() const {
  return second_type_;
}
inline void ProtoBackActInfo::set_second_type(::google::protobuf::int32 value) {
  set_has_second_type();
  second_type_ = value;
}

// optional int32 act_start = 3;
inline bool ProtoBackActInfo::has_act_start() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoBackActInfo::set_has_act_start() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoBackActInfo::clear_has_act_start() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoBackActInfo::clear_act_start() {
  act_start_ = 0;
  clear_has_act_start();
}
inline ::google::protobuf::int32 ProtoBackActInfo::act_start() const {
  return act_start_;
}
inline void ProtoBackActInfo::set_act_start(::google::protobuf::int32 value) {
  set_has_act_start();
  act_start_ = value;
}

// optional int32 act_end = 4;
inline bool ProtoBackActInfo::has_act_end() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoBackActInfo::set_has_act_end() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoBackActInfo::clear_has_act_end() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoBackActInfo::clear_act_end() {
  act_end_ = 0;
  clear_has_act_end();
}
inline ::google::protobuf::int32 ProtoBackActInfo::act_end() const {
  return act_end_;
}
inline void ProtoBackActInfo::set_act_end(::google::protobuf::int32 value) {
  set_has_act_end();
  act_end_ = value;
}

// optional string act_content = 5;
inline bool ProtoBackActInfo::has_act_content() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoBackActInfo::set_has_act_content() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoBackActInfo::clear_has_act_content() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoBackActInfo::clear_act_content() {
  if (act_content_ != &::google::protobuf::internal::kEmptyString) {
    act_content_->clear();
  }
  clear_has_act_content();
}
inline const ::std::string& ProtoBackActInfo::act_content() const {
  return *act_content_;
}
inline void ProtoBackActInfo::set_act_content(const ::std::string& value) {
  set_has_act_content();
  if (act_content_ == &::google::protobuf::internal::kEmptyString) {
    act_content_ = new ::std::string;
  }
  act_content_->assign(value);
}
inline void ProtoBackActInfo::set_act_content(const char* value) {
  set_has_act_content();
  if (act_content_ == &::google::protobuf::internal::kEmptyString) {
    act_content_ = new ::std::string;
  }
  act_content_->assign(value);
}
inline void ProtoBackActInfo::set_act_content(const char* value, size_t size) {
  set_has_act_content();
  if (act_content_ == &::google::protobuf::internal::kEmptyString) {
    act_content_ = new ::std::string;
  }
  act_content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoBackActInfo::mutable_act_content() {
  set_has_act_content();
  if (act_content_ == &::google::protobuf::internal::kEmptyString) {
    act_content_ = new ::std::string;
  }
  return act_content_;
}
inline ::std::string* ProtoBackActInfo::release_act_content() {
  clear_has_act_content();
  if (act_content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = act_content_;
    act_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .ProtoBackActReward reward_list = 6;
inline int ProtoBackActInfo::reward_list_size() const {
  return reward_list_.size();
}
inline void ProtoBackActInfo::clear_reward_list() {
  reward_list_.Clear();
}
inline const ::ProtoBackActReward& ProtoBackActInfo::reward_list(int index) const {
  return reward_list_.Get(index);
}
inline ::ProtoBackActReward* ProtoBackActInfo::mutable_reward_list(int index) {
  return reward_list_.Mutable(index);
}
inline ::ProtoBackActReward* ProtoBackActInfo::add_reward_list() {
  return reward_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBackActReward >&
ProtoBackActInfo::reward_list() const {
  return reward_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBackActReward >*
ProtoBackActInfo::mutable_reward_list() {
  return &reward_list_;
}

// optional int32 need_gold = 7;
inline bool ProtoBackActInfo::has_need_gold() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoBackActInfo::set_has_need_gold() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoBackActInfo::clear_has_need_gold() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoBackActInfo::clear_need_gold() {
  need_gold_ = 0;
  clear_has_need_gold();
}
inline ::google::protobuf::int32 ProtoBackActInfo::need_gold() const {
  return need_gold_;
}
inline void ProtoBackActInfo::set_need_gold(::google::protobuf::int32 value) {
  set_has_need_gold();
  need_gold_ = value;
}

// -------------------------------------------------------------------

// ProtoBackActReward

// optional int32 reward_id = 1;
inline bool ProtoBackActReward::has_reward_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoBackActReward::set_has_reward_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoBackActReward::clear_has_reward_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoBackActReward::clear_reward_id() {
  reward_id_ = 0;
  clear_has_reward_id();
}
inline ::google::protobuf::int32 ProtoBackActReward::reward_id() const {
  return reward_id_;
}
inline void ProtoBackActReward::set_reward_id(::google::protobuf::int32 value) {
  set_has_reward_id();
  reward_id_ = value;
}

// repeated .ProtoItem reward_item_list = 2;
inline int ProtoBackActReward::reward_item_list_size() const {
  return reward_item_list_.size();
}
inline void ProtoBackActReward::clear_reward_item_list() {
  reward_item_list_.Clear();
}
inline const ::ProtoItem& ProtoBackActReward::reward_item_list(int index) const {
  return reward_item_list_.Get(index);
}
inline ::ProtoItem* ProtoBackActReward::mutable_reward_item_list(int index) {
  return reward_item_list_.Mutable(index);
}
inline ::ProtoItem* ProtoBackActReward::add_reward_item_list() {
  return reward_item_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoItem >&
ProtoBackActReward::reward_item_list() const {
  return reward_item_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoItem >*
ProtoBackActReward::mutable_reward_item_list() {
  return &reward_item_list_;
}

// optional int32 reward_amount = 3;
inline bool ProtoBackActReward::has_reward_amount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoBackActReward::set_has_reward_amount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoBackActReward::clear_has_reward_amount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoBackActReward::clear_reward_amount() {
  reward_amount_ = 0;
  clear_has_reward_amount();
}
inline ::google::protobuf::int32 ProtoBackActReward::reward_amount() const {
  return reward_amount_;
}
inline void ProtoBackActReward::set_reward_amount(::google::protobuf::int32 value) {
  set_has_reward_amount();
  reward_amount_ = value;
}

// repeated int32 cond_value_list = 4;
inline int ProtoBackActReward::cond_value_list_size() const {
  return cond_value_list_.size();
}
inline void ProtoBackActReward::clear_cond_value_list() {
  cond_value_list_.Clear();
}
inline ::google::protobuf::int32 ProtoBackActReward::cond_value_list(int index) const {
  return cond_value_list_.Get(index);
}
inline void ProtoBackActReward::set_cond_value_list(int index, ::google::protobuf::int32 value) {
  cond_value_list_.Set(index, value);
}
inline void ProtoBackActReward::add_cond_value_list(::google::protobuf::int32 value) {
  cond_value_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProtoBackActReward::cond_value_list() const {
  return cond_value_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProtoBackActReward::mutable_cond_value_list() {
  return &cond_value_list_;
}

// optional int32 restore_gold_rate = 5;
inline bool ProtoBackActReward::has_restore_gold_rate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoBackActReward::set_has_restore_gold_rate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoBackActReward::clear_has_restore_gold_rate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoBackActReward::clear_restore_gold_rate() {
  restore_gold_rate_ = 0;
  clear_has_restore_gold_rate();
}
inline ::google::protobuf::int32 ProtoBackActReward::restore_gold_rate() const {
  return restore_gold_rate_;
}
inline void ProtoBackActReward::set_restore_gold_rate(::google::protobuf::int32 value) {
  set_has_restore_gold_rate();
  restore_gold_rate_ = value;
}

// -------------------------------------------------------------------

// ProtoTransferClient

// optional int32 transfer_id = 1;
inline bool ProtoTransferClient::has_transfer_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoTransferClient::set_has_transfer_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoTransferClient::clear_has_transfer_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoTransferClient::clear_transfer_id() {
  transfer_id_ = 0;
  clear_has_transfer_id();
}
inline ::google::protobuf::int32 ProtoTransferClient::transfer_id() const {
  return transfer_id_;
}
inline void ProtoTransferClient::set_transfer_id(::google::protobuf::int32 value) {
  set_has_transfer_id();
  transfer_id_ = value;
}

// optional int32 transfer_lv = 2;
inline bool ProtoTransferClient::has_transfer_lv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoTransferClient::set_has_transfer_lv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoTransferClient::clear_has_transfer_lv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoTransferClient::clear_transfer_lv() {
  transfer_lv_ = 0;
  clear_has_transfer_lv();
}
inline ::google::protobuf::int32 ProtoTransferClient::transfer_lv() const {
  return transfer_lv_;
}
inline void ProtoTransferClient::set_transfer_lv(::google::protobuf::int32 value) {
  set_has_transfer_lv();
  transfer_lv_ = value;
}

// optional int32 is_active = 3;
inline bool ProtoTransferClient::has_is_active() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoTransferClient::set_has_is_active() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoTransferClient::clear_has_is_active() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoTransferClient::clear_is_active() {
  is_active_ = 0;
  clear_has_is_active();
}
inline ::google::protobuf::int32 ProtoTransferClient::is_active() const {
  return is_active_;
}
inline void ProtoTransferClient::set_is_active(::google::protobuf::int32 value) {
  set_has_is_active();
  is_active_ = value;
}

// optional int32 is_permanent = 4;
inline bool ProtoTransferClient::has_is_permanent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoTransferClient::set_has_is_permanent() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoTransferClient::clear_has_is_permanent() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoTransferClient::clear_is_permanent() {
  is_permanent_ = 0;
  clear_has_is_permanent();
}
inline ::google::protobuf::int32 ProtoTransferClient::is_permanent() const {
  return is_permanent_;
}
inline void ProtoTransferClient::set_is_permanent(::google::protobuf::int32 value) {
  set_has_is_permanent();
  is_permanent_ = value;
}

// optional int64 active_tick = 5;
inline bool ProtoTransferClient::has_active_tick() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoTransferClient::set_has_active_tick() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoTransferClient::clear_has_active_tick() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoTransferClient::clear_active_tick() {
  active_tick_ = GOOGLE_LONGLONG(0);
  clear_has_active_tick();
}
inline ::google::protobuf::int64 ProtoTransferClient::active_tick() const {
  return active_tick_;
}
inline void ProtoTransferClient::set_active_tick(::google::protobuf::int64 value) {
  set_has_active_tick();
  active_tick_ = value;
}

// optional int64 end_tick = 6;
inline bool ProtoTransferClient::has_end_tick() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoTransferClient::set_has_end_tick() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoTransferClient::clear_has_end_tick() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoTransferClient::clear_end_tick() {
  end_tick_ = GOOGLE_LONGLONG(0);
  clear_has_end_tick();
}
inline ::google::protobuf::int64 ProtoTransferClient::end_tick() const {
  return end_tick_;
}
inline void ProtoTransferClient::set_end_tick(::google::protobuf::int64 value) {
  set_has_end_tick();
  end_tick_ = value;
}

// optional int32 transfer_skill = 7;
inline bool ProtoTransferClient::has_transfer_skill() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoTransferClient::set_has_transfer_skill() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoTransferClient::clear_has_transfer_skill() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoTransferClient::clear_transfer_skill() {
  transfer_skill_ = 0;
  clear_has_transfer_skill();
}
inline ::google::protobuf::int32 ProtoTransferClient::transfer_skill() const {
  return transfer_skill_;
}
inline void ProtoTransferClient::set_transfer_skill(::google::protobuf::int32 value) {
  set_has_transfer_skill();
  transfer_skill_ = value;
}

// repeated .ProtoSkill skill = 8;
inline int ProtoTransferClient::skill_size() const {
  return skill_.size();
}
inline void ProtoTransferClient::clear_skill() {
  skill_.Clear();
}
inline const ::ProtoSkill& ProtoTransferClient::skill(int index) const {
  return skill_.Get(index);
}
inline ::ProtoSkill* ProtoTransferClient::mutable_skill(int index) {
  return skill_.Mutable(index);
}
inline ::ProtoSkill* ProtoTransferClient::add_skill() {
  return skill_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoSkill >&
ProtoTransferClient::skill() const {
  return skill_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoSkill >*
ProtoTransferClient::mutable_skill() {
  return &skill_;
}

// optional .ProtoFightPro prop = 9;
inline bool ProtoTransferClient::has_prop() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProtoTransferClient::set_has_prop() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProtoTransferClient::clear_has_prop() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProtoTransferClient::clear_prop() {
  if (prop_ != NULL) prop_->::ProtoFightPro::Clear();
  clear_has_prop();
}
inline const ::ProtoFightPro& ProtoTransferClient::prop() const {
  return prop_ != NULL ? *prop_ : *default_instance_->prop_;
}
inline ::ProtoFightPro* ProtoTransferClient::mutable_prop() {
  set_has_prop();
  if (prop_ == NULL) prop_ = new ::ProtoFightPro;
  return prop_;
}
inline ::ProtoFightPro* ProtoTransferClient::release_prop() {
  clear_has_prop();
  ::ProtoFightPro* temp = prop_;
  prop_ = NULL;
  return temp;
}

// optional int32 last = 10;
inline bool ProtoTransferClient::has_last() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProtoTransferClient::set_has_last() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ProtoTransferClient::clear_has_last() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ProtoTransferClient::clear_last() {
  last_ = 0;
  clear_has_last();
}
inline ::google::protobuf::int32 ProtoTransferClient::last() const {
  return last_;
}
inline void ProtoTransferClient::set_last(::google::protobuf::int32 value) {
  set_has_last();
  last_ = value;
}

// optional int32 cool = 11;
inline bool ProtoTransferClient::has_cool() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ProtoTransferClient::set_has_cool() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ProtoTransferClient::clear_has_cool() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ProtoTransferClient::clear_cool() {
  cool_ = 0;
  clear_has_cool();
}
inline ::google::protobuf::int32 ProtoTransferClient::cool() const {
  return cool_;
}
inline void ProtoTransferClient::set_cool(::google::protobuf::int32 value) {
  set_has_cool();
  cool_ = value;
}

// -------------------------------------------------------------------

// ProtoBackActRewardIndex

// optional int32 reward_id = 1;
inline bool ProtoBackActRewardIndex::has_reward_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoBackActRewardIndex::set_has_reward_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoBackActRewardIndex::clear_has_reward_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoBackActRewardIndex::clear_reward_id() {
  reward_id_ = 0;
  clear_has_reward_id();
}
inline ::google::protobuf::int32 ProtoBackActRewardIndex::reward_id() const {
  return reward_id_;
}
inline void ProtoBackActRewardIndex::set_reward_id(::google::protobuf::int32 value) {
  set_has_reward_id();
  reward_id_ = value;
}

// repeated int32 reward_value = 2;
inline int ProtoBackActRewardIndex::reward_value_size() const {
  return reward_value_.size();
}
inline void ProtoBackActRewardIndex::clear_reward_value() {
  reward_value_.Clear();
}
inline ::google::protobuf::int32 ProtoBackActRewardIndex::reward_value(int index) const {
  return reward_value_.Get(index);
}
inline void ProtoBackActRewardIndex::set_reward_value(int index, ::google::protobuf::int32 value) {
  reward_value_.Set(index, value);
}
inline void ProtoBackActRewardIndex::add_reward_value(::google::protobuf::int32 value) {
  reward_value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProtoBackActRewardIndex::reward_value() const {
  return reward_value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProtoBackActRewardIndex::mutable_reward_value() {
  return &reward_value_;
}

// -------------------------------------------------------------------

// PActTastList

// optional int32 task_id = 1;
inline bool PActTastList::has_task_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PActTastList::set_has_task_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PActTastList::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PActTastList::clear_task_id() {
  task_id_ = 0;
  clear_has_task_id();
}
inline ::google::protobuf::int32 PActTastList::task_id() const {
  return task_id_;
}
inline void PActTastList::set_task_id(::google::protobuf::int32 value) {
  set_has_task_id();
  task_id_ = value;
}

// optional int32 total_num = 2;
inline bool PActTastList::has_total_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PActTastList::set_has_total_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PActTastList::clear_has_total_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PActTastList::clear_total_num() {
  total_num_ = 0;
  clear_has_total_num();
}
inline ::google::protobuf::int32 PActTastList::total_num() const {
  return total_num_;
}
inline void PActTastList::set_total_num(::google::protobuf::int32 value) {
  set_has_total_num();
  total_num_ = value;
}

// optional int32 left_num = 3;
inline bool PActTastList::has_left_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PActTastList::set_has_left_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PActTastList::clear_has_left_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PActTastList::clear_left_num() {
  left_num_ = 0;
  clear_has_left_num();
}
inline ::google::protobuf::int32 PActTastList::left_num() const {
  return left_num_;
}
inline void PActTastList::set_left_num(::google::protobuf::int32 value) {
  set_has_left_num();
  left_num_ = value;
}

// -------------------------------------------------------------------

// MayRewardInfo

// optional int32 index = 1;
inline bool MayRewardInfo::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MayRewardInfo::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MayRewardInfo::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MayRewardInfo::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 MayRewardInfo::index() const {
  return index_;
}
inline void MayRewardInfo::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional string name = 2;
inline bool MayRewardInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MayRewardInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MayRewardInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MayRewardInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MayRewardInfo::name() const {
  return *name_;
}
inline void MayRewardInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MayRewardInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MayRewardInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MayRewardInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* MayRewardInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string content = 3;
inline bool MayRewardInfo::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MayRewardInfo::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MayRewardInfo::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MayRewardInfo::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& MayRewardInfo::content() const {
  return *content_;
}
inline void MayRewardInfo::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void MayRewardInfo::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void MayRewardInfo::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MayRewardInfo::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* MayRewardInfo::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated int32 cond = 4;
inline int MayRewardInfo::cond_size() const {
  return cond_.size();
}
inline void MayRewardInfo::clear_cond() {
  cond_.Clear();
}
inline ::google::protobuf::int32 MayRewardInfo::cond(int index) const {
  return cond_.Get(index);
}
inline void MayRewardInfo::set_cond(int index, ::google::protobuf::int32 value) {
  cond_.Set(index, value);
}
inline void MayRewardInfo::add_cond(::google::protobuf::int32 value) {
  cond_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MayRewardInfo::cond() const {
  return cond_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MayRewardInfo::mutable_cond() {
  return &cond_;
}

// optional int32 arrive = 5;
inline bool MayRewardInfo::has_arrive() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MayRewardInfo::set_has_arrive() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MayRewardInfo::clear_has_arrive() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MayRewardInfo::clear_arrive() {
  arrive_ = 0;
  clear_has_arrive();
}
inline ::google::protobuf::int32 MayRewardInfo::arrive() const {
  return arrive_;
}
inline void MayRewardInfo::set_arrive(::google::protobuf::int32 value) {
  set_has_arrive();
  arrive_ = value;
}

// optional int32 drawed = 6;
inline bool MayRewardInfo::has_drawed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MayRewardInfo::set_has_drawed() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MayRewardInfo::clear_has_drawed() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MayRewardInfo::clear_drawed() {
  drawed_ = 0;
  clear_has_drawed();
}
inline ::google::protobuf::int32 MayRewardInfo::drawed() const {
  return drawed_;
}
inline void MayRewardInfo::set_drawed(::google::protobuf::int32 value) {
  set_has_drawed();
  drawed_ = value;
}

// optional int32 draw_flag = 7;
inline bool MayRewardInfo::has_draw_flag() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MayRewardInfo::set_has_draw_flag() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MayRewardInfo::clear_has_draw_flag() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MayRewardInfo::clear_draw_flag() {
  draw_flag_ = 0;
  clear_has_draw_flag();
}
inline ::google::protobuf::int32 MayRewardInfo::draw_flag() const {
  return draw_flag_;
}
inline void MayRewardInfo::set_draw_flag(::google::protobuf::int32 value) {
  set_has_draw_flag();
  draw_flag_ = value;
}

// optional int32 pre_cost = 8;
inline bool MayRewardInfo::has_pre_cost() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MayRewardInfo::set_has_pre_cost() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MayRewardInfo::clear_has_pre_cost() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MayRewardInfo::clear_pre_cost() {
  pre_cost_ = 0;
  clear_has_pre_cost();
}
inline ::google::protobuf::int32 MayRewardInfo::pre_cost() const {
  return pre_cost_;
}
inline void MayRewardInfo::set_pre_cost(::google::protobuf::int32 value) {
  set_has_pre_cost();
  pre_cost_ = value;
}

// optional int32 now_cost = 9;
inline bool MayRewardInfo::has_now_cost() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MayRewardInfo::set_has_now_cost() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MayRewardInfo::clear_has_now_cost() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MayRewardInfo::clear_now_cost() {
  now_cost_ = 0;
  clear_has_now_cost();
}
inline ::google::protobuf::int32 MayRewardInfo::now_cost() const {
  return now_cost_;
}
inline void MayRewardInfo::set_now_cost(::google::protobuf::int32 value) {
  set_has_now_cost();
  now_cost_ = value;
}

// optional int32 times = 10;
inline bool MayRewardInfo::has_times() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MayRewardInfo::set_has_times() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MayRewardInfo::clear_has_times() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MayRewardInfo::clear_times() {
  times_ = 0;
  clear_has_times();
}
inline ::google::protobuf::int32 MayRewardInfo::times() const {
  return times_;
}
inline void MayRewardInfo::set_times(::google::protobuf::int32 value) {
  set_has_times();
  times_ = value;
}

// optional int32 reward_id = 11;
inline bool MayRewardInfo::has_reward_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MayRewardInfo::set_has_reward_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MayRewardInfo::clear_has_reward_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MayRewardInfo::clear_reward_id() {
  reward_id_ = 0;
  clear_has_reward_id();
}
inline ::google::protobuf::int32 MayRewardInfo::reward_id() const {
  return reward_id_;
}
inline void MayRewardInfo::set_reward_id(::google::protobuf::int32 value) {
  set_has_reward_id();
  reward_id_ = value;
}

// repeated .ProtoItemId change_item = 12;
inline int MayRewardInfo::change_item_size() const {
  return change_item_.size();
}
inline void MayRewardInfo::clear_change_item() {
  change_item_.Clear();
}
inline const ::ProtoItemId& MayRewardInfo::change_item(int index) const {
  return change_item_.Get(index);
}
inline ::ProtoItemId* MayRewardInfo::mutable_change_item(int index) {
  return change_item_.Mutable(index);
}
inline ::ProtoItemId* MayRewardInfo::add_change_item() {
  return change_item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoItemId >&
MayRewardInfo::change_item() const {
  return change_item_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoItemId >*
MayRewardInfo::mutable_change_item() {
  return &change_item_;
}

// optional int32 change_state = 13;
inline bool MayRewardInfo::has_change_state() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MayRewardInfo::set_has_change_state() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MayRewardInfo::clear_has_change_state() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MayRewardInfo::clear_change_state() {
  change_state_ = 0;
  clear_has_change_state();
}
inline ::google::protobuf::int32 MayRewardInfo::change_state() const {
  return change_state_;
}
inline void MayRewardInfo::set_change_state(::google::protobuf::int32 value) {
  set_has_change_state();
  change_state_ = value;
}

// -------------------------------------------------------------------

// ProtoLimitValue

// optional int32 value1 = 1;
inline bool ProtoLimitValue::has_value1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoLimitValue::set_has_value1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoLimitValue::clear_has_value1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoLimitValue::clear_value1() {
  value1_ = 0;
  clear_has_value1();
}
inline ::google::protobuf::int32 ProtoLimitValue::value1() const {
  return value1_;
}
inline void ProtoLimitValue::set_value1(::google::protobuf::int32 value) {
  set_has_value1();
  value1_ = value;
}

// optional int32 value2 = 2;
inline bool ProtoLimitValue::has_value2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoLimitValue::set_has_value2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoLimitValue::clear_has_value2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoLimitValue::clear_value2() {
  value2_ = 0;
  clear_has_value2();
}
inline ::google::protobuf::int32 ProtoLimitValue::value2() const {
  return value2_;
}
inline void ProtoLimitValue::set_value2(::google::protobuf::int32 value) {
  set_has_value2();
  value2_ = value;
}

// optional int32 value3 = 3;
inline bool ProtoLimitValue::has_value3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoLimitValue::set_has_value3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoLimitValue::clear_has_value3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoLimitValue::clear_value3() {
  value3_ = 0;
  clear_has_value3();
}
inline ::google::protobuf::int32 ProtoLimitValue::value3() const {
  return value3_;
}
inline void ProtoLimitValue::set_value3(::google::protobuf::int32 value) {
  set_has_value3();
  value3_ = value;
}

// optional int32 value4 = 4;
inline bool ProtoLimitValue::has_value4() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoLimitValue::set_has_value4() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoLimitValue::clear_has_value4() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoLimitValue::clear_value4() {
  value4_ = 0;
  clear_has_value4();
}
inline ::google::protobuf::int32 ProtoLimitValue::value4() const {
  return value4_;
}
inline void ProtoLimitValue::set_value4(::google::protobuf::int32 value) {
  set_has_value4();
  value4_ = value;
}

// optional int32 value5 = 5;
inline bool ProtoLimitValue::has_value5() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoLimitValue::set_has_value5() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoLimitValue::clear_has_value5() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoLimitValue::clear_value5() {
  value5_ = 0;
  clear_has_value5();
}
inline ::google::protobuf::int32 ProtoLimitValue::value5() const {
  return value5_;
}
inline void ProtoLimitValue::set_value5(::google::protobuf::int32 value) {
  set_has_value5();
  value5_ = value;
}

// -------------------------------------------------------------------

// ActOpenLimitTime

// optional int32 open_time = 1;
inline bool ActOpenLimitTime::has_open_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActOpenLimitTime::set_has_open_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActOpenLimitTime::clear_has_open_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActOpenLimitTime::clear_open_time() {
  open_time_ = 0;
  clear_has_open_time();
}
inline ::google::protobuf::int32 ActOpenLimitTime::open_time() const {
  return open_time_;
}
inline void ActOpenLimitTime::set_open_time(::google::protobuf::int32 value) {
  set_has_open_time();
  open_time_ = value;
}

// optional int32 open_state = 2;
inline bool ActOpenLimitTime::has_open_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActOpenLimitTime::set_has_open_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActOpenLimitTime::clear_has_open_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActOpenLimitTime::clear_open_state() {
  open_state_ = 0;
  clear_has_open_state();
}
inline ::google::protobuf::int32 ActOpenLimitTime::open_state() const {
  return open_state_;
}
inline void ActOpenLimitTime::set_open_state(::google::protobuf::int32 value) {
  set_has_open_state();
  open_state_ = value;
}

// -------------------------------------------------------------------

// ProtoRedPacketInfo

// optional string player_name = 1;
inline bool ProtoRedPacketInfo::has_player_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoRedPacketInfo::set_has_player_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoRedPacketInfo::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoRedPacketInfo::clear_player_name() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    player_name_->clear();
  }
  clear_has_player_name();
}
inline const ::std::string& ProtoRedPacketInfo::player_name() const {
  return *player_name_;
}
inline void ProtoRedPacketInfo::set_player_name(const ::std::string& value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void ProtoRedPacketInfo::set_player_name(const char* value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void ProtoRedPacketInfo::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoRedPacketInfo::mutable_player_name() {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  return player_name_;
}
inline ::std::string* ProtoRedPacketInfo::release_player_name() {
  clear_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_name_;
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 money = 2;
inline bool ProtoRedPacketInfo::has_money() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoRedPacketInfo::set_has_money() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoRedPacketInfo::clear_has_money() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoRedPacketInfo::clear_money() {
  money_ = 0;
  clear_has_money();
}
inline ::google::protobuf::int32 ProtoRedPacketInfo::money() const {
  return money_;
}
inline void ProtoRedPacketInfo::set_money(::google::protobuf::int32 value) {
  set_has_money();
  money_ = value;
}

// -------------------------------------------------------------------

// ProtoRunRole

// optional int64 role_id = 1;
inline bool ProtoRunRole::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoRunRole::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoRunRole::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoRunRole::clear_role_id() {
  role_id_ = GOOGLE_LONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::int64 ProtoRunRole::role_id() const {
  return role_id_;
}
inline void ProtoRunRole::set_role_id(::google::protobuf::int64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string role_name = 2;
inline bool ProtoRunRole::has_role_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoRunRole::set_has_role_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoRunRole::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoRunRole::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& ProtoRunRole::role_name() const {
  return *role_name_;
}
inline void ProtoRunRole::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoRunRole::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoRunRole::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoRunRole::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* ProtoRunRole::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 role_sex = 3;
inline bool ProtoRunRole::has_role_sex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoRunRole::set_has_role_sex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoRunRole::clear_has_role_sex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoRunRole::clear_role_sex() {
  role_sex_ = 0;
  clear_has_role_sex();
}
inline ::google::protobuf::int32 ProtoRunRole::role_sex() const {
  return role_sex_;
}
inline void ProtoRunRole::set_role_sex(::google::protobuf::int32 value) {
  set_has_role_sex();
  role_sex_ = value;
}

// optional int32 value = 4;
inline bool ProtoRunRole::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoRunRole::set_has_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoRunRole::clear_has_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoRunRole::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 ProtoRunRole::value() const {
  return value_;
}
inline void ProtoRunRole::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// ProtoAllRedActInfo

// optional int32 state = 1;
inline bool ProtoAllRedActInfo::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoAllRedActInfo::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoAllRedActInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoAllRedActInfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 ProtoAllRedActInfo::state() const {
  return state_;
}
inline void ProtoAllRedActInfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional int32 tick = 2;
inline bool ProtoAllRedActInfo::has_tick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoAllRedActInfo::set_has_tick() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoAllRedActInfo::clear_has_tick() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoAllRedActInfo::clear_tick() {
  tick_ = 0;
  clear_has_tick();
}
inline ::google::protobuf::int32 ProtoAllRedActInfo::tick() const {
  return tick_;
}
inline void ProtoAllRedActInfo::set_tick(::google::protobuf::int32 value) {
  set_has_tick();
  tick_ = value;
}

// optional int32 money = 3;
inline bool ProtoAllRedActInfo::has_money() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoAllRedActInfo::set_has_money() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoAllRedActInfo::clear_has_money() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoAllRedActInfo::clear_money() {
  money_ = 0;
  clear_has_money();
}
inline ::google::protobuf::int32 ProtoAllRedActInfo::money() const {
  return money_;
}
inline void ProtoAllRedActInfo::set_money(::google::protobuf::int32 value) {
  set_has_money();
  money_ = value;
}

// -------------------------------------------------------------------

// ProtoTrvlBaseRole

// optional int64 role_id = 1;
inline bool ProtoTrvlBaseRole::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoTrvlBaseRole::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoTrvlBaseRole::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoTrvlBaseRole::clear_role_id() {
  role_id_ = GOOGLE_LONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::int64 ProtoTrvlBaseRole::role_id() const {
  return role_id_;
}
inline void ProtoTrvlBaseRole::set_role_id(::google::protobuf::int64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string role_name = 2;
inline bool ProtoTrvlBaseRole::has_role_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoTrvlBaseRole::set_has_role_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoTrvlBaseRole::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoTrvlBaseRole::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& ProtoTrvlBaseRole::role_name() const {
  return *role_name_;
}
inline void ProtoTrvlBaseRole::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoTrvlBaseRole::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoTrvlBaseRole::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoTrvlBaseRole::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* ProtoTrvlBaseRole::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string prev = 3;
inline bool ProtoTrvlBaseRole::has_prev() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoTrvlBaseRole::set_has_prev() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoTrvlBaseRole::clear_has_prev() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoTrvlBaseRole::clear_prev() {
  if (prev_ != &::google::protobuf::internal::kEmptyString) {
    prev_->clear();
  }
  clear_has_prev();
}
inline const ::std::string& ProtoTrvlBaseRole::prev() const {
  return *prev_;
}
inline void ProtoTrvlBaseRole::set_prev(const ::std::string& value) {
  set_has_prev();
  if (prev_ == &::google::protobuf::internal::kEmptyString) {
    prev_ = new ::std::string;
  }
  prev_->assign(value);
}
inline void ProtoTrvlBaseRole::set_prev(const char* value) {
  set_has_prev();
  if (prev_ == &::google::protobuf::internal::kEmptyString) {
    prev_ = new ::std::string;
  }
  prev_->assign(value);
}
inline void ProtoTrvlBaseRole::set_prev(const char* value, size_t size) {
  set_has_prev();
  if (prev_ == &::google::protobuf::internal::kEmptyString) {
    prev_ = new ::std::string;
  }
  prev_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoTrvlBaseRole::mutable_prev() {
  set_has_prev();
  if (prev_ == &::google::protobuf::internal::kEmptyString) {
    prev_ = new ::std::string;
  }
  return prev_;
}
inline ::std::string* ProtoTrvlBaseRole::release_prev() {
  clear_has_prev();
  if (prev_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = prev_;
    prev_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 sex = 4;
inline bool ProtoTrvlBaseRole::has_sex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoTrvlBaseRole::set_has_sex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoTrvlBaseRole::clear_has_sex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoTrvlBaseRole::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 ProtoTrvlBaseRole::sex() const {
  return sex_;
}
inline void ProtoTrvlBaseRole::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// optional int32 career = 5;
inline bool ProtoTrvlBaseRole::has_career() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoTrvlBaseRole::set_has_career() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoTrvlBaseRole::clear_has_career() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoTrvlBaseRole::clear_career() {
  career_ = 0;
  clear_has_career();
}
inline ::google::protobuf::int32 ProtoTrvlBaseRole::career() const {
  return career_;
}
inline void ProtoTrvlBaseRole::set_career(::google::protobuf::int32 value) {
  set_has_career();
  career_ = value;
}

// optional int32 level = 6;
inline bool ProtoTrvlBaseRole::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoTrvlBaseRole::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoTrvlBaseRole::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoTrvlBaseRole::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ProtoTrvlBaseRole::level() const {
  return level_;
}
inline void ProtoTrvlBaseRole::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 force = 7;
inline bool ProtoTrvlBaseRole::has_force() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoTrvlBaseRole::set_has_force() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoTrvlBaseRole::clear_has_force() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoTrvlBaseRole::clear_force() {
  force_ = 0;
  clear_has_force();
}
inline ::google::protobuf::int32 ProtoTrvlBaseRole::force() const {
  return force_;
}
inline void ProtoTrvlBaseRole::set_force(::google::protobuf::int32 value) {
  set_has_force();
  force_ = value;
}

// optional int32 weapon = 8;
inline bool ProtoTrvlBaseRole::has_weapon() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoTrvlBaseRole::set_has_weapon() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoTrvlBaseRole::clear_has_weapon() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoTrvlBaseRole::clear_weapon() {
  weapon_ = 0;
  clear_has_weapon();
}
inline ::google::protobuf::int32 ProtoTrvlBaseRole::weapon() const {
  return weapon_;
}
inline void ProtoTrvlBaseRole::set_weapon(::google::protobuf::int32 value) {
  set_has_weapon();
  weapon_ = value;
}

// optional int32 clothes = 9;
inline bool ProtoTrvlBaseRole::has_clothes() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProtoTrvlBaseRole::set_has_clothes() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProtoTrvlBaseRole::clear_has_clothes() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProtoTrvlBaseRole::clear_clothes() {
  clothes_ = 0;
  clear_has_clothes();
}
inline ::google::protobuf::int32 ProtoTrvlBaseRole::clothes() const {
  return clothes_;
}
inline void ProtoTrvlBaseRole::set_clothes(::google::protobuf::int32 value) {
  set_has_clothes();
  clothes_ = value;
}

// optional int32 fashion_weapon = 10;
inline bool ProtoTrvlBaseRole::has_fashion_weapon() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProtoTrvlBaseRole::set_has_fashion_weapon() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ProtoTrvlBaseRole::clear_has_fashion_weapon() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ProtoTrvlBaseRole::clear_fashion_weapon() {
  fashion_weapon_ = 0;
  clear_has_fashion_weapon();
}
inline ::google::protobuf::int32 ProtoTrvlBaseRole::fashion_weapon() const {
  return fashion_weapon_;
}
inline void ProtoTrvlBaseRole::set_fashion_weapon(::google::protobuf::int32 value) {
  set_has_fashion_weapon();
  fashion_weapon_ = value;
}

// optional int32 fashion_clothes = 11;
inline bool ProtoTrvlBaseRole::has_fashion_clothes() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ProtoTrvlBaseRole::set_has_fashion_clothes() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ProtoTrvlBaseRole::clear_has_fashion_clothes() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ProtoTrvlBaseRole::clear_fashion_clothes() {
  fashion_clothes_ = 0;
  clear_has_fashion_clothes();
}
inline ::google::protobuf::int32 ProtoTrvlBaseRole::fashion_clothes() const {
  return fashion_clothes_;
}
inline void ProtoTrvlBaseRole::set_fashion_clothes(::google::protobuf::int32 value) {
  set_has_fashion_clothes();
  fashion_clothes_ = value;
}

// optional int32 wing_level = 12;
inline bool ProtoTrvlBaseRole::has_wing_level() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ProtoTrvlBaseRole::set_has_wing_level() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ProtoTrvlBaseRole::clear_has_wing_level() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ProtoTrvlBaseRole::clear_wing_level() {
  wing_level_ = 0;
  clear_has_wing_level();
}
inline ::google::protobuf::int32 ProtoTrvlBaseRole::wing_level() const {
  return wing_level_;
}
inline void ProtoTrvlBaseRole::set_wing_level(::google::protobuf::int32 value) {
  set_has_wing_level();
  wing_level_ = value;
}

// optional int32 solider_level = 13;
inline bool ProtoTrvlBaseRole::has_solider_level() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ProtoTrvlBaseRole::set_has_solider_level() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ProtoTrvlBaseRole::clear_has_solider_level() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ProtoTrvlBaseRole::clear_solider_level() {
  solider_level_ = 0;
  clear_has_solider_level();
}
inline ::google::protobuf::int32 ProtoTrvlBaseRole::solider_level() const {
  return solider_level_;
}
inline void ProtoTrvlBaseRole::set_solider_level(::google::protobuf::int32 value) {
  set_has_solider_level();
  solider_level_ = value;
}

// optional int32 vip_type = 14;
inline bool ProtoTrvlBaseRole::has_vip_type() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ProtoTrvlBaseRole::set_has_vip_type() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ProtoTrvlBaseRole::clear_has_vip_type() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ProtoTrvlBaseRole::clear_vip_type() {
  vip_type_ = 0;
  clear_has_vip_type();
}
inline ::google::protobuf::int32 ProtoTrvlBaseRole::vip_type() const {
  return vip_type_;
}
inline void ProtoTrvlBaseRole::set_vip_type(::google::protobuf::int32 value) {
  set_has_vip_type();
  vip_type_ = value;
}

// optional int32 mount_sort = 15;
inline bool ProtoTrvlBaseRole::has_mount_sort() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ProtoTrvlBaseRole::set_has_mount_sort() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ProtoTrvlBaseRole::clear_has_mount_sort() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ProtoTrvlBaseRole::clear_mount_sort() {
  mount_sort_ = 0;
  clear_has_mount_sort();
}
inline ::google::protobuf::int32 ProtoTrvlBaseRole::mount_sort() const {
  return mount_sort_;
}
inline void ProtoTrvlBaseRole::set_mount_sort(::google::protobuf::int32 value) {
  set_has_mount_sort();
  mount_sort_ = value;
}

// optional int32 sword_pool = 16;
inline bool ProtoTrvlBaseRole::has_sword_pool() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ProtoTrvlBaseRole::set_has_sword_pool() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ProtoTrvlBaseRole::clear_has_sword_pool() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ProtoTrvlBaseRole::clear_sword_pool() {
  sword_pool_ = 0;
  clear_has_sword_pool();
}
inline ::google::protobuf::int32 ProtoTrvlBaseRole::sword_pool() const {
  return sword_pool_;
}
inline void ProtoTrvlBaseRole::set_sword_pool(::google::protobuf::int32 value) {
  set_has_sword_pool();
  sword_pool_ = value;
}

// optional int32 tian_gang = 17;
inline bool ProtoTrvlBaseRole::has_tian_gang() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ProtoTrvlBaseRole::set_has_tian_gang() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ProtoTrvlBaseRole::clear_has_tian_gang() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ProtoTrvlBaseRole::clear_tian_gang() {
  tian_gang_ = 0;
  clear_has_tian_gang();
}
inline ::google::protobuf::int32 ProtoTrvlBaseRole::tian_gang() const {
  return tian_gang_;
}
inline void ProtoTrvlBaseRole::set_tian_gang(::google::protobuf::int32 value) {
  set_has_tian_gang();
  tian_gang_ = value;
}

// optional int32 fashion_id = 18;
inline bool ProtoTrvlBaseRole::has_fashion_id() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ProtoTrvlBaseRole::set_has_fashion_id() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ProtoTrvlBaseRole::clear_has_fashion_id() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ProtoTrvlBaseRole::clear_fashion_id() {
  fashion_id_ = 0;
  clear_has_fashion_id();
}
inline ::google::protobuf::int32 ProtoTrvlBaseRole::fashion_id() const {
  return fashion_id_;
}
inline void ProtoTrvlBaseRole::set_fashion_id(::google::protobuf::int32 value) {
  set_has_fashion_id();
  fashion_id_ = value;
}

// optional int32 fashion_color = 19;
inline bool ProtoTrvlBaseRole::has_fashion_color() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ProtoTrvlBaseRole::set_has_fashion_color() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ProtoTrvlBaseRole::clear_has_fashion_color() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ProtoTrvlBaseRole::clear_fashion_color() {
  fashion_color_ = 0;
  clear_has_fashion_color();
}
inline ::google::protobuf::int32 ProtoTrvlBaseRole::fashion_color() const {
  return fashion_color_;
}
inline void ProtoTrvlBaseRole::set_fashion_color(::google::protobuf::int32 value) {
  set_has_fashion_color();
  fashion_color_ = value;
}

// -------------------------------------------------------------------

// ProtoMayFashionInfo

// optional int32 liveness = 1;
inline bool ProtoMayFashionInfo::has_liveness() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoMayFashionInfo::set_has_liveness() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoMayFashionInfo::clear_has_liveness() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoMayFashionInfo::clear_liveness() {
  liveness_ = 0;
  clear_has_liveness();
}
inline ::google::protobuf::int32 ProtoMayFashionInfo::liveness() const {
  return liveness_;
}
inline void ProtoMayFashionInfo::set_liveness(::google::protobuf::int32 value) {
  set_has_liveness();
  liveness_ = value;
}

// repeated .ProtoItemId item = 2;
inline int ProtoMayFashionInfo::item_size() const {
  return item_.size();
}
inline void ProtoMayFashionInfo::clear_item() {
  item_.Clear();
}
inline const ::ProtoItemId& ProtoMayFashionInfo::item(int index) const {
  return item_.Get(index);
}
inline ::ProtoItemId* ProtoMayFashionInfo::mutable_item(int index) {
  return item_.Mutable(index);
}
inline ::ProtoItemId* ProtoMayFashionInfo::add_item() {
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoItemId >&
ProtoMayFashionInfo::item() const {
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoItemId >*
ProtoMayFashionInfo::mutable_item() {
  return &item_;
}

// optional int32 one_times_money = 3;
inline bool ProtoMayFashionInfo::has_one_times_money() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoMayFashionInfo::set_has_one_times_money() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoMayFashionInfo::clear_has_one_times_money() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoMayFashionInfo::clear_one_times_money() {
  one_times_money_ = 0;
  clear_has_one_times_money();
}
inline ::google::protobuf::int32 ProtoMayFashionInfo::one_times_money() const {
  return one_times_money_;
}
inline void ProtoMayFashionInfo::set_one_times_money(::google::protobuf::int32 value) {
  set_has_one_times_money();
  one_times_money_ = value;
}

// optional int32 ten_times_money = 4;
inline bool ProtoMayFashionInfo::has_ten_times_money() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoMayFashionInfo::set_has_ten_times_money() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoMayFashionInfo::clear_has_ten_times_money() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoMayFashionInfo::clear_ten_times_money() {
  ten_times_money_ = 0;
  clear_has_ten_times_money();
}
inline ::google::protobuf::int32 ProtoMayFashionInfo::ten_times_money() const {
  return ten_times_money_;
}
inline void ProtoMayFashionInfo::set_ten_times_money(::google::protobuf::int32 value) {
  set_has_ten_times_money();
  ten_times_money_ = value;
}

// -------------------------------------------------------------------

// ProtoTrvlBattleRank

// optional int32 rank = 1;
inline bool ProtoTrvlBattleRank::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoTrvlBattleRank::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoTrvlBattleRank::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoTrvlBattleRank::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 ProtoTrvlBattleRank::rank() const {
  return rank_;
}
inline void ProtoTrvlBattleRank::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional int64 role_id = 2;
inline bool ProtoTrvlBattleRank::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoTrvlBattleRank::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoTrvlBattleRank::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoTrvlBattleRank::clear_role_id() {
  role_id_ = GOOGLE_LONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::int64 ProtoTrvlBattleRank::role_id() const {
  return role_id_;
}
inline void ProtoTrvlBattleRank::set_role_id(::google::protobuf::int64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional int32 score = 3;
inline bool ProtoTrvlBattleRank::has_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoTrvlBattleRank::set_has_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoTrvlBattleRank::clear_has_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoTrvlBattleRank::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 ProtoTrvlBattleRank::score() const {
  return score_;
}
inline void ProtoTrvlBattleRank::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// optional int32 kill_amount = 4;
inline bool ProtoTrvlBattleRank::has_kill_amount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoTrvlBattleRank::set_has_kill_amount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoTrvlBattleRank::clear_has_kill_amount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoTrvlBattleRank::clear_kill_amount() {
  kill_amount_ = 0;
  clear_has_kill_amount();
}
inline ::google::protobuf::int32 ProtoTrvlBattleRank::kill_amount() const {
  return kill_amount_;
}
inline void ProtoTrvlBattleRank::set_kill_amount(::google::protobuf::int32 value) {
  set_has_kill_amount();
  kill_amount_ = value;
}

// optional int32 force = 5;
inline bool ProtoTrvlBattleRank::has_force() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoTrvlBattleRank::set_has_force() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoTrvlBattleRank::clear_has_force() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoTrvlBattleRank::clear_force() {
  force_ = 0;
  clear_has_force();
}
inline ::google::protobuf::int32 ProtoTrvlBattleRank::force() const {
  return force_;
}
inline void ProtoTrvlBattleRank::set_force(::google::protobuf::int32 value) {
  set_has_force();
  force_ = value;
}

// optional int32 tick = 6;
inline bool ProtoTrvlBattleRank::has_tick() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoTrvlBattleRank::set_has_tick() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoTrvlBattleRank::clear_has_tick() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoTrvlBattleRank::clear_tick() {
  tick_ = 0;
  clear_has_tick();
}
inline ::google::protobuf::int32 ProtoTrvlBattleRank::tick() const {
  return tick_;
}
inline void ProtoTrvlBattleRank::set_tick(::google::protobuf::int32 value) {
  set_has_tick();
  tick_ = value;
}

// optional string role_name = 7;
inline bool ProtoTrvlBattleRank::has_role_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoTrvlBattleRank::set_has_role_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoTrvlBattleRank::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoTrvlBattleRank::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& ProtoTrvlBattleRank::role_name() const {
  return *role_name_;
}
inline void ProtoTrvlBattleRank::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoTrvlBattleRank::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoTrvlBattleRank::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoTrvlBattleRank::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* ProtoTrvlBattleRank::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 role_sex = 8;
inline bool ProtoTrvlBattleRank::has_role_sex() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoTrvlBattleRank::set_has_role_sex() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoTrvlBattleRank::clear_has_role_sex() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoTrvlBattleRank::clear_role_sex() {
  role_sex_ = 0;
  clear_has_role_sex();
}
inline ::google::protobuf::int32 ProtoTrvlBattleRank::role_sex() const {
  return role_sex_;
}
inline void ProtoTrvlBattleRank::set_role_sex(::google::protobuf::int32 value) {
  set_has_role_sex();
  role_sex_ = value;
}

// -------------------------------------------------------------------

// ProtoGemInfo

// optional int32 gem_id = 1;
inline bool ProtoGemInfo::has_gem_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoGemInfo::set_has_gem_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoGemInfo::clear_has_gem_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoGemInfo::clear_gem_id() {
  gem_id_ = 0;
  clear_has_gem_id();
}
inline ::google::protobuf::int32 ProtoGemInfo::gem_id() const {
  return gem_id_;
}
inline void ProtoGemInfo::set_gem_id(::google::protobuf::int32 value) {
  set_has_gem_id();
  gem_id_ = value;
}

// optional int32 gem_amount = 2;
inline bool ProtoGemInfo::has_gem_amount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoGemInfo::set_has_gem_amount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoGemInfo::clear_has_gem_amount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoGemInfo::clear_gem_amount() {
  gem_amount_ = 0;
  clear_has_gem_amount();
}
inline ::google::protobuf::int32 ProtoGemInfo::gem_amount() const {
  return gem_amount_;
}
inline void ProtoGemInfo::set_gem_amount(::google::protobuf::int32 value) {
  set_has_gem_amount();
  gem_amount_ = value;
}

// -------------------------------------------------------------------

// ProtoTrvlWbossMail

// optional int32 reward_id = 1;
inline bool ProtoTrvlWbossMail::has_reward_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoTrvlWbossMail::set_has_reward_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoTrvlWbossMail::clear_has_reward_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoTrvlWbossMail::clear_reward_id() {
  reward_id_ = 0;
  clear_has_reward_id();
}
inline ::google::protobuf::int32 ProtoTrvlWbossMail::reward_id() const {
  return reward_id_;
}
inline void ProtoTrvlWbossMail::set_reward_id(::google::protobuf::int32 value) {
  set_has_reward_id();
  reward_id_ = value;
}

// optional int64 role_id = 2;
inline bool ProtoTrvlWbossMail::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoTrvlWbossMail::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoTrvlWbossMail::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoTrvlWbossMail::clear_role_id() {
  role_id_ = GOOGLE_LONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::int64 ProtoTrvlWbossMail::role_id() const {
  return role_id_;
}
inline void ProtoTrvlWbossMail::set_role_id(::google::protobuf::int64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional int32 rank = 3;
inline bool ProtoTrvlWbossMail::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoTrvlWbossMail::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoTrvlWbossMail::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoTrvlWbossMail::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 ProtoTrvlWbossMail::rank() const {
  return rank_;
}
inline void ProtoTrvlWbossMail::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// -------------------------------------------------------------------

// MoldingNature

// optional int32 value = 1;
inline bool MoldingNature::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MoldingNature::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MoldingNature::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MoldingNature::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 MoldingNature::value() const {
  return value_;
}
inline void MoldingNature::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// optional int32 level = 2;
inline bool MoldingNature::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MoldingNature::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MoldingNature::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MoldingNature::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 MoldingNature::level() const {
  return level_;
}
inline void MoldingNature::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 cur_schedule = 3;
inline bool MoldingNature::has_cur_schedule() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MoldingNature::set_has_cur_schedule() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MoldingNature::clear_has_cur_schedule() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MoldingNature::clear_cur_schedule() {
  cur_schedule_ = 0;
  clear_has_cur_schedule();
}
inline ::google::protobuf::int32 MoldingNature::cur_schedule() const {
  return cur_schedule_;
}
inline void MoldingNature::set_cur_schedule(::google::protobuf::int32 value) {
  set_has_cur_schedule();
  cur_schedule_ = value;
}

// optional int32 max_schedule = 4;
inline bool MoldingNature::has_max_schedule() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MoldingNature::set_has_max_schedule() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MoldingNature::clear_has_max_schedule() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MoldingNature::clear_max_schedule() {
  max_schedule_ = 0;
  clear_has_max_schedule();
}
inline ::google::protobuf::int32 MoldingNature::max_schedule() const {
  return max_schedule_;
}
inline void MoldingNature::set_max_schedule(::google::protobuf::int32 value) {
  set_has_max_schedule();
  max_schedule_ = value;
}

// optional int32 nature_id = 5;
inline bool MoldingNature::has_nature_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MoldingNature::set_has_nature_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MoldingNature::clear_has_nature_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MoldingNature::clear_nature_id() {
  nature_id_ = 0;
  clear_has_nature_id();
}
inline ::google::protobuf::int32 MoldingNature::nature_id() const {
  return nature_id_;
}
inline void MoldingNature::set_nature_id(::google::protobuf::int32 value) {
  set_has_nature_id();
  nature_id_ = value;
}

// -------------------------------------------------------------------

// ProtoCleanInfo

// optional int32 script_sort = 1;
inline bool ProtoCleanInfo::has_script_sort() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoCleanInfo::set_has_script_sort() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoCleanInfo::clear_has_script_sort() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoCleanInfo::clear_script_sort() {
  script_sort_ = 0;
  clear_has_script_sort();
}
inline ::google::protobuf::int32 ProtoCleanInfo::script_sort() const {
  return script_sort_;
}
inline void ProtoCleanInfo::set_script_sort(::google::protobuf::int32 value) {
  set_has_script_sort();
  script_sort_ = value;
}

// repeated .ProtoItem item_list = 2;
inline int ProtoCleanInfo::item_list_size() const {
  return item_list_.size();
}
inline void ProtoCleanInfo::clear_item_list() {
  item_list_.Clear();
}
inline const ::ProtoItem& ProtoCleanInfo::item_list(int index) const {
  return item_list_.Get(index);
}
inline ::ProtoItem* ProtoCleanInfo::mutable_item_list(int index) {
  return item_list_.Mutable(index);
}
inline ::ProtoItem* ProtoCleanInfo::add_item_list() {
  return item_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoItem >&
ProtoCleanInfo::item_list() const {
  return item_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoItem >*
ProtoCleanInfo::mutable_item_list() {
  return &item_list_;
}

// repeated .ProtoItem drop_list = 3;
inline int ProtoCleanInfo::drop_list_size() const {
  return drop_list_.size();
}
inline void ProtoCleanInfo::clear_drop_list() {
  drop_list_.Clear();
}
inline const ::ProtoItem& ProtoCleanInfo::drop_list(int index) const {
  return drop_list_.Get(index);
}
inline ::ProtoItem* ProtoCleanInfo::mutable_drop_list(int index) {
  return drop_list_.Mutable(index);
}
inline ::ProtoItem* ProtoCleanInfo::add_drop_list() {
  return drop_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoItem >&
ProtoCleanInfo::drop_list() const {
  return drop_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoItem >*
ProtoCleanInfo::mutable_drop_list() {
  return &drop_list_;
}

// -------------------------------------------------------------------

// FishDetail

// optional int32 type = 1;
inline bool FishDetail::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FishDetail::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FishDetail::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FishDetail::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 FishDetail::type() const {
  return type_;
}
inline void FishDetail::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 layer = 2;
inline bool FishDetail::has_layer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FishDetail::set_has_layer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FishDetail::clear_has_layer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FishDetail::clear_layer() {
  layer_ = 0;
  clear_has_layer();
}
inline ::google::protobuf::int32 FishDetail::layer() const {
  return layer_;
}
inline void FishDetail::set_layer(::google::protobuf::int32 value) {
  set_has_layer();
  layer_ = value;
}

// optional int32 flag = 3;
inline bool FishDetail::has_flag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FishDetail::set_has_flag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FishDetail::clear_has_flag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FishDetail::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 FishDetail::flag() const {
  return flag_;
}
inline void FishDetail::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
}

// optional int32 pos_x = 4;
inline bool FishDetail::has_pos_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FishDetail::set_has_pos_x() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FishDetail::clear_has_pos_x() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FishDetail::clear_pos_x() {
  pos_x_ = 0;
  clear_has_pos_x();
}
inline ::google::protobuf::int32 FishDetail::pos_x() const {
  return pos_x_;
}
inline void FishDetail::set_pos_x(::google::protobuf::int32 value) {
  set_has_pos_x();
  pos_x_ = value;
}

// optional int32 pos_y = 5;
inline bool FishDetail::has_pos_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FishDetail::set_has_pos_y() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FishDetail::clear_has_pos_y() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FishDetail::clear_pos_y() {
  pos_y_ = 0;
  clear_has_pos_y();
}
inline ::google::protobuf::int32 FishDetail::pos_y() const {
  return pos_y_;
}
inline void FishDetail::set_pos_y(::google::protobuf::int32 value) {
  set_has_pos_y();
  pos_y_ = value;
}

// repeated int32 item_id = 6;
inline int FishDetail::item_id_size() const {
  return item_id_.size();
}
inline void FishDetail::clear_item_id() {
  item_id_.Clear();
}
inline ::google::protobuf::int32 FishDetail::item_id(int index) const {
  return item_id_.Get(index);
}
inline void FishDetail::set_item_id(int index, ::google::protobuf::int32 value) {
  item_id_.Set(index, value);
}
inline void FishDetail::add_item_id(::google::protobuf::int32 value) {
  item_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FishDetail::item_id() const {
  return item_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FishDetail::mutable_item_id() {
  return &item_id_;
}

// repeated int32 item_amount = 7;
inline int FishDetail::item_amount_size() const {
  return item_amount_.size();
}
inline void FishDetail::clear_item_amount() {
  item_amount_.Clear();
}
inline ::google::protobuf::int32 FishDetail::item_amount(int index) const {
  return item_amount_.Get(index);
}
inline void FishDetail::set_item_amount(int index, ::google::protobuf::int32 value) {
  item_amount_.Set(index, value);
}
inline void FishDetail::add_item_amount(::google::protobuf::int32 value) {
  item_amount_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FishDetail::item_amount() const {
  return item_amount_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FishDetail::mutable_item_amount() {
  return &item_amount_;
}

// -------------------------------------------------------------------

// ProtoTeamForceInfo

// optional int64 team_id = 1;
inline bool ProtoTeamForceInfo::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoTeamForceInfo::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoTeamForceInfo::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoTeamForceInfo::clear_team_id() {
  team_id_ = GOOGLE_LONGLONG(0);
  clear_has_team_id();
}
inline ::google::protobuf::int64 ProtoTeamForceInfo::team_id() const {
  return team_id_;
}
inline void ProtoTeamForceInfo::set_team_id(::google::protobuf::int64 value) {
  set_has_team_id();
  team_id_ = value;
}

// optional int64 role_id = 2;
inline bool ProtoTeamForceInfo::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoTeamForceInfo::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoTeamForceInfo::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoTeamForceInfo::clear_role_id() {
  role_id_ = GOOGLE_LONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::int64 ProtoTeamForceInfo::role_id() const {
  return role_id_;
}
inline void ProtoTeamForceInfo::set_role_id(::google::protobuf::int64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional int32 force = 3;
inline bool ProtoTeamForceInfo::has_force() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoTeamForceInfo::set_has_force() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoTeamForceInfo::clear_has_force() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoTeamForceInfo::clear_force() {
  force_ = 0;
  clear_has_force();
}
inline ::google::protobuf::int32 ProtoTeamForceInfo::force() const {
  return force_;
}
inline void ProtoTeamForceInfo::set_force(::google::protobuf::int32 value) {
  set_has_force();
  force_ = value;
}

// optional int32 level = 4;
inline bool ProtoTeamForceInfo::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoTeamForceInfo::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoTeamForceInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoTeamForceInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ProtoTeamForceInfo::level() const {
  return level_;
}
inline void ProtoTeamForceInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// ProtoItemExchangeTimes

// optional int32 item_id = 1;
inline bool ProtoItemExchangeTimes::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoItemExchangeTimes::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoItemExchangeTimes::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoItemExchangeTimes::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
}
inline ::google::protobuf::int32 ProtoItemExchangeTimes::item_id() const {
  return item_id_;
}
inline void ProtoItemExchangeTimes::set_item_id(::google::protobuf::int32 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional int32 times = 2;
inline bool ProtoItemExchangeTimes::has_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoItemExchangeTimes::set_has_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoItemExchangeTimes::clear_has_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoItemExchangeTimes::clear_times() {
  times_ = 0;
  clear_has_times();
}
inline ::google::protobuf::int32 ProtoItemExchangeTimes::times() const {
  return times_;
}
inline void ProtoItemExchangeTimes::set_times(::google::protobuf::int32 value) {
  set_has_times();
  times_ = value;
}

// -------------------------------------------------------------------

// ProtoPeakQualityInfo

// optional int32 score = 1;
inline bool ProtoPeakQualityInfo::has_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoPeakQualityInfo::set_has_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoPeakQualityInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoPeakQualityInfo::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 ProtoPeakQualityInfo::score() const {
  return score_;
}
inline void ProtoPeakQualityInfo::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// optional int32 rank = 2;
inline bool ProtoPeakQualityInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoPeakQualityInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoPeakQualityInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoPeakQualityInfo::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 ProtoPeakQualityInfo::rank() const {
  return rank_;
}
inline void ProtoPeakQualityInfo::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional int32 left_fight_times = 3;
inline bool ProtoPeakQualityInfo::has_left_fight_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoPeakQualityInfo::set_has_left_fight_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoPeakQualityInfo::clear_has_left_fight_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoPeakQualityInfo::clear_left_fight_times() {
  left_fight_times_ = 0;
  clear_has_left_fight_times();
}
inline ::google::protobuf::int32 ProtoPeakQualityInfo::left_fight_times() const {
  return left_fight_times_;
}
inline void ProtoPeakQualityInfo::set_left_fight_times(::google::protobuf::int32 value) {
  set_has_left_fight_times();
  left_fight_times_ = value;
}

// -------------------------------------------------------------------

// ProtoPeakKnockoutInfo

// optional int64 rival_team_id = 1;
inline bool ProtoPeakKnockoutInfo::has_rival_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoPeakKnockoutInfo::set_has_rival_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoPeakKnockoutInfo::clear_has_rival_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoPeakKnockoutInfo::clear_rival_team_id() {
  rival_team_id_ = GOOGLE_LONGLONG(0);
  clear_has_rival_team_id();
}
inline ::google::protobuf::int64 ProtoPeakKnockoutInfo::rival_team_id() const {
  return rival_team_id_;
}
inline void ProtoPeakKnockoutInfo::set_rival_team_id(::google::protobuf::int64 value) {
  set_has_rival_team_id();
  rival_team_id_ = value;
}

// optional string rival_team_name = 2;
inline bool ProtoPeakKnockoutInfo::has_rival_team_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoPeakKnockoutInfo::set_has_rival_team_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoPeakKnockoutInfo::clear_has_rival_team_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoPeakKnockoutInfo::clear_rival_team_name() {
  if (rival_team_name_ != &::google::protobuf::internal::kEmptyString) {
    rival_team_name_->clear();
  }
  clear_has_rival_team_name();
}
inline const ::std::string& ProtoPeakKnockoutInfo::rival_team_name() const {
  return *rival_team_name_;
}
inline void ProtoPeakKnockoutInfo::set_rival_team_name(const ::std::string& value) {
  set_has_rival_team_name();
  if (rival_team_name_ == &::google::protobuf::internal::kEmptyString) {
    rival_team_name_ = new ::std::string;
  }
  rival_team_name_->assign(value);
}
inline void ProtoPeakKnockoutInfo::set_rival_team_name(const char* value) {
  set_has_rival_team_name();
  if (rival_team_name_ == &::google::protobuf::internal::kEmptyString) {
    rival_team_name_ = new ::std::string;
  }
  rival_team_name_->assign(value);
}
inline void ProtoPeakKnockoutInfo::set_rival_team_name(const char* value, size_t size) {
  set_has_rival_team_name();
  if (rival_team_name_ == &::google::protobuf::internal::kEmptyString) {
    rival_team_name_ = new ::std::string;
  }
  rival_team_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoPeakKnockoutInfo::mutable_rival_team_name() {
  set_has_rival_team_name();
  if (rival_team_name_ == &::google::protobuf::internal::kEmptyString) {
    rival_team_name_ = new ::std::string;
  }
  return rival_team_name_;
}
inline ::std::string* ProtoPeakKnockoutInfo::release_rival_team_name() {
  clear_has_rival_team_name();
  if (rival_team_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rival_team_name_;
    rival_team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .ProtoTeamer rival_teamer = 3;
inline int ProtoPeakKnockoutInfo::rival_teamer_size() const {
  return rival_teamer_.size();
}
inline void ProtoPeakKnockoutInfo::clear_rival_teamer() {
  rival_teamer_.Clear();
}
inline const ::ProtoTeamer& ProtoPeakKnockoutInfo::rival_teamer(int index) const {
  return rival_teamer_.Get(index);
}
inline ::ProtoTeamer* ProtoPeakKnockoutInfo::mutable_rival_teamer(int index) {
  return rival_teamer_.Mutable(index);
}
inline ::ProtoTeamer* ProtoPeakKnockoutInfo::add_rival_teamer() {
  return rival_teamer_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoTeamer >&
ProtoPeakKnockoutInfo::rival_teamer() const {
  return rival_teamer_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoTeamer >*
ProtoPeakKnockoutInfo::mutable_rival_teamer() {
  return &rival_teamer_;
}

// optional int32 my_score = 4;
inline bool ProtoPeakKnockoutInfo::has_my_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoPeakKnockoutInfo::set_has_my_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoPeakKnockoutInfo::clear_has_my_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoPeakKnockoutInfo::clear_my_score() {
  my_score_ = 0;
  clear_has_my_score();
}
inline ::google::protobuf::int32 ProtoPeakKnockoutInfo::my_score() const {
  return my_score_;
}
inline void ProtoPeakKnockoutInfo::set_my_score(::google::protobuf::int32 value) {
  set_has_my_score();
  my_score_ = value;
}

// optional int32 rival_socre = 5;
inline bool ProtoPeakKnockoutInfo::has_rival_socre() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoPeakKnockoutInfo::set_has_rival_socre() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoPeakKnockoutInfo::clear_has_rival_socre() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoPeakKnockoutInfo::clear_rival_socre() {
  rival_socre_ = 0;
  clear_has_rival_socre();
}
inline ::google::protobuf::int32 ProtoPeakKnockoutInfo::rival_socre() const {
  return rival_socre_;
}
inline void ProtoPeakKnockoutInfo::set_rival_socre(::google::protobuf::int32 value) {
  set_has_rival_socre();
  rival_socre_ = value;
}

// optional int32 score_type = 6;
inline bool ProtoPeakKnockoutInfo::has_score_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoPeakKnockoutInfo::set_has_score_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoPeakKnockoutInfo::clear_has_score_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoPeakKnockoutInfo::clear_score_type() {
  score_type_ = 0;
  clear_has_score_type();
}
inline ::google::protobuf::int32 ProtoPeakKnockoutInfo::score_type() const {
  return score_type_;
}
inline void ProtoPeakKnockoutInfo::set_score_type(::google::protobuf::int32 value) {
  set_has_score_type();
  score_type_ = value;
}

// -------------------------------------------------------------------

// SpecialBoxChange

// optional int32 item_id = 1;
inline bool SpecialBoxChange::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpecialBoxChange::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpecialBoxChange::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpecialBoxChange::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
}
inline ::google::protobuf::int32 SpecialBoxChange::item_id() const {
  return item_id_;
}
inline void SpecialBoxChange::set_item_id(::google::protobuf::int32 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional int32 item_amount = 2;
inline bool SpecialBoxChange::has_item_amount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpecialBoxChange::set_has_item_amount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpecialBoxChange::clear_has_item_amount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpecialBoxChange::clear_item_amount() {
  item_amount_ = 0;
  clear_has_item_amount();
}
inline ::google::protobuf::int32 SpecialBoxChange::item_amount() const {
  return item_amount_;
}
inline void SpecialBoxChange::set_item_amount(::google::protobuf::int32 value) {
  set_has_item_amount();
  item_amount_ = value;
}

// optional int32 item_bind = 3;
inline bool SpecialBoxChange::has_item_bind() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SpecialBoxChange::set_has_item_bind() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SpecialBoxChange::clear_has_item_bind() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SpecialBoxChange::clear_item_bind() {
  item_bind_ = 0;
  clear_has_item_bind();
}
inline ::google::protobuf::int32 SpecialBoxChange::item_bind() const {
  return item_bind_;
}
inline void SpecialBoxChange::set_item_bind(::google::protobuf::int32 value) {
  set_has_item_bind();
  item_bind_ = value;
}

// optional int32 page = 4;
inline bool SpecialBoxChange::has_page() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SpecialBoxChange::set_has_page() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SpecialBoxChange::clear_has_page() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SpecialBoxChange::clear_page() {
  page_ = 0;
  clear_has_page();
}
inline ::google::protobuf::int32 SpecialBoxChange::page() const {
  return page_;
}
inline void SpecialBoxChange::set_page(::google::protobuf::int32 value) {
  set_has_page();
  page_ = value;
}

// optional int32 group = 5;
inline bool SpecialBoxChange::has_group() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SpecialBoxChange::set_has_group() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SpecialBoxChange::clear_has_group() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SpecialBoxChange::clear_group() {
  group_ = 0;
  clear_has_group();
}
inline ::google::protobuf::int32 SpecialBoxChange::group() const {
  return group_;
}
inline void SpecialBoxChange::set_group(::google::protobuf::int32 value) {
  set_has_group();
  group_ = value;
}

// optional int32 change_item_id = 6;
inline bool SpecialBoxChange::has_change_item_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SpecialBoxChange::set_has_change_item_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SpecialBoxChange::clear_has_change_item_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SpecialBoxChange::clear_change_item_id() {
  change_item_id_ = 0;
  clear_has_change_item_id();
}
inline ::google::protobuf::int32 SpecialBoxChange::change_item_id() const {
  return change_item_id_;
}
inline void SpecialBoxChange::set_change_item_id(::google::protobuf::int32 value) {
  set_has_change_item_id();
  change_item_id_ = value;
}

// optional int32 change_item_amount = 7;
inline bool SpecialBoxChange::has_change_item_amount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SpecialBoxChange::set_has_change_item_amount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SpecialBoxChange::clear_has_change_item_amount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SpecialBoxChange::clear_change_item_amount() {
  change_item_amount_ = 0;
  clear_has_change_item_amount();
}
inline ::google::protobuf::int32 SpecialBoxChange::change_item_amount() const {
  return change_item_amount_;
}
inline void SpecialBoxChange::set_change_item_amount(::google::protobuf::int32 value) {
  set_has_change_item_amount();
  change_item_amount_ = value;
}

// optional int32 change_item_bind = 8;
inline bool SpecialBoxChange::has_change_item_bind() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SpecialBoxChange::set_has_change_item_bind() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SpecialBoxChange::clear_has_change_item_bind() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SpecialBoxChange::clear_change_item_bind() {
  change_item_bind_ = 0;
  clear_has_change_item_bind();
}
inline ::google::protobuf::int32 SpecialBoxChange::change_item_bind() const {
  return change_item_bind_;
}
inline void SpecialBoxChange::set_change_item_bind(::google::protobuf::int32 value) {
  set_has_change_item_bind();
  change_item_bind_ = value;
}

// optional int32 index = 9;
inline bool SpecialBoxChange::has_index() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SpecialBoxChange::set_has_index() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SpecialBoxChange::clear_has_index() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SpecialBoxChange::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 SpecialBoxChange::index() const {
  return index_;
}
inline void SpecialBoxChange::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// ProtoQualityRank

// optional int64 team_id = 1;
inline bool ProtoQualityRank::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoQualityRank::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoQualityRank::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoQualityRank::clear_team_id() {
  team_id_ = GOOGLE_LONGLONG(0);
  clear_has_team_id();
}
inline ::google::protobuf::int64 ProtoQualityRank::team_id() const {
  return team_id_;
}
inline void ProtoQualityRank::set_team_id(::google::protobuf::int64 value) {
  set_has_team_id();
  team_id_ = value;
}

// optional string team_name = 2;
inline bool ProtoQualityRank::has_team_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoQualityRank::set_has_team_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoQualityRank::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoQualityRank::clear_team_name() {
  if (team_name_ != &::google::protobuf::internal::kEmptyString) {
    team_name_->clear();
  }
  clear_has_team_name();
}
inline const ::std::string& ProtoQualityRank::team_name() const {
  return *team_name_;
}
inline void ProtoQualityRank::set_team_name(const ::std::string& value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
}
inline void ProtoQualityRank::set_team_name(const char* value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
}
inline void ProtoQualityRank::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoQualityRank::mutable_team_name() {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  return team_name_;
}
inline ::std::string* ProtoQualityRank::release_team_name() {
  clear_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = team_name_;
    team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 team_score = 3;
inline bool ProtoQualityRank::has_team_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoQualityRank::set_has_team_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoQualityRank::clear_has_team_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoQualityRank::clear_team_score() {
  team_score_ = 0;
  clear_has_team_score();
}
inline ::google::protobuf::int32 ProtoQualityRank::team_score() const {
  return team_score_;
}
inline void ProtoQualityRank::set_team_score(::google::protobuf::int32 value) {
  set_has_team_score();
  team_score_ = value;
}

// optional int32 rank = 4;
inline bool ProtoQualityRank::has_rank() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoQualityRank::set_has_rank() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoQualityRank::clear_has_rank() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoQualityRank::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 ProtoQualityRank::rank() const {
  return rank_;
}
inline void ProtoQualityRank::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProtoPublic_2eproto__INCLUDED
