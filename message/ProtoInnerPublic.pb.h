// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoInnerPublic.proto

#ifndef PROTOBUF_ProtoInnerPublic_2eproto__INCLUDED
#define PROTOBUF_ProtoInnerPublic_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "ProtoPublic.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ProtoInnerPublic_2eproto();
void protobuf_AssignDesc_ProtoInnerPublic_2eproto();
void protobuf_ShutdownFile_ProtoInnerPublic_2eproto();

class ProtoServerAddress;
class ProtoSyncStatus;
class ProtoPackageSet;
class ProtoPackage;
class ProtoLimitGrid;
class ProtoSerialObj;
class ProtoProItem;
class ProtoInnerTaskInfo;
class ProtoInnerTaskCond;
class ProtoSignInfo;
class ProtoFBItem;
class RecordMoney;
class RecordItem;
class RecordEquipment;
class RecordPlayerLevel;
class RecordOtherSerial;
class ProtoScriptRecord;
class ProtoLivenessTaskInfo;
class ProtoExpRestoreRecord;
class ProtoMagicalPolish;
class ProtoPieceInfo;
class ProtoBrocastNewInfo;
class ProtoFashionTips;
class ProtoPlayerTipSyncInfo;
class ProtoSyncLabel;
class RecordOnlineUsers;
class RecordLoginLogout;
class BackRechargeOrder;
class ProtoERTimeStage;
class ProtoERScriptStageInfo;
class ProtoOfflineBeast;
class RecordTask;
class RecordRank;
class RecordMail;
class ProtoOnSaleItem;
class RecordChat;
class ProtoLottery;
class ProtoActivityTick;
class ProtoLotteryWaitAward;
class ProtoMongoData;
class ProtoActFlower;
class ProtoMount;
class ProtoScriptType;
class ProtoScriptFirstAward;
class RecordMount;
class RecordActivity;

// ===================================================================

class ProtoServerAddress : public ::google::protobuf::Message {
 public:
  ProtoServerAddress();
  virtual ~ProtoServerAddress();
  
  ProtoServerAddress(const ProtoServerAddress& from);
  
  inline ProtoServerAddress& operator=(const ProtoServerAddress& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoServerAddress& default_instance();
  
  void Swap(ProtoServerAddress* other);
  
  // implements Message ----------------------------------------------
  
  ProtoServerAddress* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoServerAddress& from);
  void MergeFrom(const ProtoServerAddress& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string server_name = 1;
  inline bool has_server_name() const;
  inline void clear_server_name();
  static const int kServerNameFieldNumber = 1;
  inline const ::std::string& server_name() const;
  inline void set_server_name(const ::std::string& value);
  inline void set_server_name(const char* value);
  inline void set_server_name(const char* value, size_t size);
  inline ::std::string* mutable_server_name();
  inline ::std::string* release_server_name();
  
  // optional string session = 2;
  inline bool has_session() const;
  inline void clear_session();
  static const int kSessionFieldNumber = 2;
  inline const ::std::string& session() const;
  inline void set_session(const ::std::string& value);
  inline void set_session(const char* value);
  inline void set_session(const char* value, size_t size);
  inline ::std::string* mutable_session();
  inline ::std::string* release_session();
  
  // optional string auth_ip = 3;
  inline bool has_auth_ip() const;
  inline void clear_auth_ip();
  static const int kAuthIpFieldNumber = 3;
  inline const ::std::string& auth_ip() const;
  inline void set_auth_ip(const ::std::string& value);
  inline void set_auth_ip(const char* value);
  inline void set_auth_ip(const char* value, size_t size);
  inline ::std::string* mutable_auth_ip();
  inline ::std::string* release_auth_ip();
  
  // optional int32 auth_port = 4;
  inline bool has_auth_port() const;
  inline void clear_auth_port();
  static const int kAuthPortFieldNumber = 4;
  inline ::google::protobuf::int32 auth_port() const;
  inline void set_auth_port(::google::protobuf::int32 value);
  
  // optional string role_name = 5;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 5;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  
  // optional int32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoServerAddress)
 private:
  inline void set_has_server_name();
  inline void clear_has_server_name();
  inline void set_has_session();
  inline void clear_has_session();
  inline void set_has_auth_ip();
  inline void clear_has_auth_ip();
  inline void set_has_auth_port();
  inline void clear_has_auth_port();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_level();
  inline void clear_has_level();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* server_name_;
  ::std::string* session_;
  ::std::string* auth_ip_;
  ::std::string* role_name_;
  ::google::protobuf::int32 auth_port_;
  ::google::protobuf::int32 level_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoInnerPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoServerAddress* default_instance_;
};
// -------------------------------------------------------------------

class ProtoSyncStatus : public ::google::protobuf::Message {
 public:
  ProtoSyncStatus();
  virtual ~ProtoSyncStatus();
  
  ProtoSyncStatus(const ProtoSyncStatus& from);
  
  inline ProtoSyncStatus& operator=(const ProtoSyncStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoSyncStatus& default_instance();
  
  void Swap(ProtoSyncStatus* other);
  
  // implements Message ----------------------------------------------
  
  ProtoSyncStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoSyncStatus& from);
  void MergeFrom(const ProtoSyncStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);
  
  // optional int32 view_status = 2;
  inline bool has_view_status() const;
  inline void clear_view_status();
  static const int kViewStatusFieldNumber = 2;
  inline ::google::protobuf::int32 view_status() const;
  inline void set_view_status(::google::protobuf::int32 value);
  
  // optional double view1 = 3;
  inline bool has_view1() const;
  inline void clear_view1();
  static const int kView1FieldNumber = 3;
  inline double view1() const;
  inline void set_view1(double value);
  
  // optional double view2 = 4;
  inline bool has_view2() const;
  inline void clear_view2();
  static const int kView2FieldNumber = 4;
  inline double view2() const;
  inline void set_view2(double value);
  
  // optional double view3 = 5;
  inline bool has_view3() const;
  inline void clear_view3();
  static const int kView3FieldNumber = 5;
  inline double view3() const;
  inline void set_view3(double value);
  
  // optional double value1 = 6;
  inline bool has_value1() const;
  inline void clear_value1();
  static const int kValue1FieldNumber = 6;
  inline double value1() const;
  inline void set_value1(double value);
  
  // optional double value2 = 7;
  inline bool has_value2() const;
  inline void clear_value2();
  static const int kValue2FieldNumber = 7;
  inline double value2() const;
  inline void set_value2(double value);
  
  // optional double value3 = 8;
  inline bool has_value3() const;
  inline void clear_value3();
  static const int kValue3FieldNumber = 8;
  inline double value3() const;
  inline void set_value3(double value);
  
  // optional double value4 = 9;
  inline bool has_value4() const;
  inline void clear_value4();
  static const int kValue4FieldNumber = 9;
  inline double value4() const;
  inline void set_value4(double value);
  
  // optional double value5 = 10;
  inline bool has_value5() const;
  inline void clear_value5();
  static const int kValue5FieldNumber = 10;
  inline double value5() const;
  inline void set_value5(double value);
  
  // optional int64 check_sec = 11;
  inline bool has_check_sec() const;
  inline void clear_check_sec();
  static const int kCheckSecFieldNumber = 11;
  inline ::google::protobuf::int64 check_sec() const;
  inline void set_check_sec(::google::protobuf::int64 value);
  
  // optional int64 check_usec = 12;
  inline bool has_check_usec() const;
  inline void clear_check_usec();
  static const int kCheckUsecFieldNumber = 12;
  inline ::google::protobuf::int64 check_usec() const;
  inline void set_check_usec(::google::protobuf::int64 value);
  
  // optional int64 interval_sec = 13;
  inline bool has_interval_sec() const;
  inline void clear_interval_sec();
  static const int kIntervalSecFieldNumber = 13;
  inline ::google::protobuf::int64 interval_sec() const;
  inline void set_interval_sec(::google::protobuf::int64 value);
  
  // optional int64 interval_usec = 14;
  inline bool has_interval_usec() const;
  inline void clear_interval_usec();
  static const int kIntervalUsecFieldNumber = 14;
  inline ::google::protobuf::int64 interval_usec() const;
  inline void set_interval_usec(::google::protobuf::int64 value);
  
  // optional int64 last_sec = 15;
  inline bool has_last_sec() const;
  inline void clear_last_sec();
  static const int kLastSecFieldNumber = 15;
  inline ::google::protobuf::int64 last_sec() const;
  inline void set_last_sec(::google::protobuf::int64 value);
  
  // optional int64 last_usec = 16;
  inline bool has_last_usec() const;
  inline void clear_last_usec();
  static const int kLastUsecFieldNumber = 16;
  inline ::google::protobuf::int64 last_usec() const;
  inline void set_last_usec(::google::protobuf::int64 value);
  
  // optional int32 skill_id = 17;
  inline bool has_skill_id() const;
  inline void clear_skill_id();
  static const int kSkillIdFieldNumber = 17;
  inline ::google::protobuf::int32 skill_id() const;
  inline void set_skill_id(::google::protobuf::int32 value);
  
  // optional int32 skill_level = 18;
  inline bool has_skill_level() const;
  inline void clear_skill_level();
  static const int kSkillLevelFieldNumber = 18;
  inline ::google::protobuf::int32 skill_level() const;
  inline void set_skill_level(::google::protobuf::int32 value);
  
  // optional int32 attacker = 19;
  inline bool has_attacker() const;
  inline void clear_attacker();
  static const int kAttackerFieldNumber = 19;
  inline ::google::protobuf::int32 attacker() const;
  inline void set_attacker(::google::protobuf::int32 value);
  
  // optional int32 accumulate = 20;
  inline bool has_accumulate() const;
  inline void clear_accumulate();
  static const int kAccumulateFieldNumber = 20;
  inline ::google::protobuf::int32 accumulate() const;
  inline void set_accumulate(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoSyncStatus)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_view_status();
  inline void clear_has_view_status();
  inline void set_has_view1();
  inline void clear_has_view1();
  inline void set_has_view2();
  inline void clear_has_view2();
  inline void set_has_view3();
  inline void clear_has_view3();
  inline void set_has_value1();
  inline void clear_has_value1();
  inline void set_has_value2();
  inline void clear_has_value2();
  inline void set_has_value3();
  inline void clear_has_value3();
  inline void set_has_value4();
  inline void clear_has_value4();
  inline void set_has_value5();
  inline void clear_has_value5();
  inline void set_has_check_sec();
  inline void clear_has_check_sec();
  inline void set_has_check_usec();
  inline void clear_has_check_usec();
  inline void set_has_interval_sec();
  inline void clear_has_interval_sec();
  inline void set_has_interval_usec();
  inline void clear_has_interval_usec();
  inline void set_has_last_sec();
  inline void clear_has_last_sec();
  inline void set_has_last_usec();
  inline void clear_has_last_usec();
  inline void set_has_skill_id();
  inline void clear_has_skill_id();
  inline void set_has_skill_level();
  inline void clear_has_skill_level();
  inline void set_has_attacker();
  inline void clear_has_attacker();
  inline void set_has_accumulate();
  inline void clear_has_accumulate();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 view_status_;
  double view1_;
  double view2_;
  double view3_;
  double value1_;
  double value2_;
  double value3_;
  double value4_;
  double value5_;
  ::google::protobuf::int64 check_sec_;
  ::google::protobuf::int64 check_usec_;
  ::google::protobuf::int64 interval_sec_;
  ::google::protobuf::int64 interval_usec_;
  ::google::protobuf::int64 last_sec_;
  ::google::protobuf::int64 last_usec_;
  ::google::protobuf::int32 skill_id_;
  ::google::protobuf::int32 skill_level_;
  ::google::protobuf::int32 attacker_;
  ::google::protobuf::int32 accumulate_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(20 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoInnerPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoSyncStatus* default_instance_;
};
// -------------------------------------------------------------------

class ProtoPackageSet : public ::google::protobuf::Message {
 public:
  ProtoPackageSet();
  virtual ~ProtoPackageSet();
  
  ProtoPackageSet(const ProtoPackageSet& from);
  
  inline ProtoPackageSet& operator=(const ProtoPackageSet& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoPackageSet& default_instance();
  
  void Swap(ProtoPackageSet* other);
  
  // implements Message ----------------------------------------------
  
  ProtoPackageSet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoPackageSet& from);
  void MergeFrom(const ProtoPackageSet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .ProtoMoney money = 1;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 1;
  inline const ::ProtoMoney& money() const;
  inline ::ProtoMoney* mutable_money();
  inline ::ProtoMoney* release_money();
  
  // repeated .ProtoPackage package_list = 2;
  inline int package_list_size() const;
  inline void clear_package_list();
  static const int kPackageListFieldNumber = 2;
  inline const ::ProtoPackage& package_list(int index) const;
  inline ::ProtoPackage* mutable_package_list(int index);
  inline ::ProtoPackage* add_package_list();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoPackage >&
      package_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoPackage >*
      mutable_package_list();
  
  // optional .ProtoMoney money_use = 3;
  inline bool has_money_use() const;
  inline void clear_money_use();
  static const int kMoneyUseFieldNumber = 3;
  inline const ::ProtoMoney& money_use() const;
  inline ::ProtoMoney* mutable_money_use();
  inline ::ProtoMoney* release_money_use();
  
  // optional int64 recharge_first_tick = 4;
  inline bool has_recharge_first_tick() const;
  inline void clear_recharge_first_tick();
  static const int kRechargeFirstTickFieldNumber = 4;
  inline ::google::protobuf::int64 recharge_first_tick() const;
  inline void set_recharge_first_tick(::google::protobuf::int64 value);
  
  // optional int64 recharge_gold = 5;
  inline bool has_recharge_gold() const;
  inline void clear_recharge_gold();
  static const int kRechargeGoldFieldNumber = 5;
  inline ::google::protobuf::int64 recharge_gold() const;
  inline void set_recharge_gold(::google::protobuf::int64 value);
  
  // repeated .ProtoPairObj resource_map = 6;
  inline int resource_map_size() const;
  inline void clear_resource_map();
  static const int kResourceMapFieldNumber = 6;
  inline const ::ProtoPairObj& resource_map(int index) const;
  inline ::ProtoPairObj* mutable_resource_map(int index);
  inline ::ProtoPairObj* add_resource_map();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >&
      resource_map() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >*
      mutable_resource_map();
  
  // optional .ProtoPairMap use_resource_map = 7;
  inline bool has_use_resource_map() const;
  inline void clear_use_resource_map();
  static const int kUseResourceMapFieldNumber = 7;
  inline const ::ProtoPairMap& use_resource_map() const;
  inline ::ProtoPairMap* mutable_use_resource_map();
  inline ::ProtoPairMap* release_use_resource_map();
  
  // @@protoc_insertion_point(class_scope:ProtoPackageSet)
 private:
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_money_use();
  inline void clear_has_money_use();
  inline void set_has_recharge_first_tick();
  inline void clear_has_recharge_first_tick();
  inline void set_has_recharge_gold();
  inline void clear_has_recharge_gold();
  inline void set_has_use_resource_map();
  inline void clear_has_use_resource_map();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::ProtoMoney* money_;
  ::google::protobuf::RepeatedPtrField< ::ProtoPackage > package_list_;
  ::ProtoMoney* money_use_;
  ::google::protobuf::int64 recharge_first_tick_;
  ::google::protobuf::int64 recharge_gold_;
  ::google::protobuf::RepeatedPtrField< ::ProtoPairObj > resource_map_;
  ::ProtoPairMap* use_resource_map_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoInnerPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoPackageSet* default_instance_;
};
// -------------------------------------------------------------------

class ProtoPackage : public ::google::protobuf::Message {
 public:
  ProtoPackage();
  virtual ~ProtoPackage();
  
  ProtoPackage(const ProtoPackage& from);
  
  inline ProtoPackage& operator=(const ProtoPackage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoPackage& default_instance();
  
  void Swap(ProtoPackage* other);
  
  // implements Message ----------------------------------------------
  
  ProtoPackage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoPackage& from);
  void MergeFrom(const ProtoPackage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 pack_type = 1;
  inline bool has_pack_type() const;
  inline void clear_pack_type();
  static const int kPackTypeFieldNumber = 1;
  inline ::google::protobuf::int32 pack_type() const;
  inline void set_pack_type(::google::protobuf::int32 value);
  
  // optional int32 pack_size = 2;
  inline bool has_pack_size() const;
  inline void clear_pack_size();
  static const int kPackSizeFieldNumber = 2;
  inline ::google::protobuf::int32 pack_size() const;
  inline void set_pack_size(::google::protobuf::int32 value);
  
  // optional int32 last_open_tick = 3;
  inline bool has_last_open_tick() const;
  inline void clear_last_open_tick();
  static const int kLastOpenTickFieldNumber = 3;
  inline ::google::protobuf::int32 last_open_tick() const;
  inline void set_last_open_tick(::google::protobuf::int32 value);
  
  // repeated .ProtoItem item_list = 4;
  inline int item_list_size() const;
  inline void clear_item_list();
  static const int kItemListFieldNumber = 4;
  inline const ::ProtoItem& item_list(int index) const;
  inline ::ProtoItem* mutable_item_list(int index);
  inline ::ProtoItem* add_item_list();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoItem >&
      item_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoItem >*
      mutable_item_list();
  
  // repeated .ProtoPairObj grid_vec = 5;
  inline int grid_vec_size() const;
  inline void clear_grid_vec();
  static const int kGridVecFieldNumber = 5;
  inline const ::ProtoPairObj& grid_vec(int index) const;
  inline ::ProtoPairObj* mutable_grid_vec(int index);
  inline ::ProtoPairObj* add_grid_vec();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >&
      grid_vec() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >*
      mutable_grid_vec();
  
  // optional int32 is_open_sublime = 6;
  inline bool has_is_open_sublime() const;
  inline void clear_is_open_sublime();
  static const int kIsOpenSublimeFieldNumber = 6;
  inline ::google::protobuf::int32 is_open_sublime() const;
  inline void set_is_open_sublime(::google::protobuf::int32 value);
  
  // optional int32 sublime_level = 7;
  inline bool has_sublime_level() const;
  inline void clear_sublime_level();
  static const int kSublimeLevelFieldNumber = 7;
  inline ::google::protobuf::int32 sublime_level() const;
  inline void set_sublime_level(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoPackage)
 private:
  inline void set_has_pack_type();
  inline void clear_has_pack_type();
  inline void set_has_pack_size();
  inline void clear_has_pack_size();
  inline void set_has_last_open_tick();
  inline void clear_has_last_open_tick();
  inline void set_has_is_open_sublime();
  inline void clear_has_is_open_sublime();
  inline void set_has_sublime_level();
  inline void clear_has_sublime_level();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 pack_type_;
  ::google::protobuf::int32 pack_size_;
  ::google::protobuf::RepeatedPtrField< ::ProtoItem > item_list_;
  ::google::protobuf::int32 last_open_tick_;
  ::google::protobuf::int32 is_open_sublime_;
  ::google::protobuf::RepeatedPtrField< ::ProtoPairObj > grid_vec_;
  ::google::protobuf::int32 sublime_level_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoInnerPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoPackage* default_instance_;
};
// -------------------------------------------------------------------

class ProtoLimitGrid : public ::google::protobuf::Message {
 public:
  ProtoLimitGrid();
  virtual ~ProtoLimitGrid();
  
  ProtoLimitGrid(const ProtoLimitGrid& from);
  
  inline ProtoLimitGrid& operator=(const ProtoLimitGrid& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoLimitGrid& default_instance();
  
  void Swap(ProtoLimitGrid* other);
  
  // implements Message ----------------------------------------------
  
  ProtoLimitGrid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoLimitGrid& from);
  void MergeFrom(const ProtoLimitGrid& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // optional int32 left_tick = 2;
  inline bool has_left_tick() const;
  inline void clear_left_tick();
  static const int kLeftTickFieldNumber = 2;
  inline ::google::protobuf::int32 left_tick() const;
  inline void set_left_tick(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoLimitGrid)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_left_tick();
  inline void clear_has_left_tick();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 left_tick_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoInnerPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoLimitGrid* default_instance_;
};
// -------------------------------------------------------------------

class ProtoSerialObj : public ::google::protobuf::Message {
 public:
  ProtoSerialObj();
  virtual ~ProtoSerialObj();
  
  ProtoSerialObj(const ProtoSerialObj& from);
  
  inline ProtoSerialObj& operator=(const ProtoSerialObj& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoSerialObj& default_instance();
  
  void Swap(ProtoSerialObj* other);
  
  // implements Message ----------------------------------------------
  
  ProtoSerialObj* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoSerialObj& from);
  void MergeFrom(const ProtoSerialObj& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 serial_type = 1;
  inline bool has_serial_type() const;
  inline void clear_serial_type();
  static const int kSerialTypeFieldNumber = 1;
  inline ::google::protobuf::int32 serial_type() const;
  inline void set_serial_type(::google::protobuf::int32 value);
  
  // optional int32 sub_type = 2;
  inline bool has_sub_type() const;
  inline void clear_sub_type();
  static const int kSubTypeFieldNumber = 2;
  inline ::google::protobuf::int32 sub_type() const;
  inline void set_sub_type(::google::protobuf::int32 value);
  
  // optional int32 serial_value = 3;
  inline bool has_serial_value() const;
  inline void clear_serial_value();
  static const int kSerialValueFieldNumber = 3;
  inline ::google::protobuf::int32 serial_value() const;
  inline void set_serial_value(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoSerialObj)
 private:
  inline void set_has_serial_type();
  inline void clear_has_serial_type();
  inline void set_has_sub_type();
  inline void clear_has_sub_type();
  inline void set_has_serial_value();
  inline void clear_has_serial_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 serial_type_;
  ::google::protobuf::int32 sub_type_;
  ::google::protobuf::int32 serial_value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoInnerPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoSerialObj* default_instance_;
};
// -------------------------------------------------------------------

class ProtoProItem : public ::google::protobuf::Message {
 public:
  ProtoProItem();
  virtual ~ProtoProItem();
  
  ProtoProItem(const ProtoProItem& from);
  
  inline ProtoProItem& operator=(const ProtoProItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoProItem& default_instance();
  
  void Swap(ProtoProItem* other);
  
  // implements Message ----------------------------------------------
  
  ProtoProItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoProItem& from);
  void MergeFrom(const ProtoProItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 offset = 1;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 1;
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);
  
  // optional .ProtoPairObj pro_pair = 2;
  inline bool has_pro_pair() const;
  inline void clear_pro_pair();
  static const int kProPairFieldNumber = 2;
  inline const ::ProtoPairObj& pro_pair() const;
  inline ::ProtoPairObj* mutable_pro_pair();
  inline ::ProtoPairObj* release_pro_pair();
  
  // @@protoc_insertion_point(class_scope:ProtoProItem)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_pro_pair();
  inline void clear_has_pro_pair();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::ProtoPairObj* pro_pair_;
  ::google::protobuf::int32 offset_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoInnerPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoProItem* default_instance_;
};
// -------------------------------------------------------------------

class ProtoInnerTaskInfo : public ::google::protobuf::Message {
 public:
  ProtoInnerTaskInfo();
  virtual ~ProtoInnerTaskInfo();
  
  ProtoInnerTaskInfo(const ProtoInnerTaskInfo& from);
  
  inline ProtoInnerTaskInfo& operator=(const ProtoInnerTaskInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoInnerTaskInfo& default_instance();
  
  void Swap(ProtoInnerTaskInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProtoInnerTaskInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoInnerTaskInfo& from);
  void MergeFrom(const ProtoInnerTaskInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 task_id = 1;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  inline ::google::protobuf::int32 task_id() const;
  inline void set_task_id(::google::protobuf::int32 value);
  
  // optional int32 game_type = 2;
  inline bool has_game_type() const;
  inline void clear_game_type();
  static const int kGameTypeFieldNumber = 2;
  inline ::google::protobuf::int32 game_type() const;
  inline void set_game_type(::google::protobuf::int32 value);
  
  // optional int64 accept_tick_sec = 3;
  inline bool has_accept_tick_sec() const;
  inline void clear_accept_tick_sec();
  static const int kAcceptTickSecFieldNumber = 3;
  inline ::google::protobuf::int64 accept_tick_sec() const;
  inline void set_accept_tick_sec(::google::protobuf::int64 value);
  
  // optional int64 accept_tick_usec = 4;
  inline bool has_accept_tick_usec() const;
  inline void clear_accept_tick_usec();
  static const int kAcceptTickUsecFieldNumber = 4;
  inline ::google::protobuf::int64 accept_tick_usec() const;
  inline void set_accept_tick_usec(::google::protobuf::int64 value);
  
  // optional int64 refresh_tick_sec = 5;
  inline bool has_refresh_tick_sec() const;
  inline void clear_refresh_tick_sec();
  static const int kRefreshTickSecFieldNumber = 5;
  inline ::google::protobuf::int64 refresh_tick_sec() const;
  inline void set_refresh_tick_sec(::google::protobuf::int64 value);
  
  // optional int64 refresh_tick_usec = 6;
  inline bool has_refresh_tick_usec() const;
  inline void clear_refresh_tick_usec();
  static const int kRefreshTickUsecFieldNumber = 6;
  inline ::google::protobuf::int64 refresh_tick_usec() const;
  inline void set_refresh_tick_usec(::google::protobuf::int64 value);
  
  // repeated .ProtoInnerTaskCond task_cond_list = 7;
  inline int task_cond_list_size() const;
  inline void clear_task_cond_list();
  static const int kTaskCondListFieldNumber = 7;
  inline const ::ProtoInnerTaskCond& task_cond_list(int index) const;
  inline ::ProtoInnerTaskCond* mutable_task_cond_list(int index);
  inline ::ProtoInnerTaskCond* add_task_cond_list();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoInnerTaskCond >&
      task_cond_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoInnerTaskCond >*
      mutable_task_cond_list();
  
  // optional int32 prev_task = 8;
  inline bool has_prev_task() const;
  inline void clear_prev_task();
  static const int kPrevTaskFieldNumber = 8;
  inline ::google::protobuf::int32 prev_task() const;
  inline void set_prev_task(::google::protobuf::int32 value);
  
  // optional int32 post_task = 9;
  inline bool has_post_task() const;
  inline void clear_post_task();
  static const int kPostTaskFieldNumber = 9;
  inline ::google::protobuf::int32 post_task() const;
  inline void set_post_task(::google::protobuf::int32 value);
  
  // optional uint64 status = 10;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 10;
  inline ::google::protobuf::uint64 status() const;
  inline void set_status(::google::protobuf::uint64 value);
  
  // optional uint64 logic_type = 11;
  inline bool has_logic_type() const;
  inline void clear_logic_type();
  static const int kLogicTypeFieldNumber = 11;
  inline ::google::protobuf::uint64 logic_type() const;
  inline void set_logic_type(::google::protobuf::uint64 value);
  
  // optional int32 task_star = 12;
  inline bool has_task_star() const;
  inline void clear_task_star();
  static const int kTaskStarFieldNumber = 12;
  inline ::google::protobuf::int32 task_star() const;
  inline void set_task_star(::google::protobuf::int32 value);
  
  // optional int32 fast_finish_rate = 13;
  inline bool has_fast_finish_rate() const;
  inline void clear_fast_finish_rate();
  static const int kFastFinishRateFieldNumber = 13;
  inline ::google::protobuf::int32 fast_finish_rate() const;
  inline void set_fast_finish_rate(::google::protobuf::int32 value);
  
  // optional int32 fresh_star_times = 14;
  inline bool has_fresh_star_times() const;
  inline void clear_fresh_star_times();
  static const int kFreshStarTimesFieldNumber = 14;
  inline ::google::protobuf::int32 fresh_star_times() const;
  inline void set_fresh_star_times(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoInnerTaskInfo)
 private:
  inline void set_has_task_id();
  inline void clear_has_task_id();
  inline void set_has_game_type();
  inline void clear_has_game_type();
  inline void set_has_accept_tick_sec();
  inline void clear_has_accept_tick_sec();
  inline void set_has_accept_tick_usec();
  inline void clear_has_accept_tick_usec();
  inline void set_has_refresh_tick_sec();
  inline void clear_has_refresh_tick_sec();
  inline void set_has_refresh_tick_usec();
  inline void clear_has_refresh_tick_usec();
  inline void set_has_prev_task();
  inline void clear_has_prev_task();
  inline void set_has_post_task();
  inline void clear_has_post_task();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_logic_type();
  inline void clear_has_logic_type();
  inline void set_has_task_star();
  inline void clear_has_task_star();
  inline void set_has_fast_finish_rate();
  inline void clear_has_fast_finish_rate();
  inline void set_has_fresh_star_times();
  inline void clear_has_fresh_star_times();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 task_id_;
  ::google::protobuf::int32 game_type_;
  ::google::protobuf::int64 accept_tick_sec_;
  ::google::protobuf::int64 accept_tick_usec_;
  ::google::protobuf::int64 refresh_tick_sec_;
  ::google::protobuf::int64 refresh_tick_usec_;
  ::google::protobuf::RepeatedPtrField< ::ProtoInnerTaskCond > task_cond_list_;
  ::google::protobuf::int32 prev_task_;
  ::google::protobuf::int32 post_task_;
  ::google::protobuf::uint64 status_;
  ::google::protobuf::uint64 logic_type_;
  ::google::protobuf::int32 task_star_;
  ::google::protobuf::int32 fast_finish_rate_;
  ::google::protobuf::int32 fresh_star_times_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoInnerPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoInnerTaskInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProtoInnerTaskCond : public ::google::protobuf::Message {
 public:
  ProtoInnerTaskCond();
  virtual ~ProtoInnerTaskCond();
  
  ProtoInnerTaskCond(const ProtoInnerTaskCond& from);
  
  inline ProtoInnerTaskCond& operator=(const ProtoInnerTaskCond& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoInnerTaskCond& default_instance();
  
  void Swap(ProtoInnerTaskCond* other);
  
  // implements Message ----------------------------------------------
  
  ProtoInnerTaskCond* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoInnerTaskCond& from);
  void MergeFrom(const ProtoInnerTaskCond& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional int32 current_value = 2;
  inline bool has_current_value() const;
  inline void clear_current_value();
  static const int kCurrentValueFieldNumber = 2;
  inline ::google::protobuf::int32 current_value() const;
  inline void set_current_value(::google::protobuf::int32 value);
  
  // optional int32 cond_index = 3;
  inline bool has_cond_index() const;
  inline void clear_cond_index();
  static const int kCondIndexFieldNumber = 3;
  inline ::google::protobuf::int32 cond_index() const;
  inline void set_cond_index(::google::protobuf::int32 value);
  
  // optional int32 id_list_index = 4;
  inline bool has_id_list_index() const;
  inline void clear_id_list_index();
  static const int kIdListIndexFieldNumber = 4;
  inline ::google::protobuf::int32 id_list_index() const;
  inline void set_id_list_index(::google::protobuf::int32 value);
  
  // optional int32 cond_id = 5;
  inline bool has_cond_id() const;
  inline void clear_cond_id();
  static const int kCondIdFieldNumber = 5;
  inline ::google::protobuf::int32 cond_id() const;
  inline void set_cond_id(::google::protobuf::int32 value);
  
  // optional int32 final_value = 6;
  inline bool has_final_value() const;
  inline void clear_final_value();
  static const int kFinalValueFieldNumber = 6;
  inline ::google::protobuf::int32 final_value() const;
  inline void set_final_value(::google::protobuf::int32 value);
  
  // optional int32 kill_type = 7;
  inline bool has_kill_type() const;
  inline void clear_kill_type();
  static const int kKillTypeFieldNumber = 7;
  inline ::google::protobuf::int32 kill_type() const;
  inline void set_kill_type(::google::protobuf::int32 value);
  
  // optional int32 range_level = 8;
  inline bool has_range_level() const;
  inline void clear_range_level();
  static const int kRangeLevelFieldNumber = 8;
  inline ::google::protobuf::int32 range_level() const;
  inline void set_range_level(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoInnerTaskCond)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_current_value();
  inline void clear_has_current_value();
  inline void set_has_cond_index();
  inline void clear_has_cond_index();
  inline void set_has_id_list_index();
  inline void clear_has_id_list_index();
  inline void set_has_cond_id();
  inline void clear_has_cond_id();
  inline void set_has_final_value();
  inline void clear_has_final_value();
  inline void set_has_kill_type();
  inline void clear_has_kill_type();
  inline void set_has_range_level();
  inline void clear_has_range_level();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 current_value_;
  ::google::protobuf::int32 cond_index_;
  ::google::protobuf::int32 id_list_index_;
  ::google::protobuf::int32 cond_id_;
  ::google::protobuf::int32 final_value_;
  ::google::protobuf::int32 kill_type_;
  ::google::protobuf::int32 range_level_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoInnerPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoInnerTaskCond* default_instance_;
};
// -------------------------------------------------------------------

class ProtoSignInfo : public ::google::protobuf::Message {
 public:
  ProtoSignInfo();
  virtual ~ProtoSignInfo();
  
  ProtoSignInfo(const ProtoSignInfo& from);
  
  inline ProtoSignInfo& operator=(const ProtoSignInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoSignInfo& default_instance();
  
  void Swap(ProtoSignInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProtoSignInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoSignInfo& from);
  void MergeFrom(const ProtoSignInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 sign_type = 1;
  inline bool has_sign_type() const;
  inline void clear_sign_type();
  static const int kSignTypeFieldNumber = 1;
  inline ::google::protobuf::int32 sign_type() const;
  inline void set_sign_type(::google::protobuf::int32 value);
  
  // optional int64 type_index = 2;
  inline bool has_type_index() const;
  inline void clear_type_index();
  static const int kTypeIndexFieldNumber = 2;
  inline ::google::protobuf::int64 type_index() const;
  inline void set_type_index(::google::protobuf::int64 value);
  
  // optional string role_name = 3;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 3;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  
  // optional int32 type_lvl = 4;
  inline bool has_type_lvl() const;
  inline void clear_type_lvl();
  static const int kTypeLvlFieldNumber = 4;
  inline ::google::protobuf::int32 type_lvl() const;
  inline void set_type_lvl(::google::protobuf::int32 value);
  
  // optional int32 type_force = 5;
  inline bool has_type_force() const;
  inline void clear_type_force();
  static const int kTypeForceFieldNumber = 5;
  inline ::google::protobuf::int32 type_force() const;
  inline void set_type_force(::google::protobuf::int32 value);
  
  // optional int32 type_count = 6;
  inline bool has_type_count() const;
  inline void clear_type_count();
  static const int kTypeCountFieldNumber = 6;
  inline ::google::protobuf::int32 type_count() const;
  inline void set_type_count(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoSignInfo)
 private:
  inline void set_has_sign_type();
  inline void clear_has_sign_type();
  inline void set_has_type_index();
  inline void clear_has_type_index();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_type_lvl();
  inline void clear_has_type_lvl();
  inline void set_has_type_force();
  inline void clear_has_type_force();
  inline void set_has_type_count();
  inline void clear_has_type_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 type_index_;
  ::google::protobuf::int32 sign_type_;
  ::google::protobuf::int32 type_lvl_;
  ::std::string* role_name_;
  ::google::protobuf::int32 type_force_;
  ::google::protobuf::int32 type_count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoInnerPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoSignInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProtoFBItem : public ::google::protobuf::Message {
 public:
  ProtoFBItem();
  virtual ~ProtoFBItem();
  
  ProtoFBItem(const ProtoFBItem& from);
  
  inline ProtoFBItem& operator=(const ProtoFBItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoFBItem& default_instance();
  
  void Swap(ProtoFBItem* other);
  
  // implements Message ----------------------------------------------
  
  ProtoFBItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoFBItem& from);
  void MergeFrom(const ProtoFBItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 fb_id = 1;
  inline bool has_fb_id() const;
  inline void clear_fb_id();
  static const int kFbIdFieldNumber = 1;
  inline ::google::protobuf::int32 fb_id() const;
  inline void set_fb_id(::google::protobuf::int32 value);
  
  // optional int32 finish_times = 2;
  inline bool has_finish_times() const;
  inline void clear_finish_times();
  static const int kFinishTimesFieldNumber = 2;
  inline ::google::protobuf::int32 finish_times() const;
  inline void set_finish_times(::google::protobuf::int32 value);
  
  // optional int32 total_times = 3;
  inline bool has_total_times() const;
  inline void clear_total_times();
  static const int kTotalTimesFieldNumber = 3;
  inline ::google::protobuf::int32 total_times() const;
  inline void set_total_times(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoFBItem)
 private:
  inline void set_has_fb_id();
  inline void clear_has_fb_id();
  inline void set_has_finish_times();
  inline void clear_has_finish_times();
  inline void set_has_total_times();
  inline void clear_has_total_times();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 fb_id_;
  ::google::protobuf::int32 finish_times_;
  ::google::protobuf::int32 total_times_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoInnerPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoFBItem* default_instance_;
};
// -------------------------------------------------------------------

class RecordMoney : public ::google::protobuf::Message {
 public:
  RecordMoney();
  virtual ~RecordMoney();
  
  RecordMoney(const RecordMoney& from);
  
  inline RecordMoney& operator=(const RecordMoney& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordMoney& default_instance();
  
  void Swap(RecordMoney* other);
  
  // implements Message ----------------------------------------------
  
  RecordMoney* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecordMoney& from);
  void MergeFrom(const RecordMoney& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string table_name = 1;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const char* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  
  // optional int64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::int64 role_id() const;
  inline void set_role_id(::google::protobuf::int64 value);
  
  // optional int32 serial_type = 3;
  inline bool has_serial_type() const;
  inline void clear_serial_type();
  static const int kSerialTypeFieldNumber = 3;
  inline ::google::protobuf::int32 serial_type() const;
  inline void set_serial_type(::google::protobuf::int32 value);
  
  // optional int32 sub_serial_type = 4;
  inline bool has_sub_serial_type() const;
  inline void clear_sub_serial_type();
  static const int kSubSerialTypeFieldNumber = 4;
  inline ::google::protobuf::int32 sub_serial_type() const;
  inline void set_sub_serial_type(::google::protobuf::int32 value);
  
  // optional int32 sub_agent = 5;
  inline bool has_sub_agent() const;
  inline void clear_sub_agent();
  static const int kSubAgentFieldNumber = 5;
  inline ::google::protobuf::int32 sub_agent() const;
  inline void set_sub_agent(::google::protobuf::int32 value);
  
  // optional int32 money_type = 6;
  inline bool has_money_type() const;
  inline void clear_money_type();
  static const int kMoneyTypeFieldNumber = 6;
  inline ::google::protobuf::int32 money_type() const;
  inline void set_money_type(::google::protobuf::int32 value);
  
  // optional int32 money = 7;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 7;
  inline ::google::protobuf::int32 money() const;
  inline void set_money(::google::protobuf::int32 value);
  
  // optional int32 bind_money = 8;
  inline bool has_bind_money() const;
  inline void clear_bind_money();
  static const int kBindMoneyFieldNumber = 8;
  inline ::google::protobuf::int32 bind_money() const;
  inline void set_bind_money(::google::protobuf::int32 value);
  
  // optional int32 remain_money = 9;
  inline bool has_remain_money() const;
  inline void clear_remain_money();
  static const int kRemainMoneyFieldNumber = 9;
  inline ::google::protobuf::int32 remain_money() const;
  inline void set_remain_money(::google::protobuf::int32 value);
  
  // optional int32 remain_bind_money = 10;
  inline bool has_remain_bind_money() const;
  inline void clear_remain_bind_money();
  static const int kRemainBindMoneyFieldNumber = 10;
  inline ::google::protobuf::int32 remain_bind_money() const;
  inline void set_remain_bind_money(::google::protobuf::int32 value);
  
  // optional int32 time = 11;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 11;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);
  
  // optional int32 platform = 12;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 12;
  inline ::google::protobuf::int32 platform() const;
  inline void set_platform(::google::protobuf::int32 value);
  
  // optional int32 market = 13;
  inline bool has_market() const;
  inline void clear_market();
  static const int kMarketFieldNumber = 13;
  inline ::google::protobuf::int32 market() const;
  inline void set_market(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:RecordMoney)
 private:
  inline void set_has_table_name();
  inline void clear_has_table_name();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_serial_type();
  inline void clear_has_serial_type();
  inline void set_has_sub_serial_type();
  inline void clear_has_sub_serial_type();
  inline void set_has_sub_agent();
  inline void clear_has_sub_agent();
  inline void set_has_money_type();
  inline void clear_has_money_type();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_bind_money();
  inline void clear_has_bind_money();
  inline void set_has_remain_money();
  inline void clear_has_remain_money();
  inline void set_has_remain_bind_money();
  inline void clear_has_remain_bind_money();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_market();
  inline void clear_has_market();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* table_name_;
  ::google::protobuf::int64 role_id_;
  ::google::protobuf::int32 serial_type_;
  ::google::protobuf::int32 sub_serial_type_;
  ::google::protobuf::int32 sub_agent_;
  ::google::protobuf::int32 money_type_;
  ::google::protobuf::int32 money_;
  ::google::protobuf::int32 bind_money_;
  ::google::protobuf::int32 remain_money_;
  ::google::protobuf::int32 remain_bind_money_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 platform_;
  ::google::protobuf::int32 market_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoInnerPublic_2eproto();
  
  void InitAsDefaultInstance();
  static RecordMoney* default_instance_;
};
// -------------------------------------------------------------------

class RecordItem : public ::google::protobuf::Message {
 public:
  RecordItem();
  virtual ~RecordItem();
  
  RecordItem(const RecordItem& from);
  
  inline RecordItem& operator=(const RecordItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordItem& default_instance();
  
  void Swap(RecordItem* other);
  
  // implements Message ----------------------------------------------
  
  RecordItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecordItem& from);
  void MergeFrom(const RecordItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string table_name = 1;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const char* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  
  // optional int64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::int64 role_id() const;
  inline void set_role_id(::google::protobuf::int64 value);
  
  // optional int32 serial_type = 3;
  inline bool has_serial_type() const;
  inline void clear_serial_type();
  static const int kSerialTypeFieldNumber = 3;
  inline ::google::protobuf::int32 serial_type() const;
  inline void set_serial_type(::google::protobuf::int32 value);
  
  // optional int32 sub_serial_type = 4;
  inline bool has_sub_serial_type() const;
  inline void clear_sub_serial_type();
  static const int kSubSerialTypeFieldNumber = 4;
  inline ::google::protobuf::int32 sub_serial_type() const;
  inline void set_sub_serial_type(::google::protobuf::int32 value);
  
  // optional int32 sub_agent = 5;
  inline bool has_sub_agent() const;
  inline void clear_sub_agent();
  static const int kSubAgentFieldNumber = 5;
  inline ::google::protobuf::int32 sub_agent() const;
  inline void set_sub_agent(::google::protobuf::int32 value);
  
  // optional int32 item_id = 6;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 6;
  inline ::google::protobuf::int32 item_id() const;
  inline void set_item_id(::google::protobuf::int32 value);
  
  // optional int32 amount = 7;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 7;
  inline ::google::protobuf::int32 amount() const;
  inline void set_amount(::google::protobuf::int32 value);
  
  // optional int32 bind = 8;
  inline bool has_bind() const;
  inline void clear_bind();
  static const int kBindFieldNumber = 8;
  inline ::google::protobuf::int32 bind() const;
  inline void set_bind(::google::protobuf::int32 value);
  
  // optional int32 time = 9;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 9;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);
  
  // optional int32 platform = 10;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 10;
  inline ::google::protobuf::int32 platform() const;
  inline void set_platform(::google::protobuf::int32 value);
  
  // optional int32 market = 11;
  inline bool has_market() const;
  inline void clear_market();
  static const int kMarketFieldNumber = 11;
  inline ::google::protobuf::int32 market() const;
  inline void set_market(::google::protobuf::int32 value);
  
  // optional int64 src_role_id = 12;
  inline bool has_src_role_id() const;
  inline void clear_src_role_id();
  static const int kSrcRoleIdFieldNumber = 12;
  inline ::google::protobuf::int64 src_role_id() const;
  inline void set_src_role_id(::google::protobuf::int64 value);
  
  // optional int32 role_level = 13;
  inline bool has_role_level() const;
  inline void clear_role_level();
  static const int kRoleLevelFieldNumber = 13;
  inline ::google::protobuf::int32 role_level() const;
  inline void set_role_level(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:RecordItem)
 private:
  inline void set_has_table_name();
  inline void clear_has_table_name();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_serial_type();
  inline void clear_has_serial_type();
  inline void set_has_sub_serial_type();
  inline void clear_has_sub_serial_type();
  inline void set_has_sub_agent();
  inline void clear_has_sub_agent();
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_amount();
  inline void clear_has_amount();
  inline void set_has_bind();
  inline void clear_has_bind();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_market();
  inline void clear_has_market();
  inline void set_has_src_role_id();
  inline void clear_has_src_role_id();
  inline void set_has_role_level();
  inline void clear_has_role_level();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* table_name_;
  ::google::protobuf::int64 role_id_;
  ::google::protobuf::int32 serial_type_;
  ::google::protobuf::int32 sub_serial_type_;
  ::google::protobuf::int32 sub_agent_;
  ::google::protobuf::int32 item_id_;
  ::google::protobuf::int32 amount_;
  ::google::protobuf::int32 bind_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 platform_;
  ::google::protobuf::int64 src_role_id_;
  ::google::protobuf::int32 market_;
  ::google::protobuf::int32 role_level_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoInnerPublic_2eproto();
  
  void InitAsDefaultInstance();
  static RecordItem* default_instance_;
};
// -------------------------------------------------------------------

class RecordEquipment : public ::google::protobuf::Message {
 public:
  RecordEquipment();
  virtual ~RecordEquipment();
  
  RecordEquipment(const RecordEquipment& from);
  
  inline RecordEquipment& operator=(const RecordEquipment& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordEquipment& default_instance();
  
  void Swap(RecordEquipment* other);
  
  // implements Message ----------------------------------------------
  
  RecordEquipment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecordEquipment& from);
  void MergeFrom(const RecordEquipment& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string table_name = 1;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const char* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  
  // optional int64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::int64 role_id() const;
  inline void set_role_id(::google::protobuf::int64 value);
  
  // optional int32 serial_type = 3;
  inline bool has_serial_type() const;
  inline void clear_serial_type();
  static const int kSerialTypeFieldNumber = 3;
  inline ::google::protobuf::int32 serial_type() const;
  inline void set_serial_type(::google::protobuf::int32 value);
  
  // optional int32 sub_agent = 4;
  inline bool has_sub_agent() const;
  inline void clear_sub_agent();
  static const int kSubAgentFieldNumber = 4;
  inline ::google::protobuf::int32 sub_agent() const;
  inline void set_sub_agent(::google::protobuf::int32 value);
  
  // optional int32 equip_id = 5;
  inline bool has_equip_id() const;
  inline void clear_equip_id();
  static const int kEquipIdFieldNumber = 5;
  inline ::google::protobuf::int32 equip_id() const;
  inline void set_equip_id(::google::protobuf::int32 value);
  
  // optional int32 amount = 6;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 6;
  inline ::google::protobuf::int32 amount() const;
  inline void set_amount(::google::protobuf::int32 value);
  
  // optional int32 time = 7;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 7;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);
  
  // optional int32 bind = 8;
  inline bool has_bind() const;
  inline void clear_bind();
  static const int kBindFieldNumber = 8;
  inline ::google::protobuf::int32 bind() const;
  inline void set_bind(::google::protobuf::int32 value);
  
  // optional int32 index = 9;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 9;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // optional int32 pack_type = 10;
  inline bool has_pack_type() const;
  inline void clear_pack_type();
  static const int kPackTypeFieldNumber = 10;
  inline ::google::protobuf::int32 pack_type() const;
  inline void set_pack_type(::google::protobuf::int32 value);
  
  // optional int32 refine_level = 11;
  inline bool has_refine_level() const;
  inline void clear_refine_level();
  static const int kRefineLevelFieldNumber = 11;
  inline ::google::protobuf::int32 refine_level() const;
  inline void set_refine_level(::google::protobuf::int32 value);
  
  // optional int32 refine_degree = 12;
  inline bool has_refine_degree() const;
  inline void clear_refine_degree();
  static const int kRefineDegreeFieldNumber = 12;
  inline ::google::protobuf::int32 refine_degree() const;
  inline void set_refine_degree(::google::protobuf::int32 value);
  
  // optional int32 serial_sub_type = 13;
  inline bool has_serial_sub_type() const;
  inline void clear_serial_sub_type();
  static const int kSerialSubTypeFieldNumber = 13;
  inline ::google::protobuf::int32 serial_sub_type() const;
  inline void set_serial_sub_type(::google::protobuf::int32 value);
  
  // optional int32 platform = 14;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 14;
  inline ::google::protobuf::int32 platform() const;
  inline void set_platform(::google::protobuf::int32 value);
  
  // optional int32 luck_value = 15;
  inline bool has_luck_value() const;
  inline void clear_luck_value();
  static const int kLuckValueFieldNumber = 15;
  inline ::google::protobuf::int32 luck_value() const;
  inline void set_luck_value(::google::protobuf::int32 value);
  
  // optional string jewel_lists = 16;
  inline bool has_jewel_lists() const;
  inline void clear_jewel_lists();
  static const int kJewelListsFieldNumber = 16;
  inline const ::std::string& jewel_lists() const;
  inline void set_jewel_lists(const ::std::string& value);
  inline void set_jewel_lists(const char* value);
  inline void set_jewel_lists(const char* value, size_t size);
  inline ::std::string* mutable_jewel_lists();
  inline ::std::string* release_jewel_lists();
  
  // optional string cur_polish = 17;
  inline bool has_cur_polish() const;
  inline void clear_cur_polish();
  static const int kCurPolishFieldNumber = 17;
  inline const ::std::string& cur_polish() const;
  inline void set_cur_polish(const ::std::string& value);
  inline void set_cur_polish(const char* value);
  inline void set_cur_polish(const char* value, size_t size);
  inline ::std::string* mutable_cur_polish();
  inline ::std::string* release_cur_polish();
  
  // optional string extern_attr = 18;
  inline bool has_extern_attr() const;
  inline void clear_extern_attr();
  static const int kExternAttrFieldNumber = 18;
  inline const ::std::string& extern_attr() const;
  inline void set_extern_attr(const ::std::string& value);
  inline void set_extern_attr(const char* value);
  inline void set_extern_attr(const char* value, size_t size);
  inline ::std::string* mutable_extern_attr();
  inline ::std::string* release_extern_attr();
  
  // optional string molding = 19;
  inline bool has_molding() const;
  inline void clear_molding();
  static const int kMoldingFieldNumber = 19;
  inline const ::std::string& molding() const;
  inline void set_molding(const ::std::string& value);
  inline void set_molding(const char* value);
  inline void set_molding(const char* value, size_t size);
  inline ::std::string* mutable_molding();
  inline ::std::string* release_molding();
  
  // @@protoc_insertion_point(class_scope:RecordEquipment)
 private:
  inline void set_has_table_name();
  inline void clear_has_table_name();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_serial_type();
  inline void clear_has_serial_type();
  inline void set_has_sub_agent();
  inline void clear_has_sub_agent();
  inline void set_has_equip_id();
  inline void clear_has_equip_id();
  inline void set_has_amount();
  inline void clear_has_amount();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_bind();
  inline void clear_has_bind();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_pack_type();
  inline void clear_has_pack_type();
  inline void set_has_refine_level();
  inline void clear_has_refine_level();
  inline void set_has_refine_degree();
  inline void clear_has_refine_degree();
  inline void set_has_serial_sub_type();
  inline void clear_has_serial_sub_type();
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_luck_value();
  inline void clear_has_luck_value();
  inline void set_has_jewel_lists();
  inline void clear_has_jewel_lists();
  inline void set_has_cur_polish();
  inline void clear_has_cur_polish();
  inline void set_has_extern_attr();
  inline void clear_has_extern_attr();
  inline void set_has_molding();
  inline void clear_has_molding();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* table_name_;
  ::google::protobuf::int64 role_id_;
  ::google::protobuf::int32 serial_type_;
  ::google::protobuf::int32 sub_agent_;
  ::google::protobuf::int32 equip_id_;
  ::google::protobuf::int32 amount_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 bind_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 pack_type_;
  ::google::protobuf::int32 refine_level_;
  ::google::protobuf::int32 refine_degree_;
  ::google::protobuf::int32 serial_sub_type_;
  ::google::protobuf::int32 platform_;
  ::std::string* jewel_lists_;
  ::std::string* cur_polish_;
  ::std::string* extern_attr_;
  ::std::string* molding_;
  ::google::protobuf::int32 luck_value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoInnerPublic_2eproto();
  
  void InitAsDefaultInstance();
  static RecordEquipment* default_instance_;
};
// -------------------------------------------------------------------

class RecordPlayerLevel : public ::google::protobuf::Message {
 public:
  RecordPlayerLevel();
  virtual ~RecordPlayerLevel();
  
  RecordPlayerLevel(const RecordPlayerLevel& from);
  
  inline RecordPlayerLevel& operator=(const RecordPlayerLevel& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordPlayerLevel& default_instance();
  
  void Swap(RecordPlayerLevel* other);
  
  // implements Message ----------------------------------------------
  
  RecordPlayerLevel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecordPlayerLevel& from);
  void MergeFrom(const RecordPlayerLevel& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string table_name = 1;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const char* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  
  // optional int64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::int64 role_id() const;
  inline void set_role_id(::google::protobuf::int64 value);
  
  // optional int32 serial_type = 3;
  inline bool has_serial_type() const;
  inline void clear_serial_type();
  static const int kSerialTypeFieldNumber = 3;
  inline ::google::protobuf::int32 serial_type() const;
  inline void set_serial_type(::google::protobuf::int32 value);
  
  // optional int32 sub_agent = 4;
  inline bool has_sub_agent() const;
  inline void clear_sub_agent();
  static const int kSubAgentFieldNumber = 4;
  inline ::google::protobuf::int32 sub_agent() const;
  inline void set_sub_agent(::google::protobuf::int32 value);
  
  // optional int32 level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int32 time = 6;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 6;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);
  
  // optional int32 platform = 7;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 7;
  inline ::google::protobuf::int32 platform() const;
  inline void set_platform(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:RecordPlayerLevel)
 private:
  inline void set_has_table_name();
  inline void clear_has_table_name();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_serial_type();
  inline void clear_has_serial_type();
  inline void set_has_sub_agent();
  inline void clear_has_sub_agent();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_platform();
  inline void clear_has_platform();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* table_name_;
  ::google::protobuf::int64 role_id_;
  ::google::protobuf::int32 serial_type_;
  ::google::protobuf::int32 sub_agent_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 platform_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoInnerPublic_2eproto();
  
  void InitAsDefaultInstance();
  static RecordPlayerLevel* default_instance_;
};
// -------------------------------------------------------------------

class RecordOtherSerial : public ::google::protobuf::Message {
 public:
  RecordOtherSerial();
  virtual ~RecordOtherSerial();
  
  RecordOtherSerial(const RecordOtherSerial& from);
  
  inline RecordOtherSerial& operator=(const RecordOtherSerial& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordOtherSerial& default_instance();
  
  void Swap(RecordOtherSerial* other);
  
  // implements Message ----------------------------------------------
  
  RecordOtherSerial* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecordOtherSerial& from);
  void MergeFrom(const RecordOtherSerial& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string table_name = 1;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const char* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  
  // optional int64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::int64 role_id() const;
  inline void set_role_id(::google::protobuf::int64 value);
  
  // optional int32 serial_type = 3;
  inline bool has_serial_type() const;
  inline void clear_serial_type();
  static const int kSerialTypeFieldNumber = 3;
  inline ::google::protobuf::int32 serial_type() const;
  inline void set_serial_type(::google::protobuf::int32 value);
  
  // optional int32 sub_serial_type = 4;
  inline bool has_sub_serial_type() const;
  inline void clear_sub_serial_type();
  static const int kSubSerialTypeFieldNumber = 4;
  inline ::google::protobuf::int32 sub_serial_type() const;
  inline void set_sub_serial_type(::google::protobuf::int32 value);
  
  // optional int32 sub_agent = 5;
  inline bool has_sub_agent() const;
  inline void clear_sub_agent();
  static const int kSubAgentFieldNumber = 5;
  inline ::google::protobuf::int32 sub_agent() const;
  inline void set_sub_agent(::google::protobuf::int32 value);
  
  // optional int64 value = 6;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 6;
  inline ::google::protobuf::int64 value() const;
  inline void set_value(::google::protobuf::int64 value);
  
  // optional int64 ext1 = 7;
  inline bool has_ext1() const;
  inline void clear_ext1();
  static const int kExt1FieldNumber = 7;
  inline ::google::protobuf::int64 ext1() const;
  inline void set_ext1(::google::protobuf::int64 value);
  
  // optional int64 ext2 = 8;
  inline bool has_ext2() const;
  inline void clear_ext2();
  static const int kExt2FieldNumber = 8;
  inline ::google::protobuf::int64 ext2() const;
  inline void set_ext2(::google::protobuf::int64 value);
  
  // optional int32 time = 9;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 9;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);
  
  // optional int32 platform = 10;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 10;
  inline ::google::protobuf::int32 platform() const;
  inline void set_platform(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:RecordOtherSerial)
 private:
  inline void set_has_table_name();
  inline void clear_has_table_name();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_serial_type();
  inline void clear_has_serial_type();
  inline void set_has_sub_serial_type();
  inline void clear_has_sub_serial_type();
  inline void set_has_sub_agent();
  inline void clear_has_sub_agent();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_ext1();
  inline void clear_has_ext1();
  inline void set_has_ext2();
  inline void clear_has_ext2();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_platform();
  inline void clear_has_platform();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* table_name_;
  ::google::protobuf::int64 role_id_;
  ::google::protobuf::int32 serial_type_;
  ::google::protobuf::int32 sub_serial_type_;
  ::google::protobuf::int64 value_;
  ::google::protobuf::int64 ext1_;
  ::google::protobuf::int32 sub_agent_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int64 ext2_;
  ::google::protobuf::int32 platform_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoInnerPublic_2eproto();
  
  void InitAsDefaultInstance();
  static RecordOtherSerial* default_instance_;
};
// -------------------------------------------------------------------

class ProtoScriptRecord : public ::google::protobuf::Message {
 public:
  ProtoScriptRecord();
  virtual ~ProtoScriptRecord();
  
  ProtoScriptRecord(const ProtoScriptRecord& from);
  
  inline ProtoScriptRecord& operator=(const ProtoScriptRecord& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoScriptRecord& default_instance();
  
  void Swap(ProtoScriptRecord* other);
  
  // implements Message ----------------------------------------------
  
  ProtoScriptRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoScriptRecord& from);
  void MergeFrom(const ProtoScriptRecord& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 script_sort = 1;
  inline bool has_script_sort() const;
  inline void clear_script_sort();
  static const int kScriptSortFieldNumber = 1;
  inline ::google::protobuf::int32 script_sort() const;
  inline void set_script_sort(::google::protobuf::int32 value);
  
  // optional int32 used_times = 2;
  inline bool has_used_times() const;
  inline void clear_used_times();
  static const int kUsedTimesFieldNumber = 2;
  inline ::google::protobuf::int32 used_times() const;
  inline void set_used_times(::google::protobuf::int32 value);
  
  // optional int32 used_times_tick = 3;
  inline bool has_used_times_tick() const;
  inline void clear_used_times_tick();
  static const int kUsedTimesTickFieldNumber = 3;
  inline ::google::protobuf::int32 used_times_tick() const;
  inline void set_used_times_tick(::google::protobuf::int32 value);
  
  // optional int32 enter_script_tick = 4;
  inline bool has_enter_script_tick() const;
  inline void clear_enter_script_tick();
  static const int kEnterScriptTickFieldNumber = 4;
  inline ::google::protobuf::int32 enter_script_tick() const;
  inline void set_enter_script_tick(::google::protobuf::int32 value);
  
  // optional int64 progress_id = 5;
  inline bool has_progress_id() const;
  inline void clear_progress_id();
  static const int kProgressIdFieldNumber = 5;
  inline ::google::protobuf::int64 progress_id() const;
  inline void set_progress_id(::google::protobuf::int64 value);
  
  // optional int32 best_use_tick = 6;
  inline bool has_best_use_tick() const;
  inline void clear_best_use_tick();
  static const int kBestUseTickFieldNumber = 6;
  inline ::google::protobuf::int32 best_use_tick() const;
  inline void set_best_use_tick(::google::protobuf::int32 value);
  
  // optional int32 is_first_pass = 7;
  inline bool has_is_first_pass() const;
  inline void clear_is_first_pass();
  static const int kIsFirstPassFieldNumber = 7;
  inline ::google::protobuf::int32 is_first_pass() const;
  inline void set_is_first_pass(::google::protobuf::int32 value);
  
  // optional int32 buy_left_times = 8;
  inline bool has_buy_left_times() const;
  inline void clear_buy_left_times();
  static const int kBuyLeftTimesFieldNumber = 8;
  inline ::google::protobuf::int32 buy_left_times() const;
  inline void set_buy_left_times(::google::protobuf::int32 value);
  
  // optional int32 couple_buy_times = 9;
  inline bool has_couple_buy_times() const;
  inline void clear_couple_buy_times();
  static const int kCoupleBuyTimesFieldNumber = 9;
  inline ::google::protobuf::int32 couple_buy_times() const;
  inline void set_couple_buy_times(::google::protobuf::int32 value);
  
  // optional int32 day_pass_times = 10;
  inline bool has_day_pass_times() const;
  inline void clear_day_pass_times();
  static const int kDayPassTimesFieldNumber = 10;
  inline ::google::protobuf::int32 day_pass_times() const;
  inline void set_day_pass_times(::google::protobuf::int32 value);
  
  // optional int32 is_even_enter = 11;
  inline bool has_is_even_enter() const;
  inline void clear_is_even_enter();
  static const int kIsEvenEnterFieldNumber = 11;
  inline ::google::protobuf::int32 is_even_enter() const;
  inline void set_is_even_enter(::google::protobuf::int32 value);
  
  // optional int32 protect_beast_index = 12;
  inline bool has_protect_beast_index() const;
  inline void clear_protect_beast_index();
  static const int kProtectBeastIndexFieldNumber = 12;
  inline ::google::protobuf::int32 protect_beast_index() const;
  inline void set_protect_beast_index(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoScriptRecord)
 private:
  inline void set_has_script_sort();
  inline void clear_has_script_sort();
  inline void set_has_used_times();
  inline void clear_has_used_times();
  inline void set_has_used_times_tick();
  inline void clear_has_used_times_tick();
  inline void set_has_enter_script_tick();
  inline void clear_has_enter_script_tick();
  inline void set_has_progress_id();
  inline void clear_has_progress_id();
  inline void set_has_best_use_tick();
  inline void clear_has_best_use_tick();
  inline void set_has_is_first_pass();
  inline void clear_has_is_first_pass();
  inline void set_has_buy_left_times();
  inline void clear_has_buy_left_times();
  inline void set_has_couple_buy_times();
  inline void clear_has_couple_buy_times();
  inline void set_has_day_pass_times();
  inline void clear_has_day_pass_times();
  inline void set_has_is_even_enter();
  inline void clear_has_is_even_enter();
  inline void set_has_protect_beast_index();
  inline void clear_has_protect_beast_index();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 script_sort_;
  ::google::protobuf::int32 used_times_;
  ::google::protobuf::int32 used_times_tick_;
  ::google::protobuf::int32 enter_script_tick_;
  ::google::protobuf::int64 progress_id_;
  ::google::protobuf::int32 best_use_tick_;
  ::google::protobuf::int32 is_first_pass_;
  ::google::protobuf::int32 buy_left_times_;
  ::google::protobuf::int32 couple_buy_times_;
  ::google::protobuf::int32 day_pass_times_;
  ::google::protobuf::int32 is_even_enter_;
  ::google::protobuf::int32 protect_beast_index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoInnerPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoScriptRecord* default_instance_;
};
// -------------------------------------------------------------------

class ProtoLivenessTaskInfo : public ::google::protobuf::Message {
 public:
  ProtoLivenessTaskInfo();
  virtual ~ProtoLivenessTaskInfo();
  
  ProtoLivenessTaskInfo(const ProtoLivenessTaskInfo& from);
  
  inline ProtoLivenessTaskInfo& operator=(const ProtoLivenessTaskInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoLivenessTaskInfo& default_instance();
  
  void Swap(ProtoLivenessTaskInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProtoLivenessTaskInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoLivenessTaskInfo& from);
  void MergeFrom(const ProtoLivenessTaskInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 task_id = 1;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  inline ::google::protobuf::int32 task_id() const;
  inline void set_task_id(::google::protobuf::int32 value);
  
  // optional int32 status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);
  
  // optional int32 time_index = 3;
  inline bool has_time_index() const;
  inline void clear_time_index();
  static const int kTimeIndexFieldNumber = 3;
  inline ::google::protobuf::int32 time_index() const;
  inline void set_time_index(::google::protobuf::int32 value);
  
  // optional int32 num = 4;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 4;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);
  
  // optional int32 finish_num = 5;
  inline bool has_finish_num() const;
  inline void clear_finish_num();
  static const int kFinishNumFieldNumber = 5;
  inline ::google::protobuf::int32 finish_num() const;
  inline void set_finish_num(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoLivenessTaskInfo)
 private:
  inline void set_has_task_id();
  inline void clear_has_task_id();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_time_index();
  inline void clear_has_time_index();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_finish_num();
  inline void clear_has_finish_num();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 task_id_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 time_index_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 finish_num_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoInnerPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoLivenessTaskInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProtoExpRestoreRecord : public ::google::protobuf::Message {
 public:
  ProtoExpRestoreRecord();
  virtual ~ProtoExpRestoreRecord();
  
  ProtoExpRestoreRecord(const ProtoExpRestoreRecord& from);
  
  inline ProtoExpRestoreRecord& operator=(const ProtoExpRestoreRecord& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoExpRestoreRecord& default_instance();
  
  void Swap(ProtoExpRestoreRecord* other);
  
  // implements Message ----------------------------------------------
  
  ProtoExpRestoreRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoExpRestoreRecord& from);
  void MergeFrom(const ProtoExpRestoreRecord& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 date = 2;
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 2;
  inline ::google::protobuf::int32 date() const;
  inline void set_date(::google::protobuf::int32 value);
  
  // optional int32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // optional bool valid = 4;
  inline bool has_valid() const;
  inline void clear_valid();
  static const int kValidFieldNumber = 4;
  inline bool valid() const;
  inline void set_valid(bool value);
  
  // @@protoc_insertion_point(class_scope:ProtoExpRestoreRecord)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_date();
  inline void clear_has_date();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_valid();
  inline void clear_has_valid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 date_;
  ::google::protobuf::int32 count_;
  bool valid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoInnerPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoExpRestoreRecord* default_instance_;
};
// -------------------------------------------------------------------

class ProtoMagicalPolish : public ::google::protobuf::Message {
 public:
  ProtoMagicalPolish();
  virtual ~ProtoMagicalPolish();
  
  ProtoMagicalPolish(const ProtoMagicalPolish& from);
  
  inline ProtoMagicalPolish& operator=(const ProtoMagicalPolish& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoMagicalPolish& default_instance();
  
  void Swap(ProtoMagicalPolish* other);
  
  // implements Message ----------------------------------------------
  
  ProtoMagicalPolish* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoMagicalPolish& from);
  void MergeFrom(const ProtoMagicalPolish& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 magical_id = 1;
  inline bool has_magical_id() const;
  inline void clear_magical_id();
  static const int kMagicalIdFieldNumber = 1;
  inline ::google::protobuf::int32 magical_id() const;
  inline void set_magical_id(::google::protobuf::int32 value);
  
  // optional .ProtoMagicalInfo cur_use = 2;
  inline bool has_cur_use() const;
  inline void clear_cur_use();
  static const int kCurUseFieldNumber = 2;
  inline const ::ProtoMagicalInfo& cur_use() const;
  inline ::ProtoMagicalInfo* mutable_cur_use();
  inline ::ProtoMagicalInfo* release_cur_use();
  
  // optional .ProtoMagicalInfo single_record = 3;
  inline bool has_single_record() const;
  inline void clear_single_record();
  static const int kSingleRecordFieldNumber = 3;
  inline const ::ProtoMagicalInfo& single_record() const;
  inline ::ProtoMagicalInfo* mutable_single_record();
  inline ::ProtoMagicalInfo* release_single_record();
  
  // repeated .ProtoMagicalInfo batch_record = 4;
  inline int batch_record_size() const;
  inline void clear_batch_record();
  static const int kBatchRecordFieldNumber = 4;
  inline const ::ProtoMagicalInfo& batch_record(int index) const;
  inline ::ProtoMagicalInfo* mutable_batch_record(int index);
  inline ::ProtoMagicalInfo* add_batch_record();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoMagicalInfo >&
      batch_record() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoMagicalInfo >*
      mutable_batch_record();
  
  // @@protoc_insertion_point(class_scope:ProtoMagicalPolish)
 private:
  inline void set_has_magical_id();
  inline void clear_has_magical_id();
  inline void set_has_cur_use();
  inline void clear_has_cur_use();
  inline void set_has_single_record();
  inline void clear_has_single_record();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::ProtoMagicalInfo* cur_use_;
  ::ProtoMagicalInfo* single_record_;
  ::google::protobuf::RepeatedPtrField< ::ProtoMagicalInfo > batch_record_;
  ::google::protobuf::int32 magical_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoInnerPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoMagicalPolish* default_instance_;
};
// -------------------------------------------------------------------

class ProtoPieceInfo : public ::google::protobuf::Message {
 public:
  ProtoPieceInfo();
  virtual ~ProtoPieceInfo();
  
  ProtoPieceInfo(const ProtoPieceInfo& from);
  
  inline ProtoPieceInfo& operator=(const ProtoPieceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoPieceInfo& default_instance();
  
  void Swap(ProtoPieceInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProtoPieceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoPieceInfo& from);
  void MergeFrom(const ProtoPieceInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 chapter_key = 1;
  inline bool has_chapter_key() const;
  inline void clear_chapter_key();
  static const int kChapterKeyFieldNumber = 1;
  inline ::google::protobuf::int32 chapter_key() const;
  inline void set_chapter_key(::google::protobuf::int32 value);
  
  // optional int32 used_sec = 2;
  inline bool has_used_sec() const;
  inline void clear_used_sec();
  static const int kUsedSecFieldNumber = 2;
  inline ::google::protobuf::int32 used_sec() const;
  inline void set_used_sec(::google::protobuf::int32 value);
  
  // optional int32 used_times = 3;
  inline bool has_used_times() const;
  inline void clear_used_times();
  static const int kUsedTimesFieldNumber = 3;
  inline ::google::protobuf::int32 used_times() const;
  inline void set_used_times(::google::protobuf::int32 value);
  
  // optional int32 award_flag = 4;
  inline bool has_award_flag() const;
  inline void clear_award_flag();
  static const int kAwardFlagFieldNumber = 4;
  inline ::google::protobuf::int32 award_flag() const;
  inline void set_award_flag(::google::protobuf::int32 value);
  
  // repeated int32 chapter_item_id = 5;
  inline int chapter_item_id_size() const;
  inline void clear_chapter_item_id();
  static const int kChapterItemIdFieldNumber = 5;
  inline ::google::protobuf::int32 chapter_item_id(int index) const;
  inline void set_chapter_item_id(int index, ::google::protobuf::int32 value);
  inline void add_chapter_item_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      chapter_item_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_chapter_item_id();
  
  // repeated int32 chapter_item_num = 6;
  inline int chapter_item_num_size() const;
  inline void clear_chapter_item_num();
  static const int kChapterItemNumFieldNumber = 6;
  inline ::google::protobuf::int32 chapter_item_num(int index) const;
  inline void set_chapter_item_num(int index, ::google::protobuf::int32 value);
  inline void add_chapter_item_num(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      chapter_item_num() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_chapter_item_num();
  
  // optional int32 today_pass_flag = 7;
  inline bool has_today_pass_flag() const;
  inline void clear_today_pass_flag();
  static const int kTodayPassFlagFieldNumber = 7;
  inline ::google::protobuf::int32 today_pass_flag() const;
  inline void set_today_pass_flag(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoPieceInfo)
 private:
  inline void set_has_chapter_key();
  inline void clear_has_chapter_key();
  inline void set_has_used_sec();
  inline void clear_has_used_sec();
  inline void set_has_used_times();
  inline void clear_has_used_times();
  inline void set_has_award_flag();
  inline void clear_has_award_flag();
  inline void set_has_today_pass_flag();
  inline void clear_has_today_pass_flag();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 chapter_key_;
  ::google::protobuf::int32 used_sec_;
  ::google::protobuf::int32 used_times_;
  ::google::protobuf::int32 award_flag_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > chapter_item_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > chapter_item_num_;
  ::google::protobuf::int32 today_pass_flag_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoInnerPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoPieceInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProtoBrocastNewInfo : public ::google::protobuf::Message {
 public:
  ProtoBrocastNewInfo();
  virtual ~ProtoBrocastNewInfo();
  
  ProtoBrocastNewInfo(const ProtoBrocastNewInfo& from);
  
  inline ProtoBrocastNewInfo& operator=(const ProtoBrocastNewInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoBrocastNewInfo& default_instance();
  
  void Swap(ProtoBrocastNewInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProtoBrocastNewInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoBrocastNewInfo& from);
  void MergeFrom(const ProtoBrocastNewInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 shout_id = 1;
  inline bool has_shout_id() const;
  inline void clear_shout_id();
  static const int kShoutIdFieldNumber = 1;
  inline ::google::protobuf::int32 shout_id() const;
  inline void set_shout_id(::google::protobuf::int32 value);
  
  // optional int64 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::int64 group_id() const;
  inline void set_group_id(::google::protobuf::int64 value);
  
  // optional int32 channel_type = 3;
  inline bool has_channel_type() const;
  inline void clear_channel_type();
  static const int kChannelTypeFieldNumber = 3;
  inline ::google::protobuf::int32 channel_type() const;
  inline void set_channel_type(::google::protobuf::int32 value);
  
  // repeated .ProtoShoutDetail shout_detail_list = 4;
  inline int shout_detail_list_size() const;
  inline void clear_shout_detail_list();
  static const int kShoutDetailListFieldNumber = 4;
  inline const ::ProtoShoutDetail& shout_detail_list(int index) const;
  inline ::ProtoShoutDetail* mutable_shout_detail_list(int index);
  inline ::ProtoShoutDetail* add_shout_detail_list();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoShoutDetail >&
      shout_detail_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoShoutDetail >*
      mutable_shout_detail_list();
  
  // optional int32 scene_id = 5;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 5;
  inline ::google::protobuf::int32 scene_id() const;
  inline void set_scene_id(::google::protobuf::int32 value);
  
  // optional int64 role = 6;
  inline bool has_role() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 6;
  inline ::google::protobuf::int64 role() const;
  inline void set_role(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:ProtoBrocastNewInfo)
 private:
  inline void set_has_shout_id();
  inline void clear_has_shout_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_channel_type();
  inline void clear_has_channel_type();
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_role();
  inline void clear_has_role();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 group_id_;
  ::google::protobuf::int32 shout_id_;
  ::google::protobuf::int32 channel_type_;
  ::google::protobuf::RepeatedPtrField< ::ProtoShoutDetail > shout_detail_list_;
  ::google::protobuf::int64 role_;
  ::google::protobuf::int32 scene_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoInnerPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoBrocastNewInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProtoFashionTips : public ::google::protobuf::Message {
 public:
  ProtoFashionTips();
  virtual ~ProtoFashionTips();
  
  ProtoFashionTips(const ProtoFashionTips& from);
  
  inline ProtoFashionTips& operator=(const ProtoFashionTips& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoFashionTips& default_instance();
  
  void Swap(ProtoFashionTips* other);
  
  // implements Message ----------------------------------------------
  
  ProtoFashionTips* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoFashionTips& from);
  void MergeFrom(const ProtoFashionTips& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 fashion_id = 1;
  inline bool has_fashion_id() const;
  inline void clear_fashion_id();
  static const int kFashionIdFieldNumber = 1;
  inline ::google::protobuf::int32 fashion_id() const;
  inline void set_fashion_id(::google::protobuf::int32 value);
  
  // optional int32 fashion_force = 2;
  inline bool has_fashion_force() const;
  inline void clear_fashion_force();
  static const int kFashionForceFieldNumber = 2;
  inline ::google::protobuf::int32 fashion_force() const;
  inline void set_fashion_force(::google::protobuf::int32 value);
  
  // optional int32 left_sec = 3;
  inline bool has_left_sec() const;
  inline void clear_left_sec();
  static const int kLeftSecFieldNumber = 3;
  inline ::google::protobuf::int32 left_sec() const;
  inline void set_left_sec(::google::protobuf::int32 value);
  
  // optional int32 martial_id = 4;
  inline bool has_martial_id() const;
  inline void clear_martial_id();
  static const int kMartialIdFieldNumber = 4;
  inline ::google::protobuf::int32 martial_id() const;
  inline void set_martial_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoFashionTips)
 private:
  inline void set_has_fashion_id();
  inline void clear_has_fashion_id();
  inline void set_has_fashion_force();
  inline void clear_has_fashion_force();
  inline void set_has_left_sec();
  inline void clear_has_left_sec();
  inline void set_has_martial_id();
  inline void clear_has_martial_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 fashion_id_;
  ::google::protobuf::int32 fashion_force_;
  ::google::protobuf::int32 left_sec_;
  ::google::protobuf::int32 martial_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoInnerPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoFashionTips* default_instance_;
};
// -------------------------------------------------------------------

class ProtoPlayerTipSyncInfo : public ::google::protobuf::Message {
 public:
  ProtoPlayerTipSyncInfo();
  virtual ~ProtoPlayerTipSyncInfo();
  
  ProtoPlayerTipSyncInfo(const ProtoPlayerTipSyncInfo& from);
  
  inline ProtoPlayerTipSyncInfo& operator=(const ProtoPlayerTipSyncInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoPlayerTipSyncInfo& default_instance();
  
  void Swap(ProtoPlayerTipSyncInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProtoPlayerTipSyncInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoPlayerTipSyncInfo& from);
  void MergeFrom(const ProtoPlayerTipSyncInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 event_id = 1;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 1;
  inline ::google::protobuf::int32 event_id() const;
  inline void set_event_id(::google::protobuf::int32 value);
  
  // optional int32 arena_reward = 2;
  inline bool has_arena_reward() const;
  inline void clear_arena_reward();
  static const int kArenaRewardFieldNumber = 2;
  inline ::google::protobuf::int32 arena_reward() const;
  inline void set_arena_reward(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoPlayerTipSyncInfo)
 private:
  inline void set_has_event_id();
  inline void clear_has_event_id();
  inline void set_has_arena_reward();
  inline void clear_has_arena_reward();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 event_id_;
  ::google::protobuf::int32 arena_reward_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoInnerPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoPlayerTipSyncInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProtoSyncLabel : public ::google::protobuf::Message {
 public:
  ProtoSyncLabel();
  virtual ~ProtoSyncLabel();
  
  ProtoSyncLabel(const ProtoSyncLabel& from);
  
  inline ProtoSyncLabel& operator=(const ProtoSyncLabel& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoSyncLabel& default_instance();
  
  void Swap(ProtoSyncLabel* other);
  
  // implements Message ----------------------------------------------
  
  ProtoSyncLabel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoSyncLabel& from);
  void MergeFrom(const ProtoSyncLabel& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 label_id = 1;
  inline bool has_label_id() const;
  inline void clear_label_id();
  static const int kLabelIdFieldNumber = 1;
  inline ::google::protobuf::int32 label_id() const;
  inline void set_label_id(::google::protobuf::int32 value);
  
  // optional int64 expire_tick = 2;
  inline bool has_expire_tick() const;
  inline void clear_expire_tick();
  static const int kExpireTickFieldNumber = 2;
  inline ::google::protobuf::int64 expire_tick() const;
  inline void set_expire_tick(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:ProtoSyncLabel)
 private:
  inline void set_has_label_id();
  inline void clear_has_label_id();
  inline void set_has_expire_tick();
  inline void clear_has_expire_tick();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 expire_tick_;
  ::google::protobuf::int32 label_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoInnerPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoSyncLabel* default_instance_;
};
// -------------------------------------------------------------------

class RecordOnlineUsers : public ::google::protobuf::Message {
 public:
  RecordOnlineUsers();
  virtual ~RecordOnlineUsers();
  
  RecordOnlineUsers(const RecordOnlineUsers& from);
  
  inline RecordOnlineUsers& operator=(const RecordOnlineUsers& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordOnlineUsers& default_instance();
  
  void Swap(RecordOnlineUsers* other);
  
  // implements Message ----------------------------------------------
  
  RecordOnlineUsers* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecordOnlineUsers& from);
  void MergeFrom(const RecordOnlineUsers& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string table_name = 1;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const char* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  
  // optional int32 sub_agent = 2;
  inline bool has_sub_agent() const;
  inline void clear_sub_agent();
  static const int kSubAgentFieldNumber = 2;
  inline ::google::protobuf::int32 sub_agent() const;
  inline void set_sub_agent(::google::protobuf::int32 value);
  
  // optional int32 platform = 3;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 3;
  inline ::google::protobuf::int32 platform() const;
  inline void set_platform(::google::protobuf::int32 value);
  
  // optional int32 market = 4;
  inline bool has_market() const;
  inline void clear_market();
  static const int kMarketFieldNumber = 4;
  inline ::google::protobuf::int32 market() const;
  inline void set_market(::google::protobuf::int32 value);
  
  // optional int32 users = 5;
  inline bool has_users() const;
  inline void clear_users();
  static const int kUsersFieldNumber = 5;
  inline ::google::protobuf::int32 users() const;
  inline void set_users(::google::protobuf::int32 value);
  
  // optional int32 hooking_users = 6;
  inline bool has_hooking_users() const;
  inline void clear_hooking_users();
  static const int kHookingUsersFieldNumber = 6;
  inline ::google::protobuf::int32 hooking_users() const;
  inline void set_hooking_users(::google::protobuf::int32 value);
  
  // optional int32 time = 7;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 7;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:RecordOnlineUsers)
 private:
  inline void set_has_table_name();
  inline void clear_has_table_name();
  inline void set_has_sub_agent();
  inline void clear_has_sub_agent();
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_market();
  inline void clear_has_market();
  inline void set_has_users();
  inline void clear_has_users();
  inline void set_has_hooking_users();
  inline void clear_has_hooking_users();
  inline void set_has_time();
  inline void clear_has_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* table_name_;
  ::google::protobuf::int32 sub_agent_;
  ::google::protobuf::int32 platform_;
  ::google::protobuf::int32 market_;
  ::google::protobuf::int32 users_;
  ::google::protobuf::int32 hooking_users_;
  ::google::protobuf::int32 time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoInnerPublic_2eproto();
  
  void InitAsDefaultInstance();
  static RecordOnlineUsers* default_instance_;
};
// -------------------------------------------------------------------

class RecordLoginLogout : public ::google::protobuf::Message {
 public:
  RecordLoginLogout();
  virtual ~RecordLoginLogout();
  
  RecordLoginLogout(const RecordLoginLogout& from);
  
  inline RecordLoginLogout& operator=(const RecordLoginLogout& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordLoginLogout& default_instance();
  
  void Swap(RecordLoginLogout* other);
  
  // implements Message ----------------------------------------------
  
  RecordLoginLogout* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecordLoginLogout& from);
  void MergeFrom(const RecordLoginLogout& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string table_name = 1;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const char* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  
  // optional int64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::int64 role_id() const;
  inline void set_role_id(::google::protobuf::int64 value);
  
  // optional string role_name = 3;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 3;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  
  // optional int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional string account = 5;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 5;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  
  // optional string client_ip = 6;
  inline bool has_client_ip() const;
  inline void clear_client_ip();
  static const int kClientIpFieldNumber = 6;
  inline const ::std::string& client_ip() const;
  inline void set_client_ip(const ::std::string& value);
  inline void set_client_ip(const char* value);
  inline void set_client_ip(const char* value, size_t size);
  inline ::std::string* mutable_client_ip();
  inline ::std::string* release_client_ip();
  
  // optional int32 login_time = 7;
  inline bool has_login_time() const;
  inline void clear_login_time();
  static const int kLoginTimeFieldNumber = 7;
  inline ::google::protobuf::int32 login_time() const;
  inline void set_login_time(::google::protobuf::int32 value);
  
  // optional int32 logout_time = 8;
  inline bool has_logout_time() const;
  inline void clear_logout_time();
  static const int kLogoutTimeFieldNumber = 8;
  inline ::google::protobuf::int32 logout_time() const;
  inline void set_logout_time(::google::protobuf::int32 value);
  
  // optional int32 online_time = 9;
  inline bool has_online_time() const;
  inline void clear_online_time();
  static const int kOnlineTimeFieldNumber = 9;
  inline ::google::protobuf::int32 online_time() const;
  inline void set_online_time(::google::protobuf::int32 value);
  
  // optional int32 market = 10;
  inline bool has_market() const;
  inline void clear_market();
  static const int kMarketFieldNumber = 10;
  inline ::google::protobuf::int32 market() const;
  inline void set_market(::google::protobuf::int32 value);
  
  // optional int32 sub_agent = 11;
  inline bool has_sub_agent() const;
  inline void clear_sub_agent();
  static const int kSubAgentFieldNumber = 11;
  inline ::google::protobuf::int32 sub_agent() const;
  inline void set_sub_agent(::google::protobuf::int32 value);
  
  // optional int32 platform = 12;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 12;
  inline ::google::protobuf::int32 platform() const;
  inline void set_platform(::google::protobuf::int32 value);
  
  // optional string sys_model = 13;
  inline bool has_sys_model() const;
  inline void clear_sys_model();
  static const int kSysModelFieldNumber = 13;
  inline const ::std::string& sys_model() const;
  inline void set_sys_model(const ::std::string& value);
  inline void set_sys_model(const char* value);
  inline void set_sys_model(const char* value, size_t size);
  inline ::std::string* mutable_sys_model();
  inline ::std::string* release_sys_model();
  
  // optional string sys_version = 14;
  inline bool has_sys_version() const;
  inline void clear_sys_version();
  static const int kSysVersionFieldNumber = 14;
  inline const ::std::string& sys_version() const;
  inline void set_sys_version(const ::std::string& value);
  inline void set_sys_version(const char* value);
  inline void set_sys_version(const char* value, size_t size);
  inline ::std::string* mutable_sys_version();
  inline ::std::string* release_sys_version();
  
  // optional string mac = 15;
  inline bool has_mac() const;
  inline void clear_mac();
  static const int kMacFieldNumber = 15;
  inline const ::std::string& mac() const;
  inline void set_mac(const ::std::string& value);
  inline void set_mac(const char* value);
  inline void set_mac(const char* value, size_t size);
  inline ::std::string* mutable_mac();
  inline ::std::string* release_mac();
  
  // @@protoc_insertion_point(class_scope:RecordLoginLogout)
 private:
  inline void set_has_table_name();
  inline void clear_has_table_name();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_client_ip();
  inline void clear_has_client_ip();
  inline void set_has_login_time();
  inline void clear_has_login_time();
  inline void set_has_logout_time();
  inline void clear_has_logout_time();
  inline void set_has_online_time();
  inline void clear_has_online_time();
  inline void set_has_market();
  inline void clear_has_market();
  inline void set_has_sub_agent();
  inline void clear_has_sub_agent();
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_sys_model();
  inline void clear_has_sys_model();
  inline void set_has_sys_version();
  inline void clear_has_sys_version();
  inline void set_has_mac();
  inline void clear_has_mac();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* table_name_;
  ::google::protobuf::int64 role_id_;
  ::std::string* role_name_;
  ::std::string* account_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 login_time_;
  ::std::string* client_ip_;
  ::google::protobuf::int32 logout_time_;
  ::google::protobuf::int32 online_time_;
  ::google::protobuf::int32 market_;
  ::google::protobuf::int32 sub_agent_;
  ::std::string* sys_model_;
  ::std::string* sys_version_;
  ::std::string* mac_;
  ::google::protobuf::int32 platform_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoInnerPublic_2eproto();
  
  void InitAsDefaultInstance();
  static RecordLoginLogout* default_instance_;
};
// -------------------------------------------------------------------

class BackRechargeOrder : public ::google::protobuf::Message {
 public:
  BackRechargeOrder();
  virtual ~BackRechargeOrder();
  
  BackRechargeOrder(const BackRechargeOrder& from);
  
  inline BackRechargeOrder& operator=(const BackRechargeOrder& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BackRechargeOrder& default_instance();
  
  void Swap(BackRechargeOrder* other);
  
  // implements Message ----------------------------------------------
  
  BackRechargeOrder* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BackRechargeOrder& from);
  void MergeFrom(const BackRechargeOrder& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 order_id = 1;
  inline bool has_order_id() const;
  inline void clear_order_id();
  static const int kOrderIdFieldNumber = 1;
  inline ::google::protobuf::int32 order_id() const;
  inline void set_order_id(::google::protobuf::int32 value);
  
  // optional string order_num_str = 2;
  inline bool has_order_num_str() const;
  inline void clear_order_num_str();
  static const int kOrderNumStrFieldNumber = 2;
  inline const ::std::string& order_num_str() const;
  inline void set_order_num_str(const ::std::string& value);
  inline void set_order_num_str(const char* value);
  inline void set_order_num_str(const char* value, size_t size);
  inline ::std::string* mutable_order_num_str();
  inline ::std::string* release_order_num_str();
  
  // optional int32 channel_id = 3;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 3;
  inline ::google::protobuf::int32 channel_id() const;
  inline void set_channel_id(::google::protobuf::int32 value);
  
  // optional int32 money = 4;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 4;
  inline ::google::protobuf::int32 money() const;
  inline void set_money(::google::protobuf::int32 value);
  
  // optional int32 gold = 5;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 5;
  inline ::google::protobuf::int32 gold() const;
  inline void set_gold(::google::protobuf::int32 value);
  
  // optional string account = 6;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 6;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  
  // optional int64 tick = 7;
  inline bool has_tick() const;
  inline void clear_tick();
  static const int kTickFieldNumber = 7;
  inline ::google::protobuf::int64 tick() const;
  inline void set_tick(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:BackRechargeOrder)
 private:
  inline void set_has_order_id();
  inline void clear_has_order_id();
  inline void set_has_order_num_str();
  inline void clear_has_order_num_str();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_tick();
  inline void clear_has_tick();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* order_num_str_;
  ::google::protobuf::int32 order_id_;
  ::google::protobuf::int32 channel_id_;
  ::google::protobuf::int32 money_;
  ::google::protobuf::int32 gold_;
  ::std::string* account_;
  ::google::protobuf::int64 tick_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoInnerPublic_2eproto();
  
  void InitAsDefaultInstance();
  static BackRechargeOrder* default_instance_;
};
// -------------------------------------------------------------------

class ProtoERTimeStage : public ::google::protobuf::Message {
 public:
  ProtoERTimeStage();
  virtual ~ProtoERTimeStage();
  
  ProtoERTimeStage(const ProtoERTimeStage& from);
  
  inline ProtoERTimeStage& operator=(const ProtoERTimeStage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoERTimeStage& default_instance();
  
  void Swap(ProtoERTimeStage* other);
  
  // implements Message ----------------------------------------------
  
  ProtoERTimeStage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoERTimeStage& from);
  void MergeFrom(const ProtoERTimeStage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 time_sec = 1;
  inline bool has_time_sec() const;
  inline void clear_time_sec();
  static const int kTimeSecFieldNumber = 1;
  inline ::google::protobuf::int64 time_sec() const;
  inline void set_time_sec(::google::protobuf::int64 value);
  
  // optional int32 stage = 2;
  inline bool has_stage() const;
  inline void clear_stage();
  static const int kStageFieldNumber = 2;
  inline ::google::protobuf::int32 stage() const;
  inline void set_stage(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoERTimeStage)
 private:
  inline void set_has_time_sec();
  inline void clear_has_time_sec();
  inline void set_has_stage();
  inline void clear_has_stage();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 time_sec_;
  ::google::protobuf::int32 stage_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoInnerPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoERTimeStage* default_instance_;
};
// -------------------------------------------------------------------

class ProtoERScriptStageInfo : public ::google::protobuf::Message {
 public:
  ProtoERScriptStageInfo();
  virtual ~ProtoERScriptStageInfo();
  
  ProtoERScriptStageInfo(const ProtoERScriptStageInfo& from);
  
  inline ProtoERScriptStageInfo& operator=(const ProtoERScriptStageInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoERScriptStageInfo& default_instance();
  
  void Swap(ProtoERScriptStageInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProtoERScriptStageInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoERScriptStageInfo& from);
  void MergeFrom(const ProtoERScriptStageInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .ProtoERTimeStage TimeStageSet = 1;
  inline int timestageset_size() const;
  inline void clear_timestageset();
  static const int kTimeStageSetFieldNumber = 1;
  inline const ::ProtoERTimeStage& timestageset(int index) const;
  inline ::ProtoERTimeStage* mutable_timestageset(int index);
  inline ::ProtoERTimeStage* add_timestageset();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoERTimeStage >&
      timestageset() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoERTimeStage >*
      mutable_timestageset();
  
  // optional int32 script_sort = 2;
  inline bool has_script_sort() const;
  inline void clear_script_sort();
  static const int kScriptSortFieldNumber = 2;
  inline ::google::protobuf::int32 script_sort() const;
  inline void set_script_sort(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoERScriptStageInfo)
 private:
  inline void set_has_script_sort();
  inline void clear_has_script_sort();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::ProtoERTimeStage > timestageset_;
  ::google::protobuf::int32 script_sort_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoInnerPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoERScriptStageInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProtoOfflineBeast : public ::google::protobuf::Message {
 public:
  ProtoOfflineBeast();
  virtual ~ProtoOfflineBeast();
  
  ProtoOfflineBeast(const ProtoOfflineBeast& from);
  
  inline ProtoOfflineBeast& operator=(const ProtoOfflineBeast& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoOfflineBeast& default_instance();
  
  void Swap(ProtoOfflineBeast* other);
  
  // implements Message ----------------------------------------------
  
  ProtoOfflineBeast* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoOfflineBeast& from);
  void MergeFrom(const ProtoOfflineBeast& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 beast_id = 1;
  inline bool has_beast_id() const;
  inline void clear_beast_id();
  static const int kBeastIdFieldNumber = 1;
  inline ::google::protobuf::int64 beast_id() const;
  inline void set_beast_id(::google::protobuf::int64 value);
  
  // optional int32 beast_sort = 2;
  inline bool has_beast_sort() const;
  inline void clear_beast_sort();
  static const int kBeastSortFieldNumber = 2;
  inline ::google::protobuf::int32 beast_sort() const;
  inline void set_beast_sort(::google::protobuf::int32 value);
  
  // optional string beast_name = 3;
  inline bool has_beast_name() const;
  inline void clear_beast_name();
  static const int kBeastNameFieldNumber = 3;
  inline const ::std::string& beast_name() const;
  inline void set_beast_name(const ::std::string& value);
  inline void set_beast_name(const char* value);
  inline void set_beast_name(const char* value, size_t size);
  inline ::std::string* mutable_beast_name();
  inline ::std::string* release_beast_name();
  
  // repeated .ProtoPairObj skill_set = 4;
  inline int skill_set_size() const;
  inline void clear_skill_set();
  static const int kSkillSetFieldNumber = 4;
  inline const ::ProtoPairObj& skill_set(int index) const;
  inline ::ProtoPairObj* mutable_skill_set(int index);
  inline ::ProtoPairObj* add_skill_set();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >&
      skill_set() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >*
      mutable_skill_set();
  
  // repeated .ProtoPairObj prop_set = 5;
  inline int prop_set_size() const;
  inline void clear_prop_set();
  static const int kPropSetFieldNumber = 5;
  inline const ::ProtoPairObj& prop_set(int index) const;
  inline ::ProtoPairObj* mutable_prop_set(int index);
  inline ::ProtoPairObj* add_prop_set();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >&
      prop_set() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >*
      mutable_prop_set();
  
  // @@protoc_insertion_point(class_scope:ProtoOfflineBeast)
 private:
  inline void set_has_beast_id();
  inline void clear_has_beast_id();
  inline void set_has_beast_sort();
  inline void clear_has_beast_sort();
  inline void set_has_beast_name();
  inline void clear_has_beast_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 beast_id_;
  ::std::string* beast_name_;
  ::google::protobuf::RepeatedPtrField< ::ProtoPairObj > skill_set_;
  ::google::protobuf::RepeatedPtrField< ::ProtoPairObj > prop_set_;
  ::google::protobuf::int32 beast_sort_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoInnerPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoOfflineBeast* default_instance_;
};
// -------------------------------------------------------------------

class RecordTask : public ::google::protobuf::Message {
 public:
  RecordTask();
  virtual ~RecordTask();
  
  RecordTask(const RecordTask& from);
  
  inline RecordTask& operator=(const RecordTask& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordTask& default_instance();
  
  void Swap(RecordTask* other);
  
  // implements Message ----------------------------------------------
  
  RecordTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecordTask& from);
  void MergeFrom(const RecordTask& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string table_name = 1;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const char* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  
  // optional int64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::int64 role_id() const;
  inline void set_role_id(::google::protobuf::int64 value);
  
  // optional int32 serial_type = 3;
  inline bool has_serial_type() const;
  inline void clear_serial_type();
  static const int kSerialTypeFieldNumber = 3;
  inline ::google::protobuf::int32 serial_type() const;
  inline void set_serial_type(::google::protobuf::int32 value);
  
  // optional int32 platform = 4;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 4;
  inline ::google::protobuf::int32 platform() const;
  inline void set_platform(::google::protobuf::int32 value);
  
  // optional int32 sub_agent = 5;
  inline bool has_sub_agent() const;
  inline void clear_sub_agent();
  static const int kSubAgentFieldNumber = 5;
  inline ::google::protobuf::int32 sub_agent() const;
  inline void set_sub_agent(::google::protobuf::int32 value);
  
  // optional int32 market = 6;
  inline bool has_market() const;
  inline void clear_market();
  static const int kMarketFieldNumber = 6;
  inline ::google::protobuf::int32 market() const;
  inline void set_market(::google::protobuf::int32 value);
  
  // optional int32 task_id = 7;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 7;
  inline ::google::protobuf::int32 task_id() const;
  inline void set_task_id(::google::protobuf::int32 value);
  
  // optional int32 level = 8;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 8;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int32 time = 9;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 9;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:RecordTask)
 private:
  inline void set_has_table_name();
  inline void clear_has_table_name();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_serial_type();
  inline void clear_has_serial_type();
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_sub_agent();
  inline void clear_has_sub_agent();
  inline void set_has_market();
  inline void clear_has_market();
  inline void set_has_task_id();
  inline void clear_has_task_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_time();
  inline void clear_has_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* table_name_;
  ::google::protobuf::int64 role_id_;
  ::google::protobuf::int32 serial_type_;
  ::google::protobuf::int32 platform_;
  ::google::protobuf::int32 sub_agent_;
  ::google::protobuf::int32 market_;
  ::google::protobuf::int32 task_id_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoInnerPublic_2eproto();
  
  void InitAsDefaultInstance();
  static RecordTask* default_instance_;
};
// -------------------------------------------------------------------

class RecordRank : public ::google::protobuf::Message {
 public:
  RecordRank();
  virtual ~RecordRank();
  
  RecordRank(const RecordRank& from);
  
  inline RecordRank& operator=(const RecordRank& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordRank& default_instance();
  
  void Swap(RecordRank* other);
  
  // implements Message ----------------------------------------------
  
  RecordRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecordRank& from);
  void MergeFrom(const RecordRank& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string table_name = 1;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const char* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  
  // optional int64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::int64 role_id() const;
  inline void set_role_id(::google::protobuf::int64 value);
  
  // optional string role_name = 3;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 3;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  
  // optional int32 rank_type = 4;
  inline bool has_rank_type() const;
  inline void clear_rank_type();
  static const int kRankTypeFieldNumber = 4;
  inline ::google::protobuf::int32 rank_type() const;
  inline void set_rank_type(::google::protobuf::int32 value);
  
  // optional int32 value = 5;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 5;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);
  
  // optional int32 time = 6;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 6;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);
  
  // optional int64 ext_int_1 = 7;
  inline bool has_ext_int_1() const;
  inline void clear_ext_int_1();
  static const int kExtInt1FieldNumber = 7;
  inline ::google::protobuf::int64 ext_int_1() const;
  inline void set_ext_int_1(::google::protobuf::int64 value);
  
  // optional int64 ext_int_2 = 8;
  inline bool has_ext_int_2() const;
  inline void clear_ext_int_2();
  static const int kExtInt2FieldNumber = 8;
  inline ::google::protobuf::int64 ext_int_2() const;
  inline void set_ext_int_2(::google::protobuf::int64 value);
  
  // optional string ext_str_1 = 9;
  inline bool has_ext_str_1() const;
  inline void clear_ext_str_1();
  static const int kExtStr1FieldNumber = 9;
  inline const ::std::string& ext_str_1() const;
  inline void set_ext_str_1(const ::std::string& value);
  inline void set_ext_str_1(const char* value);
  inline void set_ext_str_1(const char* value, size_t size);
  inline ::std::string* mutable_ext_str_1();
  inline ::std::string* release_ext_str_1();
  
  // optional int32 vip = 10;
  inline bool has_vip() const;
  inline void clear_vip();
  static const int kVipFieldNumber = 10;
  inline ::google::protobuf::int32 vip() const;
  inline void set_vip(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:RecordRank)
 private:
  inline void set_has_table_name();
  inline void clear_has_table_name();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_rank_type();
  inline void clear_has_rank_type();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_ext_int_1();
  inline void clear_has_ext_int_1();
  inline void set_has_ext_int_2();
  inline void clear_has_ext_int_2();
  inline void set_has_ext_str_1();
  inline void clear_has_ext_str_1();
  inline void set_has_vip();
  inline void clear_has_vip();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* table_name_;
  ::google::protobuf::int64 role_id_;
  ::std::string* role_name_;
  ::google::protobuf::int32 rank_type_;
  ::google::protobuf::int32 value_;
  ::google::protobuf::int64 ext_int_1_;
  ::google::protobuf::int64 ext_int_2_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 vip_;
  ::std::string* ext_str_1_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoInnerPublic_2eproto();
  
  void InitAsDefaultInstance();
  static RecordRank* default_instance_;
};
// -------------------------------------------------------------------

class RecordMail : public ::google::protobuf::Message {
 public:
  RecordMail();
  virtual ~RecordMail();
  
  RecordMail(const RecordMail& from);
  
  inline RecordMail& operator=(const RecordMail& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordMail& default_instance();
  
  void Swap(RecordMail* other);
  
  // implements Message ----------------------------------------------
  
  RecordMail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecordMail& from);
  void MergeFrom(const RecordMail& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string table_name = 1;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const char* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  
  // optional int64 mail_index = 2;
  inline bool has_mail_index() const;
  inline void clear_mail_index();
  static const int kMailIndexFieldNumber = 2;
  inline ::google::protobuf::int64 mail_index() const;
  inline void set_mail_index(::google::protobuf::int64 value);
  
  // optional int64 sender_id = 3;
  inline bool has_sender_id() const;
  inline void clear_sender_id();
  static const int kSenderIdFieldNumber = 3;
  inline ::google::protobuf::int64 sender_id() const;
  inline void set_sender_id(::google::protobuf::int64 value);
  
  // optional int64 receiver_id = 4;
  inline bool has_receiver_id() const;
  inline void clear_receiver_id();
  static const int kReceiverIdFieldNumber = 4;
  inline ::google::protobuf::int64 receiver_id() const;
  inline void set_receiver_id(::google::protobuf::int64 value);
  
  // optional int64 send_tick = 5;
  inline bool has_send_tick() const;
  inline void clear_send_tick();
  static const int kSendTickFieldNumber = 5;
  inline ::google::protobuf::int64 send_tick() const;
  inline void set_send_tick(::google::protobuf::int64 value);
  
  // optional int64 read_tick = 6;
  inline bool has_read_tick() const;
  inline void clear_read_tick();
  static const int kReadTickFieldNumber = 6;
  inline ::google::protobuf::int64 read_tick() const;
  inline void set_read_tick(::google::protobuf::int64 value);
  
  // optional int32 mail_type = 7;
  inline bool has_mail_type() const;
  inline void clear_mail_type();
  static const int kMailTypeFieldNumber = 7;
  inline ::google::protobuf::int32 mail_type() const;
  inline void set_mail_type(::google::protobuf::int32 value);
  
  // optional int32 has_read = 8;
  inline bool has_has_read() const;
  inline void clear_has_read();
  static const int kHasReadFieldNumber = 8;
  inline ::google::protobuf::int32 has_read() const;
  inline void set_has_read(::google::protobuf::int32 value);
  
  // optional string receiver_name = 9;
  inline bool has_receiver_name() const;
  inline void clear_receiver_name();
  static const int kReceiverNameFieldNumber = 9;
  inline const ::std::string& receiver_name() const;
  inline void set_receiver_name(const ::std::string& value);
  inline void set_receiver_name(const char* value);
  inline void set_receiver_name(const char* value, size_t size);
  inline ::std::string* mutable_receiver_name();
  inline ::std::string* release_receiver_name();
  
  // optional string sender_name = 10;
  inline bool has_sender_name() const;
  inline void clear_sender_name();
  static const int kSenderNameFieldNumber = 10;
  inline const ::std::string& sender_name() const;
  inline void set_sender_name(const ::std::string& value);
  inline void set_sender_name(const char* value);
  inline void set_sender_name(const char* value, size_t size);
  inline ::std::string* mutable_sender_name();
  inline ::std::string* release_sender_name();
  
  // optional string title = 11;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 11;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  
  // optional string content = 12;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 12;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  
  // optional int32 serial_type = 13;
  inline bool has_serial_type() const;
  inline void clear_serial_type();
  static const int kSerialTypeFieldNumber = 13;
  inline ::google::protobuf::int32 serial_type() const;
  inline void set_serial_type(::google::protobuf::int32 value);
  
  // optional int32 platform = 14;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 14;
  inline ::google::protobuf::int32 platform() const;
  inline void set_platform(::google::protobuf::int32 value);
  
  // optional int32 sub_agent = 15;
  inline bool has_sub_agent() const;
  inline void clear_sub_agent();
  static const int kSubAgentFieldNumber = 15;
  inline ::google::protobuf::int32 sub_agent() const;
  inline void set_sub_agent(::google::protobuf::int32 value);
  
  // optional int32 attach_gold = 16;
  inline bool has_attach_gold() const;
  inline void clear_attach_gold();
  static const int kAttachGoldFieldNumber = 16;
  inline ::google::protobuf::int32 attach_gold() const;
  inline void set_attach_gold(::google::protobuf::int32 value);
  
  // optional int32 attach_copper = 17;
  inline bool has_attach_copper() const;
  inline void clear_attach_copper();
  static const int kAttachCopperFieldNumber = 17;
  inline ::google::protobuf::int32 attach_copper() const;
  inline void set_attach_copper(::google::protobuf::int32 value);
  
  // optional int32 attach_id_1 = 18;
  inline bool has_attach_id_1() const;
  inline void clear_attach_id_1();
  static const int kAttachId1FieldNumber = 18;
  inline ::google::protobuf::int32 attach_id_1() const;
  inline void set_attach_id_1(::google::protobuf::int32 value);
  
  // optional int32 attach_amount_1 = 19;
  inline bool has_attach_amount_1() const;
  inline void clear_attach_amount_1();
  static const int kAttachAmount1FieldNumber = 19;
  inline ::google::protobuf::int32 attach_amount_1() const;
  inline void set_attach_amount_1(::google::protobuf::int32 value);
  
  // optional int32 attach_id_2 = 20;
  inline bool has_attach_id_2() const;
  inline void clear_attach_id_2();
  static const int kAttachId2FieldNumber = 20;
  inline ::google::protobuf::int32 attach_id_2() const;
  inline void set_attach_id_2(::google::protobuf::int32 value);
  
  // optional int32 attach_amount_2 = 21;
  inline bool has_attach_amount_2() const;
  inline void clear_attach_amount_2();
  static const int kAttachAmount2FieldNumber = 21;
  inline ::google::protobuf::int32 attach_amount_2() const;
  inline void set_attach_amount_2(::google::protobuf::int32 value);
  
  // optional int32 attach_id_3 = 22;
  inline bool has_attach_id_3() const;
  inline void clear_attach_id_3();
  static const int kAttachId3FieldNumber = 22;
  inline ::google::protobuf::int32 attach_id_3() const;
  inline void set_attach_id_3(::google::protobuf::int32 value);
  
  // optional int32 attach_amount_3 = 23;
  inline bool has_attach_amount_3() const;
  inline void clear_attach_amount_3();
  static const int kAttachAmount3FieldNumber = 23;
  inline ::google::protobuf::int32 attach_amount_3() const;
  inline void set_attach_amount_3(::google::protobuf::int32 value);
  
  // optional int32 attach_id_4 = 24;
  inline bool has_attach_id_4() const;
  inline void clear_attach_id_4();
  static const int kAttachId4FieldNumber = 24;
  inline ::google::protobuf::int32 attach_id_4() const;
  inline void set_attach_id_4(::google::protobuf::int32 value);
  
  // optional int32 attach_amount_4 = 25;
  inline bool has_attach_amount_4() const;
  inline void clear_attach_amount_4();
  static const int kAttachAmount4FieldNumber = 25;
  inline ::google::protobuf::int32 attach_amount_4() const;
  inline void set_attach_amount_4(::google::protobuf::int32 value);
  
  // optional int32 attach_bind_gold = 26;
  inline bool has_attach_bind_gold() const;
  inline void clear_attach_bind_gold();
  static const int kAttachBindGoldFieldNumber = 26;
  inline ::google::protobuf::int32 attach_bind_gold() const;
  inline void set_attach_bind_gold(::google::protobuf::int32 value);
  
  // optional int32 attach_bind_copper = 27;
  inline bool has_attach_bind_copper() const;
  inline void clear_attach_bind_copper();
  static const int kAttachBindCopperFieldNumber = 27;
  inline ::google::protobuf::int32 attach_bind_copper() const;
  inline void set_attach_bind_copper(::google::protobuf::int32 value);
  
  // optional int32 mail_format = 28;
  inline bool has_mail_format() const;
  inline void clear_mail_format();
  static const int kMailFormatFieldNumber = 28;
  inline ::google::protobuf::int32 mail_format() const;
  inline void set_mail_format(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:RecordMail)
 private:
  inline void set_has_table_name();
  inline void clear_has_table_name();
  inline void set_has_mail_index();
  inline void clear_has_mail_index();
  inline void set_has_sender_id();
  inline void clear_has_sender_id();
  inline void set_has_receiver_id();
  inline void clear_has_receiver_id();
  inline void set_has_send_tick();
  inline void clear_has_send_tick();
  inline void set_has_read_tick();
  inline void clear_has_read_tick();
  inline void set_has_mail_type();
  inline void clear_has_mail_type();
  inline void set_has_has_read();
  inline void clear_has_has_read();
  inline void set_has_receiver_name();
  inline void clear_has_receiver_name();
  inline void set_has_sender_name();
  inline void clear_has_sender_name();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_serial_type();
  inline void clear_has_serial_type();
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_sub_agent();
  inline void clear_has_sub_agent();
  inline void set_has_attach_gold();
  inline void clear_has_attach_gold();
  inline void set_has_attach_copper();
  inline void clear_has_attach_copper();
  inline void set_has_attach_id_1();
  inline void clear_has_attach_id_1();
  inline void set_has_attach_amount_1();
  inline void clear_has_attach_amount_1();
  inline void set_has_attach_id_2();
  inline void clear_has_attach_id_2();
  inline void set_has_attach_amount_2();
  inline void clear_has_attach_amount_2();
  inline void set_has_attach_id_3();
  inline void clear_has_attach_id_3();
  inline void set_has_attach_amount_3();
  inline void clear_has_attach_amount_3();
  inline void set_has_attach_id_4();
  inline void clear_has_attach_id_4();
  inline void set_has_attach_amount_4();
  inline void clear_has_attach_amount_4();
  inline void set_has_attach_bind_gold();
  inline void clear_has_attach_bind_gold();
  inline void set_has_attach_bind_copper();
  inline void clear_has_attach_bind_copper();
  inline void set_has_mail_format();
  inline void clear_has_mail_format();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* table_name_;
  ::google::protobuf::int64 mail_index_;
  ::google::protobuf::int64 sender_id_;
  ::google::protobuf::int64 receiver_id_;
  ::google::protobuf::int64 send_tick_;
  ::google::protobuf::int64 read_tick_;
  ::google::protobuf::int32 mail_type_;
  ::google::protobuf::int32 has_read_;
  ::std::string* receiver_name_;
  ::std::string* sender_name_;
  ::std::string* title_;
  ::std::string* content_;
  ::google::protobuf::int32 serial_type_;
  ::google::protobuf::int32 platform_;
  ::google::protobuf::int32 sub_agent_;
  ::google::protobuf::int32 attach_gold_;
  ::google::protobuf::int32 attach_copper_;
  ::google::protobuf::int32 attach_id_1_;
  ::google::protobuf::int32 attach_amount_1_;
  ::google::protobuf::int32 attach_id_2_;
  ::google::protobuf::int32 attach_amount_2_;
  ::google::protobuf::int32 attach_id_3_;
  ::google::protobuf::int32 attach_amount_3_;
  ::google::protobuf::int32 attach_id_4_;
  ::google::protobuf::int32 attach_amount_4_;
  ::google::protobuf::int32 attach_bind_gold_;
  ::google::protobuf::int32 attach_bind_copper_;
  ::google::protobuf::int32 mail_format_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(28 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoInnerPublic_2eproto();
  
  void InitAsDefaultInstance();
  static RecordMail* default_instance_;
};
// -------------------------------------------------------------------

class ProtoOnSaleItem : public ::google::protobuf::Message {
 public:
  ProtoOnSaleItem();
  virtual ~ProtoOnSaleItem();
  
  ProtoOnSaleItem(const ProtoOnSaleItem& from);
  
  inline ProtoOnSaleItem& operator=(const ProtoOnSaleItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoOnSaleItem& default_instance();
  
  void Swap(ProtoOnSaleItem* other);
  
  // implements Message ----------------------------------------------
  
  ProtoOnSaleItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoOnSaleItem& from);
  void MergeFrom(const ProtoOnSaleItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 item_id = 1;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::int32 item_id() const;
  inline void set_item_id(::google::protobuf::int32 value);
  
  // optional int32 item_bind = 2;
  inline bool has_item_bind() const;
  inline void clear_item_bind();
  static const int kItemBindFieldNumber = 2;
  inline ::google::protobuf::int32 item_bind() const;
  inline void set_item_bind(::google::protobuf::int32 value);
  
  // repeated int32 item_type = 3;
  inline int item_type_size() const;
  inline void clear_item_type();
  static const int kItemTypeFieldNumber = 3;
  inline ::google::protobuf::int32 item_type(int index) const;
  inline void set_item_type(int index, ::google::protobuf::int32 value);
  inline void add_item_type(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      item_type() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_item_type();
  
  // optional int32 shop_type = 4;
  inline bool has_shop_type() const;
  inline void clear_shop_type();
  static const int kShopTypeFieldNumber = 4;
  inline ::google::protobuf::int32 shop_type() const;
  inline void set_shop_type(::google::protobuf::int32 value);
  
  // optional int32 money_type = 5;
  inline bool has_money_type() const;
  inline void clear_money_type();
  static const int kMoneyTypeFieldNumber = 5;
  inline ::google::protobuf::int32 money_type() const;
  inline void set_money_type(::google::protobuf::int32 value);
  
  // optional int32 src_price = 6;
  inline bool has_src_price() const;
  inline void clear_src_price();
  static const int kSrcPriceFieldNumber = 6;
  inline ::google::protobuf::int32 src_price() const;
  inline void set_src_price(::google::protobuf::int32 value);
  
  // optional int32 cur_price = 7;
  inline bool has_cur_price() const;
  inline void clear_cur_price();
  static const int kCurPriceFieldNumber = 7;
  inline ::google::protobuf::int32 cur_price() const;
  inline void set_cur_price(::google::protobuf::int32 value);
  
  // optional int32 start_tick = 8;
  inline bool has_start_tick() const;
  inline void clear_start_tick();
  static const int kStartTickFieldNumber = 8;
  inline ::google::protobuf::int32 start_tick() const;
  inline void set_start_tick(::google::protobuf::int32 value);
  
  // optional int32 end_tick = 9;
  inline bool has_end_tick() const;
  inline void clear_end_tick();
  static const int kEndTickFieldNumber = 9;
  inline ::google::protobuf::int32 end_tick() const;
  inline void set_end_tick(::google::protobuf::int32 value);
  
  // optional .ProtoPairObj need_item = 10;
  inline bool has_need_item() const;
  inline void clear_need_item();
  static const int kNeedItemFieldNumber = 10;
  inline const ::ProtoPairObj& need_item() const;
  inline ::ProtoPairObj* mutable_need_item();
  inline ::ProtoPairObj* release_need_item();
  
  // @@protoc_insertion_point(class_scope:ProtoOnSaleItem)
 private:
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_item_bind();
  inline void clear_has_item_bind();
  inline void set_has_shop_type();
  inline void clear_has_shop_type();
  inline void set_has_money_type();
  inline void clear_has_money_type();
  inline void set_has_src_price();
  inline void clear_has_src_price();
  inline void set_has_cur_price();
  inline void clear_has_cur_price();
  inline void set_has_start_tick();
  inline void clear_has_start_tick();
  inline void set_has_end_tick();
  inline void clear_has_end_tick();
  inline void set_has_need_item();
  inline void clear_has_need_item();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 item_id_;
  ::google::protobuf::int32 item_bind_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > item_type_;
  ::google::protobuf::int32 shop_type_;
  ::google::protobuf::int32 money_type_;
  ::google::protobuf::int32 src_price_;
  ::google::protobuf::int32 cur_price_;
  ::google::protobuf::int32 start_tick_;
  ::google::protobuf::int32 end_tick_;
  ::ProtoPairObj* need_item_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoInnerPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoOnSaleItem* default_instance_;
};
// -------------------------------------------------------------------

class RecordChat : public ::google::protobuf::Message {
 public:
  RecordChat();
  virtual ~RecordChat();
  
  RecordChat(const RecordChat& from);
  
  inline RecordChat& operator=(const RecordChat& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordChat& default_instance();
  
  void Swap(RecordChat* other);
  
  // implements Message ----------------------------------------------
  
  RecordChat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecordChat& from);
  void MergeFrom(const RecordChat& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string table_name = 1;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const char* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  
  // optional int64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::int64 role_id() const;
  inline void set_role_id(::google::protobuf::int64 value);
  
  // optional int32 serial_type = 3;
  inline bool has_serial_type() const;
  inline void clear_serial_type();
  static const int kSerialTypeFieldNumber = 3;
  inline ::google::protobuf::int32 serial_type() const;
  inline void set_serial_type(::google::protobuf::int32 value);
  
  // optional int32 time = 4;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 4;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);
  
  // optional string content = 5;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 5;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  
  // optional int32 sub_agent = 6;
  inline bool has_sub_agent() const;
  inline void clear_sub_agent();
  static const int kSubAgentFieldNumber = 6;
  inline ::google::protobuf::int32 sub_agent() const;
  inline void set_sub_agent(::google::protobuf::int32 value);
  
  // optional string server_flag = 7;
  inline bool has_server_flag() const;
  inline void clear_server_flag();
  static const int kServerFlagFieldNumber = 7;
  inline const ::std::string& server_flag() const;
  inline void set_server_flag(const ::std::string& value);
  inline void set_server_flag(const char* value);
  inline void set_server_flag(const char* value, size_t size);
  inline ::std::string* mutable_server_flag();
  inline ::std::string* release_server_flag();
  
  // optional int32 market = 8;
  inline bool has_market() const;
  inline void clear_market();
  static const int kMarketFieldNumber = 8;
  inline ::google::protobuf::int32 market() const;
  inline void set_market(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:RecordChat)
 private:
  inline void set_has_table_name();
  inline void clear_has_table_name();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_serial_type();
  inline void clear_has_serial_type();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_sub_agent();
  inline void clear_has_sub_agent();
  inline void set_has_server_flag();
  inline void clear_has_server_flag();
  inline void set_has_market();
  inline void clear_has_market();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* table_name_;
  ::google::protobuf::int64 role_id_;
  ::google::protobuf::int32 serial_type_;
  ::google::protobuf::int32 time_;
  ::std::string* content_;
  ::std::string* server_flag_;
  ::google::protobuf::int32 sub_agent_;
  ::google::protobuf::int32 market_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoInnerPublic_2eproto();
  
  void InitAsDefaultInstance();
  static RecordChat* default_instance_;
};
// -------------------------------------------------------------------

class ProtoLottery : public ::google::protobuf::Message {
 public:
  ProtoLottery();
  virtual ~ProtoLottery();
  
  ProtoLottery(const ProtoLottery& from);
  
  inline ProtoLottery& operator=(const ProtoLottery& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoLottery& default_instance();
  
  void Swap(ProtoLottery* other);
  
  // implements Message ----------------------------------------------
  
  ProtoLottery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoLottery& from);
  void MergeFrom(const ProtoLottery& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 gold_times = 1;
  inline bool has_gold_times() const;
  inline void clear_gold_times();
  static const int kGoldTimesFieldNumber = 1;
  inline ::google::protobuf::int32 gold_times() const;
  inline void set_gold_times(::google::protobuf::int32 value);
  
  // optional int32 gold_free_times = 2;
  inline bool has_gold_free_times() const;
  inline void clear_gold_free_times();
  static const int kGoldFreeTimesFieldNumber = 2;
  inline ::google::protobuf::int32 gold_free_times() const;
  inline void set_gold_free_times(::google::protobuf::int32 value);
  
  // optional int32 free_times = 3;
  inline bool has_free_times() const;
  inline void clear_free_times();
  static const int kFreeTimesFieldNumber = 3;
  inline ::google::protobuf::int32 free_times() const;
  inline void set_free_times(::google::protobuf::int32 value);
  
  // optional int32 total_score = 4;
  inline bool has_total_score() const;
  inline void clear_total_score();
  static const int kTotalScoreFieldNumber = 4;
  inline ::google::protobuf::int32 total_score() const;
  inline void set_total_score(::google::protobuf::int32 value);
  
  // optional int32 total_gold = 5;
  inline bool has_total_gold() const;
  inline void clear_total_gold();
  static const int kTotalGoldFieldNumber = 5;
  inline ::google::protobuf::int32 total_gold() const;
  inline void set_total_gold(::google::protobuf::int32 value);
  
  // optional int32 left_free_sec = 6;
  inline bool has_left_free_sec() const;
  inline void clear_left_free_sec();
  static const int kLeftFreeSecFieldNumber = 6;
  inline ::google::protobuf::int32 left_free_sec() const;
  inline void set_left_free_sec(::google::protobuf::int32 value);
  
  // optional int32 next_free_tick = 7;
  inline bool has_next_free_tick() const;
  inline void clear_next_free_tick();
  static const int kNextFreeTickFieldNumber = 7;
  inline ::google::protobuf::int32 next_free_tick() const;
  inline void set_next_free_tick(::google::protobuf::int32 value);
  
  // optional int32 protect_gold = 8;
  inline bool has_protect_gold() const;
  inline void clear_protect_gold();
  static const int kProtectGoldFieldNumber = 8;
  inline ::google::protobuf::int32 protect_gold() const;
  inline void set_protect_gold(::google::protobuf::int32 value);
  
  // optional int32 end_tick = 9;
  inline bool has_end_tick() const;
  inline void clear_end_tick();
  static const int kEndTickFieldNumber = 9;
  inline ::google::protobuf::int32 end_tick() const;
  inline void set_end_tick(::google::protobuf::int32 value);
  
  // repeated int32 jane_item_list = 10;
  inline int jane_item_list_size() const;
  inline void clear_jane_item_list();
  static const int kJaneItemListFieldNumber = 10;
  inline ::google::protobuf::int32 jane_item_list(int index) const;
  inline void set_jane_item_list(int index, ::google::protobuf::int32 value);
  inline void add_jane_item_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      jane_item_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_jane_item_list();
  
  // repeated .ProtoLotteryWaitAward wait_award_list = 11;
  inline int wait_award_list_size() const;
  inline void clear_wait_award_list();
  static const int kWaitAwardListFieldNumber = 11;
  inline const ::ProtoLotteryWaitAward& wait_award_list(int index) const;
  inline ::ProtoLotteryWaitAward* mutable_wait_award_list(int index);
  inline ::ProtoLotteryWaitAward* add_wait_award_list();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoLotteryWaitAward >&
      wait_award_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoLotteryWaitAward >*
      mutable_wait_award_list();
  
  // optional int32 activity_id = 12;
  inline bool has_activity_id() const;
  inline void clear_activity_id();
  static const int kActivityIdFieldNumber = 12;
  inline ::google::protobuf::int32 activity_id() const;
  inline void set_activity_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoLottery)
 private:
  inline void set_has_gold_times();
  inline void clear_has_gold_times();
  inline void set_has_gold_free_times();
  inline void clear_has_gold_free_times();
  inline void set_has_free_times();
  inline void clear_has_free_times();
  inline void set_has_total_score();
  inline void clear_has_total_score();
  inline void set_has_total_gold();
  inline void clear_has_total_gold();
  inline void set_has_left_free_sec();
  inline void clear_has_left_free_sec();
  inline void set_has_next_free_tick();
  inline void clear_has_next_free_tick();
  inline void set_has_protect_gold();
  inline void clear_has_protect_gold();
  inline void set_has_end_tick();
  inline void clear_has_end_tick();
  inline void set_has_activity_id();
  inline void clear_has_activity_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 gold_times_;
  ::google::protobuf::int32 gold_free_times_;
  ::google::protobuf::int32 free_times_;
  ::google::protobuf::int32 total_score_;
  ::google::protobuf::int32 total_gold_;
  ::google::protobuf::int32 left_free_sec_;
  ::google::protobuf::int32 next_free_tick_;
  ::google::protobuf::int32 protect_gold_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > jane_item_list_;
  ::google::protobuf::int32 end_tick_;
  ::google::protobuf::int32 activity_id_;
  ::google::protobuf::RepeatedPtrField< ::ProtoLotteryWaitAward > wait_award_list_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoInnerPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoLottery* default_instance_;
};
// -------------------------------------------------------------------

class ProtoActivityTick : public ::google::protobuf::Message {
 public:
  ProtoActivityTick();
  virtual ~ProtoActivityTick();
  
  ProtoActivityTick(const ProtoActivityTick& from);
  
  inline ProtoActivityTick& operator=(const ProtoActivityTick& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoActivityTick& default_instance();
  
  void Swap(ProtoActivityTick* other);
  
  // implements Message ----------------------------------------------
  
  ProtoActivityTick* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoActivityTick& from);
  void MergeFrom(const ProtoActivityTick& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 activity_id = 1;
  inline bool has_activity_id() const;
  inline void clear_activity_id();
  static const int kActivityIdFieldNumber = 1;
  inline ::google::protobuf::int32 activity_id() const;
  inline void set_activity_id(::google::protobuf::int32 value);
  
  // optional int32 begin_tick = 2;
  inline bool has_begin_tick() const;
  inline void clear_begin_tick();
  static const int kBeginTickFieldNumber = 2;
  inline ::google::protobuf::int32 begin_tick() const;
  inline void set_begin_tick(::google::protobuf::int32 value);
  
  // optional int32 end_tick = 3;
  inline bool has_end_tick() const;
  inline void clear_end_tick();
  static const int kEndTickFieldNumber = 3;
  inline ::google::protobuf::int32 end_tick() const;
  inline void set_end_tick(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoActivityTick)
 private:
  inline void set_has_activity_id();
  inline void clear_has_activity_id();
  inline void set_has_begin_tick();
  inline void clear_has_begin_tick();
  inline void set_has_end_tick();
  inline void clear_has_end_tick();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 activity_id_;
  ::google::protobuf::int32 begin_tick_;
  ::google::protobuf::int32 end_tick_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoInnerPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoActivityTick* default_instance_;
};
// -------------------------------------------------------------------

class ProtoLotteryWaitAward : public ::google::protobuf::Message {
 public:
  ProtoLotteryWaitAward();
  virtual ~ProtoLotteryWaitAward();
  
  ProtoLotteryWaitAward(const ProtoLotteryWaitAward& from);
  
  inline ProtoLotteryWaitAward& operator=(const ProtoLotteryWaitAward& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoLotteryWaitAward& default_instance();
  
  void Swap(ProtoLotteryWaitAward* other);
  
  // implements Message ----------------------------------------------
  
  ProtoLotteryWaitAward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoLotteryWaitAward& from);
  void MergeFrom(const ProtoLotteryWaitAward& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 inc_gold = 1;
  inline bool has_inc_gold() const;
  inline void clear_inc_gold();
  static const int kIncGoldFieldNumber = 1;
  inline ::google::protobuf::int32 inc_gold() const;
  inline void set_inc_gold(::google::protobuf::int32 value);
  
  // optional int32 inc_score = 2;
  inline bool has_inc_score() const;
  inline void clear_inc_score();
  static const int kIncScoreFieldNumber = 2;
  inline ::google::protobuf::int32 inc_score() const;
  inline void set_inc_score(::google::protobuf::int32 value);
  
  // optional .ProtoItem award_item = 3;
  inline bool has_award_item() const;
  inline void clear_award_item();
  static const int kAwardItemFieldNumber = 3;
  inline const ::ProtoItem& award_item() const;
  inline ::ProtoItem* mutable_award_item();
  inline ::ProtoItem* release_award_item();
  
  // optional int32 buy_type = 4;
  inline bool has_buy_type() const;
  inline void clear_buy_type();
  static const int kBuyTypeFieldNumber = 4;
  inline ::google::protobuf::int32 buy_type() const;
  inline void set_buy_type(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoLotteryWaitAward)
 private:
  inline void set_has_inc_gold();
  inline void clear_has_inc_gold();
  inline void set_has_inc_score();
  inline void clear_has_inc_score();
  inline void set_has_award_item();
  inline void clear_has_award_item();
  inline void set_has_buy_type();
  inline void clear_has_buy_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 inc_gold_;
  ::google::protobuf::int32 inc_score_;
  ::ProtoItem* award_item_;
  ::google::protobuf::int32 buy_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoInnerPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoLotteryWaitAward* default_instance_;
};
// -------------------------------------------------------------------

class ProtoMongoData : public ::google::protobuf::Message {
 public:
  ProtoMongoData();
  virtual ~ProtoMongoData();
  
  ProtoMongoData(const ProtoMongoData& from);
  
  inline ProtoMongoData& operator=(const ProtoMongoData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoMongoData& default_instance();
  
  void Swap(ProtoMongoData* other);
  
  // implements Message ----------------------------------------------
  
  ProtoMongoData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoMongoData& from);
  void MergeFrom(const ProtoMongoData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 op_type = 1;
  inline bool has_op_type() const;
  inline void clear_op_type();
  static const int kOpTypeFieldNumber = 1;
  inline ::google::protobuf::int32 op_type() const;
  inline void set_op_type(::google::protobuf::int32 value);
  
  // optional string table_name = 2;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 2;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const char* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  
  // optional string cond_bson = 3;
  inline bool has_cond_bson() const;
  inline void clear_cond_bson();
  static const int kCondBsonFieldNumber = 3;
  inline const ::std::string& cond_bson() const;
  inline void set_cond_bson(const ::std::string& value);
  inline void set_cond_bson(const char* value);
  inline void set_cond_bson(const char* value, size_t size);
  inline ::std::string* mutable_cond_bson();
  inline ::std::string* release_cond_bson();
  
  // optional int32 is_insert = 4;
  inline bool has_is_insert() const;
  inline void clear_is_insert();
  static const int kIsInsertFieldNumber = 4;
  inline ::google::protobuf::int32 is_insert() const;
  inline void set_is_insert(::google::protobuf::int32 value);
  
  // optional int32 data_type = 5;
  inline bool has_data_type() const;
  inline void clear_data_type();
  static const int kDataTypeFieldNumber = 5;
  inline ::google::protobuf::int32 data_type() const;
  inline void set_data_type(::google::protobuf::int32 value);
  
  // optional string data_bson = 6;
  inline bool has_data_bson() const;
  inline void clear_data_bson();
  static const int kDataBsonFieldNumber = 6;
  inline const ::std::string& data_bson() const;
  inline void set_data_bson(const ::std::string& value);
  inline void set_data_bson(const char* value);
  inline void set_data_bson(const char* value, size_t size);
  inline ::std::string* mutable_data_bson();
  inline ::std::string* release_data_bson();
  
  // @@protoc_insertion_point(class_scope:ProtoMongoData)
 private:
  inline void set_has_op_type();
  inline void clear_has_op_type();
  inline void set_has_table_name();
  inline void clear_has_table_name();
  inline void set_has_cond_bson();
  inline void clear_has_cond_bson();
  inline void set_has_is_insert();
  inline void clear_has_is_insert();
  inline void set_has_data_type();
  inline void clear_has_data_type();
  inline void set_has_data_bson();
  inline void clear_has_data_bson();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* table_name_;
  ::google::protobuf::int32 op_type_;
  ::google::protobuf::int32 is_insert_;
  ::std::string* cond_bson_;
  ::std::string* data_bson_;
  ::google::protobuf::int32 data_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoInnerPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoMongoData* default_instance_;
};
// -------------------------------------------------------------------

class ProtoActFlower : public ::google::protobuf::Message {
 public:
  ProtoActFlower();
  virtual ~ProtoActFlower();
  
  ProtoActFlower(const ProtoActFlower& from);
  
  inline ProtoActFlower& operator=(const ProtoActFlower& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoActFlower& default_instance();
  
  void Swap(ProtoActFlower* other);
  
  // implements Message ----------------------------------------------
  
  ProtoActFlower* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoActFlower& from);
  void MergeFrom(const ProtoActFlower& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int64 role_id() const;
  inline void set_role_id(::google::protobuf::int64 value);
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional int32 rank_index = 3;
  inline bool has_rank_index() const;
  inline void clear_rank_index();
  static const int kRankIndexFieldNumber = 3;
  inline ::google::protobuf::int32 rank_index() const;
  inline void set_rank_index(::google::protobuf::int32 value);
  
  // optional int32 flower_num = 4;
  inline bool has_flower_num() const;
  inline void clear_flower_num();
  static const int kFlowerNumFieldNumber = 4;
  inline ::google::protobuf::int32 flower_num() const;
  inline void set_flower_num(::google::protobuf::int32 value);
  
  // optional int32 carrer = 5;
  inline bool has_carrer() const;
  inline void clear_carrer();
  static const int kCarrerFieldNumber = 5;
  inline ::google::protobuf::int32 carrer() const;
  inline void set_carrer(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoActFlower)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_rank_index();
  inline void clear_has_rank_index();
  inline void set_has_flower_num();
  inline void clear_has_flower_num();
  inline void set_has_carrer();
  inline void clear_has_carrer();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 role_id_;
  ::std::string* name_;
  ::google::protobuf::int32 rank_index_;
  ::google::protobuf::int32 flower_num_;
  ::google::protobuf::int32 carrer_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoInnerPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoActFlower* default_instance_;
};
// -------------------------------------------------------------------

class ProtoMount : public ::google::protobuf::Message {
 public:
  ProtoMount();
  virtual ~ProtoMount();
  
  ProtoMount(const ProtoMount& from);
  
  inline ProtoMount& operator=(const ProtoMount& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoMount& default_instance();
  
  void Swap(ProtoMount* other);
  
  // implements Message ----------------------------------------------
  
  ProtoMount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoMount& from);
  void MergeFrom(const ProtoMount& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 mount_grade = 1;
  inline bool has_mount_grade() const;
  inline void clear_mount_grade();
  static const int kMountGradeFieldNumber = 1;
  inline ::google::protobuf::int32 mount_grade() const;
  inline void set_mount_grade(::google::protobuf::int32 value);
  
  // optional int32 mount_shape = 2;
  inline bool has_mount_shape() const;
  inline void clear_mount_shape();
  static const int kMountShapeFieldNumber = 2;
  inline ::google::protobuf::int32 mount_shape() const;
  inline void set_mount_shape(::google::protobuf::int32 value);
  
  // optional int32 on_mount = 3;
  inline bool has_on_mount() const;
  inline void clear_on_mount();
  static const int kOnMountFieldNumber = 3;
  inline ::google::protobuf::int32 on_mount() const;
  inline void set_on_mount(::google::protobuf::int32 value);
  
  // optional int32 bless = 4;
  inline bool has_bless() const;
  inline void clear_bless();
  static const int kBlessFieldNumber = 4;
  inline ::google::protobuf::int32 bless() const;
  inline void set_bless(::google::protobuf::int32 value);
  
  // optional int32 fail_times = 5;
  inline bool has_fail_times() const;
  inline void clear_fail_times();
  static const int kFailTimesFieldNumber = 5;
  inline ::google::protobuf::int32 fail_times() const;
  inline void set_fail_times(::google::protobuf::int32 value);
  
  // optional int64 finish_bless = 6;
  inline bool has_finish_bless() const;
  inline void clear_finish_bless();
  static const int kFinishBlessFieldNumber = 6;
  inline ::google::protobuf::int64 finish_bless() const;
  inline void set_finish_bless(::google::protobuf::int64 value);
  
  // optional int32 ability = 7;
  inline bool has_ability() const;
  inline void clear_ability();
  static const int kAbilityFieldNumber = 7;
  inline ::google::protobuf::int32 ability() const;
  inline void set_ability(::google::protobuf::int32 value);
  
  // optional int32 growth = 8;
  inline bool has_growth() const;
  inline void clear_growth();
  static const int kGrowthFieldNumber = 8;
  inline ::google::protobuf::int32 growth() const;
  inline void set_growth(::google::protobuf::int32 value);
  
  // repeated .ProtoPairObj skill = 9;
  inline int skill_size() const;
  inline void clear_skill();
  static const int kSkillFieldNumber = 9;
  inline const ::ProtoPairObj& skill(int index) const;
  inline ::ProtoPairObj* mutable_skill(int index);
  inline ::ProtoPairObj* add_skill();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >&
      skill() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >*
      mutable_skill();
  
  // optional int32 open = 10;
  inline bool has_open() const;
  inline void clear_open();
  static const int kOpenFieldNumber = 10;
  inline ::google::protobuf::int32 open() const;
  inline void set_open(::google::protobuf::int32 value);
  
  // optional int32 act_shape = 11;
  inline bool has_act_shape() const;
  inline void clear_act_shape();
  static const int kActShapeFieldNumber = 11;
  inline ::google::protobuf::int32 act_shape() const;
  inline void set_act_shape(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoMount)
 private:
  inline void set_has_mount_grade();
  inline void clear_has_mount_grade();
  inline void set_has_mount_shape();
  inline void clear_has_mount_shape();
  inline void set_has_on_mount();
  inline void clear_has_on_mount();
  inline void set_has_bless();
  inline void clear_has_bless();
  inline void set_has_fail_times();
  inline void clear_has_fail_times();
  inline void set_has_finish_bless();
  inline void clear_has_finish_bless();
  inline void set_has_ability();
  inline void clear_has_ability();
  inline void set_has_growth();
  inline void clear_has_growth();
  inline void set_has_open();
  inline void clear_has_open();
  inline void set_has_act_shape();
  inline void clear_has_act_shape();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 mount_grade_;
  ::google::protobuf::int32 mount_shape_;
  ::google::protobuf::int32 on_mount_;
  ::google::protobuf::int32 bless_;
  ::google::protobuf::int64 finish_bless_;
  ::google::protobuf::int32 fail_times_;
  ::google::protobuf::int32 ability_;
  ::google::protobuf::RepeatedPtrField< ::ProtoPairObj > skill_;
  ::google::protobuf::int32 growth_;
  ::google::protobuf::int32 open_;
  ::google::protobuf::int32 act_shape_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoInnerPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoMount* default_instance_;
};
// -------------------------------------------------------------------

class ProtoScriptType : public ::google::protobuf::Message {
 public:
  ProtoScriptType();
  virtual ~ProtoScriptType();
  
  ProtoScriptType(const ProtoScriptType& from);
  
  inline ProtoScriptType& operator=(const ProtoScriptType& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoScriptType& default_instance();
  
  void Swap(ProtoScriptType* other);
  
  // implements Message ----------------------------------------------
  
  ProtoScriptType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoScriptType& from);
  void MergeFrom(const ProtoScriptType& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 script_type = 1;
  inline bool has_script_type() const;
  inline void clear_script_type();
  static const int kScriptTypeFieldNumber = 1;
  inline ::google::protobuf::int32 script_type() const;
  inline void set_script_type(::google::protobuf::int32 value);
  
  // repeated int32 script_sort = 2;
  inline int script_sort_size() const;
  inline void clear_script_sort();
  static const int kScriptSortFieldNumber = 2;
  inline ::google::protobuf::int32 script_sort(int index) const;
  inline void set_script_sort(int index, ::google::protobuf::int32 value);
  inline void add_script_sort(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      script_sort() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_script_sort();
  
  // optional int32 pass_wave = 3;
  inline bool has_pass_wave() const;
  inline void clear_pass_wave();
  static const int kPassWaveFieldNumber = 3;
  inline ::google::protobuf::int32 pass_wave() const;
  inline void set_pass_wave(::google::protobuf::int32 value);
  
  // optional int32 pass_chapter = 4;
  inline bool has_pass_chapter() const;
  inline void clear_pass_chapter();
  static const int kPassChapterFieldNumber = 4;
  inline ::google::protobuf::int32 pass_chapter() const;
  inline void set_pass_chapter(::google::protobuf::int32 value);
  
  // optional int32 notify_wave = 5;
  inline bool has_notify_wave() const;
  inline void clear_notify_wave();
  static const int kNotifyWaveFieldNumber = 5;
  inline ::google::protobuf::int32 notify_wave() const;
  inline void set_notify_wave(::google::protobuf::int32 value);
  
  // optional int32 notify_chapter = 6;
  inline bool has_notify_chapter() const;
  inline void clear_notify_chapter();
  static const int kNotifyChapterFieldNumber = 6;
  inline ::google::protobuf::int32 notify_chapter() const;
  inline void set_notify_chapter(::google::protobuf::int32 value);
  
  // optional int32 is_sweep = 7;
  inline bool has_is_sweep() const;
  inline void clear_is_sweep();
  static const int kIsSweepFieldNumber = 7;
  inline ::google::protobuf::int32 is_sweep() const;
  inline void set_is_sweep(::google::protobuf::int32 value);
  
  // optional int32 used_times_tick = 8;
  inline bool has_used_times_tick() const;
  inline void clear_used_times_tick();
  static const int kUsedTimesTickFieldNumber = 8;
  inline ::google::protobuf::int32 used_times_tick() const;
  inline void set_used_times_tick(::google::protobuf::int32 value);
  
  // repeated .ProtoPairObj reward_map = 9;
  inline int reward_map_size() const;
  inline void clear_reward_map();
  static const int kRewardMapFieldNumber = 9;
  inline const ::ProtoPairObj& reward_map(int index) const;
  inline ::ProtoPairObj* mutable_reward_map(int index);
  inline ::ProtoPairObj* add_reward_map();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >&
      reward_map() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >*
      mutable_reward_map();
  
  // optional int32 start_wave = 10;
  inline bool has_start_wave() const;
  inline void clear_start_wave();
  static const int kStartWaveFieldNumber = 10;
  inline ::google::protobuf::int32 start_wave() const;
  inline void set_start_wave(::google::protobuf::int32 value);
  
  // optional int32 start_chapter = 11;
  inline bool has_start_chapter() const;
  inline void clear_start_chapter();
  static const int kStartChapterFieldNumber = 11;
  inline ::google::protobuf::int32 start_chapter() const;
  inline void set_start_chapter(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoScriptType)
 private:
  inline void set_has_script_type();
  inline void clear_has_script_type();
  inline void set_has_pass_wave();
  inline void clear_has_pass_wave();
  inline void set_has_pass_chapter();
  inline void clear_has_pass_chapter();
  inline void set_has_notify_wave();
  inline void clear_has_notify_wave();
  inline void set_has_notify_chapter();
  inline void clear_has_notify_chapter();
  inline void set_has_is_sweep();
  inline void clear_has_is_sweep();
  inline void set_has_used_times_tick();
  inline void clear_has_used_times_tick();
  inline void set_has_start_wave();
  inline void clear_has_start_wave();
  inline void set_has_start_chapter();
  inline void clear_has_start_chapter();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > script_sort_;
  ::google::protobuf::int32 script_type_;
  ::google::protobuf::int32 pass_wave_;
  ::google::protobuf::int32 pass_chapter_;
  ::google::protobuf::int32 notify_wave_;
  ::google::protobuf::int32 notify_chapter_;
  ::google::protobuf::int32 is_sweep_;
  ::google::protobuf::RepeatedPtrField< ::ProtoPairObj > reward_map_;
  ::google::protobuf::int32 used_times_tick_;
  ::google::protobuf::int32 start_wave_;
  ::google::protobuf::int32 start_chapter_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoInnerPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoScriptType* default_instance_;
};
// -------------------------------------------------------------------

class ProtoScriptFirstAward : public ::google::protobuf::Message {
 public:
  ProtoScriptFirstAward();
  virtual ~ProtoScriptFirstAward();
  
  ProtoScriptFirstAward(const ProtoScriptFirstAward& from);
  
  inline ProtoScriptFirstAward& operator=(const ProtoScriptFirstAward& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoScriptFirstAward& default_instance();
  
  void Swap(ProtoScriptFirstAward* other);
  
  // implements Message ----------------------------------------------
  
  ProtoScriptFirstAward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoScriptFirstAward& from);
  void MergeFrom(const ProtoScriptFirstAward& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 script_wave_id = 1;
  inline bool has_script_wave_id() const;
  inline void clear_script_wave_id();
  static const int kScriptWaveIdFieldNumber = 1;
  inline ::google::protobuf::int32 script_wave_id() const;
  inline void set_script_wave_id(::google::protobuf::int32 value);
  
  // optional int32 is_get = 2;
  inline bool has_is_get() const;
  inline void clear_is_get();
  static const int kIsGetFieldNumber = 2;
  inline ::google::protobuf::int32 is_get() const;
  inline void set_is_get(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoScriptFirstAward)
 private:
  inline void set_has_script_wave_id();
  inline void clear_has_script_wave_id();
  inline void set_has_is_get();
  inline void clear_has_is_get();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 script_wave_id_;
  ::google::protobuf::int32 is_get_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoInnerPublic_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoScriptFirstAward* default_instance_;
};
// -------------------------------------------------------------------

class RecordMount : public ::google::protobuf::Message {
 public:
  RecordMount();
  virtual ~RecordMount();
  
  RecordMount(const RecordMount& from);
  
  inline RecordMount& operator=(const RecordMount& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordMount& default_instance();
  
  void Swap(RecordMount* other);
  
  // implements Message ----------------------------------------------
  
  RecordMount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecordMount& from);
  void MergeFrom(const RecordMount& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int64 role_id() const;
  inline void set_role_id(::google::protobuf::int64 value);
  
  // optional int32 sub_agent = 2;
  inline bool has_sub_agent() const;
  inline void clear_sub_agent();
  static const int kSubAgentFieldNumber = 2;
  inline ::google::protobuf::int32 sub_agent() const;
  inline void set_sub_agent(::google::protobuf::int32 value);
  
  // optional int32 serial_type = 3;
  inline bool has_serial_type() const;
  inline void clear_serial_type();
  static const int kSerialTypeFieldNumber = 3;
  inline ::google::protobuf::int32 serial_type() const;
  inline void set_serial_type(::google::protobuf::int32 value);
  
  // optional int32 mount_type = 4;
  inline bool has_mount_type() const;
  inline void clear_mount_type();
  static const int kMountTypeFieldNumber = 4;
  inline ::google::protobuf::int32 mount_type() const;
  inline void set_mount_type(::google::protobuf::int32 value);
  
  // optional int32 grade = 5;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 5;
  inline ::google::protobuf::int32 grade() const;
  inline void set_grade(::google::protobuf::int32 value);
  
  // optional string skill = 6;
  inline bool has_skill() const;
  inline void clear_skill();
  static const int kSkillFieldNumber = 6;
  inline const ::std::string& skill() const;
  inline void set_skill(const ::std::string& value);
  inline void set_skill(const char* value);
  inline void set_skill(const char* value, size_t size);
  inline ::std::string* mutable_skill();
  inline ::std::string* release_skill();
  
  // optional string equip = 7;
  inline bool has_equip() const;
  inline void clear_equip();
  static const int kEquipFieldNumber = 7;
  inline const ::std::string& equip() const;
  inline void set_equip(const ::std::string& value);
  inline void set_equip(const char* value);
  inline void set_equip(const char* value, size_t size);
  inline ::std::string* mutable_equip();
  inline ::std::string* release_equip();
  
  // optional int32 bless = 8;
  inline bool has_bless() const;
  inline void clear_bless();
  static const int kBlessFieldNumber = 8;
  inline ::google::protobuf::int32 bless() const;
  inline void set_bless(::google::protobuf::int32 value);
  
  // optional int64 time = 9;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 9;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);
  
  // optional string table_name = 10;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 10;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const char* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  
  // @@protoc_insertion_point(class_scope:RecordMount)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_sub_agent();
  inline void clear_has_sub_agent();
  inline void set_has_serial_type();
  inline void clear_has_serial_type();
  inline void set_has_mount_type();
  inline void clear_has_mount_type();
  inline void set_has_grade();
  inline void clear_has_grade();
  inline void set_has_skill();
  inline void clear_has_skill();
  inline void set_has_equip();
  inline void clear_has_equip();
  inline void set_has_bless();
  inline void clear_has_bless();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_table_name();
  inline void clear_has_table_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 role_id_;
  ::google::protobuf::int32 sub_agent_;
  ::google::protobuf::int32 serial_type_;
  ::google::protobuf::int32 mount_type_;
  ::google::protobuf::int32 grade_;
  ::std::string* skill_;
  ::std::string* equip_;
  ::google::protobuf::int64 time_;
  ::std::string* table_name_;
  ::google::protobuf::int32 bless_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoInnerPublic_2eproto();
  
  void InitAsDefaultInstance();
  static RecordMount* default_instance_;
};
// -------------------------------------------------------------------

class RecordActivity : public ::google::protobuf::Message {
 public:
  RecordActivity();
  virtual ~RecordActivity();
  
  RecordActivity(const RecordActivity& from);
  
  inline RecordActivity& operator=(const RecordActivity& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordActivity& default_instance();
  
  void Swap(RecordActivity* other);
  
  // implements Message ----------------------------------------------
  
  RecordActivity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecordActivity& from);
  void MergeFrom(const RecordActivity& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string table_name = 1;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const char* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  
  // optional int64 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);
  
  // optional int32 act_type = 3;
  inline bool has_act_type() const;
  inline void clear_act_type();
  static const int kActTypeFieldNumber = 3;
  inline ::google::protobuf::int32 act_type() const;
  inline void set_act_type(::google::protobuf::int32 value);
  
  // optional int32 total_attend = 4;
  inline bool has_total_attend() const;
  inline void clear_total_attend();
  static const int kTotalAttendFieldNumber = 4;
  inline ::google::protobuf::int32 total_attend() const;
  inline void set_total_attend(::google::protobuf::int32 value);
  
  // optional int32 sub1_key = 5;
  inline bool has_sub1_key() const;
  inline void clear_sub1_key();
  static const int kSub1KeyFieldNumber = 5;
  inline ::google::protobuf::int32 sub1_key() const;
  inline void set_sub1_key(::google::protobuf::int32 value);
  
  // optional int32 sub1_value = 6;
  inline bool has_sub1_value() const;
  inline void clear_sub1_value();
  static const int kSub1ValueFieldNumber = 6;
  inline ::google::protobuf::int32 sub1_value() const;
  inline void set_sub1_value(::google::protobuf::int32 value);
  
  // optional int32 sub2_key = 7;
  inline bool has_sub2_key() const;
  inline void clear_sub2_key();
  static const int kSub2KeyFieldNumber = 7;
  inline ::google::protobuf::int32 sub2_key() const;
  inline void set_sub2_key(::google::protobuf::int32 value);
  
  // optional int32 sub2_value = 8;
  inline bool has_sub2_value() const;
  inline void clear_sub2_value();
  static const int kSub2ValueFieldNumber = 8;
  inline ::google::protobuf::int32 sub2_value() const;
  inline void set_sub2_value(::google::protobuf::int32 value);
  
  // optional string sub3 = 9;
  inline bool has_sub3() const;
  inline void clear_sub3();
  static const int kSub3FieldNumber = 9;
  inline const ::std::string& sub3() const;
  inline void set_sub3(const ::std::string& value);
  inline void set_sub3(const char* value);
  inline void set_sub3(const char* value, size_t size);
  inline ::std::string* mutable_sub3();
  inline ::std::string* release_sub3();
  
  // @@protoc_insertion_point(class_scope:RecordActivity)
 private:
  inline void set_has_table_name();
  inline void clear_has_table_name();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_act_type();
  inline void clear_has_act_type();
  inline void set_has_total_attend();
  inline void clear_has_total_attend();
  inline void set_has_sub1_key();
  inline void clear_has_sub1_key();
  inline void set_has_sub1_value();
  inline void clear_has_sub1_value();
  inline void set_has_sub2_key();
  inline void clear_has_sub2_key();
  inline void set_has_sub2_value();
  inline void clear_has_sub2_value();
  inline void set_has_sub3();
  inline void clear_has_sub3();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* table_name_;
  ::google::protobuf::int64 time_;
  ::google::protobuf::int32 act_type_;
  ::google::protobuf::int32 total_attend_;
  ::google::protobuf::int32 sub1_key_;
  ::google::protobuf::int32 sub1_value_;
  ::google::protobuf::int32 sub2_key_;
  ::google::protobuf::int32 sub2_value_;
  ::std::string* sub3_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_AssignDesc_ProtoInnerPublic_2eproto();
  friend void protobuf_ShutdownFile_ProtoInnerPublic_2eproto();
  
  void InitAsDefaultInstance();
  static RecordActivity* default_instance_;
};
// ===================================================================


// ===================================================================

// ProtoServerAddress

// optional string server_name = 1;
inline bool ProtoServerAddress::has_server_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoServerAddress::set_has_server_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoServerAddress::clear_has_server_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoServerAddress::clear_server_name() {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    server_name_->clear();
  }
  clear_has_server_name();
}
inline const ::std::string& ProtoServerAddress::server_name() const {
  return *server_name_;
}
inline void ProtoServerAddress::set_server_name(const ::std::string& value) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
}
inline void ProtoServerAddress::set_server_name(const char* value) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
}
inline void ProtoServerAddress::set_server_name(const char* value, size_t size) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoServerAddress::mutable_server_name() {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  return server_name_;
}
inline ::std::string* ProtoServerAddress::release_server_name() {
  clear_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_name_;
    server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string session = 2;
inline bool ProtoServerAddress::has_session() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoServerAddress::set_has_session() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoServerAddress::clear_has_session() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoServerAddress::clear_session() {
  if (session_ != &::google::protobuf::internal::kEmptyString) {
    session_->clear();
  }
  clear_has_session();
}
inline const ::std::string& ProtoServerAddress::session() const {
  return *session_;
}
inline void ProtoServerAddress::set_session(const ::std::string& value) {
  set_has_session();
  if (session_ == &::google::protobuf::internal::kEmptyString) {
    session_ = new ::std::string;
  }
  session_->assign(value);
}
inline void ProtoServerAddress::set_session(const char* value) {
  set_has_session();
  if (session_ == &::google::protobuf::internal::kEmptyString) {
    session_ = new ::std::string;
  }
  session_->assign(value);
}
inline void ProtoServerAddress::set_session(const char* value, size_t size) {
  set_has_session();
  if (session_ == &::google::protobuf::internal::kEmptyString) {
    session_ = new ::std::string;
  }
  session_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoServerAddress::mutable_session() {
  set_has_session();
  if (session_ == &::google::protobuf::internal::kEmptyString) {
    session_ = new ::std::string;
  }
  return session_;
}
inline ::std::string* ProtoServerAddress::release_session() {
  clear_has_session();
  if (session_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = session_;
    session_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string auth_ip = 3;
inline bool ProtoServerAddress::has_auth_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoServerAddress::set_has_auth_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoServerAddress::clear_has_auth_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoServerAddress::clear_auth_ip() {
  if (auth_ip_ != &::google::protobuf::internal::kEmptyString) {
    auth_ip_->clear();
  }
  clear_has_auth_ip();
}
inline const ::std::string& ProtoServerAddress::auth_ip() const {
  return *auth_ip_;
}
inline void ProtoServerAddress::set_auth_ip(const ::std::string& value) {
  set_has_auth_ip();
  if (auth_ip_ == &::google::protobuf::internal::kEmptyString) {
    auth_ip_ = new ::std::string;
  }
  auth_ip_->assign(value);
}
inline void ProtoServerAddress::set_auth_ip(const char* value) {
  set_has_auth_ip();
  if (auth_ip_ == &::google::protobuf::internal::kEmptyString) {
    auth_ip_ = new ::std::string;
  }
  auth_ip_->assign(value);
}
inline void ProtoServerAddress::set_auth_ip(const char* value, size_t size) {
  set_has_auth_ip();
  if (auth_ip_ == &::google::protobuf::internal::kEmptyString) {
    auth_ip_ = new ::std::string;
  }
  auth_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoServerAddress::mutable_auth_ip() {
  set_has_auth_ip();
  if (auth_ip_ == &::google::protobuf::internal::kEmptyString) {
    auth_ip_ = new ::std::string;
  }
  return auth_ip_;
}
inline ::std::string* ProtoServerAddress::release_auth_ip() {
  clear_has_auth_ip();
  if (auth_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = auth_ip_;
    auth_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 auth_port = 4;
inline bool ProtoServerAddress::has_auth_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoServerAddress::set_has_auth_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoServerAddress::clear_has_auth_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoServerAddress::clear_auth_port() {
  auth_port_ = 0;
  clear_has_auth_port();
}
inline ::google::protobuf::int32 ProtoServerAddress::auth_port() const {
  return auth_port_;
}
inline void ProtoServerAddress::set_auth_port(::google::protobuf::int32 value) {
  set_has_auth_port();
  auth_port_ = value;
}

// optional string role_name = 5;
inline bool ProtoServerAddress::has_role_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoServerAddress::set_has_role_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoServerAddress::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoServerAddress::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& ProtoServerAddress::role_name() const {
  return *role_name_;
}
inline void ProtoServerAddress::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoServerAddress::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoServerAddress::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoServerAddress::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* ProtoServerAddress::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 level = 6;
inline bool ProtoServerAddress::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoServerAddress::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoServerAddress::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoServerAddress::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ProtoServerAddress::level() const {
  return level_;
}
inline void ProtoServerAddress::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// ProtoSyncStatus

// optional int32 status = 1;
inline bool ProtoSyncStatus::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoSyncStatus::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoSyncStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoSyncStatus::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 ProtoSyncStatus::status() const {
  return status_;
}
inline void ProtoSyncStatus::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional int32 view_status = 2;
inline bool ProtoSyncStatus::has_view_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoSyncStatus::set_has_view_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoSyncStatus::clear_has_view_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoSyncStatus::clear_view_status() {
  view_status_ = 0;
  clear_has_view_status();
}
inline ::google::protobuf::int32 ProtoSyncStatus::view_status() const {
  return view_status_;
}
inline void ProtoSyncStatus::set_view_status(::google::protobuf::int32 value) {
  set_has_view_status();
  view_status_ = value;
}

// optional double view1 = 3;
inline bool ProtoSyncStatus::has_view1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoSyncStatus::set_has_view1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoSyncStatus::clear_has_view1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoSyncStatus::clear_view1() {
  view1_ = 0;
  clear_has_view1();
}
inline double ProtoSyncStatus::view1() const {
  return view1_;
}
inline void ProtoSyncStatus::set_view1(double value) {
  set_has_view1();
  view1_ = value;
}

// optional double view2 = 4;
inline bool ProtoSyncStatus::has_view2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoSyncStatus::set_has_view2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoSyncStatus::clear_has_view2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoSyncStatus::clear_view2() {
  view2_ = 0;
  clear_has_view2();
}
inline double ProtoSyncStatus::view2() const {
  return view2_;
}
inline void ProtoSyncStatus::set_view2(double value) {
  set_has_view2();
  view2_ = value;
}

// optional double view3 = 5;
inline bool ProtoSyncStatus::has_view3() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoSyncStatus::set_has_view3() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoSyncStatus::clear_has_view3() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoSyncStatus::clear_view3() {
  view3_ = 0;
  clear_has_view3();
}
inline double ProtoSyncStatus::view3() const {
  return view3_;
}
inline void ProtoSyncStatus::set_view3(double value) {
  set_has_view3();
  view3_ = value;
}

// optional double value1 = 6;
inline bool ProtoSyncStatus::has_value1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoSyncStatus::set_has_value1() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoSyncStatus::clear_has_value1() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoSyncStatus::clear_value1() {
  value1_ = 0;
  clear_has_value1();
}
inline double ProtoSyncStatus::value1() const {
  return value1_;
}
inline void ProtoSyncStatus::set_value1(double value) {
  set_has_value1();
  value1_ = value;
}

// optional double value2 = 7;
inline bool ProtoSyncStatus::has_value2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoSyncStatus::set_has_value2() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoSyncStatus::clear_has_value2() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoSyncStatus::clear_value2() {
  value2_ = 0;
  clear_has_value2();
}
inline double ProtoSyncStatus::value2() const {
  return value2_;
}
inline void ProtoSyncStatus::set_value2(double value) {
  set_has_value2();
  value2_ = value;
}

// optional double value3 = 8;
inline bool ProtoSyncStatus::has_value3() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoSyncStatus::set_has_value3() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoSyncStatus::clear_has_value3() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoSyncStatus::clear_value3() {
  value3_ = 0;
  clear_has_value3();
}
inline double ProtoSyncStatus::value3() const {
  return value3_;
}
inline void ProtoSyncStatus::set_value3(double value) {
  set_has_value3();
  value3_ = value;
}

// optional double value4 = 9;
inline bool ProtoSyncStatus::has_value4() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProtoSyncStatus::set_has_value4() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProtoSyncStatus::clear_has_value4() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProtoSyncStatus::clear_value4() {
  value4_ = 0;
  clear_has_value4();
}
inline double ProtoSyncStatus::value4() const {
  return value4_;
}
inline void ProtoSyncStatus::set_value4(double value) {
  set_has_value4();
  value4_ = value;
}

// optional double value5 = 10;
inline bool ProtoSyncStatus::has_value5() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProtoSyncStatus::set_has_value5() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ProtoSyncStatus::clear_has_value5() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ProtoSyncStatus::clear_value5() {
  value5_ = 0;
  clear_has_value5();
}
inline double ProtoSyncStatus::value5() const {
  return value5_;
}
inline void ProtoSyncStatus::set_value5(double value) {
  set_has_value5();
  value5_ = value;
}

// optional int64 check_sec = 11;
inline bool ProtoSyncStatus::has_check_sec() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ProtoSyncStatus::set_has_check_sec() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ProtoSyncStatus::clear_has_check_sec() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ProtoSyncStatus::clear_check_sec() {
  check_sec_ = GOOGLE_LONGLONG(0);
  clear_has_check_sec();
}
inline ::google::protobuf::int64 ProtoSyncStatus::check_sec() const {
  return check_sec_;
}
inline void ProtoSyncStatus::set_check_sec(::google::protobuf::int64 value) {
  set_has_check_sec();
  check_sec_ = value;
}

// optional int64 check_usec = 12;
inline bool ProtoSyncStatus::has_check_usec() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ProtoSyncStatus::set_has_check_usec() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ProtoSyncStatus::clear_has_check_usec() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ProtoSyncStatus::clear_check_usec() {
  check_usec_ = GOOGLE_LONGLONG(0);
  clear_has_check_usec();
}
inline ::google::protobuf::int64 ProtoSyncStatus::check_usec() const {
  return check_usec_;
}
inline void ProtoSyncStatus::set_check_usec(::google::protobuf::int64 value) {
  set_has_check_usec();
  check_usec_ = value;
}

// optional int64 interval_sec = 13;
inline bool ProtoSyncStatus::has_interval_sec() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ProtoSyncStatus::set_has_interval_sec() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ProtoSyncStatus::clear_has_interval_sec() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ProtoSyncStatus::clear_interval_sec() {
  interval_sec_ = GOOGLE_LONGLONG(0);
  clear_has_interval_sec();
}
inline ::google::protobuf::int64 ProtoSyncStatus::interval_sec() const {
  return interval_sec_;
}
inline void ProtoSyncStatus::set_interval_sec(::google::protobuf::int64 value) {
  set_has_interval_sec();
  interval_sec_ = value;
}

// optional int64 interval_usec = 14;
inline bool ProtoSyncStatus::has_interval_usec() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ProtoSyncStatus::set_has_interval_usec() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ProtoSyncStatus::clear_has_interval_usec() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ProtoSyncStatus::clear_interval_usec() {
  interval_usec_ = GOOGLE_LONGLONG(0);
  clear_has_interval_usec();
}
inline ::google::protobuf::int64 ProtoSyncStatus::interval_usec() const {
  return interval_usec_;
}
inline void ProtoSyncStatus::set_interval_usec(::google::protobuf::int64 value) {
  set_has_interval_usec();
  interval_usec_ = value;
}

// optional int64 last_sec = 15;
inline bool ProtoSyncStatus::has_last_sec() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ProtoSyncStatus::set_has_last_sec() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ProtoSyncStatus::clear_has_last_sec() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ProtoSyncStatus::clear_last_sec() {
  last_sec_ = GOOGLE_LONGLONG(0);
  clear_has_last_sec();
}
inline ::google::protobuf::int64 ProtoSyncStatus::last_sec() const {
  return last_sec_;
}
inline void ProtoSyncStatus::set_last_sec(::google::protobuf::int64 value) {
  set_has_last_sec();
  last_sec_ = value;
}

// optional int64 last_usec = 16;
inline bool ProtoSyncStatus::has_last_usec() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ProtoSyncStatus::set_has_last_usec() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ProtoSyncStatus::clear_has_last_usec() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ProtoSyncStatus::clear_last_usec() {
  last_usec_ = GOOGLE_LONGLONG(0);
  clear_has_last_usec();
}
inline ::google::protobuf::int64 ProtoSyncStatus::last_usec() const {
  return last_usec_;
}
inline void ProtoSyncStatus::set_last_usec(::google::protobuf::int64 value) {
  set_has_last_usec();
  last_usec_ = value;
}

// optional int32 skill_id = 17;
inline bool ProtoSyncStatus::has_skill_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ProtoSyncStatus::set_has_skill_id() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ProtoSyncStatus::clear_has_skill_id() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ProtoSyncStatus::clear_skill_id() {
  skill_id_ = 0;
  clear_has_skill_id();
}
inline ::google::protobuf::int32 ProtoSyncStatus::skill_id() const {
  return skill_id_;
}
inline void ProtoSyncStatus::set_skill_id(::google::protobuf::int32 value) {
  set_has_skill_id();
  skill_id_ = value;
}

// optional int32 skill_level = 18;
inline bool ProtoSyncStatus::has_skill_level() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ProtoSyncStatus::set_has_skill_level() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ProtoSyncStatus::clear_has_skill_level() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ProtoSyncStatus::clear_skill_level() {
  skill_level_ = 0;
  clear_has_skill_level();
}
inline ::google::protobuf::int32 ProtoSyncStatus::skill_level() const {
  return skill_level_;
}
inline void ProtoSyncStatus::set_skill_level(::google::protobuf::int32 value) {
  set_has_skill_level();
  skill_level_ = value;
}

// optional int32 attacker = 19;
inline bool ProtoSyncStatus::has_attacker() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ProtoSyncStatus::set_has_attacker() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ProtoSyncStatus::clear_has_attacker() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ProtoSyncStatus::clear_attacker() {
  attacker_ = 0;
  clear_has_attacker();
}
inline ::google::protobuf::int32 ProtoSyncStatus::attacker() const {
  return attacker_;
}
inline void ProtoSyncStatus::set_attacker(::google::protobuf::int32 value) {
  set_has_attacker();
  attacker_ = value;
}

// optional int32 accumulate = 20;
inline bool ProtoSyncStatus::has_accumulate() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ProtoSyncStatus::set_has_accumulate() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ProtoSyncStatus::clear_has_accumulate() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ProtoSyncStatus::clear_accumulate() {
  accumulate_ = 0;
  clear_has_accumulate();
}
inline ::google::protobuf::int32 ProtoSyncStatus::accumulate() const {
  return accumulate_;
}
inline void ProtoSyncStatus::set_accumulate(::google::protobuf::int32 value) {
  set_has_accumulate();
  accumulate_ = value;
}

// -------------------------------------------------------------------

// ProtoPackageSet

// optional .ProtoMoney money = 1;
inline bool ProtoPackageSet::has_money() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoPackageSet::set_has_money() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoPackageSet::clear_has_money() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoPackageSet::clear_money() {
  if (money_ != NULL) money_->::ProtoMoney::Clear();
  clear_has_money();
}
inline const ::ProtoMoney& ProtoPackageSet::money() const {
  return money_ != NULL ? *money_ : *default_instance_->money_;
}
inline ::ProtoMoney* ProtoPackageSet::mutable_money() {
  set_has_money();
  if (money_ == NULL) money_ = new ::ProtoMoney;
  return money_;
}
inline ::ProtoMoney* ProtoPackageSet::release_money() {
  clear_has_money();
  ::ProtoMoney* temp = money_;
  money_ = NULL;
  return temp;
}

// repeated .ProtoPackage package_list = 2;
inline int ProtoPackageSet::package_list_size() const {
  return package_list_.size();
}
inline void ProtoPackageSet::clear_package_list() {
  package_list_.Clear();
}
inline const ::ProtoPackage& ProtoPackageSet::package_list(int index) const {
  return package_list_.Get(index);
}
inline ::ProtoPackage* ProtoPackageSet::mutable_package_list(int index) {
  return package_list_.Mutable(index);
}
inline ::ProtoPackage* ProtoPackageSet::add_package_list() {
  return package_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoPackage >&
ProtoPackageSet::package_list() const {
  return package_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoPackage >*
ProtoPackageSet::mutable_package_list() {
  return &package_list_;
}

// optional .ProtoMoney money_use = 3;
inline bool ProtoPackageSet::has_money_use() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoPackageSet::set_has_money_use() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoPackageSet::clear_has_money_use() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoPackageSet::clear_money_use() {
  if (money_use_ != NULL) money_use_->::ProtoMoney::Clear();
  clear_has_money_use();
}
inline const ::ProtoMoney& ProtoPackageSet::money_use() const {
  return money_use_ != NULL ? *money_use_ : *default_instance_->money_use_;
}
inline ::ProtoMoney* ProtoPackageSet::mutable_money_use() {
  set_has_money_use();
  if (money_use_ == NULL) money_use_ = new ::ProtoMoney;
  return money_use_;
}
inline ::ProtoMoney* ProtoPackageSet::release_money_use() {
  clear_has_money_use();
  ::ProtoMoney* temp = money_use_;
  money_use_ = NULL;
  return temp;
}

// optional int64 recharge_first_tick = 4;
inline bool ProtoPackageSet::has_recharge_first_tick() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoPackageSet::set_has_recharge_first_tick() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoPackageSet::clear_has_recharge_first_tick() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoPackageSet::clear_recharge_first_tick() {
  recharge_first_tick_ = GOOGLE_LONGLONG(0);
  clear_has_recharge_first_tick();
}
inline ::google::protobuf::int64 ProtoPackageSet::recharge_first_tick() const {
  return recharge_first_tick_;
}
inline void ProtoPackageSet::set_recharge_first_tick(::google::protobuf::int64 value) {
  set_has_recharge_first_tick();
  recharge_first_tick_ = value;
}

// optional int64 recharge_gold = 5;
inline bool ProtoPackageSet::has_recharge_gold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoPackageSet::set_has_recharge_gold() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoPackageSet::clear_has_recharge_gold() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoPackageSet::clear_recharge_gold() {
  recharge_gold_ = GOOGLE_LONGLONG(0);
  clear_has_recharge_gold();
}
inline ::google::protobuf::int64 ProtoPackageSet::recharge_gold() const {
  return recharge_gold_;
}
inline void ProtoPackageSet::set_recharge_gold(::google::protobuf::int64 value) {
  set_has_recharge_gold();
  recharge_gold_ = value;
}

// repeated .ProtoPairObj resource_map = 6;
inline int ProtoPackageSet::resource_map_size() const {
  return resource_map_.size();
}
inline void ProtoPackageSet::clear_resource_map() {
  resource_map_.Clear();
}
inline const ::ProtoPairObj& ProtoPackageSet::resource_map(int index) const {
  return resource_map_.Get(index);
}
inline ::ProtoPairObj* ProtoPackageSet::mutable_resource_map(int index) {
  return resource_map_.Mutable(index);
}
inline ::ProtoPairObj* ProtoPackageSet::add_resource_map() {
  return resource_map_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >&
ProtoPackageSet::resource_map() const {
  return resource_map_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >*
ProtoPackageSet::mutable_resource_map() {
  return &resource_map_;
}

// optional .ProtoPairMap use_resource_map = 7;
inline bool ProtoPackageSet::has_use_resource_map() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoPackageSet::set_has_use_resource_map() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoPackageSet::clear_has_use_resource_map() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoPackageSet::clear_use_resource_map() {
  if (use_resource_map_ != NULL) use_resource_map_->::ProtoPairMap::Clear();
  clear_has_use_resource_map();
}
inline const ::ProtoPairMap& ProtoPackageSet::use_resource_map() const {
  return use_resource_map_ != NULL ? *use_resource_map_ : *default_instance_->use_resource_map_;
}
inline ::ProtoPairMap* ProtoPackageSet::mutable_use_resource_map() {
  set_has_use_resource_map();
  if (use_resource_map_ == NULL) use_resource_map_ = new ::ProtoPairMap;
  return use_resource_map_;
}
inline ::ProtoPairMap* ProtoPackageSet::release_use_resource_map() {
  clear_has_use_resource_map();
  ::ProtoPairMap* temp = use_resource_map_;
  use_resource_map_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// ProtoPackage

// optional int32 pack_type = 1;
inline bool ProtoPackage::has_pack_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoPackage::set_has_pack_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoPackage::clear_has_pack_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoPackage::clear_pack_type() {
  pack_type_ = 0;
  clear_has_pack_type();
}
inline ::google::protobuf::int32 ProtoPackage::pack_type() const {
  return pack_type_;
}
inline void ProtoPackage::set_pack_type(::google::protobuf::int32 value) {
  set_has_pack_type();
  pack_type_ = value;
}

// optional int32 pack_size = 2;
inline bool ProtoPackage::has_pack_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoPackage::set_has_pack_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoPackage::clear_has_pack_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoPackage::clear_pack_size() {
  pack_size_ = 0;
  clear_has_pack_size();
}
inline ::google::protobuf::int32 ProtoPackage::pack_size() const {
  return pack_size_;
}
inline void ProtoPackage::set_pack_size(::google::protobuf::int32 value) {
  set_has_pack_size();
  pack_size_ = value;
}

// optional int32 last_open_tick = 3;
inline bool ProtoPackage::has_last_open_tick() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoPackage::set_has_last_open_tick() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoPackage::clear_has_last_open_tick() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoPackage::clear_last_open_tick() {
  last_open_tick_ = 0;
  clear_has_last_open_tick();
}
inline ::google::protobuf::int32 ProtoPackage::last_open_tick() const {
  return last_open_tick_;
}
inline void ProtoPackage::set_last_open_tick(::google::protobuf::int32 value) {
  set_has_last_open_tick();
  last_open_tick_ = value;
}

// repeated .ProtoItem item_list = 4;
inline int ProtoPackage::item_list_size() const {
  return item_list_.size();
}
inline void ProtoPackage::clear_item_list() {
  item_list_.Clear();
}
inline const ::ProtoItem& ProtoPackage::item_list(int index) const {
  return item_list_.Get(index);
}
inline ::ProtoItem* ProtoPackage::mutable_item_list(int index) {
  return item_list_.Mutable(index);
}
inline ::ProtoItem* ProtoPackage::add_item_list() {
  return item_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoItem >&
ProtoPackage::item_list() const {
  return item_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoItem >*
ProtoPackage::mutable_item_list() {
  return &item_list_;
}

// repeated .ProtoPairObj grid_vec = 5;
inline int ProtoPackage::grid_vec_size() const {
  return grid_vec_.size();
}
inline void ProtoPackage::clear_grid_vec() {
  grid_vec_.Clear();
}
inline const ::ProtoPairObj& ProtoPackage::grid_vec(int index) const {
  return grid_vec_.Get(index);
}
inline ::ProtoPairObj* ProtoPackage::mutable_grid_vec(int index) {
  return grid_vec_.Mutable(index);
}
inline ::ProtoPairObj* ProtoPackage::add_grid_vec() {
  return grid_vec_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >&
ProtoPackage::grid_vec() const {
  return grid_vec_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >*
ProtoPackage::mutable_grid_vec() {
  return &grid_vec_;
}

// optional int32 is_open_sublime = 6;
inline bool ProtoPackage::has_is_open_sublime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoPackage::set_has_is_open_sublime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoPackage::clear_has_is_open_sublime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoPackage::clear_is_open_sublime() {
  is_open_sublime_ = 0;
  clear_has_is_open_sublime();
}
inline ::google::protobuf::int32 ProtoPackage::is_open_sublime() const {
  return is_open_sublime_;
}
inline void ProtoPackage::set_is_open_sublime(::google::protobuf::int32 value) {
  set_has_is_open_sublime();
  is_open_sublime_ = value;
}

// optional int32 sublime_level = 7;
inline bool ProtoPackage::has_sublime_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoPackage::set_has_sublime_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoPackage::clear_has_sublime_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoPackage::clear_sublime_level() {
  sublime_level_ = 0;
  clear_has_sublime_level();
}
inline ::google::protobuf::int32 ProtoPackage::sublime_level() const {
  return sublime_level_;
}
inline void ProtoPackage::set_sublime_level(::google::protobuf::int32 value) {
  set_has_sublime_level();
  sublime_level_ = value;
}

// -------------------------------------------------------------------

// ProtoLimitGrid

// optional int32 index = 1;
inline bool ProtoLimitGrid::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoLimitGrid::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoLimitGrid::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoLimitGrid::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 ProtoLimitGrid::index() const {
  return index_;
}
inline void ProtoLimitGrid::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 left_tick = 2;
inline bool ProtoLimitGrid::has_left_tick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoLimitGrid::set_has_left_tick() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoLimitGrid::clear_has_left_tick() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoLimitGrid::clear_left_tick() {
  left_tick_ = 0;
  clear_has_left_tick();
}
inline ::google::protobuf::int32 ProtoLimitGrid::left_tick() const {
  return left_tick_;
}
inline void ProtoLimitGrid::set_left_tick(::google::protobuf::int32 value) {
  set_has_left_tick();
  left_tick_ = value;
}

// -------------------------------------------------------------------

// ProtoSerialObj

// optional int32 serial_type = 1;
inline bool ProtoSerialObj::has_serial_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoSerialObj::set_has_serial_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoSerialObj::clear_has_serial_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoSerialObj::clear_serial_type() {
  serial_type_ = 0;
  clear_has_serial_type();
}
inline ::google::protobuf::int32 ProtoSerialObj::serial_type() const {
  return serial_type_;
}
inline void ProtoSerialObj::set_serial_type(::google::protobuf::int32 value) {
  set_has_serial_type();
  serial_type_ = value;
}

// optional int32 sub_type = 2;
inline bool ProtoSerialObj::has_sub_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoSerialObj::set_has_sub_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoSerialObj::clear_has_sub_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoSerialObj::clear_sub_type() {
  sub_type_ = 0;
  clear_has_sub_type();
}
inline ::google::protobuf::int32 ProtoSerialObj::sub_type() const {
  return sub_type_;
}
inline void ProtoSerialObj::set_sub_type(::google::protobuf::int32 value) {
  set_has_sub_type();
  sub_type_ = value;
}

// optional int32 serial_value = 3;
inline bool ProtoSerialObj::has_serial_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoSerialObj::set_has_serial_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoSerialObj::clear_has_serial_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoSerialObj::clear_serial_value() {
  serial_value_ = 0;
  clear_has_serial_value();
}
inline ::google::protobuf::int32 ProtoSerialObj::serial_value() const {
  return serial_value_;
}
inline void ProtoSerialObj::set_serial_value(::google::protobuf::int32 value) {
  set_has_serial_value();
  serial_value_ = value;
}

// -------------------------------------------------------------------

// ProtoProItem

// optional int32 offset = 1;
inline bool ProtoProItem::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoProItem::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoProItem::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoProItem::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 ProtoProItem::offset() const {
  return offset_;
}
inline void ProtoProItem::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
}

// optional .ProtoPairObj pro_pair = 2;
inline bool ProtoProItem::has_pro_pair() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoProItem::set_has_pro_pair() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoProItem::clear_has_pro_pair() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoProItem::clear_pro_pair() {
  if (pro_pair_ != NULL) pro_pair_->::ProtoPairObj::Clear();
  clear_has_pro_pair();
}
inline const ::ProtoPairObj& ProtoProItem::pro_pair() const {
  return pro_pair_ != NULL ? *pro_pair_ : *default_instance_->pro_pair_;
}
inline ::ProtoPairObj* ProtoProItem::mutable_pro_pair() {
  set_has_pro_pair();
  if (pro_pair_ == NULL) pro_pair_ = new ::ProtoPairObj;
  return pro_pair_;
}
inline ::ProtoPairObj* ProtoProItem::release_pro_pair() {
  clear_has_pro_pair();
  ::ProtoPairObj* temp = pro_pair_;
  pro_pair_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// ProtoInnerTaskInfo

// optional int32 task_id = 1;
inline bool ProtoInnerTaskInfo::has_task_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoInnerTaskInfo::set_has_task_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoInnerTaskInfo::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoInnerTaskInfo::clear_task_id() {
  task_id_ = 0;
  clear_has_task_id();
}
inline ::google::protobuf::int32 ProtoInnerTaskInfo::task_id() const {
  return task_id_;
}
inline void ProtoInnerTaskInfo::set_task_id(::google::protobuf::int32 value) {
  set_has_task_id();
  task_id_ = value;
}

// optional int32 game_type = 2;
inline bool ProtoInnerTaskInfo::has_game_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoInnerTaskInfo::set_has_game_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoInnerTaskInfo::clear_has_game_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoInnerTaskInfo::clear_game_type() {
  game_type_ = 0;
  clear_has_game_type();
}
inline ::google::protobuf::int32 ProtoInnerTaskInfo::game_type() const {
  return game_type_;
}
inline void ProtoInnerTaskInfo::set_game_type(::google::protobuf::int32 value) {
  set_has_game_type();
  game_type_ = value;
}

// optional int64 accept_tick_sec = 3;
inline bool ProtoInnerTaskInfo::has_accept_tick_sec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoInnerTaskInfo::set_has_accept_tick_sec() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoInnerTaskInfo::clear_has_accept_tick_sec() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoInnerTaskInfo::clear_accept_tick_sec() {
  accept_tick_sec_ = GOOGLE_LONGLONG(0);
  clear_has_accept_tick_sec();
}
inline ::google::protobuf::int64 ProtoInnerTaskInfo::accept_tick_sec() const {
  return accept_tick_sec_;
}
inline void ProtoInnerTaskInfo::set_accept_tick_sec(::google::protobuf::int64 value) {
  set_has_accept_tick_sec();
  accept_tick_sec_ = value;
}

// optional int64 accept_tick_usec = 4;
inline bool ProtoInnerTaskInfo::has_accept_tick_usec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoInnerTaskInfo::set_has_accept_tick_usec() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoInnerTaskInfo::clear_has_accept_tick_usec() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoInnerTaskInfo::clear_accept_tick_usec() {
  accept_tick_usec_ = GOOGLE_LONGLONG(0);
  clear_has_accept_tick_usec();
}
inline ::google::protobuf::int64 ProtoInnerTaskInfo::accept_tick_usec() const {
  return accept_tick_usec_;
}
inline void ProtoInnerTaskInfo::set_accept_tick_usec(::google::protobuf::int64 value) {
  set_has_accept_tick_usec();
  accept_tick_usec_ = value;
}

// optional int64 refresh_tick_sec = 5;
inline bool ProtoInnerTaskInfo::has_refresh_tick_sec() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoInnerTaskInfo::set_has_refresh_tick_sec() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoInnerTaskInfo::clear_has_refresh_tick_sec() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoInnerTaskInfo::clear_refresh_tick_sec() {
  refresh_tick_sec_ = GOOGLE_LONGLONG(0);
  clear_has_refresh_tick_sec();
}
inline ::google::protobuf::int64 ProtoInnerTaskInfo::refresh_tick_sec() const {
  return refresh_tick_sec_;
}
inline void ProtoInnerTaskInfo::set_refresh_tick_sec(::google::protobuf::int64 value) {
  set_has_refresh_tick_sec();
  refresh_tick_sec_ = value;
}

// optional int64 refresh_tick_usec = 6;
inline bool ProtoInnerTaskInfo::has_refresh_tick_usec() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoInnerTaskInfo::set_has_refresh_tick_usec() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoInnerTaskInfo::clear_has_refresh_tick_usec() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoInnerTaskInfo::clear_refresh_tick_usec() {
  refresh_tick_usec_ = GOOGLE_LONGLONG(0);
  clear_has_refresh_tick_usec();
}
inline ::google::protobuf::int64 ProtoInnerTaskInfo::refresh_tick_usec() const {
  return refresh_tick_usec_;
}
inline void ProtoInnerTaskInfo::set_refresh_tick_usec(::google::protobuf::int64 value) {
  set_has_refresh_tick_usec();
  refresh_tick_usec_ = value;
}

// repeated .ProtoInnerTaskCond task_cond_list = 7;
inline int ProtoInnerTaskInfo::task_cond_list_size() const {
  return task_cond_list_.size();
}
inline void ProtoInnerTaskInfo::clear_task_cond_list() {
  task_cond_list_.Clear();
}
inline const ::ProtoInnerTaskCond& ProtoInnerTaskInfo::task_cond_list(int index) const {
  return task_cond_list_.Get(index);
}
inline ::ProtoInnerTaskCond* ProtoInnerTaskInfo::mutable_task_cond_list(int index) {
  return task_cond_list_.Mutable(index);
}
inline ::ProtoInnerTaskCond* ProtoInnerTaskInfo::add_task_cond_list() {
  return task_cond_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoInnerTaskCond >&
ProtoInnerTaskInfo::task_cond_list() const {
  return task_cond_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoInnerTaskCond >*
ProtoInnerTaskInfo::mutable_task_cond_list() {
  return &task_cond_list_;
}

// optional int32 prev_task = 8;
inline bool ProtoInnerTaskInfo::has_prev_task() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoInnerTaskInfo::set_has_prev_task() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoInnerTaskInfo::clear_has_prev_task() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoInnerTaskInfo::clear_prev_task() {
  prev_task_ = 0;
  clear_has_prev_task();
}
inline ::google::protobuf::int32 ProtoInnerTaskInfo::prev_task() const {
  return prev_task_;
}
inline void ProtoInnerTaskInfo::set_prev_task(::google::protobuf::int32 value) {
  set_has_prev_task();
  prev_task_ = value;
}

// optional int32 post_task = 9;
inline bool ProtoInnerTaskInfo::has_post_task() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProtoInnerTaskInfo::set_has_post_task() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProtoInnerTaskInfo::clear_has_post_task() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProtoInnerTaskInfo::clear_post_task() {
  post_task_ = 0;
  clear_has_post_task();
}
inline ::google::protobuf::int32 ProtoInnerTaskInfo::post_task() const {
  return post_task_;
}
inline void ProtoInnerTaskInfo::set_post_task(::google::protobuf::int32 value) {
  set_has_post_task();
  post_task_ = value;
}

// optional uint64 status = 10;
inline bool ProtoInnerTaskInfo::has_status() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProtoInnerTaskInfo::set_has_status() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ProtoInnerTaskInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ProtoInnerTaskInfo::clear_status() {
  status_ = GOOGLE_ULONGLONG(0);
  clear_has_status();
}
inline ::google::protobuf::uint64 ProtoInnerTaskInfo::status() const {
  return status_;
}
inline void ProtoInnerTaskInfo::set_status(::google::protobuf::uint64 value) {
  set_has_status();
  status_ = value;
}

// optional uint64 logic_type = 11;
inline bool ProtoInnerTaskInfo::has_logic_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ProtoInnerTaskInfo::set_has_logic_type() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ProtoInnerTaskInfo::clear_has_logic_type() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ProtoInnerTaskInfo::clear_logic_type() {
  logic_type_ = GOOGLE_ULONGLONG(0);
  clear_has_logic_type();
}
inline ::google::protobuf::uint64 ProtoInnerTaskInfo::logic_type() const {
  return logic_type_;
}
inline void ProtoInnerTaskInfo::set_logic_type(::google::protobuf::uint64 value) {
  set_has_logic_type();
  logic_type_ = value;
}

// optional int32 task_star = 12;
inline bool ProtoInnerTaskInfo::has_task_star() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ProtoInnerTaskInfo::set_has_task_star() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ProtoInnerTaskInfo::clear_has_task_star() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ProtoInnerTaskInfo::clear_task_star() {
  task_star_ = 0;
  clear_has_task_star();
}
inline ::google::protobuf::int32 ProtoInnerTaskInfo::task_star() const {
  return task_star_;
}
inline void ProtoInnerTaskInfo::set_task_star(::google::protobuf::int32 value) {
  set_has_task_star();
  task_star_ = value;
}

// optional int32 fast_finish_rate = 13;
inline bool ProtoInnerTaskInfo::has_fast_finish_rate() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ProtoInnerTaskInfo::set_has_fast_finish_rate() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ProtoInnerTaskInfo::clear_has_fast_finish_rate() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ProtoInnerTaskInfo::clear_fast_finish_rate() {
  fast_finish_rate_ = 0;
  clear_has_fast_finish_rate();
}
inline ::google::protobuf::int32 ProtoInnerTaskInfo::fast_finish_rate() const {
  return fast_finish_rate_;
}
inline void ProtoInnerTaskInfo::set_fast_finish_rate(::google::protobuf::int32 value) {
  set_has_fast_finish_rate();
  fast_finish_rate_ = value;
}

// optional int32 fresh_star_times = 14;
inline bool ProtoInnerTaskInfo::has_fresh_star_times() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ProtoInnerTaskInfo::set_has_fresh_star_times() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ProtoInnerTaskInfo::clear_has_fresh_star_times() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ProtoInnerTaskInfo::clear_fresh_star_times() {
  fresh_star_times_ = 0;
  clear_has_fresh_star_times();
}
inline ::google::protobuf::int32 ProtoInnerTaskInfo::fresh_star_times() const {
  return fresh_star_times_;
}
inline void ProtoInnerTaskInfo::set_fresh_star_times(::google::protobuf::int32 value) {
  set_has_fresh_star_times();
  fresh_star_times_ = value;
}

// -------------------------------------------------------------------

// ProtoInnerTaskCond

// optional int32 type = 1;
inline bool ProtoInnerTaskCond::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoInnerTaskCond::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoInnerTaskCond::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoInnerTaskCond::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ProtoInnerTaskCond::type() const {
  return type_;
}
inline void ProtoInnerTaskCond::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 current_value = 2;
inline bool ProtoInnerTaskCond::has_current_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoInnerTaskCond::set_has_current_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoInnerTaskCond::clear_has_current_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoInnerTaskCond::clear_current_value() {
  current_value_ = 0;
  clear_has_current_value();
}
inline ::google::protobuf::int32 ProtoInnerTaskCond::current_value() const {
  return current_value_;
}
inline void ProtoInnerTaskCond::set_current_value(::google::protobuf::int32 value) {
  set_has_current_value();
  current_value_ = value;
}

// optional int32 cond_index = 3;
inline bool ProtoInnerTaskCond::has_cond_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoInnerTaskCond::set_has_cond_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoInnerTaskCond::clear_has_cond_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoInnerTaskCond::clear_cond_index() {
  cond_index_ = 0;
  clear_has_cond_index();
}
inline ::google::protobuf::int32 ProtoInnerTaskCond::cond_index() const {
  return cond_index_;
}
inline void ProtoInnerTaskCond::set_cond_index(::google::protobuf::int32 value) {
  set_has_cond_index();
  cond_index_ = value;
}

// optional int32 id_list_index = 4;
inline bool ProtoInnerTaskCond::has_id_list_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoInnerTaskCond::set_has_id_list_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoInnerTaskCond::clear_has_id_list_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoInnerTaskCond::clear_id_list_index() {
  id_list_index_ = 0;
  clear_has_id_list_index();
}
inline ::google::protobuf::int32 ProtoInnerTaskCond::id_list_index() const {
  return id_list_index_;
}
inline void ProtoInnerTaskCond::set_id_list_index(::google::protobuf::int32 value) {
  set_has_id_list_index();
  id_list_index_ = value;
}

// optional int32 cond_id = 5;
inline bool ProtoInnerTaskCond::has_cond_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoInnerTaskCond::set_has_cond_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoInnerTaskCond::clear_has_cond_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoInnerTaskCond::clear_cond_id() {
  cond_id_ = 0;
  clear_has_cond_id();
}
inline ::google::protobuf::int32 ProtoInnerTaskCond::cond_id() const {
  return cond_id_;
}
inline void ProtoInnerTaskCond::set_cond_id(::google::protobuf::int32 value) {
  set_has_cond_id();
  cond_id_ = value;
}

// optional int32 final_value = 6;
inline bool ProtoInnerTaskCond::has_final_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoInnerTaskCond::set_has_final_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoInnerTaskCond::clear_has_final_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoInnerTaskCond::clear_final_value() {
  final_value_ = 0;
  clear_has_final_value();
}
inline ::google::protobuf::int32 ProtoInnerTaskCond::final_value() const {
  return final_value_;
}
inline void ProtoInnerTaskCond::set_final_value(::google::protobuf::int32 value) {
  set_has_final_value();
  final_value_ = value;
}

// optional int32 kill_type = 7;
inline bool ProtoInnerTaskCond::has_kill_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoInnerTaskCond::set_has_kill_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoInnerTaskCond::clear_has_kill_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoInnerTaskCond::clear_kill_type() {
  kill_type_ = 0;
  clear_has_kill_type();
}
inline ::google::protobuf::int32 ProtoInnerTaskCond::kill_type() const {
  return kill_type_;
}
inline void ProtoInnerTaskCond::set_kill_type(::google::protobuf::int32 value) {
  set_has_kill_type();
  kill_type_ = value;
}

// optional int32 range_level = 8;
inline bool ProtoInnerTaskCond::has_range_level() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoInnerTaskCond::set_has_range_level() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoInnerTaskCond::clear_has_range_level() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoInnerTaskCond::clear_range_level() {
  range_level_ = 0;
  clear_has_range_level();
}
inline ::google::protobuf::int32 ProtoInnerTaskCond::range_level() const {
  return range_level_;
}
inline void ProtoInnerTaskCond::set_range_level(::google::protobuf::int32 value) {
  set_has_range_level();
  range_level_ = value;
}

// -------------------------------------------------------------------

// ProtoSignInfo

// optional int32 sign_type = 1;
inline bool ProtoSignInfo::has_sign_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoSignInfo::set_has_sign_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoSignInfo::clear_has_sign_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoSignInfo::clear_sign_type() {
  sign_type_ = 0;
  clear_has_sign_type();
}
inline ::google::protobuf::int32 ProtoSignInfo::sign_type() const {
  return sign_type_;
}
inline void ProtoSignInfo::set_sign_type(::google::protobuf::int32 value) {
  set_has_sign_type();
  sign_type_ = value;
}

// optional int64 type_index = 2;
inline bool ProtoSignInfo::has_type_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoSignInfo::set_has_type_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoSignInfo::clear_has_type_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoSignInfo::clear_type_index() {
  type_index_ = GOOGLE_LONGLONG(0);
  clear_has_type_index();
}
inline ::google::protobuf::int64 ProtoSignInfo::type_index() const {
  return type_index_;
}
inline void ProtoSignInfo::set_type_index(::google::protobuf::int64 value) {
  set_has_type_index();
  type_index_ = value;
}

// optional string role_name = 3;
inline bool ProtoSignInfo::has_role_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoSignInfo::set_has_role_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoSignInfo::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoSignInfo::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& ProtoSignInfo::role_name() const {
  return *role_name_;
}
inline void ProtoSignInfo::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoSignInfo::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ProtoSignInfo::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoSignInfo::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* ProtoSignInfo::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 type_lvl = 4;
inline bool ProtoSignInfo::has_type_lvl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoSignInfo::set_has_type_lvl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoSignInfo::clear_has_type_lvl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoSignInfo::clear_type_lvl() {
  type_lvl_ = 0;
  clear_has_type_lvl();
}
inline ::google::protobuf::int32 ProtoSignInfo::type_lvl() const {
  return type_lvl_;
}
inline void ProtoSignInfo::set_type_lvl(::google::protobuf::int32 value) {
  set_has_type_lvl();
  type_lvl_ = value;
}

// optional int32 type_force = 5;
inline bool ProtoSignInfo::has_type_force() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoSignInfo::set_has_type_force() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoSignInfo::clear_has_type_force() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoSignInfo::clear_type_force() {
  type_force_ = 0;
  clear_has_type_force();
}
inline ::google::protobuf::int32 ProtoSignInfo::type_force() const {
  return type_force_;
}
inline void ProtoSignInfo::set_type_force(::google::protobuf::int32 value) {
  set_has_type_force();
  type_force_ = value;
}

// optional int32 type_count = 6;
inline bool ProtoSignInfo::has_type_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoSignInfo::set_has_type_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoSignInfo::clear_has_type_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoSignInfo::clear_type_count() {
  type_count_ = 0;
  clear_has_type_count();
}
inline ::google::protobuf::int32 ProtoSignInfo::type_count() const {
  return type_count_;
}
inline void ProtoSignInfo::set_type_count(::google::protobuf::int32 value) {
  set_has_type_count();
  type_count_ = value;
}

// -------------------------------------------------------------------

// ProtoFBItem

// optional int32 fb_id = 1;
inline bool ProtoFBItem::has_fb_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoFBItem::set_has_fb_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoFBItem::clear_has_fb_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoFBItem::clear_fb_id() {
  fb_id_ = 0;
  clear_has_fb_id();
}
inline ::google::protobuf::int32 ProtoFBItem::fb_id() const {
  return fb_id_;
}
inline void ProtoFBItem::set_fb_id(::google::protobuf::int32 value) {
  set_has_fb_id();
  fb_id_ = value;
}

// optional int32 finish_times = 2;
inline bool ProtoFBItem::has_finish_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoFBItem::set_has_finish_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoFBItem::clear_has_finish_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoFBItem::clear_finish_times() {
  finish_times_ = 0;
  clear_has_finish_times();
}
inline ::google::protobuf::int32 ProtoFBItem::finish_times() const {
  return finish_times_;
}
inline void ProtoFBItem::set_finish_times(::google::protobuf::int32 value) {
  set_has_finish_times();
  finish_times_ = value;
}

// optional int32 total_times = 3;
inline bool ProtoFBItem::has_total_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoFBItem::set_has_total_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoFBItem::clear_has_total_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoFBItem::clear_total_times() {
  total_times_ = 0;
  clear_has_total_times();
}
inline ::google::protobuf::int32 ProtoFBItem::total_times() const {
  return total_times_;
}
inline void ProtoFBItem::set_total_times(::google::protobuf::int32 value) {
  set_has_total_times();
  total_times_ = value;
}

// -------------------------------------------------------------------

// RecordMoney

// optional string table_name = 1;
inline bool RecordMoney::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecordMoney::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecordMoney::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecordMoney::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& RecordMoney::table_name() const {
  return *table_name_;
}
inline void RecordMoney::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void RecordMoney::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void RecordMoney::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecordMoney::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  return table_name_;
}
inline ::std::string* RecordMoney::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 role_id = 2;
inline bool RecordMoney::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecordMoney::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecordMoney::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecordMoney::clear_role_id() {
  role_id_ = GOOGLE_LONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::int64 RecordMoney::role_id() const {
  return role_id_;
}
inline void RecordMoney::set_role_id(::google::protobuf::int64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional int32 serial_type = 3;
inline bool RecordMoney::has_serial_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecordMoney::set_has_serial_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecordMoney::clear_has_serial_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecordMoney::clear_serial_type() {
  serial_type_ = 0;
  clear_has_serial_type();
}
inline ::google::protobuf::int32 RecordMoney::serial_type() const {
  return serial_type_;
}
inline void RecordMoney::set_serial_type(::google::protobuf::int32 value) {
  set_has_serial_type();
  serial_type_ = value;
}

// optional int32 sub_serial_type = 4;
inline bool RecordMoney::has_sub_serial_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RecordMoney::set_has_sub_serial_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RecordMoney::clear_has_sub_serial_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RecordMoney::clear_sub_serial_type() {
  sub_serial_type_ = 0;
  clear_has_sub_serial_type();
}
inline ::google::protobuf::int32 RecordMoney::sub_serial_type() const {
  return sub_serial_type_;
}
inline void RecordMoney::set_sub_serial_type(::google::protobuf::int32 value) {
  set_has_sub_serial_type();
  sub_serial_type_ = value;
}

// optional int32 sub_agent = 5;
inline bool RecordMoney::has_sub_agent() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RecordMoney::set_has_sub_agent() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RecordMoney::clear_has_sub_agent() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RecordMoney::clear_sub_agent() {
  sub_agent_ = 0;
  clear_has_sub_agent();
}
inline ::google::protobuf::int32 RecordMoney::sub_agent() const {
  return sub_agent_;
}
inline void RecordMoney::set_sub_agent(::google::protobuf::int32 value) {
  set_has_sub_agent();
  sub_agent_ = value;
}

// optional int32 money_type = 6;
inline bool RecordMoney::has_money_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RecordMoney::set_has_money_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RecordMoney::clear_has_money_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RecordMoney::clear_money_type() {
  money_type_ = 0;
  clear_has_money_type();
}
inline ::google::protobuf::int32 RecordMoney::money_type() const {
  return money_type_;
}
inline void RecordMoney::set_money_type(::google::protobuf::int32 value) {
  set_has_money_type();
  money_type_ = value;
}

// optional int32 money = 7;
inline bool RecordMoney::has_money() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RecordMoney::set_has_money() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RecordMoney::clear_has_money() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RecordMoney::clear_money() {
  money_ = 0;
  clear_has_money();
}
inline ::google::protobuf::int32 RecordMoney::money() const {
  return money_;
}
inline void RecordMoney::set_money(::google::protobuf::int32 value) {
  set_has_money();
  money_ = value;
}

// optional int32 bind_money = 8;
inline bool RecordMoney::has_bind_money() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RecordMoney::set_has_bind_money() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RecordMoney::clear_has_bind_money() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RecordMoney::clear_bind_money() {
  bind_money_ = 0;
  clear_has_bind_money();
}
inline ::google::protobuf::int32 RecordMoney::bind_money() const {
  return bind_money_;
}
inline void RecordMoney::set_bind_money(::google::protobuf::int32 value) {
  set_has_bind_money();
  bind_money_ = value;
}

// optional int32 remain_money = 9;
inline bool RecordMoney::has_remain_money() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RecordMoney::set_has_remain_money() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RecordMoney::clear_has_remain_money() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RecordMoney::clear_remain_money() {
  remain_money_ = 0;
  clear_has_remain_money();
}
inline ::google::protobuf::int32 RecordMoney::remain_money() const {
  return remain_money_;
}
inline void RecordMoney::set_remain_money(::google::protobuf::int32 value) {
  set_has_remain_money();
  remain_money_ = value;
}

// optional int32 remain_bind_money = 10;
inline bool RecordMoney::has_remain_bind_money() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RecordMoney::set_has_remain_bind_money() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RecordMoney::clear_has_remain_bind_money() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RecordMoney::clear_remain_bind_money() {
  remain_bind_money_ = 0;
  clear_has_remain_bind_money();
}
inline ::google::protobuf::int32 RecordMoney::remain_bind_money() const {
  return remain_bind_money_;
}
inline void RecordMoney::set_remain_bind_money(::google::protobuf::int32 value) {
  set_has_remain_bind_money();
  remain_bind_money_ = value;
}

// optional int32 time = 11;
inline bool RecordMoney::has_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RecordMoney::set_has_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RecordMoney::clear_has_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RecordMoney::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 RecordMoney::time() const {
  return time_;
}
inline void RecordMoney::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// optional int32 platform = 12;
inline bool RecordMoney::has_platform() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RecordMoney::set_has_platform() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RecordMoney::clear_has_platform() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RecordMoney::clear_platform() {
  platform_ = 0;
  clear_has_platform();
}
inline ::google::protobuf::int32 RecordMoney::platform() const {
  return platform_;
}
inline void RecordMoney::set_platform(::google::protobuf::int32 value) {
  set_has_platform();
  platform_ = value;
}

// optional int32 market = 13;
inline bool RecordMoney::has_market() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RecordMoney::set_has_market() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RecordMoney::clear_has_market() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RecordMoney::clear_market() {
  market_ = 0;
  clear_has_market();
}
inline ::google::protobuf::int32 RecordMoney::market() const {
  return market_;
}
inline void RecordMoney::set_market(::google::protobuf::int32 value) {
  set_has_market();
  market_ = value;
}

// -------------------------------------------------------------------

// RecordItem

// optional string table_name = 1;
inline bool RecordItem::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecordItem::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecordItem::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecordItem::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& RecordItem::table_name() const {
  return *table_name_;
}
inline void RecordItem::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void RecordItem::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void RecordItem::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecordItem::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  return table_name_;
}
inline ::std::string* RecordItem::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 role_id = 2;
inline bool RecordItem::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecordItem::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecordItem::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecordItem::clear_role_id() {
  role_id_ = GOOGLE_LONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::int64 RecordItem::role_id() const {
  return role_id_;
}
inline void RecordItem::set_role_id(::google::protobuf::int64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional int32 serial_type = 3;
inline bool RecordItem::has_serial_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecordItem::set_has_serial_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecordItem::clear_has_serial_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecordItem::clear_serial_type() {
  serial_type_ = 0;
  clear_has_serial_type();
}
inline ::google::protobuf::int32 RecordItem::serial_type() const {
  return serial_type_;
}
inline void RecordItem::set_serial_type(::google::protobuf::int32 value) {
  set_has_serial_type();
  serial_type_ = value;
}

// optional int32 sub_serial_type = 4;
inline bool RecordItem::has_sub_serial_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RecordItem::set_has_sub_serial_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RecordItem::clear_has_sub_serial_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RecordItem::clear_sub_serial_type() {
  sub_serial_type_ = 0;
  clear_has_sub_serial_type();
}
inline ::google::protobuf::int32 RecordItem::sub_serial_type() const {
  return sub_serial_type_;
}
inline void RecordItem::set_sub_serial_type(::google::protobuf::int32 value) {
  set_has_sub_serial_type();
  sub_serial_type_ = value;
}

// optional int32 sub_agent = 5;
inline bool RecordItem::has_sub_agent() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RecordItem::set_has_sub_agent() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RecordItem::clear_has_sub_agent() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RecordItem::clear_sub_agent() {
  sub_agent_ = 0;
  clear_has_sub_agent();
}
inline ::google::protobuf::int32 RecordItem::sub_agent() const {
  return sub_agent_;
}
inline void RecordItem::set_sub_agent(::google::protobuf::int32 value) {
  set_has_sub_agent();
  sub_agent_ = value;
}

// optional int32 item_id = 6;
inline bool RecordItem::has_item_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RecordItem::set_has_item_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RecordItem::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RecordItem::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
}
inline ::google::protobuf::int32 RecordItem::item_id() const {
  return item_id_;
}
inline void RecordItem::set_item_id(::google::protobuf::int32 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional int32 amount = 7;
inline bool RecordItem::has_amount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RecordItem::set_has_amount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RecordItem::clear_has_amount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RecordItem::clear_amount() {
  amount_ = 0;
  clear_has_amount();
}
inline ::google::protobuf::int32 RecordItem::amount() const {
  return amount_;
}
inline void RecordItem::set_amount(::google::protobuf::int32 value) {
  set_has_amount();
  amount_ = value;
}

// optional int32 bind = 8;
inline bool RecordItem::has_bind() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RecordItem::set_has_bind() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RecordItem::clear_has_bind() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RecordItem::clear_bind() {
  bind_ = 0;
  clear_has_bind();
}
inline ::google::protobuf::int32 RecordItem::bind() const {
  return bind_;
}
inline void RecordItem::set_bind(::google::protobuf::int32 value) {
  set_has_bind();
  bind_ = value;
}

// optional int32 time = 9;
inline bool RecordItem::has_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RecordItem::set_has_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RecordItem::clear_has_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RecordItem::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 RecordItem::time() const {
  return time_;
}
inline void RecordItem::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// optional int32 platform = 10;
inline bool RecordItem::has_platform() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RecordItem::set_has_platform() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RecordItem::clear_has_platform() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RecordItem::clear_platform() {
  platform_ = 0;
  clear_has_platform();
}
inline ::google::protobuf::int32 RecordItem::platform() const {
  return platform_;
}
inline void RecordItem::set_platform(::google::protobuf::int32 value) {
  set_has_platform();
  platform_ = value;
}

// optional int32 market = 11;
inline bool RecordItem::has_market() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RecordItem::set_has_market() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RecordItem::clear_has_market() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RecordItem::clear_market() {
  market_ = 0;
  clear_has_market();
}
inline ::google::protobuf::int32 RecordItem::market() const {
  return market_;
}
inline void RecordItem::set_market(::google::protobuf::int32 value) {
  set_has_market();
  market_ = value;
}

// optional int64 src_role_id = 12;
inline bool RecordItem::has_src_role_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RecordItem::set_has_src_role_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RecordItem::clear_has_src_role_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RecordItem::clear_src_role_id() {
  src_role_id_ = GOOGLE_LONGLONG(0);
  clear_has_src_role_id();
}
inline ::google::protobuf::int64 RecordItem::src_role_id() const {
  return src_role_id_;
}
inline void RecordItem::set_src_role_id(::google::protobuf::int64 value) {
  set_has_src_role_id();
  src_role_id_ = value;
}

// optional int32 role_level = 13;
inline bool RecordItem::has_role_level() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RecordItem::set_has_role_level() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RecordItem::clear_has_role_level() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RecordItem::clear_role_level() {
  role_level_ = 0;
  clear_has_role_level();
}
inline ::google::protobuf::int32 RecordItem::role_level() const {
  return role_level_;
}
inline void RecordItem::set_role_level(::google::protobuf::int32 value) {
  set_has_role_level();
  role_level_ = value;
}

// -------------------------------------------------------------------

// RecordEquipment

// optional string table_name = 1;
inline bool RecordEquipment::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecordEquipment::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecordEquipment::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecordEquipment::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& RecordEquipment::table_name() const {
  return *table_name_;
}
inline void RecordEquipment::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void RecordEquipment::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void RecordEquipment::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecordEquipment::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  return table_name_;
}
inline ::std::string* RecordEquipment::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 role_id = 2;
inline bool RecordEquipment::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecordEquipment::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecordEquipment::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecordEquipment::clear_role_id() {
  role_id_ = GOOGLE_LONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::int64 RecordEquipment::role_id() const {
  return role_id_;
}
inline void RecordEquipment::set_role_id(::google::protobuf::int64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional int32 serial_type = 3;
inline bool RecordEquipment::has_serial_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecordEquipment::set_has_serial_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecordEquipment::clear_has_serial_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecordEquipment::clear_serial_type() {
  serial_type_ = 0;
  clear_has_serial_type();
}
inline ::google::protobuf::int32 RecordEquipment::serial_type() const {
  return serial_type_;
}
inline void RecordEquipment::set_serial_type(::google::protobuf::int32 value) {
  set_has_serial_type();
  serial_type_ = value;
}

// optional int32 sub_agent = 4;
inline bool RecordEquipment::has_sub_agent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RecordEquipment::set_has_sub_agent() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RecordEquipment::clear_has_sub_agent() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RecordEquipment::clear_sub_agent() {
  sub_agent_ = 0;
  clear_has_sub_agent();
}
inline ::google::protobuf::int32 RecordEquipment::sub_agent() const {
  return sub_agent_;
}
inline void RecordEquipment::set_sub_agent(::google::protobuf::int32 value) {
  set_has_sub_agent();
  sub_agent_ = value;
}

// optional int32 equip_id = 5;
inline bool RecordEquipment::has_equip_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RecordEquipment::set_has_equip_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RecordEquipment::clear_has_equip_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RecordEquipment::clear_equip_id() {
  equip_id_ = 0;
  clear_has_equip_id();
}
inline ::google::protobuf::int32 RecordEquipment::equip_id() const {
  return equip_id_;
}
inline void RecordEquipment::set_equip_id(::google::protobuf::int32 value) {
  set_has_equip_id();
  equip_id_ = value;
}

// optional int32 amount = 6;
inline bool RecordEquipment::has_amount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RecordEquipment::set_has_amount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RecordEquipment::clear_has_amount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RecordEquipment::clear_amount() {
  amount_ = 0;
  clear_has_amount();
}
inline ::google::protobuf::int32 RecordEquipment::amount() const {
  return amount_;
}
inline void RecordEquipment::set_amount(::google::protobuf::int32 value) {
  set_has_amount();
  amount_ = value;
}

// optional int32 time = 7;
inline bool RecordEquipment::has_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RecordEquipment::set_has_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RecordEquipment::clear_has_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RecordEquipment::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 RecordEquipment::time() const {
  return time_;
}
inline void RecordEquipment::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// optional int32 bind = 8;
inline bool RecordEquipment::has_bind() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RecordEquipment::set_has_bind() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RecordEquipment::clear_has_bind() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RecordEquipment::clear_bind() {
  bind_ = 0;
  clear_has_bind();
}
inline ::google::protobuf::int32 RecordEquipment::bind() const {
  return bind_;
}
inline void RecordEquipment::set_bind(::google::protobuf::int32 value) {
  set_has_bind();
  bind_ = value;
}

// optional int32 index = 9;
inline bool RecordEquipment::has_index() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RecordEquipment::set_has_index() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RecordEquipment::clear_has_index() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RecordEquipment::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 RecordEquipment::index() const {
  return index_;
}
inline void RecordEquipment::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 pack_type = 10;
inline bool RecordEquipment::has_pack_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RecordEquipment::set_has_pack_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RecordEquipment::clear_has_pack_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RecordEquipment::clear_pack_type() {
  pack_type_ = 0;
  clear_has_pack_type();
}
inline ::google::protobuf::int32 RecordEquipment::pack_type() const {
  return pack_type_;
}
inline void RecordEquipment::set_pack_type(::google::protobuf::int32 value) {
  set_has_pack_type();
  pack_type_ = value;
}

// optional int32 refine_level = 11;
inline bool RecordEquipment::has_refine_level() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RecordEquipment::set_has_refine_level() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RecordEquipment::clear_has_refine_level() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RecordEquipment::clear_refine_level() {
  refine_level_ = 0;
  clear_has_refine_level();
}
inline ::google::protobuf::int32 RecordEquipment::refine_level() const {
  return refine_level_;
}
inline void RecordEquipment::set_refine_level(::google::protobuf::int32 value) {
  set_has_refine_level();
  refine_level_ = value;
}

// optional int32 refine_degree = 12;
inline bool RecordEquipment::has_refine_degree() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RecordEquipment::set_has_refine_degree() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RecordEquipment::clear_has_refine_degree() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RecordEquipment::clear_refine_degree() {
  refine_degree_ = 0;
  clear_has_refine_degree();
}
inline ::google::protobuf::int32 RecordEquipment::refine_degree() const {
  return refine_degree_;
}
inline void RecordEquipment::set_refine_degree(::google::protobuf::int32 value) {
  set_has_refine_degree();
  refine_degree_ = value;
}

// optional int32 serial_sub_type = 13;
inline bool RecordEquipment::has_serial_sub_type() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RecordEquipment::set_has_serial_sub_type() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RecordEquipment::clear_has_serial_sub_type() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RecordEquipment::clear_serial_sub_type() {
  serial_sub_type_ = 0;
  clear_has_serial_sub_type();
}
inline ::google::protobuf::int32 RecordEquipment::serial_sub_type() const {
  return serial_sub_type_;
}
inline void RecordEquipment::set_serial_sub_type(::google::protobuf::int32 value) {
  set_has_serial_sub_type();
  serial_sub_type_ = value;
}

// optional int32 platform = 14;
inline bool RecordEquipment::has_platform() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RecordEquipment::set_has_platform() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RecordEquipment::clear_has_platform() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RecordEquipment::clear_platform() {
  platform_ = 0;
  clear_has_platform();
}
inline ::google::protobuf::int32 RecordEquipment::platform() const {
  return platform_;
}
inline void RecordEquipment::set_platform(::google::protobuf::int32 value) {
  set_has_platform();
  platform_ = value;
}

// optional int32 luck_value = 15;
inline bool RecordEquipment::has_luck_value() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RecordEquipment::set_has_luck_value() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RecordEquipment::clear_has_luck_value() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RecordEquipment::clear_luck_value() {
  luck_value_ = 0;
  clear_has_luck_value();
}
inline ::google::protobuf::int32 RecordEquipment::luck_value() const {
  return luck_value_;
}
inline void RecordEquipment::set_luck_value(::google::protobuf::int32 value) {
  set_has_luck_value();
  luck_value_ = value;
}

// optional string jewel_lists = 16;
inline bool RecordEquipment::has_jewel_lists() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RecordEquipment::set_has_jewel_lists() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RecordEquipment::clear_has_jewel_lists() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RecordEquipment::clear_jewel_lists() {
  if (jewel_lists_ != &::google::protobuf::internal::kEmptyString) {
    jewel_lists_->clear();
  }
  clear_has_jewel_lists();
}
inline const ::std::string& RecordEquipment::jewel_lists() const {
  return *jewel_lists_;
}
inline void RecordEquipment::set_jewel_lists(const ::std::string& value) {
  set_has_jewel_lists();
  if (jewel_lists_ == &::google::protobuf::internal::kEmptyString) {
    jewel_lists_ = new ::std::string;
  }
  jewel_lists_->assign(value);
}
inline void RecordEquipment::set_jewel_lists(const char* value) {
  set_has_jewel_lists();
  if (jewel_lists_ == &::google::protobuf::internal::kEmptyString) {
    jewel_lists_ = new ::std::string;
  }
  jewel_lists_->assign(value);
}
inline void RecordEquipment::set_jewel_lists(const char* value, size_t size) {
  set_has_jewel_lists();
  if (jewel_lists_ == &::google::protobuf::internal::kEmptyString) {
    jewel_lists_ = new ::std::string;
  }
  jewel_lists_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecordEquipment::mutable_jewel_lists() {
  set_has_jewel_lists();
  if (jewel_lists_ == &::google::protobuf::internal::kEmptyString) {
    jewel_lists_ = new ::std::string;
  }
  return jewel_lists_;
}
inline ::std::string* RecordEquipment::release_jewel_lists() {
  clear_has_jewel_lists();
  if (jewel_lists_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = jewel_lists_;
    jewel_lists_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string cur_polish = 17;
inline bool RecordEquipment::has_cur_polish() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RecordEquipment::set_has_cur_polish() {
  _has_bits_[0] |= 0x00010000u;
}
inline void RecordEquipment::clear_has_cur_polish() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void RecordEquipment::clear_cur_polish() {
  if (cur_polish_ != &::google::protobuf::internal::kEmptyString) {
    cur_polish_->clear();
  }
  clear_has_cur_polish();
}
inline const ::std::string& RecordEquipment::cur_polish() const {
  return *cur_polish_;
}
inline void RecordEquipment::set_cur_polish(const ::std::string& value) {
  set_has_cur_polish();
  if (cur_polish_ == &::google::protobuf::internal::kEmptyString) {
    cur_polish_ = new ::std::string;
  }
  cur_polish_->assign(value);
}
inline void RecordEquipment::set_cur_polish(const char* value) {
  set_has_cur_polish();
  if (cur_polish_ == &::google::protobuf::internal::kEmptyString) {
    cur_polish_ = new ::std::string;
  }
  cur_polish_->assign(value);
}
inline void RecordEquipment::set_cur_polish(const char* value, size_t size) {
  set_has_cur_polish();
  if (cur_polish_ == &::google::protobuf::internal::kEmptyString) {
    cur_polish_ = new ::std::string;
  }
  cur_polish_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecordEquipment::mutable_cur_polish() {
  set_has_cur_polish();
  if (cur_polish_ == &::google::protobuf::internal::kEmptyString) {
    cur_polish_ = new ::std::string;
  }
  return cur_polish_;
}
inline ::std::string* RecordEquipment::release_cur_polish() {
  clear_has_cur_polish();
  if (cur_polish_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cur_polish_;
    cur_polish_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string extern_attr = 18;
inline bool RecordEquipment::has_extern_attr() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void RecordEquipment::set_has_extern_attr() {
  _has_bits_[0] |= 0x00020000u;
}
inline void RecordEquipment::clear_has_extern_attr() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void RecordEquipment::clear_extern_attr() {
  if (extern_attr_ != &::google::protobuf::internal::kEmptyString) {
    extern_attr_->clear();
  }
  clear_has_extern_attr();
}
inline const ::std::string& RecordEquipment::extern_attr() const {
  return *extern_attr_;
}
inline void RecordEquipment::set_extern_attr(const ::std::string& value) {
  set_has_extern_attr();
  if (extern_attr_ == &::google::protobuf::internal::kEmptyString) {
    extern_attr_ = new ::std::string;
  }
  extern_attr_->assign(value);
}
inline void RecordEquipment::set_extern_attr(const char* value) {
  set_has_extern_attr();
  if (extern_attr_ == &::google::protobuf::internal::kEmptyString) {
    extern_attr_ = new ::std::string;
  }
  extern_attr_->assign(value);
}
inline void RecordEquipment::set_extern_attr(const char* value, size_t size) {
  set_has_extern_attr();
  if (extern_attr_ == &::google::protobuf::internal::kEmptyString) {
    extern_attr_ = new ::std::string;
  }
  extern_attr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecordEquipment::mutable_extern_attr() {
  set_has_extern_attr();
  if (extern_attr_ == &::google::protobuf::internal::kEmptyString) {
    extern_attr_ = new ::std::string;
  }
  return extern_attr_;
}
inline ::std::string* RecordEquipment::release_extern_attr() {
  clear_has_extern_attr();
  if (extern_attr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = extern_attr_;
    extern_attr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string molding = 19;
inline bool RecordEquipment::has_molding() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void RecordEquipment::set_has_molding() {
  _has_bits_[0] |= 0x00040000u;
}
inline void RecordEquipment::clear_has_molding() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void RecordEquipment::clear_molding() {
  if (molding_ != &::google::protobuf::internal::kEmptyString) {
    molding_->clear();
  }
  clear_has_molding();
}
inline const ::std::string& RecordEquipment::molding() const {
  return *molding_;
}
inline void RecordEquipment::set_molding(const ::std::string& value) {
  set_has_molding();
  if (molding_ == &::google::protobuf::internal::kEmptyString) {
    molding_ = new ::std::string;
  }
  molding_->assign(value);
}
inline void RecordEquipment::set_molding(const char* value) {
  set_has_molding();
  if (molding_ == &::google::protobuf::internal::kEmptyString) {
    molding_ = new ::std::string;
  }
  molding_->assign(value);
}
inline void RecordEquipment::set_molding(const char* value, size_t size) {
  set_has_molding();
  if (molding_ == &::google::protobuf::internal::kEmptyString) {
    molding_ = new ::std::string;
  }
  molding_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecordEquipment::mutable_molding() {
  set_has_molding();
  if (molding_ == &::google::protobuf::internal::kEmptyString) {
    molding_ = new ::std::string;
  }
  return molding_;
}
inline ::std::string* RecordEquipment::release_molding() {
  clear_has_molding();
  if (molding_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = molding_;
    molding_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// RecordPlayerLevel

// optional string table_name = 1;
inline bool RecordPlayerLevel::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecordPlayerLevel::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecordPlayerLevel::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecordPlayerLevel::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& RecordPlayerLevel::table_name() const {
  return *table_name_;
}
inline void RecordPlayerLevel::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void RecordPlayerLevel::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void RecordPlayerLevel::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecordPlayerLevel::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  return table_name_;
}
inline ::std::string* RecordPlayerLevel::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 role_id = 2;
inline bool RecordPlayerLevel::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecordPlayerLevel::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecordPlayerLevel::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecordPlayerLevel::clear_role_id() {
  role_id_ = GOOGLE_LONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::int64 RecordPlayerLevel::role_id() const {
  return role_id_;
}
inline void RecordPlayerLevel::set_role_id(::google::protobuf::int64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional int32 serial_type = 3;
inline bool RecordPlayerLevel::has_serial_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecordPlayerLevel::set_has_serial_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecordPlayerLevel::clear_has_serial_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecordPlayerLevel::clear_serial_type() {
  serial_type_ = 0;
  clear_has_serial_type();
}
inline ::google::protobuf::int32 RecordPlayerLevel::serial_type() const {
  return serial_type_;
}
inline void RecordPlayerLevel::set_serial_type(::google::protobuf::int32 value) {
  set_has_serial_type();
  serial_type_ = value;
}

// optional int32 sub_agent = 4;
inline bool RecordPlayerLevel::has_sub_agent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RecordPlayerLevel::set_has_sub_agent() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RecordPlayerLevel::clear_has_sub_agent() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RecordPlayerLevel::clear_sub_agent() {
  sub_agent_ = 0;
  clear_has_sub_agent();
}
inline ::google::protobuf::int32 RecordPlayerLevel::sub_agent() const {
  return sub_agent_;
}
inline void RecordPlayerLevel::set_sub_agent(::google::protobuf::int32 value) {
  set_has_sub_agent();
  sub_agent_ = value;
}

// optional int32 level = 5;
inline bool RecordPlayerLevel::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RecordPlayerLevel::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RecordPlayerLevel::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RecordPlayerLevel::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 RecordPlayerLevel::level() const {
  return level_;
}
inline void RecordPlayerLevel::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 time = 6;
inline bool RecordPlayerLevel::has_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RecordPlayerLevel::set_has_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RecordPlayerLevel::clear_has_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RecordPlayerLevel::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 RecordPlayerLevel::time() const {
  return time_;
}
inline void RecordPlayerLevel::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// optional int32 platform = 7;
inline bool RecordPlayerLevel::has_platform() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RecordPlayerLevel::set_has_platform() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RecordPlayerLevel::clear_has_platform() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RecordPlayerLevel::clear_platform() {
  platform_ = 0;
  clear_has_platform();
}
inline ::google::protobuf::int32 RecordPlayerLevel::platform() const {
  return platform_;
}
inline void RecordPlayerLevel::set_platform(::google::protobuf::int32 value) {
  set_has_platform();
  platform_ = value;
}

// -------------------------------------------------------------------

// RecordOtherSerial

// optional string table_name = 1;
inline bool RecordOtherSerial::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecordOtherSerial::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecordOtherSerial::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecordOtherSerial::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& RecordOtherSerial::table_name() const {
  return *table_name_;
}
inline void RecordOtherSerial::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void RecordOtherSerial::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void RecordOtherSerial::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecordOtherSerial::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  return table_name_;
}
inline ::std::string* RecordOtherSerial::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 role_id = 2;
inline bool RecordOtherSerial::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecordOtherSerial::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecordOtherSerial::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecordOtherSerial::clear_role_id() {
  role_id_ = GOOGLE_LONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::int64 RecordOtherSerial::role_id() const {
  return role_id_;
}
inline void RecordOtherSerial::set_role_id(::google::protobuf::int64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional int32 serial_type = 3;
inline bool RecordOtherSerial::has_serial_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecordOtherSerial::set_has_serial_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecordOtherSerial::clear_has_serial_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecordOtherSerial::clear_serial_type() {
  serial_type_ = 0;
  clear_has_serial_type();
}
inline ::google::protobuf::int32 RecordOtherSerial::serial_type() const {
  return serial_type_;
}
inline void RecordOtherSerial::set_serial_type(::google::protobuf::int32 value) {
  set_has_serial_type();
  serial_type_ = value;
}

// optional int32 sub_serial_type = 4;
inline bool RecordOtherSerial::has_sub_serial_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RecordOtherSerial::set_has_sub_serial_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RecordOtherSerial::clear_has_sub_serial_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RecordOtherSerial::clear_sub_serial_type() {
  sub_serial_type_ = 0;
  clear_has_sub_serial_type();
}
inline ::google::protobuf::int32 RecordOtherSerial::sub_serial_type() const {
  return sub_serial_type_;
}
inline void RecordOtherSerial::set_sub_serial_type(::google::protobuf::int32 value) {
  set_has_sub_serial_type();
  sub_serial_type_ = value;
}

// optional int32 sub_agent = 5;
inline bool RecordOtherSerial::has_sub_agent() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RecordOtherSerial::set_has_sub_agent() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RecordOtherSerial::clear_has_sub_agent() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RecordOtherSerial::clear_sub_agent() {
  sub_agent_ = 0;
  clear_has_sub_agent();
}
inline ::google::protobuf::int32 RecordOtherSerial::sub_agent() const {
  return sub_agent_;
}
inline void RecordOtherSerial::set_sub_agent(::google::protobuf::int32 value) {
  set_has_sub_agent();
  sub_agent_ = value;
}

// optional int64 value = 6;
inline bool RecordOtherSerial::has_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RecordOtherSerial::set_has_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RecordOtherSerial::clear_has_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RecordOtherSerial::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::int64 RecordOtherSerial::value() const {
  return value_;
}
inline void RecordOtherSerial::set_value(::google::protobuf::int64 value) {
  set_has_value();
  value_ = value;
}

// optional int64 ext1 = 7;
inline bool RecordOtherSerial::has_ext1() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RecordOtherSerial::set_has_ext1() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RecordOtherSerial::clear_has_ext1() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RecordOtherSerial::clear_ext1() {
  ext1_ = GOOGLE_LONGLONG(0);
  clear_has_ext1();
}
inline ::google::protobuf::int64 RecordOtherSerial::ext1() const {
  return ext1_;
}
inline void RecordOtherSerial::set_ext1(::google::protobuf::int64 value) {
  set_has_ext1();
  ext1_ = value;
}

// optional int64 ext2 = 8;
inline bool RecordOtherSerial::has_ext2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RecordOtherSerial::set_has_ext2() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RecordOtherSerial::clear_has_ext2() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RecordOtherSerial::clear_ext2() {
  ext2_ = GOOGLE_LONGLONG(0);
  clear_has_ext2();
}
inline ::google::protobuf::int64 RecordOtherSerial::ext2() const {
  return ext2_;
}
inline void RecordOtherSerial::set_ext2(::google::protobuf::int64 value) {
  set_has_ext2();
  ext2_ = value;
}

// optional int32 time = 9;
inline bool RecordOtherSerial::has_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RecordOtherSerial::set_has_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RecordOtherSerial::clear_has_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RecordOtherSerial::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 RecordOtherSerial::time() const {
  return time_;
}
inline void RecordOtherSerial::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// optional int32 platform = 10;
inline bool RecordOtherSerial::has_platform() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RecordOtherSerial::set_has_platform() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RecordOtherSerial::clear_has_platform() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RecordOtherSerial::clear_platform() {
  platform_ = 0;
  clear_has_platform();
}
inline ::google::protobuf::int32 RecordOtherSerial::platform() const {
  return platform_;
}
inline void RecordOtherSerial::set_platform(::google::protobuf::int32 value) {
  set_has_platform();
  platform_ = value;
}

// -------------------------------------------------------------------

// ProtoScriptRecord

// optional int32 script_sort = 1;
inline bool ProtoScriptRecord::has_script_sort() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoScriptRecord::set_has_script_sort() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoScriptRecord::clear_has_script_sort() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoScriptRecord::clear_script_sort() {
  script_sort_ = 0;
  clear_has_script_sort();
}
inline ::google::protobuf::int32 ProtoScriptRecord::script_sort() const {
  return script_sort_;
}
inline void ProtoScriptRecord::set_script_sort(::google::protobuf::int32 value) {
  set_has_script_sort();
  script_sort_ = value;
}

// optional int32 used_times = 2;
inline bool ProtoScriptRecord::has_used_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoScriptRecord::set_has_used_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoScriptRecord::clear_has_used_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoScriptRecord::clear_used_times() {
  used_times_ = 0;
  clear_has_used_times();
}
inline ::google::protobuf::int32 ProtoScriptRecord::used_times() const {
  return used_times_;
}
inline void ProtoScriptRecord::set_used_times(::google::protobuf::int32 value) {
  set_has_used_times();
  used_times_ = value;
}

// optional int32 used_times_tick = 3;
inline bool ProtoScriptRecord::has_used_times_tick() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoScriptRecord::set_has_used_times_tick() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoScriptRecord::clear_has_used_times_tick() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoScriptRecord::clear_used_times_tick() {
  used_times_tick_ = 0;
  clear_has_used_times_tick();
}
inline ::google::protobuf::int32 ProtoScriptRecord::used_times_tick() const {
  return used_times_tick_;
}
inline void ProtoScriptRecord::set_used_times_tick(::google::protobuf::int32 value) {
  set_has_used_times_tick();
  used_times_tick_ = value;
}

// optional int32 enter_script_tick = 4;
inline bool ProtoScriptRecord::has_enter_script_tick() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoScriptRecord::set_has_enter_script_tick() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoScriptRecord::clear_has_enter_script_tick() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoScriptRecord::clear_enter_script_tick() {
  enter_script_tick_ = 0;
  clear_has_enter_script_tick();
}
inline ::google::protobuf::int32 ProtoScriptRecord::enter_script_tick() const {
  return enter_script_tick_;
}
inline void ProtoScriptRecord::set_enter_script_tick(::google::protobuf::int32 value) {
  set_has_enter_script_tick();
  enter_script_tick_ = value;
}

// optional int64 progress_id = 5;
inline bool ProtoScriptRecord::has_progress_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoScriptRecord::set_has_progress_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoScriptRecord::clear_has_progress_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoScriptRecord::clear_progress_id() {
  progress_id_ = GOOGLE_LONGLONG(0);
  clear_has_progress_id();
}
inline ::google::protobuf::int64 ProtoScriptRecord::progress_id() const {
  return progress_id_;
}
inline void ProtoScriptRecord::set_progress_id(::google::protobuf::int64 value) {
  set_has_progress_id();
  progress_id_ = value;
}

// optional int32 best_use_tick = 6;
inline bool ProtoScriptRecord::has_best_use_tick() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoScriptRecord::set_has_best_use_tick() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoScriptRecord::clear_has_best_use_tick() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoScriptRecord::clear_best_use_tick() {
  best_use_tick_ = 0;
  clear_has_best_use_tick();
}
inline ::google::protobuf::int32 ProtoScriptRecord::best_use_tick() const {
  return best_use_tick_;
}
inline void ProtoScriptRecord::set_best_use_tick(::google::protobuf::int32 value) {
  set_has_best_use_tick();
  best_use_tick_ = value;
}

// optional int32 is_first_pass = 7;
inline bool ProtoScriptRecord::has_is_first_pass() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoScriptRecord::set_has_is_first_pass() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoScriptRecord::clear_has_is_first_pass() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoScriptRecord::clear_is_first_pass() {
  is_first_pass_ = 0;
  clear_has_is_first_pass();
}
inline ::google::protobuf::int32 ProtoScriptRecord::is_first_pass() const {
  return is_first_pass_;
}
inline void ProtoScriptRecord::set_is_first_pass(::google::protobuf::int32 value) {
  set_has_is_first_pass();
  is_first_pass_ = value;
}

// optional int32 buy_left_times = 8;
inline bool ProtoScriptRecord::has_buy_left_times() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoScriptRecord::set_has_buy_left_times() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoScriptRecord::clear_has_buy_left_times() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoScriptRecord::clear_buy_left_times() {
  buy_left_times_ = 0;
  clear_has_buy_left_times();
}
inline ::google::protobuf::int32 ProtoScriptRecord::buy_left_times() const {
  return buy_left_times_;
}
inline void ProtoScriptRecord::set_buy_left_times(::google::protobuf::int32 value) {
  set_has_buy_left_times();
  buy_left_times_ = value;
}

// optional int32 couple_buy_times = 9;
inline bool ProtoScriptRecord::has_couple_buy_times() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProtoScriptRecord::set_has_couple_buy_times() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProtoScriptRecord::clear_has_couple_buy_times() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProtoScriptRecord::clear_couple_buy_times() {
  couple_buy_times_ = 0;
  clear_has_couple_buy_times();
}
inline ::google::protobuf::int32 ProtoScriptRecord::couple_buy_times() const {
  return couple_buy_times_;
}
inline void ProtoScriptRecord::set_couple_buy_times(::google::protobuf::int32 value) {
  set_has_couple_buy_times();
  couple_buy_times_ = value;
}

// optional int32 day_pass_times = 10;
inline bool ProtoScriptRecord::has_day_pass_times() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProtoScriptRecord::set_has_day_pass_times() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ProtoScriptRecord::clear_has_day_pass_times() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ProtoScriptRecord::clear_day_pass_times() {
  day_pass_times_ = 0;
  clear_has_day_pass_times();
}
inline ::google::protobuf::int32 ProtoScriptRecord::day_pass_times() const {
  return day_pass_times_;
}
inline void ProtoScriptRecord::set_day_pass_times(::google::protobuf::int32 value) {
  set_has_day_pass_times();
  day_pass_times_ = value;
}

// optional int32 is_even_enter = 11;
inline bool ProtoScriptRecord::has_is_even_enter() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ProtoScriptRecord::set_has_is_even_enter() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ProtoScriptRecord::clear_has_is_even_enter() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ProtoScriptRecord::clear_is_even_enter() {
  is_even_enter_ = 0;
  clear_has_is_even_enter();
}
inline ::google::protobuf::int32 ProtoScriptRecord::is_even_enter() const {
  return is_even_enter_;
}
inline void ProtoScriptRecord::set_is_even_enter(::google::protobuf::int32 value) {
  set_has_is_even_enter();
  is_even_enter_ = value;
}

// optional int32 protect_beast_index = 12;
inline bool ProtoScriptRecord::has_protect_beast_index() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ProtoScriptRecord::set_has_protect_beast_index() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ProtoScriptRecord::clear_has_protect_beast_index() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ProtoScriptRecord::clear_protect_beast_index() {
  protect_beast_index_ = 0;
  clear_has_protect_beast_index();
}
inline ::google::protobuf::int32 ProtoScriptRecord::protect_beast_index() const {
  return protect_beast_index_;
}
inline void ProtoScriptRecord::set_protect_beast_index(::google::protobuf::int32 value) {
  set_has_protect_beast_index();
  protect_beast_index_ = value;
}

// -------------------------------------------------------------------

// ProtoLivenessTaskInfo

// optional int32 task_id = 1;
inline bool ProtoLivenessTaskInfo::has_task_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoLivenessTaskInfo::set_has_task_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoLivenessTaskInfo::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoLivenessTaskInfo::clear_task_id() {
  task_id_ = 0;
  clear_has_task_id();
}
inline ::google::protobuf::int32 ProtoLivenessTaskInfo::task_id() const {
  return task_id_;
}
inline void ProtoLivenessTaskInfo::set_task_id(::google::protobuf::int32 value) {
  set_has_task_id();
  task_id_ = value;
}

// optional int32 status = 2;
inline bool ProtoLivenessTaskInfo::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoLivenessTaskInfo::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoLivenessTaskInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoLivenessTaskInfo::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 ProtoLivenessTaskInfo::status() const {
  return status_;
}
inline void ProtoLivenessTaskInfo::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional int32 time_index = 3;
inline bool ProtoLivenessTaskInfo::has_time_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoLivenessTaskInfo::set_has_time_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoLivenessTaskInfo::clear_has_time_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoLivenessTaskInfo::clear_time_index() {
  time_index_ = 0;
  clear_has_time_index();
}
inline ::google::protobuf::int32 ProtoLivenessTaskInfo::time_index() const {
  return time_index_;
}
inline void ProtoLivenessTaskInfo::set_time_index(::google::protobuf::int32 value) {
  set_has_time_index();
  time_index_ = value;
}

// optional int32 num = 4;
inline bool ProtoLivenessTaskInfo::has_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoLivenessTaskInfo::set_has_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoLivenessTaskInfo::clear_has_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoLivenessTaskInfo::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 ProtoLivenessTaskInfo::num() const {
  return num_;
}
inline void ProtoLivenessTaskInfo::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// optional int32 finish_num = 5;
inline bool ProtoLivenessTaskInfo::has_finish_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoLivenessTaskInfo::set_has_finish_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoLivenessTaskInfo::clear_has_finish_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoLivenessTaskInfo::clear_finish_num() {
  finish_num_ = 0;
  clear_has_finish_num();
}
inline ::google::protobuf::int32 ProtoLivenessTaskInfo::finish_num() const {
  return finish_num_;
}
inline void ProtoLivenessTaskInfo::set_finish_num(::google::protobuf::int32 value) {
  set_has_finish_num();
  finish_num_ = value;
}

// -------------------------------------------------------------------

// ProtoExpRestoreRecord

// optional int32 id = 1;
inline bool ProtoExpRestoreRecord::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoExpRestoreRecord::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoExpRestoreRecord::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoExpRestoreRecord::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ProtoExpRestoreRecord::id() const {
  return id_;
}
inline void ProtoExpRestoreRecord::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 date = 2;
inline bool ProtoExpRestoreRecord::has_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoExpRestoreRecord::set_has_date() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoExpRestoreRecord::clear_has_date() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoExpRestoreRecord::clear_date() {
  date_ = 0;
  clear_has_date();
}
inline ::google::protobuf::int32 ProtoExpRestoreRecord::date() const {
  return date_;
}
inline void ProtoExpRestoreRecord::set_date(::google::protobuf::int32 value) {
  set_has_date();
  date_ = value;
}

// optional int32 count = 3;
inline bool ProtoExpRestoreRecord::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoExpRestoreRecord::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoExpRestoreRecord::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoExpRestoreRecord::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 ProtoExpRestoreRecord::count() const {
  return count_;
}
inline void ProtoExpRestoreRecord::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// optional bool valid = 4;
inline bool ProtoExpRestoreRecord::has_valid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoExpRestoreRecord::set_has_valid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoExpRestoreRecord::clear_has_valid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoExpRestoreRecord::clear_valid() {
  valid_ = false;
  clear_has_valid();
}
inline bool ProtoExpRestoreRecord::valid() const {
  return valid_;
}
inline void ProtoExpRestoreRecord::set_valid(bool value) {
  set_has_valid();
  valid_ = value;
}

// -------------------------------------------------------------------

// ProtoMagicalPolish

// optional int32 magical_id = 1;
inline bool ProtoMagicalPolish::has_magical_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoMagicalPolish::set_has_magical_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoMagicalPolish::clear_has_magical_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoMagicalPolish::clear_magical_id() {
  magical_id_ = 0;
  clear_has_magical_id();
}
inline ::google::protobuf::int32 ProtoMagicalPolish::magical_id() const {
  return magical_id_;
}
inline void ProtoMagicalPolish::set_magical_id(::google::protobuf::int32 value) {
  set_has_magical_id();
  magical_id_ = value;
}

// optional .ProtoMagicalInfo cur_use = 2;
inline bool ProtoMagicalPolish::has_cur_use() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoMagicalPolish::set_has_cur_use() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoMagicalPolish::clear_has_cur_use() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoMagicalPolish::clear_cur_use() {
  if (cur_use_ != NULL) cur_use_->::ProtoMagicalInfo::Clear();
  clear_has_cur_use();
}
inline const ::ProtoMagicalInfo& ProtoMagicalPolish::cur_use() const {
  return cur_use_ != NULL ? *cur_use_ : *default_instance_->cur_use_;
}
inline ::ProtoMagicalInfo* ProtoMagicalPolish::mutable_cur_use() {
  set_has_cur_use();
  if (cur_use_ == NULL) cur_use_ = new ::ProtoMagicalInfo;
  return cur_use_;
}
inline ::ProtoMagicalInfo* ProtoMagicalPolish::release_cur_use() {
  clear_has_cur_use();
  ::ProtoMagicalInfo* temp = cur_use_;
  cur_use_ = NULL;
  return temp;
}

// optional .ProtoMagicalInfo single_record = 3;
inline bool ProtoMagicalPolish::has_single_record() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoMagicalPolish::set_has_single_record() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoMagicalPolish::clear_has_single_record() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoMagicalPolish::clear_single_record() {
  if (single_record_ != NULL) single_record_->::ProtoMagicalInfo::Clear();
  clear_has_single_record();
}
inline const ::ProtoMagicalInfo& ProtoMagicalPolish::single_record() const {
  return single_record_ != NULL ? *single_record_ : *default_instance_->single_record_;
}
inline ::ProtoMagicalInfo* ProtoMagicalPolish::mutable_single_record() {
  set_has_single_record();
  if (single_record_ == NULL) single_record_ = new ::ProtoMagicalInfo;
  return single_record_;
}
inline ::ProtoMagicalInfo* ProtoMagicalPolish::release_single_record() {
  clear_has_single_record();
  ::ProtoMagicalInfo* temp = single_record_;
  single_record_ = NULL;
  return temp;
}

// repeated .ProtoMagicalInfo batch_record = 4;
inline int ProtoMagicalPolish::batch_record_size() const {
  return batch_record_.size();
}
inline void ProtoMagicalPolish::clear_batch_record() {
  batch_record_.Clear();
}
inline const ::ProtoMagicalInfo& ProtoMagicalPolish::batch_record(int index) const {
  return batch_record_.Get(index);
}
inline ::ProtoMagicalInfo* ProtoMagicalPolish::mutable_batch_record(int index) {
  return batch_record_.Mutable(index);
}
inline ::ProtoMagicalInfo* ProtoMagicalPolish::add_batch_record() {
  return batch_record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoMagicalInfo >&
ProtoMagicalPolish::batch_record() const {
  return batch_record_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoMagicalInfo >*
ProtoMagicalPolish::mutable_batch_record() {
  return &batch_record_;
}

// -------------------------------------------------------------------

// ProtoPieceInfo

// optional int32 chapter_key = 1;
inline bool ProtoPieceInfo::has_chapter_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoPieceInfo::set_has_chapter_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoPieceInfo::clear_has_chapter_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoPieceInfo::clear_chapter_key() {
  chapter_key_ = 0;
  clear_has_chapter_key();
}
inline ::google::protobuf::int32 ProtoPieceInfo::chapter_key() const {
  return chapter_key_;
}
inline void ProtoPieceInfo::set_chapter_key(::google::protobuf::int32 value) {
  set_has_chapter_key();
  chapter_key_ = value;
}

// optional int32 used_sec = 2;
inline bool ProtoPieceInfo::has_used_sec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoPieceInfo::set_has_used_sec() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoPieceInfo::clear_has_used_sec() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoPieceInfo::clear_used_sec() {
  used_sec_ = 0;
  clear_has_used_sec();
}
inline ::google::protobuf::int32 ProtoPieceInfo::used_sec() const {
  return used_sec_;
}
inline void ProtoPieceInfo::set_used_sec(::google::protobuf::int32 value) {
  set_has_used_sec();
  used_sec_ = value;
}

// optional int32 used_times = 3;
inline bool ProtoPieceInfo::has_used_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoPieceInfo::set_has_used_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoPieceInfo::clear_has_used_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoPieceInfo::clear_used_times() {
  used_times_ = 0;
  clear_has_used_times();
}
inline ::google::protobuf::int32 ProtoPieceInfo::used_times() const {
  return used_times_;
}
inline void ProtoPieceInfo::set_used_times(::google::protobuf::int32 value) {
  set_has_used_times();
  used_times_ = value;
}

// optional int32 award_flag = 4;
inline bool ProtoPieceInfo::has_award_flag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoPieceInfo::set_has_award_flag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoPieceInfo::clear_has_award_flag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoPieceInfo::clear_award_flag() {
  award_flag_ = 0;
  clear_has_award_flag();
}
inline ::google::protobuf::int32 ProtoPieceInfo::award_flag() const {
  return award_flag_;
}
inline void ProtoPieceInfo::set_award_flag(::google::protobuf::int32 value) {
  set_has_award_flag();
  award_flag_ = value;
}

// repeated int32 chapter_item_id = 5;
inline int ProtoPieceInfo::chapter_item_id_size() const {
  return chapter_item_id_.size();
}
inline void ProtoPieceInfo::clear_chapter_item_id() {
  chapter_item_id_.Clear();
}
inline ::google::protobuf::int32 ProtoPieceInfo::chapter_item_id(int index) const {
  return chapter_item_id_.Get(index);
}
inline void ProtoPieceInfo::set_chapter_item_id(int index, ::google::protobuf::int32 value) {
  chapter_item_id_.Set(index, value);
}
inline void ProtoPieceInfo::add_chapter_item_id(::google::protobuf::int32 value) {
  chapter_item_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProtoPieceInfo::chapter_item_id() const {
  return chapter_item_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProtoPieceInfo::mutable_chapter_item_id() {
  return &chapter_item_id_;
}

// repeated int32 chapter_item_num = 6;
inline int ProtoPieceInfo::chapter_item_num_size() const {
  return chapter_item_num_.size();
}
inline void ProtoPieceInfo::clear_chapter_item_num() {
  chapter_item_num_.Clear();
}
inline ::google::protobuf::int32 ProtoPieceInfo::chapter_item_num(int index) const {
  return chapter_item_num_.Get(index);
}
inline void ProtoPieceInfo::set_chapter_item_num(int index, ::google::protobuf::int32 value) {
  chapter_item_num_.Set(index, value);
}
inline void ProtoPieceInfo::add_chapter_item_num(::google::protobuf::int32 value) {
  chapter_item_num_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProtoPieceInfo::chapter_item_num() const {
  return chapter_item_num_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProtoPieceInfo::mutable_chapter_item_num() {
  return &chapter_item_num_;
}

// optional int32 today_pass_flag = 7;
inline bool ProtoPieceInfo::has_today_pass_flag() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoPieceInfo::set_has_today_pass_flag() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoPieceInfo::clear_has_today_pass_flag() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoPieceInfo::clear_today_pass_flag() {
  today_pass_flag_ = 0;
  clear_has_today_pass_flag();
}
inline ::google::protobuf::int32 ProtoPieceInfo::today_pass_flag() const {
  return today_pass_flag_;
}
inline void ProtoPieceInfo::set_today_pass_flag(::google::protobuf::int32 value) {
  set_has_today_pass_flag();
  today_pass_flag_ = value;
}

// -------------------------------------------------------------------

// ProtoBrocastNewInfo

// optional int32 shout_id = 1;
inline bool ProtoBrocastNewInfo::has_shout_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoBrocastNewInfo::set_has_shout_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoBrocastNewInfo::clear_has_shout_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoBrocastNewInfo::clear_shout_id() {
  shout_id_ = 0;
  clear_has_shout_id();
}
inline ::google::protobuf::int32 ProtoBrocastNewInfo::shout_id() const {
  return shout_id_;
}
inline void ProtoBrocastNewInfo::set_shout_id(::google::protobuf::int32 value) {
  set_has_shout_id();
  shout_id_ = value;
}

// optional int64 group_id = 2;
inline bool ProtoBrocastNewInfo::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoBrocastNewInfo::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoBrocastNewInfo::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoBrocastNewInfo::clear_group_id() {
  group_id_ = GOOGLE_LONGLONG(0);
  clear_has_group_id();
}
inline ::google::protobuf::int64 ProtoBrocastNewInfo::group_id() const {
  return group_id_;
}
inline void ProtoBrocastNewInfo::set_group_id(::google::protobuf::int64 value) {
  set_has_group_id();
  group_id_ = value;
}

// optional int32 channel_type = 3;
inline bool ProtoBrocastNewInfo::has_channel_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoBrocastNewInfo::set_has_channel_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoBrocastNewInfo::clear_has_channel_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoBrocastNewInfo::clear_channel_type() {
  channel_type_ = 0;
  clear_has_channel_type();
}
inline ::google::protobuf::int32 ProtoBrocastNewInfo::channel_type() const {
  return channel_type_;
}
inline void ProtoBrocastNewInfo::set_channel_type(::google::protobuf::int32 value) {
  set_has_channel_type();
  channel_type_ = value;
}

// repeated .ProtoShoutDetail shout_detail_list = 4;
inline int ProtoBrocastNewInfo::shout_detail_list_size() const {
  return shout_detail_list_.size();
}
inline void ProtoBrocastNewInfo::clear_shout_detail_list() {
  shout_detail_list_.Clear();
}
inline const ::ProtoShoutDetail& ProtoBrocastNewInfo::shout_detail_list(int index) const {
  return shout_detail_list_.Get(index);
}
inline ::ProtoShoutDetail* ProtoBrocastNewInfo::mutable_shout_detail_list(int index) {
  return shout_detail_list_.Mutable(index);
}
inline ::ProtoShoutDetail* ProtoBrocastNewInfo::add_shout_detail_list() {
  return shout_detail_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoShoutDetail >&
ProtoBrocastNewInfo::shout_detail_list() const {
  return shout_detail_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoShoutDetail >*
ProtoBrocastNewInfo::mutable_shout_detail_list() {
  return &shout_detail_list_;
}

// optional int32 scene_id = 5;
inline bool ProtoBrocastNewInfo::has_scene_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoBrocastNewInfo::set_has_scene_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoBrocastNewInfo::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoBrocastNewInfo::clear_scene_id() {
  scene_id_ = 0;
  clear_has_scene_id();
}
inline ::google::protobuf::int32 ProtoBrocastNewInfo::scene_id() const {
  return scene_id_;
}
inline void ProtoBrocastNewInfo::set_scene_id(::google::protobuf::int32 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// optional int64 role = 6;
inline bool ProtoBrocastNewInfo::has_role() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoBrocastNewInfo::set_has_role() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoBrocastNewInfo::clear_has_role() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoBrocastNewInfo::clear_role() {
  role_ = GOOGLE_LONGLONG(0);
  clear_has_role();
}
inline ::google::protobuf::int64 ProtoBrocastNewInfo::role() const {
  return role_;
}
inline void ProtoBrocastNewInfo::set_role(::google::protobuf::int64 value) {
  set_has_role();
  role_ = value;
}

// -------------------------------------------------------------------

// ProtoFashionTips

// optional int32 fashion_id = 1;
inline bool ProtoFashionTips::has_fashion_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoFashionTips::set_has_fashion_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoFashionTips::clear_has_fashion_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoFashionTips::clear_fashion_id() {
  fashion_id_ = 0;
  clear_has_fashion_id();
}
inline ::google::protobuf::int32 ProtoFashionTips::fashion_id() const {
  return fashion_id_;
}
inline void ProtoFashionTips::set_fashion_id(::google::protobuf::int32 value) {
  set_has_fashion_id();
  fashion_id_ = value;
}

// optional int32 fashion_force = 2;
inline bool ProtoFashionTips::has_fashion_force() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoFashionTips::set_has_fashion_force() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoFashionTips::clear_has_fashion_force() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoFashionTips::clear_fashion_force() {
  fashion_force_ = 0;
  clear_has_fashion_force();
}
inline ::google::protobuf::int32 ProtoFashionTips::fashion_force() const {
  return fashion_force_;
}
inline void ProtoFashionTips::set_fashion_force(::google::protobuf::int32 value) {
  set_has_fashion_force();
  fashion_force_ = value;
}

// optional int32 left_sec = 3;
inline bool ProtoFashionTips::has_left_sec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoFashionTips::set_has_left_sec() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoFashionTips::clear_has_left_sec() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoFashionTips::clear_left_sec() {
  left_sec_ = 0;
  clear_has_left_sec();
}
inline ::google::protobuf::int32 ProtoFashionTips::left_sec() const {
  return left_sec_;
}
inline void ProtoFashionTips::set_left_sec(::google::protobuf::int32 value) {
  set_has_left_sec();
  left_sec_ = value;
}

// optional int32 martial_id = 4;
inline bool ProtoFashionTips::has_martial_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoFashionTips::set_has_martial_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoFashionTips::clear_has_martial_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoFashionTips::clear_martial_id() {
  martial_id_ = 0;
  clear_has_martial_id();
}
inline ::google::protobuf::int32 ProtoFashionTips::martial_id() const {
  return martial_id_;
}
inline void ProtoFashionTips::set_martial_id(::google::protobuf::int32 value) {
  set_has_martial_id();
  martial_id_ = value;
}

// -------------------------------------------------------------------

// ProtoPlayerTipSyncInfo

// optional int32 event_id = 1;
inline bool ProtoPlayerTipSyncInfo::has_event_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoPlayerTipSyncInfo::set_has_event_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoPlayerTipSyncInfo::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoPlayerTipSyncInfo::clear_event_id() {
  event_id_ = 0;
  clear_has_event_id();
}
inline ::google::protobuf::int32 ProtoPlayerTipSyncInfo::event_id() const {
  return event_id_;
}
inline void ProtoPlayerTipSyncInfo::set_event_id(::google::protobuf::int32 value) {
  set_has_event_id();
  event_id_ = value;
}

// optional int32 arena_reward = 2;
inline bool ProtoPlayerTipSyncInfo::has_arena_reward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoPlayerTipSyncInfo::set_has_arena_reward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoPlayerTipSyncInfo::clear_has_arena_reward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoPlayerTipSyncInfo::clear_arena_reward() {
  arena_reward_ = 0;
  clear_has_arena_reward();
}
inline ::google::protobuf::int32 ProtoPlayerTipSyncInfo::arena_reward() const {
  return arena_reward_;
}
inline void ProtoPlayerTipSyncInfo::set_arena_reward(::google::protobuf::int32 value) {
  set_has_arena_reward();
  arena_reward_ = value;
}

// -------------------------------------------------------------------

// ProtoSyncLabel

// optional int32 label_id = 1;
inline bool ProtoSyncLabel::has_label_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoSyncLabel::set_has_label_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoSyncLabel::clear_has_label_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoSyncLabel::clear_label_id() {
  label_id_ = 0;
  clear_has_label_id();
}
inline ::google::protobuf::int32 ProtoSyncLabel::label_id() const {
  return label_id_;
}
inline void ProtoSyncLabel::set_label_id(::google::protobuf::int32 value) {
  set_has_label_id();
  label_id_ = value;
}

// optional int64 expire_tick = 2;
inline bool ProtoSyncLabel::has_expire_tick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoSyncLabel::set_has_expire_tick() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoSyncLabel::clear_has_expire_tick() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoSyncLabel::clear_expire_tick() {
  expire_tick_ = GOOGLE_LONGLONG(0);
  clear_has_expire_tick();
}
inline ::google::protobuf::int64 ProtoSyncLabel::expire_tick() const {
  return expire_tick_;
}
inline void ProtoSyncLabel::set_expire_tick(::google::protobuf::int64 value) {
  set_has_expire_tick();
  expire_tick_ = value;
}

// -------------------------------------------------------------------

// RecordOnlineUsers

// optional string table_name = 1;
inline bool RecordOnlineUsers::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecordOnlineUsers::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecordOnlineUsers::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecordOnlineUsers::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& RecordOnlineUsers::table_name() const {
  return *table_name_;
}
inline void RecordOnlineUsers::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void RecordOnlineUsers::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void RecordOnlineUsers::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecordOnlineUsers::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  return table_name_;
}
inline ::std::string* RecordOnlineUsers::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 sub_agent = 2;
inline bool RecordOnlineUsers::has_sub_agent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecordOnlineUsers::set_has_sub_agent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecordOnlineUsers::clear_has_sub_agent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecordOnlineUsers::clear_sub_agent() {
  sub_agent_ = 0;
  clear_has_sub_agent();
}
inline ::google::protobuf::int32 RecordOnlineUsers::sub_agent() const {
  return sub_agent_;
}
inline void RecordOnlineUsers::set_sub_agent(::google::protobuf::int32 value) {
  set_has_sub_agent();
  sub_agent_ = value;
}

// optional int32 platform = 3;
inline bool RecordOnlineUsers::has_platform() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecordOnlineUsers::set_has_platform() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecordOnlineUsers::clear_has_platform() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecordOnlineUsers::clear_platform() {
  platform_ = 0;
  clear_has_platform();
}
inline ::google::protobuf::int32 RecordOnlineUsers::platform() const {
  return platform_;
}
inline void RecordOnlineUsers::set_platform(::google::protobuf::int32 value) {
  set_has_platform();
  platform_ = value;
}

// optional int32 market = 4;
inline bool RecordOnlineUsers::has_market() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RecordOnlineUsers::set_has_market() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RecordOnlineUsers::clear_has_market() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RecordOnlineUsers::clear_market() {
  market_ = 0;
  clear_has_market();
}
inline ::google::protobuf::int32 RecordOnlineUsers::market() const {
  return market_;
}
inline void RecordOnlineUsers::set_market(::google::protobuf::int32 value) {
  set_has_market();
  market_ = value;
}

// optional int32 users = 5;
inline bool RecordOnlineUsers::has_users() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RecordOnlineUsers::set_has_users() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RecordOnlineUsers::clear_has_users() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RecordOnlineUsers::clear_users() {
  users_ = 0;
  clear_has_users();
}
inline ::google::protobuf::int32 RecordOnlineUsers::users() const {
  return users_;
}
inline void RecordOnlineUsers::set_users(::google::protobuf::int32 value) {
  set_has_users();
  users_ = value;
}

// optional int32 hooking_users = 6;
inline bool RecordOnlineUsers::has_hooking_users() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RecordOnlineUsers::set_has_hooking_users() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RecordOnlineUsers::clear_has_hooking_users() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RecordOnlineUsers::clear_hooking_users() {
  hooking_users_ = 0;
  clear_has_hooking_users();
}
inline ::google::protobuf::int32 RecordOnlineUsers::hooking_users() const {
  return hooking_users_;
}
inline void RecordOnlineUsers::set_hooking_users(::google::protobuf::int32 value) {
  set_has_hooking_users();
  hooking_users_ = value;
}

// optional int32 time = 7;
inline bool RecordOnlineUsers::has_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RecordOnlineUsers::set_has_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RecordOnlineUsers::clear_has_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RecordOnlineUsers::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 RecordOnlineUsers::time() const {
  return time_;
}
inline void RecordOnlineUsers::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// RecordLoginLogout

// optional string table_name = 1;
inline bool RecordLoginLogout::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecordLoginLogout::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecordLoginLogout::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecordLoginLogout::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& RecordLoginLogout::table_name() const {
  return *table_name_;
}
inline void RecordLoginLogout::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void RecordLoginLogout::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void RecordLoginLogout::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecordLoginLogout::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  return table_name_;
}
inline ::std::string* RecordLoginLogout::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 role_id = 2;
inline bool RecordLoginLogout::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecordLoginLogout::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecordLoginLogout::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecordLoginLogout::clear_role_id() {
  role_id_ = GOOGLE_LONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::int64 RecordLoginLogout::role_id() const {
  return role_id_;
}
inline void RecordLoginLogout::set_role_id(::google::protobuf::int64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string role_name = 3;
inline bool RecordLoginLogout::has_role_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecordLoginLogout::set_has_role_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecordLoginLogout::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecordLoginLogout::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& RecordLoginLogout::role_name() const {
  return *role_name_;
}
inline void RecordLoginLogout::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void RecordLoginLogout::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void RecordLoginLogout::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecordLoginLogout::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* RecordLoginLogout::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 level = 4;
inline bool RecordLoginLogout::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RecordLoginLogout::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RecordLoginLogout::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RecordLoginLogout::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 RecordLoginLogout::level() const {
  return level_;
}
inline void RecordLoginLogout::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional string account = 5;
inline bool RecordLoginLogout::has_account() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RecordLoginLogout::set_has_account() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RecordLoginLogout::clear_has_account() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RecordLoginLogout::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& RecordLoginLogout::account() const {
  return *account_;
}
inline void RecordLoginLogout::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void RecordLoginLogout::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void RecordLoginLogout::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecordLoginLogout::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* RecordLoginLogout::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string client_ip = 6;
inline bool RecordLoginLogout::has_client_ip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RecordLoginLogout::set_has_client_ip() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RecordLoginLogout::clear_has_client_ip() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RecordLoginLogout::clear_client_ip() {
  if (client_ip_ != &::google::protobuf::internal::kEmptyString) {
    client_ip_->clear();
  }
  clear_has_client_ip();
}
inline const ::std::string& RecordLoginLogout::client_ip() const {
  return *client_ip_;
}
inline void RecordLoginLogout::set_client_ip(const ::std::string& value) {
  set_has_client_ip();
  if (client_ip_ == &::google::protobuf::internal::kEmptyString) {
    client_ip_ = new ::std::string;
  }
  client_ip_->assign(value);
}
inline void RecordLoginLogout::set_client_ip(const char* value) {
  set_has_client_ip();
  if (client_ip_ == &::google::protobuf::internal::kEmptyString) {
    client_ip_ = new ::std::string;
  }
  client_ip_->assign(value);
}
inline void RecordLoginLogout::set_client_ip(const char* value, size_t size) {
  set_has_client_ip();
  if (client_ip_ == &::google::protobuf::internal::kEmptyString) {
    client_ip_ = new ::std::string;
  }
  client_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecordLoginLogout::mutable_client_ip() {
  set_has_client_ip();
  if (client_ip_ == &::google::protobuf::internal::kEmptyString) {
    client_ip_ = new ::std::string;
  }
  return client_ip_;
}
inline ::std::string* RecordLoginLogout::release_client_ip() {
  clear_has_client_ip();
  if (client_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = client_ip_;
    client_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 login_time = 7;
inline bool RecordLoginLogout::has_login_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RecordLoginLogout::set_has_login_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RecordLoginLogout::clear_has_login_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RecordLoginLogout::clear_login_time() {
  login_time_ = 0;
  clear_has_login_time();
}
inline ::google::protobuf::int32 RecordLoginLogout::login_time() const {
  return login_time_;
}
inline void RecordLoginLogout::set_login_time(::google::protobuf::int32 value) {
  set_has_login_time();
  login_time_ = value;
}

// optional int32 logout_time = 8;
inline bool RecordLoginLogout::has_logout_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RecordLoginLogout::set_has_logout_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RecordLoginLogout::clear_has_logout_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RecordLoginLogout::clear_logout_time() {
  logout_time_ = 0;
  clear_has_logout_time();
}
inline ::google::protobuf::int32 RecordLoginLogout::logout_time() const {
  return logout_time_;
}
inline void RecordLoginLogout::set_logout_time(::google::protobuf::int32 value) {
  set_has_logout_time();
  logout_time_ = value;
}

// optional int32 online_time = 9;
inline bool RecordLoginLogout::has_online_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RecordLoginLogout::set_has_online_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RecordLoginLogout::clear_has_online_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RecordLoginLogout::clear_online_time() {
  online_time_ = 0;
  clear_has_online_time();
}
inline ::google::protobuf::int32 RecordLoginLogout::online_time() const {
  return online_time_;
}
inline void RecordLoginLogout::set_online_time(::google::protobuf::int32 value) {
  set_has_online_time();
  online_time_ = value;
}

// optional int32 market = 10;
inline bool RecordLoginLogout::has_market() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RecordLoginLogout::set_has_market() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RecordLoginLogout::clear_has_market() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RecordLoginLogout::clear_market() {
  market_ = 0;
  clear_has_market();
}
inline ::google::protobuf::int32 RecordLoginLogout::market() const {
  return market_;
}
inline void RecordLoginLogout::set_market(::google::protobuf::int32 value) {
  set_has_market();
  market_ = value;
}

// optional int32 sub_agent = 11;
inline bool RecordLoginLogout::has_sub_agent() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RecordLoginLogout::set_has_sub_agent() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RecordLoginLogout::clear_has_sub_agent() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RecordLoginLogout::clear_sub_agent() {
  sub_agent_ = 0;
  clear_has_sub_agent();
}
inline ::google::protobuf::int32 RecordLoginLogout::sub_agent() const {
  return sub_agent_;
}
inline void RecordLoginLogout::set_sub_agent(::google::protobuf::int32 value) {
  set_has_sub_agent();
  sub_agent_ = value;
}

// optional int32 platform = 12;
inline bool RecordLoginLogout::has_platform() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RecordLoginLogout::set_has_platform() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RecordLoginLogout::clear_has_platform() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RecordLoginLogout::clear_platform() {
  platform_ = 0;
  clear_has_platform();
}
inline ::google::protobuf::int32 RecordLoginLogout::platform() const {
  return platform_;
}
inline void RecordLoginLogout::set_platform(::google::protobuf::int32 value) {
  set_has_platform();
  platform_ = value;
}

// optional string sys_model = 13;
inline bool RecordLoginLogout::has_sys_model() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RecordLoginLogout::set_has_sys_model() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RecordLoginLogout::clear_has_sys_model() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RecordLoginLogout::clear_sys_model() {
  if (sys_model_ != &::google::protobuf::internal::kEmptyString) {
    sys_model_->clear();
  }
  clear_has_sys_model();
}
inline const ::std::string& RecordLoginLogout::sys_model() const {
  return *sys_model_;
}
inline void RecordLoginLogout::set_sys_model(const ::std::string& value) {
  set_has_sys_model();
  if (sys_model_ == &::google::protobuf::internal::kEmptyString) {
    sys_model_ = new ::std::string;
  }
  sys_model_->assign(value);
}
inline void RecordLoginLogout::set_sys_model(const char* value) {
  set_has_sys_model();
  if (sys_model_ == &::google::protobuf::internal::kEmptyString) {
    sys_model_ = new ::std::string;
  }
  sys_model_->assign(value);
}
inline void RecordLoginLogout::set_sys_model(const char* value, size_t size) {
  set_has_sys_model();
  if (sys_model_ == &::google::protobuf::internal::kEmptyString) {
    sys_model_ = new ::std::string;
  }
  sys_model_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecordLoginLogout::mutable_sys_model() {
  set_has_sys_model();
  if (sys_model_ == &::google::protobuf::internal::kEmptyString) {
    sys_model_ = new ::std::string;
  }
  return sys_model_;
}
inline ::std::string* RecordLoginLogout::release_sys_model() {
  clear_has_sys_model();
  if (sys_model_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sys_model_;
    sys_model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string sys_version = 14;
inline bool RecordLoginLogout::has_sys_version() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RecordLoginLogout::set_has_sys_version() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RecordLoginLogout::clear_has_sys_version() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RecordLoginLogout::clear_sys_version() {
  if (sys_version_ != &::google::protobuf::internal::kEmptyString) {
    sys_version_->clear();
  }
  clear_has_sys_version();
}
inline const ::std::string& RecordLoginLogout::sys_version() const {
  return *sys_version_;
}
inline void RecordLoginLogout::set_sys_version(const ::std::string& value) {
  set_has_sys_version();
  if (sys_version_ == &::google::protobuf::internal::kEmptyString) {
    sys_version_ = new ::std::string;
  }
  sys_version_->assign(value);
}
inline void RecordLoginLogout::set_sys_version(const char* value) {
  set_has_sys_version();
  if (sys_version_ == &::google::protobuf::internal::kEmptyString) {
    sys_version_ = new ::std::string;
  }
  sys_version_->assign(value);
}
inline void RecordLoginLogout::set_sys_version(const char* value, size_t size) {
  set_has_sys_version();
  if (sys_version_ == &::google::protobuf::internal::kEmptyString) {
    sys_version_ = new ::std::string;
  }
  sys_version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecordLoginLogout::mutable_sys_version() {
  set_has_sys_version();
  if (sys_version_ == &::google::protobuf::internal::kEmptyString) {
    sys_version_ = new ::std::string;
  }
  return sys_version_;
}
inline ::std::string* RecordLoginLogout::release_sys_version() {
  clear_has_sys_version();
  if (sys_version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sys_version_;
    sys_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string mac = 15;
inline bool RecordLoginLogout::has_mac() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RecordLoginLogout::set_has_mac() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RecordLoginLogout::clear_has_mac() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RecordLoginLogout::clear_mac() {
  if (mac_ != &::google::protobuf::internal::kEmptyString) {
    mac_->clear();
  }
  clear_has_mac();
}
inline const ::std::string& RecordLoginLogout::mac() const {
  return *mac_;
}
inline void RecordLoginLogout::set_mac(const ::std::string& value) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    mac_ = new ::std::string;
  }
  mac_->assign(value);
}
inline void RecordLoginLogout::set_mac(const char* value) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    mac_ = new ::std::string;
  }
  mac_->assign(value);
}
inline void RecordLoginLogout::set_mac(const char* value, size_t size) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    mac_ = new ::std::string;
  }
  mac_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecordLoginLogout::mutable_mac() {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    mac_ = new ::std::string;
  }
  return mac_;
}
inline ::std::string* RecordLoginLogout::release_mac() {
  clear_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mac_;
    mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// BackRechargeOrder

// optional int32 order_id = 1;
inline bool BackRechargeOrder::has_order_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackRechargeOrder::set_has_order_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BackRechargeOrder::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BackRechargeOrder::clear_order_id() {
  order_id_ = 0;
  clear_has_order_id();
}
inline ::google::protobuf::int32 BackRechargeOrder::order_id() const {
  return order_id_;
}
inline void BackRechargeOrder::set_order_id(::google::protobuf::int32 value) {
  set_has_order_id();
  order_id_ = value;
}

// optional string order_num_str = 2;
inline bool BackRechargeOrder::has_order_num_str() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BackRechargeOrder::set_has_order_num_str() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BackRechargeOrder::clear_has_order_num_str() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BackRechargeOrder::clear_order_num_str() {
  if (order_num_str_ != &::google::protobuf::internal::kEmptyString) {
    order_num_str_->clear();
  }
  clear_has_order_num_str();
}
inline const ::std::string& BackRechargeOrder::order_num_str() const {
  return *order_num_str_;
}
inline void BackRechargeOrder::set_order_num_str(const ::std::string& value) {
  set_has_order_num_str();
  if (order_num_str_ == &::google::protobuf::internal::kEmptyString) {
    order_num_str_ = new ::std::string;
  }
  order_num_str_->assign(value);
}
inline void BackRechargeOrder::set_order_num_str(const char* value) {
  set_has_order_num_str();
  if (order_num_str_ == &::google::protobuf::internal::kEmptyString) {
    order_num_str_ = new ::std::string;
  }
  order_num_str_->assign(value);
}
inline void BackRechargeOrder::set_order_num_str(const char* value, size_t size) {
  set_has_order_num_str();
  if (order_num_str_ == &::google::protobuf::internal::kEmptyString) {
    order_num_str_ = new ::std::string;
  }
  order_num_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BackRechargeOrder::mutable_order_num_str() {
  set_has_order_num_str();
  if (order_num_str_ == &::google::protobuf::internal::kEmptyString) {
    order_num_str_ = new ::std::string;
  }
  return order_num_str_;
}
inline ::std::string* BackRechargeOrder::release_order_num_str() {
  clear_has_order_num_str();
  if (order_num_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = order_num_str_;
    order_num_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 channel_id = 3;
inline bool BackRechargeOrder::has_channel_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BackRechargeOrder::set_has_channel_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BackRechargeOrder::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BackRechargeOrder::clear_channel_id() {
  channel_id_ = 0;
  clear_has_channel_id();
}
inline ::google::protobuf::int32 BackRechargeOrder::channel_id() const {
  return channel_id_;
}
inline void BackRechargeOrder::set_channel_id(::google::protobuf::int32 value) {
  set_has_channel_id();
  channel_id_ = value;
}

// optional int32 money = 4;
inline bool BackRechargeOrder::has_money() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BackRechargeOrder::set_has_money() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BackRechargeOrder::clear_has_money() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BackRechargeOrder::clear_money() {
  money_ = 0;
  clear_has_money();
}
inline ::google::protobuf::int32 BackRechargeOrder::money() const {
  return money_;
}
inline void BackRechargeOrder::set_money(::google::protobuf::int32 value) {
  set_has_money();
  money_ = value;
}

// optional int32 gold = 5;
inline bool BackRechargeOrder::has_gold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BackRechargeOrder::set_has_gold() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BackRechargeOrder::clear_has_gold() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BackRechargeOrder::clear_gold() {
  gold_ = 0;
  clear_has_gold();
}
inline ::google::protobuf::int32 BackRechargeOrder::gold() const {
  return gold_;
}
inline void BackRechargeOrder::set_gold(::google::protobuf::int32 value) {
  set_has_gold();
  gold_ = value;
}

// optional string account = 6;
inline bool BackRechargeOrder::has_account() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BackRechargeOrder::set_has_account() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BackRechargeOrder::clear_has_account() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BackRechargeOrder::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& BackRechargeOrder::account() const {
  return *account_;
}
inline void BackRechargeOrder::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void BackRechargeOrder::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void BackRechargeOrder::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BackRechargeOrder::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* BackRechargeOrder::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 tick = 7;
inline bool BackRechargeOrder::has_tick() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BackRechargeOrder::set_has_tick() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BackRechargeOrder::clear_has_tick() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BackRechargeOrder::clear_tick() {
  tick_ = GOOGLE_LONGLONG(0);
  clear_has_tick();
}
inline ::google::protobuf::int64 BackRechargeOrder::tick() const {
  return tick_;
}
inline void BackRechargeOrder::set_tick(::google::protobuf::int64 value) {
  set_has_tick();
  tick_ = value;
}

// -------------------------------------------------------------------

// ProtoERTimeStage

// optional int64 time_sec = 1;
inline bool ProtoERTimeStage::has_time_sec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoERTimeStage::set_has_time_sec() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoERTimeStage::clear_has_time_sec() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoERTimeStage::clear_time_sec() {
  time_sec_ = GOOGLE_LONGLONG(0);
  clear_has_time_sec();
}
inline ::google::protobuf::int64 ProtoERTimeStage::time_sec() const {
  return time_sec_;
}
inline void ProtoERTimeStage::set_time_sec(::google::protobuf::int64 value) {
  set_has_time_sec();
  time_sec_ = value;
}

// optional int32 stage = 2;
inline bool ProtoERTimeStage::has_stage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoERTimeStage::set_has_stage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoERTimeStage::clear_has_stage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoERTimeStage::clear_stage() {
  stage_ = 0;
  clear_has_stage();
}
inline ::google::protobuf::int32 ProtoERTimeStage::stage() const {
  return stage_;
}
inline void ProtoERTimeStage::set_stage(::google::protobuf::int32 value) {
  set_has_stage();
  stage_ = value;
}

// -------------------------------------------------------------------

// ProtoERScriptStageInfo

// repeated .ProtoERTimeStage TimeStageSet = 1;
inline int ProtoERScriptStageInfo::timestageset_size() const {
  return timestageset_.size();
}
inline void ProtoERScriptStageInfo::clear_timestageset() {
  timestageset_.Clear();
}
inline const ::ProtoERTimeStage& ProtoERScriptStageInfo::timestageset(int index) const {
  return timestageset_.Get(index);
}
inline ::ProtoERTimeStage* ProtoERScriptStageInfo::mutable_timestageset(int index) {
  return timestageset_.Mutable(index);
}
inline ::ProtoERTimeStage* ProtoERScriptStageInfo::add_timestageset() {
  return timestageset_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoERTimeStage >&
ProtoERScriptStageInfo::timestageset() const {
  return timestageset_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoERTimeStage >*
ProtoERScriptStageInfo::mutable_timestageset() {
  return &timestageset_;
}

// optional int32 script_sort = 2;
inline bool ProtoERScriptStageInfo::has_script_sort() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoERScriptStageInfo::set_has_script_sort() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoERScriptStageInfo::clear_has_script_sort() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoERScriptStageInfo::clear_script_sort() {
  script_sort_ = 0;
  clear_has_script_sort();
}
inline ::google::protobuf::int32 ProtoERScriptStageInfo::script_sort() const {
  return script_sort_;
}
inline void ProtoERScriptStageInfo::set_script_sort(::google::protobuf::int32 value) {
  set_has_script_sort();
  script_sort_ = value;
}

// -------------------------------------------------------------------

// ProtoOfflineBeast

// optional int64 beast_id = 1;
inline bool ProtoOfflineBeast::has_beast_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoOfflineBeast::set_has_beast_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoOfflineBeast::clear_has_beast_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoOfflineBeast::clear_beast_id() {
  beast_id_ = GOOGLE_LONGLONG(0);
  clear_has_beast_id();
}
inline ::google::protobuf::int64 ProtoOfflineBeast::beast_id() const {
  return beast_id_;
}
inline void ProtoOfflineBeast::set_beast_id(::google::protobuf::int64 value) {
  set_has_beast_id();
  beast_id_ = value;
}

// optional int32 beast_sort = 2;
inline bool ProtoOfflineBeast::has_beast_sort() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoOfflineBeast::set_has_beast_sort() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoOfflineBeast::clear_has_beast_sort() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoOfflineBeast::clear_beast_sort() {
  beast_sort_ = 0;
  clear_has_beast_sort();
}
inline ::google::protobuf::int32 ProtoOfflineBeast::beast_sort() const {
  return beast_sort_;
}
inline void ProtoOfflineBeast::set_beast_sort(::google::protobuf::int32 value) {
  set_has_beast_sort();
  beast_sort_ = value;
}

// optional string beast_name = 3;
inline bool ProtoOfflineBeast::has_beast_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoOfflineBeast::set_has_beast_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoOfflineBeast::clear_has_beast_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoOfflineBeast::clear_beast_name() {
  if (beast_name_ != &::google::protobuf::internal::kEmptyString) {
    beast_name_->clear();
  }
  clear_has_beast_name();
}
inline const ::std::string& ProtoOfflineBeast::beast_name() const {
  return *beast_name_;
}
inline void ProtoOfflineBeast::set_beast_name(const ::std::string& value) {
  set_has_beast_name();
  if (beast_name_ == &::google::protobuf::internal::kEmptyString) {
    beast_name_ = new ::std::string;
  }
  beast_name_->assign(value);
}
inline void ProtoOfflineBeast::set_beast_name(const char* value) {
  set_has_beast_name();
  if (beast_name_ == &::google::protobuf::internal::kEmptyString) {
    beast_name_ = new ::std::string;
  }
  beast_name_->assign(value);
}
inline void ProtoOfflineBeast::set_beast_name(const char* value, size_t size) {
  set_has_beast_name();
  if (beast_name_ == &::google::protobuf::internal::kEmptyString) {
    beast_name_ = new ::std::string;
  }
  beast_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoOfflineBeast::mutable_beast_name() {
  set_has_beast_name();
  if (beast_name_ == &::google::protobuf::internal::kEmptyString) {
    beast_name_ = new ::std::string;
  }
  return beast_name_;
}
inline ::std::string* ProtoOfflineBeast::release_beast_name() {
  clear_has_beast_name();
  if (beast_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = beast_name_;
    beast_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .ProtoPairObj skill_set = 4;
inline int ProtoOfflineBeast::skill_set_size() const {
  return skill_set_.size();
}
inline void ProtoOfflineBeast::clear_skill_set() {
  skill_set_.Clear();
}
inline const ::ProtoPairObj& ProtoOfflineBeast::skill_set(int index) const {
  return skill_set_.Get(index);
}
inline ::ProtoPairObj* ProtoOfflineBeast::mutable_skill_set(int index) {
  return skill_set_.Mutable(index);
}
inline ::ProtoPairObj* ProtoOfflineBeast::add_skill_set() {
  return skill_set_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >&
ProtoOfflineBeast::skill_set() const {
  return skill_set_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >*
ProtoOfflineBeast::mutable_skill_set() {
  return &skill_set_;
}

// repeated .ProtoPairObj prop_set = 5;
inline int ProtoOfflineBeast::prop_set_size() const {
  return prop_set_.size();
}
inline void ProtoOfflineBeast::clear_prop_set() {
  prop_set_.Clear();
}
inline const ::ProtoPairObj& ProtoOfflineBeast::prop_set(int index) const {
  return prop_set_.Get(index);
}
inline ::ProtoPairObj* ProtoOfflineBeast::mutable_prop_set(int index) {
  return prop_set_.Mutable(index);
}
inline ::ProtoPairObj* ProtoOfflineBeast::add_prop_set() {
  return prop_set_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >&
ProtoOfflineBeast::prop_set() const {
  return prop_set_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >*
ProtoOfflineBeast::mutable_prop_set() {
  return &prop_set_;
}

// -------------------------------------------------------------------

// RecordTask

// optional string table_name = 1;
inline bool RecordTask::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecordTask::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecordTask::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecordTask::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& RecordTask::table_name() const {
  return *table_name_;
}
inline void RecordTask::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void RecordTask::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void RecordTask::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecordTask::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  return table_name_;
}
inline ::std::string* RecordTask::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 role_id = 2;
inline bool RecordTask::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecordTask::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecordTask::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecordTask::clear_role_id() {
  role_id_ = GOOGLE_LONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::int64 RecordTask::role_id() const {
  return role_id_;
}
inline void RecordTask::set_role_id(::google::protobuf::int64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional int32 serial_type = 3;
inline bool RecordTask::has_serial_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecordTask::set_has_serial_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecordTask::clear_has_serial_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecordTask::clear_serial_type() {
  serial_type_ = 0;
  clear_has_serial_type();
}
inline ::google::protobuf::int32 RecordTask::serial_type() const {
  return serial_type_;
}
inline void RecordTask::set_serial_type(::google::protobuf::int32 value) {
  set_has_serial_type();
  serial_type_ = value;
}

// optional int32 platform = 4;
inline bool RecordTask::has_platform() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RecordTask::set_has_platform() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RecordTask::clear_has_platform() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RecordTask::clear_platform() {
  platform_ = 0;
  clear_has_platform();
}
inline ::google::protobuf::int32 RecordTask::platform() const {
  return platform_;
}
inline void RecordTask::set_platform(::google::protobuf::int32 value) {
  set_has_platform();
  platform_ = value;
}

// optional int32 sub_agent = 5;
inline bool RecordTask::has_sub_agent() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RecordTask::set_has_sub_agent() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RecordTask::clear_has_sub_agent() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RecordTask::clear_sub_agent() {
  sub_agent_ = 0;
  clear_has_sub_agent();
}
inline ::google::protobuf::int32 RecordTask::sub_agent() const {
  return sub_agent_;
}
inline void RecordTask::set_sub_agent(::google::protobuf::int32 value) {
  set_has_sub_agent();
  sub_agent_ = value;
}

// optional int32 market = 6;
inline bool RecordTask::has_market() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RecordTask::set_has_market() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RecordTask::clear_has_market() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RecordTask::clear_market() {
  market_ = 0;
  clear_has_market();
}
inline ::google::protobuf::int32 RecordTask::market() const {
  return market_;
}
inline void RecordTask::set_market(::google::protobuf::int32 value) {
  set_has_market();
  market_ = value;
}

// optional int32 task_id = 7;
inline bool RecordTask::has_task_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RecordTask::set_has_task_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RecordTask::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RecordTask::clear_task_id() {
  task_id_ = 0;
  clear_has_task_id();
}
inline ::google::protobuf::int32 RecordTask::task_id() const {
  return task_id_;
}
inline void RecordTask::set_task_id(::google::protobuf::int32 value) {
  set_has_task_id();
  task_id_ = value;
}

// optional int32 level = 8;
inline bool RecordTask::has_level() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RecordTask::set_has_level() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RecordTask::clear_has_level() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RecordTask::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 RecordTask::level() const {
  return level_;
}
inline void RecordTask::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 time = 9;
inline bool RecordTask::has_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RecordTask::set_has_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RecordTask::clear_has_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RecordTask::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 RecordTask::time() const {
  return time_;
}
inline void RecordTask::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// RecordRank

// optional string table_name = 1;
inline bool RecordRank::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecordRank::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecordRank::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecordRank::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& RecordRank::table_name() const {
  return *table_name_;
}
inline void RecordRank::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void RecordRank::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void RecordRank::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecordRank::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  return table_name_;
}
inline ::std::string* RecordRank::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 role_id = 2;
inline bool RecordRank::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecordRank::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecordRank::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecordRank::clear_role_id() {
  role_id_ = GOOGLE_LONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::int64 RecordRank::role_id() const {
  return role_id_;
}
inline void RecordRank::set_role_id(::google::protobuf::int64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string role_name = 3;
inline bool RecordRank::has_role_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecordRank::set_has_role_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecordRank::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecordRank::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& RecordRank::role_name() const {
  return *role_name_;
}
inline void RecordRank::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void RecordRank::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void RecordRank::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecordRank::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* RecordRank::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 rank_type = 4;
inline bool RecordRank::has_rank_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RecordRank::set_has_rank_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RecordRank::clear_has_rank_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RecordRank::clear_rank_type() {
  rank_type_ = 0;
  clear_has_rank_type();
}
inline ::google::protobuf::int32 RecordRank::rank_type() const {
  return rank_type_;
}
inline void RecordRank::set_rank_type(::google::protobuf::int32 value) {
  set_has_rank_type();
  rank_type_ = value;
}

// optional int32 value = 5;
inline bool RecordRank::has_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RecordRank::set_has_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RecordRank::clear_has_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RecordRank::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 RecordRank::value() const {
  return value_;
}
inline void RecordRank::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// optional int32 time = 6;
inline bool RecordRank::has_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RecordRank::set_has_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RecordRank::clear_has_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RecordRank::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 RecordRank::time() const {
  return time_;
}
inline void RecordRank::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// optional int64 ext_int_1 = 7;
inline bool RecordRank::has_ext_int_1() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RecordRank::set_has_ext_int_1() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RecordRank::clear_has_ext_int_1() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RecordRank::clear_ext_int_1() {
  ext_int_1_ = GOOGLE_LONGLONG(0);
  clear_has_ext_int_1();
}
inline ::google::protobuf::int64 RecordRank::ext_int_1() const {
  return ext_int_1_;
}
inline void RecordRank::set_ext_int_1(::google::protobuf::int64 value) {
  set_has_ext_int_1();
  ext_int_1_ = value;
}

// optional int64 ext_int_2 = 8;
inline bool RecordRank::has_ext_int_2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RecordRank::set_has_ext_int_2() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RecordRank::clear_has_ext_int_2() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RecordRank::clear_ext_int_2() {
  ext_int_2_ = GOOGLE_LONGLONG(0);
  clear_has_ext_int_2();
}
inline ::google::protobuf::int64 RecordRank::ext_int_2() const {
  return ext_int_2_;
}
inline void RecordRank::set_ext_int_2(::google::protobuf::int64 value) {
  set_has_ext_int_2();
  ext_int_2_ = value;
}

// optional string ext_str_1 = 9;
inline bool RecordRank::has_ext_str_1() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RecordRank::set_has_ext_str_1() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RecordRank::clear_has_ext_str_1() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RecordRank::clear_ext_str_1() {
  if (ext_str_1_ != &::google::protobuf::internal::kEmptyString) {
    ext_str_1_->clear();
  }
  clear_has_ext_str_1();
}
inline const ::std::string& RecordRank::ext_str_1() const {
  return *ext_str_1_;
}
inline void RecordRank::set_ext_str_1(const ::std::string& value) {
  set_has_ext_str_1();
  if (ext_str_1_ == &::google::protobuf::internal::kEmptyString) {
    ext_str_1_ = new ::std::string;
  }
  ext_str_1_->assign(value);
}
inline void RecordRank::set_ext_str_1(const char* value) {
  set_has_ext_str_1();
  if (ext_str_1_ == &::google::protobuf::internal::kEmptyString) {
    ext_str_1_ = new ::std::string;
  }
  ext_str_1_->assign(value);
}
inline void RecordRank::set_ext_str_1(const char* value, size_t size) {
  set_has_ext_str_1();
  if (ext_str_1_ == &::google::protobuf::internal::kEmptyString) {
    ext_str_1_ = new ::std::string;
  }
  ext_str_1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecordRank::mutable_ext_str_1() {
  set_has_ext_str_1();
  if (ext_str_1_ == &::google::protobuf::internal::kEmptyString) {
    ext_str_1_ = new ::std::string;
  }
  return ext_str_1_;
}
inline ::std::string* RecordRank::release_ext_str_1() {
  clear_has_ext_str_1();
  if (ext_str_1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ext_str_1_;
    ext_str_1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 vip = 10;
inline bool RecordRank::has_vip() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RecordRank::set_has_vip() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RecordRank::clear_has_vip() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RecordRank::clear_vip() {
  vip_ = 0;
  clear_has_vip();
}
inline ::google::protobuf::int32 RecordRank::vip() const {
  return vip_;
}
inline void RecordRank::set_vip(::google::protobuf::int32 value) {
  set_has_vip();
  vip_ = value;
}

// -------------------------------------------------------------------

// RecordMail

// optional string table_name = 1;
inline bool RecordMail::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecordMail::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecordMail::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecordMail::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& RecordMail::table_name() const {
  return *table_name_;
}
inline void RecordMail::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void RecordMail::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void RecordMail::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecordMail::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  return table_name_;
}
inline ::std::string* RecordMail::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 mail_index = 2;
inline bool RecordMail::has_mail_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecordMail::set_has_mail_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecordMail::clear_has_mail_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecordMail::clear_mail_index() {
  mail_index_ = GOOGLE_LONGLONG(0);
  clear_has_mail_index();
}
inline ::google::protobuf::int64 RecordMail::mail_index() const {
  return mail_index_;
}
inline void RecordMail::set_mail_index(::google::protobuf::int64 value) {
  set_has_mail_index();
  mail_index_ = value;
}

// optional int64 sender_id = 3;
inline bool RecordMail::has_sender_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecordMail::set_has_sender_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecordMail::clear_has_sender_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecordMail::clear_sender_id() {
  sender_id_ = GOOGLE_LONGLONG(0);
  clear_has_sender_id();
}
inline ::google::protobuf::int64 RecordMail::sender_id() const {
  return sender_id_;
}
inline void RecordMail::set_sender_id(::google::protobuf::int64 value) {
  set_has_sender_id();
  sender_id_ = value;
}

// optional int64 receiver_id = 4;
inline bool RecordMail::has_receiver_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RecordMail::set_has_receiver_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RecordMail::clear_has_receiver_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RecordMail::clear_receiver_id() {
  receiver_id_ = GOOGLE_LONGLONG(0);
  clear_has_receiver_id();
}
inline ::google::protobuf::int64 RecordMail::receiver_id() const {
  return receiver_id_;
}
inline void RecordMail::set_receiver_id(::google::protobuf::int64 value) {
  set_has_receiver_id();
  receiver_id_ = value;
}

// optional int64 send_tick = 5;
inline bool RecordMail::has_send_tick() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RecordMail::set_has_send_tick() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RecordMail::clear_has_send_tick() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RecordMail::clear_send_tick() {
  send_tick_ = GOOGLE_LONGLONG(0);
  clear_has_send_tick();
}
inline ::google::protobuf::int64 RecordMail::send_tick() const {
  return send_tick_;
}
inline void RecordMail::set_send_tick(::google::protobuf::int64 value) {
  set_has_send_tick();
  send_tick_ = value;
}

// optional int64 read_tick = 6;
inline bool RecordMail::has_read_tick() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RecordMail::set_has_read_tick() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RecordMail::clear_has_read_tick() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RecordMail::clear_read_tick() {
  read_tick_ = GOOGLE_LONGLONG(0);
  clear_has_read_tick();
}
inline ::google::protobuf::int64 RecordMail::read_tick() const {
  return read_tick_;
}
inline void RecordMail::set_read_tick(::google::protobuf::int64 value) {
  set_has_read_tick();
  read_tick_ = value;
}

// optional int32 mail_type = 7;
inline bool RecordMail::has_mail_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RecordMail::set_has_mail_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RecordMail::clear_has_mail_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RecordMail::clear_mail_type() {
  mail_type_ = 0;
  clear_has_mail_type();
}
inline ::google::protobuf::int32 RecordMail::mail_type() const {
  return mail_type_;
}
inline void RecordMail::set_mail_type(::google::protobuf::int32 value) {
  set_has_mail_type();
  mail_type_ = value;
}

// optional int32 has_read = 8;
inline bool RecordMail::has_has_read() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RecordMail::set_has_has_read() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RecordMail::clear_has_has_read() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RecordMail::clear_has_read() {
  has_read_ = 0;
  clear_has_has_read();
}
inline ::google::protobuf::int32 RecordMail::has_read() const {
  return has_read_;
}
inline void RecordMail::set_has_read(::google::protobuf::int32 value) {
  set_has_has_read();
  has_read_ = value;
}

// optional string receiver_name = 9;
inline bool RecordMail::has_receiver_name() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RecordMail::set_has_receiver_name() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RecordMail::clear_has_receiver_name() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RecordMail::clear_receiver_name() {
  if (receiver_name_ != &::google::protobuf::internal::kEmptyString) {
    receiver_name_->clear();
  }
  clear_has_receiver_name();
}
inline const ::std::string& RecordMail::receiver_name() const {
  return *receiver_name_;
}
inline void RecordMail::set_receiver_name(const ::std::string& value) {
  set_has_receiver_name();
  if (receiver_name_ == &::google::protobuf::internal::kEmptyString) {
    receiver_name_ = new ::std::string;
  }
  receiver_name_->assign(value);
}
inline void RecordMail::set_receiver_name(const char* value) {
  set_has_receiver_name();
  if (receiver_name_ == &::google::protobuf::internal::kEmptyString) {
    receiver_name_ = new ::std::string;
  }
  receiver_name_->assign(value);
}
inline void RecordMail::set_receiver_name(const char* value, size_t size) {
  set_has_receiver_name();
  if (receiver_name_ == &::google::protobuf::internal::kEmptyString) {
    receiver_name_ = new ::std::string;
  }
  receiver_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecordMail::mutable_receiver_name() {
  set_has_receiver_name();
  if (receiver_name_ == &::google::protobuf::internal::kEmptyString) {
    receiver_name_ = new ::std::string;
  }
  return receiver_name_;
}
inline ::std::string* RecordMail::release_receiver_name() {
  clear_has_receiver_name();
  if (receiver_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = receiver_name_;
    receiver_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string sender_name = 10;
inline bool RecordMail::has_sender_name() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RecordMail::set_has_sender_name() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RecordMail::clear_has_sender_name() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RecordMail::clear_sender_name() {
  if (sender_name_ != &::google::protobuf::internal::kEmptyString) {
    sender_name_->clear();
  }
  clear_has_sender_name();
}
inline const ::std::string& RecordMail::sender_name() const {
  return *sender_name_;
}
inline void RecordMail::set_sender_name(const ::std::string& value) {
  set_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::kEmptyString) {
    sender_name_ = new ::std::string;
  }
  sender_name_->assign(value);
}
inline void RecordMail::set_sender_name(const char* value) {
  set_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::kEmptyString) {
    sender_name_ = new ::std::string;
  }
  sender_name_->assign(value);
}
inline void RecordMail::set_sender_name(const char* value, size_t size) {
  set_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::kEmptyString) {
    sender_name_ = new ::std::string;
  }
  sender_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecordMail::mutable_sender_name() {
  set_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::kEmptyString) {
    sender_name_ = new ::std::string;
  }
  return sender_name_;
}
inline ::std::string* RecordMail::release_sender_name() {
  clear_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sender_name_;
    sender_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string title = 11;
inline bool RecordMail::has_title() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RecordMail::set_has_title() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RecordMail::clear_has_title() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RecordMail::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& RecordMail::title() const {
  return *title_;
}
inline void RecordMail::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void RecordMail::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void RecordMail::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecordMail::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* RecordMail::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string content = 12;
inline bool RecordMail::has_content() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RecordMail::set_has_content() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RecordMail::clear_has_content() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RecordMail::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& RecordMail::content() const {
  return *content_;
}
inline void RecordMail::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void RecordMail::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void RecordMail::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecordMail::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* RecordMail::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 serial_type = 13;
inline bool RecordMail::has_serial_type() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RecordMail::set_has_serial_type() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RecordMail::clear_has_serial_type() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RecordMail::clear_serial_type() {
  serial_type_ = 0;
  clear_has_serial_type();
}
inline ::google::protobuf::int32 RecordMail::serial_type() const {
  return serial_type_;
}
inline void RecordMail::set_serial_type(::google::protobuf::int32 value) {
  set_has_serial_type();
  serial_type_ = value;
}

// optional int32 platform = 14;
inline bool RecordMail::has_platform() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RecordMail::set_has_platform() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RecordMail::clear_has_platform() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RecordMail::clear_platform() {
  platform_ = 0;
  clear_has_platform();
}
inline ::google::protobuf::int32 RecordMail::platform() const {
  return platform_;
}
inline void RecordMail::set_platform(::google::protobuf::int32 value) {
  set_has_platform();
  platform_ = value;
}

// optional int32 sub_agent = 15;
inline bool RecordMail::has_sub_agent() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RecordMail::set_has_sub_agent() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RecordMail::clear_has_sub_agent() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RecordMail::clear_sub_agent() {
  sub_agent_ = 0;
  clear_has_sub_agent();
}
inline ::google::protobuf::int32 RecordMail::sub_agent() const {
  return sub_agent_;
}
inline void RecordMail::set_sub_agent(::google::protobuf::int32 value) {
  set_has_sub_agent();
  sub_agent_ = value;
}

// optional int32 attach_gold = 16;
inline bool RecordMail::has_attach_gold() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RecordMail::set_has_attach_gold() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RecordMail::clear_has_attach_gold() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RecordMail::clear_attach_gold() {
  attach_gold_ = 0;
  clear_has_attach_gold();
}
inline ::google::protobuf::int32 RecordMail::attach_gold() const {
  return attach_gold_;
}
inline void RecordMail::set_attach_gold(::google::protobuf::int32 value) {
  set_has_attach_gold();
  attach_gold_ = value;
}

// optional int32 attach_copper = 17;
inline bool RecordMail::has_attach_copper() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RecordMail::set_has_attach_copper() {
  _has_bits_[0] |= 0x00010000u;
}
inline void RecordMail::clear_has_attach_copper() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void RecordMail::clear_attach_copper() {
  attach_copper_ = 0;
  clear_has_attach_copper();
}
inline ::google::protobuf::int32 RecordMail::attach_copper() const {
  return attach_copper_;
}
inline void RecordMail::set_attach_copper(::google::protobuf::int32 value) {
  set_has_attach_copper();
  attach_copper_ = value;
}

// optional int32 attach_id_1 = 18;
inline bool RecordMail::has_attach_id_1() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void RecordMail::set_has_attach_id_1() {
  _has_bits_[0] |= 0x00020000u;
}
inline void RecordMail::clear_has_attach_id_1() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void RecordMail::clear_attach_id_1() {
  attach_id_1_ = 0;
  clear_has_attach_id_1();
}
inline ::google::protobuf::int32 RecordMail::attach_id_1() const {
  return attach_id_1_;
}
inline void RecordMail::set_attach_id_1(::google::protobuf::int32 value) {
  set_has_attach_id_1();
  attach_id_1_ = value;
}

// optional int32 attach_amount_1 = 19;
inline bool RecordMail::has_attach_amount_1() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void RecordMail::set_has_attach_amount_1() {
  _has_bits_[0] |= 0x00040000u;
}
inline void RecordMail::clear_has_attach_amount_1() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void RecordMail::clear_attach_amount_1() {
  attach_amount_1_ = 0;
  clear_has_attach_amount_1();
}
inline ::google::protobuf::int32 RecordMail::attach_amount_1() const {
  return attach_amount_1_;
}
inline void RecordMail::set_attach_amount_1(::google::protobuf::int32 value) {
  set_has_attach_amount_1();
  attach_amount_1_ = value;
}

// optional int32 attach_id_2 = 20;
inline bool RecordMail::has_attach_id_2() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void RecordMail::set_has_attach_id_2() {
  _has_bits_[0] |= 0x00080000u;
}
inline void RecordMail::clear_has_attach_id_2() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void RecordMail::clear_attach_id_2() {
  attach_id_2_ = 0;
  clear_has_attach_id_2();
}
inline ::google::protobuf::int32 RecordMail::attach_id_2() const {
  return attach_id_2_;
}
inline void RecordMail::set_attach_id_2(::google::protobuf::int32 value) {
  set_has_attach_id_2();
  attach_id_2_ = value;
}

// optional int32 attach_amount_2 = 21;
inline bool RecordMail::has_attach_amount_2() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void RecordMail::set_has_attach_amount_2() {
  _has_bits_[0] |= 0x00100000u;
}
inline void RecordMail::clear_has_attach_amount_2() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void RecordMail::clear_attach_amount_2() {
  attach_amount_2_ = 0;
  clear_has_attach_amount_2();
}
inline ::google::protobuf::int32 RecordMail::attach_amount_2() const {
  return attach_amount_2_;
}
inline void RecordMail::set_attach_amount_2(::google::protobuf::int32 value) {
  set_has_attach_amount_2();
  attach_amount_2_ = value;
}

// optional int32 attach_id_3 = 22;
inline bool RecordMail::has_attach_id_3() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void RecordMail::set_has_attach_id_3() {
  _has_bits_[0] |= 0x00200000u;
}
inline void RecordMail::clear_has_attach_id_3() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void RecordMail::clear_attach_id_3() {
  attach_id_3_ = 0;
  clear_has_attach_id_3();
}
inline ::google::protobuf::int32 RecordMail::attach_id_3() const {
  return attach_id_3_;
}
inline void RecordMail::set_attach_id_3(::google::protobuf::int32 value) {
  set_has_attach_id_3();
  attach_id_3_ = value;
}

// optional int32 attach_amount_3 = 23;
inline bool RecordMail::has_attach_amount_3() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void RecordMail::set_has_attach_amount_3() {
  _has_bits_[0] |= 0x00400000u;
}
inline void RecordMail::clear_has_attach_amount_3() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void RecordMail::clear_attach_amount_3() {
  attach_amount_3_ = 0;
  clear_has_attach_amount_3();
}
inline ::google::protobuf::int32 RecordMail::attach_amount_3() const {
  return attach_amount_3_;
}
inline void RecordMail::set_attach_amount_3(::google::protobuf::int32 value) {
  set_has_attach_amount_3();
  attach_amount_3_ = value;
}

// optional int32 attach_id_4 = 24;
inline bool RecordMail::has_attach_id_4() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void RecordMail::set_has_attach_id_4() {
  _has_bits_[0] |= 0x00800000u;
}
inline void RecordMail::clear_has_attach_id_4() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void RecordMail::clear_attach_id_4() {
  attach_id_4_ = 0;
  clear_has_attach_id_4();
}
inline ::google::protobuf::int32 RecordMail::attach_id_4() const {
  return attach_id_4_;
}
inline void RecordMail::set_attach_id_4(::google::protobuf::int32 value) {
  set_has_attach_id_4();
  attach_id_4_ = value;
}

// optional int32 attach_amount_4 = 25;
inline bool RecordMail::has_attach_amount_4() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void RecordMail::set_has_attach_amount_4() {
  _has_bits_[0] |= 0x01000000u;
}
inline void RecordMail::clear_has_attach_amount_4() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void RecordMail::clear_attach_amount_4() {
  attach_amount_4_ = 0;
  clear_has_attach_amount_4();
}
inline ::google::protobuf::int32 RecordMail::attach_amount_4() const {
  return attach_amount_4_;
}
inline void RecordMail::set_attach_amount_4(::google::protobuf::int32 value) {
  set_has_attach_amount_4();
  attach_amount_4_ = value;
}

// optional int32 attach_bind_gold = 26;
inline bool RecordMail::has_attach_bind_gold() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void RecordMail::set_has_attach_bind_gold() {
  _has_bits_[0] |= 0x02000000u;
}
inline void RecordMail::clear_has_attach_bind_gold() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void RecordMail::clear_attach_bind_gold() {
  attach_bind_gold_ = 0;
  clear_has_attach_bind_gold();
}
inline ::google::protobuf::int32 RecordMail::attach_bind_gold() const {
  return attach_bind_gold_;
}
inline void RecordMail::set_attach_bind_gold(::google::protobuf::int32 value) {
  set_has_attach_bind_gold();
  attach_bind_gold_ = value;
}

// optional int32 attach_bind_copper = 27;
inline bool RecordMail::has_attach_bind_copper() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void RecordMail::set_has_attach_bind_copper() {
  _has_bits_[0] |= 0x04000000u;
}
inline void RecordMail::clear_has_attach_bind_copper() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void RecordMail::clear_attach_bind_copper() {
  attach_bind_copper_ = 0;
  clear_has_attach_bind_copper();
}
inline ::google::protobuf::int32 RecordMail::attach_bind_copper() const {
  return attach_bind_copper_;
}
inline void RecordMail::set_attach_bind_copper(::google::protobuf::int32 value) {
  set_has_attach_bind_copper();
  attach_bind_copper_ = value;
}

// optional int32 mail_format = 28;
inline bool RecordMail::has_mail_format() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void RecordMail::set_has_mail_format() {
  _has_bits_[0] |= 0x08000000u;
}
inline void RecordMail::clear_has_mail_format() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void RecordMail::clear_mail_format() {
  mail_format_ = 0;
  clear_has_mail_format();
}
inline ::google::protobuf::int32 RecordMail::mail_format() const {
  return mail_format_;
}
inline void RecordMail::set_mail_format(::google::protobuf::int32 value) {
  set_has_mail_format();
  mail_format_ = value;
}

// -------------------------------------------------------------------

// ProtoOnSaleItem

// optional int32 item_id = 1;
inline bool ProtoOnSaleItem::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoOnSaleItem::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoOnSaleItem::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoOnSaleItem::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
}
inline ::google::protobuf::int32 ProtoOnSaleItem::item_id() const {
  return item_id_;
}
inline void ProtoOnSaleItem::set_item_id(::google::protobuf::int32 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional int32 item_bind = 2;
inline bool ProtoOnSaleItem::has_item_bind() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoOnSaleItem::set_has_item_bind() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoOnSaleItem::clear_has_item_bind() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoOnSaleItem::clear_item_bind() {
  item_bind_ = 0;
  clear_has_item_bind();
}
inline ::google::protobuf::int32 ProtoOnSaleItem::item_bind() const {
  return item_bind_;
}
inline void ProtoOnSaleItem::set_item_bind(::google::protobuf::int32 value) {
  set_has_item_bind();
  item_bind_ = value;
}

// repeated int32 item_type = 3;
inline int ProtoOnSaleItem::item_type_size() const {
  return item_type_.size();
}
inline void ProtoOnSaleItem::clear_item_type() {
  item_type_.Clear();
}
inline ::google::protobuf::int32 ProtoOnSaleItem::item_type(int index) const {
  return item_type_.Get(index);
}
inline void ProtoOnSaleItem::set_item_type(int index, ::google::protobuf::int32 value) {
  item_type_.Set(index, value);
}
inline void ProtoOnSaleItem::add_item_type(::google::protobuf::int32 value) {
  item_type_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProtoOnSaleItem::item_type() const {
  return item_type_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProtoOnSaleItem::mutable_item_type() {
  return &item_type_;
}

// optional int32 shop_type = 4;
inline bool ProtoOnSaleItem::has_shop_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoOnSaleItem::set_has_shop_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoOnSaleItem::clear_has_shop_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoOnSaleItem::clear_shop_type() {
  shop_type_ = 0;
  clear_has_shop_type();
}
inline ::google::protobuf::int32 ProtoOnSaleItem::shop_type() const {
  return shop_type_;
}
inline void ProtoOnSaleItem::set_shop_type(::google::protobuf::int32 value) {
  set_has_shop_type();
  shop_type_ = value;
}

// optional int32 money_type = 5;
inline bool ProtoOnSaleItem::has_money_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoOnSaleItem::set_has_money_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoOnSaleItem::clear_has_money_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoOnSaleItem::clear_money_type() {
  money_type_ = 0;
  clear_has_money_type();
}
inline ::google::protobuf::int32 ProtoOnSaleItem::money_type() const {
  return money_type_;
}
inline void ProtoOnSaleItem::set_money_type(::google::protobuf::int32 value) {
  set_has_money_type();
  money_type_ = value;
}

// optional int32 src_price = 6;
inline bool ProtoOnSaleItem::has_src_price() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoOnSaleItem::set_has_src_price() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoOnSaleItem::clear_has_src_price() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoOnSaleItem::clear_src_price() {
  src_price_ = 0;
  clear_has_src_price();
}
inline ::google::protobuf::int32 ProtoOnSaleItem::src_price() const {
  return src_price_;
}
inline void ProtoOnSaleItem::set_src_price(::google::protobuf::int32 value) {
  set_has_src_price();
  src_price_ = value;
}

// optional int32 cur_price = 7;
inline bool ProtoOnSaleItem::has_cur_price() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoOnSaleItem::set_has_cur_price() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoOnSaleItem::clear_has_cur_price() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoOnSaleItem::clear_cur_price() {
  cur_price_ = 0;
  clear_has_cur_price();
}
inline ::google::protobuf::int32 ProtoOnSaleItem::cur_price() const {
  return cur_price_;
}
inline void ProtoOnSaleItem::set_cur_price(::google::protobuf::int32 value) {
  set_has_cur_price();
  cur_price_ = value;
}

// optional int32 start_tick = 8;
inline bool ProtoOnSaleItem::has_start_tick() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoOnSaleItem::set_has_start_tick() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoOnSaleItem::clear_has_start_tick() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoOnSaleItem::clear_start_tick() {
  start_tick_ = 0;
  clear_has_start_tick();
}
inline ::google::protobuf::int32 ProtoOnSaleItem::start_tick() const {
  return start_tick_;
}
inline void ProtoOnSaleItem::set_start_tick(::google::protobuf::int32 value) {
  set_has_start_tick();
  start_tick_ = value;
}

// optional int32 end_tick = 9;
inline bool ProtoOnSaleItem::has_end_tick() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProtoOnSaleItem::set_has_end_tick() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProtoOnSaleItem::clear_has_end_tick() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProtoOnSaleItem::clear_end_tick() {
  end_tick_ = 0;
  clear_has_end_tick();
}
inline ::google::protobuf::int32 ProtoOnSaleItem::end_tick() const {
  return end_tick_;
}
inline void ProtoOnSaleItem::set_end_tick(::google::protobuf::int32 value) {
  set_has_end_tick();
  end_tick_ = value;
}

// optional .ProtoPairObj need_item = 10;
inline bool ProtoOnSaleItem::has_need_item() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProtoOnSaleItem::set_has_need_item() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ProtoOnSaleItem::clear_has_need_item() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ProtoOnSaleItem::clear_need_item() {
  if (need_item_ != NULL) need_item_->::ProtoPairObj::Clear();
  clear_has_need_item();
}
inline const ::ProtoPairObj& ProtoOnSaleItem::need_item() const {
  return need_item_ != NULL ? *need_item_ : *default_instance_->need_item_;
}
inline ::ProtoPairObj* ProtoOnSaleItem::mutable_need_item() {
  set_has_need_item();
  if (need_item_ == NULL) need_item_ = new ::ProtoPairObj;
  return need_item_;
}
inline ::ProtoPairObj* ProtoOnSaleItem::release_need_item() {
  clear_has_need_item();
  ::ProtoPairObj* temp = need_item_;
  need_item_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// RecordChat

// optional string table_name = 1;
inline bool RecordChat::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecordChat::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecordChat::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecordChat::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& RecordChat::table_name() const {
  return *table_name_;
}
inline void RecordChat::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void RecordChat::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void RecordChat::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecordChat::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  return table_name_;
}
inline ::std::string* RecordChat::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 role_id = 2;
inline bool RecordChat::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecordChat::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecordChat::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecordChat::clear_role_id() {
  role_id_ = GOOGLE_LONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::int64 RecordChat::role_id() const {
  return role_id_;
}
inline void RecordChat::set_role_id(::google::protobuf::int64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional int32 serial_type = 3;
inline bool RecordChat::has_serial_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecordChat::set_has_serial_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecordChat::clear_has_serial_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecordChat::clear_serial_type() {
  serial_type_ = 0;
  clear_has_serial_type();
}
inline ::google::protobuf::int32 RecordChat::serial_type() const {
  return serial_type_;
}
inline void RecordChat::set_serial_type(::google::protobuf::int32 value) {
  set_has_serial_type();
  serial_type_ = value;
}

// optional int32 time = 4;
inline bool RecordChat::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RecordChat::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RecordChat::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RecordChat::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 RecordChat::time() const {
  return time_;
}
inline void RecordChat::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// optional string content = 5;
inline bool RecordChat::has_content() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RecordChat::set_has_content() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RecordChat::clear_has_content() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RecordChat::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& RecordChat::content() const {
  return *content_;
}
inline void RecordChat::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void RecordChat::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void RecordChat::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecordChat::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* RecordChat::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 sub_agent = 6;
inline bool RecordChat::has_sub_agent() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RecordChat::set_has_sub_agent() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RecordChat::clear_has_sub_agent() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RecordChat::clear_sub_agent() {
  sub_agent_ = 0;
  clear_has_sub_agent();
}
inline ::google::protobuf::int32 RecordChat::sub_agent() const {
  return sub_agent_;
}
inline void RecordChat::set_sub_agent(::google::protobuf::int32 value) {
  set_has_sub_agent();
  sub_agent_ = value;
}

// optional string server_flag = 7;
inline bool RecordChat::has_server_flag() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RecordChat::set_has_server_flag() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RecordChat::clear_has_server_flag() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RecordChat::clear_server_flag() {
  if (server_flag_ != &::google::protobuf::internal::kEmptyString) {
    server_flag_->clear();
  }
  clear_has_server_flag();
}
inline const ::std::string& RecordChat::server_flag() const {
  return *server_flag_;
}
inline void RecordChat::set_server_flag(const ::std::string& value) {
  set_has_server_flag();
  if (server_flag_ == &::google::protobuf::internal::kEmptyString) {
    server_flag_ = new ::std::string;
  }
  server_flag_->assign(value);
}
inline void RecordChat::set_server_flag(const char* value) {
  set_has_server_flag();
  if (server_flag_ == &::google::protobuf::internal::kEmptyString) {
    server_flag_ = new ::std::string;
  }
  server_flag_->assign(value);
}
inline void RecordChat::set_server_flag(const char* value, size_t size) {
  set_has_server_flag();
  if (server_flag_ == &::google::protobuf::internal::kEmptyString) {
    server_flag_ = new ::std::string;
  }
  server_flag_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecordChat::mutable_server_flag() {
  set_has_server_flag();
  if (server_flag_ == &::google::protobuf::internal::kEmptyString) {
    server_flag_ = new ::std::string;
  }
  return server_flag_;
}
inline ::std::string* RecordChat::release_server_flag() {
  clear_has_server_flag();
  if (server_flag_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_flag_;
    server_flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 market = 8;
inline bool RecordChat::has_market() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RecordChat::set_has_market() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RecordChat::clear_has_market() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RecordChat::clear_market() {
  market_ = 0;
  clear_has_market();
}
inline ::google::protobuf::int32 RecordChat::market() const {
  return market_;
}
inline void RecordChat::set_market(::google::protobuf::int32 value) {
  set_has_market();
  market_ = value;
}

// -------------------------------------------------------------------

// ProtoLottery

// optional int32 gold_times = 1;
inline bool ProtoLottery::has_gold_times() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoLottery::set_has_gold_times() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoLottery::clear_has_gold_times() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoLottery::clear_gold_times() {
  gold_times_ = 0;
  clear_has_gold_times();
}
inline ::google::protobuf::int32 ProtoLottery::gold_times() const {
  return gold_times_;
}
inline void ProtoLottery::set_gold_times(::google::protobuf::int32 value) {
  set_has_gold_times();
  gold_times_ = value;
}

// optional int32 gold_free_times = 2;
inline bool ProtoLottery::has_gold_free_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoLottery::set_has_gold_free_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoLottery::clear_has_gold_free_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoLottery::clear_gold_free_times() {
  gold_free_times_ = 0;
  clear_has_gold_free_times();
}
inline ::google::protobuf::int32 ProtoLottery::gold_free_times() const {
  return gold_free_times_;
}
inline void ProtoLottery::set_gold_free_times(::google::protobuf::int32 value) {
  set_has_gold_free_times();
  gold_free_times_ = value;
}

// optional int32 free_times = 3;
inline bool ProtoLottery::has_free_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoLottery::set_has_free_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoLottery::clear_has_free_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoLottery::clear_free_times() {
  free_times_ = 0;
  clear_has_free_times();
}
inline ::google::protobuf::int32 ProtoLottery::free_times() const {
  return free_times_;
}
inline void ProtoLottery::set_free_times(::google::protobuf::int32 value) {
  set_has_free_times();
  free_times_ = value;
}

// optional int32 total_score = 4;
inline bool ProtoLottery::has_total_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoLottery::set_has_total_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoLottery::clear_has_total_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoLottery::clear_total_score() {
  total_score_ = 0;
  clear_has_total_score();
}
inline ::google::protobuf::int32 ProtoLottery::total_score() const {
  return total_score_;
}
inline void ProtoLottery::set_total_score(::google::protobuf::int32 value) {
  set_has_total_score();
  total_score_ = value;
}

// optional int32 total_gold = 5;
inline bool ProtoLottery::has_total_gold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoLottery::set_has_total_gold() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoLottery::clear_has_total_gold() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoLottery::clear_total_gold() {
  total_gold_ = 0;
  clear_has_total_gold();
}
inline ::google::protobuf::int32 ProtoLottery::total_gold() const {
  return total_gold_;
}
inline void ProtoLottery::set_total_gold(::google::protobuf::int32 value) {
  set_has_total_gold();
  total_gold_ = value;
}

// optional int32 left_free_sec = 6;
inline bool ProtoLottery::has_left_free_sec() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoLottery::set_has_left_free_sec() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoLottery::clear_has_left_free_sec() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoLottery::clear_left_free_sec() {
  left_free_sec_ = 0;
  clear_has_left_free_sec();
}
inline ::google::protobuf::int32 ProtoLottery::left_free_sec() const {
  return left_free_sec_;
}
inline void ProtoLottery::set_left_free_sec(::google::protobuf::int32 value) {
  set_has_left_free_sec();
  left_free_sec_ = value;
}

// optional int32 next_free_tick = 7;
inline bool ProtoLottery::has_next_free_tick() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoLottery::set_has_next_free_tick() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoLottery::clear_has_next_free_tick() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoLottery::clear_next_free_tick() {
  next_free_tick_ = 0;
  clear_has_next_free_tick();
}
inline ::google::protobuf::int32 ProtoLottery::next_free_tick() const {
  return next_free_tick_;
}
inline void ProtoLottery::set_next_free_tick(::google::protobuf::int32 value) {
  set_has_next_free_tick();
  next_free_tick_ = value;
}

// optional int32 protect_gold = 8;
inline bool ProtoLottery::has_protect_gold() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoLottery::set_has_protect_gold() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoLottery::clear_has_protect_gold() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoLottery::clear_protect_gold() {
  protect_gold_ = 0;
  clear_has_protect_gold();
}
inline ::google::protobuf::int32 ProtoLottery::protect_gold() const {
  return protect_gold_;
}
inline void ProtoLottery::set_protect_gold(::google::protobuf::int32 value) {
  set_has_protect_gold();
  protect_gold_ = value;
}

// optional int32 end_tick = 9;
inline bool ProtoLottery::has_end_tick() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProtoLottery::set_has_end_tick() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProtoLottery::clear_has_end_tick() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProtoLottery::clear_end_tick() {
  end_tick_ = 0;
  clear_has_end_tick();
}
inline ::google::protobuf::int32 ProtoLottery::end_tick() const {
  return end_tick_;
}
inline void ProtoLottery::set_end_tick(::google::protobuf::int32 value) {
  set_has_end_tick();
  end_tick_ = value;
}

// repeated int32 jane_item_list = 10;
inline int ProtoLottery::jane_item_list_size() const {
  return jane_item_list_.size();
}
inline void ProtoLottery::clear_jane_item_list() {
  jane_item_list_.Clear();
}
inline ::google::protobuf::int32 ProtoLottery::jane_item_list(int index) const {
  return jane_item_list_.Get(index);
}
inline void ProtoLottery::set_jane_item_list(int index, ::google::protobuf::int32 value) {
  jane_item_list_.Set(index, value);
}
inline void ProtoLottery::add_jane_item_list(::google::protobuf::int32 value) {
  jane_item_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProtoLottery::jane_item_list() const {
  return jane_item_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProtoLottery::mutable_jane_item_list() {
  return &jane_item_list_;
}

// repeated .ProtoLotteryWaitAward wait_award_list = 11;
inline int ProtoLottery::wait_award_list_size() const {
  return wait_award_list_.size();
}
inline void ProtoLottery::clear_wait_award_list() {
  wait_award_list_.Clear();
}
inline const ::ProtoLotteryWaitAward& ProtoLottery::wait_award_list(int index) const {
  return wait_award_list_.Get(index);
}
inline ::ProtoLotteryWaitAward* ProtoLottery::mutable_wait_award_list(int index) {
  return wait_award_list_.Mutable(index);
}
inline ::ProtoLotteryWaitAward* ProtoLottery::add_wait_award_list() {
  return wait_award_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoLotteryWaitAward >&
ProtoLottery::wait_award_list() const {
  return wait_award_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoLotteryWaitAward >*
ProtoLottery::mutable_wait_award_list() {
  return &wait_award_list_;
}

// optional int32 activity_id = 12;
inline bool ProtoLottery::has_activity_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ProtoLottery::set_has_activity_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ProtoLottery::clear_has_activity_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ProtoLottery::clear_activity_id() {
  activity_id_ = 0;
  clear_has_activity_id();
}
inline ::google::protobuf::int32 ProtoLottery::activity_id() const {
  return activity_id_;
}
inline void ProtoLottery::set_activity_id(::google::protobuf::int32 value) {
  set_has_activity_id();
  activity_id_ = value;
}

// -------------------------------------------------------------------

// ProtoActivityTick

// optional int32 activity_id = 1;
inline bool ProtoActivityTick::has_activity_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoActivityTick::set_has_activity_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoActivityTick::clear_has_activity_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoActivityTick::clear_activity_id() {
  activity_id_ = 0;
  clear_has_activity_id();
}
inline ::google::protobuf::int32 ProtoActivityTick::activity_id() const {
  return activity_id_;
}
inline void ProtoActivityTick::set_activity_id(::google::protobuf::int32 value) {
  set_has_activity_id();
  activity_id_ = value;
}

// optional int32 begin_tick = 2;
inline bool ProtoActivityTick::has_begin_tick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoActivityTick::set_has_begin_tick() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoActivityTick::clear_has_begin_tick() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoActivityTick::clear_begin_tick() {
  begin_tick_ = 0;
  clear_has_begin_tick();
}
inline ::google::protobuf::int32 ProtoActivityTick::begin_tick() const {
  return begin_tick_;
}
inline void ProtoActivityTick::set_begin_tick(::google::protobuf::int32 value) {
  set_has_begin_tick();
  begin_tick_ = value;
}

// optional int32 end_tick = 3;
inline bool ProtoActivityTick::has_end_tick() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoActivityTick::set_has_end_tick() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoActivityTick::clear_has_end_tick() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoActivityTick::clear_end_tick() {
  end_tick_ = 0;
  clear_has_end_tick();
}
inline ::google::protobuf::int32 ProtoActivityTick::end_tick() const {
  return end_tick_;
}
inline void ProtoActivityTick::set_end_tick(::google::protobuf::int32 value) {
  set_has_end_tick();
  end_tick_ = value;
}

// -------------------------------------------------------------------

// ProtoLotteryWaitAward

// optional int32 inc_gold = 1;
inline bool ProtoLotteryWaitAward::has_inc_gold() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoLotteryWaitAward::set_has_inc_gold() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoLotteryWaitAward::clear_has_inc_gold() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoLotteryWaitAward::clear_inc_gold() {
  inc_gold_ = 0;
  clear_has_inc_gold();
}
inline ::google::protobuf::int32 ProtoLotteryWaitAward::inc_gold() const {
  return inc_gold_;
}
inline void ProtoLotteryWaitAward::set_inc_gold(::google::protobuf::int32 value) {
  set_has_inc_gold();
  inc_gold_ = value;
}

// optional int32 inc_score = 2;
inline bool ProtoLotteryWaitAward::has_inc_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoLotteryWaitAward::set_has_inc_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoLotteryWaitAward::clear_has_inc_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoLotteryWaitAward::clear_inc_score() {
  inc_score_ = 0;
  clear_has_inc_score();
}
inline ::google::protobuf::int32 ProtoLotteryWaitAward::inc_score() const {
  return inc_score_;
}
inline void ProtoLotteryWaitAward::set_inc_score(::google::protobuf::int32 value) {
  set_has_inc_score();
  inc_score_ = value;
}

// optional .ProtoItem award_item = 3;
inline bool ProtoLotteryWaitAward::has_award_item() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoLotteryWaitAward::set_has_award_item() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoLotteryWaitAward::clear_has_award_item() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoLotteryWaitAward::clear_award_item() {
  if (award_item_ != NULL) award_item_->::ProtoItem::Clear();
  clear_has_award_item();
}
inline const ::ProtoItem& ProtoLotteryWaitAward::award_item() const {
  return award_item_ != NULL ? *award_item_ : *default_instance_->award_item_;
}
inline ::ProtoItem* ProtoLotteryWaitAward::mutable_award_item() {
  set_has_award_item();
  if (award_item_ == NULL) award_item_ = new ::ProtoItem;
  return award_item_;
}
inline ::ProtoItem* ProtoLotteryWaitAward::release_award_item() {
  clear_has_award_item();
  ::ProtoItem* temp = award_item_;
  award_item_ = NULL;
  return temp;
}

// optional int32 buy_type = 4;
inline bool ProtoLotteryWaitAward::has_buy_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoLotteryWaitAward::set_has_buy_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoLotteryWaitAward::clear_has_buy_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoLotteryWaitAward::clear_buy_type() {
  buy_type_ = 0;
  clear_has_buy_type();
}
inline ::google::protobuf::int32 ProtoLotteryWaitAward::buy_type() const {
  return buy_type_;
}
inline void ProtoLotteryWaitAward::set_buy_type(::google::protobuf::int32 value) {
  set_has_buy_type();
  buy_type_ = value;
}

// -------------------------------------------------------------------

// ProtoMongoData

// optional int32 op_type = 1;
inline bool ProtoMongoData::has_op_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoMongoData::set_has_op_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoMongoData::clear_has_op_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoMongoData::clear_op_type() {
  op_type_ = 0;
  clear_has_op_type();
}
inline ::google::protobuf::int32 ProtoMongoData::op_type() const {
  return op_type_;
}
inline void ProtoMongoData::set_op_type(::google::protobuf::int32 value) {
  set_has_op_type();
  op_type_ = value;
}

// optional string table_name = 2;
inline bool ProtoMongoData::has_table_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoMongoData::set_has_table_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoMongoData::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoMongoData::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& ProtoMongoData::table_name() const {
  return *table_name_;
}
inline void ProtoMongoData::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void ProtoMongoData::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void ProtoMongoData::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoMongoData::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  return table_name_;
}
inline ::std::string* ProtoMongoData::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string cond_bson = 3;
inline bool ProtoMongoData::has_cond_bson() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoMongoData::set_has_cond_bson() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoMongoData::clear_has_cond_bson() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoMongoData::clear_cond_bson() {
  if (cond_bson_ != &::google::protobuf::internal::kEmptyString) {
    cond_bson_->clear();
  }
  clear_has_cond_bson();
}
inline const ::std::string& ProtoMongoData::cond_bson() const {
  return *cond_bson_;
}
inline void ProtoMongoData::set_cond_bson(const ::std::string& value) {
  set_has_cond_bson();
  if (cond_bson_ == &::google::protobuf::internal::kEmptyString) {
    cond_bson_ = new ::std::string;
  }
  cond_bson_->assign(value);
}
inline void ProtoMongoData::set_cond_bson(const char* value) {
  set_has_cond_bson();
  if (cond_bson_ == &::google::protobuf::internal::kEmptyString) {
    cond_bson_ = new ::std::string;
  }
  cond_bson_->assign(value);
}
inline void ProtoMongoData::set_cond_bson(const char* value, size_t size) {
  set_has_cond_bson();
  if (cond_bson_ == &::google::protobuf::internal::kEmptyString) {
    cond_bson_ = new ::std::string;
  }
  cond_bson_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoMongoData::mutable_cond_bson() {
  set_has_cond_bson();
  if (cond_bson_ == &::google::protobuf::internal::kEmptyString) {
    cond_bson_ = new ::std::string;
  }
  return cond_bson_;
}
inline ::std::string* ProtoMongoData::release_cond_bson() {
  clear_has_cond_bson();
  if (cond_bson_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cond_bson_;
    cond_bson_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 is_insert = 4;
inline bool ProtoMongoData::has_is_insert() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoMongoData::set_has_is_insert() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoMongoData::clear_has_is_insert() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoMongoData::clear_is_insert() {
  is_insert_ = 0;
  clear_has_is_insert();
}
inline ::google::protobuf::int32 ProtoMongoData::is_insert() const {
  return is_insert_;
}
inline void ProtoMongoData::set_is_insert(::google::protobuf::int32 value) {
  set_has_is_insert();
  is_insert_ = value;
}

// optional int32 data_type = 5;
inline bool ProtoMongoData::has_data_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoMongoData::set_has_data_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoMongoData::clear_has_data_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoMongoData::clear_data_type() {
  data_type_ = 0;
  clear_has_data_type();
}
inline ::google::protobuf::int32 ProtoMongoData::data_type() const {
  return data_type_;
}
inline void ProtoMongoData::set_data_type(::google::protobuf::int32 value) {
  set_has_data_type();
  data_type_ = value;
}

// optional string data_bson = 6;
inline bool ProtoMongoData::has_data_bson() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoMongoData::set_has_data_bson() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoMongoData::clear_has_data_bson() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoMongoData::clear_data_bson() {
  if (data_bson_ != &::google::protobuf::internal::kEmptyString) {
    data_bson_->clear();
  }
  clear_has_data_bson();
}
inline const ::std::string& ProtoMongoData::data_bson() const {
  return *data_bson_;
}
inline void ProtoMongoData::set_data_bson(const ::std::string& value) {
  set_has_data_bson();
  if (data_bson_ == &::google::protobuf::internal::kEmptyString) {
    data_bson_ = new ::std::string;
  }
  data_bson_->assign(value);
}
inline void ProtoMongoData::set_data_bson(const char* value) {
  set_has_data_bson();
  if (data_bson_ == &::google::protobuf::internal::kEmptyString) {
    data_bson_ = new ::std::string;
  }
  data_bson_->assign(value);
}
inline void ProtoMongoData::set_data_bson(const char* value, size_t size) {
  set_has_data_bson();
  if (data_bson_ == &::google::protobuf::internal::kEmptyString) {
    data_bson_ = new ::std::string;
  }
  data_bson_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoMongoData::mutable_data_bson() {
  set_has_data_bson();
  if (data_bson_ == &::google::protobuf::internal::kEmptyString) {
    data_bson_ = new ::std::string;
  }
  return data_bson_;
}
inline ::std::string* ProtoMongoData::release_data_bson() {
  clear_has_data_bson();
  if (data_bson_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_bson_;
    data_bson_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ProtoActFlower

// optional int64 role_id = 1;
inline bool ProtoActFlower::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoActFlower::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoActFlower::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoActFlower::clear_role_id() {
  role_id_ = GOOGLE_LONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::int64 ProtoActFlower::role_id() const {
  return role_id_;
}
inline void ProtoActFlower::set_role_id(::google::protobuf::int64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string name = 2;
inline bool ProtoActFlower::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoActFlower::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoActFlower::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoActFlower::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ProtoActFlower::name() const {
  return *name_;
}
inline void ProtoActFlower::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ProtoActFlower::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ProtoActFlower::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoActFlower::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ProtoActFlower::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 rank_index = 3;
inline bool ProtoActFlower::has_rank_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoActFlower::set_has_rank_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoActFlower::clear_has_rank_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoActFlower::clear_rank_index() {
  rank_index_ = 0;
  clear_has_rank_index();
}
inline ::google::protobuf::int32 ProtoActFlower::rank_index() const {
  return rank_index_;
}
inline void ProtoActFlower::set_rank_index(::google::protobuf::int32 value) {
  set_has_rank_index();
  rank_index_ = value;
}

// optional int32 flower_num = 4;
inline bool ProtoActFlower::has_flower_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoActFlower::set_has_flower_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoActFlower::clear_has_flower_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoActFlower::clear_flower_num() {
  flower_num_ = 0;
  clear_has_flower_num();
}
inline ::google::protobuf::int32 ProtoActFlower::flower_num() const {
  return flower_num_;
}
inline void ProtoActFlower::set_flower_num(::google::protobuf::int32 value) {
  set_has_flower_num();
  flower_num_ = value;
}

// optional int32 carrer = 5;
inline bool ProtoActFlower::has_carrer() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoActFlower::set_has_carrer() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoActFlower::clear_has_carrer() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoActFlower::clear_carrer() {
  carrer_ = 0;
  clear_has_carrer();
}
inline ::google::protobuf::int32 ProtoActFlower::carrer() const {
  return carrer_;
}
inline void ProtoActFlower::set_carrer(::google::protobuf::int32 value) {
  set_has_carrer();
  carrer_ = value;
}

// -------------------------------------------------------------------

// ProtoMount

// optional int32 mount_grade = 1;
inline bool ProtoMount::has_mount_grade() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoMount::set_has_mount_grade() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoMount::clear_has_mount_grade() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoMount::clear_mount_grade() {
  mount_grade_ = 0;
  clear_has_mount_grade();
}
inline ::google::protobuf::int32 ProtoMount::mount_grade() const {
  return mount_grade_;
}
inline void ProtoMount::set_mount_grade(::google::protobuf::int32 value) {
  set_has_mount_grade();
  mount_grade_ = value;
}

// optional int32 mount_shape = 2;
inline bool ProtoMount::has_mount_shape() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoMount::set_has_mount_shape() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoMount::clear_has_mount_shape() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoMount::clear_mount_shape() {
  mount_shape_ = 0;
  clear_has_mount_shape();
}
inline ::google::protobuf::int32 ProtoMount::mount_shape() const {
  return mount_shape_;
}
inline void ProtoMount::set_mount_shape(::google::protobuf::int32 value) {
  set_has_mount_shape();
  mount_shape_ = value;
}

// optional int32 on_mount = 3;
inline bool ProtoMount::has_on_mount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoMount::set_has_on_mount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoMount::clear_has_on_mount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoMount::clear_on_mount() {
  on_mount_ = 0;
  clear_has_on_mount();
}
inline ::google::protobuf::int32 ProtoMount::on_mount() const {
  return on_mount_;
}
inline void ProtoMount::set_on_mount(::google::protobuf::int32 value) {
  set_has_on_mount();
  on_mount_ = value;
}

// optional int32 bless = 4;
inline bool ProtoMount::has_bless() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoMount::set_has_bless() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoMount::clear_has_bless() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoMount::clear_bless() {
  bless_ = 0;
  clear_has_bless();
}
inline ::google::protobuf::int32 ProtoMount::bless() const {
  return bless_;
}
inline void ProtoMount::set_bless(::google::protobuf::int32 value) {
  set_has_bless();
  bless_ = value;
}

// optional int32 fail_times = 5;
inline bool ProtoMount::has_fail_times() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoMount::set_has_fail_times() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoMount::clear_has_fail_times() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoMount::clear_fail_times() {
  fail_times_ = 0;
  clear_has_fail_times();
}
inline ::google::protobuf::int32 ProtoMount::fail_times() const {
  return fail_times_;
}
inline void ProtoMount::set_fail_times(::google::protobuf::int32 value) {
  set_has_fail_times();
  fail_times_ = value;
}

// optional int64 finish_bless = 6;
inline bool ProtoMount::has_finish_bless() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoMount::set_has_finish_bless() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoMount::clear_has_finish_bless() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoMount::clear_finish_bless() {
  finish_bless_ = GOOGLE_LONGLONG(0);
  clear_has_finish_bless();
}
inline ::google::protobuf::int64 ProtoMount::finish_bless() const {
  return finish_bless_;
}
inline void ProtoMount::set_finish_bless(::google::protobuf::int64 value) {
  set_has_finish_bless();
  finish_bless_ = value;
}

// optional int32 ability = 7;
inline bool ProtoMount::has_ability() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoMount::set_has_ability() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoMount::clear_has_ability() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoMount::clear_ability() {
  ability_ = 0;
  clear_has_ability();
}
inline ::google::protobuf::int32 ProtoMount::ability() const {
  return ability_;
}
inline void ProtoMount::set_ability(::google::protobuf::int32 value) {
  set_has_ability();
  ability_ = value;
}

// optional int32 growth = 8;
inline bool ProtoMount::has_growth() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoMount::set_has_growth() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoMount::clear_has_growth() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoMount::clear_growth() {
  growth_ = 0;
  clear_has_growth();
}
inline ::google::protobuf::int32 ProtoMount::growth() const {
  return growth_;
}
inline void ProtoMount::set_growth(::google::protobuf::int32 value) {
  set_has_growth();
  growth_ = value;
}

// repeated .ProtoPairObj skill = 9;
inline int ProtoMount::skill_size() const {
  return skill_.size();
}
inline void ProtoMount::clear_skill() {
  skill_.Clear();
}
inline const ::ProtoPairObj& ProtoMount::skill(int index) const {
  return skill_.Get(index);
}
inline ::ProtoPairObj* ProtoMount::mutable_skill(int index) {
  return skill_.Mutable(index);
}
inline ::ProtoPairObj* ProtoMount::add_skill() {
  return skill_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >&
ProtoMount::skill() const {
  return skill_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >*
ProtoMount::mutable_skill() {
  return &skill_;
}

// optional int32 open = 10;
inline bool ProtoMount::has_open() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProtoMount::set_has_open() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ProtoMount::clear_has_open() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ProtoMount::clear_open() {
  open_ = 0;
  clear_has_open();
}
inline ::google::protobuf::int32 ProtoMount::open() const {
  return open_;
}
inline void ProtoMount::set_open(::google::protobuf::int32 value) {
  set_has_open();
  open_ = value;
}

// optional int32 act_shape = 11;
inline bool ProtoMount::has_act_shape() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ProtoMount::set_has_act_shape() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ProtoMount::clear_has_act_shape() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ProtoMount::clear_act_shape() {
  act_shape_ = 0;
  clear_has_act_shape();
}
inline ::google::protobuf::int32 ProtoMount::act_shape() const {
  return act_shape_;
}
inline void ProtoMount::set_act_shape(::google::protobuf::int32 value) {
  set_has_act_shape();
  act_shape_ = value;
}

// -------------------------------------------------------------------

// ProtoScriptType

// optional int32 script_type = 1;
inline bool ProtoScriptType::has_script_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoScriptType::set_has_script_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoScriptType::clear_has_script_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoScriptType::clear_script_type() {
  script_type_ = 0;
  clear_has_script_type();
}
inline ::google::protobuf::int32 ProtoScriptType::script_type() const {
  return script_type_;
}
inline void ProtoScriptType::set_script_type(::google::protobuf::int32 value) {
  set_has_script_type();
  script_type_ = value;
}

// repeated int32 script_sort = 2;
inline int ProtoScriptType::script_sort_size() const {
  return script_sort_.size();
}
inline void ProtoScriptType::clear_script_sort() {
  script_sort_.Clear();
}
inline ::google::protobuf::int32 ProtoScriptType::script_sort(int index) const {
  return script_sort_.Get(index);
}
inline void ProtoScriptType::set_script_sort(int index, ::google::protobuf::int32 value) {
  script_sort_.Set(index, value);
}
inline void ProtoScriptType::add_script_sort(::google::protobuf::int32 value) {
  script_sort_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProtoScriptType::script_sort() const {
  return script_sort_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProtoScriptType::mutable_script_sort() {
  return &script_sort_;
}

// optional int32 pass_wave = 3;
inline bool ProtoScriptType::has_pass_wave() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoScriptType::set_has_pass_wave() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoScriptType::clear_has_pass_wave() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoScriptType::clear_pass_wave() {
  pass_wave_ = 0;
  clear_has_pass_wave();
}
inline ::google::protobuf::int32 ProtoScriptType::pass_wave() const {
  return pass_wave_;
}
inline void ProtoScriptType::set_pass_wave(::google::protobuf::int32 value) {
  set_has_pass_wave();
  pass_wave_ = value;
}

// optional int32 pass_chapter = 4;
inline bool ProtoScriptType::has_pass_chapter() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoScriptType::set_has_pass_chapter() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoScriptType::clear_has_pass_chapter() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoScriptType::clear_pass_chapter() {
  pass_chapter_ = 0;
  clear_has_pass_chapter();
}
inline ::google::protobuf::int32 ProtoScriptType::pass_chapter() const {
  return pass_chapter_;
}
inline void ProtoScriptType::set_pass_chapter(::google::protobuf::int32 value) {
  set_has_pass_chapter();
  pass_chapter_ = value;
}

// optional int32 notify_wave = 5;
inline bool ProtoScriptType::has_notify_wave() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoScriptType::set_has_notify_wave() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoScriptType::clear_has_notify_wave() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoScriptType::clear_notify_wave() {
  notify_wave_ = 0;
  clear_has_notify_wave();
}
inline ::google::protobuf::int32 ProtoScriptType::notify_wave() const {
  return notify_wave_;
}
inline void ProtoScriptType::set_notify_wave(::google::protobuf::int32 value) {
  set_has_notify_wave();
  notify_wave_ = value;
}

// optional int32 notify_chapter = 6;
inline bool ProtoScriptType::has_notify_chapter() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoScriptType::set_has_notify_chapter() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoScriptType::clear_has_notify_chapter() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoScriptType::clear_notify_chapter() {
  notify_chapter_ = 0;
  clear_has_notify_chapter();
}
inline ::google::protobuf::int32 ProtoScriptType::notify_chapter() const {
  return notify_chapter_;
}
inline void ProtoScriptType::set_notify_chapter(::google::protobuf::int32 value) {
  set_has_notify_chapter();
  notify_chapter_ = value;
}

// optional int32 is_sweep = 7;
inline bool ProtoScriptType::has_is_sweep() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoScriptType::set_has_is_sweep() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoScriptType::clear_has_is_sweep() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoScriptType::clear_is_sweep() {
  is_sweep_ = 0;
  clear_has_is_sweep();
}
inline ::google::protobuf::int32 ProtoScriptType::is_sweep() const {
  return is_sweep_;
}
inline void ProtoScriptType::set_is_sweep(::google::protobuf::int32 value) {
  set_has_is_sweep();
  is_sweep_ = value;
}

// optional int32 used_times_tick = 8;
inline bool ProtoScriptType::has_used_times_tick() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoScriptType::set_has_used_times_tick() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoScriptType::clear_has_used_times_tick() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoScriptType::clear_used_times_tick() {
  used_times_tick_ = 0;
  clear_has_used_times_tick();
}
inline ::google::protobuf::int32 ProtoScriptType::used_times_tick() const {
  return used_times_tick_;
}
inline void ProtoScriptType::set_used_times_tick(::google::protobuf::int32 value) {
  set_has_used_times_tick();
  used_times_tick_ = value;
}

// repeated .ProtoPairObj reward_map = 9;
inline int ProtoScriptType::reward_map_size() const {
  return reward_map_.size();
}
inline void ProtoScriptType::clear_reward_map() {
  reward_map_.Clear();
}
inline const ::ProtoPairObj& ProtoScriptType::reward_map(int index) const {
  return reward_map_.Get(index);
}
inline ::ProtoPairObj* ProtoScriptType::mutable_reward_map(int index) {
  return reward_map_.Mutable(index);
}
inline ::ProtoPairObj* ProtoScriptType::add_reward_map() {
  return reward_map_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >&
ProtoScriptType::reward_map() const {
  return reward_map_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoPairObj >*
ProtoScriptType::mutable_reward_map() {
  return &reward_map_;
}

// optional int32 start_wave = 10;
inline bool ProtoScriptType::has_start_wave() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProtoScriptType::set_has_start_wave() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ProtoScriptType::clear_has_start_wave() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ProtoScriptType::clear_start_wave() {
  start_wave_ = 0;
  clear_has_start_wave();
}
inline ::google::protobuf::int32 ProtoScriptType::start_wave() const {
  return start_wave_;
}
inline void ProtoScriptType::set_start_wave(::google::protobuf::int32 value) {
  set_has_start_wave();
  start_wave_ = value;
}

// optional int32 start_chapter = 11;
inline bool ProtoScriptType::has_start_chapter() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ProtoScriptType::set_has_start_chapter() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ProtoScriptType::clear_has_start_chapter() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ProtoScriptType::clear_start_chapter() {
  start_chapter_ = 0;
  clear_has_start_chapter();
}
inline ::google::protobuf::int32 ProtoScriptType::start_chapter() const {
  return start_chapter_;
}
inline void ProtoScriptType::set_start_chapter(::google::protobuf::int32 value) {
  set_has_start_chapter();
  start_chapter_ = value;
}

// -------------------------------------------------------------------

// ProtoScriptFirstAward

// optional int32 script_wave_id = 1;
inline bool ProtoScriptFirstAward::has_script_wave_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoScriptFirstAward::set_has_script_wave_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoScriptFirstAward::clear_has_script_wave_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoScriptFirstAward::clear_script_wave_id() {
  script_wave_id_ = 0;
  clear_has_script_wave_id();
}
inline ::google::protobuf::int32 ProtoScriptFirstAward::script_wave_id() const {
  return script_wave_id_;
}
inline void ProtoScriptFirstAward::set_script_wave_id(::google::protobuf::int32 value) {
  set_has_script_wave_id();
  script_wave_id_ = value;
}

// optional int32 is_get = 2;
inline bool ProtoScriptFirstAward::has_is_get() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoScriptFirstAward::set_has_is_get() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoScriptFirstAward::clear_has_is_get() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoScriptFirstAward::clear_is_get() {
  is_get_ = 0;
  clear_has_is_get();
}
inline ::google::protobuf::int32 ProtoScriptFirstAward::is_get() const {
  return is_get_;
}
inline void ProtoScriptFirstAward::set_is_get(::google::protobuf::int32 value) {
  set_has_is_get();
  is_get_ = value;
}

// -------------------------------------------------------------------

// RecordMount

// optional int64 role_id = 1;
inline bool RecordMount::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecordMount::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecordMount::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecordMount::clear_role_id() {
  role_id_ = GOOGLE_LONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::int64 RecordMount::role_id() const {
  return role_id_;
}
inline void RecordMount::set_role_id(::google::protobuf::int64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional int32 sub_agent = 2;
inline bool RecordMount::has_sub_agent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecordMount::set_has_sub_agent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecordMount::clear_has_sub_agent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecordMount::clear_sub_agent() {
  sub_agent_ = 0;
  clear_has_sub_agent();
}
inline ::google::protobuf::int32 RecordMount::sub_agent() const {
  return sub_agent_;
}
inline void RecordMount::set_sub_agent(::google::protobuf::int32 value) {
  set_has_sub_agent();
  sub_agent_ = value;
}

// optional int32 serial_type = 3;
inline bool RecordMount::has_serial_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecordMount::set_has_serial_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecordMount::clear_has_serial_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecordMount::clear_serial_type() {
  serial_type_ = 0;
  clear_has_serial_type();
}
inline ::google::protobuf::int32 RecordMount::serial_type() const {
  return serial_type_;
}
inline void RecordMount::set_serial_type(::google::protobuf::int32 value) {
  set_has_serial_type();
  serial_type_ = value;
}

// optional int32 mount_type = 4;
inline bool RecordMount::has_mount_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RecordMount::set_has_mount_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RecordMount::clear_has_mount_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RecordMount::clear_mount_type() {
  mount_type_ = 0;
  clear_has_mount_type();
}
inline ::google::protobuf::int32 RecordMount::mount_type() const {
  return mount_type_;
}
inline void RecordMount::set_mount_type(::google::protobuf::int32 value) {
  set_has_mount_type();
  mount_type_ = value;
}

// optional int32 grade = 5;
inline bool RecordMount::has_grade() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RecordMount::set_has_grade() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RecordMount::clear_has_grade() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RecordMount::clear_grade() {
  grade_ = 0;
  clear_has_grade();
}
inline ::google::protobuf::int32 RecordMount::grade() const {
  return grade_;
}
inline void RecordMount::set_grade(::google::protobuf::int32 value) {
  set_has_grade();
  grade_ = value;
}

// optional string skill = 6;
inline bool RecordMount::has_skill() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RecordMount::set_has_skill() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RecordMount::clear_has_skill() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RecordMount::clear_skill() {
  if (skill_ != &::google::protobuf::internal::kEmptyString) {
    skill_->clear();
  }
  clear_has_skill();
}
inline const ::std::string& RecordMount::skill() const {
  return *skill_;
}
inline void RecordMount::set_skill(const ::std::string& value) {
  set_has_skill();
  if (skill_ == &::google::protobuf::internal::kEmptyString) {
    skill_ = new ::std::string;
  }
  skill_->assign(value);
}
inline void RecordMount::set_skill(const char* value) {
  set_has_skill();
  if (skill_ == &::google::protobuf::internal::kEmptyString) {
    skill_ = new ::std::string;
  }
  skill_->assign(value);
}
inline void RecordMount::set_skill(const char* value, size_t size) {
  set_has_skill();
  if (skill_ == &::google::protobuf::internal::kEmptyString) {
    skill_ = new ::std::string;
  }
  skill_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecordMount::mutable_skill() {
  set_has_skill();
  if (skill_ == &::google::protobuf::internal::kEmptyString) {
    skill_ = new ::std::string;
  }
  return skill_;
}
inline ::std::string* RecordMount::release_skill() {
  clear_has_skill();
  if (skill_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = skill_;
    skill_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string equip = 7;
inline bool RecordMount::has_equip() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RecordMount::set_has_equip() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RecordMount::clear_has_equip() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RecordMount::clear_equip() {
  if (equip_ != &::google::protobuf::internal::kEmptyString) {
    equip_->clear();
  }
  clear_has_equip();
}
inline const ::std::string& RecordMount::equip() const {
  return *equip_;
}
inline void RecordMount::set_equip(const ::std::string& value) {
  set_has_equip();
  if (equip_ == &::google::protobuf::internal::kEmptyString) {
    equip_ = new ::std::string;
  }
  equip_->assign(value);
}
inline void RecordMount::set_equip(const char* value) {
  set_has_equip();
  if (equip_ == &::google::protobuf::internal::kEmptyString) {
    equip_ = new ::std::string;
  }
  equip_->assign(value);
}
inline void RecordMount::set_equip(const char* value, size_t size) {
  set_has_equip();
  if (equip_ == &::google::protobuf::internal::kEmptyString) {
    equip_ = new ::std::string;
  }
  equip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecordMount::mutable_equip() {
  set_has_equip();
  if (equip_ == &::google::protobuf::internal::kEmptyString) {
    equip_ = new ::std::string;
  }
  return equip_;
}
inline ::std::string* RecordMount::release_equip() {
  clear_has_equip();
  if (equip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = equip_;
    equip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 bless = 8;
inline bool RecordMount::has_bless() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RecordMount::set_has_bless() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RecordMount::clear_has_bless() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RecordMount::clear_bless() {
  bless_ = 0;
  clear_has_bless();
}
inline ::google::protobuf::int32 RecordMount::bless() const {
  return bless_;
}
inline void RecordMount::set_bless(::google::protobuf::int32 value) {
  set_has_bless();
  bless_ = value;
}

// optional int64 time = 9;
inline bool RecordMount::has_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RecordMount::set_has_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RecordMount::clear_has_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RecordMount::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 RecordMount::time() const {
  return time_;
}
inline void RecordMount::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// optional string table_name = 10;
inline bool RecordMount::has_table_name() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RecordMount::set_has_table_name() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RecordMount::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RecordMount::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& RecordMount::table_name() const {
  return *table_name_;
}
inline void RecordMount::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void RecordMount::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void RecordMount::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecordMount::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  return table_name_;
}
inline ::std::string* RecordMount::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// RecordActivity

// optional string table_name = 1;
inline bool RecordActivity::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecordActivity::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecordActivity::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecordActivity::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& RecordActivity::table_name() const {
  return *table_name_;
}
inline void RecordActivity::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void RecordActivity::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void RecordActivity::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecordActivity::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  return table_name_;
}
inline ::std::string* RecordActivity::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 time = 2;
inline bool RecordActivity::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecordActivity::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecordActivity::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecordActivity::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 RecordActivity::time() const {
  return time_;
}
inline void RecordActivity::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// optional int32 act_type = 3;
inline bool RecordActivity::has_act_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecordActivity::set_has_act_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecordActivity::clear_has_act_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecordActivity::clear_act_type() {
  act_type_ = 0;
  clear_has_act_type();
}
inline ::google::protobuf::int32 RecordActivity::act_type() const {
  return act_type_;
}
inline void RecordActivity::set_act_type(::google::protobuf::int32 value) {
  set_has_act_type();
  act_type_ = value;
}

// optional int32 total_attend = 4;
inline bool RecordActivity::has_total_attend() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RecordActivity::set_has_total_attend() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RecordActivity::clear_has_total_attend() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RecordActivity::clear_total_attend() {
  total_attend_ = 0;
  clear_has_total_attend();
}
inline ::google::protobuf::int32 RecordActivity::total_attend() const {
  return total_attend_;
}
inline void RecordActivity::set_total_attend(::google::protobuf::int32 value) {
  set_has_total_attend();
  total_attend_ = value;
}

// optional int32 sub1_key = 5;
inline bool RecordActivity::has_sub1_key() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RecordActivity::set_has_sub1_key() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RecordActivity::clear_has_sub1_key() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RecordActivity::clear_sub1_key() {
  sub1_key_ = 0;
  clear_has_sub1_key();
}
inline ::google::protobuf::int32 RecordActivity::sub1_key() const {
  return sub1_key_;
}
inline void RecordActivity::set_sub1_key(::google::protobuf::int32 value) {
  set_has_sub1_key();
  sub1_key_ = value;
}

// optional int32 sub1_value = 6;
inline bool RecordActivity::has_sub1_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RecordActivity::set_has_sub1_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RecordActivity::clear_has_sub1_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RecordActivity::clear_sub1_value() {
  sub1_value_ = 0;
  clear_has_sub1_value();
}
inline ::google::protobuf::int32 RecordActivity::sub1_value() const {
  return sub1_value_;
}
inline void RecordActivity::set_sub1_value(::google::protobuf::int32 value) {
  set_has_sub1_value();
  sub1_value_ = value;
}

// optional int32 sub2_key = 7;
inline bool RecordActivity::has_sub2_key() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RecordActivity::set_has_sub2_key() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RecordActivity::clear_has_sub2_key() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RecordActivity::clear_sub2_key() {
  sub2_key_ = 0;
  clear_has_sub2_key();
}
inline ::google::protobuf::int32 RecordActivity::sub2_key() const {
  return sub2_key_;
}
inline void RecordActivity::set_sub2_key(::google::protobuf::int32 value) {
  set_has_sub2_key();
  sub2_key_ = value;
}

// optional int32 sub2_value = 8;
inline bool RecordActivity::has_sub2_value() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RecordActivity::set_has_sub2_value() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RecordActivity::clear_has_sub2_value() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RecordActivity::clear_sub2_value() {
  sub2_value_ = 0;
  clear_has_sub2_value();
}
inline ::google::protobuf::int32 RecordActivity::sub2_value() const {
  return sub2_value_;
}
inline void RecordActivity::set_sub2_value(::google::protobuf::int32 value) {
  set_has_sub2_value();
  sub2_value_ = value;
}

// optional string sub3 = 9;
inline bool RecordActivity::has_sub3() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RecordActivity::set_has_sub3() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RecordActivity::clear_has_sub3() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RecordActivity::clear_sub3() {
  if (sub3_ != &::google::protobuf::internal::kEmptyString) {
    sub3_->clear();
  }
  clear_has_sub3();
}
inline const ::std::string& RecordActivity::sub3() const {
  return *sub3_;
}
inline void RecordActivity::set_sub3(const ::std::string& value) {
  set_has_sub3();
  if (sub3_ == &::google::protobuf::internal::kEmptyString) {
    sub3_ = new ::std::string;
  }
  sub3_->assign(value);
}
inline void RecordActivity::set_sub3(const char* value) {
  set_has_sub3();
  if (sub3_ == &::google::protobuf::internal::kEmptyString) {
    sub3_ = new ::std::string;
  }
  sub3_->assign(value);
}
inline void RecordActivity::set_sub3(const char* value, size_t size) {
  set_has_sub3();
  if (sub3_ == &::google::protobuf::internal::kEmptyString) {
    sub3_ = new ::std::string;
  }
  sub3_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecordActivity::mutable_sub3() {
  set_has_sub3();
  if (sub3_ == &::google::protobuf::internal::kEmptyString) {
    sub3_ = new ::std::string;
  }
  return sub3_;
}
inline ::std::string* RecordActivity::release_sub3() {
  clear_has_sub3();
  if (sub3_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sub3_;
    sub3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProtoInnerPublic_2eproto__INCLUDED
