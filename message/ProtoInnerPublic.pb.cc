// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoInnerPublic.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ProtoServerAddress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoServerAddress_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoSyncStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoSyncStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoPackageSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoPackageSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoPackage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoPackage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoLimitGrid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoLimitGrid_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoSerialObj_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoSerialObj_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoProItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoProItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoInnerTaskInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoInnerTaskInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoInnerTaskCond_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoInnerTaskCond_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoSignInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoSignInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoFBItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoFBItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecordMoney_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordMoney_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecordItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecordEquipment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordEquipment_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecordPlayerLevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordPlayerLevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecordOtherSerial_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordOtherSerial_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoScriptRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoScriptRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoLivenessTaskInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoLivenessTaskInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoExpRestoreRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoExpRestoreRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoMagicalPolish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoMagicalPolish_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoPieceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoPieceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoBrocastNewInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoBrocastNewInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoFashionTips_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoFashionTips_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoPlayerTipSyncInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoPlayerTipSyncInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoSyncLabel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoSyncLabel_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecordOnlineUsers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordOnlineUsers_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecordLoginLogout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordLoginLogout_reflection_ = NULL;
const ::google::protobuf::Descriptor* BackRechargeOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BackRechargeOrder_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoERTimeStage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoERTimeStage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoERScriptStageInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoERScriptStageInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoOfflineBeast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoOfflineBeast_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecordTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecordRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecordMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordMail_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoOnSaleItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoOnSaleItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecordChat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordChat_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoLottery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoLottery_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoActivityTick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoActivityTick_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoLotteryWaitAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoLotteryWaitAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoMongoData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoMongoData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoActFlower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoActFlower_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoMount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoMount_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoScriptType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoScriptType_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoScriptFirstAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoScriptFirstAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecordMount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordMount_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecordActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordActivity_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoInnerPublic_2eproto() {
  protobuf_AddDesc_ProtoInnerPublic_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoInnerPublic.proto");
  GOOGLE_CHECK(file != NULL);
  ProtoServerAddress_descriptor_ = file->message_type(0);
  static const int ProtoServerAddress_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoServerAddress, server_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoServerAddress, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoServerAddress, auth_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoServerAddress, auth_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoServerAddress, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoServerAddress, level_),
  };
  ProtoServerAddress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoServerAddress_descriptor_,
      ProtoServerAddress::default_instance_,
      ProtoServerAddress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoServerAddress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoServerAddress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoServerAddress));
  ProtoSyncStatus_descriptor_ = file->message_type(1);
  static const int ProtoSyncStatus_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSyncStatus, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSyncStatus, view_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSyncStatus, view1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSyncStatus, view2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSyncStatus, view3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSyncStatus, value1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSyncStatus, value2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSyncStatus, value3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSyncStatus, value4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSyncStatus, value5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSyncStatus, check_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSyncStatus, check_usec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSyncStatus, interval_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSyncStatus, interval_usec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSyncStatus, last_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSyncStatus, last_usec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSyncStatus, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSyncStatus, skill_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSyncStatus, attacker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSyncStatus, accumulate_),
  };
  ProtoSyncStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoSyncStatus_descriptor_,
      ProtoSyncStatus::default_instance_,
      ProtoSyncStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSyncStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSyncStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoSyncStatus));
  ProtoPackageSet_descriptor_ = file->message_type(2);
  static const int ProtoPackageSet_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPackageSet, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPackageSet, package_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPackageSet, money_use_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPackageSet, recharge_first_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPackageSet, recharge_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPackageSet, resource_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPackageSet, use_resource_map_),
  };
  ProtoPackageSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoPackageSet_descriptor_,
      ProtoPackageSet::default_instance_,
      ProtoPackageSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPackageSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPackageSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoPackageSet));
  ProtoPackage_descriptor_ = file->message_type(3);
  static const int ProtoPackage_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPackage, pack_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPackage, pack_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPackage, last_open_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPackage, item_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPackage, grid_vec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPackage, is_open_sublime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPackage, sublime_level_),
  };
  ProtoPackage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoPackage_descriptor_,
      ProtoPackage::default_instance_,
      ProtoPackage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPackage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPackage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoPackage));
  ProtoLimitGrid_descriptor_ = file->message_type(4);
  static const int ProtoLimitGrid_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLimitGrid, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLimitGrid, left_tick_),
  };
  ProtoLimitGrid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoLimitGrid_descriptor_,
      ProtoLimitGrid::default_instance_,
      ProtoLimitGrid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLimitGrid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLimitGrid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoLimitGrid));
  ProtoSerialObj_descriptor_ = file->message_type(5);
  static const int ProtoSerialObj_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSerialObj, serial_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSerialObj, sub_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSerialObj, serial_value_),
  };
  ProtoSerialObj_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoSerialObj_descriptor_,
      ProtoSerialObj::default_instance_,
      ProtoSerialObj_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSerialObj, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSerialObj, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoSerialObj));
  ProtoProItem_descriptor_ = file->message_type(6);
  static const int ProtoProItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoProItem, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoProItem, pro_pair_),
  };
  ProtoProItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoProItem_descriptor_,
      ProtoProItem::default_instance_,
      ProtoProItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoProItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoProItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoProItem));
  ProtoInnerTaskInfo_descriptor_ = file->message_type(7);
  static const int ProtoInnerTaskInfo_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoInnerTaskInfo, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoInnerTaskInfo, game_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoInnerTaskInfo, accept_tick_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoInnerTaskInfo, accept_tick_usec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoInnerTaskInfo, refresh_tick_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoInnerTaskInfo, refresh_tick_usec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoInnerTaskInfo, task_cond_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoInnerTaskInfo, prev_task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoInnerTaskInfo, post_task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoInnerTaskInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoInnerTaskInfo, logic_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoInnerTaskInfo, task_star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoInnerTaskInfo, fast_finish_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoInnerTaskInfo, fresh_star_times_),
  };
  ProtoInnerTaskInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoInnerTaskInfo_descriptor_,
      ProtoInnerTaskInfo::default_instance_,
      ProtoInnerTaskInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoInnerTaskInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoInnerTaskInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoInnerTaskInfo));
  ProtoInnerTaskCond_descriptor_ = file->message_type(8);
  static const int ProtoInnerTaskCond_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoInnerTaskCond, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoInnerTaskCond, current_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoInnerTaskCond, cond_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoInnerTaskCond, id_list_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoInnerTaskCond, cond_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoInnerTaskCond, final_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoInnerTaskCond, kill_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoInnerTaskCond, range_level_),
  };
  ProtoInnerTaskCond_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoInnerTaskCond_descriptor_,
      ProtoInnerTaskCond::default_instance_,
      ProtoInnerTaskCond_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoInnerTaskCond, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoInnerTaskCond, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoInnerTaskCond));
  ProtoSignInfo_descriptor_ = file->message_type(9);
  static const int ProtoSignInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSignInfo, sign_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSignInfo, type_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSignInfo, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSignInfo, type_lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSignInfo, type_force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSignInfo, type_count_),
  };
  ProtoSignInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoSignInfo_descriptor_,
      ProtoSignInfo::default_instance_,
      ProtoSignInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSignInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSignInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoSignInfo));
  ProtoFBItem_descriptor_ = file->message_type(10);
  static const int ProtoFBItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFBItem, fb_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFBItem, finish_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFBItem, total_times_),
  };
  ProtoFBItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoFBItem_descriptor_,
      ProtoFBItem::default_instance_,
      ProtoFBItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFBItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFBItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoFBItem));
  RecordMoney_descriptor_ = file->message_type(11);
  static const int RecordMoney_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMoney, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMoney, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMoney, serial_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMoney, sub_serial_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMoney, sub_agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMoney, money_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMoney, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMoney, bind_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMoney, remain_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMoney, remain_bind_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMoney, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMoney, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMoney, market_),
  };
  RecordMoney_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecordMoney_descriptor_,
      RecordMoney::default_instance_,
      RecordMoney_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMoney, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMoney, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecordMoney));
  RecordItem_descriptor_ = file->message_type(12);
  static const int RecordItem_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordItem, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordItem, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordItem, serial_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordItem, sub_serial_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordItem, sub_agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordItem, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordItem, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordItem, bind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordItem, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordItem, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordItem, market_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordItem, src_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordItem, role_level_),
  };
  RecordItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecordItem_descriptor_,
      RecordItem::default_instance_,
      RecordItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecordItem));
  RecordEquipment_descriptor_ = file->message_type(13);
  static const int RecordEquipment_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordEquipment, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordEquipment, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordEquipment, serial_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordEquipment, sub_agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordEquipment, equip_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordEquipment, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordEquipment, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordEquipment, bind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordEquipment, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordEquipment, pack_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordEquipment, refine_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordEquipment, refine_degree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordEquipment, serial_sub_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordEquipment, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordEquipment, luck_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordEquipment, jewel_lists_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordEquipment, cur_polish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordEquipment, extern_attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordEquipment, molding_),
  };
  RecordEquipment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecordEquipment_descriptor_,
      RecordEquipment::default_instance_,
      RecordEquipment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordEquipment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordEquipment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecordEquipment));
  RecordPlayerLevel_descriptor_ = file->message_type(14);
  static const int RecordPlayerLevel_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordPlayerLevel, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordPlayerLevel, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordPlayerLevel, serial_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordPlayerLevel, sub_agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordPlayerLevel, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordPlayerLevel, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordPlayerLevel, platform_),
  };
  RecordPlayerLevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecordPlayerLevel_descriptor_,
      RecordPlayerLevel::default_instance_,
      RecordPlayerLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordPlayerLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordPlayerLevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecordPlayerLevel));
  RecordOtherSerial_descriptor_ = file->message_type(15);
  static const int RecordOtherSerial_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordOtherSerial, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordOtherSerial, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordOtherSerial, serial_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordOtherSerial, sub_serial_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordOtherSerial, sub_agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordOtherSerial, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordOtherSerial, ext1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordOtherSerial, ext2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordOtherSerial, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordOtherSerial, platform_),
  };
  RecordOtherSerial_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecordOtherSerial_descriptor_,
      RecordOtherSerial::default_instance_,
      RecordOtherSerial_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordOtherSerial, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordOtherSerial, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecordOtherSerial));
  ProtoScriptRecord_descriptor_ = file->message_type(16);
  static const int ProtoScriptRecord_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptRecord, script_sort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptRecord, used_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptRecord, used_times_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptRecord, enter_script_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptRecord, progress_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptRecord, best_use_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptRecord, is_first_pass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptRecord, buy_left_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptRecord, couple_buy_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptRecord, day_pass_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptRecord, is_even_enter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptRecord, protect_beast_index_),
  };
  ProtoScriptRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoScriptRecord_descriptor_,
      ProtoScriptRecord::default_instance_,
      ProtoScriptRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoScriptRecord));
  ProtoLivenessTaskInfo_descriptor_ = file->message_type(17);
  static const int ProtoLivenessTaskInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLivenessTaskInfo, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLivenessTaskInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLivenessTaskInfo, time_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLivenessTaskInfo, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLivenessTaskInfo, finish_num_),
  };
  ProtoLivenessTaskInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoLivenessTaskInfo_descriptor_,
      ProtoLivenessTaskInfo::default_instance_,
      ProtoLivenessTaskInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLivenessTaskInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLivenessTaskInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoLivenessTaskInfo));
  ProtoExpRestoreRecord_descriptor_ = file->message_type(18);
  static const int ProtoExpRestoreRecord_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoExpRestoreRecord, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoExpRestoreRecord, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoExpRestoreRecord, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoExpRestoreRecord, valid_),
  };
  ProtoExpRestoreRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoExpRestoreRecord_descriptor_,
      ProtoExpRestoreRecord::default_instance_,
      ProtoExpRestoreRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoExpRestoreRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoExpRestoreRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoExpRestoreRecord));
  ProtoMagicalPolish_descriptor_ = file->message_type(19);
  static const int ProtoMagicalPolish_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMagicalPolish, magical_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMagicalPolish, cur_use_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMagicalPolish, single_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMagicalPolish, batch_record_),
  };
  ProtoMagicalPolish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoMagicalPolish_descriptor_,
      ProtoMagicalPolish::default_instance_,
      ProtoMagicalPolish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMagicalPolish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMagicalPolish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoMagicalPolish));
  ProtoPieceInfo_descriptor_ = file->message_type(20);
  static const int ProtoPieceInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPieceInfo, chapter_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPieceInfo, used_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPieceInfo, used_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPieceInfo, award_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPieceInfo, chapter_item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPieceInfo, chapter_item_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPieceInfo, today_pass_flag_),
  };
  ProtoPieceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoPieceInfo_descriptor_,
      ProtoPieceInfo::default_instance_,
      ProtoPieceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPieceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPieceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoPieceInfo));
  ProtoBrocastNewInfo_descriptor_ = file->message_type(21);
  static const int ProtoBrocastNewInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBrocastNewInfo, shout_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBrocastNewInfo, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBrocastNewInfo, channel_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBrocastNewInfo, shout_detail_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBrocastNewInfo, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBrocastNewInfo, role_),
  };
  ProtoBrocastNewInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoBrocastNewInfo_descriptor_,
      ProtoBrocastNewInfo::default_instance_,
      ProtoBrocastNewInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBrocastNewInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBrocastNewInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoBrocastNewInfo));
  ProtoFashionTips_descriptor_ = file->message_type(22);
  static const int ProtoFashionTips_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFashionTips, fashion_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFashionTips, fashion_force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFashionTips, left_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFashionTips, martial_id_),
  };
  ProtoFashionTips_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoFashionTips_descriptor_,
      ProtoFashionTips::default_instance_,
      ProtoFashionTips_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFashionTips, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFashionTips, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoFashionTips));
  ProtoPlayerTipSyncInfo_descriptor_ = file->message_type(23);
  static const int ProtoPlayerTipSyncInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPlayerTipSyncInfo, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPlayerTipSyncInfo, arena_reward_),
  };
  ProtoPlayerTipSyncInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoPlayerTipSyncInfo_descriptor_,
      ProtoPlayerTipSyncInfo::default_instance_,
      ProtoPlayerTipSyncInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPlayerTipSyncInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPlayerTipSyncInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoPlayerTipSyncInfo));
  ProtoSyncLabel_descriptor_ = file->message_type(24);
  static const int ProtoSyncLabel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSyncLabel, label_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSyncLabel, expire_tick_),
  };
  ProtoSyncLabel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoSyncLabel_descriptor_,
      ProtoSyncLabel::default_instance_,
      ProtoSyncLabel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSyncLabel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoSyncLabel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoSyncLabel));
  RecordOnlineUsers_descriptor_ = file->message_type(25);
  static const int RecordOnlineUsers_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordOnlineUsers, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordOnlineUsers, sub_agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordOnlineUsers, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordOnlineUsers, market_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordOnlineUsers, users_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordOnlineUsers, hooking_users_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordOnlineUsers, time_),
  };
  RecordOnlineUsers_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecordOnlineUsers_descriptor_,
      RecordOnlineUsers::default_instance_,
      RecordOnlineUsers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordOnlineUsers, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordOnlineUsers, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecordOnlineUsers));
  RecordLoginLogout_descriptor_ = file->message_type(26);
  static const int RecordLoginLogout_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordLoginLogout, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordLoginLogout, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordLoginLogout, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordLoginLogout, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordLoginLogout, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordLoginLogout, client_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordLoginLogout, login_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordLoginLogout, logout_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordLoginLogout, online_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordLoginLogout, market_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordLoginLogout, sub_agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordLoginLogout, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordLoginLogout, sys_model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordLoginLogout, sys_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordLoginLogout, mac_),
  };
  RecordLoginLogout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecordLoginLogout_descriptor_,
      RecordLoginLogout::default_instance_,
      RecordLoginLogout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordLoginLogout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordLoginLogout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecordLoginLogout));
  BackRechargeOrder_descriptor_ = file->message_type(27);
  static const int BackRechargeOrder_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackRechargeOrder, order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackRechargeOrder, order_num_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackRechargeOrder, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackRechargeOrder, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackRechargeOrder, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackRechargeOrder, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackRechargeOrder, tick_),
  };
  BackRechargeOrder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BackRechargeOrder_descriptor_,
      BackRechargeOrder::default_instance_,
      BackRechargeOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackRechargeOrder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackRechargeOrder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BackRechargeOrder));
  ProtoERTimeStage_descriptor_ = file->message_type(28);
  static const int ProtoERTimeStage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoERTimeStage, time_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoERTimeStage, stage_),
  };
  ProtoERTimeStage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoERTimeStage_descriptor_,
      ProtoERTimeStage::default_instance_,
      ProtoERTimeStage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoERTimeStage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoERTimeStage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoERTimeStage));
  ProtoERScriptStageInfo_descriptor_ = file->message_type(29);
  static const int ProtoERScriptStageInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoERScriptStageInfo, timestageset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoERScriptStageInfo, script_sort_),
  };
  ProtoERScriptStageInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoERScriptStageInfo_descriptor_,
      ProtoERScriptStageInfo::default_instance_,
      ProtoERScriptStageInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoERScriptStageInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoERScriptStageInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoERScriptStageInfo));
  ProtoOfflineBeast_descriptor_ = file->message_type(30);
  static const int ProtoOfflineBeast_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoOfflineBeast, beast_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoOfflineBeast, beast_sort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoOfflineBeast, beast_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoOfflineBeast, skill_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoOfflineBeast, prop_set_),
  };
  ProtoOfflineBeast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoOfflineBeast_descriptor_,
      ProtoOfflineBeast::default_instance_,
      ProtoOfflineBeast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoOfflineBeast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoOfflineBeast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoOfflineBeast));
  RecordTask_descriptor_ = file->message_type(31);
  static const int RecordTask_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordTask, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordTask, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordTask, serial_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordTask, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordTask, sub_agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordTask, market_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordTask, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordTask, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordTask, time_),
  };
  RecordTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecordTask_descriptor_,
      RecordTask::default_instance_,
      RecordTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecordTask));
  RecordRank_descriptor_ = file->message_type(32);
  static const int RecordRank_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordRank, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordRank, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordRank, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordRank, rank_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordRank, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordRank, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordRank, ext_int_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordRank, ext_int_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordRank, ext_str_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordRank, vip_),
  };
  RecordRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecordRank_descriptor_,
      RecordRank::default_instance_,
      RecordRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecordRank));
  RecordMail_descriptor_ = file->message_type(33);
  static const int RecordMail_offsets_[28] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMail, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMail, mail_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMail, sender_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMail, receiver_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMail, send_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMail, read_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMail, mail_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMail, has_read_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMail, receiver_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMail, sender_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMail, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMail, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMail, serial_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMail, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMail, sub_agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMail, attach_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMail, attach_copper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMail, attach_id_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMail, attach_amount_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMail, attach_id_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMail, attach_amount_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMail, attach_id_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMail, attach_amount_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMail, attach_id_4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMail, attach_amount_4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMail, attach_bind_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMail, attach_bind_copper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMail, mail_format_),
  };
  RecordMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecordMail_descriptor_,
      RecordMail::default_instance_,
      RecordMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecordMail));
  ProtoOnSaleItem_descriptor_ = file->message_type(34);
  static const int ProtoOnSaleItem_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoOnSaleItem, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoOnSaleItem, item_bind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoOnSaleItem, item_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoOnSaleItem, shop_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoOnSaleItem, money_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoOnSaleItem, src_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoOnSaleItem, cur_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoOnSaleItem, start_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoOnSaleItem, end_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoOnSaleItem, need_item_),
  };
  ProtoOnSaleItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoOnSaleItem_descriptor_,
      ProtoOnSaleItem::default_instance_,
      ProtoOnSaleItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoOnSaleItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoOnSaleItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoOnSaleItem));
  RecordChat_descriptor_ = file->message_type(35);
  static const int RecordChat_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordChat, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordChat, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordChat, serial_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordChat, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordChat, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordChat, sub_agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordChat, server_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordChat, market_),
  };
  RecordChat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecordChat_descriptor_,
      RecordChat::default_instance_,
      RecordChat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordChat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordChat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecordChat));
  ProtoLottery_descriptor_ = file->message_type(36);
  static const int ProtoLottery_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLottery, gold_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLottery, gold_free_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLottery, free_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLottery, total_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLottery, total_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLottery, left_free_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLottery, next_free_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLottery, protect_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLottery, end_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLottery, jane_item_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLottery, wait_award_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLottery, activity_id_),
  };
  ProtoLottery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoLottery_descriptor_,
      ProtoLottery::default_instance_,
      ProtoLottery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLottery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLottery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoLottery));
  ProtoActivityTick_descriptor_ = file->message_type(37);
  static const int ProtoActivityTick_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoActivityTick, activity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoActivityTick, begin_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoActivityTick, end_tick_),
  };
  ProtoActivityTick_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoActivityTick_descriptor_,
      ProtoActivityTick::default_instance_,
      ProtoActivityTick_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoActivityTick, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoActivityTick, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoActivityTick));
  ProtoLotteryWaitAward_descriptor_ = file->message_type(38);
  static const int ProtoLotteryWaitAward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLotteryWaitAward, inc_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLotteryWaitAward, inc_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLotteryWaitAward, award_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLotteryWaitAward, buy_type_),
  };
  ProtoLotteryWaitAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoLotteryWaitAward_descriptor_,
      ProtoLotteryWaitAward::default_instance_,
      ProtoLotteryWaitAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLotteryWaitAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoLotteryWaitAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoLotteryWaitAward));
  ProtoMongoData_descriptor_ = file->message_type(39);
  static const int ProtoMongoData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMongoData, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMongoData, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMongoData, cond_bson_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMongoData, is_insert_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMongoData, data_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMongoData, data_bson_),
  };
  ProtoMongoData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoMongoData_descriptor_,
      ProtoMongoData::default_instance_,
      ProtoMongoData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMongoData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMongoData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoMongoData));
  ProtoActFlower_descriptor_ = file->message_type(40);
  static const int ProtoActFlower_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoActFlower, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoActFlower, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoActFlower, rank_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoActFlower, flower_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoActFlower, carrer_),
  };
  ProtoActFlower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoActFlower_descriptor_,
      ProtoActFlower::default_instance_,
      ProtoActFlower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoActFlower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoActFlower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoActFlower));
  ProtoMount_descriptor_ = file->message_type(41);
  static const int ProtoMount_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMount, mount_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMount, mount_shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMount, on_mount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMount, bless_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMount, fail_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMount, finish_bless_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMount, ability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMount, growth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMount, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMount, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMount, act_shape_),
  };
  ProtoMount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoMount_descriptor_,
      ProtoMount::default_instance_,
      ProtoMount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoMount));
  ProtoScriptType_descriptor_ = file->message_type(42);
  static const int ProtoScriptType_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptType, script_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptType, script_sort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptType, pass_wave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptType, pass_chapter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptType, notify_wave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptType, notify_chapter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptType, is_sweep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptType, used_times_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptType, reward_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptType, start_wave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptType, start_chapter_),
  };
  ProtoScriptType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoScriptType_descriptor_,
      ProtoScriptType::default_instance_,
      ProtoScriptType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoScriptType));
  ProtoScriptFirstAward_descriptor_ = file->message_type(43);
  static const int ProtoScriptFirstAward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptFirstAward, script_wave_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptFirstAward, is_get_),
  };
  ProtoScriptFirstAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoScriptFirstAward_descriptor_,
      ProtoScriptFirstAward::default_instance_,
      ProtoScriptFirstAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptFirstAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoScriptFirstAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoScriptFirstAward));
  RecordMount_descriptor_ = file->message_type(44);
  static const int RecordMount_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMount, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMount, sub_agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMount, serial_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMount, mount_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMount, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMount, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMount, equip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMount, bless_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMount, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMount, table_name_),
  };
  RecordMount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecordMount_descriptor_,
      RecordMount::default_instance_,
      RecordMount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordMount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecordMount));
  RecordActivity_descriptor_ = file->message_type(45);
  static const int RecordActivity_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordActivity, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordActivity, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordActivity, act_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordActivity, total_attend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordActivity, sub1_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordActivity, sub1_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordActivity, sub2_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordActivity, sub2_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordActivity, sub3_),
  };
  RecordActivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecordActivity_descriptor_,
      RecordActivity::default_instance_,
      RecordActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordActivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordActivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecordActivity));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoInnerPublic_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoServerAddress_descriptor_, &ProtoServerAddress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoSyncStatus_descriptor_, &ProtoSyncStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoPackageSet_descriptor_, &ProtoPackageSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoPackage_descriptor_, &ProtoPackage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoLimitGrid_descriptor_, &ProtoLimitGrid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoSerialObj_descriptor_, &ProtoSerialObj::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoProItem_descriptor_, &ProtoProItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoInnerTaskInfo_descriptor_, &ProtoInnerTaskInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoInnerTaskCond_descriptor_, &ProtoInnerTaskCond::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoSignInfo_descriptor_, &ProtoSignInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoFBItem_descriptor_, &ProtoFBItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecordMoney_descriptor_, &RecordMoney::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecordItem_descriptor_, &RecordItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecordEquipment_descriptor_, &RecordEquipment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecordPlayerLevel_descriptor_, &RecordPlayerLevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecordOtherSerial_descriptor_, &RecordOtherSerial::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoScriptRecord_descriptor_, &ProtoScriptRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoLivenessTaskInfo_descriptor_, &ProtoLivenessTaskInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoExpRestoreRecord_descriptor_, &ProtoExpRestoreRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoMagicalPolish_descriptor_, &ProtoMagicalPolish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoPieceInfo_descriptor_, &ProtoPieceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoBrocastNewInfo_descriptor_, &ProtoBrocastNewInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoFashionTips_descriptor_, &ProtoFashionTips::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoPlayerTipSyncInfo_descriptor_, &ProtoPlayerTipSyncInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoSyncLabel_descriptor_, &ProtoSyncLabel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecordOnlineUsers_descriptor_, &RecordOnlineUsers::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecordLoginLogout_descriptor_, &RecordLoginLogout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BackRechargeOrder_descriptor_, &BackRechargeOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoERTimeStage_descriptor_, &ProtoERTimeStage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoERScriptStageInfo_descriptor_, &ProtoERScriptStageInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoOfflineBeast_descriptor_, &ProtoOfflineBeast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecordTask_descriptor_, &RecordTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecordRank_descriptor_, &RecordRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecordMail_descriptor_, &RecordMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoOnSaleItem_descriptor_, &ProtoOnSaleItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecordChat_descriptor_, &RecordChat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoLottery_descriptor_, &ProtoLottery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoActivityTick_descriptor_, &ProtoActivityTick::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoLotteryWaitAward_descriptor_, &ProtoLotteryWaitAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoMongoData_descriptor_, &ProtoMongoData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoActFlower_descriptor_, &ProtoActFlower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoMount_descriptor_, &ProtoMount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoScriptType_descriptor_, &ProtoScriptType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoScriptFirstAward_descriptor_, &ProtoScriptFirstAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecordMount_descriptor_, &RecordMount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecordActivity_descriptor_, &RecordActivity::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoInnerPublic_2eproto() {
  delete ProtoServerAddress::default_instance_;
  delete ProtoServerAddress_reflection_;
  delete ProtoSyncStatus::default_instance_;
  delete ProtoSyncStatus_reflection_;
  delete ProtoPackageSet::default_instance_;
  delete ProtoPackageSet_reflection_;
  delete ProtoPackage::default_instance_;
  delete ProtoPackage_reflection_;
  delete ProtoLimitGrid::default_instance_;
  delete ProtoLimitGrid_reflection_;
  delete ProtoSerialObj::default_instance_;
  delete ProtoSerialObj_reflection_;
  delete ProtoProItem::default_instance_;
  delete ProtoProItem_reflection_;
  delete ProtoInnerTaskInfo::default_instance_;
  delete ProtoInnerTaskInfo_reflection_;
  delete ProtoInnerTaskCond::default_instance_;
  delete ProtoInnerTaskCond_reflection_;
  delete ProtoSignInfo::default_instance_;
  delete ProtoSignInfo_reflection_;
  delete ProtoFBItem::default_instance_;
  delete ProtoFBItem_reflection_;
  delete RecordMoney::default_instance_;
  delete RecordMoney_reflection_;
  delete RecordItem::default_instance_;
  delete RecordItem_reflection_;
  delete RecordEquipment::default_instance_;
  delete RecordEquipment_reflection_;
  delete RecordPlayerLevel::default_instance_;
  delete RecordPlayerLevel_reflection_;
  delete RecordOtherSerial::default_instance_;
  delete RecordOtherSerial_reflection_;
  delete ProtoScriptRecord::default_instance_;
  delete ProtoScriptRecord_reflection_;
  delete ProtoLivenessTaskInfo::default_instance_;
  delete ProtoLivenessTaskInfo_reflection_;
  delete ProtoExpRestoreRecord::default_instance_;
  delete ProtoExpRestoreRecord_reflection_;
  delete ProtoMagicalPolish::default_instance_;
  delete ProtoMagicalPolish_reflection_;
  delete ProtoPieceInfo::default_instance_;
  delete ProtoPieceInfo_reflection_;
  delete ProtoBrocastNewInfo::default_instance_;
  delete ProtoBrocastNewInfo_reflection_;
  delete ProtoFashionTips::default_instance_;
  delete ProtoFashionTips_reflection_;
  delete ProtoPlayerTipSyncInfo::default_instance_;
  delete ProtoPlayerTipSyncInfo_reflection_;
  delete ProtoSyncLabel::default_instance_;
  delete ProtoSyncLabel_reflection_;
  delete RecordOnlineUsers::default_instance_;
  delete RecordOnlineUsers_reflection_;
  delete RecordLoginLogout::default_instance_;
  delete RecordLoginLogout_reflection_;
  delete BackRechargeOrder::default_instance_;
  delete BackRechargeOrder_reflection_;
  delete ProtoERTimeStage::default_instance_;
  delete ProtoERTimeStage_reflection_;
  delete ProtoERScriptStageInfo::default_instance_;
  delete ProtoERScriptStageInfo_reflection_;
  delete ProtoOfflineBeast::default_instance_;
  delete ProtoOfflineBeast_reflection_;
  delete RecordTask::default_instance_;
  delete RecordTask_reflection_;
  delete RecordRank::default_instance_;
  delete RecordRank_reflection_;
  delete RecordMail::default_instance_;
  delete RecordMail_reflection_;
  delete ProtoOnSaleItem::default_instance_;
  delete ProtoOnSaleItem_reflection_;
  delete RecordChat::default_instance_;
  delete RecordChat_reflection_;
  delete ProtoLottery::default_instance_;
  delete ProtoLottery_reflection_;
  delete ProtoActivityTick::default_instance_;
  delete ProtoActivityTick_reflection_;
  delete ProtoLotteryWaitAward::default_instance_;
  delete ProtoLotteryWaitAward_reflection_;
  delete ProtoMongoData::default_instance_;
  delete ProtoMongoData_reflection_;
  delete ProtoActFlower::default_instance_;
  delete ProtoActFlower_reflection_;
  delete ProtoMount::default_instance_;
  delete ProtoMount_reflection_;
  delete ProtoScriptType::default_instance_;
  delete ProtoScriptType_reflection_;
  delete ProtoScriptFirstAward::default_instance_;
  delete ProtoScriptFirstAward_reflection_;
  delete RecordMount::default_instance_;
  delete RecordMount_reflection_;
  delete RecordActivity::default_instance_;
  delete RecordActivity_reflection_;
}

void protobuf_AddDesc_ProtoInnerPublic_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_ProtoPublic_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026ProtoInnerPublic.proto\032\021ProtoPublic.pr"
    "oto\"\200\001\n\022ProtoServerAddress\022\023\n\013server_nam"
    "e\030\001 \001(\t\022\017\n\007session\030\002 \001(\t\022\017\n\007auth_ip\030\003 \001("
    "\t\022\021\n\tauth_port\030\004 \001(\005\022\021\n\trole_name\030\005 \001(\t\022"
    "\r\n\005level\030\006 \001(\005\"\371\002\n\017ProtoSyncStatus\022\016\n\006st"
    "atus\030\001 \001(\005\022\023\n\013view_status\030\002 \001(\005\022\r\n\005view1"
    "\030\003 \001(\001\022\r\n\005view2\030\004 \001(\001\022\r\n\005view3\030\005 \001(\001\022\016\n\006"
    "value1\030\006 \001(\001\022\016\n\006value2\030\007 \001(\001\022\016\n\006value3\030\010"
    " \001(\001\022\016\n\006value4\030\t \001(\001\022\016\n\006value5\030\n \001(\001\022\021\n\t"
    "check_sec\030\013 \001(\003\022\022\n\ncheck_usec\030\014 \001(\003\022\024\n\014i"
    "nterval_sec\030\r \001(\003\022\025\n\rinterval_usec\030\016 \001(\003"
    "\022\020\n\010last_sec\030\017 \001(\003\022\021\n\tlast_usec\030\020 \001(\003\022\020\n"
    "\010skill_id\030\021 \001(\005\022\023\n\013skill_level\030\022 \001(\005\022\020\n\010"
    "attacker\030\023 \001(\005\022\022\n\naccumulate\030\024 \001(\005\"\364\001\n\017P"
    "rotoPackageSet\022\032\n\005money\030\001 \001(\0132\013.ProtoMon"
    "ey\022#\n\014package_list\030\002 \003(\0132\r.ProtoPackage\022"
    "\036\n\tmoney_use\030\003 \001(\0132\013.ProtoMoney\022\033\n\023recha"
    "rge_first_tick\030\004 \001(\003\022\025\n\rrecharge_gold\030\005 "
    "\001(\003\022#\n\014resource_map\030\006 \003(\0132\r.ProtoPairObj"
    "\022\'\n\020use_resource_map\030\007 \001(\0132\r.ProtoPairMa"
    "p\"\274\001\n\014ProtoPackage\022\021\n\tpack_type\030\001 \001(\005\022\021\n"
    "\tpack_size\030\002 \001(\005\022\026\n\016last_open_tick\030\003 \001(\005"
    "\022\035\n\titem_list\030\004 \003(\0132\n.ProtoItem\022\037\n\010grid_"
    "vec\030\005 \003(\0132\r.ProtoPairObj\022\027\n\017is_open_subl"
    "ime\030\006 \001(\005\022\025\n\rsublime_level\030\007 \001(\005\"2\n\016Prot"
    "oLimitGrid\022\r\n\005index\030\001 \001(\005\022\021\n\tleft_tick\030\002"
    " \001(\005\"M\n\016ProtoSerialObj\022\023\n\013serial_type\030\001 "
    "\001(\005\022\020\n\010sub_type\030\002 \001(\005\022\024\n\014serial_value\030\003 "
    "\001(\005\"\?\n\014ProtoProItem\022\016\n\006offset\030\001 \001(\005\022\037\n\010p"
    "ro_pair\030\002 \001(\0132\r.ProtoPairObj\"\336\002\n\022ProtoIn"
    "nerTaskInfo\022\017\n\007task_id\030\001 \001(\005\022\021\n\tgame_typ"
    "e\030\002 \001(\005\022\027\n\017accept_tick_sec\030\003 \001(\003\022\030\n\020acce"
    "pt_tick_usec\030\004 \001(\003\022\030\n\020refresh_tick_sec\030\005"
    " \001(\003\022\031\n\021refresh_tick_usec\030\006 \001(\003\022+\n\016task_"
    "cond_list\030\007 \003(\0132\023.ProtoInnerTaskCond\022\021\n\t"
    "prev_task\030\010 \001(\005\022\021\n\tpost_task\030\t \001(\005\022\016\n\006st"
    "atus\030\n \001(\004\022\022\n\nlogic_type\030\013 \001(\004\022\021\n\ttask_s"
    "tar\030\014 \001(\005\022\030\n\020fast_finish_rate\030\r \001(\005\022\030\n\020f"
    "resh_star_times\030\016 \001(\005\"\262\001\n\022ProtoInnerTask"
    "Cond\022\014\n\004type\030\001 \001(\005\022\025\n\rcurrent_value\030\002 \001("
    "\005\022\022\n\ncond_index\030\003 \001(\005\022\025\n\rid_list_index\030\004"
    " \001(\005\022\017\n\007cond_id\030\005 \001(\005\022\023\n\013final_value\030\006 \001"
    "(\005\022\021\n\tkill_type\030\007 \001(\005\022\023\n\013range_level\030\010 \001"
    "(\005\"\203\001\n\rProtoSignInfo\022\021\n\tsign_type\030\001 \001(\005\022"
    "\022\n\ntype_index\030\002 \001(\003\022\021\n\trole_name\030\003 \001(\t\022\020"
    "\n\010type_lvl\030\004 \001(\005\022\022\n\ntype_force\030\005 \001(\005\022\022\n\n"
    "type_count\030\006 \001(\005\"G\n\013ProtoFBItem\022\r\n\005fb_id"
    "\030\001 \001(\005\022\024\n\014finish_times\030\002 \001(\005\022\023\n\013total_ti"
    "mes\030\003 \001(\005\"\213\002\n\013RecordMoney\022\022\n\ntable_name\030"
    "\001 \001(\t\022\017\n\007role_id\030\002 \001(\003\022\023\n\013serial_type\030\003 "
    "\001(\005\022\027\n\017sub_serial_type\030\004 \001(\005\022\021\n\tsub_agen"
    "t\030\005 \001(\005\022\022\n\nmoney_type\030\006 \001(\005\022\r\n\005money\030\007 \001"
    "(\005\022\022\n\nbind_money\030\010 \001(\005\022\024\n\014remain_money\030\t"
    " \001(\005\022\031\n\021remain_bind_money\030\n \001(\005\022\014\n\004time\030"
    "\013 \001(\005\022\020\n\010platform\030\014 \001(\005\022\016\n\006market\030\r \001(\005\""
    "\372\001\n\nRecordItem\022\022\n\ntable_name\030\001 \001(\t\022\017\n\007ro"
    "le_id\030\002 \001(\003\022\023\n\013serial_type\030\003 \001(\005\022\027\n\017sub_"
    "serial_type\030\004 \001(\005\022\021\n\tsub_agent\030\005 \001(\005\022\017\n\007"
    "item_id\030\006 \001(\005\022\016\n\006amount\030\007 \001(\005\022\014\n\004bind\030\010 "
    "\001(\005\022\014\n\004time\030\t \001(\005\022\020\n\010platform\030\n \001(\005\022\016\n\006m"
    "arket\030\013 \001(\005\022\023\n\013src_role_id\030\014 \001(\003\022\022\n\nrole"
    "_level\030\r \001(\005\"\371\002\n\017RecordEquipment\022\022\n\ntabl"
    "e_name\030\001 \001(\t\022\017\n\007role_id\030\002 \001(\003\022\023\n\013serial_"
    "type\030\003 \001(\005\022\021\n\tsub_agent\030\004 \001(\005\022\020\n\010equip_i"
    "d\030\005 \001(\005\022\016\n\006amount\030\006 \001(\005\022\014\n\004time\030\007 \001(\005\022\014\n"
    "\004bind\030\010 \001(\005\022\r\n\005index\030\t \001(\005\022\021\n\tpack_type\030"
    "\n \001(\005\022\024\n\014refine_level\030\013 \001(\005\022\025\n\rrefine_de"
    "gree\030\014 \001(\005\022\027\n\017serial_sub_type\030\r \001(\005\022\020\n\010p"
    "latform\030\016 \001(\005\022\022\n\nluck_value\030\017 \001(\005\022\023\n\013jew"
    "el_lists\030\020 \001(\t\022\022\n\ncur_polish\030\021 \001(\t\022\023\n\013ex"
    "tern_attr\030\022 \001(\t\022\017\n\007molding\030\023 \001(\t\"\217\001\n\021Rec"
    "ordPlayerLevel\022\022\n\ntable_name\030\001 \001(\t\022\017\n\007ro"
    "le_id\030\002 \001(\003\022\023\n\013serial_type\030\003 \001(\005\022\021\n\tsub_"
    "agent\030\004 \001(\005\022\r\n\005level\030\005 \001(\005\022\014\n\004time\030\006 \001(\005"
    "\022\020\n\010platform\030\007 \001(\005\"\304\001\n\021RecordOtherSerial"
    "\022\022\n\ntable_name\030\001 \001(\t\022\017\n\007role_id\030\002 \001(\003\022\023\n"
    "\013serial_type\030\003 \001(\005\022\027\n\017sub_serial_type\030\004 "
    "\001(\005\022\021\n\tsub_agent\030\005 \001(\005\022\r\n\005value\030\006 \001(\003\022\014\n"
    "\004ext1\030\007 \001(\003\022\014\n\004ext2\030\010 \001(\003\022\014\n\004time\030\t \001(\005\022"
    "\020\n\010platform\030\n \001(\005\"\261\002\n\021ProtoScriptRecord\022"
    "\023\n\013script_sort\030\001 \001(\005\022\022\n\nused_times\030\002 \001(\005"
    "\022\027\n\017used_times_tick\030\003 \001(\005\022\031\n\021enter_scrip"
    "t_tick\030\004 \001(\005\022\023\n\013progress_id\030\005 \001(\003\022\025\n\rbes"
    "t_use_tick\030\006 \001(\005\022\025\n\ris_first_pass\030\007 \001(\005\022"
    "\026\n\016buy_left_times\030\010 \001(\005\022\030\n\020couple_buy_ti"
    "mes\030\t \001(\005\022\026\n\016day_pass_times\030\n \001(\005\022\025\n\ris_"
    "even_enter\030\013 \001(\005\022\033\n\023protect_beast_index\030"
    "\014 \001(\005\"m\n\025ProtoLivenessTaskInfo\022\017\n\007task_i"
    "d\030\001 \001(\005\022\016\n\006status\030\002 \001(\005\022\022\n\ntime_index\030\003 "
    "\001(\005\022\013\n\003num\030\004 \001(\005\022\022\n\nfinish_num\030\005 \001(\005\"O\n\025"
    "ProtoExpRestoreRecord\022\n\n\002id\030\001 \001(\005\022\014\n\004dat"
    "e\030\002 \001(\005\022\r\n\005count\030\003 \001(\005\022\r\n\005valid\030\004 \001(\010\"\237\001"
    "\n\022ProtoMagicalPolish\022\022\n\nmagical_id\030\001 \001(\005"
    "\022\"\n\007cur_use\030\002 \001(\0132\021.ProtoMagicalInfo\022(\n\r"
    "single_record\030\003 \001(\0132\021.ProtoMagicalInfo\022\'"
    "\n\014batch_record\030\004 \003(\0132\021.ProtoMagicalInfo\""
    "\253\001\n\016ProtoPieceInfo\022\023\n\013chapter_key\030\001 \001(\005\022"
    "\020\n\010used_sec\030\002 \001(\005\022\022\n\nused_times\030\003 \001(\005\022\022\n"
    "\naward_flag\030\004 \001(\005\022\027\n\017chapter_item_id\030\005 \003"
    "(\005\022\030\n\020chapter_item_num\030\006 \003(\005\022\027\n\017today_pa"
    "ss_flag\030\007 \001(\005\"\235\001\n\023ProtoBrocastNewInfo\022\020\n"
    "\010shout_id\030\001 \001(\005\022\020\n\010group_id\030\002 \001(\003\022\024\n\014cha"
    "nnel_type\030\003 \001(\005\022,\n\021shout_detail_list\030\004 \003"
    "(\0132\021.ProtoShoutDetail\022\020\n\010scene_id\030\005 \001(\005\022"
    "\014\n\004role\030\006 \001(\003\"c\n\020ProtoFashionTips\022\022\n\nfas"
    "hion_id\030\001 \001(\005\022\025\n\rfashion_force\030\002 \001(\005\022\020\n\010"
    "left_sec\030\003 \001(\005\022\022\n\nmartial_id\030\004 \001(\005\"@\n\026Pr"
    "otoPlayerTipSyncInfo\022\020\n\010event_id\030\001 \001(\005\022\024"
    "\n\014arena_reward\030\002 \001(\005\"7\n\016ProtoSyncLabel\022\020"
    "\n\010label_id\030\001 \001(\005\022\023\n\013expire_tick\030\002 \001(\003\"\220\001"
    "\n\021RecordOnlineUsers\022\022\n\ntable_name\030\001 \001(\t\022"
    "\021\n\tsub_agent\030\002 \001(\005\022\020\n\010platform\030\003 \001(\005\022\016\n\006"
    "market\030\004 \001(\005\022\r\n\005users\030\005 \001(\005\022\025\n\rhooking_u"
    "sers\030\006 \001(\005\022\014\n\004time\030\007 \001(\005\"\246\002\n\021RecordLogin"
    "Logout\022\022\n\ntable_name\030\001 \001(\t\022\017\n\007role_id\030\002 "
    "\001(\003\022\021\n\trole_name\030\003 \001(\t\022\r\n\005level\030\004 \001(\005\022\017\n"
    "\007account\030\005 \001(\t\022\021\n\tclient_ip\030\006 \001(\t\022\022\n\nlog"
    "in_time\030\007 \001(\005\022\023\n\013logout_time\030\010 \001(\005\022\023\n\013on"
    "line_time\030\t \001(\005\022\016\n\006market\030\n \001(\005\022\021\n\tsub_a"
    "gent\030\013 \001(\005\022\020\n\010platform\030\014 \001(\005\022\021\n\tsys_mode"
    "l\030\r \001(\t\022\023\n\013sys_version\030\016 \001(\t\022\013\n\003mac\030\017 \001("
    "\t\"\214\001\n\021BackRechargeOrder\022\020\n\010order_id\030\001 \001("
    "\005\022\025\n\rorder_num_str\030\002 \001(\t\022\022\n\nchannel_id\030\003"
    " \001(\005\022\r\n\005money\030\004 \001(\005\022\014\n\004gold\030\005 \001(\005\022\017\n\007acc"
    "ount\030\006 \001(\t\022\014\n\004tick\030\007 \001(\003\"3\n\020ProtoERTimeS"
    "tage\022\020\n\010time_sec\030\001 \001(\003\022\r\n\005stage\030\002 \001(\005\"V\n"
    "\026ProtoERScriptStageInfo\022\'\n\014TimeStageSet\030"
    "\001 \003(\0132\021.ProtoERTimeStage\022\023\n\013script_sort\030"
    "\002 \001(\005\"\220\001\n\021ProtoOfflineBeast\022\020\n\010beast_id\030"
    "\001 \001(\003\022\022\n\nbeast_sort\030\002 \001(\005\022\022\n\nbeast_name\030"
    "\003 \001(\t\022 \n\tskill_set\030\004 \003(\0132\r.ProtoPairObj\022"
    "\037\n\010prop_set\030\005 \003(\0132\r.ProtoPairObj\"\251\001\n\nRec"
    "ordTask\022\022\n\ntable_name\030\001 \001(\t\022\017\n\007role_id\030\002"
    " \001(\003\022\023\n\013serial_type\030\003 \001(\005\022\020\n\010platform\030\004 "
    "\001(\005\022\021\n\tsub_agent\030\005 \001(\005\022\016\n\006market\030\006 \001(\005\022\017"
    "\n\007task_id\030\007 \001(\005\022\r\n\005level\030\010 \001(\005\022\014\n\004time\030\t"
    " \001(\005\"\272\001\n\nRecordRank\022\022\n\ntable_name\030\001 \001(\t\022"
    "\017\n\007role_id\030\002 \001(\003\022\021\n\trole_name\030\003 \001(\t\022\021\n\tr"
    "ank_type\030\004 \001(\005\022\r\n\005value\030\005 \001(\005\022\014\n\004time\030\006 "
    "\001(\005\022\021\n\text_int_1\030\007 \001(\003\022\021\n\text_int_2\030\010 \001("
    "\003\022\021\n\text_str_1\030\t \001(\t\022\013\n\003vip\030\n \001(\005\"\334\004\n\nRe"
    "cordMail\022\022\n\ntable_name\030\001 \001(\t\022\022\n\nmail_ind"
    "ex\030\002 \001(\003\022\021\n\tsender_id\030\003 \001(\003\022\023\n\013receiver_"
    "id\030\004 \001(\003\022\021\n\tsend_tick\030\005 \001(\003\022\021\n\tread_tick"
    "\030\006 \001(\003\022\021\n\tmail_type\030\007 \001(\005\022\020\n\010has_read\030\010 "
    "\001(\005\022\025\n\rreceiver_name\030\t \001(\t\022\023\n\013sender_nam"
    "e\030\n \001(\t\022\r\n\005title\030\013 \001(\t\022\017\n\007content\030\014 \001(\t\022"
    "\023\n\013serial_type\030\r \001(\005\022\020\n\010platform\030\016 \001(\005\022\021"
    "\n\tsub_agent\030\017 \001(\005\022\023\n\013attach_gold\030\020 \001(\005\022\025"
    "\n\rattach_copper\030\021 \001(\005\022\023\n\013attach_id_1\030\022 \001"
    "(\005\022\027\n\017attach_amount_1\030\023 \001(\005\022\023\n\013attach_id"
    "_2\030\024 \001(\005\022\027\n\017attach_amount_2\030\025 \001(\005\022\023\n\013att"
    "ach_id_3\030\026 \001(\005\022\027\n\017attach_amount_3\030\027 \001(\005\022"
    "\023\n\013attach_id_4\030\030 \001(\005\022\027\n\017attach_amount_4\030"
    "\031 \001(\005\022\030\n\020attach_bind_gold\030\032 \001(\005\022\032\n\022attac"
    "h_bind_copper\030\033 \001(\005\022\023\n\013mail_format\030\034 \001(\005"
    "\"\335\001\n\017ProtoOnSaleItem\022\017\n\007item_id\030\001 \001(\005\022\021\n"
    "\titem_bind\030\002 \001(\005\022\021\n\titem_type\030\003 \003(\005\022\021\n\ts"
    "hop_type\030\004 \001(\005\022\022\n\nmoney_type\030\005 \001(\005\022\021\n\tsr"
    "c_price\030\006 \001(\005\022\021\n\tcur_price\030\007 \001(\005\022\022\n\nstar"
    "t_tick\030\010 \001(\005\022\020\n\010end_tick\030\t \001(\005\022 \n\tneed_i"
    "tem\030\n \001(\0132\r.ProtoPairObj\"\235\001\n\nRecordChat\022"
    "\022\n\ntable_name\030\001 \001(\t\022\017\n\007role_id\030\002 \001(\003\022\023\n\013"
    "serial_type\030\003 \001(\005\022\014\n\004time\030\004 \001(\005\022\017\n\007conte"
    "nt\030\005 \001(\t\022\021\n\tsub_agent\030\006 \001(\005\022\023\n\013server_fl"
    "ag\030\007 \001(\t\022\016\n\006market\030\010 \001(\005\"\255\002\n\014ProtoLotter"
    "y\022\022\n\ngold_times\030\001 \001(\005\022\027\n\017gold_free_times"
    "\030\002 \001(\005\022\022\n\nfree_times\030\003 \001(\005\022\023\n\013total_scor"
    "e\030\004 \001(\005\022\022\n\ntotal_gold\030\005 \001(\005\022\025\n\rleft_free"
    "_sec\030\006 \001(\005\022\026\n\016next_free_tick\030\007 \001(\005\022\024\n\014pr"
    "otect_gold\030\010 \001(\005\022\020\n\010end_tick\030\t \001(\005\022\026\n\016ja"
    "ne_item_list\030\n \003(\005\022/\n\017wait_award_list\030\013 "
    "\003(\0132\026.ProtoLotteryWaitAward\022\023\n\013activity_"
    "id\030\014 \001(\005\"N\n\021ProtoActivityTick\022\023\n\013activit"
    "y_id\030\001 \001(\005\022\022\n\nbegin_tick\030\002 \001(\005\022\020\n\010end_ti"
    "ck\030\003 \001(\005\"n\n\025ProtoLotteryWaitAward\022\020\n\010inc"
    "_gold\030\001 \001(\005\022\021\n\tinc_score\030\002 \001(\005\022\036\n\naward_"
    "item\030\003 \001(\0132\n.ProtoItem\022\020\n\010buy_type\030\004 \001(\005"
    "\"\201\001\n\016ProtoMongoData\022\017\n\007op_type\030\001 \001(\005\022\022\n\n"
    "table_name\030\002 \001(\t\022\021\n\tcond_bson\030\003 \001(\t\022\021\n\ti"
    "s_insert\030\004 \001(\005\022\021\n\tdata_type\030\005 \001(\005\022\021\n\tdat"
    "a_bson\030\006 \001(\t\"g\n\016ProtoActFlower\022\017\n\007role_i"
    "d\030\001 \001(\003\022\014\n\004name\030\002 \001(\t\022\022\n\nrank_index\030\003 \001("
    "\005\022\022\n\nflower_num\030\004 \001(\005\022\016\n\006carrer\030\005 \001(\005\"\341\001"
    "\n\nProtoMount\022\023\n\013mount_grade\030\001 \001(\005\022\023\n\013mou"
    "nt_shape\030\002 \001(\005\022\020\n\010on_mount\030\003 \001(\005\022\r\n\005bles"
    "s\030\004 \001(\005\022\022\n\nfail_times\030\005 \001(\005\022\024\n\014finish_bl"
    "ess\030\006 \001(\003\022\017\n\007ability\030\007 \001(\005\022\016\n\006growth\030\010 \001"
    "(\005\022\034\n\005skill\030\t \003(\0132\r.ProtoPairObj\022\014\n\004open"
    "\030\n \001(\005\022\021\n\tact_shape\030\013 \001(\005\"\212\002\n\017ProtoScrip"
    "tType\022\023\n\013script_type\030\001 \001(\005\022\023\n\013script_sor"
    "t\030\002 \003(\005\022\021\n\tpass_wave\030\003 \001(\005\022\024\n\014pass_chapt"
    "er\030\004 \001(\005\022\023\n\013notify_wave\030\005 \001(\005\022\026\n\016notify_"
    "chapter\030\006 \001(\005\022\020\n\010is_sweep\030\007 \001(\005\022\027\n\017used_"
    "times_tick\030\010 \001(\005\022!\n\nreward_map\030\t \003(\0132\r.P"
    "rotoPairObj\022\022\n\nstart_wave\030\n \001(\005\022\025\n\rstart"
    "_chapter\030\013 \001(\005\"\?\n\025ProtoScriptFirstAward\022"
    "\026\n\016script_wave_id\030\001 \001(\005\022\016\n\006is_get\030\002 \001(\005\""
    "\270\001\n\013RecordMount\022\017\n\007role_id\030\001 \001(\003\022\021\n\tsub_"
    "agent\030\002 \001(\005\022\023\n\013serial_type\030\003 \001(\005\022\022\n\nmoun"
    "t_type\030\004 \001(\005\022\r\n\005grade\030\005 \001(\005\022\r\n\005skill\030\006 \001"
    "(\t\022\r\n\005equip\030\007 \001(\t\022\r\n\005bless\030\010 \001(\005\022\014\n\004time"
    "\030\t \001(\003\022\022\n\ntable_name\030\n \001(\t\"\264\001\n\016RecordAct"
    "ivity\022\022\n\ntable_name\030\001 \001(\t\022\014\n\004time\030\002 \001(\003\022"
    "\020\n\010act_type\030\003 \001(\005\022\024\n\014total_attend\030\004 \001(\005\022"
    "\020\n\010sub1_key\030\005 \001(\005\022\022\n\nsub1_value\030\006 \001(\005\022\020\n"
    "\010sub2_key\030\007 \001(\005\022\022\n\nsub2_value\030\010 \001(\005\022\014\n\004s"
    "ub3\030\t \001(\t", 8289);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoInnerPublic.proto", &protobuf_RegisterTypes);
  ProtoServerAddress::default_instance_ = new ProtoServerAddress();
  ProtoSyncStatus::default_instance_ = new ProtoSyncStatus();
  ProtoPackageSet::default_instance_ = new ProtoPackageSet();
  ProtoPackage::default_instance_ = new ProtoPackage();
  ProtoLimitGrid::default_instance_ = new ProtoLimitGrid();
  ProtoSerialObj::default_instance_ = new ProtoSerialObj();
  ProtoProItem::default_instance_ = new ProtoProItem();
  ProtoInnerTaskInfo::default_instance_ = new ProtoInnerTaskInfo();
  ProtoInnerTaskCond::default_instance_ = new ProtoInnerTaskCond();
  ProtoSignInfo::default_instance_ = new ProtoSignInfo();
  ProtoFBItem::default_instance_ = new ProtoFBItem();
  RecordMoney::default_instance_ = new RecordMoney();
  RecordItem::default_instance_ = new RecordItem();
  RecordEquipment::default_instance_ = new RecordEquipment();
  RecordPlayerLevel::default_instance_ = new RecordPlayerLevel();
  RecordOtherSerial::default_instance_ = new RecordOtherSerial();
  ProtoScriptRecord::default_instance_ = new ProtoScriptRecord();
  ProtoLivenessTaskInfo::default_instance_ = new ProtoLivenessTaskInfo();
  ProtoExpRestoreRecord::default_instance_ = new ProtoExpRestoreRecord();
  ProtoMagicalPolish::default_instance_ = new ProtoMagicalPolish();
  ProtoPieceInfo::default_instance_ = new ProtoPieceInfo();
  ProtoBrocastNewInfo::default_instance_ = new ProtoBrocastNewInfo();
  ProtoFashionTips::default_instance_ = new ProtoFashionTips();
  ProtoPlayerTipSyncInfo::default_instance_ = new ProtoPlayerTipSyncInfo();
  ProtoSyncLabel::default_instance_ = new ProtoSyncLabel();
  RecordOnlineUsers::default_instance_ = new RecordOnlineUsers();
  RecordLoginLogout::default_instance_ = new RecordLoginLogout();
  BackRechargeOrder::default_instance_ = new BackRechargeOrder();
  ProtoERTimeStage::default_instance_ = new ProtoERTimeStage();
  ProtoERScriptStageInfo::default_instance_ = new ProtoERScriptStageInfo();
  ProtoOfflineBeast::default_instance_ = new ProtoOfflineBeast();
  RecordTask::default_instance_ = new RecordTask();
  RecordRank::default_instance_ = new RecordRank();
  RecordMail::default_instance_ = new RecordMail();
  ProtoOnSaleItem::default_instance_ = new ProtoOnSaleItem();
  RecordChat::default_instance_ = new RecordChat();
  ProtoLottery::default_instance_ = new ProtoLottery();
  ProtoActivityTick::default_instance_ = new ProtoActivityTick();
  ProtoLotteryWaitAward::default_instance_ = new ProtoLotteryWaitAward();
  ProtoMongoData::default_instance_ = new ProtoMongoData();
  ProtoActFlower::default_instance_ = new ProtoActFlower();
  ProtoMount::default_instance_ = new ProtoMount();
  ProtoScriptType::default_instance_ = new ProtoScriptType();
  ProtoScriptFirstAward::default_instance_ = new ProtoScriptFirstAward();
  RecordMount::default_instance_ = new RecordMount();
  RecordActivity::default_instance_ = new RecordActivity();
  ProtoServerAddress::default_instance_->InitAsDefaultInstance();
  ProtoSyncStatus::default_instance_->InitAsDefaultInstance();
  ProtoPackageSet::default_instance_->InitAsDefaultInstance();
  ProtoPackage::default_instance_->InitAsDefaultInstance();
  ProtoLimitGrid::default_instance_->InitAsDefaultInstance();
  ProtoSerialObj::default_instance_->InitAsDefaultInstance();
  ProtoProItem::default_instance_->InitAsDefaultInstance();
  ProtoInnerTaskInfo::default_instance_->InitAsDefaultInstance();
  ProtoInnerTaskCond::default_instance_->InitAsDefaultInstance();
  ProtoSignInfo::default_instance_->InitAsDefaultInstance();
  ProtoFBItem::default_instance_->InitAsDefaultInstance();
  RecordMoney::default_instance_->InitAsDefaultInstance();
  RecordItem::default_instance_->InitAsDefaultInstance();
  RecordEquipment::default_instance_->InitAsDefaultInstance();
  RecordPlayerLevel::default_instance_->InitAsDefaultInstance();
  RecordOtherSerial::default_instance_->InitAsDefaultInstance();
  ProtoScriptRecord::default_instance_->InitAsDefaultInstance();
  ProtoLivenessTaskInfo::default_instance_->InitAsDefaultInstance();
  ProtoExpRestoreRecord::default_instance_->InitAsDefaultInstance();
  ProtoMagicalPolish::default_instance_->InitAsDefaultInstance();
  ProtoPieceInfo::default_instance_->InitAsDefaultInstance();
  ProtoBrocastNewInfo::default_instance_->InitAsDefaultInstance();
  ProtoFashionTips::default_instance_->InitAsDefaultInstance();
  ProtoPlayerTipSyncInfo::default_instance_->InitAsDefaultInstance();
  ProtoSyncLabel::default_instance_->InitAsDefaultInstance();
  RecordOnlineUsers::default_instance_->InitAsDefaultInstance();
  RecordLoginLogout::default_instance_->InitAsDefaultInstance();
  BackRechargeOrder::default_instance_->InitAsDefaultInstance();
  ProtoERTimeStage::default_instance_->InitAsDefaultInstance();
  ProtoERScriptStageInfo::default_instance_->InitAsDefaultInstance();
  ProtoOfflineBeast::default_instance_->InitAsDefaultInstance();
  RecordTask::default_instance_->InitAsDefaultInstance();
  RecordRank::default_instance_->InitAsDefaultInstance();
  RecordMail::default_instance_->InitAsDefaultInstance();
  ProtoOnSaleItem::default_instance_->InitAsDefaultInstance();
  RecordChat::default_instance_->InitAsDefaultInstance();
  ProtoLottery::default_instance_->InitAsDefaultInstance();
  ProtoActivityTick::default_instance_->InitAsDefaultInstance();
  ProtoLotteryWaitAward::default_instance_->InitAsDefaultInstance();
  ProtoMongoData::default_instance_->InitAsDefaultInstance();
  ProtoActFlower::default_instance_->InitAsDefaultInstance();
  ProtoMount::default_instance_->InitAsDefaultInstance();
  ProtoScriptType::default_instance_->InitAsDefaultInstance();
  ProtoScriptFirstAward::default_instance_->InitAsDefaultInstance();
  RecordMount::default_instance_->InitAsDefaultInstance();
  RecordActivity::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoInnerPublic_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoInnerPublic_2eproto {
  StaticDescriptorInitializer_ProtoInnerPublic_2eproto() {
    protobuf_AddDesc_ProtoInnerPublic_2eproto();
  }
} static_descriptor_initializer_ProtoInnerPublic_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ProtoServerAddress::kServerNameFieldNumber;
const int ProtoServerAddress::kSessionFieldNumber;
const int ProtoServerAddress::kAuthIpFieldNumber;
const int ProtoServerAddress::kAuthPortFieldNumber;
const int ProtoServerAddress::kRoleNameFieldNumber;
const int ProtoServerAddress::kLevelFieldNumber;
#endif  // !_MSC_VER

ProtoServerAddress::ProtoServerAddress()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoServerAddress::InitAsDefaultInstance() {
}

ProtoServerAddress::ProtoServerAddress(const ProtoServerAddress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoServerAddress::SharedCtor() {
  _cached_size_ = 0;
  server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  session_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  auth_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  auth_port_ = 0;
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoServerAddress::~ProtoServerAddress() {
  SharedDtor();
}

void ProtoServerAddress::SharedDtor() {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (session_ != &::google::protobuf::internal::kEmptyString) {
    delete session_;
  }
  if (auth_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete auth_ip_;
  }
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoServerAddress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoServerAddress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoServerAddress_descriptor_;
}

const ProtoServerAddress& ProtoServerAddress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInnerPublic_2eproto();  return *default_instance_;
}

ProtoServerAddress* ProtoServerAddress::default_instance_ = NULL;

ProtoServerAddress* ProtoServerAddress::New() const {
  return new ProtoServerAddress;
}

void ProtoServerAddress::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_server_name()) {
      if (server_name_ != &::google::protobuf::internal::kEmptyString) {
        server_name_->clear();
      }
    }
    if (has_session()) {
      if (session_ != &::google::protobuf::internal::kEmptyString) {
        session_->clear();
      }
    }
    if (has_auth_ip()) {
      if (auth_ip_ != &::google::protobuf::internal::kEmptyString) {
        auth_ip_->clear();
      }
    }
    auth_port_ = 0;
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoServerAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string server_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_name().data(), this->server_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_session;
        break;
      }
      
      // optional string session = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session().data(), this->session().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_auth_ip;
        break;
      }
      
      // optional string auth_ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_auth_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auth_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->auth_ip().data(), this->auth_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_auth_port;
        break;
      }
      
      // optional int32 auth_port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auth_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auth_port_)));
          set_has_auth_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_role_name;
        break;
      }
      
      // optional string role_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }
      
      // optional int32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoServerAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string server_name = 1;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->server_name(), output);
  }
  
  // optional string session = 2;
  if (has_session()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session().data(), this->session().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->session(), output);
  }
  
  // optional string auth_ip = 3;
  if (has_auth_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->auth_ip().data(), this->auth_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->auth_ip(), output);
  }
  
  // optional int32 auth_port = 4;
  if (has_auth_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->auth_port(), output);
  }
  
  // optional string role_name = 5;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->role_name(), output);
  }
  
  // optional int32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoServerAddress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string server_name = 1;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->server_name(), target);
  }
  
  // optional string session = 2;
  if (has_session()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session().data(), this->session().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session(), target);
  }
  
  // optional string auth_ip = 3;
  if (has_auth_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->auth_ip().data(), this->auth_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->auth_ip(), target);
  }
  
  // optional int32 auth_port = 4;
  if (has_auth_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->auth_port(), target);
  }
  
  // optional string role_name = 5;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->role_name(), target);
  }
  
  // optional int32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoServerAddress::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string server_name = 1;
    if (has_server_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_name());
    }
    
    // optional string session = 2;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session());
    }
    
    // optional string auth_ip = 3;
    if (has_auth_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->auth_ip());
    }
    
    // optional int32 auth_port = 4;
    if (has_auth_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auth_port());
    }
    
    // optional string role_name = 5;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }
    
    // optional int32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoServerAddress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoServerAddress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoServerAddress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoServerAddress::MergeFrom(const ProtoServerAddress& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_name()) {
      set_server_name(from.server_name());
    }
    if (from.has_session()) {
      set_session(from.session());
    }
    if (from.has_auth_ip()) {
      set_auth_ip(from.auth_ip());
    }
    if (from.has_auth_port()) {
      set_auth_port(from.auth_port());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoServerAddress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoServerAddress::CopyFrom(const ProtoServerAddress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoServerAddress::IsInitialized() const {
  
  return true;
}

void ProtoServerAddress::Swap(ProtoServerAddress* other) {
  if (other != this) {
    std::swap(server_name_, other->server_name_);
    std::swap(session_, other->session_);
    std::swap(auth_ip_, other->auth_ip_);
    std::swap(auth_port_, other->auth_port_);
    std::swap(role_name_, other->role_name_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoServerAddress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoServerAddress_descriptor_;
  metadata.reflection = ProtoServerAddress_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoSyncStatus::kStatusFieldNumber;
const int ProtoSyncStatus::kViewStatusFieldNumber;
const int ProtoSyncStatus::kView1FieldNumber;
const int ProtoSyncStatus::kView2FieldNumber;
const int ProtoSyncStatus::kView3FieldNumber;
const int ProtoSyncStatus::kValue1FieldNumber;
const int ProtoSyncStatus::kValue2FieldNumber;
const int ProtoSyncStatus::kValue3FieldNumber;
const int ProtoSyncStatus::kValue4FieldNumber;
const int ProtoSyncStatus::kValue5FieldNumber;
const int ProtoSyncStatus::kCheckSecFieldNumber;
const int ProtoSyncStatus::kCheckUsecFieldNumber;
const int ProtoSyncStatus::kIntervalSecFieldNumber;
const int ProtoSyncStatus::kIntervalUsecFieldNumber;
const int ProtoSyncStatus::kLastSecFieldNumber;
const int ProtoSyncStatus::kLastUsecFieldNumber;
const int ProtoSyncStatus::kSkillIdFieldNumber;
const int ProtoSyncStatus::kSkillLevelFieldNumber;
const int ProtoSyncStatus::kAttackerFieldNumber;
const int ProtoSyncStatus::kAccumulateFieldNumber;
#endif  // !_MSC_VER

ProtoSyncStatus::ProtoSyncStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoSyncStatus::InitAsDefaultInstance() {
}

ProtoSyncStatus::ProtoSyncStatus(const ProtoSyncStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoSyncStatus::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  view_status_ = 0;
  view1_ = 0;
  view2_ = 0;
  view3_ = 0;
  value1_ = 0;
  value2_ = 0;
  value3_ = 0;
  value4_ = 0;
  value5_ = 0;
  check_sec_ = GOOGLE_LONGLONG(0);
  check_usec_ = GOOGLE_LONGLONG(0);
  interval_sec_ = GOOGLE_LONGLONG(0);
  interval_usec_ = GOOGLE_LONGLONG(0);
  last_sec_ = GOOGLE_LONGLONG(0);
  last_usec_ = GOOGLE_LONGLONG(0);
  skill_id_ = 0;
  skill_level_ = 0;
  attacker_ = 0;
  accumulate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoSyncStatus::~ProtoSyncStatus() {
  SharedDtor();
}

void ProtoSyncStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoSyncStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoSyncStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoSyncStatus_descriptor_;
}

const ProtoSyncStatus& ProtoSyncStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInnerPublic_2eproto();  return *default_instance_;
}

ProtoSyncStatus* ProtoSyncStatus::default_instance_ = NULL;

ProtoSyncStatus* ProtoSyncStatus::New() const {
  return new ProtoSyncStatus;
}

void ProtoSyncStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
    view_status_ = 0;
    view1_ = 0;
    view2_ = 0;
    view3_ = 0;
    value1_ = 0;
    value2_ = 0;
    value3_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    value4_ = 0;
    value5_ = 0;
    check_sec_ = GOOGLE_LONGLONG(0);
    check_usec_ = GOOGLE_LONGLONG(0);
    interval_sec_ = GOOGLE_LONGLONG(0);
    interval_usec_ = GOOGLE_LONGLONG(0);
    last_sec_ = GOOGLE_LONGLONG(0);
    last_usec_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    skill_id_ = 0;
    skill_level_ = 0;
    attacker_ = 0;
    accumulate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoSyncStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_view_status;
        break;
      }
      
      // optional int32 view_status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_view_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &view_status_)));
          set_has_view_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_view1;
        break;
      }
      
      // optional double view1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_view1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &view1_)));
          set_has_view1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_view2;
        break;
      }
      
      // optional double view2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_view2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &view2_)));
          set_has_view2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_view3;
        break;
      }
      
      // optional double view3 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_view3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &view3_)));
          set_has_view3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_value1;
        break;
      }
      
      // optional double value1 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value1_)));
          set_has_value1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_value2;
        break;
      }
      
      // optional double value2 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value2_)));
          set_has_value2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_value3;
        break;
      }
      
      // optional double value3 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value3_)));
          set_has_value3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_value4;
        break;
      }
      
      // optional double value4 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value4_)));
          set_has_value4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_value5;
        break;
      }
      
      // optional double value5 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value5_)));
          set_has_value5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_check_sec;
        break;
      }
      
      // optional int64 check_sec = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_check_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &check_sec_)));
          set_has_check_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_check_usec;
        break;
      }
      
      // optional int64 check_usec = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_check_usec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &check_usec_)));
          set_has_check_usec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_interval_sec;
        break;
      }
      
      // optional int64 interval_sec = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_interval_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &interval_sec_)));
          set_has_interval_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_interval_usec;
        break;
      }
      
      // optional int64 interval_usec = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_interval_usec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &interval_usec_)));
          set_has_interval_usec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_last_sec;
        break;
      }
      
      // optional int64 last_sec = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_sec_)));
          set_has_last_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_last_usec;
        break;
      }
      
      // optional int64 last_usec = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_usec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_usec_)));
          set_has_last_usec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_skill_id;
        break;
      }
      
      // optional int32 skill_id = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_skill_level;
        break;
      }
      
      // optional int32 skill_level = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_level_)));
          set_has_skill_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_attacker;
        break;
      }
      
      // optional int32 attacker = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attacker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attacker_)));
          set_has_attacker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_accumulate;
        break;
      }
      
      // optional int32 accumulate = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accumulate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accumulate_)));
          set_has_accumulate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoSyncStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }
  
  // optional int32 view_status = 2;
  if (has_view_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->view_status(), output);
  }
  
  // optional double view1 = 3;
  if (has_view1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->view1(), output);
  }
  
  // optional double view2 = 4;
  if (has_view2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->view2(), output);
  }
  
  // optional double view3 = 5;
  if (has_view3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->view3(), output);
  }
  
  // optional double value1 = 6;
  if (has_value1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->value1(), output);
  }
  
  // optional double value2 = 7;
  if (has_value2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->value2(), output);
  }
  
  // optional double value3 = 8;
  if (has_value3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->value3(), output);
  }
  
  // optional double value4 = 9;
  if (has_value4()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->value4(), output);
  }
  
  // optional double value5 = 10;
  if (has_value5()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->value5(), output);
  }
  
  // optional int64 check_sec = 11;
  if (has_check_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->check_sec(), output);
  }
  
  // optional int64 check_usec = 12;
  if (has_check_usec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->check_usec(), output);
  }
  
  // optional int64 interval_sec = 13;
  if (has_interval_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->interval_sec(), output);
  }
  
  // optional int64 interval_usec = 14;
  if (has_interval_usec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->interval_usec(), output);
  }
  
  // optional int64 last_sec = 15;
  if (has_last_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->last_sec(), output);
  }
  
  // optional int64 last_usec = 16;
  if (has_last_usec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->last_usec(), output);
  }
  
  // optional int32 skill_id = 17;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->skill_id(), output);
  }
  
  // optional int32 skill_level = 18;
  if (has_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->skill_level(), output);
  }
  
  // optional int32 attacker = 19;
  if (has_attacker()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->attacker(), output);
  }
  
  // optional int32 accumulate = 20;
  if (has_accumulate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->accumulate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoSyncStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }
  
  // optional int32 view_status = 2;
  if (has_view_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->view_status(), target);
  }
  
  // optional double view1 = 3;
  if (has_view1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->view1(), target);
  }
  
  // optional double view2 = 4;
  if (has_view2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->view2(), target);
  }
  
  // optional double view3 = 5;
  if (has_view3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->view3(), target);
  }
  
  // optional double value1 = 6;
  if (has_value1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->value1(), target);
  }
  
  // optional double value2 = 7;
  if (has_value2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->value2(), target);
  }
  
  // optional double value3 = 8;
  if (has_value3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->value3(), target);
  }
  
  // optional double value4 = 9;
  if (has_value4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->value4(), target);
  }
  
  // optional double value5 = 10;
  if (has_value5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->value5(), target);
  }
  
  // optional int64 check_sec = 11;
  if (has_check_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->check_sec(), target);
  }
  
  // optional int64 check_usec = 12;
  if (has_check_usec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->check_usec(), target);
  }
  
  // optional int64 interval_sec = 13;
  if (has_interval_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->interval_sec(), target);
  }
  
  // optional int64 interval_usec = 14;
  if (has_interval_usec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->interval_usec(), target);
  }
  
  // optional int64 last_sec = 15;
  if (has_last_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->last_sec(), target);
  }
  
  // optional int64 last_usec = 16;
  if (has_last_usec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->last_usec(), target);
  }
  
  // optional int32 skill_id = 17;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->skill_id(), target);
  }
  
  // optional int32 skill_level = 18;
  if (has_skill_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->skill_level(), target);
  }
  
  // optional int32 attacker = 19;
  if (has_attacker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->attacker(), target);
  }
  
  // optional int32 accumulate = 20;
  if (has_accumulate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->accumulate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoSyncStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // optional int32 view_status = 2;
    if (has_view_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->view_status());
    }
    
    // optional double view1 = 3;
    if (has_view1()) {
      total_size += 1 + 8;
    }
    
    // optional double view2 = 4;
    if (has_view2()) {
      total_size += 1 + 8;
    }
    
    // optional double view3 = 5;
    if (has_view3()) {
      total_size += 1 + 8;
    }
    
    // optional double value1 = 6;
    if (has_value1()) {
      total_size += 1 + 8;
    }
    
    // optional double value2 = 7;
    if (has_value2()) {
      total_size += 1 + 8;
    }
    
    // optional double value3 = 8;
    if (has_value3()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double value4 = 9;
    if (has_value4()) {
      total_size += 1 + 8;
    }
    
    // optional double value5 = 10;
    if (has_value5()) {
      total_size += 1 + 8;
    }
    
    // optional int64 check_sec = 11;
    if (has_check_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->check_sec());
    }
    
    // optional int64 check_usec = 12;
    if (has_check_usec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->check_usec());
    }
    
    // optional int64 interval_sec = 13;
    if (has_interval_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->interval_sec());
    }
    
    // optional int64 interval_usec = 14;
    if (has_interval_usec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->interval_usec());
    }
    
    // optional int64 last_sec = 15;
    if (has_last_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_sec());
    }
    
    // optional int64 last_usec = 16;
    if (has_last_usec()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_usec());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 skill_id = 17;
    if (has_skill_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }
    
    // optional int32 skill_level = 18;
    if (has_skill_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_level());
    }
    
    // optional int32 attacker = 19;
    if (has_attacker()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attacker());
    }
    
    // optional int32 accumulate = 20;
    if (has_accumulate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accumulate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoSyncStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoSyncStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoSyncStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoSyncStatus::MergeFrom(const ProtoSyncStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_view_status()) {
      set_view_status(from.view_status());
    }
    if (from.has_view1()) {
      set_view1(from.view1());
    }
    if (from.has_view2()) {
      set_view2(from.view2());
    }
    if (from.has_view3()) {
      set_view3(from.view3());
    }
    if (from.has_value1()) {
      set_value1(from.value1());
    }
    if (from.has_value2()) {
      set_value2(from.value2());
    }
    if (from.has_value3()) {
      set_value3(from.value3());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_value4()) {
      set_value4(from.value4());
    }
    if (from.has_value5()) {
      set_value5(from.value5());
    }
    if (from.has_check_sec()) {
      set_check_sec(from.check_sec());
    }
    if (from.has_check_usec()) {
      set_check_usec(from.check_usec());
    }
    if (from.has_interval_sec()) {
      set_interval_sec(from.interval_sec());
    }
    if (from.has_interval_usec()) {
      set_interval_usec(from.interval_usec());
    }
    if (from.has_last_sec()) {
      set_last_sec(from.last_sec());
    }
    if (from.has_last_usec()) {
      set_last_usec(from.last_usec());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_skill_level()) {
      set_skill_level(from.skill_level());
    }
    if (from.has_attacker()) {
      set_attacker(from.attacker());
    }
    if (from.has_accumulate()) {
      set_accumulate(from.accumulate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoSyncStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoSyncStatus::CopyFrom(const ProtoSyncStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoSyncStatus::IsInitialized() const {
  
  return true;
}

void ProtoSyncStatus::Swap(ProtoSyncStatus* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(view_status_, other->view_status_);
    std::swap(view1_, other->view1_);
    std::swap(view2_, other->view2_);
    std::swap(view3_, other->view3_);
    std::swap(value1_, other->value1_);
    std::swap(value2_, other->value2_);
    std::swap(value3_, other->value3_);
    std::swap(value4_, other->value4_);
    std::swap(value5_, other->value5_);
    std::swap(check_sec_, other->check_sec_);
    std::swap(check_usec_, other->check_usec_);
    std::swap(interval_sec_, other->interval_sec_);
    std::swap(interval_usec_, other->interval_usec_);
    std::swap(last_sec_, other->last_sec_);
    std::swap(last_usec_, other->last_usec_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(skill_level_, other->skill_level_);
    std::swap(attacker_, other->attacker_);
    std::swap(accumulate_, other->accumulate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoSyncStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoSyncStatus_descriptor_;
  metadata.reflection = ProtoSyncStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoPackageSet::kMoneyFieldNumber;
const int ProtoPackageSet::kPackageListFieldNumber;
const int ProtoPackageSet::kMoneyUseFieldNumber;
const int ProtoPackageSet::kRechargeFirstTickFieldNumber;
const int ProtoPackageSet::kRechargeGoldFieldNumber;
const int ProtoPackageSet::kResourceMapFieldNumber;
const int ProtoPackageSet::kUseResourceMapFieldNumber;
#endif  // !_MSC_VER

ProtoPackageSet::ProtoPackageSet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoPackageSet::InitAsDefaultInstance() {
  money_ = const_cast< ::ProtoMoney*>(&::ProtoMoney::default_instance());
  money_use_ = const_cast< ::ProtoMoney*>(&::ProtoMoney::default_instance());
  use_resource_map_ = const_cast< ::ProtoPairMap*>(&::ProtoPairMap::default_instance());
}

ProtoPackageSet::ProtoPackageSet(const ProtoPackageSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoPackageSet::SharedCtor() {
  _cached_size_ = 0;
  money_ = NULL;
  money_use_ = NULL;
  recharge_first_tick_ = GOOGLE_LONGLONG(0);
  recharge_gold_ = GOOGLE_LONGLONG(0);
  use_resource_map_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoPackageSet::~ProtoPackageSet() {
  SharedDtor();
}

void ProtoPackageSet::SharedDtor() {
  if (this != default_instance_) {
    delete money_;
    delete money_use_;
    delete use_resource_map_;
  }
}

void ProtoPackageSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoPackageSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoPackageSet_descriptor_;
}

const ProtoPackageSet& ProtoPackageSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInnerPublic_2eproto();  return *default_instance_;
}

ProtoPackageSet* ProtoPackageSet::default_instance_ = NULL;

ProtoPackageSet* ProtoPackageSet::New() const {
  return new ProtoPackageSet;
}

void ProtoPackageSet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_money()) {
      if (money_ != NULL) money_->::ProtoMoney::Clear();
    }
    if (has_money_use()) {
      if (money_use_ != NULL) money_use_->::ProtoMoney::Clear();
    }
    recharge_first_tick_ = GOOGLE_LONGLONG(0);
    recharge_gold_ = GOOGLE_LONGLONG(0);
    if (has_use_resource_map()) {
      if (use_resource_map_ != NULL) use_resource_map_->::ProtoPairMap::Clear();
    }
  }
  package_list_.Clear();
  resource_map_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoPackageSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ProtoMoney money = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_money()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_package_list;
        break;
      }
      
      // repeated .ProtoPackage package_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_package_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_package_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_package_list;
        if (input->ExpectTag(26)) goto parse_money_use;
        break;
      }
      
      // optional .ProtoMoney money_use = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_money_use:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_money_use()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_recharge_first_tick;
        break;
      }
      
      // optional int64 recharge_first_tick = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recharge_first_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &recharge_first_tick_)));
          set_has_recharge_first_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_recharge_gold;
        break;
      }
      
      // optional int64 recharge_gold = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recharge_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &recharge_gold_)));
          set_has_recharge_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_resource_map;
        break;
      }
      
      // repeated .ProtoPairObj resource_map = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resource_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_resource_map;
        if (input->ExpectTag(58)) goto parse_use_resource_map;
        break;
      }
      
      // optional .ProtoPairMap use_resource_map = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_use_resource_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_use_resource_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoPackageSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ProtoMoney money = 1;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->money(), output);
  }
  
  // repeated .ProtoPackage package_list = 2;
  for (int i = 0; i < this->package_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->package_list(i), output);
  }
  
  // optional .ProtoMoney money_use = 3;
  if (has_money_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->money_use(), output);
  }
  
  // optional int64 recharge_first_tick = 4;
  if (has_recharge_first_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->recharge_first_tick(), output);
  }
  
  // optional int64 recharge_gold = 5;
  if (has_recharge_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->recharge_gold(), output);
  }
  
  // repeated .ProtoPairObj resource_map = 6;
  for (int i = 0; i < this->resource_map_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->resource_map(i), output);
  }
  
  // optional .ProtoPairMap use_resource_map = 7;
  if (has_use_resource_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->use_resource_map(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoPackageSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ProtoMoney money = 1;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->money(), target);
  }
  
  // repeated .ProtoPackage package_list = 2;
  for (int i = 0; i < this->package_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->package_list(i), target);
  }
  
  // optional .ProtoMoney money_use = 3;
  if (has_money_use()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->money_use(), target);
  }
  
  // optional int64 recharge_first_tick = 4;
  if (has_recharge_first_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->recharge_first_tick(), target);
  }
  
  // optional int64 recharge_gold = 5;
  if (has_recharge_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->recharge_gold(), target);
  }
  
  // repeated .ProtoPairObj resource_map = 6;
  for (int i = 0; i < this->resource_map_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->resource_map(i), target);
  }
  
  // optional .ProtoPairMap use_resource_map = 7;
  if (has_use_resource_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->use_resource_map(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoPackageSet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ProtoMoney money = 1;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->money());
    }
    
    // optional .ProtoMoney money_use = 3;
    if (has_money_use()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->money_use());
    }
    
    // optional int64 recharge_first_tick = 4;
    if (has_recharge_first_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->recharge_first_tick());
    }
    
    // optional int64 recharge_gold = 5;
    if (has_recharge_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->recharge_gold());
    }
    
    // optional .ProtoPairMap use_resource_map = 7;
    if (has_use_resource_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->use_resource_map());
    }
    
  }
  // repeated .ProtoPackage package_list = 2;
  total_size += 1 * this->package_list_size();
  for (int i = 0; i < this->package_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->package_list(i));
  }
  
  // repeated .ProtoPairObj resource_map = 6;
  total_size += 1 * this->resource_map_size();
  for (int i = 0; i < this->resource_map_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resource_map(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoPackageSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoPackageSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoPackageSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoPackageSet::MergeFrom(const ProtoPackageSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  package_list_.MergeFrom(from.package_list_);
  resource_map_.MergeFrom(from.resource_map_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_money()) {
      mutable_money()->::ProtoMoney::MergeFrom(from.money());
    }
    if (from.has_money_use()) {
      mutable_money_use()->::ProtoMoney::MergeFrom(from.money_use());
    }
    if (from.has_recharge_first_tick()) {
      set_recharge_first_tick(from.recharge_first_tick());
    }
    if (from.has_recharge_gold()) {
      set_recharge_gold(from.recharge_gold());
    }
    if (from.has_use_resource_map()) {
      mutable_use_resource_map()->::ProtoPairMap::MergeFrom(from.use_resource_map());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoPackageSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoPackageSet::CopyFrom(const ProtoPackageSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoPackageSet::IsInitialized() const {
  
  return true;
}

void ProtoPackageSet::Swap(ProtoPackageSet* other) {
  if (other != this) {
    std::swap(money_, other->money_);
    package_list_.Swap(&other->package_list_);
    std::swap(money_use_, other->money_use_);
    std::swap(recharge_first_tick_, other->recharge_first_tick_);
    std::swap(recharge_gold_, other->recharge_gold_);
    resource_map_.Swap(&other->resource_map_);
    std::swap(use_resource_map_, other->use_resource_map_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoPackageSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoPackageSet_descriptor_;
  metadata.reflection = ProtoPackageSet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoPackage::kPackTypeFieldNumber;
const int ProtoPackage::kPackSizeFieldNumber;
const int ProtoPackage::kLastOpenTickFieldNumber;
const int ProtoPackage::kItemListFieldNumber;
const int ProtoPackage::kGridVecFieldNumber;
const int ProtoPackage::kIsOpenSublimeFieldNumber;
const int ProtoPackage::kSublimeLevelFieldNumber;
#endif  // !_MSC_VER

ProtoPackage::ProtoPackage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoPackage::InitAsDefaultInstance() {
}

ProtoPackage::ProtoPackage(const ProtoPackage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoPackage::SharedCtor() {
  _cached_size_ = 0;
  pack_type_ = 0;
  pack_size_ = 0;
  last_open_tick_ = 0;
  is_open_sublime_ = 0;
  sublime_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoPackage::~ProtoPackage() {
  SharedDtor();
}

void ProtoPackage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoPackage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoPackage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoPackage_descriptor_;
}

const ProtoPackage& ProtoPackage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInnerPublic_2eproto();  return *default_instance_;
}

ProtoPackage* ProtoPackage::default_instance_ = NULL;

ProtoPackage* ProtoPackage::New() const {
  return new ProtoPackage;
}

void ProtoPackage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pack_type_ = 0;
    pack_size_ = 0;
    last_open_tick_ = 0;
    is_open_sublime_ = 0;
    sublime_level_ = 0;
  }
  item_list_.Clear();
  grid_vec_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoPackage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pack_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pack_type_)));
          set_has_pack_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pack_size;
        break;
      }
      
      // optional int32 pack_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pack_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pack_size_)));
          set_has_pack_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_last_open_tick;
        break;
      }
      
      // optional int32 last_open_tick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_open_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_open_tick_)));
          set_has_last_open_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_item_list;
        break;
      }
      
      // repeated .ProtoItem item_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_item_list;
        if (input->ExpectTag(42)) goto parse_grid_vec;
        break;
      }
      
      // repeated .ProtoPairObj grid_vec = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_grid_vec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_grid_vec()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_grid_vec;
        if (input->ExpectTag(48)) goto parse_is_open_sublime;
        break;
      }
      
      // optional int32 is_open_sublime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_open_sublime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_open_sublime_)));
          set_has_is_open_sublime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_sublime_level;
        break;
      }
      
      // optional int32 sublime_level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sublime_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sublime_level_)));
          set_has_sublime_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoPackage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pack_type = 1;
  if (has_pack_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pack_type(), output);
  }
  
  // optional int32 pack_size = 2;
  if (has_pack_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pack_size(), output);
  }
  
  // optional int32 last_open_tick = 3;
  if (has_last_open_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->last_open_tick(), output);
  }
  
  // repeated .ProtoItem item_list = 4;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->item_list(i), output);
  }
  
  // repeated .ProtoPairObj grid_vec = 5;
  for (int i = 0; i < this->grid_vec_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->grid_vec(i), output);
  }
  
  // optional int32 is_open_sublime = 6;
  if (has_is_open_sublime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->is_open_sublime(), output);
  }
  
  // optional int32 sublime_level = 7;
  if (has_sublime_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->sublime_level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoPackage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pack_type = 1;
  if (has_pack_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pack_type(), target);
  }
  
  // optional int32 pack_size = 2;
  if (has_pack_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pack_size(), target);
  }
  
  // optional int32 last_open_tick = 3;
  if (has_last_open_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->last_open_tick(), target);
  }
  
  // repeated .ProtoItem item_list = 4;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->item_list(i), target);
  }
  
  // repeated .ProtoPairObj grid_vec = 5;
  for (int i = 0; i < this->grid_vec_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->grid_vec(i), target);
  }
  
  // optional int32 is_open_sublime = 6;
  if (has_is_open_sublime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->is_open_sublime(), target);
  }
  
  // optional int32 sublime_level = 7;
  if (has_sublime_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->sublime_level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoPackage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pack_type = 1;
    if (has_pack_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pack_type());
    }
    
    // optional int32 pack_size = 2;
    if (has_pack_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pack_size());
    }
    
    // optional int32 last_open_tick = 3;
    if (has_last_open_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_open_tick());
    }
    
    // optional int32 is_open_sublime = 6;
    if (has_is_open_sublime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_open_sublime());
    }
    
    // optional int32 sublime_level = 7;
    if (has_sublime_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sublime_level());
    }
    
  }
  // repeated .ProtoItem item_list = 4;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }
  
  // repeated .ProtoPairObj grid_vec = 5;
  total_size += 1 * this->grid_vec_size();
  for (int i = 0; i < this->grid_vec_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->grid_vec(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoPackage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoPackage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoPackage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoPackage::MergeFrom(const ProtoPackage& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  grid_vec_.MergeFrom(from.grid_vec_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pack_type()) {
      set_pack_type(from.pack_type());
    }
    if (from.has_pack_size()) {
      set_pack_size(from.pack_size());
    }
    if (from.has_last_open_tick()) {
      set_last_open_tick(from.last_open_tick());
    }
    if (from.has_is_open_sublime()) {
      set_is_open_sublime(from.is_open_sublime());
    }
    if (from.has_sublime_level()) {
      set_sublime_level(from.sublime_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoPackage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoPackage::CopyFrom(const ProtoPackage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoPackage::IsInitialized() const {
  
  return true;
}

void ProtoPackage::Swap(ProtoPackage* other) {
  if (other != this) {
    std::swap(pack_type_, other->pack_type_);
    std::swap(pack_size_, other->pack_size_);
    std::swap(last_open_tick_, other->last_open_tick_);
    item_list_.Swap(&other->item_list_);
    grid_vec_.Swap(&other->grid_vec_);
    std::swap(is_open_sublime_, other->is_open_sublime_);
    std::swap(sublime_level_, other->sublime_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoPackage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoPackage_descriptor_;
  metadata.reflection = ProtoPackage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoLimitGrid::kIndexFieldNumber;
const int ProtoLimitGrid::kLeftTickFieldNumber;
#endif  // !_MSC_VER

ProtoLimitGrid::ProtoLimitGrid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoLimitGrid::InitAsDefaultInstance() {
}

ProtoLimitGrid::ProtoLimitGrid(const ProtoLimitGrid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoLimitGrid::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  left_tick_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoLimitGrid::~ProtoLimitGrid() {
  SharedDtor();
}

void ProtoLimitGrid::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoLimitGrid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoLimitGrid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoLimitGrid_descriptor_;
}

const ProtoLimitGrid& ProtoLimitGrid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInnerPublic_2eproto();  return *default_instance_;
}

ProtoLimitGrid* ProtoLimitGrid::default_instance_ = NULL;

ProtoLimitGrid* ProtoLimitGrid::New() const {
  return new ProtoLimitGrid;
}

void ProtoLimitGrid::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    left_tick_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoLimitGrid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_left_tick;
        break;
      }
      
      // optional int32 left_tick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_tick_)));
          set_has_left_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoLimitGrid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }
  
  // optional int32 left_tick = 2;
  if (has_left_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->left_tick(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoLimitGrid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }
  
  // optional int32 left_tick = 2;
  if (has_left_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->left_tick(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoLimitGrid::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional int32 left_tick = 2;
    if (has_left_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_tick());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoLimitGrid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoLimitGrid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoLimitGrid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoLimitGrid::MergeFrom(const ProtoLimitGrid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_left_tick()) {
      set_left_tick(from.left_tick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoLimitGrid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoLimitGrid::CopyFrom(const ProtoLimitGrid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoLimitGrid::IsInitialized() const {
  
  return true;
}

void ProtoLimitGrid::Swap(ProtoLimitGrid* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(left_tick_, other->left_tick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoLimitGrid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoLimitGrid_descriptor_;
  metadata.reflection = ProtoLimitGrid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoSerialObj::kSerialTypeFieldNumber;
const int ProtoSerialObj::kSubTypeFieldNumber;
const int ProtoSerialObj::kSerialValueFieldNumber;
#endif  // !_MSC_VER

ProtoSerialObj::ProtoSerialObj()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoSerialObj::InitAsDefaultInstance() {
}

ProtoSerialObj::ProtoSerialObj(const ProtoSerialObj& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoSerialObj::SharedCtor() {
  _cached_size_ = 0;
  serial_type_ = 0;
  sub_type_ = 0;
  serial_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoSerialObj::~ProtoSerialObj() {
  SharedDtor();
}

void ProtoSerialObj::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoSerialObj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoSerialObj::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoSerialObj_descriptor_;
}

const ProtoSerialObj& ProtoSerialObj::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInnerPublic_2eproto();  return *default_instance_;
}

ProtoSerialObj* ProtoSerialObj::default_instance_ = NULL;

ProtoSerialObj* ProtoSerialObj::New() const {
  return new ProtoSerialObj;
}

void ProtoSerialObj::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serial_type_ = 0;
    sub_type_ = 0;
    serial_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoSerialObj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 serial_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serial_type_)));
          set_has_serial_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sub_type;
        break;
      }
      
      // optional int32 sub_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub_type_)));
          set_has_sub_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_serial_value;
        break;
      }
      
      // optional int32 serial_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serial_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serial_value_)));
          set_has_serial_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoSerialObj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 serial_type = 1;
  if (has_serial_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serial_type(), output);
  }
  
  // optional int32 sub_type = 2;
  if (has_sub_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sub_type(), output);
  }
  
  // optional int32 serial_value = 3;
  if (has_serial_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->serial_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoSerialObj::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 serial_type = 1;
  if (has_serial_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serial_type(), target);
  }
  
  // optional int32 sub_type = 2;
  if (has_sub_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sub_type(), target);
  }
  
  // optional int32 serial_value = 3;
  if (has_serial_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->serial_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoSerialObj::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 serial_type = 1;
    if (has_serial_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serial_type());
    }
    
    // optional int32 sub_type = 2;
    if (has_sub_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sub_type());
    }
    
    // optional int32 serial_value = 3;
    if (has_serial_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serial_value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoSerialObj::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoSerialObj* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoSerialObj*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoSerialObj::MergeFrom(const ProtoSerialObj& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serial_type()) {
      set_serial_type(from.serial_type());
    }
    if (from.has_sub_type()) {
      set_sub_type(from.sub_type());
    }
    if (from.has_serial_value()) {
      set_serial_value(from.serial_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoSerialObj::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoSerialObj::CopyFrom(const ProtoSerialObj& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoSerialObj::IsInitialized() const {
  
  return true;
}

void ProtoSerialObj::Swap(ProtoSerialObj* other) {
  if (other != this) {
    std::swap(serial_type_, other->serial_type_);
    std::swap(sub_type_, other->sub_type_);
    std::swap(serial_value_, other->serial_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoSerialObj::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoSerialObj_descriptor_;
  metadata.reflection = ProtoSerialObj_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoProItem::kOffsetFieldNumber;
const int ProtoProItem::kProPairFieldNumber;
#endif  // !_MSC_VER

ProtoProItem::ProtoProItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoProItem::InitAsDefaultInstance() {
  pro_pair_ = const_cast< ::ProtoPairObj*>(&::ProtoPairObj::default_instance());
}

ProtoProItem::ProtoProItem(const ProtoProItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoProItem::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0;
  pro_pair_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoProItem::~ProtoProItem() {
  SharedDtor();
}

void ProtoProItem::SharedDtor() {
  if (this != default_instance_) {
    delete pro_pair_;
  }
}

void ProtoProItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoProItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoProItem_descriptor_;
}

const ProtoProItem& ProtoProItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInnerPublic_2eproto();  return *default_instance_;
}

ProtoProItem* ProtoProItem::default_instance_ = NULL;

ProtoProItem* ProtoProItem::New() const {
  return new ProtoProItem;
}

void ProtoProItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    offset_ = 0;
    if (has_pro_pair()) {
      if (pro_pair_ != NULL) pro_pair_->::ProtoPairObj::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoProItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 offset = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pro_pair;
        break;
      }
      
      // optional .ProtoPairObj pro_pair = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pro_pair:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pro_pair()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoProItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->offset(), output);
  }
  
  // optional .ProtoPairObj pro_pair = 2;
  if (has_pro_pair()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pro_pair(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoProItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->offset(), target);
  }
  
  // optional .ProtoPairObj pro_pair = 2;
  if (has_pro_pair()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pro_pair(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoProItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }
    
    // optional .ProtoPairObj pro_pair = 2;
    if (has_pro_pair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pro_pair());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoProItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoProItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoProItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoProItem::MergeFrom(const ProtoProItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_pro_pair()) {
      mutable_pro_pair()->::ProtoPairObj::MergeFrom(from.pro_pair());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoProItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoProItem::CopyFrom(const ProtoProItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoProItem::IsInitialized() const {
  
  return true;
}

void ProtoProItem::Swap(ProtoProItem* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(pro_pair_, other->pro_pair_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoProItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoProItem_descriptor_;
  metadata.reflection = ProtoProItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoInnerTaskInfo::kTaskIdFieldNumber;
const int ProtoInnerTaskInfo::kGameTypeFieldNumber;
const int ProtoInnerTaskInfo::kAcceptTickSecFieldNumber;
const int ProtoInnerTaskInfo::kAcceptTickUsecFieldNumber;
const int ProtoInnerTaskInfo::kRefreshTickSecFieldNumber;
const int ProtoInnerTaskInfo::kRefreshTickUsecFieldNumber;
const int ProtoInnerTaskInfo::kTaskCondListFieldNumber;
const int ProtoInnerTaskInfo::kPrevTaskFieldNumber;
const int ProtoInnerTaskInfo::kPostTaskFieldNumber;
const int ProtoInnerTaskInfo::kStatusFieldNumber;
const int ProtoInnerTaskInfo::kLogicTypeFieldNumber;
const int ProtoInnerTaskInfo::kTaskStarFieldNumber;
const int ProtoInnerTaskInfo::kFastFinishRateFieldNumber;
const int ProtoInnerTaskInfo::kFreshStarTimesFieldNumber;
#endif  // !_MSC_VER

ProtoInnerTaskInfo::ProtoInnerTaskInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoInnerTaskInfo::InitAsDefaultInstance() {
}

ProtoInnerTaskInfo::ProtoInnerTaskInfo(const ProtoInnerTaskInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoInnerTaskInfo::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0;
  game_type_ = 0;
  accept_tick_sec_ = GOOGLE_LONGLONG(0);
  accept_tick_usec_ = GOOGLE_LONGLONG(0);
  refresh_tick_sec_ = GOOGLE_LONGLONG(0);
  refresh_tick_usec_ = GOOGLE_LONGLONG(0);
  prev_task_ = 0;
  post_task_ = 0;
  status_ = GOOGLE_ULONGLONG(0);
  logic_type_ = GOOGLE_ULONGLONG(0);
  task_star_ = 0;
  fast_finish_rate_ = 0;
  fresh_star_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoInnerTaskInfo::~ProtoInnerTaskInfo() {
  SharedDtor();
}

void ProtoInnerTaskInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoInnerTaskInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoInnerTaskInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoInnerTaskInfo_descriptor_;
}

const ProtoInnerTaskInfo& ProtoInnerTaskInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInnerPublic_2eproto();  return *default_instance_;
}

ProtoInnerTaskInfo* ProtoInnerTaskInfo::default_instance_ = NULL;

ProtoInnerTaskInfo* ProtoInnerTaskInfo::New() const {
  return new ProtoInnerTaskInfo;
}

void ProtoInnerTaskInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0;
    game_type_ = 0;
    accept_tick_sec_ = GOOGLE_LONGLONG(0);
    accept_tick_usec_ = GOOGLE_LONGLONG(0);
    refresh_tick_sec_ = GOOGLE_LONGLONG(0);
    refresh_tick_usec_ = GOOGLE_LONGLONG(0);
    prev_task_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    post_task_ = 0;
    status_ = GOOGLE_ULONGLONG(0);
    logic_type_ = GOOGLE_ULONGLONG(0);
    task_star_ = 0;
    fast_finish_rate_ = 0;
    fresh_star_times_ = 0;
  }
  task_cond_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoInnerTaskInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_type;
        break;
      }
      
      // optional int32 game_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_type_)));
          set_has_game_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_accept_tick_sec;
        break;
      }
      
      // optional int64 accept_tick_sec = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accept_tick_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &accept_tick_sec_)));
          set_has_accept_tick_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_accept_tick_usec;
        break;
      }
      
      // optional int64 accept_tick_usec = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accept_tick_usec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &accept_tick_usec_)));
          set_has_accept_tick_usec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_refresh_tick_sec;
        break;
      }
      
      // optional int64 refresh_tick_sec = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refresh_tick_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &refresh_tick_sec_)));
          set_has_refresh_tick_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_refresh_tick_usec;
        break;
      }
      
      // optional int64 refresh_tick_usec = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refresh_tick_usec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &refresh_tick_usec_)));
          set_has_refresh_tick_usec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_task_cond_list;
        break;
      }
      
      // repeated .ProtoInnerTaskCond task_cond_list = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_cond_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task_cond_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_task_cond_list;
        if (input->ExpectTag(64)) goto parse_prev_task;
        break;
      }
      
      // optional int32 prev_task = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prev_task:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prev_task_)));
          set_has_prev_task();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_post_task;
        break;
      }
      
      // optional int32 post_task = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_post_task:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &post_task_)));
          set_has_post_task();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_status;
        break;
      }
      
      // optional uint64 status = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_logic_type;
        break;
      }
      
      // optional uint64 logic_type = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logic_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logic_type_)));
          set_has_logic_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_task_star;
        break;
      }
      
      // optional int32 task_star = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_star_)));
          set_has_task_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_fast_finish_rate;
        break;
      }
      
      // optional int32 fast_finish_rate = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fast_finish_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fast_finish_rate_)));
          set_has_fast_finish_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_fresh_star_times;
        break;
      }
      
      // optional int32 fresh_star_times = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fresh_star_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fresh_star_times_)));
          set_has_fresh_star_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoInnerTaskInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->task_id(), output);
  }
  
  // optional int32 game_type = 2;
  if (has_game_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->game_type(), output);
  }
  
  // optional int64 accept_tick_sec = 3;
  if (has_accept_tick_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->accept_tick_sec(), output);
  }
  
  // optional int64 accept_tick_usec = 4;
  if (has_accept_tick_usec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->accept_tick_usec(), output);
  }
  
  // optional int64 refresh_tick_sec = 5;
  if (has_refresh_tick_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->refresh_tick_sec(), output);
  }
  
  // optional int64 refresh_tick_usec = 6;
  if (has_refresh_tick_usec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->refresh_tick_usec(), output);
  }
  
  // repeated .ProtoInnerTaskCond task_cond_list = 7;
  for (int i = 0; i < this->task_cond_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->task_cond_list(i), output);
  }
  
  // optional int32 prev_task = 8;
  if (has_prev_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->prev_task(), output);
  }
  
  // optional int32 post_task = 9;
  if (has_post_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->post_task(), output);
  }
  
  // optional uint64 status = 10;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->status(), output);
  }
  
  // optional uint64 logic_type = 11;
  if (has_logic_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->logic_type(), output);
  }
  
  // optional int32 task_star = 12;
  if (has_task_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->task_star(), output);
  }
  
  // optional int32 fast_finish_rate = 13;
  if (has_fast_finish_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->fast_finish_rate(), output);
  }
  
  // optional int32 fresh_star_times = 14;
  if (has_fresh_star_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->fresh_star_times(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoInnerTaskInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->task_id(), target);
  }
  
  // optional int32 game_type = 2;
  if (has_game_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->game_type(), target);
  }
  
  // optional int64 accept_tick_sec = 3;
  if (has_accept_tick_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->accept_tick_sec(), target);
  }
  
  // optional int64 accept_tick_usec = 4;
  if (has_accept_tick_usec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->accept_tick_usec(), target);
  }
  
  // optional int64 refresh_tick_sec = 5;
  if (has_refresh_tick_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->refresh_tick_sec(), target);
  }
  
  // optional int64 refresh_tick_usec = 6;
  if (has_refresh_tick_usec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->refresh_tick_usec(), target);
  }
  
  // repeated .ProtoInnerTaskCond task_cond_list = 7;
  for (int i = 0; i < this->task_cond_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->task_cond_list(i), target);
  }
  
  // optional int32 prev_task = 8;
  if (has_prev_task()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->prev_task(), target);
  }
  
  // optional int32 post_task = 9;
  if (has_post_task()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->post_task(), target);
  }
  
  // optional uint64 status = 10;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->status(), target);
  }
  
  // optional uint64 logic_type = 11;
  if (has_logic_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->logic_type(), target);
  }
  
  // optional int32 task_star = 12;
  if (has_task_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->task_star(), target);
  }
  
  // optional int32 fast_finish_rate = 13;
  if (has_fast_finish_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->fast_finish_rate(), target);
  }
  
  // optional int32 fresh_star_times = 14;
  if (has_fresh_star_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->fresh_star_times(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoInnerTaskInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_id());
    }
    
    // optional int32 game_type = 2;
    if (has_game_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_type());
    }
    
    // optional int64 accept_tick_sec = 3;
    if (has_accept_tick_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->accept_tick_sec());
    }
    
    // optional int64 accept_tick_usec = 4;
    if (has_accept_tick_usec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->accept_tick_usec());
    }
    
    // optional int64 refresh_tick_sec = 5;
    if (has_refresh_tick_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->refresh_tick_sec());
    }
    
    // optional int64 refresh_tick_usec = 6;
    if (has_refresh_tick_usec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->refresh_tick_usec());
    }
    
    // optional int32 prev_task = 8;
    if (has_prev_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prev_task());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 post_task = 9;
    if (has_post_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->post_task());
    }
    
    // optional uint64 status = 10;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->status());
    }
    
    // optional uint64 logic_type = 11;
    if (has_logic_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logic_type());
    }
    
    // optional int32 task_star = 12;
    if (has_task_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_star());
    }
    
    // optional int32 fast_finish_rate = 13;
    if (has_fast_finish_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fast_finish_rate());
    }
    
    // optional int32 fresh_star_times = 14;
    if (has_fresh_star_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fresh_star_times());
    }
    
  }
  // repeated .ProtoInnerTaskCond task_cond_list = 7;
  total_size += 1 * this->task_cond_list_size();
  for (int i = 0; i < this->task_cond_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task_cond_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoInnerTaskInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoInnerTaskInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoInnerTaskInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoInnerTaskInfo::MergeFrom(const ProtoInnerTaskInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  task_cond_list_.MergeFrom(from.task_cond_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_game_type()) {
      set_game_type(from.game_type());
    }
    if (from.has_accept_tick_sec()) {
      set_accept_tick_sec(from.accept_tick_sec());
    }
    if (from.has_accept_tick_usec()) {
      set_accept_tick_usec(from.accept_tick_usec());
    }
    if (from.has_refresh_tick_sec()) {
      set_refresh_tick_sec(from.refresh_tick_sec());
    }
    if (from.has_refresh_tick_usec()) {
      set_refresh_tick_usec(from.refresh_tick_usec());
    }
    if (from.has_prev_task()) {
      set_prev_task(from.prev_task());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_post_task()) {
      set_post_task(from.post_task());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_logic_type()) {
      set_logic_type(from.logic_type());
    }
    if (from.has_task_star()) {
      set_task_star(from.task_star());
    }
    if (from.has_fast_finish_rate()) {
      set_fast_finish_rate(from.fast_finish_rate());
    }
    if (from.has_fresh_star_times()) {
      set_fresh_star_times(from.fresh_star_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoInnerTaskInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoInnerTaskInfo::CopyFrom(const ProtoInnerTaskInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoInnerTaskInfo::IsInitialized() const {
  
  return true;
}

void ProtoInnerTaskInfo::Swap(ProtoInnerTaskInfo* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(game_type_, other->game_type_);
    std::swap(accept_tick_sec_, other->accept_tick_sec_);
    std::swap(accept_tick_usec_, other->accept_tick_usec_);
    std::swap(refresh_tick_sec_, other->refresh_tick_sec_);
    std::swap(refresh_tick_usec_, other->refresh_tick_usec_);
    task_cond_list_.Swap(&other->task_cond_list_);
    std::swap(prev_task_, other->prev_task_);
    std::swap(post_task_, other->post_task_);
    std::swap(status_, other->status_);
    std::swap(logic_type_, other->logic_type_);
    std::swap(task_star_, other->task_star_);
    std::swap(fast_finish_rate_, other->fast_finish_rate_);
    std::swap(fresh_star_times_, other->fresh_star_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoInnerTaskInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoInnerTaskInfo_descriptor_;
  metadata.reflection = ProtoInnerTaskInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoInnerTaskCond::kTypeFieldNumber;
const int ProtoInnerTaskCond::kCurrentValueFieldNumber;
const int ProtoInnerTaskCond::kCondIndexFieldNumber;
const int ProtoInnerTaskCond::kIdListIndexFieldNumber;
const int ProtoInnerTaskCond::kCondIdFieldNumber;
const int ProtoInnerTaskCond::kFinalValueFieldNumber;
const int ProtoInnerTaskCond::kKillTypeFieldNumber;
const int ProtoInnerTaskCond::kRangeLevelFieldNumber;
#endif  // !_MSC_VER

ProtoInnerTaskCond::ProtoInnerTaskCond()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoInnerTaskCond::InitAsDefaultInstance() {
}

ProtoInnerTaskCond::ProtoInnerTaskCond(const ProtoInnerTaskCond& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoInnerTaskCond::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  current_value_ = 0;
  cond_index_ = 0;
  id_list_index_ = 0;
  cond_id_ = 0;
  final_value_ = 0;
  kill_type_ = 0;
  range_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoInnerTaskCond::~ProtoInnerTaskCond() {
  SharedDtor();
}

void ProtoInnerTaskCond::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoInnerTaskCond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoInnerTaskCond::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoInnerTaskCond_descriptor_;
}

const ProtoInnerTaskCond& ProtoInnerTaskCond::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInnerPublic_2eproto();  return *default_instance_;
}

ProtoInnerTaskCond* ProtoInnerTaskCond::default_instance_ = NULL;

ProtoInnerTaskCond* ProtoInnerTaskCond::New() const {
  return new ProtoInnerTaskCond;
}

void ProtoInnerTaskCond::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    current_value_ = 0;
    cond_index_ = 0;
    id_list_index_ = 0;
    cond_id_ = 0;
    final_value_ = 0;
    kill_type_ = 0;
    range_level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoInnerTaskCond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_current_value;
        break;
      }
      
      // optional int32 current_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_value_)));
          set_has_current_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cond_index;
        break;
      }
      
      // optional int32 cond_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cond_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cond_index_)));
          set_has_cond_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_id_list_index;
        break;
      }
      
      // optional int32 id_list_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id_list_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_list_index_)));
          set_has_id_list_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cond_id;
        break;
      }
      
      // optional int32 cond_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cond_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cond_id_)));
          set_has_cond_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_final_value;
        break;
      }
      
      // optional int32 final_value = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_final_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &final_value_)));
          set_has_final_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_kill_type;
        break;
      }
      
      // optional int32 kill_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kill_type_)));
          set_has_kill_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_range_level;
        break;
      }
      
      // optional int32 range_level = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_range_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &range_level_)));
          set_has_range_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoInnerTaskCond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // optional int32 current_value = 2;
  if (has_current_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->current_value(), output);
  }
  
  // optional int32 cond_index = 3;
  if (has_cond_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cond_index(), output);
  }
  
  // optional int32 id_list_index = 4;
  if (has_id_list_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->id_list_index(), output);
  }
  
  // optional int32 cond_id = 5;
  if (has_cond_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cond_id(), output);
  }
  
  // optional int32 final_value = 6;
  if (has_final_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->final_value(), output);
  }
  
  // optional int32 kill_type = 7;
  if (has_kill_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->kill_type(), output);
  }
  
  // optional int32 range_level = 8;
  if (has_range_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->range_level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoInnerTaskCond::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // optional int32 current_value = 2;
  if (has_current_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->current_value(), target);
  }
  
  // optional int32 cond_index = 3;
  if (has_cond_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cond_index(), target);
  }
  
  // optional int32 id_list_index = 4;
  if (has_id_list_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->id_list_index(), target);
  }
  
  // optional int32 cond_id = 5;
  if (has_cond_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cond_id(), target);
  }
  
  // optional int32 final_value = 6;
  if (has_final_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->final_value(), target);
  }
  
  // optional int32 kill_type = 7;
  if (has_kill_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->kill_type(), target);
  }
  
  // optional int32 range_level = 8;
  if (has_range_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->range_level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoInnerTaskCond::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int32 current_value = 2;
    if (has_current_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_value());
    }
    
    // optional int32 cond_index = 3;
    if (has_cond_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cond_index());
    }
    
    // optional int32 id_list_index = 4;
    if (has_id_list_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id_list_index());
    }
    
    // optional int32 cond_id = 5;
    if (has_cond_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cond_id());
    }
    
    // optional int32 final_value = 6;
    if (has_final_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->final_value());
    }
    
    // optional int32 kill_type = 7;
    if (has_kill_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kill_type());
    }
    
    // optional int32 range_level = 8;
    if (has_range_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->range_level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoInnerTaskCond::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoInnerTaskCond* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoInnerTaskCond*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoInnerTaskCond::MergeFrom(const ProtoInnerTaskCond& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_current_value()) {
      set_current_value(from.current_value());
    }
    if (from.has_cond_index()) {
      set_cond_index(from.cond_index());
    }
    if (from.has_id_list_index()) {
      set_id_list_index(from.id_list_index());
    }
    if (from.has_cond_id()) {
      set_cond_id(from.cond_id());
    }
    if (from.has_final_value()) {
      set_final_value(from.final_value());
    }
    if (from.has_kill_type()) {
      set_kill_type(from.kill_type());
    }
    if (from.has_range_level()) {
      set_range_level(from.range_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoInnerTaskCond::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoInnerTaskCond::CopyFrom(const ProtoInnerTaskCond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoInnerTaskCond::IsInitialized() const {
  
  return true;
}

void ProtoInnerTaskCond::Swap(ProtoInnerTaskCond* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(current_value_, other->current_value_);
    std::swap(cond_index_, other->cond_index_);
    std::swap(id_list_index_, other->id_list_index_);
    std::swap(cond_id_, other->cond_id_);
    std::swap(final_value_, other->final_value_);
    std::swap(kill_type_, other->kill_type_);
    std::swap(range_level_, other->range_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoInnerTaskCond::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoInnerTaskCond_descriptor_;
  metadata.reflection = ProtoInnerTaskCond_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoSignInfo::kSignTypeFieldNumber;
const int ProtoSignInfo::kTypeIndexFieldNumber;
const int ProtoSignInfo::kRoleNameFieldNumber;
const int ProtoSignInfo::kTypeLvlFieldNumber;
const int ProtoSignInfo::kTypeForceFieldNumber;
const int ProtoSignInfo::kTypeCountFieldNumber;
#endif  // !_MSC_VER

ProtoSignInfo::ProtoSignInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoSignInfo::InitAsDefaultInstance() {
}

ProtoSignInfo::ProtoSignInfo(const ProtoSignInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoSignInfo::SharedCtor() {
  _cached_size_ = 0;
  sign_type_ = 0;
  type_index_ = GOOGLE_LONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_lvl_ = 0;
  type_force_ = 0;
  type_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoSignInfo::~ProtoSignInfo() {
  SharedDtor();
}

void ProtoSignInfo::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoSignInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoSignInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoSignInfo_descriptor_;
}

const ProtoSignInfo& ProtoSignInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInnerPublic_2eproto();  return *default_instance_;
}

ProtoSignInfo* ProtoSignInfo::default_instance_ = NULL;

ProtoSignInfo* ProtoSignInfo::New() const {
  return new ProtoSignInfo;
}

void ProtoSignInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sign_type_ = 0;
    type_index_ = GOOGLE_LONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    type_lvl_ = 0;
    type_force_ = 0;
    type_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoSignInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sign_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sign_type_)));
          set_has_sign_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type_index;
        break;
      }
      
      // optional int64 type_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &type_index_)));
          set_has_type_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role_name;
        break;
      }
      
      // optional string role_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type_lvl;
        break;
      }
      
      // optional int32 type_lvl = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type_lvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_lvl_)));
          set_has_type_lvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type_force;
        break;
      }
      
      // optional int32 type_force = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_force_)));
          set_has_type_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_type_count;
        break;
      }
      
      // optional int32 type_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_count_)));
          set_has_type_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoSignInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 sign_type = 1;
  if (has_sign_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sign_type(), output);
  }
  
  // optional int64 type_index = 2;
  if (has_type_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->type_index(), output);
  }
  
  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->role_name(), output);
  }
  
  // optional int32 type_lvl = 4;
  if (has_type_lvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type_lvl(), output);
  }
  
  // optional int32 type_force = 5;
  if (has_type_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type_force(), output);
  }
  
  // optional int32 type_count = 6;
  if (has_type_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->type_count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoSignInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 sign_type = 1;
  if (has_sign_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sign_type(), target);
  }
  
  // optional int64 type_index = 2;
  if (has_type_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->type_index(), target);
  }
  
  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->role_name(), target);
  }
  
  // optional int32 type_lvl = 4;
  if (has_type_lvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type_lvl(), target);
  }
  
  // optional int32 type_force = 5;
  if (has_type_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type_force(), target);
  }
  
  // optional int32 type_count = 6;
  if (has_type_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->type_count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoSignInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sign_type = 1;
    if (has_sign_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sign_type());
    }
    
    // optional int64 type_index = 2;
    if (has_type_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->type_index());
    }
    
    // optional string role_name = 3;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }
    
    // optional int32 type_lvl = 4;
    if (has_type_lvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_lvl());
    }
    
    // optional int32 type_force = 5;
    if (has_type_force()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_force());
    }
    
    // optional int32 type_count = 6;
    if (has_type_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoSignInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoSignInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoSignInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoSignInfo::MergeFrom(const ProtoSignInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sign_type()) {
      set_sign_type(from.sign_type());
    }
    if (from.has_type_index()) {
      set_type_index(from.type_index());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_type_lvl()) {
      set_type_lvl(from.type_lvl());
    }
    if (from.has_type_force()) {
      set_type_force(from.type_force());
    }
    if (from.has_type_count()) {
      set_type_count(from.type_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoSignInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoSignInfo::CopyFrom(const ProtoSignInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoSignInfo::IsInitialized() const {
  
  return true;
}

void ProtoSignInfo::Swap(ProtoSignInfo* other) {
  if (other != this) {
    std::swap(sign_type_, other->sign_type_);
    std::swap(type_index_, other->type_index_);
    std::swap(role_name_, other->role_name_);
    std::swap(type_lvl_, other->type_lvl_);
    std::swap(type_force_, other->type_force_);
    std::swap(type_count_, other->type_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoSignInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoSignInfo_descriptor_;
  metadata.reflection = ProtoSignInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoFBItem::kFbIdFieldNumber;
const int ProtoFBItem::kFinishTimesFieldNumber;
const int ProtoFBItem::kTotalTimesFieldNumber;
#endif  // !_MSC_VER

ProtoFBItem::ProtoFBItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoFBItem::InitAsDefaultInstance() {
}

ProtoFBItem::ProtoFBItem(const ProtoFBItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoFBItem::SharedCtor() {
  _cached_size_ = 0;
  fb_id_ = 0;
  finish_times_ = 0;
  total_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoFBItem::~ProtoFBItem() {
  SharedDtor();
}

void ProtoFBItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoFBItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoFBItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoFBItem_descriptor_;
}

const ProtoFBItem& ProtoFBItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInnerPublic_2eproto();  return *default_instance_;
}

ProtoFBItem* ProtoFBItem::default_instance_ = NULL;

ProtoFBItem* ProtoFBItem::New() const {
  return new ProtoFBItem;
}

void ProtoFBItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fb_id_ = 0;
    finish_times_ = 0;
    total_times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoFBItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fb_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fb_id_)));
          set_has_fb_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_finish_times;
        break;
      }
      
      // optional int32 finish_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finish_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &finish_times_)));
          set_has_finish_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total_times;
        break;
      }
      
      // optional int32 total_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_times_)));
          set_has_total_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoFBItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 fb_id = 1;
  if (has_fb_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fb_id(), output);
  }
  
  // optional int32 finish_times = 2;
  if (has_finish_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->finish_times(), output);
  }
  
  // optional int32 total_times = 3;
  if (has_total_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->total_times(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoFBItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 fb_id = 1;
  if (has_fb_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fb_id(), target);
  }
  
  // optional int32 finish_times = 2;
  if (has_finish_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->finish_times(), target);
  }
  
  // optional int32 total_times = 3;
  if (has_total_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->total_times(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoFBItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 fb_id = 1;
    if (has_fb_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fb_id());
    }
    
    // optional int32 finish_times = 2;
    if (has_finish_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->finish_times());
    }
    
    // optional int32 total_times = 3;
    if (has_total_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_times());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoFBItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoFBItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoFBItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoFBItem::MergeFrom(const ProtoFBItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fb_id()) {
      set_fb_id(from.fb_id());
    }
    if (from.has_finish_times()) {
      set_finish_times(from.finish_times());
    }
    if (from.has_total_times()) {
      set_total_times(from.total_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoFBItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoFBItem::CopyFrom(const ProtoFBItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoFBItem::IsInitialized() const {
  
  return true;
}

void ProtoFBItem::Swap(ProtoFBItem* other) {
  if (other != this) {
    std::swap(fb_id_, other->fb_id_);
    std::swap(finish_times_, other->finish_times_);
    std::swap(total_times_, other->total_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoFBItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoFBItem_descriptor_;
  metadata.reflection = ProtoFBItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecordMoney::kTableNameFieldNumber;
const int RecordMoney::kRoleIdFieldNumber;
const int RecordMoney::kSerialTypeFieldNumber;
const int RecordMoney::kSubSerialTypeFieldNumber;
const int RecordMoney::kSubAgentFieldNumber;
const int RecordMoney::kMoneyTypeFieldNumber;
const int RecordMoney::kMoneyFieldNumber;
const int RecordMoney::kBindMoneyFieldNumber;
const int RecordMoney::kRemainMoneyFieldNumber;
const int RecordMoney::kRemainBindMoneyFieldNumber;
const int RecordMoney::kTimeFieldNumber;
const int RecordMoney::kPlatformFieldNumber;
const int RecordMoney::kMarketFieldNumber;
#endif  // !_MSC_VER

RecordMoney::RecordMoney()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecordMoney::InitAsDefaultInstance() {
}

RecordMoney::RecordMoney(const RecordMoney& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecordMoney::SharedCtor() {
  _cached_size_ = 0;
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_id_ = GOOGLE_LONGLONG(0);
  serial_type_ = 0;
  sub_serial_type_ = 0;
  sub_agent_ = 0;
  money_type_ = 0;
  money_ = 0;
  bind_money_ = 0;
  remain_money_ = 0;
  remain_bind_money_ = 0;
  time_ = 0;
  platform_ = 0;
  market_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordMoney::~RecordMoney() {
  SharedDtor();
}

void RecordMoney::SharedDtor() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (this != default_instance_) {
  }
}

void RecordMoney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordMoney::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordMoney_descriptor_;
}

const RecordMoney& RecordMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInnerPublic_2eproto();  return *default_instance_;
}

RecordMoney* RecordMoney::default_instance_ = NULL;

RecordMoney* RecordMoney::New() const {
  return new RecordMoney;
}

void RecordMoney::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::kEmptyString) {
        table_name_->clear();
      }
    }
    role_id_ = GOOGLE_LONGLONG(0);
    serial_type_ = 0;
    sub_serial_type_ = 0;
    sub_agent_ = 0;
    money_type_ = 0;
    money_ = 0;
    bind_money_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    remain_money_ = 0;
    remain_bind_money_ = 0;
    time_ = 0;
    platform_ = 0;
    market_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }
      
      // optional int64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_serial_type;
        break;
      }
      
      // optional int32 serial_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serial_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serial_type_)));
          set_has_serial_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sub_serial_type;
        break;
      }
      
      // optional int32 sub_serial_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_serial_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub_serial_type_)));
          set_has_sub_serial_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sub_agent;
        break;
      }
      
      // optional int32 sub_agent = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_agent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub_agent_)));
          set_has_sub_agent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_money_type;
        break;
      }
      
      // optional int32 money_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_type_)));
          set_has_money_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_money;
        break;
      }
      
      // optional int32 money = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bind_money;
        break;
      }
      
      // optional int32 bind_money = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bind_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bind_money_)));
          set_has_bind_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_remain_money;
        break;
      }
      
      // optional int32 remain_money = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remain_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remain_money_)));
          set_has_remain_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_remain_bind_money;
        break;
      }
      
      // optional int32 remain_bind_money = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remain_bind_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remain_bind_money_)));
          set_has_remain_bind_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_time;
        break;
      }
      
      // optional int32 time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_platform;
        break;
      }
      
      // optional int32 platform = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platform_)));
          set_has_platform();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_market;
        break;
      }
      
      // optional int32 market = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_market:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &market_)));
          set_has_market();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecordMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->table_name(), output);
  }
  
  // optional int64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->role_id(), output);
  }
  
  // optional int32 serial_type = 3;
  if (has_serial_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->serial_type(), output);
  }
  
  // optional int32 sub_serial_type = 4;
  if (has_sub_serial_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sub_serial_type(), output);
  }
  
  // optional int32 sub_agent = 5;
  if (has_sub_agent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sub_agent(), output);
  }
  
  // optional int32 money_type = 6;
  if (has_money_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->money_type(), output);
  }
  
  // optional int32 money = 7;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->money(), output);
  }
  
  // optional int32 bind_money = 8;
  if (has_bind_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->bind_money(), output);
  }
  
  // optional int32 remain_money = 9;
  if (has_remain_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->remain_money(), output);
  }
  
  // optional int32 remain_bind_money = 10;
  if (has_remain_bind_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->remain_bind_money(), output);
  }
  
  // optional int32 time = 11;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->time(), output);
  }
  
  // optional int32 platform = 12;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->platform(), output);
  }
  
  // optional int32 market = 13;
  if (has_market()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->market(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecordMoney::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }
  
  // optional int64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->role_id(), target);
  }
  
  // optional int32 serial_type = 3;
  if (has_serial_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->serial_type(), target);
  }
  
  // optional int32 sub_serial_type = 4;
  if (has_sub_serial_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sub_serial_type(), target);
  }
  
  // optional int32 sub_agent = 5;
  if (has_sub_agent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sub_agent(), target);
  }
  
  // optional int32 money_type = 6;
  if (has_money_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->money_type(), target);
  }
  
  // optional int32 money = 7;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->money(), target);
  }
  
  // optional int32 bind_money = 8;
  if (has_bind_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->bind_money(), target);
  }
  
  // optional int32 remain_money = 9;
  if (has_remain_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->remain_money(), target);
  }
  
  // optional int32 remain_bind_money = 10;
  if (has_remain_bind_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->remain_bind_money(), target);
  }
  
  // optional int32 time = 11;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->time(), target);
  }
  
  // optional int32 platform = 12;
  if (has_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->platform(), target);
  }
  
  // optional int32 market = 13;
  if (has_market()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->market(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecordMoney::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }
    
    // optional int64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional int32 serial_type = 3;
    if (has_serial_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serial_type());
    }
    
    // optional int32 sub_serial_type = 4;
    if (has_sub_serial_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sub_serial_type());
    }
    
    // optional int32 sub_agent = 5;
    if (has_sub_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sub_agent());
    }
    
    // optional int32 money_type = 6;
    if (has_money_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money_type());
    }
    
    // optional int32 money = 7;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }
    
    // optional int32 bind_money = 8;
    if (has_bind_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bind_money());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 remain_money = 9;
    if (has_remain_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remain_money());
    }
    
    // optional int32 remain_bind_money = 10;
    if (has_remain_bind_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remain_bind_money());
    }
    
    // optional int32 time = 11;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
    // optional int32 platform = 12;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platform());
    }
    
    // optional int32 market = 13;
    if (has_market()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->market());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordMoney::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecordMoney* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecordMoney*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecordMoney::MergeFrom(const RecordMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_serial_type()) {
      set_serial_type(from.serial_type());
    }
    if (from.has_sub_serial_type()) {
      set_sub_serial_type(from.sub_serial_type());
    }
    if (from.has_sub_agent()) {
      set_sub_agent(from.sub_agent());
    }
    if (from.has_money_type()) {
      set_money_type(from.money_type());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_bind_money()) {
      set_bind_money(from.bind_money());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_remain_money()) {
      set_remain_money(from.remain_money());
    }
    if (from.has_remain_bind_money()) {
      set_remain_bind_money(from.remain_bind_money());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_market()) {
      set_market(from.market());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordMoney::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordMoney::CopyFrom(const RecordMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordMoney::IsInitialized() const {
  
  return true;
}

void RecordMoney::Swap(RecordMoney* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    std::swap(role_id_, other->role_id_);
    std::swap(serial_type_, other->serial_type_);
    std::swap(sub_serial_type_, other->sub_serial_type_);
    std::swap(sub_agent_, other->sub_agent_);
    std::swap(money_type_, other->money_type_);
    std::swap(money_, other->money_);
    std::swap(bind_money_, other->bind_money_);
    std::swap(remain_money_, other->remain_money_);
    std::swap(remain_bind_money_, other->remain_bind_money_);
    std::swap(time_, other->time_);
    std::swap(platform_, other->platform_);
    std::swap(market_, other->market_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecordMoney::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordMoney_descriptor_;
  metadata.reflection = RecordMoney_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecordItem::kTableNameFieldNumber;
const int RecordItem::kRoleIdFieldNumber;
const int RecordItem::kSerialTypeFieldNumber;
const int RecordItem::kSubSerialTypeFieldNumber;
const int RecordItem::kSubAgentFieldNumber;
const int RecordItem::kItemIdFieldNumber;
const int RecordItem::kAmountFieldNumber;
const int RecordItem::kBindFieldNumber;
const int RecordItem::kTimeFieldNumber;
const int RecordItem::kPlatformFieldNumber;
const int RecordItem::kMarketFieldNumber;
const int RecordItem::kSrcRoleIdFieldNumber;
const int RecordItem::kRoleLevelFieldNumber;
#endif  // !_MSC_VER

RecordItem::RecordItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecordItem::InitAsDefaultInstance() {
}

RecordItem::RecordItem(const RecordItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecordItem::SharedCtor() {
  _cached_size_ = 0;
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_id_ = GOOGLE_LONGLONG(0);
  serial_type_ = 0;
  sub_serial_type_ = 0;
  sub_agent_ = 0;
  item_id_ = 0;
  amount_ = 0;
  bind_ = 0;
  time_ = 0;
  platform_ = 0;
  market_ = 0;
  src_role_id_ = GOOGLE_LONGLONG(0);
  role_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordItem::~RecordItem() {
  SharedDtor();
}

void RecordItem::SharedDtor() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (this != default_instance_) {
  }
}

void RecordItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordItem_descriptor_;
}

const RecordItem& RecordItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInnerPublic_2eproto();  return *default_instance_;
}

RecordItem* RecordItem::default_instance_ = NULL;

RecordItem* RecordItem::New() const {
  return new RecordItem;
}

void RecordItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::kEmptyString) {
        table_name_->clear();
      }
    }
    role_id_ = GOOGLE_LONGLONG(0);
    serial_type_ = 0;
    sub_serial_type_ = 0;
    sub_agent_ = 0;
    item_id_ = 0;
    amount_ = 0;
    bind_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    time_ = 0;
    platform_ = 0;
    market_ = 0;
    src_role_id_ = GOOGLE_LONGLONG(0);
    role_level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }
      
      // optional int64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_serial_type;
        break;
      }
      
      // optional int32 serial_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serial_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serial_type_)));
          set_has_serial_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sub_serial_type;
        break;
      }
      
      // optional int32 sub_serial_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_serial_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub_serial_type_)));
          set_has_sub_serial_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sub_agent;
        break;
      }
      
      // optional int32 sub_agent = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_agent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub_agent_)));
          set_has_sub_agent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_item_id;
        break;
      }
      
      // optional int32 item_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_amount;
        break;
      }
      
      // optional int32 amount = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bind;
        break;
      }
      
      // optional int32 bind = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bind_)));
          set_has_bind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_time;
        break;
      }
      
      // optional int32 time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_platform;
        break;
      }
      
      // optional int32 platform = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platform_)));
          set_has_platform();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_market;
        break;
      }
      
      // optional int32 market = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_market:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &market_)));
          set_has_market();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_src_role_id;
        break;
      }
      
      // optional int64 src_role_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &src_role_id_)));
          set_has_src_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_role_level;
        break;
      }
      
      // optional int32 role_level = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_level_)));
          set_has_role_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecordItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->table_name(), output);
  }
  
  // optional int64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->role_id(), output);
  }
  
  // optional int32 serial_type = 3;
  if (has_serial_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->serial_type(), output);
  }
  
  // optional int32 sub_serial_type = 4;
  if (has_sub_serial_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sub_serial_type(), output);
  }
  
  // optional int32 sub_agent = 5;
  if (has_sub_agent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sub_agent(), output);
  }
  
  // optional int32 item_id = 6;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->item_id(), output);
  }
  
  // optional int32 amount = 7;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->amount(), output);
  }
  
  // optional int32 bind = 8;
  if (has_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->bind(), output);
  }
  
  // optional int32 time = 9;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->time(), output);
  }
  
  // optional int32 platform = 10;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->platform(), output);
  }
  
  // optional int32 market = 11;
  if (has_market()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->market(), output);
  }
  
  // optional int64 src_role_id = 12;
  if (has_src_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->src_role_id(), output);
  }
  
  // optional int32 role_level = 13;
  if (has_role_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->role_level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecordItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }
  
  // optional int64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->role_id(), target);
  }
  
  // optional int32 serial_type = 3;
  if (has_serial_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->serial_type(), target);
  }
  
  // optional int32 sub_serial_type = 4;
  if (has_sub_serial_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sub_serial_type(), target);
  }
  
  // optional int32 sub_agent = 5;
  if (has_sub_agent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sub_agent(), target);
  }
  
  // optional int32 item_id = 6;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->item_id(), target);
  }
  
  // optional int32 amount = 7;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->amount(), target);
  }
  
  // optional int32 bind = 8;
  if (has_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->bind(), target);
  }
  
  // optional int32 time = 9;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->time(), target);
  }
  
  // optional int32 platform = 10;
  if (has_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->platform(), target);
  }
  
  // optional int32 market = 11;
  if (has_market()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->market(), target);
  }
  
  // optional int64 src_role_id = 12;
  if (has_src_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->src_role_id(), target);
  }
  
  // optional int32 role_level = 13;
  if (has_role_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->role_level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecordItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }
    
    // optional int64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional int32 serial_type = 3;
    if (has_serial_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serial_type());
    }
    
    // optional int32 sub_serial_type = 4;
    if (has_sub_serial_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sub_serial_type());
    }
    
    // optional int32 sub_agent = 5;
    if (has_sub_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sub_agent());
    }
    
    // optional int32 item_id = 6;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }
    
    // optional int32 amount = 7;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->amount());
    }
    
    // optional int32 bind = 8;
    if (has_bind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bind());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 time = 9;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
    // optional int32 platform = 10;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platform());
    }
    
    // optional int32 market = 11;
    if (has_market()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->market());
    }
    
    // optional int64 src_role_id = 12;
    if (has_src_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->src_role_id());
    }
    
    // optional int32 role_level = 13;
    if (has_role_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecordItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecordItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecordItem::MergeFrom(const RecordItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_serial_type()) {
      set_serial_type(from.serial_type());
    }
    if (from.has_sub_serial_type()) {
      set_sub_serial_type(from.sub_serial_type());
    }
    if (from.has_sub_agent()) {
      set_sub_agent(from.sub_agent());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_bind()) {
      set_bind(from.bind());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_market()) {
      set_market(from.market());
    }
    if (from.has_src_role_id()) {
      set_src_role_id(from.src_role_id());
    }
    if (from.has_role_level()) {
      set_role_level(from.role_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordItem::CopyFrom(const RecordItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordItem::IsInitialized() const {
  
  return true;
}

void RecordItem::Swap(RecordItem* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    std::swap(role_id_, other->role_id_);
    std::swap(serial_type_, other->serial_type_);
    std::swap(sub_serial_type_, other->sub_serial_type_);
    std::swap(sub_agent_, other->sub_agent_);
    std::swap(item_id_, other->item_id_);
    std::swap(amount_, other->amount_);
    std::swap(bind_, other->bind_);
    std::swap(time_, other->time_);
    std::swap(platform_, other->platform_);
    std::swap(market_, other->market_);
    std::swap(src_role_id_, other->src_role_id_);
    std::swap(role_level_, other->role_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecordItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordItem_descriptor_;
  metadata.reflection = RecordItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecordEquipment::kTableNameFieldNumber;
const int RecordEquipment::kRoleIdFieldNumber;
const int RecordEquipment::kSerialTypeFieldNumber;
const int RecordEquipment::kSubAgentFieldNumber;
const int RecordEquipment::kEquipIdFieldNumber;
const int RecordEquipment::kAmountFieldNumber;
const int RecordEquipment::kTimeFieldNumber;
const int RecordEquipment::kBindFieldNumber;
const int RecordEquipment::kIndexFieldNumber;
const int RecordEquipment::kPackTypeFieldNumber;
const int RecordEquipment::kRefineLevelFieldNumber;
const int RecordEquipment::kRefineDegreeFieldNumber;
const int RecordEquipment::kSerialSubTypeFieldNumber;
const int RecordEquipment::kPlatformFieldNumber;
const int RecordEquipment::kLuckValueFieldNumber;
const int RecordEquipment::kJewelListsFieldNumber;
const int RecordEquipment::kCurPolishFieldNumber;
const int RecordEquipment::kExternAttrFieldNumber;
const int RecordEquipment::kMoldingFieldNumber;
#endif  // !_MSC_VER

RecordEquipment::RecordEquipment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecordEquipment::InitAsDefaultInstance() {
}

RecordEquipment::RecordEquipment(const RecordEquipment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecordEquipment::SharedCtor() {
  _cached_size_ = 0;
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_id_ = GOOGLE_LONGLONG(0);
  serial_type_ = 0;
  sub_agent_ = 0;
  equip_id_ = 0;
  amount_ = 0;
  time_ = 0;
  bind_ = 0;
  index_ = 0;
  pack_type_ = 0;
  refine_level_ = 0;
  refine_degree_ = 0;
  serial_sub_type_ = 0;
  platform_ = 0;
  luck_value_ = 0;
  jewel_lists_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cur_polish_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  extern_attr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  molding_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordEquipment::~RecordEquipment() {
  SharedDtor();
}

void RecordEquipment::SharedDtor() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (jewel_lists_ != &::google::protobuf::internal::kEmptyString) {
    delete jewel_lists_;
  }
  if (cur_polish_ != &::google::protobuf::internal::kEmptyString) {
    delete cur_polish_;
  }
  if (extern_attr_ != &::google::protobuf::internal::kEmptyString) {
    delete extern_attr_;
  }
  if (molding_ != &::google::protobuf::internal::kEmptyString) {
    delete molding_;
  }
  if (this != default_instance_) {
  }
}

void RecordEquipment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordEquipment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordEquipment_descriptor_;
}

const RecordEquipment& RecordEquipment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInnerPublic_2eproto();  return *default_instance_;
}

RecordEquipment* RecordEquipment::default_instance_ = NULL;

RecordEquipment* RecordEquipment::New() const {
  return new RecordEquipment;
}

void RecordEquipment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::kEmptyString) {
        table_name_->clear();
      }
    }
    role_id_ = GOOGLE_LONGLONG(0);
    serial_type_ = 0;
    sub_agent_ = 0;
    equip_id_ = 0;
    amount_ = 0;
    time_ = 0;
    bind_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    index_ = 0;
    pack_type_ = 0;
    refine_level_ = 0;
    refine_degree_ = 0;
    serial_sub_type_ = 0;
    platform_ = 0;
    luck_value_ = 0;
    if (has_jewel_lists()) {
      if (jewel_lists_ != &::google::protobuf::internal::kEmptyString) {
        jewel_lists_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_cur_polish()) {
      if (cur_polish_ != &::google::protobuf::internal::kEmptyString) {
        cur_polish_->clear();
      }
    }
    if (has_extern_attr()) {
      if (extern_attr_ != &::google::protobuf::internal::kEmptyString) {
        extern_attr_->clear();
      }
    }
    if (has_molding()) {
      if (molding_ != &::google::protobuf::internal::kEmptyString) {
        molding_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordEquipment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }
      
      // optional int64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_serial_type;
        break;
      }
      
      // optional int32 serial_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serial_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serial_type_)));
          set_has_serial_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sub_agent;
        break;
      }
      
      // optional int32 sub_agent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_agent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub_agent_)));
          set_has_sub_agent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_equip_id;
        break;
      }
      
      // optional int32 equip_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_id_)));
          set_has_equip_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_amount;
        break;
      }
      
      // optional int32 amount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_time;
        break;
      }
      
      // optional int32 time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bind;
        break;
      }
      
      // optional int32 bind = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bind_)));
          set_has_bind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_index;
        break;
      }
      
      // optional int32 index = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_pack_type;
        break;
      }
      
      // optional int32 pack_type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pack_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pack_type_)));
          set_has_pack_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_refine_level;
        break;
      }
      
      // optional int32 refine_level = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refine_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refine_level_)));
          set_has_refine_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_refine_degree;
        break;
      }
      
      // optional int32 refine_degree = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refine_degree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refine_degree_)));
          set_has_refine_degree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_serial_sub_type;
        break;
      }
      
      // optional int32 serial_sub_type = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serial_sub_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serial_sub_type_)));
          set_has_serial_sub_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_platform;
        break;
      }
      
      // optional int32 platform = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platform_)));
          set_has_platform();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_luck_value;
        break;
      }
      
      // optional int32 luck_value = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_luck_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &luck_value_)));
          set_has_luck_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_jewel_lists;
        break;
      }
      
      // optional string jewel_lists = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jewel_lists:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jewel_lists()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->jewel_lists().data(), this->jewel_lists().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_cur_polish;
        break;
      }
      
      // optional string cur_polish = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cur_polish:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cur_polish()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cur_polish().data(), this->cur_polish().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_extern_attr;
        break;
      }
      
      // optional string extern_attr = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extern_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extern_attr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->extern_attr().data(), this->extern_attr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_molding;
        break;
      }
      
      // optional string molding = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_molding:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_molding()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->molding().data(), this->molding().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecordEquipment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->table_name(), output);
  }
  
  // optional int64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->role_id(), output);
  }
  
  // optional int32 serial_type = 3;
  if (has_serial_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->serial_type(), output);
  }
  
  // optional int32 sub_agent = 4;
  if (has_sub_agent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sub_agent(), output);
  }
  
  // optional int32 equip_id = 5;
  if (has_equip_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->equip_id(), output);
  }
  
  // optional int32 amount = 6;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->amount(), output);
  }
  
  // optional int32 time = 7;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->time(), output);
  }
  
  // optional int32 bind = 8;
  if (has_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->bind(), output);
  }
  
  // optional int32 index = 9;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->index(), output);
  }
  
  // optional int32 pack_type = 10;
  if (has_pack_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->pack_type(), output);
  }
  
  // optional int32 refine_level = 11;
  if (has_refine_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->refine_level(), output);
  }
  
  // optional int32 refine_degree = 12;
  if (has_refine_degree()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->refine_degree(), output);
  }
  
  // optional int32 serial_sub_type = 13;
  if (has_serial_sub_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->serial_sub_type(), output);
  }
  
  // optional int32 platform = 14;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->platform(), output);
  }
  
  // optional int32 luck_value = 15;
  if (has_luck_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->luck_value(), output);
  }
  
  // optional string jewel_lists = 16;
  if (has_jewel_lists()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jewel_lists().data(), this->jewel_lists().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->jewel_lists(), output);
  }
  
  // optional string cur_polish = 17;
  if (has_cur_polish()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cur_polish().data(), this->cur_polish().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->cur_polish(), output);
  }
  
  // optional string extern_attr = 18;
  if (has_extern_attr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extern_attr().data(), this->extern_attr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->extern_attr(), output);
  }
  
  // optional string molding = 19;
  if (has_molding()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->molding().data(), this->molding().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->molding(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecordEquipment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }
  
  // optional int64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->role_id(), target);
  }
  
  // optional int32 serial_type = 3;
  if (has_serial_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->serial_type(), target);
  }
  
  // optional int32 sub_agent = 4;
  if (has_sub_agent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sub_agent(), target);
  }
  
  // optional int32 equip_id = 5;
  if (has_equip_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->equip_id(), target);
  }
  
  // optional int32 amount = 6;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->amount(), target);
  }
  
  // optional int32 time = 7;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->time(), target);
  }
  
  // optional int32 bind = 8;
  if (has_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->bind(), target);
  }
  
  // optional int32 index = 9;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->index(), target);
  }
  
  // optional int32 pack_type = 10;
  if (has_pack_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->pack_type(), target);
  }
  
  // optional int32 refine_level = 11;
  if (has_refine_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->refine_level(), target);
  }
  
  // optional int32 refine_degree = 12;
  if (has_refine_degree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->refine_degree(), target);
  }
  
  // optional int32 serial_sub_type = 13;
  if (has_serial_sub_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->serial_sub_type(), target);
  }
  
  // optional int32 platform = 14;
  if (has_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->platform(), target);
  }
  
  // optional int32 luck_value = 15;
  if (has_luck_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->luck_value(), target);
  }
  
  // optional string jewel_lists = 16;
  if (has_jewel_lists()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jewel_lists().data(), this->jewel_lists().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->jewel_lists(), target);
  }
  
  // optional string cur_polish = 17;
  if (has_cur_polish()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cur_polish().data(), this->cur_polish().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->cur_polish(), target);
  }
  
  // optional string extern_attr = 18;
  if (has_extern_attr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extern_attr().data(), this->extern_attr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->extern_attr(), target);
  }
  
  // optional string molding = 19;
  if (has_molding()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->molding().data(), this->molding().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->molding(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecordEquipment::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }
    
    // optional int64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional int32 serial_type = 3;
    if (has_serial_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serial_type());
    }
    
    // optional int32 sub_agent = 4;
    if (has_sub_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sub_agent());
    }
    
    // optional int32 equip_id = 5;
    if (has_equip_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_id());
    }
    
    // optional int32 amount = 6;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->amount());
    }
    
    // optional int32 time = 7;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
    // optional int32 bind = 8;
    if (has_bind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bind());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 index = 9;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional int32 pack_type = 10;
    if (has_pack_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pack_type());
    }
    
    // optional int32 refine_level = 11;
    if (has_refine_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refine_level());
    }
    
    // optional int32 refine_degree = 12;
    if (has_refine_degree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refine_degree());
    }
    
    // optional int32 serial_sub_type = 13;
    if (has_serial_sub_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serial_sub_type());
    }
    
    // optional int32 platform = 14;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platform());
    }
    
    // optional int32 luck_value = 15;
    if (has_luck_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->luck_value());
    }
    
    // optional string jewel_lists = 16;
    if (has_jewel_lists()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jewel_lists());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string cur_polish = 17;
    if (has_cur_polish()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cur_polish());
    }
    
    // optional string extern_attr = 18;
    if (has_extern_attr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extern_attr());
    }
    
    // optional string molding = 19;
    if (has_molding()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->molding());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordEquipment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecordEquipment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecordEquipment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecordEquipment::MergeFrom(const RecordEquipment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_serial_type()) {
      set_serial_type(from.serial_type());
    }
    if (from.has_sub_agent()) {
      set_sub_agent(from.sub_agent());
    }
    if (from.has_equip_id()) {
      set_equip_id(from.equip_id());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_bind()) {
      set_bind(from.bind());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_pack_type()) {
      set_pack_type(from.pack_type());
    }
    if (from.has_refine_level()) {
      set_refine_level(from.refine_level());
    }
    if (from.has_refine_degree()) {
      set_refine_degree(from.refine_degree());
    }
    if (from.has_serial_sub_type()) {
      set_serial_sub_type(from.serial_sub_type());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_luck_value()) {
      set_luck_value(from.luck_value());
    }
    if (from.has_jewel_lists()) {
      set_jewel_lists(from.jewel_lists());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_cur_polish()) {
      set_cur_polish(from.cur_polish());
    }
    if (from.has_extern_attr()) {
      set_extern_attr(from.extern_attr());
    }
    if (from.has_molding()) {
      set_molding(from.molding());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordEquipment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordEquipment::CopyFrom(const RecordEquipment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordEquipment::IsInitialized() const {
  
  return true;
}

void RecordEquipment::Swap(RecordEquipment* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    std::swap(role_id_, other->role_id_);
    std::swap(serial_type_, other->serial_type_);
    std::swap(sub_agent_, other->sub_agent_);
    std::swap(equip_id_, other->equip_id_);
    std::swap(amount_, other->amount_);
    std::swap(time_, other->time_);
    std::swap(bind_, other->bind_);
    std::swap(index_, other->index_);
    std::swap(pack_type_, other->pack_type_);
    std::swap(refine_level_, other->refine_level_);
    std::swap(refine_degree_, other->refine_degree_);
    std::swap(serial_sub_type_, other->serial_sub_type_);
    std::swap(platform_, other->platform_);
    std::swap(luck_value_, other->luck_value_);
    std::swap(jewel_lists_, other->jewel_lists_);
    std::swap(cur_polish_, other->cur_polish_);
    std::swap(extern_attr_, other->extern_attr_);
    std::swap(molding_, other->molding_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecordEquipment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordEquipment_descriptor_;
  metadata.reflection = RecordEquipment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecordPlayerLevel::kTableNameFieldNumber;
const int RecordPlayerLevel::kRoleIdFieldNumber;
const int RecordPlayerLevel::kSerialTypeFieldNumber;
const int RecordPlayerLevel::kSubAgentFieldNumber;
const int RecordPlayerLevel::kLevelFieldNumber;
const int RecordPlayerLevel::kTimeFieldNumber;
const int RecordPlayerLevel::kPlatformFieldNumber;
#endif  // !_MSC_VER

RecordPlayerLevel::RecordPlayerLevel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecordPlayerLevel::InitAsDefaultInstance() {
}

RecordPlayerLevel::RecordPlayerLevel(const RecordPlayerLevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecordPlayerLevel::SharedCtor() {
  _cached_size_ = 0;
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_id_ = GOOGLE_LONGLONG(0);
  serial_type_ = 0;
  sub_agent_ = 0;
  level_ = 0;
  time_ = 0;
  platform_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordPlayerLevel::~RecordPlayerLevel() {
  SharedDtor();
}

void RecordPlayerLevel::SharedDtor() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (this != default_instance_) {
  }
}

void RecordPlayerLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordPlayerLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordPlayerLevel_descriptor_;
}

const RecordPlayerLevel& RecordPlayerLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInnerPublic_2eproto();  return *default_instance_;
}

RecordPlayerLevel* RecordPlayerLevel::default_instance_ = NULL;

RecordPlayerLevel* RecordPlayerLevel::New() const {
  return new RecordPlayerLevel;
}

void RecordPlayerLevel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::kEmptyString) {
        table_name_->clear();
      }
    }
    role_id_ = GOOGLE_LONGLONG(0);
    serial_type_ = 0;
    sub_agent_ = 0;
    level_ = 0;
    time_ = 0;
    platform_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordPlayerLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }
      
      // optional int64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_serial_type;
        break;
      }
      
      // optional int32 serial_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serial_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serial_type_)));
          set_has_serial_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sub_agent;
        break;
      }
      
      // optional int32 sub_agent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_agent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub_agent_)));
          set_has_sub_agent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }
      
      // optional int32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }
      
      // optional int32 time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_platform;
        break;
      }
      
      // optional int32 platform = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platform_)));
          set_has_platform();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecordPlayerLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->table_name(), output);
  }
  
  // optional int64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->role_id(), output);
  }
  
  // optional int32 serial_type = 3;
  if (has_serial_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->serial_type(), output);
  }
  
  // optional int32 sub_agent = 4;
  if (has_sub_agent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sub_agent(), output);
  }
  
  // optional int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }
  
  // optional int32 time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->time(), output);
  }
  
  // optional int32 platform = 7;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->platform(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecordPlayerLevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }
  
  // optional int64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->role_id(), target);
  }
  
  // optional int32 serial_type = 3;
  if (has_serial_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->serial_type(), target);
  }
  
  // optional int32 sub_agent = 4;
  if (has_sub_agent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sub_agent(), target);
  }
  
  // optional int32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }
  
  // optional int32 time = 6;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->time(), target);
  }
  
  // optional int32 platform = 7;
  if (has_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->platform(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecordPlayerLevel::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }
    
    // optional int64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional int32 serial_type = 3;
    if (has_serial_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serial_type());
    }
    
    // optional int32 sub_agent = 4;
    if (has_sub_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sub_agent());
    }
    
    // optional int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
    // optional int32 platform = 7;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platform());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordPlayerLevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecordPlayerLevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecordPlayerLevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecordPlayerLevel::MergeFrom(const RecordPlayerLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_serial_type()) {
      set_serial_type(from.serial_type());
    }
    if (from.has_sub_agent()) {
      set_sub_agent(from.sub_agent());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordPlayerLevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordPlayerLevel::CopyFrom(const RecordPlayerLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordPlayerLevel::IsInitialized() const {
  
  return true;
}

void RecordPlayerLevel::Swap(RecordPlayerLevel* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    std::swap(role_id_, other->role_id_);
    std::swap(serial_type_, other->serial_type_);
    std::swap(sub_agent_, other->sub_agent_);
    std::swap(level_, other->level_);
    std::swap(time_, other->time_);
    std::swap(platform_, other->platform_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecordPlayerLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordPlayerLevel_descriptor_;
  metadata.reflection = RecordPlayerLevel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecordOtherSerial::kTableNameFieldNumber;
const int RecordOtherSerial::kRoleIdFieldNumber;
const int RecordOtherSerial::kSerialTypeFieldNumber;
const int RecordOtherSerial::kSubSerialTypeFieldNumber;
const int RecordOtherSerial::kSubAgentFieldNumber;
const int RecordOtherSerial::kValueFieldNumber;
const int RecordOtherSerial::kExt1FieldNumber;
const int RecordOtherSerial::kExt2FieldNumber;
const int RecordOtherSerial::kTimeFieldNumber;
const int RecordOtherSerial::kPlatformFieldNumber;
#endif  // !_MSC_VER

RecordOtherSerial::RecordOtherSerial()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecordOtherSerial::InitAsDefaultInstance() {
}

RecordOtherSerial::RecordOtherSerial(const RecordOtherSerial& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecordOtherSerial::SharedCtor() {
  _cached_size_ = 0;
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_id_ = GOOGLE_LONGLONG(0);
  serial_type_ = 0;
  sub_serial_type_ = 0;
  sub_agent_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  ext1_ = GOOGLE_LONGLONG(0);
  ext2_ = GOOGLE_LONGLONG(0);
  time_ = 0;
  platform_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordOtherSerial::~RecordOtherSerial() {
  SharedDtor();
}

void RecordOtherSerial::SharedDtor() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (this != default_instance_) {
  }
}

void RecordOtherSerial::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordOtherSerial::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordOtherSerial_descriptor_;
}

const RecordOtherSerial& RecordOtherSerial::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInnerPublic_2eproto();  return *default_instance_;
}

RecordOtherSerial* RecordOtherSerial::default_instance_ = NULL;

RecordOtherSerial* RecordOtherSerial::New() const {
  return new RecordOtherSerial;
}

void RecordOtherSerial::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::kEmptyString) {
        table_name_->clear();
      }
    }
    role_id_ = GOOGLE_LONGLONG(0);
    serial_type_ = 0;
    sub_serial_type_ = 0;
    sub_agent_ = 0;
    value_ = GOOGLE_LONGLONG(0);
    ext1_ = GOOGLE_LONGLONG(0);
    ext2_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    time_ = 0;
    platform_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordOtherSerial::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }
      
      // optional int64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_serial_type;
        break;
      }
      
      // optional int32 serial_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serial_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serial_type_)));
          set_has_serial_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sub_serial_type;
        break;
      }
      
      // optional int32 sub_serial_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_serial_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub_serial_type_)));
          set_has_sub_serial_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sub_agent;
        break;
      }
      
      // optional int32 sub_agent = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_agent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub_agent_)));
          set_has_sub_agent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_value;
        break;
      }
      
      // optional int64 value = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ext1;
        break;
      }
      
      // optional int64 ext1 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ext1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ext1_)));
          set_has_ext1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ext2;
        break;
      }
      
      // optional int64 ext2 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ext2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ext2_)));
          set_has_ext2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_time;
        break;
      }
      
      // optional int32 time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_platform;
        break;
      }
      
      // optional int32 platform = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platform_)));
          set_has_platform();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecordOtherSerial::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->table_name(), output);
  }
  
  // optional int64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->role_id(), output);
  }
  
  // optional int32 serial_type = 3;
  if (has_serial_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->serial_type(), output);
  }
  
  // optional int32 sub_serial_type = 4;
  if (has_sub_serial_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sub_serial_type(), output);
  }
  
  // optional int32 sub_agent = 5;
  if (has_sub_agent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sub_agent(), output);
  }
  
  // optional int64 value = 6;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->value(), output);
  }
  
  // optional int64 ext1 = 7;
  if (has_ext1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->ext1(), output);
  }
  
  // optional int64 ext2 = 8;
  if (has_ext2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->ext2(), output);
  }
  
  // optional int32 time = 9;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->time(), output);
  }
  
  // optional int32 platform = 10;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->platform(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecordOtherSerial::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }
  
  // optional int64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->role_id(), target);
  }
  
  // optional int32 serial_type = 3;
  if (has_serial_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->serial_type(), target);
  }
  
  // optional int32 sub_serial_type = 4;
  if (has_sub_serial_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sub_serial_type(), target);
  }
  
  // optional int32 sub_agent = 5;
  if (has_sub_agent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sub_agent(), target);
  }
  
  // optional int64 value = 6;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->value(), target);
  }
  
  // optional int64 ext1 = 7;
  if (has_ext1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->ext1(), target);
  }
  
  // optional int64 ext2 = 8;
  if (has_ext2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->ext2(), target);
  }
  
  // optional int32 time = 9;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->time(), target);
  }
  
  // optional int32 platform = 10;
  if (has_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->platform(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecordOtherSerial::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }
    
    // optional int64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional int32 serial_type = 3;
    if (has_serial_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serial_type());
    }
    
    // optional int32 sub_serial_type = 4;
    if (has_sub_serial_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sub_serial_type());
    }
    
    // optional int32 sub_agent = 5;
    if (has_sub_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sub_agent());
    }
    
    // optional int64 value = 6;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }
    
    // optional int64 ext1 = 7;
    if (has_ext1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ext1());
    }
    
    // optional int64 ext2 = 8;
    if (has_ext2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ext2());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 time = 9;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
    // optional int32 platform = 10;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platform());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordOtherSerial::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecordOtherSerial* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecordOtherSerial*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecordOtherSerial::MergeFrom(const RecordOtherSerial& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_serial_type()) {
      set_serial_type(from.serial_type());
    }
    if (from.has_sub_serial_type()) {
      set_sub_serial_type(from.sub_serial_type());
    }
    if (from.has_sub_agent()) {
      set_sub_agent(from.sub_agent());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_ext1()) {
      set_ext1(from.ext1());
    }
    if (from.has_ext2()) {
      set_ext2(from.ext2());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordOtherSerial::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordOtherSerial::CopyFrom(const RecordOtherSerial& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordOtherSerial::IsInitialized() const {
  
  return true;
}

void RecordOtherSerial::Swap(RecordOtherSerial* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    std::swap(role_id_, other->role_id_);
    std::swap(serial_type_, other->serial_type_);
    std::swap(sub_serial_type_, other->sub_serial_type_);
    std::swap(sub_agent_, other->sub_agent_);
    std::swap(value_, other->value_);
    std::swap(ext1_, other->ext1_);
    std::swap(ext2_, other->ext2_);
    std::swap(time_, other->time_);
    std::swap(platform_, other->platform_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecordOtherSerial::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordOtherSerial_descriptor_;
  metadata.reflection = RecordOtherSerial_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoScriptRecord::kScriptSortFieldNumber;
const int ProtoScriptRecord::kUsedTimesFieldNumber;
const int ProtoScriptRecord::kUsedTimesTickFieldNumber;
const int ProtoScriptRecord::kEnterScriptTickFieldNumber;
const int ProtoScriptRecord::kProgressIdFieldNumber;
const int ProtoScriptRecord::kBestUseTickFieldNumber;
const int ProtoScriptRecord::kIsFirstPassFieldNumber;
const int ProtoScriptRecord::kBuyLeftTimesFieldNumber;
const int ProtoScriptRecord::kCoupleBuyTimesFieldNumber;
const int ProtoScriptRecord::kDayPassTimesFieldNumber;
const int ProtoScriptRecord::kIsEvenEnterFieldNumber;
const int ProtoScriptRecord::kProtectBeastIndexFieldNumber;
#endif  // !_MSC_VER

ProtoScriptRecord::ProtoScriptRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoScriptRecord::InitAsDefaultInstance() {
}

ProtoScriptRecord::ProtoScriptRecord(const ProtoScriptRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoScriptRecord::SharedCtor() {
  _cached_size_ = 0;
  script_sort_ = 0;
  used_times_ = 0;
  used_times_tick_ = 0;
  enter_script_tick_ = 0;
  progress_id_ = GOOGLE_LONGLONG(0);
  best_use_tick_ = 0;
  is_first_pass_ = 0;
  buy_left_times_ = 0;
  couple_buy_times_ = 0;
  day_pass_times_ = 0;
  is_even_enter_ = 0;
  protect_beast_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoScriptRecord::~ProtoScriptRecord() {
  SharedDtor();
}

void ProtoScriptRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoScriptRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoScriptRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoScriptRecord_descriptor_;
}

const ProtoScriptRecord& ProtoScriptRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInnerPublic_2eproto();  return *default_instance_;
}

ProtoScriptRecord* ProtoScriptRecord::default_instance_ = NULL;

ProtoScriptRecord* ProtoScriptRecord::New() const {
  return new ProtoScriptRecord;
}

void ProtoScriptRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    script_sort_ = 0;
    used_times_ = 0;
    used_times_tick_ = 0;
    enter_script_tick_ = 0;
    progress_id_ = GOOGLE_LONGLONG(0);
    best_use_tick_ = 0;
    is_first_pass_ = 0;
    buy_left_times_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    couple_buy_times_ = 0;
    day_pass_times_ = 0;
    is_even_enter_ = 0;
    protect_beast_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoScriptRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 script_sort = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &script_sort_)));
          set_has_script_sort();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_used_times;
        break;
      }
      
      // optional int32 used_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_used_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &used_times_)));
          set_has_used_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_used_times_tick;
        break;
      }
      
      // optional int32 used_times_tick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_used_times_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &used_times_tick_)));
          set_has_used_times_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_enter_script_tick;
        break;
      }
      
      // optional int32 enter_script_tick = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enter_script_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enter_script_tick_)));
          set_has_enter_script_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_progress_id;
        break;
      }
      
      // optional int64 progress_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_progress_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &progress_id_)));
          set_has_progress_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_best_use_tick;
        break;
      }
      
      // optional int32 best_use_tick = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_best_use_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &best_use_tick_)));
          set_has_best_use_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_first_pass;
        break;
      }
      
      // optional int32 is_first_pass = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_first_pass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_first_pass_)));
          set_has_is_first_pass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_buy_left_times;
        break;
      }
      
      // optional int32 buy_left_times = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_left_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_left_times_)));
          set_has_buy_left_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_couple_buy_times;
        break;
      }
      
      // optional int32 couple_buy_times = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_couple_buy_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &couple_buy_times_)));
          set_has_couple_buy_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_day_pass_times;
        break;
      }
      
      // optional int32 day_pass_times = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_day_pass_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_pass_times_)));
          set_has_day_pass_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_is_even_enter;
        break;
      }
      
      // optional int32 is_even_enter = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_even_enter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_even_enter_)));
          set_has_is_even_enter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_protect_beast_index;
        break;
      }
      
      // optional int32 protect_beast_index = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_protect_beast_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &protect_beast_index_)));
          set_has_protect_beast_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoScriptRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 script_sort = 1;
  if (has_script_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->script_sort(), output);
  }
  
  // optional int32 used_times = 2;
  if (has_used_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->used_times(), output);
  }
  
  // optional int32 used_times_tick = 3;
  if (has_used_times_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->used_times_tick(), output);
  }
  
  // optional int32 enter_script_tick = 4;
  if (has_enter_script_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->enter_script_tick(), output);
  }
  
  // optional int64 progress_id = 5;
  if (has_progress_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->progress_id(), output);
  }
  
  // optional int32 best_use_tick = 6;
  if (has_best_use_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->best_use_tick(), output);
  }
  
  // optional int32 is_first_pass = 7;
  if (has_is_first_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->is_first_pass(), output);
  }
  
  // optional int32 buy_left_times = 8;
  if (has_buy_left_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->buy_left_times(), output);
  }
  
  // optional int32 couple_buy_times = 9;
  if (has_couple_buy_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->couple_buy_times(), output);
  }
  
  // optional int32 day_pass_times = 10;
  if (has_day_pass_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->day_pass_times(), output);
  }
  
  // optional int32 is_even_enter = 11;
  if (has_is_even_enter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->is_even_enter(), output);
  }
  
  // optional int32 protect_beast_index = 12;
  if (has_protect_beast_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->protect_beast_index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoScriptRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 script_sort = 1;
  if (has_script_sort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->script_sort(), target);
  }
  
  // optional int32 used_times = 2;
  if (has_used_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->used_times(), target);
  }
  
  // optional int32 used_times_tick = 3;
  if (has_used_times_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->used_times_tick(), target);
  }
  
  // optional int32 enter_script_tick = 4;
  if (has_enter_script_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->enter_script_tick(), target);
  }
  
  // optional int64 progress_id = 5;
  if (has_progress_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->progress_id(), target);
  }
  
  // optional int32 best_use_tick = 6;
  if (has_best_use_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->best_use_tick(), target);
  }
  
  // optional int32 is_first_pass = 7;
  if (has_is_first_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->is_first_pass(), target);
  }
  
  // optional int32 buy_left_times = 8;
  if (has_buy_left_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->buy_left_times(), target);
  }
  
  // optional int32 couple_buy_times = 9;
  if (has_couple_buy_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->couple_buy_times(), target);
  }
  
  // optional int32 day_pass_times = 10;
  if (has_day_pass_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->day_pass_times(), target);
  }
  
  // optional int32 is_even_enter = 11;
  if (has_is_even_enter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->is_even_enter(), target);
  }
  
  // optional int32 protect_beast_index = 12;
  if (has_protect_beast_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->protect_beast_index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoScriptRecord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 script_sort = 1;
    if (has_script_sort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->script_sort());
    }
    
    // optional int32 used_times = 2;
    if (has_used_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->used_times());
    }
    
    // optional int32 used_times_tick = 3;
    if (has_used_times_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->used_times_tick());
    }
    
    // optional int32 enter_script_tick = 4;
    if (has_enter_script_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enter_script_tick());
    }
    
    // optional int64 progress_id = 5;
    if (has_progress_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->progress_id());
    }
    
    // optional int32 best_use_tick = 6;
    if (has_best_use_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->best_use_tick());
    }
    
    // optional int32 is_first_pass = 7;
    if (has_is_first_pass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_first_pass());
    }
    
    // optional int32 buy_left_times = 8;
    if (has_buy_left_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_left_times());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 couple_buy_times = 9;
    if (has_couple_buy_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->couple_buy_times());
    }
    
    // optional int32 day_pass_times = 10;
    if (has_day_pass_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day_pass_times());
    }
    
    // optional int32 is_even_enter = 11;
    if (has_is_even_enter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_even_enter());
    }
    
    // optional int32 protect_beast_index = 12;
    if (has_protect_beast_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->protect_beast_index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoScriptRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoScriptRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoScriptRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoScriptRecord::MergeFrom(const ProtoScriptRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_script_sort()) {
      set_script_sort(from.script_sort());
    }
    if (from.has_used_times()) {
      set_used_times(from.used_times());
    }
    if (from.has_used_times_tick()) {
      set_used_times_tick(from.used_times_tick());
    }
    if (from.has_enter_script_tick()) {
      set_enter_script_tick(from.enter_script_tick());
    }
    if (from.has_progress_id()) {
      set_progress_id(from.progress_id());
    }
    if (from.has_best_use_tick()) {
      set_best_use_tick(from.best_use_tick());
    }
    if (from.has_is_first_pass()) {
      set_is_first_pass(from.is_first_pass());
    }
    if (from.has_buy_left_times()) {
      set_buy_left_times(from.buy_left_times());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_couple_buy_times()) {
      set_couple_buy_times(from.couple_buy_times());
    }
    if (from.has_day_pass_times()) {
      set_day_pass_times(from.day_pass_times());
    }
    if (from.has_is_even_enter()) {
      set_is_even_enter(from.is_even_enter());
    }
    if (from.has_protect_beast_index()) {
      set_protect_beast_index(from.protect_beast_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoScriptRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoScriptRecord::CopyFrom(const ProtoScriptRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoScriptRecord::IsInitialized() const {
  
  return true;
}

void ProtoScriptRecord::Swap(ProtoScriptRecord* other) {
  if (other != this) {
    std::swap(script_sort_, other->script_sort_);
    std::swap(used_times_, other->used_times_);
    std::swap(used_times_tick_, other->used_times_tick_);
    std::swap(enter_script_tick_, other->enter_script_tick_);
    std::swap(progress_id_, other->progress_id_);
    std::swap(best_use_tick_, other->best_use_tick_);
    std::swap(is_first_pass_, other->is_first_pass_);
    std::swap(buy_left_times_, other->buy_left_times_);
    std::swap(couple_buy_times_, other->couple_buy_times_);
    std::swap(day_pass_times_, other->day_pass_times_);
    std::swap(is_even_enter_, other->is_even_enter_);
    std::swap(protect_beast_index_, other->protect_beast_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoScriptRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoScriptRecord_descriptor_;
  metadata.reflection = ProtoScriptRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoLivenessTaskInfo::kTaskIdFieldNumber;
const int ProtoLivenessTaskInfo::kStatusFieldNumber;
const int ProtoLivenessTaskInfo::kTimeIndexFieldNumber;
const int ProtoLivenessTaskInfo::kNumFieldNumber;
const int ProtoLivenessTaskInfo::kFinishNumFieldNumber;
#endif  // !_MSC_VER

ProtoLivenessTaskInfo::ProtoLivenessTaskInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoLivenessTaskInfo::InitAsDefaultInstance() {
}

ProtoLivenessTaskInfo::ProtoLivenessTaskInfo(const ProtoLivenessTaskInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoLivenessTaskInfo::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0;
  status_ = 0;
  time_index_ = 0;
  num_ = 0;
  finish_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoLivenessTaskInfo::~ProtoLivenessTaskInfo() {
  SharedDtor();
}

void ProtoLivenessTaskInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoLivenessTaskInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoLivenessTaskInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoLivenessTaskInfo_descriptor_;
}

const ProtoLivenessTaskInfo& ProtoLivenessTaskInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInnerPublic_2eproto();  return *default_instance_;
}

ProtoLivenessTaskInfo* ProtoLivenessTaskInfo::default_instance_ = NULL;

ProtoLivenessTaskInfo* ProtoLivenessTaskInfo::New() const {
  return new ProtoLivenessTaskInfo;
}

void ProtoLivenessTaskInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0;
    status_ = 0;
    time_index_ = 0;
    num_ = 0;
    finish_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoLivenessTaskInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }
      
      // optional int32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time_index;
        break;
      }
      
      // optional int32 time_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_index_)));
          set_has_time_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num;
        break;
      }
      
      // optional int32 num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_finish_num;
        break;
      }
      
      // optional int32 finish_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finish_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &finish_num_)));
          set_has_finish_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoLivenessTaskInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->task_id(), output);
  }
  
  // optional int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }
  
  // optional int32 time_index = 3;
  if (has_time_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time_index(), output);
  }
  
  // optional int32 num = 4;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num(), output);
  }
  
  // optional int32 finish_num = 5;
  if (has_finish_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->finish_num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoLivenessTaskInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->task_id(), target);
  }
  
  // optional int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }
  
  // optional int32 time_index = 3;
  if (has_time_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time_index(), target);
  }
  
  // optional int32 num = 4;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num(), target);
  }
  
  // optional int32 finish_num = 5;
  if (has_finish_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->finish_num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoLivenessTaskInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_id());
    }
    
    // optional int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // optional int32 time_index = 3;
    if (has_time_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_index());
    }
    
    // optional int32 num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }
    
    // optional int32 finish_num = 5;
    if (has_finish_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->finish_num());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoLivenessTaskInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoLivenessTaskInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoLivenessTaskInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoLivenessTaskInfo::MergeFrom(const ProtoLivenessTaskInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_time_index()) {
      set_time_index(from.time_index());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_finish_num()) {
      set_finish_num(from.finish_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoLivenessTaskInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoLivenessTaskInfo::CopyFrom(const ProtoLivenessTaskInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoLivenessTaskInfo::IsInitialized() const {
  
  return true;
}

void ProtoLivenessTaskInfo::Swap(ProtoLivenessTaskInfo* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(status_, other->status_);
    std::swap(time_index_, other->time_index_);
    std::swap(num_, other->num_);
    std::swap(finish_num_, other->finish_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoLivenessTaskInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoLivenessTaskInfo_descriptor_;
  metadata.reflection = ProtoLivenessTaskInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoExpRestoreRecord::kIdFieldNumber;
const int ProtoExpRestoreRecord::kDateFieldNumber;
const int ProtoExpRestoreRecord::kCountFieldNumber;
const int ProtoExpRestoreRecord::kValidFieldNumber;
#endif  // !_MSC_VER

ProtoExpRestoreRecord::ProtoExpRestoreRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoExpRestoreRecord::InitAsDefaultInstance() {
}

ProtoExpRestoreRecord::ProtoExpRestoreRecord(const ProtoExpRestoreRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoExpRestoreRecord::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  date_ = 0;
  count_ = 0;
  valid_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoExpRestoreRecord::~ProtoExpRestoreRecord() {
  SharedDtor();
}

void ProtoExpRestoreRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoExpRestoreRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoExpRestoreRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoExpRestoreRecord_descriptor_;
}

const ProtoExpRestoreRecord& ProtoExpRestoreRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInnerPublic_2eproto();  return *default_instance_;
}

ProtoExpRestoreRecord* ProtoExpRestoreRecord::default_instance_ = NULL;

ProtoExpRestoreRecord* ProtoExpRestoreRecord::New() const {
  return new ProtoExpRestoreRecord;
}

void ProtoExpRestoreRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    date_ = 0;
    count_ = 0;
    valid_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoExpRestoreRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_date;
        break;
      }
      
      // optional int32 date = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &date_)));
          set_has_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }
      
      // optional int32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_valid;
        break;
      }
      
      // optional bool valid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &valid_)));
          set_has_valid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoExpRestoreRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 date = 2;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->date(), output);
  }
  
  // optional int32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }
  
  // optional bool valid = 4;
  if (has_valid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->valid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoExpRestoreRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 date = 2;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->date(), target);
  }
  
  // optional int32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }
  
  // optional bool valid = 4;
  if (has_valid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->valid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoExpRestoreRecord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 date = 2;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->date());
    }
    
    // optional int32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
    // optional bool valid = 4;
    if (has_valid()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoExpRestoreRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoExpRestoreRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoExpRestoreRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoExpRestoreRecord::MergeFrom(const ProtoExpRestoreRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_valid()) {
      set_valid(from.valid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoExpRestoreRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoExpRestoreRecord::CopyFrom(const ProtoExpRestoreRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoExpRestoreRecord::IsInitialized() const {
  
  return true;
}

void ProtoExpRestoreRecord::Swap(ProtoExpRestoreRecord* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(date_, other->date_);
    std::swap(count_, other->count_);
    std::swap(valid_, other->valid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoExpRestoreRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoExpRestoreRecord_descriptor_;
  metadata.reflection = ProtoExpRestoreRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoMagicalPolish::kMagicalIdFieldNumber;
const int ProtoMagicalPolish::kCurUseFieldNumber;
const int ProtoMagicalPolish::kSingleRecordFieldNumber;
const int ProtoMagicalPolish::kBatchRecordFieldNumber;
#endif  // !_MSC_VER

ProtoMagicalPolish::ProtoMagicalPolish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoMagicalPolish::InitAsDefaultInstance() {
  cur_use_ = const_cast< ::ProtoMagicalInfo*>(&::ProtoMagicalInfo::default_instance());
  single_record_ = const_cast< ::ProtoMagicalInfo*>(&::ProtoMagicalInfo::default_instance());
}

ProtoMagicalPolish::ProtoMagicalPolish(const ProtoMagicalPolish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoMagicalPolish::SharedCtor() {
  _cached_size_ = 0;
  magical_id_ = 0;
  cur_use_ = NULL;
  single_record_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoMagicalPolish::~ProtoMagicalPolish() {
  SharedDtor();
}

void ProtoMagicalPolish::SharedDtor() {
  if (this != default_instance_) {
    delete cur_use_;
    delete single_record_;
  }
}

void ProtoMagicalPolish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoMagicalPolish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoMagicalPolish_descriptor_;
}

const ProtoMagicalPolish& ProtoMagicalPolish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInnerPublic_2eproto();  return *default_instance_;
}

ProtoMagicalPolish* ProtoMagicalPolish::default_instance_ = NULL;

ProtoMagicalPolish* ProtoMagicalPolish::New() const {
  return new ProtoMagicalPolish;
}

void ProtoMagicalPolish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    magical_id_ = 0;
    if (has_cur_use()) {
      if (cur_use_ != NULL) cur_use_->::ProtoMagicalInfo::Clear();
    }
    if (has_single_record()) {
      if (single_record_ != NULL) single_record_->::ProtoMagicalInfo::Clear();
    }
  }
  batch_record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoMagicalPolish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 magical_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magical_id_)));
          set_has_magical_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cur_use;
        break;
      }
      
      // optional .ProtoMagicalInfo cur_use = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cur_use:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cur_use()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_single_record;
        break;
      }
      
      // optional .ProtoMagicalInfo single_record = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_single_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_single_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_batch_record;
        break;
      }
      
      // repeated .ProtoMagicalInfo batch_record = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_batch_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_batch_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_batch_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoMagicalPolish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 magical_id = 1;
  if (has_magical_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->magical_id(), output);
  }
  
  // optional .ProtoMagicalInfo cur_use = 2;
  if (has_cur_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cur_use(), output);
  }
  
  // optional .ProtoMagicalInfo single_record = 3;
  if (has_single_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->single_record(), output);
  }
  
  // repeated .ProtoMagicalInfo batch_record = 4;
  for (int i = 0; i < this->batch_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->batch_record(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoMagicalPolish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 magical_id = 1;
  if (has_magical_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->magical_id(), target);
  }
  
  // optional .ProtoMagicalInfo cur_use = 2;
  if (has_cur_use()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cur_use(), target);
  }
  
  // optional .ProtoMagicalInfo single_record = 3;
  if (has_single_record()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->single_record(), target);
  }
  
  // repeated .ProtoMagicalInfo batch_record = 4;
  for (int i = 0; i < this->batch_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->batch_record(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoMagicalPolish::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 magical_id = 1;
    if (has_magical_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magical_id());
    }
    
    // optional .ProtoMagicalInfo cur_use = 2;
    if (has_cur_use()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cur_use());
    }
    
    // optional .ProtoMagicalInfo single_record = 3;
    if (has_single_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->single_record());
    }
    
  }
  // repeated .ProtoMagicalInfo batch_record = 4;
  total_size += 1 * this->batch_record_size();
  for (int i = 0; i < this->batch_record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->batch_record(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoMagicalPolish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoMagicalPolish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoMagicalPolish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoMagicalPolish::MergeFrom(const ProtoMagicalPolish& from) {
  GOOGLE_CHECK_NE(&from, this);
  batch_record_.MergeFrom(from.batch_record_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_magical_id()) {
      set_magical_id(from.magical_id());
    }
    if (from.has_cur_use()) {
      mutable_cur_use()->::ProtoMagicalInfo::MergeFrom(from.cur_use());
    }
    if (from.has_single_record()) {
      mutable_single_record()->::ProtoMagicalInfo::MergeFrom(from.single_record());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoMagicalPolish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMagicalPolish::CopyFrom(const ProtoMagicalPolish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMagicalPolish::IsInitialized() const {
  
  return true;
}

void ProtoMagicalPolish::Swap(ProtoMagicalPolish* other) {
  if (other != this) {
    std::swap(magical_id_, other->magical_id_);
    std::swap(cur_use_, other->cur_use_);
    std::swap(single_record_, other->single_record_);
    batch_record_.Swap(&other->batch_record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoMagicalPolish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoMagicalPolish_descriptor_;
  metadata.reflection = ProtoMagicalPolish_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoPieceInfo::kChapterKeyFieldNumber;
const int ProtoPieceInfo::kUsedSecFieldNumber;
const int ProtoPieceInfo::kUsedTimesFieldNumber;
const int ProtoPieceInfo::kAwardFlagFieldNumber;
const int ProtoPieceInfo::kChapterItemIdFieldNumber;
const int ProtoPieceInfo::kChapterItemNumFieldNumber;
const int ProtoPieceInfo::kTodayPassFlagFieldNumber;
#endif  // !_MSC_VER

ProtoPieceInfo::ProtoPieceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoPieceInfo::InitAsDefaultInstance() {
}

ProtoPieceInfo::ProtoPieceInfo(const ProtoPieceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoPieceInfo::SharedCtor() {
  _cached_size_ = 0;
  chapter_key_ = 0;
  used_sec_ = 0;
  used_times_ = 0;
  award_flag_ = 0;
  today_pass_flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoPieceInfo::~ProtoPieceInfo() {
  SharedDtor();
}

void ProtoPieceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoPieceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoPieceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoPieceInfo_descriptor_;
}

const ProtoPieceInfo& ProtoPieceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInnerPublic_2eproto();  return *default_instance_;
}

ProtoPieceInfo* ProtoPieceInfo::default_instance_ = NULL;

ProtoPieceInfo* ProtoPieceInfo::New() const {
  return new ProtoPieceInfo;
}

void ProtoPieceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chapter_key_ = 0;
    used_sec_ = 0;
    used_times_ = 0;
    award_flag_ = 0;
    today_pass_flag_ = 0;
  }
  chapter_item_id_.Clear();
  chapter_item_num_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoPieceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chapter_key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chapter_key_)));
          set_has_chapter_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_used_sec;
        break;
      }
      
      // optional int32 used_sec = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_used_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &used_sec_)));
          set_has_used_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_used_times;
        break;
      }
      
      // optional int32 used_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_used_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &used_times_)));
          set_has_used_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_award_flag;
        break;
      }
      
      // optional int32 award_flag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_award_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &award_flag_)));
          set_has_award_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_chapter_item_id;
        break;
      }
      
      // repeated int32 chapter_item_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chapter_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_chapter_item_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_chapter_item_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_chapter_item_id;
        if (input->ExpectTag(48)) goto parse_chapter_item_num;
        break;
      }
      
      // repeated int32 chapter_item_num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chapter_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_chapter_item_num())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_chapter_item_num())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_chapter_item_num;
        if (input->ExpectTag(56)) goto parse_today_pass_flag;
        break;
      }
      
      // optional int32 today_pass_flag = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_pass_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &today_pass_flag_)));
          set_has_today_pass_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoPieceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chapter_key = 1;
  if (has_chapter_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chapter_key(), output);
  }
  
  // optional int32 used_sec = 2;
  if (has_used_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->used_sec(), output);
  }
  
  // optional int32 used_times = 3;
  if (has_used_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->used_times(), output);
  }
  
  // optional int32 award_flag = 4;
  if (has_award_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->award_flag(), output);
  }
  
  // repeated int32 chapter_item_id = 5;
  for (int i = 0; i < this->chapter_item_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->chapter_item_id(i), output);
  }
  
  // repeated int32 chapter_item_num = 6;
  for (int i = 0; i < this->chapter_item_num_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->chapter_item_num(i), output);
  }
  
  // optional int32 today_pass_flag = 7;
  if (has_today_pass_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->today_pass_flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoPieceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 chapter_key = 1;
  if (has_chapter_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chapter_key(), target);
  }
  
  // optional int32 used_sec = 2;
  if (has_used_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->used_sec(), target);
  }
  
  // optional int32 used_times = 3;
  if (has_used_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->used_times(), target);
  }
  
  // optional int32 award_flag = 4;
  if (has_award_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->award_flag(), target);
  }
  
  // repeated int32 chapter_item_id = 5;
  for (int i = 0; i < this->chapter_item_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->chapter_item_id(i), target);
  }
  
  // repeated int32 chapter_item_num = 6;
  for (int i = 0; i < this->chapter_item_num_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->chapter_item_num(i), target);
  }
  
  // optional int32 today_pass_flag = 7;
  if (has_today_pass_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->today_pass_flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoPieceInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chapter_key = 1;
    if (has_chapter_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chapter_key());
    }
    
    // optional int32 used_sec = 2;
    if (has_used_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->used_sec());
    }
    
    // optional int32 used_times = 3;
    if (has_used_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->used_times());
    }
    
    // optional int32 award_flag = 4;
    if (has_award_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->award_flag());
    }
    
    // optional int32 today_pass_flag = 7;
    if (has_today_pass_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->today_pass_flag());
    }
    
  }
  // repeated int32 chapter_item_id = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->chapter_item_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->chapter_item_id(i));
    }
    total_size += 1 * this->chapter_item_id_size() + data_size;
  }
  
  // repeated int32 chapter_item_num = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->chapter_item_num_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->chapter_item_num(i));
    }
    total_size += 1 * this->chapter_item_num_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoPieceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoPieceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoPieceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoPieceInfo::MergeFrom(const ProtoPieceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  chapter_item_id_.MergeFrom(from.chapter_item_id_);
  chapter_item_num_.MergeFrom(from.chapter_item_num_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chapter_key()) {
      set_chapter_key(from.chapter_key());
    }
    if (from.has_used_sec()) {
      set_used_sec(from.used_sec());
    }
    if (from.has_used_times()) {
      set_used_times(from.used_times());
    }
    if (from.has_award_flag()) {
      set_award_flag(from.award_flag());
    }
    if (from.has_today_pass_flag()) {
      set_today_pass_flag(from.today_pass_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoPieceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoPieceInfo::CopyFrom(const ProtoPieceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoPieceInfo::IsInitialized() const {
  
  return true;
}

void ProtoPieceInfo::Swap(ProtoPieceInfo* other) {
  if (other != this) {
    std::swap(chapter_key_, other->chapter_key_);
    std::swap(used_sec_, other->used_sec_);
    std::swap(used_times_, other->used_times_);
    std::swap(award_flag_, other->award_flag_);
    chapter_item_id_.Swap(&other->chapter_item_id_);
    chapter_item_num_.Swap(&other->chapter_item_num_);
    std::swap(today_pass_flag_, other->today_pass_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoPieceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoPieceInfo_descriptor_;
  metadata.reflection = ProtoPieceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoBrocastNewInfo::kShoutIdFieldNumber;
const int ProtoBrocastNewInfo::kGroupIdFieldNumber;
const int ProtoBrocastNewInfo::kChannelTypeFieldNumber;
const int ProtoBrocastNewInfo::kShoutDetailListFieldNumber;
const int ProtoBrocastNewInfo::kSceneIdFieldNumber;
const int ProtoBrocastNewInfo::kRoleFieldNumber;
#endif  // !_MSC_VER

ProtoBrocastNewInfo::ProtoBrocastNewInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoBrocastNewInfo::InitAsDefaultInstance() {
}

ProtoBrocastNewInfo::ProtoBrocastNewInfo(const ProtoBrocastNewInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoBrocastNewInfo::SharedCtor() {
  _cached_size_ = 0;
  shout_id_ = 0;
  group_id_ = GOOGLE_LONGLONG(0);
  channel_type_ = 0;
  scene_id_ = 0;
  role_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoBrocastNewInfo::~ProtoBrocastNewInfo() {
  SharedDtor();
}

void ProtoBrocastNewInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoBrocastNewInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoBrocastNewInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoBrocastNewInfo_descriptor_;
}

const ProtoBrocastNewInfo& ProtoBrocastNewInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInnerPublic_2eproto();  return *default_instance_;
}

ProtoBrocastNewInfo* ProtoBrocastNewInfo::default_instance_ = NULL;

ProtoBrocastNewInfo* ProtoBrocastNewInfo::New() const {
  return new ProtoBrocastNewInfo;
}

void ProtoBrocastNewInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    shout_id_ = 0;
    group_id_ = GOOGLE_LONGLONG(0);
    channel_type_ = 0;
    scene_id_ = 0;
    role_ = GOOGLE_LONGLONG(0);
  }
  shout_detail_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoBrocastNewInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 shout_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shout_id_)));
          set_has_shout_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }
      
      // optional int64 group_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel_type;
        break;
      }
      
      // optional int32 channel_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_type_)));
          set_has_channel_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_shout_detail_list;
        break;
      }
      
      // repeated .ProtoShoutDetail shout_detail_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shout_detail_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shout_detail_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_shout_detail_list;
        if (input->ExpectTag(40)) goto parse_scene_id;
        break;
      }
      
      // optional int32 scene_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_role;
        break;
      }
      
      // optional int64 role = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_)));
          set_has_role();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoBrocastNewInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 shout_id = 1;
  if (has_shout_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->shout_id(), output);
  }
  
  // optional int64 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->group_id(), output);
  }
  
  // optional int32 channel_type = 3;
  if (has_channel_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->channel_type(), output);
  }
  
  // repeated .ProtoShoutDetail shout_detail_list = 4;
  for (int i = 0; i < this->shout_detail_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->shout_detail_list(i), output);
  }
  
  // optional int32 scene_id = 5;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->scene_id(), output);
  }
  
  // optional int64 role = 6;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->role(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoBrocastNewInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 shout_id = 1;
  if (has_shout_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->shout_id(), target);
  }
  
  // optional int64 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->group_id(), target);
  }
  
  // optional int32 channel_type = 3;
  if (has_channel_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->channel_type(), target);
  }
  
  // repeated .ProtoShoutDetail shout_detail_list = 4;
  for (int i = 0; i < this->shout_detail_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->shout_detail_list(i), target);
  }
  
  // optional int32 scene_id = 5;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->scene_id(), target);
  }
  
  // optional int64 role = 6;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->role(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoBrocastNewInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 shout_id = 1;
    if (has_shout_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shout_id());
    }
    
    // optional int64 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->group_id());
    }
    
    // optional int32 channel_type = 3;
    if (has_channel_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel_type());
    }
    
    // optional int32 scene_id = 5;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_id());
    }
    
    // optional int64 role = 6;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role());
    }
    
  }
  // repeated .ProtoShoutDetail shout_detail_list = 4;
  total_size += 1 * this->shout_detail_list_size();
  for (int i = 0; i < this->shout_detail_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shout_detail_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoBrocastNewInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoBrocastNewInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoBrocastNewInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoBrocastNewInfo::MergeFrom(const ProtoBrocastNewInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  shout_detail_list_.MergeFrom(from.shout_detail_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shout_id()) {
      set_shout_id(from.shout_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_channel_type()) {
      set_channel_type(from.channel_type());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_role()) {
      set_role(from.role());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoBrocastNewInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoBrocastNewInfo::CopyFrom(const ProtoBrocastNewInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoBrocastNewInfo::IsInitialized() const {
  
  return true;
}

void ProtoBrocastNewInfo::Swap(ProtoBrocastNewInfo* other) {
  if (other != this) {
    std::swap(shout_id_, other->shout_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(channel_type_, other->channel_type_);
    shout_detail_list_.Swap(&other->shout_detail_list_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(role_, other->role_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoBrocastNewInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoBrocastNewInfo_descriptor_;
  metadata.reflection = ProtoBrocastNewInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoFashionTips::kFashionIdFieldNumber;
const int ProtoFashionTips::kFashionForceFieldNumber;
const int ProtoFashionTips::kLeftSecFieldNumber;
const int ProtoFashionTips::kMartialIdFieldNumber;
#endif  // !_MSC_VER

ProtoFashionTips::ProtoFashionTips()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoFashionTips::InitAsDefaultInstance() {
}

ProtoFashionTips::ProtoFashionTips(const ProtoFashionTips& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoFashionTips::SharedCtor() {
  _cached_size_ = 0;
  fashion_id_ = 0;
  fashion_force_ = 0;
  left_sec_ = 0;
  martial_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoFashionTips::~ProtoFashionTips() {
  SharedDtor();
}

void ProtoFashionTips::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoFashionTips::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoFashionTips::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoFashionTips_descriptor_;
}

const ProtoFashionTips& ProtoFashionTips::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInnerPublic_2eproto();  return *default_instance_;
}

ProtoFashionTips* ProtoFashionTips::default_instance_ = NULL;

ProtoFashionTips* ProtoFashionTips::New() const {
  return new ProtoFashionTips;
}

void ProtoFashionTips::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fashion_id_ = 0;
    fashion_force_ = 0;
    left_sec_ = 0;
    martial_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoFashionTips::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fashion_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fashion_id_)));
          set_has_fashion_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fashion_force;
        break;
      }
      
      // optional int32 fashion_force = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashion_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fashion_force_)));
          set_has_fashion_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_left_sec;
        break;
      }
      
      // optional int32 left_sec = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_sec_)));
          set_has_left_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_martial_id;
        break;
      }
      
      // optional int32 martial_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_martial_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &martial_id_)));
          set_has_martial_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoFashionTips::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 fashion_id = 1;
  if (has_fashion_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fashion_id(), output);
  }
  
  // optional int32 fashion_force = 2;
  if (has_fashion_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fashion_force(), output);
  }
  
  // optional int32 left_sec = 3;
  if (has_left_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->left_sec(), output);
  }
  
  // optional int32 martial_id = 4;
  if (has_martial_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->martial_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoFashionTips::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 fashion_id = 1;
  if (has_fashion_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fashion_id(), target);
  }
  
  // optional int32 fashion_force = 2;
  if (has_fashion_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fashion_force(), target);
  }
  
  // optional int32 left_sec = 3;
  if (has_left_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->left_sec(), target);
  }
  
  // optional int32 martial_id = 4;
  if (has_martial_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->martial_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoFashionTips::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 fashion_id = 1;
    if (has_fashion_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fashion_id());
    }
    
    // optional int32 fashion_force = 2;
    if (has_fashion_force()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fashion_force());
    }
    
    // optional int32 left_sec = 3;
    if (has_left_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_sec());
    }
    
    // optional int32 martial_id = 4;
    if (has_martial_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->martial_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoFashionTips::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoFashionTips* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoFashionTips*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoFashionTips::MergeFrom(const ProtoFashionTips& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fashion_id()) {
      set_fashion_id(from.fashion_id());
    }
    if (from.has_fashion_force()) {
      set_fashion_force(from.fashion_force());
    }
    if (from.has_left_sec()) {
      set_left_sec(from.left_sec());
    }
    if (from.has_martial_id()) {
      set_martial_id(from.martial_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoFashionTips::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoFashionTips::CopyFrom(const ProtoFashionTips& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoFashionTips::IsInitialized() const {
  
  return true;
}

void ProtoFashionTips::Swap(ProtoFashionTips* other) {
  if (other != this) {
    std::swap(fashion_id_, other->fashion_id_);
    std::swap(fashion_force_, other->fashion_force_);
    std::swap(left_sec_, other->left_sec_);
    std::swap(martial_id_, other->martial_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoFashionTips::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoFashionTips_descriptor_;
  metadata.reflection = ProtoFashionTips_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoPlayerTipSyncInfo::kEventIdFieldNumber;
const int ProtoPlayerTipSyncInfo::kArenaRewardFieldNumber;
#endif  // !_MSC_VER

ProtoPlayerTipSyncInfo::ProtoPlayerTipSyncInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoPlayerTipSyncInfo::InitAsDefaultInstance() {
}

ProtoPlayerTipSyncInfo::ProtoPlayerTipSyncInfo(const ProtoPlayerTipSyncInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoPlayerTipSyncInfo::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0;
  arena_reward_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoPlayerTipSyncInfo::~ProtoPlayerTipSyncInfo() {
  SharedDtor();
}

void ProtoPlayerTipSyncInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoPlayerTipSyncInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoPlayerTipSyncInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoPlayerTipSyncInfo_descriptor_;
}

const ProtoPlayerTipSyncInfo& ProtoPlayerTipSyncInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInnerPublic_2eproto();  return *default_instance_;
}

ProtoPlayerTipSyncInfo* ProtoPlayerTipSyncInfo::default_instance_ = NULL;

ProtoPlayerTipSyncInfo* ProtoPlayerTipSyncInfo::New() const {
  return new ProtoPlayerTipSyncInfo;
}

void ProtoPlayerTipSyncInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_id_ = 0;
    arena_reward_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoPlayerTipSyncInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 event_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_arena_reward;
        break;
      }
      
      // optional int32 arena_reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arena_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arena_reward_)));
          set_has_arena_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoPlayerTipSyncInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event_id(), output);
  }
  
  // optional int32 arena_reward = 2;
  if (has_arena_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->arena_reward(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoPlayerTipSyncInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event_id(), target);
  }
  
  // optional int32 arena_reward = 2;
  if (has_arena_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->arena_reward(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoPlayerTipSyncInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_id());
    }
    
    // optional int32 arena_reward = 2;
    if (has_arena_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arena_reward());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoPlayerTipSyncInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoPlayerTipSyncInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoPlayerTipSyncInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoPlayerTipSyncInfo::MergeFrom(const ProtoPlayerTipSyncInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_arena_reward()) {
      set_arena_reward(from.arena_reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoPlayerTipSyncInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoPlayerTipSyncInfo::CopyFrom(const ProtoPlayerTipSyncInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoPlayerTipSyncInfo::IsInitialized() const {
  
  return true;
}

void ProtoPlayerTipSyncInfo::Swap(ProtoPlayerTipSyncInfo* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(arena_reward_, other->arena_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoPlayerTipSyncInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoPlayerTipSyncInfo_descriptor_;
  metadata.reflection = ProtoPlayerTipSyncInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoSyncLabel::kLabelIdFieldNumber;
const int ProtoSyncLabel::kExpireTickFieldNumber;
#endif  // !_MSC_VER

ProtoSyncLabel::ProtoSyncLabel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoSyncLabel::InitAsDefaultInstance() {
}

ProtoSyncLabel::ProtoSyncLabel(const ProtoSyncLabel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoSyncLabel::SharedCtor() {
  _cached_size_ = 0;
  label_id_ = 0;
  expire_tick_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoSyncLabel::~ProtoSyncLabel() {
  SharedDtor();
}

void ProtoSyncLabel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoSyncLabel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoSyncLabel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoSyncLabel_descriptor_;
}

const ProtoSyncLabel& ProtoSyncLabel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInnerPublic_2eproto();  return *default_instance_;
}

ProtoSyncLabel* ProtoSyncLabel::default_instance_ = NULL;

ProtoSyncLabel* ProtoSyncLabel::New() const {
  return new ProtoSyncLabel;
}

void ProtoSyncLabel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    label_id_ = 0;
    expire_tick_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoSyncLabel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 label_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &label_id_)));
          set_has_label_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_expire_tick;
        break;
      }
      
      // optional int64 expire_tick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expire_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expire_tick_)));
          set_has_expire_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoSyncLabel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 label_id = 1;
  if (has_label_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->label_id(), output);
  }
  
  // optional int64 expire_tick = 2;
  if (has_expire_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->expire_tick(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoSyncLabel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 label_id = 1;
  if (has_label_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->label_id(), target);
  }
  
  // optional int64 expire_tick = 2;
  if (has_expire_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->expire_tick(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoSyncLabel::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 label_id = 1;
    if (has_label_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->label_id());
    }
    
    // optional int64 expire_tick = 2;
    if (has_expire_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expire_tick());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoSyncLabel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoSyncLabel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoSyncLabel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoSyncLabel::MergeFrom(const ProtoSyncLabel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_label_id()) {
      set_label_id(from.label_id());
    }
    if (from.has_expire_tick()) {
      set_expire_tick(from.expire_tick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoSyncLabel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoSyncLabel::CopyFrom(const ProtoSyncLabel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoSyncLabel::IsInitialized() const {
  
  return true;
}

void ProtoSyncLabel::Swap(ProtoSyncLabel* other) {
  if (other != this) {
    std::swap(label_id_, other->label_id_);
    std::swap(expire_tick_, other->expire_tick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoSyncLabel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoSyncLabel_descriptor_;
  metadata.reflection = ProtoSyncLabel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecordOnlineUsers::kTableNameFieldNumber;
const int RecordOnlineUsers::kSubAgentFieldNumber;
const int RecordOnlineUsers::kPlatformFieldNumber;
const int RecordOnlineUsers::kMarketFieldNumber;
const int RecordOnlineUsers::kUsersFieldNumber;
const int RecordOnlineUsers::kHookingUsersFieldNumber;
const int RecordOnlineUsers::kTimeFieldNumber;
#endif  // !_MSC_VER

RecordOnlineUsers::RecordOnlineUsers()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecordOnlineUsers::InitAsDefaultInstance() {
}

RecordOnlineUsers::RecordOnlineUsers(const RecordOnlineUsers& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecordOnlineUsers::SharedCtor() {
  _cached_size_ = 0;
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sub_agent_ = 0;
  platform_ = 0;
  market_ = 0;
  users_ = 0;
  hooking_users_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordOnlineUsers::~RecordOnlineUsers() {
  SharedDtor();
}

void RecordOnlineUsers::SharedDtor() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (this != default_instance_) {
  }
}

void RecordOnlineUsers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordOnlineUsers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordOnlineUsers_descriptor_;
}

const RecordOnlineUsers& RecordOnlineUsers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInnerPublic_2eproto();  return *default_instance_;
}

RecordOnlineUsers* RecordOnlineUsers::default_instance_ = NULL;

RecordOnlineUsers* RecordOnlineUsers::New() const {
  return new RecordOnlineUsers;
}

void RecordOnlineUsers::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::kEmptyString) {
        table_name_->clear();
      }
    }
    sub_agent_ = 0;
    platform_ = 0;
    market_ = 0;
    users_ = 0;
    hooking_users_ = 0;
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordOnlineUsers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sub_agent;
        break;
      }
      
      // optional int32 sub_agent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_agent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub_agent_)));
          set_has_sub_agent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_platform;
        break;
      }
      
      // optional int32 platform = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platform_)));
          set_has_platform();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_market;
        break;
      }
      
      // optional int32 market = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_market:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &market_)));
          set_has_market();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_users;
        break;
      }
      
      // optional int32 users = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_users:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &users_)));
          set_has_users();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_hooking_users;
        break;
      }
      
      // optional int32 hooking_users = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hooking_users:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hooking_users_)));
          set_has_hooking_users();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_time;
        break;
      }
      
      // optional int32 time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecordOnlineUsers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->table_name(), output);
  }
  
  // optional int32 sub_agent = 2;
  if (has_sub_agent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sub_agent(), output);
  }
  
  // optional int32 platform = 3;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->platform(), output);
  }
  
  // optional int32 market = 4;
  if (has_market()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->market(), output);
  }
  
  // optional int32 users = 5;
  if (has_users()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->users(), output);
  }
  
  // optional int32 hooking_users = 6;
  if (has_hooking_users()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->hooking_users(), output);
  }
  
  // optional int32 time = 7;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecordOnlineUsers::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }
  
  // optional int32 sub_agent = 2;
  if (has_sub_agent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sub_agent(), target);
  }
  
  // optional int32 platform = 3;
  if (has_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->platform(), target);
  }
  
  // optional int32 market = 4;
  if (has_market()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->market(), target);
  }
  
  // optional int32 users = 5;
  if (has_users()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->users(), target);
  }
  
  // optional int32 hooking_users = 6;
  if (has_hooking_users()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->hooking_users(), target);
  }
  
  // optional int32 time = 7;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecordOnlineUsers::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }
    
    // optional int32 sub_agent = 2;
    if (has_sub_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sub_agent());
    }
    
    // optional int32 platform = 3;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platform());
    }
    
    // optional int32 market = 4;
    if (has_market()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->market());
    }
    
    // optional int32 users = 5;
    if (has_users()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->users());
    }
    
    // optional int32 hooking_users = 6;
    if (has_hooking_users()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hooking_users());
    }
    
    // optional int32 time = 7;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordOnlineUsers::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecordOnlineUsers* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecordOnlineUsers*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecordOnlineUsers::MergeFrom(const RecordOnlineUsers& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
    if (from.has_sub_agent()) {
      set_sub_agent(from.sub_agent());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_market()) {
      set_market(from.market());
    }
    if (from.has_users()) {
      set_users(from.users());
    }
    if (from.has_hooking_users()) {
      set_hooking_users(from.hooking_users());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordOnlineUsers::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordOnlineUsers::CopyFrom(const RecordOnlineUsers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordOnlineUsers::IsInitialized() const {
  
  return true;
}

void RecordOnlineUsers::Swap(RecordOnlineUsers* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    std::swap(sub_agent_, other->sub_agent_);
    std::swap(platform_, other->platform_);
    std::swap(market_, other->market_);
    std::swap(users_, other->users_);
    std::swap(hooking_users_, other->hooking_users_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecordOnlineUsers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordOnlineUsers_descriptor_;
  metadata.reflection = RecordOnlineUsers_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecordLoginLogout::kTableNameFieldNumber;
const int RecordLoginLogout::kRoleIdFieldNumber;
const int RecordLoginLogout::kRoleNameFieldNumber;
const int RecordLoginLogout::kLevelFieldNumber;
const int RecordLoginLogout::kAccountFieldNumber;
const int RecordLoginLogout::kClientIpFieldNumber;
const int RecordLoginLogout::kLoginTimeFieldNumber;
const int RecordLoginLogout::kLogoutTimeFieldNumber;
const int RecordLoginLogout::kOnlineTimeFieldNumber;
const int RecordLoginLogout::kMarketFieldNumber;
const int RecordLoginLogout::kSubAgentFieldNumber;
const int RecordLoginLogout::kPlatformFieldNumber;
const int RecordLoginLogout::kSysModelFieldNumber;
const int RecordLoginLogout::kSysVersionFieldNumber;
const int RecordLoginLogout::kMacFieldNumber;
#endif  // !_MSC_VER

RecordLoginLogout::RecordLoginLogout()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecordLoginLogout::InitAsDefaultInstance() {
}

RecordLoginLogout::RecordLoginLogout(const RecordLoginLogout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecordLoginLogout::SharedCtor() {
  _cached_size_ = 0;
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_id_ = GOOGLE_LONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  client_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  login_time_ = 0;
  logout_time_ = 0;
  online_time_ = 0;
  market_ = 0;
  sub_agent_ = 0;
  platform_ = 0;
  sys_model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sys_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordLoginLogout::~RecordLoginLogout() {
  SharedDtor();
}

void RecordLoginLogout::SharedDtor() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (client_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete client_ip_;
  }
  if (sys_model_ != &::google::protobuf::internal::kEmptyString) {
    delete sys_model_;
  }
  if (sys_version_ != &::google::protobuf::internal::kEmptyString) {
    delete sys_version_;
  }
  if (mac_ != &::google::protobuf::internal::kEmptyString) {
    delete mac_;
  }
  if (this != default_instance_) {
  }
}

void RecordLoginLogout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordLoginLogout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordLoginLogout_descriptor_;
}

const RecordLoginLogout& RecordLoginLogout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInnerPublic_2eproto();  return *default_instance_;
}

RecordLoginLogout* RecordLoginLogout::default_instance_ = NULL;

RecordLoginLogout* RecordLoginLogout::New() const {
  return new RecordLoginLogout;
}

void RecordLoginLogout::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::kEmptyString) {
        table_name_->clear();
      }
    }
    role_id_ = GOOGLE_LONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    level_ = 0;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_client_ip()) {
      if (client_ip_ != &::google::protobuf::internal::kEmptyString) {
        client_ip_->clear();
      }
    }
    login_time_ = 0;
    logout_time_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    online_time_ = 0;
    market_ = 0;
    sub_agent_ = 0;
    platform_ = 0;
    if (has_sys_model()) {
      if (sys_model_ != &::google::protobuf::internal::kEmptyString) {
        sys_model_->clear();
      }
    }
    if (has_sys_version()) {
      if (sys_version_ != &::google::protobuf::internal::kEmptyString) {
        sys_version_->clear();
      }
    }
    if (has_mac()) {
      if (mac_ != &::google::protobuf::internal::kEmptyString) {
        mac_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordLoginLogout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }
      
      // optional int64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role_name;
        break;
      }
      
      // optional string role_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }
      
      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_account;
        break;
      }
      
      // optional string account = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_client_ip;
        break;
      }
      
      // optional string client_ip = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->client_ip().data(), this->client_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_login_time;
        break;
      }
      
      // optional int32 login_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &login_time_)));
          set_has_login_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_logout_time;
        break;
      }
      
      // optional int32 logout_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logout_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logout_time_)));
          set_has_logout_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_online_time;
        break;
      }
      
      // optional int32 online_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &online_time_)));
          set_has_online_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_market;
        break;
      }
      
      // optional int32 market = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_market:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &market_)));
          set_has_market();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_sub_agent;
        break;
      }
      
      // optional int32 sub_agent = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_agent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub_agent_)));
          set_has_sub_agent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_platform;
        break;
      }
      
      // optional int32 platform = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platform_)));
          set_has_platform();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_sys_model;
        break;
      }
      
      // optional string sys_model = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sys_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sys_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sys_model().data(), this->sys_model().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_sys_version;
        break;
      }
      
      // optional string sys_version = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sys_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sys_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sys_version().data(), this->sys_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_mac;
        break;
      }
      
      // optional string mac = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mac().data(), this->mac().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecordLoginLogout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->table_name(), output);
  }
  
  // optional int64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->role_id(), output);
  }
  
  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->role_name(), output);
  }
  
  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }
  
  // optional string account = 5;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->account(), output);
  }
  
  // optional string client_ip = 6;
  if (has_client_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_ip().data(), this->client_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->client_ip(), output);
  }
  
  // optional int32 login_time = 7;
  if (has_login_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->login_time(), output);
  }
  
  // optional int32 logout_time = 8;
  if (has_logout_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->logout_time(), output);
  }
  
  // optional int32 online_time = 9;
  if (has_online_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->online_time(), output);
  }
  
  // optional int32 market = 10;
  if (has_market()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->market(), output);
  }
  
  // optional int32 sub_agent = 11;
  if (has_sub_agent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->sub_agent(), output);
  }
  
  // optional int32 platform = 12;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->platform(), output);
  }
  
  // optional string sys_model = 13;
  if (has_sys_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sys_model().data(), this->sys_model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->sys_model(), output);
  }
  
  // optional string sys_version = 14;
  if (has_sys_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sys_version().data(), this->sys_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->sys_version(), output);
  }
  
  // optional string mac = 15;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->mac(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecordLoginLogout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }
  
  // optional int64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->role_id(), target);
  }
  
  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->role_name(), target);
  }
  
  // optional int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }
  
  // optional string account = 5;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->account(), target);
  }
  
  // optional string client_ip = 6;
  if (has_client_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_ip().data(), this->client_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->client_ip(), target);
  }
  
  // optional int32 login_time = 7;
  if (has_login_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->login_time(), target);
  }
  
  // optional int32 logout_time = 8;
  if (has_logout_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->logout_time(), target);
  }
  
  // optional int32 online_time = 9;
  if (has_online_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->online_time(), target);
  }
  
  // optional int32 market = 10;
  if (has_market()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->market(), target);
  }
  
  // optional int32 sub_agent = 11;
  if (has_sub_agent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->sub_agent(), target);
  }
  
  // optional int32 platform = 12;
  if (has_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->platform(), target);
  }
  
  // optional string sys_model = 13;
  if (has_sys_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sys_model().data(), this->sys_model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->sys_model(), target);
  }
  
  // optional string sys_version = 14;
  if (has_sys_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sys_version().data(), this->sys_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->sys_version(), target);
  }
  
  // optional string mac = 15;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->mac(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecordLoginLogout::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }
    
    // optional int64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional string role_name = 3;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }
    
    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional string account = 5;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }
    
    // optional string client_ip = 6;
    if (has_client_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_ip());
    }
    
    // optional int32 login_time = 7;
    if (has_login_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->login_time());
    }
    
    // optional int32 logout_time = 8;
    if (has_logout_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logout_time());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 online_time = 9;
    if (has_online_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->online_time());
    }
    
    // optional int32 market = 10;
    if (has_market()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->market());
    }
    
    // optional int32 sub_agent = 11;
    if (has_sub_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sub_agent());
    }
    
    // optional int32 platform = 12;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platform());
    }
    
    // optional string sys_model = 13;
    if (has_sys_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sys_model());
    }
    
    // optional string sys_version = 14;
    if (has_sys_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sys_version());
    }
    
    // optional string mac = 15;
    if (has_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mac());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordLoginLogout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecordLoginLogout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecordLoginLogout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecordLoginLogout::MergeFrom(const RecordLoginLogout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_client_ip()) {
      set_client_ip(from.client_ip());
    }
    if (from.has_login_time()) {
      set_login_time(from.login_time());
    }
    if (from.has_logout_time()) {
      set_logout_time(from.logout_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_online_time()) {
      set_online_time(from.online_time());
    }
    if (from.has_market()) {
      set_market(from.market());
    }
    if (from.has_sub_agent()) {
      set_sub_agent(from.sub_agent());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_sys_model()) {
      set_sys_model(from.sys_model());
    }
    if (from.has_sys_version()) {
      set_sys_version(from.sys_version());
    }
    if (from.has_mac()) {
      set_mac(from.mac());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordLoginLogout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordLoginLogout::CopyFrom(const RecordLoginLogout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordLoginLogout::IsInitialized() const {
  
  return true;
}

void RecordLoginLogout::Swap(RecordLoginLogout* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(level_, other->level_);
    std::swap(account_, other->account_);
    std::swap(client_ip_, other->client_ip_);
    std::swap(login_time_, other->login_time_);
    std::swap(logout_time_, other->logout_time_);
    std::swap(online_time_, other->online_time_);
    std::swap(market_, other->market_);
    std::swap(sub_agent_, other->sub_agent_);
    std::swap(platform_, other->platform_);
    std::swap(sys_model_, other->sys_model_);
    std::swap(sys_version_, other->sys_version_);
    std::swap(mac_, other->mac_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecordLoginLogout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordLoginLogout_descriptor_;
  metadata.reflection = RecordLoginLogout_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BackRechargeOrder::kOrderIdFieldNumber;
const int BackRechargeOrder::kOrderNumStrFieldNumber;
const int BackRechargeOrder::kChannelIdFieldNumber;
const int BackRechargeOrder::kMoneyFieldNumber;
const int BackRechargeOrder::kGoldFieldNumber;
const int BackRechargeOrder::kAccountFieldNumber;
const int BackRechargeOrder::kTickFieldNumber;
#endif  // !_MSC_VER

BackRechargeOrder::BackRechargeOrder()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BackRechargeOrder::InitAsDefaultInstance() {
}

BackRechargeOrder::BackRechargeOrder(const BackRechargeOrder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BackRechargeOrder::SharedCtor() {
  _cached_size_ = 0;
  order_id_ = 0;
  order_num_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_id_ = 0;
  money_ = 0;
  gold_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tick_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BackRechargeOrder::~BackRechargeOrder() {
  SharedDtor();
}

void BackRechargeOrder::SharedDtor() {
  if (order_num_str_ != &::google::protobuf::internal::kEmptyString) {
    delete order_num_str_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void BackRechargeOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BackRechargeOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BackRechargeOrder_descriptor_;
}

const BackRechargeOrder& BackRechargeOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInnerPublic_2eproto();  return *default_instance_;
}

BackRechargeOrder* BackRechargeOrder::default_instance_ = NULL;

BackRechargeOrder* BackRechargeOrder::New() const {
  return new BackRechargeOrder;
}

void BackRechargeOrder::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    order_id_ = 0;
    if (has_order_num_str()) {
      if (order_num_str_ != &::google::protobuf::internal::kEmptyString) {
        order_num_str_->clear();
      }
    }
    channel_id_ = 0;
    money_ = 0;
    gold_ = 0;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    tick_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BackRechargeOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 order_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_id_)));
          set_has_order_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_order_num_str;
        break;
      }
      
      // optional string order_num_str = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_order_num_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_num_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->order_num_str().data(), this->order_num_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel_id;
        break;
      }
      
      // optional int32 channel_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_money;
        break;
      }
      
      // optional int32 money = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gold;
        break;
      }
      
      // optional int32 gold = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_account;
        break;
      }
      
      // optional string account = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_tick;
        break;
      }
      
      // optional int64 tick = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tick_)));
          set_has_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BackRechargeOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 order_id = 1;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->order_id(), output);
  }
  
  // optional string order_num_str = 2;
  if (has_order_num_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->order_num_str().data(), this->order_num_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->order_num_str(), output);
  }
  
  // optional int32 channel_id = 3;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->channel_id(), output);
  }
  
  // optional int32 money = 4;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->money(), output);
  }
  
  // optional int32 gold = 5;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gold(), output);
  }
  
  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->account(), output);
  }
  
  // optional int64 tick = 7;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->tick(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BackRechargeOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 order_id = 1;
  if (has_order_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->order_id(), target);
  }
  
  // optional string order_num_str = 2;
  if (has_order_num_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->order_num_str().data(), this->order_num_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->order_num_str(), target);
  }
  
  // optional int32 channel_id = 3;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->channel_id(), target);
  }
  
  // optional int32 money = 4;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->money(), target);
  }
  
  // optional int32 gold = 5;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gold(), target);
  }
  
  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->account(), target);
  }
  
  // optional int64 tick = 7;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->tick(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BackRechargeOrder::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 order_id = 1;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order_id());
    }
    
    // optional string order_num_str = 2;
    if (has_order_num_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_num_str());
    }
    
    // optional int32 channel_id = 3;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel_id());
    }
    
    // optional int32 money = 4;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }
    
    // optional int32 gold = 5;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }
    
    // optional string account = 6;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }
    
    // optional int64 tick = 7;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tick());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BackRechargeOrder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BackRechargeOrder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BackRechargeOrder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BackRechargeOrder::MergeFrom(const BackRechargeOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_order_num_str()) {
      set_order_num_str(from.order_num_str());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_tick()) {
      set_tick(from.tick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BackRechargeOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackRechargeOrder::CopyFrom(const BackRechargeOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackRechargeOrder::IsInitialized() const {
  
  return true;
}

void BackRechargeOrder::Swap(BackRechargeOrder* other) {
  if (other != this) {
    std::swap(order_id_, other->order_id_);
    std::swap(order_num_str_, other->order_num_str_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(money_, other->money_);
    std::swap(gold_, other->gold_);
    std::swap(account_, other->account_);
    std::swap(tick_, other->tick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BackRechargeOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BackRechargeOrder_descriptor_;
  metadata.reflection = BackRechargeOrder_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoERTimeStage::kTimeSecFieldNumber;
const int ProtoERTimeStage::kStageFieldNumber;
#endif  // !_MSC_VER

ProtoERTimeStage::ProtoERTimeStage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoERTimeStage::InitAsDefaultInstance() {
}

ProtoERTimeStage::ProtoERTimeStage(const ProtoERTimeStage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoERTimeStage::SharedCtor() {
  _cached_size_ = 0;
  time_sec_ = GOOGLE_LONGLONG(0);
  stage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoERTimeStage::~ProtoERTimeStage() {
  SharedDtor();
}

void ProtoERTimeStage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoERTimeStage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoERTimeStage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoERTimeStage_descriptor_;
}

const ProtoERTimeStage& ProtoERTimeStage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInnerPublic_2eproto();  return *default_instance_;
}

ProtoERTimeStage* ProtoERTimeStage::default_instance_ = NULL;

ProtoERTimeStage* ProtoERTimeStage::New() const {
  return new ProtoERTimeStage;
}

void ProtoERTimeStage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_sec_ = GOOGLE_LONGLONG(0);
    stage_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoERTimeStage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 time_sec = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_sec_)));
          set_has_time_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stage;
        break;
      }
      
      // optional int32 stage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_)));
          set_has_stage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoERTimeStage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 time_sec = 1;
  if (has_time_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time_sec(), output);
  }
  
  // optional int32 stage = 2;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->stage(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoERTimeStage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 time_sec = 1;
  if (has_time_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time_sec(), target);
  }
  
  // optional int32 stage = 2;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->stage(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoERTimeStage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 time_sec = 1;
    if (has_time_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_sec());
    }
    
    // optional int32 stage = 2;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoERTimeStage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoERTimeStage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoERTimeStage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoERTimeStage::MergeFrom(const ProtoERTimeStage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_sec()) {
      set_time_sec(from.time_sec());
    }
    if (from.has_stage()) {
      set_stage(from.stage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoERTimeStage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoERTimeStage::CopyFrom(const ProtoERTimeStage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoERTimeStage::IsInitialized() const {
  
  return true;
}

void ProtoERTimeStage::Swap(ProtoERTimeStage* other) {
  if (other != this) {
    std::swap(time_sec_, other->time_sec_);
    std::swap(stage_, other->stage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoERTimeStage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoERTimeStage_descriptor_;
  metadata.reflection = ProtoERTimeStage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoERScriptStageInfo::kTimeStageSetFieldNumber;
const int ProtoERScriptStageInfo::kScriptSortFieldNumber;
#endif  // !_MSC_VER

ProtoERScriptStageInfo::ProtoERScriptStageInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoERScriptStageInfo::InitAsDefaultInstance() {
}

ProtoERScriptStageInfo::ProtoERScriptStageInfo(const ProtoERScriptStageInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoERScriptStageInfo::SharedCtor() {
  _cached_size_ = 0;
  script_sort_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoERScriptStageInfo::~ProtoERScriptStageInfo() {
  SharedDtor();
}

void ProtoERScriptStageInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoERScriptStageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoERScriptStageInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoERScriptStageInfo_descriptor_;
}

const ProtoERScriptStageInfo& ProtoERScriptStageInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInnerPublic_2eproto();  return *default_instance_;
}

ProtoERScriptStageInfo* ProtoERScriptStageInfo::default_instance_ = NULL;

ProtoERScriptStageInfo* ProtoERScriptStageInfo::New() const {
  return new ProtoERScriptStageInfo;
}

void ProtoERScriptStageInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    script_sort_ = 0;
  }
  timestageset_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoERScriptStageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoERTimeStage TimeStageSet = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TimeStageSet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_timestageset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_TimeStageSet;
        if (input->ExpectTag(16)) goto parse_script_sort;
        break;
      }
      
      // optional int32 script_sort = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_script_sort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &script_sort_)));
          set_has_script_sort();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoERScriptStageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoERTimeStage TimeStageSet = 1;
  for (int i = 0; i < this->timestageset_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->timestageset(i), output);
  }
  
  // optional int32 script_sort = 2;
  if (has_script_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->script_sort(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoERScriptStageInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoERTimeStage TimeStageSet = 1;
  for (int i = 0; i < this->timestageset_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->timestageset(i), target);
  }
  
  // optional int32 script_sort = 2;
  if (has_script_sort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->script_sort(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoERScriptStageInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 script_sort = 2;
    if (has_script_sort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->script_sort());
    }
    
  }
  // repeated .ProtoERTimeStage TimeStageSet = 1;
  total_size += 1 * this->timestageset_size();
  for (int i = 0; i < this->timestageset_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->timestageset(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoERScriptStageInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoERScriptStageInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoERScriptStageInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoERScriptStageInfo::MergeFrom(const ProtoERScriptStageInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  timestageset_.MergeFrom(from.timestageset_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_script_sort()) {
      set_script_sort(from.script_sort());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoERScriptStageInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoERScriptStageInfo::CopyFrom(const ProtoERScriptStageInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoERScriptStageInfo::IsInitialized() const {
  
  return true;
}

void ProtoERScriptStageInfo::Swap(ProtoERScriptStageInfo* other) {
  if (other != this) {
    timestageset_.Swap(&other->timestageset_);
    std::swap(script_sort_, other->script_sort_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoERScriptStageInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoERScriptStageInfo_descriptor_;
  metadata.reflection = ProtoERScriptStageInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoOfflineBeast::kBeastIdFieldNumber;
const int ProtoOfflineBeast::kBeastSortFieldNumber;
const int ProtoOfflineBeast::kBeastNameFieldNumber;
const int ProtoOfflineBeast::kSkillSetFieldNumber;
const int ProtoOfflineBeast::kPropSetFieldNumber;
#endif  // !_MSC_VER

ProtoOfflineBeast::ProtoOfflineBeast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoOfflineBeast::InitAsDefaultInstance() {
}

ProtoOfflineBeast::ProtoOfflineBeast(const ProtoOfflineBeast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoOfflineBeast::SharedCtor() {
  _cached_size_ = 0;
  beast_id_ = GOOGLE_LONGLONG(0);
  beast_sort_ = 0;
  beast_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoOfflineBeast::~ProtoOfflineBeast() {
  SharedDtor();
}

void ProtoOfflineBeast::SharedDtor() {
  if (beast_name_ != &::google::protobuf::internal::kEmptyString) {
    delete beast_name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoOfflineBeast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoOfflineBeast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoOfflineBeast_descriptor_;
}

const ProtoOfflineBeast& ProtoOfflineBeast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInnerPublic_2eproto();  return *default_instance_;
}

ProtoOfflineBeast* ProtoOfflineBeast::default_instance_ = NULL;

ProtoOfflineBeast* ProtoOfflineBeast::New() const {
  return new ProtoOfflineBeast;
}

void ProtoOfflineBeast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    beast_id_ = GOOGLE_LONGLONG(0);
    beast_sort_ = 0;
    if (has_beast_name()) {
      if (beast_name_ != &::google::protobuf::internal::kEmptyString) {
        beast_name_->clear();
      }
    }
  }
  skill_set_.Clear();
  prop_set_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoOfflineBeast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 beast_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &beast_id_)));
          set_has_beast_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_beast_sort;
        break;
      }
      
      // optional int32 beast_sort = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beast_sort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beast_sort_)));
          set_has_beast_sort();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_beast_name;
        break;
      }
      
      // optional string beast_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beast_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_beast_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->beast_name().data(), this->beast_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_skill_set;
        break;
      }
      
      // repeated .ProtoPairObj skill_set = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill_set()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_skill_set;
        if (input->ExpectTag(42)) goto parse_prop_set;
        break;
      }
      
      // repeated .ProtoPairObj prop_set = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prop_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prop_set()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_prop_set;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoOfflineBeast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 beast_id = 1;
  if (has_beast_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->beast_id(), output);
  }
  
  // optional int32 beast_sort = 2;
  if (has_beast_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->beast_sort(), output);
  }
  
  // optional string beast_name = 3;
  if (has_beast_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beast_name().data(), this->beast_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->beast_name(), output);
  }
  
  // repeated .ProtoPairObj skill_set = 4;
  for (int i = 0; i < this->skill_set_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->skill_set(i), output);
  }
  
  // repeated .ProtoPairObj prop_set = 5;
  for (int i = 0; i < this->prop_set_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->prop_set(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoOfflineBeast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 beast_id = 1;
  if (has_beast_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->beast_id(), target);
  }
  
  // optional int32 beast_sort = 2;
  if (has_beast_sort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->beast_sort(), target);
  }
  
  // optional string beast_name = 3;
  if (has_beast_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beast_name().data(), this->beast_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->beast_name(), target);
  }
  
  // repeated .ProtoPairObj skill_set = 4;
  for (int i = 0; i < this->skill_set_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->skill_set(i), target);
  }
  
  // repeated .ProtoPairObj prop_set = 5;
  for (int i = 0; i < this->prop_set_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->prop_set(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoOfflineBeast::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 beast_id = 1;
    if (has_beast_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->beast_id());
    }
    
    // optional int32 beast_sort = 2;
    if (has_beast_sort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->beast_sort());
    }
    
    // optional string beast_name = 3;
    if (has_beast_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->beast_name());
    }
    
  }
  // repeated .ProtoPairObj skill_set = 4;
  total_size += 1 * this->skill_set_size();
  for (int i = 0; i < this->skill_set_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill_set(i));
  }
  
  // repeated .ProtoPairObj prop_set = 5;
  total_size += 1 * this->prop_set_size();
  for (int i = 0; i < this->prop_set_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prop_set(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoOfflineBeast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoOfflineBeast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoOfflineBeast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoOfflineBeast::MergeFrom(const ProtoOfflineBeast& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_set_.MergeFrom(from.skill_set_);
  prop_set_.MergeFrom(from.prop_set_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_beast_id()) {
      set_beast_id(from.beast_id());
    }
    if (from.has_beast_sort()) {
      set_beast_sort(from.beast_sort());
    }
    if (from.has_beast_name()) {
      set_beast_name(from.beast_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoOfflineBeast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoOfflineBeast::CopyFrom(const ProtoOfflineBeast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoOfflineBeast::IsInitialized() const {
  
  return true;
}

void ProtoOfflineBeast::Swap(ProtoOfflineBeast* other) {
  if (other != this) {
    std::swap(beast_id_, other->beast_id_);
    std::swap(beast_sort_, other->beast_sort_);
    std::swap(beast_name_, other->beast_name_);
    skill_set_.Swap(&other->skill_set_);
    prop_set_.Swap(&other->prop_set_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoOfflineBeast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoOfflineBeast_descriptor_;
  metadata.reflection = ProtoOfflineBeast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecordTask::kTableNameFieldNumber;
const int RecordTask::kRoleIdFieldNumber;
const int RecordTask::kSerialTypeFieldNumber;
const int RecordTask::kPlatformFieldNumber;
const int RecordTask::kSubAgentFieldNumber;
const int RecordTask::kMarketFieldNumber;
const int RecordTask::kTaskIdFieldNumber;
const int RecordTask::kLevelFieldNumber;
const int RecordTask::kTimeFieldNumber;
#endif  // !_MSC_VER

RecordTask::RecordTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecordTask::InitAsDefaultInstance() {
}

RecordTask::RecordTask(const RecordTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecordTask::SharedCtor() {
  _cached_size_ = 0;
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_id_ = GOOGLE_LONGLONG(0);
  serial_type_ = 0;
  platform_ = 0;
  sub_agent_ = 0;
  market_ = 0;
  task_id_ = 0;
  level_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordTask::~RecordTask() {
  SharedDtor();
}

void RecordTask::SharedDtor() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (this != default_instance_) {
  }
}

void RecordTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordTask_descriptor_;
}

const RecordTask& RecordTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInnerPublic_2eproto();  return *default_instance_;
}

RecordTask* RecordTask::default_instance_ = NULL;

RecordTask* RecordTask::New() const {
  return new RecordTask;
}

void RecordTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::kEmptyString) {
        table_name_->clear();
      }
    }
    role_id_ = GOOGLE_LONGLONG(0);
    serial_type_ = 0;
    platform_ = 0;
    sub_agent_ = 0;
    market_ = 0;
    task_id_ = 0;
    level_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }
      
      // optional int64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_serial_type;
        break;
      }
      
      // optional int32 serial_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serial_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serial_type_)));
          set_has_serial_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_platform;
        break;
      }
      
      // optional int32 platform = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platform_)));
          set_has_platform();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sub_agent;
        break;
      }
      
      // optional int32 sub_agent = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_agent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub_agent_)));
          set_has_sub_agent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_market;
        break;
      }
      
      // optional int32 market = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_market:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &market_)));
          set_has_market();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_task_id;
        break;
      }
      
      // optional int32 task_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_level;
        break;
      }
      
      // optional int32 level = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_time;
        break;
      }
      
      // optional int32 time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecordTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->table_name(), output);
  }
  
  // optional int64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->role_id(), output);
  }
  
  // optional int32 serial_type = 3;
  if (has_serial_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->serial_type(), output);
  }
  
  // optional int32 platform = 4;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->platform(), output);
  }
  
  // optional int32 sub_agent = 5;
  if (has_sub_agent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sub_agent(), output);
  }
  
  // optional int32 market = 6;
  if (has_market()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->market(), output);
  }
  
  // optional int32 task_id = 7;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->task_id(), output);
  }
  
  // optional int32 level = 8;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->level(), output);
  }
  
  // optional int32 time = 9;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecordTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }
  
  // optional int64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->role_id(), target);
  }
  
  // optional int32 serial_type = 3;
  if (has_serial_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->serial_type(), target);
  }
  
  // optional int32 platform = 4;
  if (has_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->platform(), target);
  }
  
  // optional int32 sub_agent = 5;
  if (has_sub_agent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sub_agent(), target);
  }
  
  // optional int32 market = 6;
  if (has_market()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->market(), target);
  }
  
  // optional int32 task_id = 7;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->task_id(), target);
  }
  
  // optional int32 level = 8;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->level(), target);
  }
  
  // optional int32 time = 9;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecordTask::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }
    
    // optional int64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional int32 serial_type = 3;
    if (has_serial_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serial_type());
    }
    
    // optional int32 platform = 4;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platform());
    }
    
    // optional int32 sub_agent = 5;
    if (has_sub_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sub_agent());
    }
    
    // optional int32 market = 6;
    if (has_market()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->market());
    }
    
    // optional int32 task_id = 7;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_id());
    }
    
    // optional int32 level = 8;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 time = 9;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecordTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecordTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecordTask::MergeFrom(const RecordTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_serial_type()) {
      set_serial_type(from.serial_type());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_sub_agent()) {
      set_sub_agent(from.sub_agent());
    }
    if (from.has_market()) {
      set_market(from.market());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordTask::CopyFrom(const RecordTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordTask::IsInitialized() const {
  
  return true;
}

void RecordTask::Swap(RecordTask* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    std::swap(role_id_, other->role_id_);
    std::swap(serial_type_, other->serial_type_);
    std::swap(platform_, other->platform_);
    std::swap(sub_agent_, other->sub_agent_);
    std::swap(market_, other->market_);
    std::swap(task_id_, other->task_id_);
    std::swap(level_, other->level_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecordTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordTask_descriptor_;
  metadata.reflection = RecordTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecordRank::kTableNameFieldNumber;
const int RecordRank::kRoleIdFieldNumber;
const int RecordRank::kRoleNameFieldNumber;
const int RecordRank::kRankTypeFieldNumber;
const int RecordRank::kValueFieldNumber;
const int RecordRank::kTimeFieldNumber;
const int RecordRank::kExtInt1FieldNumber;
const int RecordRank::kExtInt2FieldNumber;
const int RecordRank::kExtStr1FieldNumber;
const int RecordRank::kVipFieldNumber;
#endif  // !_MSC_VER

RecordRank::RecordRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecordRank::InitAsDefaultInstance() {
}

RecordRank::RecordRank(const RecordRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecordRank::SharedCtor() {
  _cached_size_ = 0;
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_id_ = GOOGLE_LONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rank_type_ = 0;
  value_ = 0;
  time_ = 0;
  ext_int_1_ = GOOGLE_LONGLONG(0);
  ext_int_2_ = GOOGLE_LONGLONG(0);
  ext_str_1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vip_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordRank::~RecordRank() {
  SharedDtor();
}

void RecordRank::SharedDtor() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (ext_str_1_ != &::google::protobuf::internal::kEmptyString) {
    delete ext_str_1_;
  }
  if (this != default_instance_) {
  }
}

void RecordRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordRank_descriptor_;
}

const RecordRank& RecordRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInnerPublic_2eproto();  return *default_instance_;
}

RecordRank* RecordRank::default_instance_ = NULL;

RecordRank* RecordRank::New() const {
  return new RecordRank;
}

void RecordRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::kEmptyString) {
        table_name_->clear();
      }
    }
    role_id_ = GOOGLE_LONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    rank_type_ = 0;
    value_ = 0;
    time_ = 0;
    ext_int_1_ = GOOGLE_LONGLONG(0);
    ext_int_2_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_ext_str_1()) {
      if (ext_str_1_ != &::google::protobuf::internal::kEmptyString) {
        ext_str_1_->clear();
      }
    }
    vip_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }
      
      // optional int64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role_name;
        break;
      }
      
      // optional string role_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rank_type;
        break;
      }
      
      // optional int32 rank_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_type_)));
          set_has_rank_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_value;
        break;
      }
      
      // optional int32 value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }
      
      // optional int32 time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ext_int_1;
        break;
      }
      
      // optional int64 ext_int_1 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ext_int_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ext_int_1_)));
          set_has_ext_int_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ext_int_2;
        break;
      }
      
      // optional int64 ext_int_2 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ext_int_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ext_int_2_)));
          set_has_ext_int_2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_ext_str_1;
        break;
      }
      
      // optional string ext_str_1 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ext_str_1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ext_str_1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ext_str_1().data(), this->ext_str_1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_vip;
        break;
      }
      
      // optional int32 vip = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecordRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->table_name(), output);
  }
  
  // optional int64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->role_id(), output);
  }
  
  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->role_name(), output);
  }
  
  // optional int32 rank_type = 4;
  if (has_rank_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rank_type(), output);
  }
  
  // optional int32 value = 5;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->value(), output);
  }
  
  // optional int32 time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->time(), output);
  }
  
  // optional int64 ext_int_1 = 7;
  if (has_ext_int_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->ext_int_1(), output);
  }
  
  // optional int64 ext_int_2 = 8;
  if (has_ext_int_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->ext_int_2(), output);
  }
  
  // optional string ext_str_1 = 9;
  if (has_ext_str_1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ext_str_1().data(), this->ext_str_1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->ext_str_1(), output);
  }
  
  // optional int32 vip = 10;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->vip(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecordRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }
  
  // optional int64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->role_id(), target);
  }
  
  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->role_name(), target);
  }
  
  // optional int32 rank_type = 4;
  if (has_rank_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rank_type(), target);
  }
  
  // optional int32 value = 5;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->value(), target);
  }
  
  // optional int32 time = 6;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->time(), target);
  }
  
  // optional int64 ext_int_1 = 7;
  if (has_ext_int_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->ext_int_1(), target);
  }
  
  // optional int64 ext_int_2 = 8;
  if (has_ext_int_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->ext_int_2(), target);
  }
  
  // optional string ext_str_1 = 9;
  if (has_ext_str_1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ext_str_1().data(), this->ext_str_1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->ext_str_1(), target);
  }
  
  // optional int32 vip = 10;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->vip(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecordRank::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }
    
    // optional int64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional string role_name = 3;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }
    
    // optional int32 rank_type = 4;
    if (has_rank_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_type());
    }
    
    // optional int32 value = 5;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
    // optional int32 time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
    // optional int64 ext_int_1 = 7;
    if (has_ext_int_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ext_int_1());
    }
    
    // optional int64 ext_int_2 = 8;
    if (has_ext_int_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ext_int_2());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string ext_str_1 = 9;
    if (has_ext_str_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ext_str_1());
    }
    
    // optional int32 vip = 10;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecordRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecordRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecordRank::MergeFrom(const RecordRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_rank_type()) {
      set_rank_type(from.rank_type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_ext_int_1()) {
      set_ext_int_1(from.ext_int_1());
    }
    if (from.has_ext_int_2()) {
      set_ext_int_2(from.ext_int_2());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ext_str_1()) {
      set_ext_str_1(from.ext_str_1());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordRank::CopyFrom(const RecordRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordRank::IsInitialized() const {
  
  return true;
}

void RecordRank::Swap(RecordRank* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(rank_type_, other->rank_type_);
    std::swap(value_, other->value_);
    std::swap(time_, other->time_);
    std::swap(ext_int_1_, other->ext_int_1_);
    std::swap(ext_int_2_, other->ext_int_2_);
    std::swap(ext_str_1_, other->ext_str_1_);
    std::swap(vip_, other->vip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecordRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordRank_descriptor_;
  metadata.reflection = RecordRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecordMail::kTableNameFieldNumber;
const int RecordMail::kMailIndexFieldNumber;
const int RecordMail::kSenderIdFieldNumber;
const int RecordMail::kReceiverIdFieldNumber;
const int RecordMail::kSendTickFieldNumber;
const int RecordMail::kReadTickFieldNumber;
const int RecordMail::kMailTypeFieldNumber;
const int RecordMail::kHasReadFieldNumber;
const int RecordMail::kReceiverNameFieldNumber;
const int RecordMail::kSenderNameFieldNumber;
const int RecordMail::kTitleFieldNumber;
const int RecordMail::kContentFieldNumber;
const int RecordMail::kSerialTypeFieldNumber;
const int RecordMail::kPlatformFieldNumber;
const int RecordMail::kSubAgentFieldNumber;
const int RecordMail::kAttachGoldFieldNumber;
const int RecordMail::kAttachCopperFieldNumber;
const int RecordMail::kAttachId1FieldNumber;
const int RecordMail::kAttachAmount1FieldNumber;
const int RecordMail::kAttachId2FieldNumber;
const int RecordMail::kAttachAmount2FieldNumber;
const int RecordMail::kAttachId3FieldNumber;
const int RecordMail::kAttachAmount3FieldNumber;
const int RecordMail::kAttachId4FieldNumber;
const int RecordMail::kAttachAmount4FieldNumber;
const int RecordMail::kAttachBindGoldFieldNumber;
const int RecordMail::kAttachBindCopperFieldNumber;
const int RecordMail::kMailFormatFieldNumber;
#endif  // !_MSC_VER

RecordMail::RecordMail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecordMail::InitAsDefaultInstance() {
}

RecordMail::RecordMail(const RecordMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecordMail::SharedCtor() {
  _cached_size_ = 0;
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mail_index_ = GOOGLE_LONGLONG(0);
  sender_id_ = GOOGLE_LONGLONG(0);
  receiver_id_ = GOOGLE_LONGLONG(0);
  send_tick_ = GOOGLE_LONGLONG(0);
  read_tick_ = GOOGLE_LONGLONG(0);
  mail_type_ = 0;
  has_read_ = 0;
  receiver_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sender_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serial_type_ = 0;
  platform_ = 0;
  sub_agent_ = 0;
  attach_gold_ = 0;
  attach_copper_ = 0;
  attach_id_1_ = 0;
  attach_amount_1_ = 0;
  attach_id_2_ = 0;
  attach_amount_2_ = 0;
  attach_id_3_ = 0;
  attach_amount_3_ = 0;
  attach_id_4_ = 0;
  attach_amount_4_ = 0;
  attach_bind_gold_ = 0;
  attach_bind_copper_ = 0;
  mail_format_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordMail::~RecordMail() {
  SharedDtor();
}

void RecordMail::SharedDtor() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (receiver_name_ != &::google::protobuf::internal::kEmptyString) {
    delete receiver_name_;
  }
  if (sender_name_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_name_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void RecordMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordMail_descriptor_;
}

const RecordMail& RecordMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInnerPublic_2eproto();  return *default_instance_;
}

RecordMail* RecordMail::default_instance_ = NULL;

RecordMail* RecordMail::New() const {
  return new RecordMail;
}

void RecordMail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::kEmptyString) {
        table_name_->clear();
      }
    }
    mail_index_ = GOOGLE_LONGLONG(0);
    sender_id_ = GOOGLE_LONGLONG(0);
    receiver_id_ = GOOGLE_LONGLONG(0);
    send_tick_ = GOOGLE_LONGLONG(0);
    read_tick_ = GOOGLE_LONGLONG(0);
    mail_type_ = 0;
    has_read_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_receiver_name()) {
      if (receiver_name_ != &::google::protobuf::internal::kEmptyString) {
        receiver_name_->clear();
      }
    }
    if (has_sender_name()) {
      if (sender_name_ != &::google::protobuf::internal::kEmptyString) {
        sender_name_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    serial_type_ = 0;
    platform_ = 0;
    sub_agent_ = 0;
    attach_gold_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    attach_copper_ = 0;
    attach_id_1_ = 0;
    attach_amount_1_ = 0;
    attach_id_2_ = 0;
    attach_amount_2_ = 0;
    attach_id_3_ = 0;
    attach_amount_3_ = 0;
    attach_id_4_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    attach_amount_4_ = 0;
    attach_bind_gold_ = 0;
    attach_bind_copper_ = 0;
    mail_format_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_index;
        break;
      }
      
      // optional int64 mail_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mail_index_)));
          set_has_mail_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sender_id;
        break;
      }
      
      // optional int64 sender_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sender_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sender_id_)));
          set_has_sender_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_receiver_id;
        break;
      }
      
      // optional int64 receiver_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receiver_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &receiver_id_)));
          set_has_receiver_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_send_tick;
        break;
      }
      
      // optional int64 send_tick = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &send_tick_)));
          set_has_send_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_read_tick;
        break;
      }
      
      // optional int64 read_tick = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_read_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &read_tick_)));
          set_has_read_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_mail_type;
        break;
      }
      
      // optional int32 mail_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mail_type_)));
          set_has_mail_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_has_read;
        break;
      }
      
      // optional int32 has_read = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_read:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &has_read_)));
          set_has_has_read();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_receiver_name;
        break;
      }
      
      // optional string receiver_name = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_receiver_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receiver_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->receiver_name().data(), this->receiver_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_sender_name;
        break;
      }
      
      // optional string sender_name = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sender_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sender_name().data(), this->sender_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_title;
        break;
      }
      
      // optional string title = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_content;
        break;
      }
      
      // optional string content = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_serial_type;
        break;
      }
      
      // optional int32 serial_type = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serial_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serial_type_)));
          set_has_serial_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_platform;
        break;
      }
      
      // optional int32 platform = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platform_)));
          set_has_platform();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_sub_agent;
        break;
      }
      
      // optional int32 sub_agent = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_agent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub_agent_)));
          set_has_sub_agent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_attach_gold;
        break;
      }
      
      // optional int32 attach_gold = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attach_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attach_gold_)));
          set_has_attach_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_attach_copper;
        break;
      }
      
      // optional int32 attach_copper = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attach_copper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attach_copper_)));
          set_has_attach_copper();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_attach_id_1;
        break;
      }
      
      // optional int32 attach_id_1 = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attach_id_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attach_id_1_)));
          set_has_attach_id_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_attach_amount_1;
        break;
      }
      
      // optional int32 attach_amount_1 = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attach_amount_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attach_amount_1_)));
          set_has_attach_amount_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_attach_id_2;
        break;
      }
      
      // optional int32 attach_id_2 = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attach_id_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attach_id_2_)));
          set_has_attach_id_2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_attach_amount_2;
        break;
      }
      
      // optional int32 attach_amount_2 = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attach_amount_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attach_amount_2_)));
          set_has_attach_amount_2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_attach_id_3;
        break;
      }
      
      // optional int32 attach_id_3 = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attach_id_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attach_id_3_)));
          set_has_attach_id_3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_attach_amount_3;
        break;
      }
      
      // optional int32 attach_amount_3 = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attach_amount_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attach_amount_3_)));
          set_has_attach_amount_3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_attach_id_4;
        break;
      }
      
      // optional int32 attach_id_4 = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attach_id_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attach_id_4_)));
          set_has_attach_id_4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_attach_amount_4;
        break;
      }
      
      // optional int32 attach_amount_4 = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attach_amount_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attach_amount_4_)));
          set_has_attach_amount_4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_attach_bind_gold;
        break;
      }
      
      // optional int32 attach_bind_gold = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attach_bind_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attach_bind_gold_)));
          set_has_attach_bind_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_attach_bind_copper;
        break;
      }
      
      // optional int32 attach_bind_copper = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attach_bind_copper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attach_bind_copper_)));
          set_has_attach_bind_copper();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_mail_format;
        break;
      }
      
      // optional int32 mail_format = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_format:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mail_format_)));
          set_has_mail_format();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecordMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->table_name(), output);
  }
  
  // optional int64 mail_index = 2;
  if (has_mail_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->mail_index(), output);
  }
  
  // optional int64 sender_id = 3;
  if (has_sender_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->sender_id(), output);
  }
  
  // optional int64 receiver_id = 4;
  if (has_receiver_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->receiver_id(), output);
  }
  
  // optional int64 send_tick = 5;
  if (has_send_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->send_tick(), output);
  }
  
  // optional int64 read_tick = 6;
  if (has_read_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->read_tick(), output);
  }
  
  // optional int32 mail_type = 7;
  if (has_mail_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->mail_type(), output);
  }
  
  // optional int32 has_read = 8;
  if (has_has_read()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->has_read(), output);
  }
  
  // optional string receiver_name = 9;
  if (has_receiver_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receiver_name().data(), this->receiver_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->receiver_name(), output);
  }
  
  // optional string sender_name = 10;
  if (has_sender_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender_name().data(), this->sender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->sender_name(), output);
  }
  
  // optional string title = 11;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->title(), output);
  }
  
  // optional string content = 12;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->content(), output);
  }
  
  // optional int32 serial_type = 13;
  if (has_serial_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->serial_type(), output);
  }
  
  // optional int32 platform = 14;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->platform(), output);
  }
  
  // optional int32 sub_agent = 15;
  if (has_sub_agent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->sub_agent(), output);
  }
  
  // optional int32 attach_gold = 16;
  if (has_attach_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->attach_gold(), output);
  }
  
  // optional int32 attach_copper = 17;
  if (has_attach_copper()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->attach_copper(), output);
  }
  
  // optional int32 attach_id_1 = 18;
  if (has_attach_id_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->attach_id_1(), output);
  }
  
  // optional int32 attach_amount_1 = 19;
  if (has_attach_amount_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->attach_amount_1(), output);
  }
  
  // optional int32 attach_id_2 = 20;
  if (has_attach_id_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->attach_id_2(), output);
  }
  
  // optional int32 attach_amount_2 = 21;
  if (has_attach_amount_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->attach_amount_2(), output);
  }
  
  // optional int32 attach_id_3 = 22;
  if (has_attach_id_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->attach_id_3(), output);
  }
  
  // optional int32 attach_amount_3 = 23;
  if (has_attach_amount_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->attach_amount_3(), output);
  }
  
  // optional int32 attach_id_4 = 24;
  if (has_attach_id_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->attach_id_4(), output);
  }
  
  // optional int32 attach_amount_4 = 25;
  if (has_attach_amount_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->attach_amount_4(), output);
  }
  
  // optional int32 attach_bind_gold = 26;
  if (has_attach_bind_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->attach_bind_gold(), output);
  }
  
  // optional int32 attach_bind_copper = 27;
  if (has_attach_bind_copper()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->attach_bind_copper(), output);
  }
  
  // optional int32 mail_format = 28;
  if (has_mail_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->mail_format(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecordMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }
  
  // optional int64 mail_index = 2;
  if (has_mail_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->mail_index(), target);
  }
  
  // optional int64 sender_id = 3;
  if (has_sender_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->sender_id(), target);
  }
  
  // optional int64 receiver_id = 4;
  if (has_receiver_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->receiver_id(), target);
  }
  
  // optional int64 send_tick = 5;
  if (has_send_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->send_tick(), target);
  }
  
  // optional int64 read_tick = 6;
  if (has_read_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->read_tick(), target);
  }
  
  // optional int32 mail_type = 7;
  if (has_mail_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->mail_type(), target);
  }
  
  // optional int32 has_read = 8;
  if (has_has_read()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->has_read(), target);
  }
  
  // optional string receiver_name = 9;
  if (has_receiver_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receiver_name().data(), this->receiver_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->receiver_name(), target);
  }
  
  // optional string sender_name = 10;
  if (has_sender_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender_name().data(), this->sender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->sender_name(), target);
  }
  
  // optional string title = 11;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->title(), target);
  }
  
  // optional string content = 12;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->content(), target);
  }
  
  // optional int32 serial_type = 13;
  if (has_serial_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->serial_type(), target);
  }
  
  // optional int32 platform = 14;
  if (has_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->platform(), target);
  }
  
  // optional int32 sub_agent = 15;
  if (has_sub_agent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->sub_agent(), target);
  }
  
  // optional int32 attach_gold = 16;
  if (has_attach_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->attach_gold(), target);
  }
  
  // optional int32 attach_copper = 17;
  if (has_attach_copper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->attach_copper(), target);
  }
  
  // optional int32 attach_id_1 = 18;
  if (has_attach_id_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->attach_id_1(), target);
  }
  
  // optional int32 attach_amount_1 = 19;
  if (has_attach_amount_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->attach_amount_1(), target);
  }
  
  // optional int32 attach_id_2 = 20;
  if (has_attach_id_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->attach_id_2(), target);
  }
  
  // optional int32 attach_amount_2 = 21;
  if (has_attach_amount_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->attach_amount_2(), target);
  }
  
  // optional int32 attach_id_3 = 22;
  if (has_attach_id_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->attach_id_3(), target);
  }
  
  // optional int32 attach_amount_3 = 23;
  if (has_attach_amount_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->attach_amount_3(), target);
  }
  
  // optional int32 attach_id_4 = 24;
  if (has_attach_id_4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->attach_id_4(), target);
  }
  
  // optional int32 attach_amount_4 = 25;
  if (has_attach_amount_4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->attach_amount_4(), target);
  }
  
  // optional int32 attach_bind_gold = 26;
  if (has_attach_bind_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->attach_bind_gold(), target);
  }
  
  // optional int32 attach_bind_copper = 27;
  if (has_attach_bind_copper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->attach_bind_copper(), target);
  }
  
  // optional int32 mail_format = 28;
  if (has_mail_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->mail_format(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecordMail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }
    
    // optional int64 mail_index = 2;
    if (has_mail_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mail_index());
    }
    
    // optional int64 sender_id = 3;
    if (has_sender_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sender_id());
    }
    
    // optional int64 receiver_id = 4;
    if (has_receiver_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->receiver_id());
    }
    
    // optional int64 send_tick = 5;
    if (has_send_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->send_tick());
    }
    
    // optional int64 read_tick = 6;
    if (has_read_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->read_tick());
    }
    
    // optional int32 mail_type = 7;
    if (has_mail_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mail_type());
    }
    
    // optional int32 has_read = 8;
    if (has_has_read()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->has_read());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string receiver_name = 9;
    if (has_receiver_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->receiver_name());
    }
    
    // optional string sender_name = 10;
    if (has_sender_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender_name());
    }
    
    // optional string title = 11;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }
    
    // optional string content = 12;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
    // optional int32 serial_type = 13;
    if (has_serial_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serial_type());
    }
    
    // optional int32 platform = 14;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platform());
    }
    
    // optional int32 sub_agent = 15;
    if (has_sub_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sub_agent());
    }
    
    // optional int32 attach_gold = 16;
    if (has_attach_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attach_gold());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 attach_copper = 17;
    if (has_attach_copper()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attach_copper());
    }
    
    // optional int32 attach_id_1 = 18;
    if (has_attach_id_1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attach_id_1());
    }
    
    // optional int32 attach_amount_1 = 19;
    if (has_attach_amount_1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attach_amount_1());
    }
    
    // optional int32 attach_id_2 = 20;
    if (has_attach_id_2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attach_id_2());
    }
    
    // optional int32 attach_amount_2 = 21;
    if (has_attach_amount_2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attach_amount_2());
    }
    
    // optional int32 attach_id_3 = 22;
    if (has_attach_id_3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attach_id_3());
    }
    
    // optional int32 attach_amount_3 = 23;
    if (has_attach_amount_3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attach_amount_3());
    }
    
    // optional int32 attach_id_4 = 24;
    if (has_attach_id_4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attach_id_4());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 attach_amount_4 = 25;
    if (has_attach_amount_4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attach_amount_4());
    }
    
    // optional int32 attach_bind_gold = 26;
    if (has_attach_bind_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attach_bind_gold());
    }
    
    // optional int32 attach_bind_copper = 27;
    if (has_attach_bind_copper()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attach_bind_copper());
    }
    
    // optional int32 mail_format = 28;
    if (has_mail_format()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mail_format());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecordMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecordMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecordMail::MergeFrom(const RecordMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
    if (from.has_mail_index()) {
      set_mail_index(from.mail_index());
    }
    if (from.has_sender_id()) {
      set_sender_id(from.sender_id());
    }
    if (from.has_receiver_id()) {
      set_receiver_id(from.receiver_id());
    }
    if (from.has_send_tick()) {
      set_send_tick(from.send_tick());
    }
    if (from.has_read_tick()) {
      set_read_tick(from.read_tick());
    }
    if (from.has_mail_type()) {
      set_mail_type(from.mail_type());
    }
    if (from.has_has_read()) {
      set_has_read(from.has_read());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_receiver_name()) {
      set_receiver_name(from.receiver_name());
    }
    if (from.has_sender_name()) {
      set_sender_name(from.sender_name());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_serial_type()) {
      set_serial_type(from.serial_type());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_sub_agent()) {
      set_sub_agent(from.sub_agent());
    }
    if (from.has_attach_gold()) {
      set_attach_gold(from.attach_gold());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_attach_copper()) {
      set_attach_copper(from.attach_copper());
    }
    if (from.has_attach_id_1()) {
      set_attach_id_1(from.attach_id_1());
    }
    if (from.has_attach_amount_1()) {
      set_attach_amount_1(from.attach_amount_1());
    }
    if (from.has_attach_id_2()) {
      set_attach_id_2(from.attach_id_2());
    }
    if (from.has_attach_amount_2()) {
      set_attach_amount_2(from.attach_amount_2());
    }
    if (from.has_attach_id_3()) {
      set_attach_id_3(from.attach_id_3());
    }
    if (from.has_attach_amount_3()) {
      set_attach_amount_3(from.attach_amount_3());
    }
    if (from.has_attach_id_4()) {
      set_attach_id_4(from.attach_id_4());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_attach_amount_4()) {
      set_attach_amount_4(from.attach_amount_4());
    }
    if (from.has_attach_bind_gold()) {
      set_attach_bind_gold(from.attach_bind_gold());
    }
    if (from.has_attach_bind_copper()) {
      set_attach_bind_copper(from.attach_bind_copper());
    }
    if (from.has_mail_format()) {
      set_mail_format(from.mail_format());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordMail::CopyFrom(const RecordMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordMail::IsInitialized() const {
  
  return true;
}

void RecordMail::Swap(RecordMail* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    std::swap(mail_index_, other->mail_index_);
    std::swap(sender_id_, other->sender_id_);
    std::swap(receiver_id_, other->receiver_id_);
    std::swap(send_tick_, other->send_tick_);
    std::swap(read_tick_, other->read_tick_);
    std::swap(mail_type_, other->mail_type_);
    std::swap(has_read_, other->has_read_);
    std::swap(receiver_name_, other->receiver_name_);
    std::swap(sender_name_, other->sender_name_);
    std::swap(title_, other->title_);
    std::swap(content_, other->content_);
    std::swap(serial_type_, other->serial_type_);
    std::swap(platform_, other->platform_);
    std::swap(sub_agent_, other->sub_agent_);
    std::swap(attach_gold_, other->attach_gold_);
    std::swap(attach_copper_, other->attach_copper_);
    std::swap(attach_id_1_, other->attach_id_1_);
    std::swap(attach_amount_1_, other->attach_amount_1_);
    std::swap(attach_id_2_, other->attach_id_2_);
    std::swap(attach_amount_2_, other->attach_amount_2_);
    std::swap(attach_id_3_, other->attach_id_3_);
    std::swap(attach_amount_3_, other->attach_amount_3_);
    std::swap(attach_id_4_, other->attach_id_4_);
    std::swap(attach_amount_4_, other->attach_amount_4_);
    std::swap(attach_bind_gold_, other->attach_bind_gold_);
    std::swap(attach_bind_copper_, other->attach_bind_copper_);
    std::swap(mail_format_, other->mail_format_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecordMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordMail_descriptor_;
  metadata.reflection = RecordMail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoOnSaleItem::kItemIdFieldNumber;
const int ProtoOnSaleItem::kItemBindFieldNumber;
const int ProtoOnSaleItem::kItemTypeFieldNumber;
const int ProtoOnSaleItem::kShopTypeFieldNumber;
const int ProtoOnSaleItem::kMoneyTypeFieldNumber;
const int ProtoOnSaleItem::kSrcPriceFieldNumber;
const int ProtoOnSaleItem::kCurPriceFieldNumber;
const int ProtoOnSaleItem::kStartTickFieldNumber;
const int ProtoOnSaleItem::kEndTickFieldNumber;
const int ProtoOnSaleItem::kNeedItemFieldNumber;
#endif  // !_MSC_VER

ProtoOnSaleItem::ProtoOnSaleItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoOnSaleItem::InitAsDefaultInstance() {
  need_item_ = const_cast< ::ProtoPairObj*>(&::ProtoPairObj::default_instance());
}

ProtoOnSaleItem::ProtoOnSaleItem(const ProtoOnSaleItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoOnSaleItem::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0;
  item_bind_ = 0;
  shop_type_ = 0;
  money_type_ = 0;
  src_price_ = 0;
  cur_price_ = 0;
  start_tick_ = 0;
  end_tick_ = 0;
  need_item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoOnSaleItem::~ProtoOnSaleItem() {
  SharedDtor();
}

void ProtoOnSaleItem::SharedDtor() {
  if (this != default_instance_) {
    delete need_item_;
  }
}

void ProtoOnSaleItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoOnSaleItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoOnSaleItem_descriptor_;
}

const ProtoOnSaleItem& ProtoOnSaleItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInnerPublic_2eproto();  return *default_instance_;
}

ProtoOnSaleItem* ProtoOnSaleItem::default_instance_ = NULL;

ProtoOnSaleItem* ProtoOnSaleItem::New() const {
  return new ProtoOnSaleItem;
}

void ProtoOnSaleItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0;
    item_bind_ = 0;
    shop_type_ = 0;
    money_type_ = 0;
    src_price_ = 0;
    cur_price_ = 0;
    start_tick_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    end_tick_ = 0;
    if (has_need_item()) {
      if (need_item_ != NULL) need_item_->::ProtoPairObj::Clear();
    }
  }
  item_type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoOnSaleItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_bind;
        break;
      }
      
      // optional int32 item_bind = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_bind_)));
          set_has_item_bind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_type;
        break;
      }
      
      // repeated int32 item_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_item_type())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_item_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_type;
        if (input->ExpectTag(32)) goto parse_shop_type;
        break;
      }
      
      // optional int32 shop_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shop_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shop_type_)));
          set_has_shop_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_money_type;
        break;
      }
      
      // optional int32 money_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_type_)));
          set_has_money_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_src_price;
        break;
      }
      
      // optional int32 src_price = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &src_price_)));
          set_has_src_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cur_price;
        break;
      }
      
      // optional int32 cur_price = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_price_)));
          set_has_cur_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_start_tick;
        break;
      }
      
      // optional int32 start_tick = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_tick_)));
          set_has_start_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_end_tick;
        break;
      }
      
      // optional int32 end_tick = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_tick_)));
          set_has_end_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_need_item;
        break;
      }
      
      // optional .ProtoPairObj need_item = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_need_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_need_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoOnSaleItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_id(), output);
  }
  
  // optional int32 item_bind = 2;
  if (has_item_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_bind(), output);
  }
  
  // repeated int32 item_type = 3;
  for (int i = 0; i < this->item_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->item_type(i), output);
  }
  
  // optional int32 shop_type = 4;
  if (has_shop_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->shop_type(), output);
  }
  
  // optional int32 money_type = 5;
  if (has_money_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->money_type(), output);
  }
  
  // optional int32 src_price = 6;
  if (has_src_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->src_price(), output);
  }
  
  // optional int32 cur_price = 7;
  if (has_cur_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->cur_price(), output);
  }
  
  // optional int32 start_tick = 8;
  if (has_start_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->start_tick(), output);
  }
  
  // optional int32 end_tick = 9;
  if (has_end_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->end_tick(), output);
  }
  
  // optional .ProtoPairObj need_item = 10;
  if (has_need_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->need_item(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoOnSaleItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_id(), target);
  }
  
  // optional int32 item_bind = 2;
  if (has_item_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_bind(), target);
  }
  
  // repeated int32 item_type = 3;
  for (int i = 0; i < this->item_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->item_type(i), target);
  }
  
  // optional int32 shop_type = 4;
  if (has_shop_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->shop_type(), target);
  }
  
  // optional int32 money_type = 5;
  if (has_money_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->money_type(), target);
  }
  
  // optional int32 src_price = 6;
  if (has_src_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->src_price(), target);
  }
  
  // optional int32 cur_price = 7;
  if (has_cur_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->cur_price(), target);
  }
  
  // optional int32 start_tick = 8;
  if (has_start_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->start_tick(), target);
  }
  
  // optional int32 end_tick = 9;
  if (has_end_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->end_tick(), target);
  }
  
  // optional .ProtoPairObj need_item = 10;
  if (has_need_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->need_item(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoOnSaleItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }
    
    // optional int32 item_bind = 2;
    if (has_item_bind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_bind());
    }
    
    // optional int32 shop_type = 4;
    if (has_shop_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shop_type());
    }
    
    // optional int32 money_type = 5;
    if (has_money_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money_type());
    }
    
    // optional int32 src_price = 6;
    if (has_src_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->src_price());
    }
    
    // optional int32 cur_price = 7;
    if (has_cur_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_price());
    }
    
    // optional int32 start_tick = 8;
    if (has_start_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_tick());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 end_tick = 9;
    if (has_end_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_tick());
    }
    
    // optional .ProtoPairObj need_item = 10;
    if (has_need_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->need_item());
    }
    
  }
  // repeated int32 item_type = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->item_type(i));
    }
    total_size += 1 * this->item_type_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoOnSaleItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoOnSaleItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoOnSaleItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoOnSaleItem::MergeFrom(const ProtoOnSaleItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_type_.MergeFrom(from.item_type_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_bind()) {
      set_item_bind(from.item_bind());
    }
    if (from.has_shop_type()) {
      set_shop_type(from.shop_type());
    }
    if (from.has_money_type()) {
      set_money_type(from.money_type());
    }
    if (from.has_src_price()) {
      set_src_price(from.src_price());
    }
    if (from.has_cur_price()) {
      set_cur_price(from.cur_price());
    }
    if (from.has_start_tick()) {
      set_start_tick(from.start_tick());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_end_tick()) {
      set_end_tick(from.end_tick());
    }
    if (from.has_need_item()) {
      mutable_need_item()->::ProtoPairObj::MergeFrom(from.need_item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoOnSaleItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoOnSaleItem::CopyFrom(const ProtoOnSaleItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoOnSaleItem::IsInitialized() const {
  
  return true;
}

void ProtoOnSaleItem::Swap(ProtoOnSaleItem* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(item_bind_, other->item_bind_);
    item_type_.Swap(&other->item_type_);
    std::swap(shop_type_, other->shop_type_);
    std::swap(money_type_, other->money_type_);
    std::swap(src_price_, other->src_price_);
    std::swap(cur_price_, other->cur_price_);
    std::swap(start_tick_, other->start_tick_);
    std::swap(end_tick_, other->end_tick_);
    std::swap(need_item_, other->need_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoOnSaleItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoOnSaleItem_descriptor_;
  metadata.reflection = ProtoOnSaleItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecordChat::kTableNameFieldNumber;
const int RecordChat::kRoleIdFieldNumber;
const int RecordChat::kSerialTypeFieldNumber;
const int RecordChat::kTimeFieldNumber;
const int RecordChat::kContentFieldNumber;
const int RecordChat::kSubAgentFieldNumber;
const int RecordChat::kServerFlagFieldNumber;
const int RecordChat::kMarketFieldNumber;
#endif  // !_MSC_VER

RecordChat::RecordChat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecordChat::InitAsDefaultInstance() {
}

RecordChat::RecordChat(const RecordChat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecordChat::SharedCtor() {
  _cached_size_ = 0;
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_id_ = GOOGLE_LONGLONG(0);
  serial_type_ = 0;
  time_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sub_agent_ = 0;
  server_flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  market_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordChat::~RecordChat() {
  SharedDtor();
}

void RecordChat::SharedDtor() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (server_flag_ != &::google::protobuf::internal::kEmptyString) {
    delete server_flag_;
  }
  if (this != default_instance_) {
  }
}

void RecordChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordChat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordChat_descriptor_;
}

const RecordChat& RecordChat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInnerPublic_2eproto();  return *default_instance_;
}

RecordChat* RecordChat::default_instance_ = NULL;

RecordChat* RecordChat::New() const {
  return new RecordChat;
}

void RecordChat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::kEmptyString) {
        table_name_->clear();
      }
    }
    role_id_ = GOOGLE_LONGLONG(0);
    serial_type_ = 0;
    time_ = 0;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    sub_agent_ = 0;
    if (has_server_flag()) {
      if (server_flag_ != &::google::protobuf::internal::kEmptyString) {
        server_flag_->clear();
      }
    }
    market_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }
      
      // optional int64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_serial_type;
        break;
      }
      
      // optional int32 serial_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serial_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serial_type_)));
          set_has_serial_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }
      
      // optional int32 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_content;
        break;
      }
      
      // optional string content = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sub_agent;
        break;
      }
      
      // optional int32 sub_agent = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_agent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub_agent_)));
          set_has_sub_agent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_server_flag;
        break;
      }
      
      // optional string server_flag = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_flag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_flag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_flag().data(), this->server_flag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_market;
        break;
      }
      
      // optional int32 market = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_market:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &market_)));
          set_has_market();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecordChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->table_name(), output);
  }
  
  // optional int64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->role_id(), output);
  }
  
  // optional int32 serial_type = 3;
  if (has_serial_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->serial_type(), output);
  }
  
  // optional int32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->time(), output);
  }
  
  // optional string content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->content(), output);
  }
  
  // optional int32 sub_agent = 6;
  if (has_sub_agent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sub_agent(), output);
  }
  
  // optional string server_flag = 7;
  if (has_server_flag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_flag().data(), this->server_flag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->server_flag(), output);
  }
  
  // optional int32 market = 8;
  if (has_market()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->market(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecordChat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }
  
  // optional int64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->role_id(), target);
  }
  
  // optional int32 serial_type = 3;
  if (has_serial_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->serial_type(), target);
  }
  
  // optional int32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->time(), target);
  }
  
  // optional string content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->content(), target);
  }
  
  // optional int32 sub_agent = 6;
  if (has_sub_agent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sub_agent(), target);
  }
  
  // optional string server_flag = 7;
  if (has_server_flag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_flag().data(), this->server_flag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->server_flag(), target);
  }
  
  // optional int32 market = 8;
  if (has_market()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->market(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecordChat::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }
    
    // optional int64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional int32 serial_type = 3;
    if (has_serial_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serial_type());
    }
    
    // optional int32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
    // optional string content = 5;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
    // optional int32 sub_agent = 6;
    if (has_sub_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sub_agent());
    }
    
    // optional string server_flag = 7;
    if (has_server_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_flag());
    }
    
    // optional int32 market = 8;
    if (has_market()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->market());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordChat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecordChat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecordChat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecordChat::MergeFrom(const RecordChat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_serial_type()) {
      set_serial_type(from.serial_type());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_sub_agent()) {
      set_sub_agent(from.sub_agent());
    }
    if (from.has_server_flag()) {
      set_server_flag(from.server_flag());
    }
    if (from.has_market()) {
      set_market(from.market());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordChat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordChat::CopyFrom(const RecordChat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordChat::IsInitialized() const {
  
  return true;
}

void RecordChat::Swap(RecordChat* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    std::swap(role_id_, other->role_id_);
    std::swap(serial_type_, other->serial_type_);
    std::swap(time_, other->time_);
    std::swap(content_, other->content_);
    std::swap(sub_agent_, other->sub_agent_);
    std::swap(server_flag_, other->server_flag_);
    std::swap(market_, other->market_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecordChat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordChat_descriptor_;
  metadata.reflection = RecordChat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoLottery::kGoldTimesFieldNumber;
const int ProtoLottery::kGoldFreeTimesFieldNumber;
const int ProtoLottery::kFreeTimesFieldNumber;
const int ProtoLottery::kTotalScoreFieldNumber;
const int ProtoLottery::kTotalGoldFieldNumber;
const int ProtoLottery::kLeftFreeSecFieldNumber;
const int ProtoLottery::kNextFreeTickFieldNumber;
const int ProtoLottery::kProtectGoldFieldNumber;
const int ProtoLottery::kEndTickFieldNumber;
const int ProtoLottery::kJaneItemListFieldNumber;
const int ProtoLottery::kWaitAwardListFieldNumber;
const int ProtoLottery::kActivityIdFieldNumber;
#endif  // !_MSC_VER

ProtoLottery::ProtoLottery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoLottery::InitAsDefaultInstance() {
}

ProtoLottery::ProtoLottery(const ProtoLottery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoLottery::SharedCtor() {
  _cached_size_ = 0;
  gold_times_ = 0;
  gold_free_times_ = 0;
  free_times_ = 0;
  total_score_ = 0;
  total_gold_ = 0;
  left_free_sec_ = 0;
  next_free_tick_ = 0;
  protect_gold_ = 0;
  end_tick_ = 0;
  activity_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoLottery::~ProtoLottery() {
  SharedDtor();
}

void ProtoLottery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoLottery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoLottery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoLottery_descriptor_;
}

const ProtoLottery& ProtoLottery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInnerPublic_2eproto();  return *default_instance_;
}

ProtoLottery* ProtoLottery::default_instance_ = NULL;

ProtoLottery* ProtoLottery::New() const {
  return new ProtoLottery;
}

void ProtoLottery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gold_times_ = 0;
    gold_free_times_ = 0;
    free_times_ = 0;
    total_score_ = 0;
    total_gold_ = 0;
    left_free_sec_ = 0;
    next_free_tick_ = 0;
    protect_gold_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    end_tick_ = 0;
    activity_id_ = 0;
  }
  jane_item_list_.Clear();
  wait_award_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoLottery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gold_times = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_times_)));
          set_has_gold_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gold_free_times;
        break;
      }
      
      // optional int32 gold_free_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold_free_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_free_times_)));
          set_has_gold_free_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_free_times;
        break;
      }
      
      // optional int32 free_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_free_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &free_times_)));
          set_has_free_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total_score;
        break;
      }
      
      // optional int32 total_score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_score_)));
          set_has_total_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_total_gold;
        break;
      }
      
      // optional int32 total_gold = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_gold_)));
          set_has_total_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_left_free_sec;
        break;
      }
      
      // optional int32 left_free_sec = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_free_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_free_sec_)));
          set_has_left_free_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_next_free_tick;
        break;
      }
      
      // optional int32 next_free_tick = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_free_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &next_free_tick_)));
          set_has_next_free_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_protect_gold;
        break;
      }
      
      // optional int32 protect_gold = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_protect_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &protect_gold_)));
          set_has_protect_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_end_tick;
        break;
      }
      
      // optional int32 end_tick = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_tick_)));
          set_has_end_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_jane_item_list;
        break;
      }
      
      // repeated int32 jane_item_list = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jane_item_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_jane_item_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_jane_item_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_jane_item_list;
        if (input->ExpectTag(90)) goto parse_wait_award_list;
        break;
      }
      
      // repeated .ProtoLotteryWaitAward wait_award_list = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wait_award_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wait_award_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_wait_award_list;
        if (input->ExpectTag(96)) goto parse_activity_id;
        break;
      }
      
      // optional int32 activity_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activity_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activity_id_)));
          set_has_activity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoLottery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gold_times = 1;
  if (has_gold_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gold_times(), output);
  }
  
  // optional int32 gold_free_times = 2;
  if (has_gold_free_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gold_free_times(), output);
  }
  
  // optional int32 free_times = 3;
  if (has_free_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->free_times(), output);
  }
  
  // optional int32 total_score = 4;
  if (has_total_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->total_score(), output);
  }
  
  // optional int32 total_gold = 5;
  if (has_total_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->total_gold(), output);
  }
  
  // optional int32 left_free_sec = 6;
  if (has_left_free_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->left_free_sec(), output);
  }
  
  // optional int32 next_free_tick = 7;
  if (has_next_free_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->next_free_tick(), output);
  }
  
  // optional int32 protect_gold = 8;
  if (has_protect_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->protect_gold(), output);
  }
  
  // optional int32 end_tick = 9;
  if (has_end_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->end_tick(), output);
  }
  
  // repeated int32 jane_item_list = 10;
  for (int i = 0; i < this->jane_item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->jane_item_list(i), output);
  }
  
  // repeated .ProtoLotteryWaitAward wait_award_list = 11;
  for (int i = 0; i < this->wait_award_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->wait_award_list(i), output);
  }
  
  // optional int32 activity_id = 12;
  if (has_activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->activity_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoLottery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 gold_times = 1;
  if (has_gold_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gold_times(), target);
  }
  
  // optional int32 gold_free_times = 2;
  if (has_gold_free_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gold_free_times(), target);
  }
  
  // optional int32 free_times = 3;
  if (has_free_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->free_times(), target);
  }
  
  // optional int32 total_score = 4;
  if (has_total_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->total_score(), target);
  }
  
  // optional int32 total_gold = 5;
  if (has_total_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->total_gold(), target);
  }
  
  // optional int32 left_free_sec = 6;
  if (has_left_free_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->left_free_sec(), target);
  }
  
  // optional int32 next_free_tick = 7;
  if (has_next_free_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->next_free_tick(), target);
  }
  
  // optional int32 protect_gold = 8;
  if (has_protect_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->protect_gold(), target);
  }
  
  // optional int32 end_tick = 9;
  if (has_end_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->end_tick(), target);
  }
  
  // repeated int32 jane_item_list = 10;
  for (int i = 0; i < this->jane_item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->jane_item_list(i), target);
  }
  
  // repeated .ProtoLotteryWaitAward wait_award_list = 11;
  for (int i = 0; i < this->wait_award_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->wait_award_list(i), target);
  }
  
  // optional int32 activity_id = 12;
  if (has_activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->activity_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoLottery::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gold_times = 1;
    if (has_gold_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold_times());
    }
    
    // optional int32 gold_free_times = 2;
    if (has_gold_free_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold_free_times());
    }
    
    // optional int32 free_times = 3;
    if (has_free_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->free_times());
    }
    
    // optional int32 total_score = 4;
    if (has_total_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_score());
    }
    
    // optional int32 total_gold = 5;
    if (has_total_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_gold());
    }
    
    // optional int32 left_free_sec = 6;
    if (has_left_free_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_free_sec());
    }
    
    // optional int32 next_free_tick = 7;
    if (has_next_free_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->next_free_tick());
    }
    
    // optional int32 protect_gold = 8;
    if (has_protect_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->protect_gold());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 end_tick = 9;
    if (has_end_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_tick());
    }
    
    // optional int32 activity_id = 12;
    if (has_activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activity_id());
    }
    
  }
  // repeated int32 jane_item_list = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->jane_item_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->jane_item_list(i));
    }
    total_size += 1 * this->jane_item_list_size() + data_size;
  }
  
  // repeated .ProtoLotteryWaitAward wait_award_list = 11;
  total_size += 1 * this->wait_award_list_size();
  for (int i = 0; i < this->wait_award_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wait_award_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoLottery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoLottery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoLottery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoLottery::MergeFrom(const ProtoLottery& from) {
  GOOGLE_CHECK_NE(&from, this);
  jane_item_list_.MergeFrom(from.jane_item_list_);
  wait_award_list_.MergeFrom(from.wait_award_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gold_times()) {
      set_gold_times(from.gold_times());
    }
    if (from.has_gold_free_times()) {
      set_gold_free_times(from.gold_free_times());
    }
    if (from.has_free_times()) {
      set_free_times(from.free_times());
    }
    if (from.has_total_score()) {
      set_total_score(from.total_score());
    }
    if (from.has_total_gold()) {
      set_total_gold(from.total_gold());
    }
    if (from.has_left_free_sec()) {
      set_left_free_sec(from.left_free_sec());
    }
    if (from.has_next_free_tick()) {
      set_next_free_tick(from.next_free_tick());
    }
    if (from.has_protect_gold()) {
      set_protect_gold(from.protect_gold());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_end_tick()) {
      set_end_tick(from.end_tick());
    }
    if (from.has_activity_id()) {
      set_activity_id(from.activity_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoLottery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoLottery::CopyFrom(const ProtoLottery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoLottery::IsInitialized() const {
  
  return true;
}

void ProtoLottery::Swap(ProtoLottery* other) {
  if (other != this) {
    std::swap(gold_times_, other->gold_times_);
    std::swap(gold_free_times_, other->gold_free_times_);
    std::swap(free_times_, other->free_times_);
    std::swap(total_score_, other->total_score_);
    std::swap(total_gold_, other->total_gold_);
    std::swap(left_free_sec_, other->left_free_sec_);
    std::swap(next_free_tick_, other->next_free_tick_);
    std::swap(protect_gold_, other->protect_gold_);
    std::swap(end_tick_, other->end_tick_);
    jane_item_list_.Swap(&other->jane_item_list_);
    wait_award_list_.Swap(&other->wait_award_list_);
    std::swap(activity_id_, other->activity_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoLottery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoLottery_descriptor_;
  metadata.reflection = ProtoLottery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoActivityTick::kActivityIdFieldNumber;
const int ProtoActivityTick::kBeginTickFieldNumber;
const int ProtoActivityTick::kEndTickFieldNumber;
#endif  // !_MSC_VER

ProtoActivityTick::ProtoActivityTick()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoActivityTick::InitAsDefaultInstance() {
}

ProtoActivityTick::ProtoActivityTick(const ProtoActivityTick& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoActivityTick::SharedCtor() {
  _cached_size_ = 0;
  activity_id_ = 0;
  begin_tick_ = 0;
  end_tick_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoActivityTick::~ProtoActivityTick() {
  SharedDtor();
}

void ProtoActivityTick::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoActivityTick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoActivityTick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoActivityTick_descriptor_;
}

const ProtoActivityTick& ProtoActivityTick::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInnerPublic_2eproto();  return *default_instance_;
}

ProtoActivityTick* ProtoActivityTick::default_instance_ = NULL;

ProtoActivityTick* ProtoActivityTick::New() const {
  return new ProtoActivityTick;
}

void ProtoActivityTick::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activity_id_ = 0;
    begin_tick_ = 0;
    end_tick_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoActivityTick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 activity_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activity_id_)));
          set_has_activity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_begin_tick;
        break;
      }
      
      // optional int32 begin_tick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begin_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &begin_tick_)));
          set_has_begin_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_end_tick;
        break;
      }
      
      // optional int32 end_tick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_tick_)));
          set_has_end_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoActivityTick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 activity_id = 1;
  if (has_activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->activity_id(), output);
  }
  
  // optional int32 begin_tick = 2;
  if (has_begin_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->begin_tick(), output);
  }
  
  // optional int32 end_tick = 3;
  if (has_end_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->end_tick(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoActivityTick::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 activity_id = 1;
  if (has_activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->activity_id(), target);
  }
  
  // optional int32 begin_tick = 2;
  if (has_begin_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->begin_tick(), target);
  }
  
  // optional int32 end_tick = 3;
  if (has_end_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->end_tick(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoActivityTick::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 activity_id = 1;
    if (has_activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activity_id());
    }
    
    // optional int32 begin_tick = 2;
    if (has_begin_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->begin_tick());
    }
    
    // optional int32 end_tick = 3;
    if (has_end_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_tick());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoActivityTick::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoActivityTick* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoActivityTick*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoActivityTick::MergeFrom(const ProtoActivityTick& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity_id()) {
      set_activity_id(from.activity_id());
    }
    if (from.has_begin_tick()) {
      set_begin_tick(from.begin_tick());
    }
    if (from.has_end_tick()) {
      set_end_tick(from.end_tick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoActivityTick::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoActivityTick::CopyFrom(const ProtoActivityTick& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoActivityTick::IsInitialized() const {
  
  return true;
}

void ProtoActivityTick::Swap(ProtoActivityTick* other) {
  if (other != this) {
    std::swap(activity_id_, other->activity_id_);
    std::swap(begin_tick_, other->begin_tick_);
    std::swap(end_tick_, other->end_tick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoActivityTick::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoActivityTick_descriptor_;
  metadata.reflection = ProtoActivityTick_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoLotteryWaitAward::kIncGoldFieldNumber;
const int ProtoLotteryWaitAward::kIncScoreFieldNumber;
const int ProtoLotteryWaitAward::kAwardItemFieldNumber;
const int ProtoLotteryWaitAward::kBuyTypeFieldNumber;
#endif  // !_MSC_VER

ProtoLotteryWaitAward::ProtoLotteryWaitAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoLotteryWaitAward::InitAsDefaultInstance() {
  award_item_ = const_cast< ::ProtoItem*>(&::ProtoItem::default_instance());
}

ProtoLotteryWaitAward::ProtoLotteryWaitAward(const ProtoLotteryWaitAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoLotteryWaitAward::SharedCtor() {
  _cached_size_ = 0;
  inc_gold_ = 0;
  inc_score_ = 0;
  award_item_ = NULL;
  buy_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoLotteryWaitAward::~ProtoLotteryWaitAward() {
  SharedDtor();
}

void ProtoLotteryWaitAward::SharedDtor() {
  if (this != default_instance_) {
    delete award_item_;
  }
}

void ProtoLotteryWaitAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoLotteryWaitAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoLotteryWaitAward_descriptor_;
}

const ProtoLotteryWaitAward& ProtoLotteryWaitAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInnerPublic_2eproto();  return *default_instance_;
}

ProtoLotteryWaitAward* ProtoLotteryWaitAward::default_instance_ = NULL;

ProtoLotteryWaitAward* ProtoLotteryWaitAward::New() const {
  return new ProtoLotteryWaitAward;
}

void ProtoLotteryWaitAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    inc_gold_ = 0;
    inc_score_ = 0;
    if (has_award_item()) {
      if (award_item_ != NULL) award_item_->::ProtoItem::Clear();
    }
    buy_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoLotteryWaitAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 inc_gold = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inc_gold_)));
          set_has_inc_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_inc_score;
        break;
      }
      
      // optional int32 inc_score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inc_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inc_score_)));
          set_has_inc_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_award_item;
        break;
      }
      
      // optional .ProtoItem award_item = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_award_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_award_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_buy_type;
        break;
      }
      
      // optional int32 buy_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_type_)));
          set_has_buy_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoLotteryWaitAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 inc_gold = 1;
  if (has_inc_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->inc_gold(), output);
  }
  
  // optional int32 inc_score = 2;
  if (has_inc_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->inc_score(), output);
  }
  
  // optional .ProtoItem award_item = 3;
  if (has_award_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->award_item(), output);
  }
  
  // optional int32 buy_type = 4;
  if (has_buy_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->buy_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoLotteryWaitAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 inc_gold = 1;
  if (has_inc_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->inc_gold(), target);
  }
  
  // optional int32 inc_score = 2;
  if (has_inc_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->inc_score(), target);
  }
  
  // optional .ProtoItem award_item = 3;
  if (has_award_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->award_item(), target);
  }
  
  // optional int32 buy_type = 4;
  if (has_buy_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->buy_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoLotteryWaitAward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 inc_gold = 1;
    if (has_inc_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inc_gold());
    }
    
    // optional int32 inc_score = 2;
    if (has_inc_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inc_score());
    }
    
    // optional .ProtoItem award_item = 3;
    if (has_award_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->award_item());
    }
    
    // optional int32 buy_type = 4;
    if (has_buy_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoLotteryWaitAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoLotteryWaitAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoLotteryWaitAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoLotteryWaitAward::MergeFrom(const ProtoLotteryWaitAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_inc_gold()) {
      set_inc_gold(from.inc_gold());
    }
    if (from.has_inc_score()) {
      set_inc_score(from.inc_score());
    }
    if (from.has_award_item()) {
      mutable_award_item()->::ProtoItem::MergeFrom(from.award_item());
    }
    if (from.has_buy_type()) {
      set_buy_type(from.buy_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoLotteryWaitAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoLotteryWaitAward::CopyFrom(const ProtoLotteryWaitAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoLotteryWaitAward::IsInitialized() const {
  
  return true;
}

void ProtoLotteryWaitAward::Swap(ProtoLotteryWaitAward* other) {
  if (other != this) {
    std::swap(inc_gold_, other->inc_gold_);
    std::swap(inc_score_, other->inc_score_);
    std::swap(award_item_, other->award_item_);
    std::swap(buy_type_, other->buy_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoLotteryWaitAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoLotteryWaitAward_descriptor_;
  metadata.reflection = ProtoLotteryWaitAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoMongoData::kOpTypeFieldNumber;
const int ProtoMongoData::kTableNameFieldNumber;
const int ProtoMongoData::kCondBsonFieldNumber;
const int ProtoMongoData::kIsInsertFieldNumber;
const int ProtoMongoData::kDataTypeFieldNumber;
const int ProtoMongoData::kDataBsonFieldNumber;
#endif  // !_MSC_VER

ProtoMongoData::ProtoMongoData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoMongoData::InitAsDefaultInstance() {
}

ProtoMongoData::ProtoMongoData(const ProtoMongoData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoMongoData::SharedCtor() {
  _cached_size_ = 0;
  op_type_ = 0;
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cond_bson_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_insert_ = 0;
  data_type_ = 0;
  data_bson_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoMongoData::~ProtoMongoData() {
  SharedDtor();
}

void ProtoMongoData::SharedDtor() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (cond_bson_ != &::google::protobuf::internal::kEmptyString) {
    delete cond_bson_;
  }
  if (data_bson_ != &::google::protobuf::internal::kEmptyString) {
    delete data_bson_;
  }
  if (this != default_instance_) {
  }
}

void ProtoMongoData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoMongoData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoMongoData_descriptor_;
}

const ProtoMongoData& ProtoMongoData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInnerPublic_2eproto();  return *default_instance_;
}

ProtoMongoData* ProtoMongoData::default_instance_ = NULL;

ProtoMongoData* ProtoMongoData::New() const {
  return new ProtoMongoData;
}

void ProtoMongoData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_type_ = 0;
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::kEmptyString) {
        table_name_->clear();
      }
    }
    if (has_cond_bson()) {
      if (cond_bson_ != &::google::protobuf::internal::kEmptyString) {
        cond_bson_->clear();
      }
    }
    is_insert_ = 0;
    data_type_ = 0;
    if (has_data_bson()) {
      if (data_bson_ != &::google::protobuf::internal::kEmptyString) {
        data_bson_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoMongoData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 op_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &op_type_)));
          set_has_op_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table_name;
        break;
      }
      
      // optional string table_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cond_bson;
        break;
      }
      
      // optional string cond_bson = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cond_bson:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cond_bson()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cond_bson().data(), this->cond_bson().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_insert;
        break;
      }
      
      // optional int32 is_insert = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_insert:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_insert_)));
          set_has_is_insert();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_data_type;
        break;
      }
      
      // optional int32 data_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_type_)));
          set_has_data_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_data_bson;
        break;
      }
      
      // optional string data_bson = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_bson:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_bson()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data_bson().data(), this->data_bson().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoMongoData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 op_type = 1;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->op_type(), output);
  }
  
  // optional string table_name = 2;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->table_name(), output);
  }
  
  // optional string cond_bson = 3;
  if (has_cond_bson()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cond_bson().data(), this->cond_bson().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->cond_bson(), output);
  }
  
  // optional int32 is_insert = 4;
  if (has_is_insert()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->is_insert(), output);
  }
  
  // optional int32 data_type = 5;
  if (has_data_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->data_type(), output);
  }
  
  // optional string data_bson = 6;
  if (has_data_bson()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data_bson().data(), this->data_bson().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->data_bson(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoMongoData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 op_type = 1;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->op_type(), target);
  }
  
  // optional string table_name = 2;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->table_name(), target);
  }
  
  // optional string cond_bson = 3;
  if (has_cond_bson()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cond_bson().data(), this->cond_bson().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cond_bson(), target);
  }
  
  // optional int32 is_insert = 4;
  if (has_is_insert()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->is_insert(), target);
  }
  
  // optional int32 data_type = 5;
  if (has_data_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->data_type(), target);
  }
  
  // optional string data_bson = 6;
  if (has_data_bson()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data_bson().data(), this->data_bson().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->data_bson(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoMongoData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 op_type = 1;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->op_type());
    }
    
    // optional string table_name = 2;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }
    
    // optional string cond_bson = 3;
    if (has_cond_bson()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cond_bson());
    }
    
    // optional int32 is_insert = 4;
    if (has_is_insert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_insert());
    }
    
    // optional int32 data_type = 5;
    if (has_data_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data_type());
    }
    
    // optional string data_bson = 6;
    if (has_data_bson()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data_bson());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoMongoData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoMongoData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoMongoData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoMongoData::MergeFrom(const ProtoMongoData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
    if (from.has_cond_bson()) {
      set_cond_bson(from.cond_bson());
    }
    if (from.has_is_insert()) {
      set_is_insert(from.is_insert());
    }
    if (from.has_data_type()) {
      set_data_type(from.data_type());
    }
    if (from.has_data_bson()) {
      set_data_bson(from.data_bson());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoMongoData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMongoData::CopyFrom(const ProtoMongoData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMongoData::IsInitialized() const {
  
  return true;
}

void ProtoMongoData::Swap(ProtoMongoData* other) {
  if (other != this) {
    std::swap(op_type_, other->op_type_);
    std::swap(table_name_, other->table_name_);
    std::swap(cond_bson_, other->cond_bson_);
    std::swap(is_insert_, other->is_insert_);
    std::swap(data_type_, other->data_type_);
    std::swap(data_bson_, other->data_bson_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoMongoData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoMongoData_descriptor_;
  metadata.reflection = ProtoMongoData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoActFlower::kRoleIdFieldNumber;
const int ProtoActFlower::kNameFieldNumber;
const int ProtoActFlower::kRankIndexFieldNumber;
const int ProtoActFlower::kFlowerNumFieldNumber;
const int ProtoActFlower::kCarrerFieldNumber;
#endif  // !_MSC_VER

ProtoActFlower::ProtoActFlower()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoActFlower::InitAsDefaultInstance() {
}

ProtoActFlower::ProtoActFlower(const ProtoActFlower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoActFlower::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rank_index_ = 0;
  flower_num_ = 0;
  carrer_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoActFlower::~ProtoActFlower() {
  SharedDtor();
}

void ProtoActFlower::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoActFlower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoActFlower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoActFlower_descriptor_;
}

const ProtoActFlower& ProtoActFlower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInnerPublic_2eproto();  return *default_instance_;
}

ProtoActFlower* ProtoActFlower::default_instance_ = NULL;

ProtoActFlower* ProtoActFlower::New() const {
  return new ProtoActFlower;
}

void ProtoActFlower::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    rank_index_ = 0;
    flower_num_ = 0;
    carrer_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoActFlower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank_index;
        break;
      }
      
      // optional int32 rank_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_index_)));
          set_has_rank_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_flower_num;
        break;
      }
      
      // optional int32 flower_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flower_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flower_num_)));
          set_has_flower_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_carrer;
        break;
      }
      
      // optional int32 carrer = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carrer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &carrer_)));
          set_has_carrer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoActFlower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_id(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional int32 rank_index = 3;
  if (has_rank_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rank_index(), output);
  }
  
  // optional int32 flower_num = 4;
  if (has_flower_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->flower_num(), output);
  }
  
  // optional int32 carrer = 5;
  if (has_carrer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->carrer(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoActFlower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_id(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional int32 rank_index = 3;
  if (has_rank_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rank_index(), target);
  }
  
  // optional int32 flower_num = 4;
  if (has_flower_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->flower_num(), target);
  }
  
  // optional int32 carrer = 5;
  if (has_carrer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->carrer(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoActFlower::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 rank_index = 3;
    if (has_rank_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_index());
    }
    
    // optional int32 flower_num = 4;
    if (has_flower_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flower_num());
    }
    
    // optional int32 carrer = 5;
    if (has_carrer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->carrer());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoActFlower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoActFlower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoActFlower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoActFlower::MergeFrom(const ProtoActFlower& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_rank_index()) {
      set_rank_index(from.rank_index());
    }
    if (from.has_flower_num()) {
      set_flower_num(from.flower_num());
    }
    if (from.has_carrer()) {
      set_carrer(from.carrer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoActFlower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoActFlower::CopyFrom(const ProtoActFlower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoActFlower::IsInitialized() const {
  
  return true;
}

void ProtoActFlower::Swap(ProtoActFlower* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(name_, other->name_);
    std::swap(rank_index_, other->rank_index_);
    std::swap(flower_num_, other->flower_num_);
    std::swap(carrer_, other->carrer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoActFlower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoActFlower_descriptor_;
  metadata.reflection = ProtoActFlower_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoMount::kMountGradeFieldNumber;
const int ProtoMount::kMountShapeFieldNumber;
const int ProtoMount::kOnMountFieldNumber;
const int ProtoMount::kBlessFieldNumber;
const int ProtoMount::kFailTimesFieldNumber;
const int ProtoMount::kFinishBlessFieldNumber;
const int ProtoMount::kAbilityFieldNumber;
const int ProtoMount::kGrowthFieldNumber;
const int ProtoMount::kSkillFieldNumber;
const int ProtoMount::kOpenFieldNumber;
const int ProtoMount::kActShapeFieldNumber;
#endif  // !_MSC_VER

ProtoMount::ProtoMount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoMount::InitAsDefaultInstance() {
}

ProtoMount::ProtoMount(const ProtoMount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoMount::SharedCtor() {
  _cached_size_ = 0;
  mount_grade_ = 0;
  mount_shape_ = 0;
  on_mount_ = 0;
  bless_ = 0;
  fail_times_ = 0;
  finish_bless_ = GOOGLE_LONGLONG(0);
  ability_ = 0;
  growth_ = 0;
  open_ = 0;
  act_shape_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoMount::~ProtoMount() {
  SharedDtor();
}

void ProtoMount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoMount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoMount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoMount_descriptor_;
}

const ProtoMount& ProtoMount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInnerPublic_2eproto();  return *default_instance_;
}

ProtoMount* ProtoMount::default_instance_ = NULL;

ProtoMount* ProtoMount::New() const {
  return new ProtoMount;
}

void ProtoMount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mount_grade_ = 0;
    mount_shape_ = 0;
    on_mount_ = 0;
    bless_ = 0;
    fail_times_ = 0;
    finish_bless_ = GOOGLE_LONGLONG(0);
    ability_ = 0;
    growth_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    open_ = 0;
    act_shape_ = 0;
  }
  skill_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoMount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mount_grade = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mount_grade_)));
          set_has_mount_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mount_shape;
        break;
      }
      
      // optional int32 mount_shape = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mount_shape:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mount_shape_)));
          set_has_mount_shape();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_on_mount;
        break;
      }
      
      // optional int32 on_mount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_on_mount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &on_mount_)));
          set_has_on_mount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bless;
        break;
      }
      
      // optional int32 bless = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bless:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bless_)));
          set_has_bless();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fail_times;
        break;
      }
      
      // optional int32 fail_times = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fail_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fail_times_)));
          set_has_fail_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_finish_bless;
        break;
      }
      
      // optional int64 finish_bless = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finish_bless:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &finish_bless_)));
          set_has_finish_bless();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ability;
        break;
      }
      
      // optional int32 ability = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ability_)));
          set_has_ability();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_growth;
        break;
      }
      
      // optional int32 growth = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_growth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &growth_)));
          set_has_growth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_skill;
        break;
      }
      
      // repeated .ProtoPairObj skill = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_skill;
        if (input->ExpectTag(80)) goto parse_open;
        break;
      }
      
      // optional int32 open = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_act_shape;
        break;
      }
      
      // optional int32 act_shape = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_act_shape:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &act_shape_)));
          set_has_act_shape();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoMount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 mount_grade = 1;
  if (has_mount_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mount_grade(), output);
  }
  
  // optional int32 mount_shape = 2;
  if (has_mount_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mount_shape(), output);
  }
  
  // optional int32 on_mount = 3;
  if (has_on_mount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->on_mount(), output);
  }
  
  // optional int32 bless = 4;
  if (has_bless()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bless(), output);
  }
  
  // optional int32 fail_times = 5;
  if (has_fail_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->fail_times(), output);
  }
  
  // optional int64 finish_bless = 6;
  if (has_finish_bless()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->finish_bless(), output);
  }
  
  // optional int32 ability = 7;
  if (has_ability()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ability(), output);
  }
  
  // optional int32 growth = 8;
  if (has_growth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->growth(), output);
  }
  
  // repeated .ProtoPairObj skill = 9;
  for (int i = 0; i < this->skill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->skill(i), output);
  }
  
  // optional int32 open = 10;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->open(), output);
  }
  
  // optional int32 act_shape = 11;
  if (has_act_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->act_shape(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoMount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 mount_grade = 1;
  if (has_mount_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mount_grade(), target);
  }
  
  // optional int32 mount_shape = 2;
  if (has_mount_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mount_shape(), target);
  }
  
  // optional int32 on_mount = 3;
  if (has_on_mount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->on_mount(), target);
  }
  
  // optional int32 bless = 4;
  if (has_bless()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bless(), target);
  }
  
  // optional int32 fail_times = 5;
  if (has_fail_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->fail_times(), target);
  }
  
  // optional int64 finish_bless = 6;
  if (has_finish_bless()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->finish_bless(), target);
  }
  
  // optional int32 ability = 7;
  if (has_ability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ability(), target);
  }
  
  // optional int32 growth = 8;
  if (has_growth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->growth(), target);
  }
  
  // repeated .ProtoPairObj skill = 9;
  for (int i = 0; i < this->skill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->skill(i), target);
  }
  
  // optional int32 open = 10;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->open(), target);
  }
  
  // optional int32 act_shape = 11;
  if (has_act_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->act_shape(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoMount::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 mount_grade = 1;
    if (has_mount_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mount_grade());
    }
    
    // optional int32 mount_shape = 2;
    if (has_mount_shape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mount_shape());
    }
    
    // optional int32 on_mount = 3;
    if (has_on_mount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->on_mount());
    }
    
    // optional int32 bless = 4;
    if (has_bless()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bless());
    }
    
    // optional int32 fail_times = 5;
    if (has_fail_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fail_times());
    }
    
    // optional int64 finish_bless = 6;
    if (has_finish_bless()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->finish_bless());
    }
    
    // optional int32 ability = 7;
    if (has_ability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ability());
    }
    
    // optional int32 growth = 8;
    if (has_growth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->growth());
    }
    
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int32 open = 10;
    if (has_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open());
    }
    
    // optional int32 act_shape = 11;
    if (has_act_shape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->act_shape());
    }
    
  }
  // repeated .ProtoPairObj skill = 9;
  total_size += 1 * this->skill_size();
  for (int i = 0; i < this->skill_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoMount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoMount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoMount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoMount::MergeFrom(const ProtoMount& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_.MergeFrom(from.skill_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mount_grade()) {
      set_mount_grade(from.mount_grade());
    }
    if (from.has_mount_shape()) {
      set_mount_shape(from.mount_shape());
    }
    if (from.has_on_mount()) {
      set_on_mount(from.on_mount());
    }
    if (from.has_bless()) {
      set_bless(from.bless());
    }
    if (from.has_fail_times()) {
      set_fail_times(from.fail_times());
    }
    if (from.has_finish_bless()) {
      set_finish_bless(from.finish_bless());
    }
    if (from.has_ability()) {
      set_ability(from.ability());
    }
    if (from.has_growth()) {
      set_growth(from.growth());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_open()) {
      set_open(from.open());
    }
    if (from.has_act_shape()) {
      set_act_shape(from.act_shape());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoMount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMount::CopyFrom(const ProtoMount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMount::IsInitialized() const {
  
  return true;
}

void ProtoMount::Swap(ProtoMount* other) {
  if (other != this) {
    std::swap(mount_grade_, other->mount_grade_);
    std::swap(mount_shape_, other->mount_shape_);
    std::swap(on_mount_, other->on_mount_);
    std::swap(bless_, other->bless_);
    std::swap(fail_times_, other->fail_times_);
    std::swap(finish_bless_, other->finish_bless_);
    std::swap(ability_, other->ability_);
    std::swap(growth_, other->growth_);
    skill_.Swap(&other->skill_);
    std::swap(open_, other->open_);
    std::swap(act_shape_, other->act_shape_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoMount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoMount_descriptor_;
  metadata.reflection = ProtoMount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoScriptType::kScriptTypeFieldNumber;
const int ProtoScriptType::kScriptSortFieldNumber;
const int ProtoScriptType::kPassWaveFieldNumber;
const int ProtoScriptType::kPassChapterFieldNumber;
const int ProtoScriptType::kNotifyWaveFieldNumber;
const int ProtoScriptType::kNotifyChapterFieldNumber;
const int ProtoScriptType::kIsSweepFieldNumber;
const int ProtoScriptType::kUsedTimesTickFieldNumber;
const int ProtoScriptType::kRewardMapFieldNumber;
const int ProtoScriptType::kStartWaveFieldNumber;
const int ProtoScriptType::kStartChapterFieldNumber;
#endif  // !_MSC_VER

ProtoScriptType::ProtoScriptType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoScriptType::InitAsDefaultInstance() {
}

ProtoScriptType::ProtoScriptType(const ProtoScriptType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoScriptType::SharedCtor() {
  _cached_size_ = 0;
  script_type_ = 0;
  pass_wave_ = 0;
  pass_chapter_ = 0;
  notify_wave_ = 0;
  notify_chapter_ = 0;
  is_sweep_ = 0;
  used_times_tick_ = 0;
  start_wave_ = 0;
  start_chapter_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoScriptType::~ProtoScriptType() {
  SharedDtor();
}

void ProtoScriptType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoScriptType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoScriptType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoScriptType_descriptor_;
}

const ProtoScriptType& ProtoScriptType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInnerPublic_2eproto();  return *default_instance_;
}

ProtoScriptType* ProtoScriptType::default_instance_ = NULL;

ProtoScriptType* ProtoScriptType::New() const {
  return new ProtoScriptType;
}

void ProtoScriptType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    script_type_ = 0;
    pass_wave_ = 0;
    pass_chapter_ = 0;
    notify_wave_ = 0;
    notify_chapter_ = 0;
    is_sweep_ = 0;
    used_times_tick_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    start_wave_ = 0;
    start_chapter_ = 0;
  }
  script_sort_.Clear();
  reward_map_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoScriptType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 script_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &script_type_)));
          set_has_script_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_script_sort;
        break;
      }
      
      // repeated int32 script_sort = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_script_sort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_script_sort())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_script_sort())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_script_sort;
        if (input->ExpectTag(24)) goto parse_pass_wave;
        break;
      }
      
      // optional int32 pass_wave = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass_wave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_wave_)));
          set_has_pass_wave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pass_chapter;
        break;
      }
      
      // optional int32 pass_chapter = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass_chapter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_chapter_)));
          set_has_pass_chapter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_notify_wave;
        break;
      }
      
      // optional int32 notify_wave = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_notify_wave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &notify_wave_)));
          set_has_notify_wave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_notify_chapter;
        break;
      }
      
      // optional int32 notify_chapter = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_notify_chapter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &notify_chapter_)));
          set_has_notify_chapter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_sweep;
        break;
      }
      
      // optional int32 is_sweep = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_sweep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_sweep_)));
          set_has_is_sweep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_used_times_tick;
        break;
      }
      
      // optional int32 used_times_tick = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_used_times_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &used_times_tick_)));
          set_has_used_times_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_reward_map;
        break;
      }
      
      // repeated .ProtoPairObj reward_map = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_reward_map;
        if (input->ExpectTag(80)) goto parse_start_wave;
        break;
      }
      
      // optional int32 start_wave = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_wave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_wave_)));
          set_has_start_wave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_start_chapter;
        break;
      }
      
      // optional int32 start_chapter = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_chapter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_chapter_)));
          set_has_start_chapter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoScriptType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 script_type = 1;
  if (has_script_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->script_type(), output);
  }
  
  // repeated int32 script_sort = 2;
  for (int i = 0; i < this->script_sort_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->script_sort(i), output);
  }
  
  // optional int32 pass_wave = 3;
  if (has_pass_wave()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pass_wave(), output);
  }
  
  // optional int32 pass_chapter = 4;
  if (has_pass_chapter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pass_chapter(), output);
  }
  
  // optional int32 notify_wave = 5;
  if (has_notify_wave()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->notify_wave(), output);
  }
  
  // optional int32 notify_chapter = 6;
  if (has_notify_chapter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->notify_chapter(), output);
  }
  
  // optional int32 is_sweep = 7;
  if (has_is_sweep()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->is_sweep(), output);
  }
  
  // optional int32 used_times_tick = 8;
  if (has_used_times_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->used_times_tick(), output);
  }
  
  // repeated .ProtoPairObj reward_map = 9;
  for (int i = 0; i < this->reward_map_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->reward_map(i), output);
  }
  
  // optional int32 start_wave = 10;
  if (has_start_wave()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->start_wave(), output);
  }
  
  // optional int32 start_chapter = 11;
  if (has_start_chapter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->start_chapter(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoScriptType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 script_type = 1;
  if (has_script_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->script_type(), target);
  }
  
  // repeated int32 script_sort = 2;
  for (int i = 0; i < this->script_sort_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->script_sort(i), target);
  }
  
  // optional int32 pass_wave = 3;
  if (has_pass_wave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pass_wave(), target);
  }
  
  // optional int32 pass_chapter = 4;
  if (has_pass_chapter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pass_chapter(), target);
  }
  
  // optional int32 notify_wave = 5;
  if (has_notify_wave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->notify_wave(), target);
  }
  
  // optional int32 notify_chapter = 6;
  if (has_notify_chapter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->notify_chapter(), target);
  }
  
  // optional int32 is_sweep = 7;
  if (has_is_sweep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->is_sweep(), target);
  }
  
  // optional int32 used_times_tick = 8;
  if (has_used_times_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->used_times_tick(), target);
  }
  
  // repeated .ProtoPairObj reward_map = 9;
  for (int i = 0; i < this->reward_map_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->reward_map(i), target);
  }
  
  // optional int32 start_wave = 10;
  if (has_start_wave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->start_wave(), target);
  }
  
  // optional int32 start_chapter = 11;
  if (has_start_chapter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->start_chapter(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoScriptType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 script_type = 1;
    if (has_script_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->script_type());
    }
    
    // optional int32 pass_wave = 3;
    if (has_pass_wave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass_wave());
    }
    
    // optional int32 pass_chapter = 4;
    if (has_pass_chapter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass_chapter());
    }
    
    // optional int32 notify_wave = 5;
    if (has_notify_wave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->notify_wave());
    }
    
    // optional int32 notify_chapter = 6;
    if (has_notify_chapter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->notify_chapter());
    }
    
    // optional int32 is_sweep = 7;
    if (has_is_sweep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_sweep());
    }
    
    // optional int32 used_times_tick = 8;
    if (has_used_times_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->used_times_tick());
    }
    
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int32 start_wave = 10;
    if (has_start_wave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_wave());
    }
    
    // optional int32 start_chapter = 11;
    if (has_start_chapter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_chapter());
    }
    
  }
  // repeated int32 script_sort = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->script_sort_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->script_sort(i));
    }
    total_size += 1 * this->script_sort_size() + data_size;
  }
  
  // repeated .ProtoPairObj reward_map = 9;
  total_size += 1 * this->reward_map_size();
  for (int i = 0; i < this->reward_map_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward_map(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoScriptType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoScriptType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoScriptType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoScriptType::MergeFrom(const ProtoScriptType& from) {
  GOOGLE_CHECK_NE(&from, this);
  script_sort_.MergeFrom(from.script_sort_);
  reward_map_.MergeFrom(from.reward_map_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_script_type()) {
      set_script_type(from.script_type());
    }
    if (from.has_pass_wave()) {
      set_pass_wave(from.pass_wave());
    }
    if (from.has_pass_chapter()) {
      set_pass_chapter(from.pass_chapter());
    }
    if (from.has_notify_wave()) {
      set_notify_wave(from.notify_wave());
    }
    if (from.has_notify_chapter()) {
      set_notify_chapter(from.notify_chapter());
    }
    if (from.has_is_sweep()) {
      set_is_sweep(from.is_sweep());
    }
    if (from.has_used_times_tick()) {
      set_used_times_tick(from.used_times_tick());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_start_wave()) {
      set_start_wave(from.start_wave());
    }
    if (from.has_start_chapter()) {
      set_start_chapter(from.start_chapter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoScriptType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoScriptType::CopyFrom(const ProtoScriptType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoScriptType::IsInitialized() const {
  
  return true;
}

void ProtoScriptType::Swap(ProtoScriptType* other) {
  if (other != this) {
    std::swap(script_type_, other->script_type_);
    script_sort_.Swap(&other->script_sort_);
    std::swap(pass_wave_, other->pass_wave_);
    std::swap(pass_chapter_, other->pass_chapter_);
    std::swap(notify_wave_, other->notify_wave_);
    std::swap(notify_chapter_, other->notify_chapter_);
    std::swap(is_sweep_, other->is_sweep_);
    std::swap(used_times_tick_, other->used_times_tick_);
    reward_map_.Swap(&other->reward_map_);
    std::swap(start_wave_, other->start_wave_);
    std::swap(start_chapter_, other->start_chapter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoScriptType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoScriptType_descriptor_;
  metadata.reflection = ProtoScriptType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoScriptFirstAward::kScriptWaveIdFieldNumber;
const int ProtoScriptFirstAward::kIsGetFieldNumber;
#endif  // !_MSC_VER

ProtoScriptFirstAward::ProtoScriptFirstAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoScriptFirstAward::InitAsDefaultInstance() {
}

ProtoScriptFirstAward::ProtoScriptFirstAward(const ProtoScriptFirstAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoScriptFirstAward::SharedCtor() {
  _cached_size_ = 0;
  script_wave_id_ = 0;
  is_get_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoScriptFirstAward::~ProtoScriptFirstAward() {
  SharedDtor();
}

void ProtoScriptFirstAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoScriptFirstAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoScriptFirstAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoScriptFirstAward_descriptor_;
}

const ProtoScriptFirstAward& ProtoScriptFirstAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInnerPublic_2eproto();  return *default_instance_;
}

ProtoScriptFirstAward* ProtoScriptFirstAward::default_instance_ = NULL;

ProtoScriptFirstAward* ProtoScriptFirstAward::New() const {
  return new ProtoScriptFirstAward;
}

void ProtoScriptFirstAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    script_wave_id_ = 0;
    is_get_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoScriptFirstAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 script_wave_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &script_wave_id_)));
          set_has_script_wave_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_get;
        break;
      }
      
      // optional int32 is_get = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_get:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_get_)));
          set_has_is_get();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoScriptFirstAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 script_wave_id = 1;
  if (has_script_wave_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->script_wave_id(), output);
  }
  
  // optional int32 is_get = 2;
  if (has_is_get()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->is_get(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoScriptFirstAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 script_wave_id = 1;
  if (has_script_wave_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->script_wave_id(), target);
  }
  
  // optional int32 is_get = 2;
  if (has_is_get()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->is_get(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoScriptFirstAward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 script_wave_id = 1;
    if (has_script_wave_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->script_wave_id());
    }
    
    // optional int32 is_get = 2;
    if (has_is_get()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_get());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoScriptFirstAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoScriptFirstAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoScriptFirstAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoScriptFirstAward::MergeFrom(const ProtoScriptFirstAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_script_wave_id()) {
      set_script_wave_id(from.script_wave_id());
    }
    if (from.has_is_get()) {
      set_is_get(from.is_get());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoScriptFirstAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoScriptFirstAward::CopyFrom(const ProtoScriptFirstAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoScriptFirstAward::IsInitialized() const {
  
  return true;
}

void ProtoScriptFirstAward::Swap(ProtoScriptFirstAward* other) {
  if (other != this) {
    std::swap(script_wave_id_, other->script_wave_id_);
    std::swap(is_get_, other->is_get_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoScriptFirstAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoScriptFirstAward_descriptor_;
  metadata.reflection = ProtoScriptFirstAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecordMount::kRoleIdFieldNumber;
const int RecordMount::kSubAgentFieldNumber;
const int RecordMount::kSerialTypeFieldNumber;
const int RecordMount::kMountTypeFieldNumber;
const int RecordMount::kGradeFieldNumber;
const int RecordMount::kSkillFieldNumber;
const int RecordMount::kEquipFieldNumber;
const int RecordMount::kBlessFieldNumber;
const int RecordMount::kTimeFieldNumber;
const int RecordMount::kTableNameFieldNumber;
#endif  // !_MSC_VER

RecordMount::RecordMount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecordMount::InitAsDefaultInstance() {
}

RecordMount::RecordMount(const RecordMount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecordMount::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_LONGLONG(0);
  sub_agent_ = 0;
  serial_type_ = 0;
  mount_type_ = 0;
  grade_ = 0;
  skill_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  equip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bless_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordMount::~RecordMount() {
  SharedDtor();
}

void RecordMount::SharedDtor() {
  if (skill_ != &::google::protobuf::internal::kEmptyString) {
    delete skill_;
  }
  if (equip_ != &::google::protobuf::internal::kEmptyString) {
    delete equip_;
  }
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (this != default_instance_) {
  }
}

void RecordMount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordMount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordMount_descriptor_;
}

const RecordMount& RecordMount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInnerPublic_2eproto();  return *default_instance_;
}

RecordMount* RecordMount::default_instance_ = NULL;

RecordMount* RecordMount::New() const {
  return new RecordMount;
}

void RecordMount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_LONGLONG(0);
    sub_agent_ = 0;
    serial_type_ = 0;
    mount_type_ = 0;
    grade_ = 0;
    if (has_skill()) {
      if (skill_ != &::google::protobuf::internal::kEmptyString) {
        skill_->clear();
      }
    }
    if (has_equip()) {
      if (equip_ != &::google::protobuf::internal::kEmptyString) {
        equip_->clear();
      }
    }
    bless_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    time_ = GOOGLE_LONGLONG(0);
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::kEmptyString) {
        table_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordMount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sub_agent;
        break;
      }
      
      // optional int32 sub_agent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_agent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub_agent_)));
          set_has_sub_agent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_serial_type;
        break;
      }
      
      // optional int32 serial_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serial_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serial_type_)));
          set_has_serial_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mount_type;
        break;
      }
      
      // optional int32 mount_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mount_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mount_type_)));
          set_has_mount_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_grade;
        break;
      }
      
      // optional int32 grade = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_skill;
        break;
      }
      
      // optional string skill = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skill()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->skill().data(), this->skill().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_equip;
        break;
      }
      
      // optional string equip = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_equip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->equip().data(), this->equip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bless;
        break;
      }
      
      // optional int32 bless = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bless:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bless_)));
          set_has_bless();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_time;
        break;
      }
      
      // optional int64 time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_table_name;
        break;
      }
      
      // optional string table_name = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecordMount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_id(), output);
  }
  
  // optional int32 sub_agent = 2;
  if (has_sub_agent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sub_agent(), output);
  }
  
  // optional int32 serial_type = 3;
  if (has_serial_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->serial_type(), output);
  }
  
  // optional int32 mount_type = 4;
  if (has_mount_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mount_type(), output);
  }
  
  // optional int32 grade = 5;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->grade(), output);
  }
  
  // optional string skill = 6;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->skill().data(), this->skill().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->skill(), output);
  }
  
  // optional string equip = 7;
  if (has_equip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equip().data(), this->equip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->equip(), output);
  }
  
  // optional int32 bless = 8;
  if (has_bless()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->bless(), output);
  }
  
  // optional int64 time = 9;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->time(), output);
  }
  
  // optional string table_name = 10;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->table_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecordMount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_id(), target);
  }
  
  // optional int32 sub_agent = 2;
  if (has_sub_agent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sub_agent(), target);
  }
  
  // optional int32 serial_type = 3;
  if (has_serial_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->serial_type(), target);
  }
  
  // optional int32 mount_type = 4;
  if (has_mount_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mount_type(), target);
  }
  
  // optional int32 grade = 5;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->grade(), target);
  }
  
  // optional string skill = 6;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->skill().data(), this->skill().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->skill(), target);
  }
  
  // optional string equip = 7;
  if (has_equip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equip().data(), this->equip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->equip(), target);
  }
  
  // optional int32 bless = 8;
  if (has_bless()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->bless(), target);
  }
  
  // optional int64 time = 9;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->time(), target);
  }
  
  // optional string table_name = 10;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->table_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecordMount::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_id());
    }
    
    // optional int32 sub_agent = 2;
    if (has_sub_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sub_agent());
    }
    
    // optional int32 serial_type = 3;
    if (has_serial_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serial_type());
    }
    
    // optional int32 mount_type = 4;
    if (has_mount_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mount_type());
    }
    
    // optional int32 grade = 5;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }
    
    // optional string skill = 6;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->skill());
    }
    
    // optional string equip = 7;
    if (has_equip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->equip());
    }
    
    // optional int32 bless = 8;
    if (has_bless()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bless());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 time = 9;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }
    
    // optional string table_name = 10;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordMount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecordMount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecordMount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecordMount::MergeFrom(const RecordMount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_sub_agent()) {
      set_sub_agent(from.sub_agent());
    }
    if (from.has_serial_type()) {
      set_serial_type(from.serial_type());
    }
    if (from.has_mount_type()) {
      set_mount_type(from.mount_type());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_skill()) {
      set_skill(from.skill());
    }
    if (from.has_equip()) {
      set_equip(from.equip());
    }
    if (from.has_bless()) {
      set_bless(from.bless());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordMount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordMount::CopyFrom(const RecordMount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordMount::IsInitialized() const {
  
  return true;
}

void RecordMount::Swap(RecordMount* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(sub_agent_, other->sub_agent_);
    std::swap(serial_type_, other->serial_type_);
    std::swap(mount_type_, other->mount_type_);
    std::swap(grade_, other->grade_);
    std::swap(skill_, other->skill_);
    std::swap(equip_, other->equip_);
    std::swap(bless_, other->bless_);
    std::swap(time_, other->time_);
    std::swap(table_name_, other->table_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecordMount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordMount_descriptor_;
  metadata.reflection = RecordMount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecordActivity::kTableNameFieldNumber;
const int RecordActivity::kTimeFieldNumber;
const int RecordActivity::kActTypeFieldNumber;
const int RecordActivity::kTotalAttendFieldNumber;
const int RecordActivity::kSub1KeyFieldNumber;
const int RecordActivity::kSub1ValueFieldNumber;
const int RecordActivity::kSub2KeyFieldNumber;
const int RecordActivity::kSub2ValueFieldNumber;
const int RecordActivity::kSub3FieldNumber;
#endif  // !_MSC_VER

RecordActivity::RecordActivity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecordActivity::InitAsDefaultInstance() {
}

RecordActivity::RecordActivity(const RecordActivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecordActivity::SharedCtor() {
  _cached_size_ = 0;
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = GOOGLE_LONGLONG(0);
  act_type_ = 0;
  total_attend_ = 0;
  sub1_key_ = 0;
  sub1_value_ = 0;
  sub2_key_ = 0;
  sub2_value_ = 0;
  sub3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordActivity::~RecordActivity() {
  SharedDtor();
}

void RecordActivity::SharedDtor() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (sub3_ != &::google::protobuf::internal::kEmptyString) {
    delete sub3_;
  }
  if (this != default_instance_) {
  }
}

void RecordActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordActivity_descriptor_;
}

const RecordActivity& RecordActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoInnerPublic_2eproto();  return *default_instance_;
}

RecordActivity* RecordActivity::default_instance_ = NULL;

RecordActivity* RecordActivity::New() const {
  return new RecordActivity;
}

void RecordActivity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::kEmptyString) {
        table_name_->clear();
      }
    }
    time_ = GOOGLE_LONGLONG(0);
    act_type_ = 0;
    total_attend_ = 0;
    sub1_key_ = 0;
    sub1_value_ = 0;
    sub2_key_ = 0;
    sub2_value_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_sub3()) {
      if (sub3_ != &::google::protobuf::internal::kEmptyString) {
        sub3_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }
      
      // optional int64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_act_type;
        break;
      }
      
      // optional int32 act_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_act_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &act_type_)));
          set_has_act_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total_attend;
        break;
      }
      
      // optional int32 total_attend = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_attend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_attend_)));
          set_has_total_attend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sub1_key;
        break;
      }
      
      // optional int32 sub1_key = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub1_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub1_key_)));
          set_has_sub1_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sub1_value;
        break;
      }
      
      // optional int32 sub1_value = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub1_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub1_value_)));
          set_has_sub1_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_sub2_key;
        break;
      }
      
      // optional int32 sub2_key = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub2_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub2_key_)));
          set_has_sub2_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_sub2_value;
        break;
      }
      
      // optional int32 sub2_value = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub2_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub2_value_)));
          set_has_sub2_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_sub3;
        break;
      }
      
      // optional string sub3 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sub3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sub3()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sub3().data(), this->sub3().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecordActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->table_name(), output);
  }
  
  // optional int64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time(), output);
  }
  
  // optional int32 act_type = 3;
  if (has_act_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->act_type(), output);
  }
  
  // optional int32 total_attend = 4;
  if (has_total_attend()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->total_attend(), output);
  }
  
  // optional int32 sub1_key = 5;
  if (has_sub1_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sub1_key(), output);
  }
  
  // optional int32 sub1_value = 6;
  if (has_sub1_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sub1_value(), output);
  }
  
  // optional int32 sub2_key = 7;
  if (has_sub2_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->sub2_key(), output);
  }
  
  // optional int32 sub2_value = 8;
  if (has_sub2_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->sub2_value(), output);
  }
  
  // optional string sub3 = 9;
  if (has_sub3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sub3().data(), this->sub3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->sub3(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecordActivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }
  
  // optional int64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time(), target);
  }
  
  // optional int32 act_type = 3;
  if (has_act_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->act_type(), target);
  }
  
  // optional int32 total_attend = 4;
  if (has_total_attend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->total_attend(), target);
  }
  
  // optional int32 sub1_key = 5;
  if (has_sub1_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sub1_key(), target);
  }
  
  // optional int32 sub1_value = 6;
  if (has_sub1_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sub1_value(), target);
  }
  
  // optional int32 sub2_key = 7;
  if (has_sub2_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->sub2_key(), target);
  }
  
  // optional int32 sub2_value = 8;
  if (has_sub2_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->sub2_value(), target);
  }
  
  // optional string sub3 = 9;
  if (has_sub3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sub3().data(), this->sub3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->sub3(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecordActivity::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }
    
    // optional int64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }
    
    // optional int32 act_type = 3;
    if (has_act_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->act_type());
    }
    
    // optional int32 total_attend = 4;
    if (has_total_attend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_attend());
    }
    
    // optional int32 sub1_key = 5;
    if (has_sub1_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sub1_key());
    }
    
    // optional int32 sub1_value = 6;
    if (has_sub1_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sub1_value());
    }
    
    // optional int32 sub2_key = 7;
    if (has_sub2_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sub2_key());
    }
    
    // optional int32 sub2_value = 8;
    if (has_sub2_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sub2_value());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string sub3 = 9;
    if (has_sub3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sub3());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordActivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecordActivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecordActivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecordActivity::MergeFrom(const RecordActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_act_type()) {
      set_act_type(from.act_type());
    }
    if (from.has_total_attend()) {
      set_total_attend(from.total_attend());
    }
    if (from.has_sub1_key()) {
      set_sub1_key(from.sub1_key());
    }
    if (from.has_sub1_value()) {
      set_sub1_value(from.sub1_value());
    }
    if (from.has_sub2_key()) {
      set_sub2_key(from.sub2_key());
    }
    if (from.has_sub2_value()) {
      set_sub2_value(from.sub2_value());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sub3()) {
      set_sub3(from.sub3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordActivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordActivity::CopyFrom(const RecordActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordActivity::IsInitialized() const {
  
  return true;
}

void RecordActivity::Swap(RecordActivity* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    std::swap(time_, other->time_);
    std::swap(act_type_, other->act_type_);
    std::swap(total_attend_, other->total_attend_);
    std::swap(sub1_key_, other->sub1_key_);
    std::swap(sub1_value_, other->sub1_value_);
    std::swap(sub2_key_, other->sub2_key_);
    std::swap(sub2_value_, other->sub2_value_);
    std::swap(sub3_, other->sub3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecordActivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordActivity_descriptor_;
  metadata.reflection = RecordActivity_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
