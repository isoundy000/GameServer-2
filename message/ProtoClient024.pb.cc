// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoClient024.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Proto10102072_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto10102072_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto50102072_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto50102072_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto80101502_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto80101502_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto80101503_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto80101503_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto50102073_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto50102073_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto50102074_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto50102074_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto50401704_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto50401704_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto10102075_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto10102075_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto50102075_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto50102075_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto10401705_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto10401705_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto50401705_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto50401705_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoClient024_2eproto() {
  protobuf_AddDesc_ProtoClient024_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoClient024.proto");
  GOOGLE_CHECK(file != NULL);
  Proto10102072_descriptor_ = file->message_type(0);
  static const int Proto10102072_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10102072, type_),
  };
  Proto10102072_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto10102072_descriptor_,
      Proto10102072::default_instance_,
      Proto10102072_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10102072, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10102072, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto10102072));
  Proto50102072_descriptor_ = file->message_type(1);
  static const int Proto50102072_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50102072, ret_),
  };
  Proto50102072_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto50102072_descriptor_,
      Proto50102072::default_instance_,
      Proto50102072_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50102072, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50102072, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto50102072));
  Proto80101502_descriptor_ = file->message_type(2);
  static const int Proto80101502_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80101502, left_teamers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80101502, left_team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80101502, right_teamers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80101502, right_team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80101502, my_team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80101502, fight_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80101502, left_tick_),
  };
  Proto80101502_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto80101502_descriptor_,
      Proto80101502::default_instance_,
      Proto80101502_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80101502, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80101502, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto80101502));
  Proto80101503_descriptor_ = file->message_type(3);
  static const int Proto80101503_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80101503, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80101503, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80101503, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80101503, reward_id_),
  };
  Proto80101503_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto80101503_descriptor_,
      Proto80101503::default_instance_,
      Proto80101503_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80101503, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto80101503, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto80101503));
  Proto50102073_descriptor_ = file->message_type(4);
  static const int Proto50102073_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50102073, buy_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50102073, max_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50102073, server_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50102073, score_),
  };
  Proto50102073_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto50102073_descriptor_,
      Proto50102073::default_instance_,
      Proto50102073_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50102073, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50102073, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto50102073));
  Proto50102074_descriptor_ = file->message_type(5);
  static const int Proto50102074_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50102074, all_item_set_),
  };
  Proto50102074_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto50102074_descriptor_,
      Proto50102074::default_instance_,
      Proto50102074_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50102074, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50102074, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto50102074));
  Proto50401704_descriptor_ = file->message_type(6);
  static const int Proto50401704_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50401704, fight_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50401704, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50401704, leader_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50401704, team_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50401704, add_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50401704, teamer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50401704, quality_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50401704, knockout_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50401704, left_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50401704, is_prep_),
  };
  Proto50401704_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto50401704_descriptor_,
      Proto50401704::default_instance_,
      Proto50401704_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50401704, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50401704, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto50401704));
  Proto10102075_descriptor_ = file->message_type(7);
  static const int Proto10102075_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10102075, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10102075, times_),
  };
  Proto10102075_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto10102075_descriptor_,
      Proto10102075::default_instance_,
      Proto10102075_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10102075, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10102075, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto10102075));
  Proto50102075_descriptor_ = file->message_type(8);
  static const int Proto50102075_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50102075, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50102075, index_),
  };
  Proto50102075_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto50102075_descriptor_,
      Proto50102075::default_instance_,
      Proto50102075_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50102075, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50102075, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto50102075));
  Proto10401705_descriptor_ = file->message_type(9);
  static const int Proto10401705_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10401705, page_),
  };
  Proto10401705_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto10401705_descriptor_,
      Proto10401705::default_instance_,
      Proto10401705_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10401705, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto10401705, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto10401705));
  Proto50401705_descriptor_ = file->message_type(10);
  static const int Proto50401705_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50401705, team_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50401705, my_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50401705, cur_page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50401705, total_page_),
  };
  Proto50401705_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto50401705_descriptor_,
      Proto50401705::default_instance_,
      Proto50401705_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50401705, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto50401705, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto50401705));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoClient024_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto10102072_descriptor_, &Proto10102072::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto50102072_descriptor_, &Proto50102072::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto80101502_descriptor_, &Proto80101502::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto80101503_descriptor_, &Proto80101503::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto50102073_descriptor_, &Proto50102073::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto50102074_descriptor_, &Proto50102074::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto50401704_descriptor_, &Proto50401704::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto10102075_descriptor_, &Proto10102075::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto50102075_descriptor_, &Proto50102075::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto10401705_descriptor_, &Proto10401705::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto50401705_descriptor_, &Proto50401705::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoClient024_2eproto() {
  delete Proto10102072::default_instance_;
  delete Proto10102072_reflection_;
  delete Proto50102072::default_instance_;
  delete Proto50102072_reflection_;
  delete Proto80101502::default_instance_;
  delete Proto80101502_reflection_;
  delete Proto80101503::default_instance_;
  delete Proto80101503_reflection_;
  delete Proto50102073::default_instance_;
  delete Proto50102073_reflection_;
  delete Proto50102074::default_instance_;
  delete Proto50102074_reflection_;
  delete Proto50401704::default_instance_;
  delete Proto50401704_reflection_;
  delete Proto10102075::default_instance_;
  delete Proto10102075_reflection_;
  delete Proto50102075::default_instance_;
  delete Proto50102075_reflection_;
  delete Proto10401705::default_instance_;
  delete Proto10401705_reflection_;
  delete Proto50401705::default_instance_;
  delete Proto50401705_reflection_;
}

void protobuf_AddDesc_ProtoClient024_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_ProtoPublic_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024ProtoClient024.proto\032\021ProtoPublic.prot"
    "o\"\035\n\rProto10102072\022\014\n\004type\030\001 \001(\005\"\034\n\rProt"
    "o50102072\022\013\n\003ret\030\001 \001(\005\"\315\001\n\rProto80101502"
    "\022(\n\014left_teamers\030\001 \003(\0132\022.ProtoTravelTeam"
    "er\022\024\n\014left_team_id\030\002 \001(\003\022)\n\rright_teamer"
    "s\030\003 \003(\0132\022.ProtoTravelTeamer\022\025\n\rright_tea"
    "m_id\030\004 \001(\003\022\022\n\nmy_team_id\030\005 \001(\003\022\023\n\013fight_"
    "state\030\006 \001(\005\022\021\n\tleft_tick\030\007 \001(\005\"M\n\rProto8"
    "0101503\022\014\n\004flag\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\r\n\005s"
    "core\030\003 \001(\005\022\021\n\treward_id\030\004 \001(\005\"o\n\rProto50"
    "102073\022\021\n\tbuy_times\030\001 \001(\005\022\021\n\tmax_times\030\002"
    " \001(\005\022)\n\rserver_record\030\003 \003(\0132\022.ProtoServe"
    "rRecord\022\r\n\005score\030\004 \001(\005\"8\n\rProto50102074\022"
    "\'\n\014all_item_set\030\001 \003(\0132\021.SpecialBoxChange"
    "\"\211\002\n\rProto50401704\022\022\n\nfight_type\030\001 \001(\005\022\017"
    "\n\007team_id\030\002 \001(\003\022\021\n\tleader_id\030\003 \001(\003\022\021\n\tte"
    "am_name\030\004 \001(\t\022\017\n\007add_exp\030\005 \001(\005\022\034\n\006teamer"
    "\030\006 \003(\0132\014.ProtoTeamer\022+\n\014quality_info\030\007 \001"
    "(\0132\025.ProtoPeakQualityInfo\022-\n\rknockout_in"
    "fo\030\010 \001(\0132\026.ProtoPeakKnockoutInfo\022\021\n\tleft"
    "_tick\030\t \001(\005\022\017\n\007is_prep\030\n \001(\005\"-\n\rProto101"
    "02075\022\r\n\005index\030\001 \001(\005\022\r\n\005times\030\002 \001(\005\"+\n\rP"
    "roto50102075\022\013\n\003ret\030\001 \001(\005\022\r\n\005index\030\002 \001(\005"
    "\"\035\n\rProto10401705\022\014\n\004page\030\001 \001(\005\"\177\n\rProto"
    "50401705\022$\n\tteam_list\030\001 \003(\0132\021.ProtoQuali"
    "tyRank\022\"\n\007my_team\030\002 \001(\0132\021.ProtoQualityRa"
    "nk\022\020\n\010cur_page\030\003 \001(\005\022\022\n\ntotal_page\030\004 \001(\005", 1080);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoClient024.proto", &protobuf_RegisterTypes);
  Proto10102072::default_instance_ = new Proto10102072();
  Proto50102072::default_instance_ = new Proto50102072();
  Proto80101502::default_instance_ = new Proto80101502();
  Proto80101503::default_instance_ = new Proto80101503();
  Proto50102073::default_instance_ = new Proto50102073();
  Proto50102074::default_instance_ = new Proto50102074();
  Proto50401704::default_instance_ = new Proto50401704();
  Proto10102075::default_instance_ = new Proto10102075();
  Proto50102075::default_instance_ = new Proto50102075();
  Proto10401705::default_instance_ = new Proto10401705();
  Proto50401705::default_instance_ = new Proto50401705();
  Proto10102072::default_instance_->InitAsDefaultInstance();
  Proto50102072::default_instance_->InitAsDefaultInstance();
  Proto80101502::default_instance_->InitAsDefaultInstance();
  Proto80101503::default_instance_->InitAsDefaultInstance();
  Proto50102073::default_instance_->InitAsDefaultInstance();
  Proto50102074::default_instance_->InitAsDefaultInstance();
  Proto50401704::default_instance_->InitAsDefaultInstance();
  Proto10102075::default_instance_->InitAsDefaultInstance();
  Proto50102075::default_instance_->InitAsDefaultInstance();
  Proto10401705::default_instance_->InitAsDefaultInstance();
  Proto50401705::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoClient024_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoClient024_2eproto {
  StaticDescriptorInitializer_ProtoClient024_2eproto() {
    protobuf_AddDesc_ProtoClient024_2eproto();
  }
} static_descriptor_initializer_ProtoClient024_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Proto10102072::kTypeFieldNumber;
#endif  // !_MSC_VER

Proto10102072::Proto10102072()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto10102072::InitAsDefaultInstance() {
}

Proto10102072::Proto10102072(const Proto10102072& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto10102072::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto10102072::~Proto10102072() {
  SharedDtor();
}

void Proto10102072::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto10102072::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto10102072::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto10102072_descriptor_;
}

const Proto10102072& Proto10102072::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient024_2eproto();  return *default_instance_;
}

Proto10102072* Proto10102072::default_instance_ = NULL;

Proto10102072* Proto10102072::New() const {
  return new Proto10102072;
}

void Proto10102072::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto10102072::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto10102072::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto10102072::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto10102072::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto10102072::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto10102072* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto10102072*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto10102072::MergeFrom(const Proto10102072& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto10102072::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto10102072::CopyFrom(const Proto10102072& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto10102072::IsInitialized() const {
  
  return true;
}

void Proto10102072::Swap(Proto10102072* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto10102072::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto10102072_descriptor_;
  metadata.reflection = Proto10102072_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto50102072::kRetFieldNumber;
#endif  // !_MSC_VER

Proto50102072::Proto50102072()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto50102072::InitAsDefaultInstance() {
}

Proto50102072::Proto50102072(const Proto50102072& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto50102072::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto50102072::~Proto50102072() {
  SharedDtor();
}

void Proto50102072::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto50102072::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto50102072::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto50102072_descriptor_;
}

const Proto50102072& Proto50102072::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient024_2eproto();  return *default_instance_;
}

Proto50102072* Proto50102072::default_instance_ = NULL;

Proto50102072* Proto50102072::New() const {
  return new Proto50102072;
}

void Proto50102072::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto50102072::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto50102072::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto50102072::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto50102072::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto50102072::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto50102072* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto50102072*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto50102072::MergeFrom(const Proto50102072& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto50102072::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto50102072::CopyFrom(const Proto50102072& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto50102072::IsInitialized() const {
  
  return true;
}

void Proto50102072::Swap(Proto50102072* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto50102072::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto50102072_descriptor_;
  metadata.reflection = Proto50102072_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto80101502::kLeftTeamersFieldNumber;
const int Proto80101502::kLeftTeamIdFieldNumber;
const int Proto80101502::kRightTeamersFieldNumber;
const int Proto80101502::kRightTeamIdFieldNumber;
const int Proto80101502::kMyTeamIdFieldNumber;
const int Proto80101502::kFightStateFieldNumber;
const int Proto80101502::kLeftTickFieldNumber;
#endif  // !_MSC_VER

Proto80101502::Proto80101502()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto80101502::InitAsDefaultInstance() {
}

Proto80101502::Proto80101502(const Proto80101502& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto80101502::SharedCtor() {
  _cached_size_ = 0;
  left_team_id_ = GOOGLE_LONGLONG(0);
  right_team_id_ = GOOGLE_LONGLONG(0);
  my_team_id_ = GOOGLE_LONGLONG(0);
  fight_state_ = 0;
  left_tick_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto80101502::~Proto80101502() {
  SharedDtor();
}

void Proto80101502::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto80101502::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto80101502::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto80101502_descriptor_;
}

const Proto80101502& Proto80101502::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient024_2eproto();  return *default_instance_;
}

Proto80101502* Proto80101502::default_instance_ = NULL;

Proto80101502* Proto80101502::New() const {
  return new Proto80101502;
}

void Proto80101502::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    left_team_id_ = GOOGLE_LONGLONG(0);
    right_team_id_ = GOOGLE_LONGLONG(0);
    my_team_id_ = GOOGLE_LONGLONG(0);
    fight_state_ = 0;
    left_tick_ = 0;
  }
  left_teamers_.Clear();
  right_teamers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto80101502::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoTravelTeamer left_teamers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_left_teamers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_left_teamers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_left_teamers;
        if (input->ExpectTag(16)) goto parse_left_team_id;
        break;
      }
      
      // optional int64 left_team_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &left_team_id_)));
          set_has_left_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_right_teamers;
        break;
      }
      
      // repeated .ProtoTravelTeamer right_teamers = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_right_teamers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_right_teamers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_right_teamers;
        if (input->ExpectTag(32)) goto parse_right_team_id;
        break;
      }
      
      // optional int64 right_team_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_right_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &right_team_id_)));
          set_has_right_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_my_team_id;
        break;
      }
      
      // optional int64 my_team_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_my_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &my_team_id_)));
          set_has_my_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_fight_state;
        break;
      }
      
      // optional int32 fight_state = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_state_)));
          set_has_fight_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_left_tick;
        break;
      }
      
      // optional int32 left_tick = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_tick_)));
          set_has_left_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto80101502::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoTravelTeamer left_teamers = 1;
  for (int i = 0; i < this->left_teamers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->left_teamers(i), output);
  }
  
  // optional int64 left_team_id = 2;
  if (has_left_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->left_team_id(), output);
  }
  
  // repeated .ProtoTravelTeamer right_teamers = 3;
  for (int i = 0; i < this->right_teamers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->right_teamers(i), output);
  }
  
  // optional int64 right_team_id = 4;
  if (has_right_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->right_team_id(), output);
  }
  
  // optional int64 my_team_id = 5;
  if (has_my_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->my_team_id(), output);
  }
  
  // optional int32 fight_state = 6;
  if (has_fight_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->fight_state(), output);
  }
  
  // optional int32 left_tick = 7;
  if (has_left_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->left_tick(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto80101502::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoTravelTeamer left_teamers = 1;
  for (int i = 0; i < this->left_teamers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->left_teamers(i), target);
  }
  
  // optional int64 left_team_id = 2;
  if (has_left_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->left_team_id(), target);
  }
  
  // repeated .ProtoTravelTeamer right_teamers = 3;
  for (int i = 0; i < this->right_teamers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->right_teamers(i), target);
  }
  
  // optional int64 right_team_id = 4;
  if (has_right_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->right_team_id(), target);
  }
  
  // optional int64 my_team_id = 5;
  if (has_my_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->my_team_id(), target);
  }
  
  // optional int32 fight_state = 6;
  if (has_fight_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->fight_state(), target);
  }
  
  // optional int32 left_tick = 7;
  if (has_left_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->left_tick(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto80101502::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int64 left_team_id = 2;
    if (has_left_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->left_team_id());
    }
    
    // optional int64 right_team_id = 4;
    if (has_right_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->right_team_id());
    }
    
    // optional int64 my_team_id = 5;
    if (has_my_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->my_team_id());
    }
    
    // optional int32 fight_state = 6;
    if (has_fight_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight_state());
    }
    
    // optional int32 left_tick = 7;
    if (has_left_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_tick());
    }
    
  }
  // repeated .ProtoTravelTeamer left_teamers = 1;
  total_size += 1 * this->left_teamers_size();
  for (int i = 0; i < this->left_teamers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->left_teamers(i));
  }
  
  // repeated .ProtoTravelTeamer right_teamers = 3;
  total_size += 1 * this->right_teamers_size();
  for (int i = 0; i < this->right_teamers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->right_teamers(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto80101502::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto80101502* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto80101502*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto80101502::MergeFrom(const Proto80101502& from) {
  GOOGLE_CHECK_NE(&from, this);
  left_teamers_.MergeFrom(from.left_teamers_);
  right_teamers_.MergeFrom(from.right_teamers_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_left_team_id()) {
      set_left_team_id(from.left_team_id());
    }
    if (from.has_right_team_id()) {
      set_right_team_id(from.right_team_id());
    }
    if (from.has_my_team_id()) {
      set_my_team_id(from.my_team_id());
    }
    if (from.has_fight_state()) {
      set_fight_state(from.fight_state());
    }
    if (from.has_left_tick()) {
      set_left_tick(from.left_tick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto80101502::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto80101502::CopyFrom(const Proto80101502& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto80101502::IsInitialized() const {
  
  return true;
}

void Proto80101502::Swap(Proto80101502* other) {
  if (other != this) {
    left_teamers_.Swap(&other->left_teamers_);
    std::swap(left_team_id_, other->left_team_id_);
    right_teamers_.Swap(&other->right_teamers_);
    std::swap(right_team_id_, other->right_team_id_);
    std::swap(my_team_id_, other->my_team_id_);
    std::swap(fight_state_, other->fight_state_);
    std::swap(left_tick_, other->left_tick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto80101502::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto80101502_descriptor_;
  metadata.reflection = Proto80101502_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto80101503::kFlagFieldNumber;
const int Proto80101503::kNameFieldNumber;
const int Proto80101503::kScoreFieldNumber;
const int Proto80101503::kRewardIdFieldNumber;
#endif  // !_MSC_VER

Proto80101503::Proto80101503()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto80101503::InitAsDefaultInstance() {
}

Proto80101503::Proto80101503(const Proto80101503& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto80101503::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_ = 0;
  reward_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto80101503::~Proto80101503() {
  SharedDtor();
}

void Proto80101503::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Proto80101503::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto80101503::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto80101503_descriptor_;
}

const Proto80101503& Proto80101503::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient024_2eproto();  return *default_instance_;
}

Proto80101503* Proto80101503::default_instance_ = NULL;

Proto80101503* Proto80101503::New() const {
  return new Proto80101503;
}

void Proto80101503::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flag_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    score_ = 0;
    reward_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto80101503::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }
      
      // optional int32 score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reward_id;
        break;
      }
      
      // optional int32 reward_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id_)));
          set_has_reward_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto80101503::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional int32 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->score(), output);
  }
  
  // optional int32 reward_id = 4;
  if (has_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->reward_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto80101503::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional int32 score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->score(), target);
  }
  
  // optional int32 reward_id = 4;
  if (has_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->reward_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto80101503::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }
    
    // optional int32 reward_id = 4;
    if (has_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto80101503::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto80101503* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto80101503*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto80101503::MergeFrom(const Proto80101503& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_reward_id()) {
      set_reward_id(from.reward_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto80101503::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto80101503::CopyFrom(const Proto80101503& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto80101503::IsInitialized() const {
  
  return true;
}

void Proto80101503::Swap(Proto80101503* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(name_, other->name_);
    std::swap(score_, other->score_);
    std::swap(reward_id_, other->reward_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto80101503::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto80101503_descriptor_;
  metadata.reflection = Proto80101503_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto50102073::kBuyTimesFieldNumber;
const int Proto50102073::kMaxTimesFieldNumber;
const int Proto50102073::kServerRecordFieldNumber;
const int Proto50102073::kScoreFieldNumber;
#endif  // !_MSC_VER

Proto50102073::Proto50102073()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto50102073::InitAsDefaultInstance() {
}

Proto50102073::Proto50102073(const Proto50102073& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto50102073::SharedCtor() {
  _cached_size_ = 0;
  buy_times_ = 0;
  max_times_ = 0;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto50102073::~Proto50102073() {
  SharedDtor();
}

void Proto50102073::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto50102073::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto50102073::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto50102073_descriptor_;
}

const Proto50102073& Proto50102073::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient024_2eproto();  return *default_instance_;
}

Proto50102073* Proto50102073::default_instance_ = NULL;

Proto50102073* Proto50102073::New() const {
  return new Proto50102073;
}

void Proto50102073::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buy_times_ = 0;
    max_times_ = 0;
    score_ = 0;
  }
  server_record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto50102073::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 buy_times = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_times_)));
          set_has_buy_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_max_times;
        break;
      }
      
      // optional int32 max_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_times_)));
          set_has_max_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_server_record;
        break;
      }
      
      // repeated .ProtoServerRecord server_record = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_server_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_server_record;
        if (input->ExpectTag(32)) goto parse_score;
        break;
      }
      
      // optional int32 score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto50102073::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 buy_times = 1;
  if (has_buy_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buy_times(), output);
  }
  
  // optional int32 max_times = 2;
  if (has_max_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_times(), output);
  }
  
  // repeated .ProtoServerRecord server_record = 3;
  for (int i = 0; i < this->server_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->server_record(i), output);
  }
  
  // optional int32 score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->score(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto50102073::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 buy_times = 1;
  if (has_buy_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buy_times(), target);
  }
  
  // optional int32 max_times = 2;
  if (has_max_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_times(), target);
  }
  
  // repeated .ProtoServerRecord server_record = 3;
  for (int i = 0; i < this->server_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->server_record(i), target);
  }
  
  // optional int32 score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->score(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto50102073::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 buy_times = 1;
    if (has_buy_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_times());
    }
    
    // optional int32 max_times = 2;
    if (has_max_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_times());
    }
    
    // optional int32 score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }
    
  }
  // repeated .ProtoServerRecord server_record = 3;
  total_size += 1 * this->server_record_size();
  for (int i = 0; i < this->server_record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->server_record(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto50102073::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto50102073* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto50102073*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto50102073::MergeFrom(const Proto50102073& from) {
  GOOGLE_CHECK_NE(&from, this);
  server_record_.MergeFrom(from.server_record_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buy_times()) {
      set_buy_times(from.buy_times());
    }
    if (from.has_max_times()) {
      set_max_times(from.max_times());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto50102073::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto50102073::CopyFrom(const Proto50102073& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto50102073::IsInitialized() const {
  
  return true;
}

void Proto50102073::Swap(Proto50102073* other) {
  if (other != this) {
    std::swap(buy_times_, other->buy_times_);
    std::swap(max_times_, other->max_times_);
    server_record_.Swap(&other->server_record_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto50102073::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto50102073_descriptor_;
  metadata.reflection = Proto50102073_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto50102074::kAllItemSetFieldNumber;
#endif  // !_MSC_VER

Proto50102074::Proto50102074()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto50102074::InitAsDefaultInstance() {
}

Proto50102074::Proto50102074(const Proto50102074& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto50102074::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto50102074::~Proto50102074() {
  SharedDtor();
}

void Proto50102074::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto50102074::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto50102074::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto50102074_descriptor_;
}

const Proto50102074& Proto50102074::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient024_2eproto();  return *default_instance_;
}

Proto50102074* Proto50102074::default_instance_ = NULL;

Proto50102074* Proto50102074::New() const {
  return new Proto50102074;
}

void Proto50102074::Clear() {
  all_item_set_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto50102074::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SpecialBoxChange all_item_set = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_all_item_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_all_item_set()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_all_item_set;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto50102074::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SpecialBoxChange all_item_set = 1;
  for (int i = 0; i < this->all_item_set_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->all_item_set(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto50102074::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SpecialBoxChange all_item_set = 1;
  for (int i = 0; i < this->all_item_set_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->all_item_set(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto50102074::ByteSize() const {
  int total_size = 0;
  
  // repeated .SpecialBoxChange all_item_set = 1;
  total_size += 1 * this->all_item_set_size();
  for (int i = 0; i < this->all_item_set_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->all_item_set(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto50102074::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto50102074* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto50102074*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto50102074::MergeFrom(const Proto50102074& from) {
  GOOGLE_CHECK_NE(&from, this);
  all_item_set_.MergeFrom(from.all_item_set_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto50102074::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto50102074::CopyFrom(const Proto50102074& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto50102074::IsInitialized() const {
  
  return true;
}

void Proto50102074::Swap(Proto50102074* other) {
  if (other != this) {
    all_item_set_.Swap(&other->all_item_set_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto50102074::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto50102074_descriptor_;
  metadata.reflection = Proto50102074_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto50401704::kFightTypeFieldNumber;
const int Proto50401704::kTeamIdFieldNumber;
const int Proto50401704::kLeaderIdFieldNumber;
const int Proto50401704::kTeamNameFieldNumber;
const int Proto50401704::kAddExpFieldNumber;
const int Proto50401704::kTeamerFieldNumber;
const int Proto50401704::kQualityInfoFieldNumber;
const int Proto50401704::kKnockoutInfoFieldNumber;
const int Proto50401704::kLeftTickFieldNumber;
const int Proto50401704::kIsPrepFieldNumber;
#endif  // !_MSC_VER

Proto50401704::Proto50401704()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto50401704::InitAsDefaultInstance() {
  quality_info_ = const_cast< ::ProtoPeakQualityInfo*>(&::ProtoPeakQualityInfo::default_instance());
  knockout_info_ = const_cast< ::ProtoPeakKnockoutInfo*>(&::ProtoPeakKnockoutInfo::default_instance());
}

Proto50401704::Proto50401704(const Proto50401704& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto50401704::SharedCtor() {
  _cached_size_ = 0;
  fight_type_ = 0;
  team_id_ = GOOGLE_LONGLONG(0);
  leader_id_ = GOOGLE_LONGLONG(0);
  team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  add_exp_ = 0;
  quality_info_ = NULL;
  knockout_info_ = NULL;
  left_tick_ = 0;
  is_prep_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto50401704::~Proto50401704() {
  SharedDtor();
}

void Proto50401704::SharedDtor() {
  if (team_name_ != &::google::protobuf::internal::kEmptyString) {
    delete team_name_;
  }
  if (this != default_instance_) {
    delete quality_info_;
    delete knockout_info_;
  }
}

void Proto50401704::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto50401704::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto50401704_descriptor_;
}

const Proto50401704& Proto50401704::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient024_2eproto();  return *default_instance_;
}

Proto50401704* Proto50401704::default_instance_ = NULL;

Proto50401704* Proto50401704::New() const {
  return new Proto50401704;
}

void Proto50401704::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fight_type_ = 0;
    team_id_ = GOOGLE_LONGLONG(0);
    leader_id_ = GOOGLE_LONGLONG(0);
    if (has_team_name()) {
      if (team_name_ != &::google::protobuf::internal::kEmptyString) {
        team_name_->clear();
      }
    }
    add_exp_ = 0;
    if (has_quality_info()) {
      if (quality_info_ != NULL) quality_info_->::ProtoPeakQualityInfo::Clear();
    }
    if (has_knockout_info()) {
      if (knockout_info_ != NULL) knockout_info_->::ProtoPeakKnockoutInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    left_tick_ = 0;
    is_prep_ = 0;
  }
  teamer_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto50401704::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fight_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_type_)));
          set_has_fight_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team_id;
        break;
      }
      
      // optional int64 team_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_leader_id;
        break;
      }
      
      // optional int64 leader_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &leader_id_)));
          set_has_leader_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_team_name;
        break;
      }
      
      // optional string team_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_add_exp;
        break;
      }
      
      // optional int32 add_exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_exp_)));
          set_has_add_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_teamer;
        break;
      }
      
      // repeated .ProtoTeamer teamer = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_teamer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teamer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_teamer;
        if (input->ExpectTag(58)) goto parse_quality_info;
        break;
      }
      
      // optional .ProtoPeakQualityInfo quality_info = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quality_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quality_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_knockout_info;
        break;
      }
      
      // optional .ProtoPeakKnockoutInfo knockout_info = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_knockout_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_knockout_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_left_tick;
        break;
      }
      
      // optional int32 left_tick = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_tick_)));
          set_has_left_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_is_prep;
        break;
      }
      
      // optional int32 is_prep = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_prep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_prep_)));
          set_has_is_prep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto50401704::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 fight_type = 1;
  if (has_fight_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fight_type(), output);
  }
  
  // optional int64 team_id = 2;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->team_id(), output);
  }
  
  // optional int64 leader_id = 3;
  if (has_leader_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->leader_id(), output);
  }
  
  // optional string team_name = 4;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->team_name(), output);
  }
  
  // optional int32 add_exp = 5;
  if (has_add_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->add_exp(), output);
  }
  
  // repeated .ProtoTeamer teamer = 6;
  for (int i = 0; i < this->teamer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->teamer(i), output);
  }
  
  // optional .ProtoPeakQualityInfo quality_info = 7;
  if (has_quality_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->quality_info(), output);
  }
  
  // optional .ProtoPeakKnockoutInfo knockout_info = 8;
  if (has_knockout_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->knockout_info(), output);
  }
  
  // optional int32 left_tick = 9;
  if (has_left_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->left_tick(), output);
  }
  
  // optional int32 is_prep = 10;
  if (has_is_prep()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->is_prep(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto50401704::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 fight_type = 1;
  if (has_fight_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fight_type(), target);
  }
  
  // optional int64 team_id = 2;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->team_id(), target);
  }
  
  // optional int64 leader_id = 3;
  if (has_leader_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->leader_id(), target);
  }
  
  // optional string team_name = 4;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->team_name(), target);
  }
  
  // optional int32 add_exp = 5;
  if (has_add_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->add_exp(), target);
  }
  
  // repeated .ProtoTeamer teamer = 6;
  for (int i = 0; i < this->teamer_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->teamer(i), target);
  }
  
  // optional .ProtoPeakQualityInfo quality_info = 7;
  if (has_quality_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->quality_info(), target);
  }
  
  // optional .ProtoPeakKnockoutInfo knockout_info = 8;
  if (has_knockout_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->knockout_info(), target);
  }
  
  // optional int32 left_tick = 9;
  if (has_left_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->left_tick(), target);
  }
  
  // optional int32 is_prep = 10;
  if (has_is_prep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->is_prep(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto50401704::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 fight_type = 1;
    if (has_fight_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight_type());
    }
    
    // optional int64 team_id = 2;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->team_id());
    }
    
    // optional int64 leader_id = 3;
    if (has_leader_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->leader_id());
    }
    
    // optional string team_name = 4;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }
    
    // optional int32 add_exp = 5;
    if (has_add_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->add_exp());
    }
    
    // optional .ProtoPeakQualityInfo quality_info = 7;
    if (has_quality_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quality_info());
    }
    
    // optional .ProtoPeakKnockoutInfo knockout_info = 8;
    if (has_knockout_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->knockout_info());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 left_tick = 9;
    if (has_left_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_tick());
    }
    
    // optional int32 is_prep = 10;
    if (has_is_prep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_prep());
    }
    
  }
  // repeated .ProtoTeamer teamer = 6;
  total_size += 1 * this->teamer_size();
  for (int i = 0; i < this->teamer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teamer(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto50401704::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto50401704* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto50401704*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto50401704::MergeFrom(const Proto50401704& from) {
  GOOGLE_CHECK_NE(&from, this);
  teamer_.MergeFrom(from.teamer_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fight_type()) {
      set_fight_type(from.fight_type());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_leader_id()) {
      set_leader_id(from.leader_id());
    }
    if (from.has_team_name()) {
      set_team_name(from.team_name());
    }
    if (from.has_add_exp()) {
      set_add_exp(from.add_exp());
    }
    if (from.has_quality_info()) {
      mutable_quality_info()->::ProtoPeakQualityInfo::MergeFrom(from.quality_info());
    }
    if (from.has_knockout_info()) {
      mutable_knockout_info()->::ProtoPeakKnockoutInfo::MergeFrom(from.knockout_info());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_left_tick()) {
      set_left_tick(from.left_tick());
    }
    if (from.has_is_prep()) {
      set_is_prep(from.is_prep());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto50401704::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto50401704::CopyFrom(const Proto50401704& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto50401704::IsInitialized() const {
  
  return true;
}

void Proto50401704::Swap(Proto50401704* other) {
  if (other != this) {
    std::swap(fight_type_, other->fight_type_);
    std::swap(team_id_, other->team_id_);
    std::swap(leader_id_, other->leader_id_);
    std::swap(team_name_, other->team_name_);
    std::swap(add_exp_, other->add_exp_);
    teamer_.Swap(&other->teamer_);
    std::swap(quality_info_, other->quality_info_);
    std::swap(knockout_info_, other->knockout_info_);
    std::swap(left_tick_, other->left_tick_);
    std::swap(is_prep_, other->is_prep_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto50401704::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto50401704_descriptor_;
  metadata.reflection = Proto50401704_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto10102075::kIndexFieldNumber;
const int Proto10102075::kTimesFieldNumber;
#endif  // !_MSC_VER

Proto10102075::Proto10102075()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto10102075::InitAsDefaultInstance() {
}

Proto10102075::Proto10102075(const Proto10102075& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto10102075::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto10102075::~Proto10102075() {
  SharedDtor();
}

void Proto10102075::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto10102075::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto10102075::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto10102075_descriptor_;
}

const Proto10102075& Proto10102075::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient024_2eproto();  return *default_instance_;
}

Proto10102075* Proto10102075::default_instance_ = NULL;

Proto10102075* Proto10102075::New() const {
  return new Proto10102075;
}

void Proto10102075::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto10102075::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_times;
        break;
      }
      
      // optional int32 times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto10102075::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }
  
  // optional int32 times = 2;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->times(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto10102075::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }
  
  // optional int32 times = 2;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->times(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto10102075::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional int32 times = 2;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto10102075::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto10102075* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto10102075*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto10102075::MergeFrom(const Proto10102075& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto10102075::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto10102075::CopyFrom(const Proto10102075& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto10102075::IsInitialized() const {
  
  return true;
}

void Proto10102075::Swap(Proto10102075* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(times_, other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto10102075::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto10102075_descriptor_;
  metadata.reflection = Proto10102075_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto50102075::kRetFieldNumber;
const int Proto50102075::kIndexFieldNumber;
#endif  // !_MSC_VER

Proto50102075::Proto50102075()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto50102075::InitAsDefaultInstance() {
}

Proto50102075::Proto50102075(const Proto50102075& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto50102075::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto50102075::~Proto50102075() {
  SharedDtor();
}

void Proto50102075::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto50102075::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto50102075::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto50102075_descriptor_;
}

const Proto50102075& Proto50102075::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient024_2eproto();  return *default_instance_;
}

Proto50102075* Proto50102075::default_instance_ = NULL;

Proto50102075* Proto50102075::New() const {
  return new Proto50102075;
}

void Proto50102075::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto50102075::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }
      
      // optional int32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto50102075::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }
  
  // optional int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto50102075::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }
  
  // optional int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto50102075::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }
    
    // optional int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto50102075::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto50102075* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto50102075*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto50102075::MergeFrom(const Proto50102075& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto50102075::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto50102075::CopyFrom(const Proto50102075& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto50102075::IsInitialized() const {
  
  return true;
}

void Proto50102075::Swap(Proto50102075* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto50102075::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto50102075_descriptor_;
  metadata.reflection = Proto50102075_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto10401705::kPageFieldNumber;
#endif  // !_MSC_VER

Proto10401705::Proto10401705()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto10401705::InitAsDefaultInstance() {
}

Proto10401705::Proto10401705(const Proto10401705& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto10401705::SharedCtor() {
  _cached_size_ = 0;
  page_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto10401705::~Proto10401705() {
  SharedDtor();
}

void Proto10401705::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto10401705::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto10401705::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto10401705_descriptor_;
}

const Proto10401705& Proto10401705::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient024_2eproto();  return *default_instance_;
}

Proto10401705* Proto10401705::default_instance_ = NULL;

Proto10401705* Proto10401705::New() const {
  return new Proto10401705;
}

void Proto10401705::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    page_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto10401705::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 page = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto10401705::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 page = 1;
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->page(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto10401705::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 page = 1;
  if (has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->page(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto10401705::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 page = 1;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto10401705::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto10401705* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto10401705*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto10401705::MergeFrom(const Proto10401705& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_page()) {
      set_page(from.page());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto10401705::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto10401705::CopyFrom(const Proto10401705& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto10401705::IsInitialized() const {
  
  return true;
}

void Proto10401705::Swap(Proto10401705* other) {
  if (other != this) {
    std::swap(page_, other->page_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto10401705::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto10401705_descriptor_;
  metadata.reflection = Proto10401705_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto50401705::kTeamListFieldNumber;
const int Proto50401705::kMyTeamFieldNumber;
const int Proto50401705::kCurPageFieldNumber;
const int Proto50401705::kTotalPageFieldNumber;
#endif  // !_MSC_VER

Proto50401705::Proto50401705()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto50401705::InitAsDefaultInstance() {
  my_team_ = const_cast< ::ProtoQualityRank*>(&::ProtoQualityRank::default_instance());
}

Proto50401705::Proto50401705(const Proto50401705& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto50401705::SharedCtor() {
  _cached_size_ = 0;
  my_team_ = NULL;
  cur_page_ = 0;
  total_page_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto50401705::~Proto50401705() {
  SharedDtor();
}

void Proto50401705::SharedDtor() {
  if (this != default_instance_) {
    delete my_team_;
  }
}

void Proto50401705::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto50401705::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto50401705_descriptor_;
}

const Proto50401705& Proto50401705::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoClient024_2eproto();  return *default_instance_;
}

Proto50401705* Proto50401705::default_instance_ = NULL;

Proto50401705* Proto50401705::New() const {
  return new Proto50401705;
}

void Proto50401705::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_my_team()) {
      if (my_team_ != NULL) my_team_->::ProtoQualityRank::Clear();
    }
    cur_page_ = 0;
    total_page_ = 0;
  }
  team_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto50401705::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoQualityRank team_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_team_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_team_list;
        if (input->ExpectTag(18)) goto parse_my_team;
        break;
      }
      
      // optional .ProtoQualityRank my_team = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_my_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_my_team()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_page;
        break;
      }
      
      // optional int32 cur_page = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_page_)));
          set_has_cur_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total_page;
        break;
      }
      
      // optional int32 total_page = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_page_)));
          set_has_total_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto50401705::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoQualityRank team_list = 1;
  for (int i = 0; i < this->team_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->team_list(i), output);
  }
  
  // optional .ProtoQualityRank my_team = 2;
  if (has_my_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->my_team(), output);
  }
  
  // optional int32 cur_page = 3;
  if (has_cur_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cur_page(), output);
  }
  
  // optional int32 total_page = 4;
  if (has_total_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->total_page(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto50401705::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoQualityRank team_list = 1;
  for (int i = 0; i < this->team_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->team_list(i), target);
  }
  
  // optional .ProtoQualityRank my_team = 2;
  if (has_my_team()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->my_team(), target);
  }
  
  // optional int32 cur_page = 3;
  if (has_cur_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cur_page(), target);
  }
  
  // optional int32 total_page = 4;
  if (has_total_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->total_page(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto50401705::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .ProtoQualityRank my_team = 2;
    if (has_my_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->my_team());
    }
    
    // optional int32 cur_page = 3;
    if (has_cur_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_page());
    }
    
    // optional int32 total_page = 4;
    if (has_total_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_page());
    }
    
  }
  // repeated .ProtoQualityRank team_list = 1;
  total_size += 1 * this->team_list_size();
  for (int i = 0; i < this->team_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->team_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto50401705::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto50401705* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto50401705*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto50401705::MergeFrom(const Proto50401705& from) {
  GOOGLE_CHECK_NE(&from, this);
  team_list_.MergeFrom(from.team_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_my_team()) {
      mutable_my_team()->::ProtoQualityRank::MergeFrom(from.my_team());
    }
    if (from.has_cur_page()) {
      set_cur_page(from.cur_page());
    }
    if (from.has_total_page()) {
      set_total_page(from.total_page());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto50401705::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto50401705::CopyFrom(const Proto50401705& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto50401705::IsInitialized() const {
  
  return true;
}

void Proto50401705::Swap(Proto50401705* other) {
  if (other != this) {
    team_list_.Swap(&other->team_list_);
    std::swap(my_team_, other->my_team_);
    std::swap(cur_page_, other->cur_page_);
    std::swap(total_page_, other->total_page_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto50401705::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto50401705_descriptor_;
  metadata.reflection = Proto50401705_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
